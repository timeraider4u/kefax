/*
 * generated by Xtext
 */
package at.jku.isse.ecco.kefax.dotconfig.serializer;

import at.jku.isse.ecco.kefax.dotconfig.dotconfig.ConfigLogic;
import at.jku.isse.ecco.kefax.dotconfig.dotconfig.ConfigString;
import at.jku.isse.ecco.kefax.dotconfig.dotconfig.DotConfigModel;
import at.jku.isse.ecco.kefax.dotconfig.dotconfig.DotconfigPackage;
import at.jku.isse.ecco.kefax.dotconfig.services.DotconfigGrammarAccess;
import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class DotconfigSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DotconfigGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == DotconfigPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case DotconfigPackage.CONFIG_LOGIC:
				sequence_Config(context, (ConfigLogic) semanticObject); 
				return; 
			case DotconfigPackage.CONFIG_STRING:
				sequence_Config(context, (ConfigString) semanticObject); 
				return; 
			case DotconfigPackage.DOT_CONFIG_MODEL:
				sequence_DotConfigModel(context, (DotConfigModel) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     ((name=SYMBOL v=LOGIC_SYM) | name=SL_COMMENT_NOT)
	 */
	protected void sequence_Config(EObject context, ConfigLogic semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=SYMBOL v=value)
	 */
	protected void sequence_Config(EObject context, ConfigString semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, DotconfigPackage.Literals.CONFIG__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DotconfigPackage.Literals.CONFIG__NAME));
			if(transientValues.isValueTransient(semanticObject, DotconfigPackage.Literals.CONFIG__V) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DotconfigPackage.Literals.CONFIG__V));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getConfigAccess().getNameSYMBOLTerminalRuleCall_0_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getConfigAccess().getVValueParserRuleCall_0_3_0(), semanticObject.getV());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (Configs+=Config? Configs+=Config*)
	 */
	protected void sequence_DotConfigModel(EObject context, DotConfigModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
