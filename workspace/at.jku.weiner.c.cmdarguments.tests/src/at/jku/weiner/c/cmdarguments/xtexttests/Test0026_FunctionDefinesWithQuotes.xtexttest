//----------------------------------------------------------------------
//----------------------------------------------------------------------
package at.jku.weiner.c.cmdarguments
language cmdArgs
// imports at.jku.weiner.c.common.common
//----------------------------------------------------------------------
split-lexer=true
source file="res/Test0026_FunctionDefinesWithQuotes.cmd"
//----------------------------------------------------------------------
lexer-tokens
	// foobar.o := -D"FOO(X)=BAR(X)"
	ID WS SKW_COLON SKW_ASSIGN WS KW_DEFINE QUOTE1 
		ID SKW_LEFTPAREN ID SKW_RIGHTPAREN SKW_ASSIGN 
		ID SKW_LEFTPAREN ID SKW_RIGHTPAREN QUOTE1 NEWLINE
	// foobar.o := -D"BAR(x)=x" -D"_BAR2=5"
	ID WS SKW_COLON SKW_ASSIGN WS KW_DEFINE QUOTE1 
		ID SKW_LEFTPAREN ID SKW_RIGHTPAREN SKW_ASSIGN 
		ID QUOTE1
		WS 
		KW_DEFINE QUOTE1 ID SKW_ASSIGN ID 
		QUOTE1 NEWLINE
	// foobar.o := -D"STR(s)=s"
	ID WS SKW_COLON SKW_ASSIGN WS KW_DEFINE QUOTE1
		ID SKW_LEFTPAREN ID SKW_RIGHTPAREN SKW_ASSIGN
		ID 
		QUOTE1 NEWLINE
	// foobar.o := -D"FOOBAR(X)=FOO(X)(Y)"
	ID WS SKW_COLON SKW_ASSIGN WS KW_DEFINE QUOTE1
		ID SKW_LEFTPAREN ID SKW_RIGHTPAREN SKW_ASSIGN 
		ID SKW_LEFTPAREN ID SKW_RIGHTPAREN SKW_LEFTPAREN ID SKW_RIGHTPAREN 
		QUOTE1 NEWLINE
	// foobar.o := -D"STR(s)=FOO(BAR(s))"
	ID WS SKW_COLON SKW_ASSIGN WS KW_DEFINE QUOTE1
		ID SKW_LEFTPAREN ID SKW_RIGHTPAREN SKW_ASSIGN 
		ID SKW_LEFTPAREN ID SKW_LEFTPAREN ID SKW_RIGHTPAREN SKW_RIGHTPAREN 
		QUOTE1 NEWLINE
	// foobar.o := -D"FOOBAR(X,Y)=FOO(X),Y"
	ID WS SKW_COLON SKW_ASSIGN WS KW_DEFINE QUOTE1
		ID SKW_LEFTPAREN ID SKW_COMMA ID SKW_RIGHTPAREN SKW_ASSIGN
		ID SKW_LEFTPAREN ID SKW_RIGHTPAREN SKW_COMMA ID
		QUOTE1 NEWLINE
	// foobar.o := -D"nostdinc"
	ID WS SKW_COLON SKW_ASSIGN WS KW_DEFINE QUOTE1
		KW_NOSTDINC QUOTE1 NEWLINE
	// foobar.o := -D"isystem=include"
	ID WS SKW_COLON SKW_ASSIGN WS KW_DEFINE QUOTE1
		KW_INCSYS SKW_ASSIGN KW_INCLUDE
		QUOTE1 NEWLINE
//----------------------------------------------------------------------

(Model
	lines+=
	(CmdLine
		start++"foobar.o",
		arguments+=
		(Argument
			macro=
			(StringMacro
				macro=
				(FunctionMacro
					name++"FOO",
					params+*"[X]",
					value++"BAR(X)"
				)
			)
		)
	),
	(CmdLine
		start++"foobar.o",
		arguments+=
		(Argument
			macro=
			(StringMacro
				macro=
				(FunctionMacro
					name++"BAR",
					params+*"[x]",
					value++"x"
				)
			)
		),
		(Argument
			macro=
			(StringMacro
				macro=
				(ObjectMacro
					name++"_BAR2",
					value++"5"
				)
			)
		)
	),
	(CmdLine
		start++"foobar.o",
		arguments+=
		(Argument
			macro=
			(StringMacro
				macro=
				(FunctionMacro
					name++"STR",
					params+*"[s]",
					value++"s"
				)
			)
		)
	),
	(CmdLine
		start++"foobar.o",
		arguments+=
		(Argument
			macro=
			(StringMacro
				macro=
				(FunctionMacro
					name++"FOOBAR",
					params+*"[X]",
					value++"FOO(X)(Y)"
				)
			)
		)
	),
	(CmdLine
		start++"foobar.o",
		arguments+=
		(Argument
			macro=
			(StringMacro
				macro=
				(FunctionMacro
					name++"STR",
					params+*"[s]",
					value++"FOO(BAR(s))"
				)
			)
		)
	),
	(CmdLine
		start++"foobar.o",
		arguments+=
		(Argument
			macro=
			(StringMacro
				macro=
				(FunctionMacro
					name++"FOOBAR",
					params+*"[X, Y]",
					value++"FOO(X),Y"
				)
			)
		)
	),
	(CmdLine
		start++"foobar.o",
		arguments+=
		(Argument
			macro=
			(StringMacro
				macro=
				(SimpleMacro
					name++"nostdinc"
				)
			)
		)
	),
	(CmdLine
		start++"foobar.o",
		arguments+=
		(Argument
			macro=
			(StringMacro
				macro=
				(ObjectMacro
					name++"isystem",
					value++"include"
				)
			)
		)
	)
)


//----------------------------------------------------------------------
//output file="bin/Test0000_Empty.c.i"
//expected file="expected/Test0000_Empty.c"
//replacePatterns file="res/Patterns.txt"
//----------------------------------------------------------------------
//----------------------------------------------------------------------
