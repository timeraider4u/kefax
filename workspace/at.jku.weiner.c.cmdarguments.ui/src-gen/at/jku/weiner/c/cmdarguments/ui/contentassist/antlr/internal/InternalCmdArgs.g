/*
 * generated by Xtext 2.9.0-SNAPSHOT
 */
grammar InternalCmdArgs;

options {
	superClass=AbstractInternalContentAssistParser;
	
	
}

@lexer::header {
package at.jku.weiner.c.cmdarguments.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package at.jku.weiner.c.cmdarguments.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import at.jku.weiner.c.cmdarguments.services.CmdArgsGrammarAccess;

}

@parser::members {
 
 	private CmdArgsGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(CmdArgsGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)
{ after(grammarAccess.getModelAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArgument
entryRuleArgument 
:
{ before(grammarAccess.getArgumentRule()); }
	 ruleArgument
{ after(grammarAccess.getArgumentRule()); } 
	 EOF 
;

// Rule Argument
ruleArgument
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getArgumentAccess().getGroup()); }
(rule__Argument__Group__0)
{ after(grammarAccess.getArgumentAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIdentifier
entryRuleIdentifier 
:
{ before(grammarAccess.getIdentifierRule()); }
	 ruleIdentifier
{ after(grammarAccess.getIdentifierRule()); } 
	 EOF 
;

// Rule Identifier
ruleIdentifier
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getIdentifierAccess().getIDTerminalRuleCall()); }
	RULE_ID
{ after(grammarAccess.getIdentifierAccess().getIDTerminalRuleCall()); }
)



;
finally {
	restoreStackSize(stackSize);
}




rule__Argument__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getArgumentAccess().getGroup_1_0()); }
(rule__Argument__Group_1_0__0)
{ after(grammarAccess.getArgumentAccess().getGroup_1_0()); }
)



    |
(
{ before(grammarAccess.getArgumentAccess().getGroup_1_1()); }
(rule__Argument__Group_1_1__0)
{ after(grammarAccess.getArgumentAccess().getGroup_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getModelAccess().getModelAction_0()); }
(

)
{ after(grammarAccess.getModelAccess().getModelAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getModelAccess().getArgumentsAssignment_1()); }
(rule__Model__ArgumentsAssignment_1)*
{ after(grammarAccess.getModelAccess().getArgumentsAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__Argument__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Argument__Group__0__Impl
	rule__Argument__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getArgumentAccess().getArgumentAction_0()); }
(

)
{ after(grammarAccess.getArgumentAccess().getArgumentAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Argument__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Argument__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getArgumentAccess().getAlternatives_1()); }
(rule__Argument__Alternatives_1)
{ after(grammarAccess.getArgumentAccess().getAlternatives_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__Argument__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Argument__Group_1_0__0__Impl
	rule__Argument__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getArgumentAccess().getDKeyword_1_0_0()); }

	'-D' 

{ after(grammarAccess.getArgumentAccess().getDKeyword_1_0_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Argument__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Argument__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getArgumentAccess().getNameAssignment_1_0_1()); }
(rule__Argument__NameAssignment_1_0_1)
{ after(grammarAccess.getArgumentAccess().getNameAssignment_1_0_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__Argument__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Argument__Group_1_1__0__Impl
	rule__Argument__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getArgumentAccess().getIKeyword_1_1_0()); }

	'-I' 

{ after(grammarAccess.getArgumentAccess().getIKeyword_1_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Argument__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Argument__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getArgumentAccess().getDirAssignment_1_1_1()); }
(rule__Argument__DirAssignment_1_1_1)
{ after(grammarAccess.getArgumentAccess().getDirAssignment_1_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}







rule__Model__ArgumentsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getArgumentsArgumentParserRuleCall_1_0()); }
	ruleArgument{ after(grammarAccess.getModelAccess().getArgumentsArgumentParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__NameAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentAccess().getNameIdentifierParserRuleCall_1_0_1_0()); }
	ruleIdentifier{ after(grammarAccess.getArgumentAccess().getNameIdentifierParserRuleCall_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__DirAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentAccess().getDirIdentifierParserRuleCall_1_1_1_0()); }
	ruleIdentifier{ after(grammarAccess.getArgumentAccess().getDirIdentifierParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


