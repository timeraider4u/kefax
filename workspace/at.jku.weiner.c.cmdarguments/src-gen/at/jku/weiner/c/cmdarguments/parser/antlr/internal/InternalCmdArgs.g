/*
 * generated by Xtext 2.9.0-SNAPSHOT
 */
grammar InternalCmdArgs;

options {
	superClass=AbstractInternalAntlrParser;
	
	
}

@lexer::header {
package at.jku.weiner.c.cmdarguments.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package at.jku.weiner.c.cmdarguments.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import at.jku.weiner.c.cmdarguments.services.CmdArgsGrammarAccess;

}

@parser::members {

 	private CmdArgsGrammarAccess grammarAccess;
 	
    public InternalCmdArgsParser(TokenStream input, CmdArgsGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected CmdArgsGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		/*no after found*/
     }:

(
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getModelAccess().getModelAction_0(),
            $current);
    }
)


(
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getLinesCmdLineParserRuleCall_1_0_0()); 
	    }
		lv_lines_1_0=ruleCmdLine		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"lines",
        		lv_lines_1_0, 
        		"at.jku.weiner.c.cmdarguments.CmdArgs.CmdLine");
	        afterParserOrEnumRuleCall();
	    }

)
)


(this_WS_2=RULE_WS
    { 
    newLeafNode(this_WS_2, grammarAccess.getModelAccess().getWSTerminalRuleCall_1_1()); 
    }
)*


(this_NEWLINE_3=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_3, grammarAccess.getModelAccess().getNEWLINETerminalRuleCall_1_2()); 
    }
)?

)*

)


;





// Entry rule entryRuleCmdLine
entryRuleCmdLine returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCmdLineRule()); }
	 iv_ruleCmdLine=ruleCmdLine 
	 { $current=$iv_ruleCmdLine.current; } 
	 EOF 
;

// Rule CmdLine
ruleCmdLine returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		/*no after found*/
     }:

(
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getCmdLineAccess().getCmdLineAction_0(),
            $current);
    }
)


(
(
		{ 
	        newCompositeNode(grammarAccess.getCmdLineAccess().getArgumentsArgumentParserRuleCall_1_0()); 
	    }
		lv_arguments_1_0=ruleArgument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCmdLineRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_1_0, 
        		"at.jku.weiner.c.cmdarguments.CmdArgs.Argument");
	        afterParserOrEnumRuleCall();
	    }

)
)+

)


;





// Entry rule entryRuleArgument
entryRuleArgument returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgumentRule()); }
	 iv_ruleArgument=ruleArgument 
	 { $current=$iv_ruleArgument.current; } 
	 EOF 
;

// Rule Argument
ruleArgument returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		/*no after found*/
     }:

(
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getArgumentAccess().getArgumentAction_0(),
            $current);
    }
)


(
(
this_DEFINE_1=RULE_DEFINE
    { 
    newLeafNode(this_DEFINE_1, grammarAccess.getArgumentAccess().getDEFINETerminalRuleCall_1_0_0()); 
    }



(
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentAccess().getMacroMacroParserRuleCall_1_0_1_0()); 
	    }
		lv_macro_2_0=ruleMacro		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentRule());
	        }
       		set(
       			$current, 
       			"macro",
        		lv_macro_2_0, 
        		"at.jku.weiner.c.cmdarguments.CmdArgs.Macro");
	        afterParserOrEnumRuleCall();
	    }

)
)

)


    |
(
(
(
		lv_incDir_3_0=RULE_INCLUDE
		{
			newLeafNode(lv_incDir_3_0, grammarAccess.getArgumentAccess().getIncDirINCLUDETerminalRuleCall_1_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArgumentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"incDir",
        		true, 
        		"at.jku.weiner.c.cmdarguments.CmdArgs.INCLUDE");
	    }

)
)


(
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentAccess().getUseIncDirUseIncludeDirCmdParserRuleCall_1_1_1_0()); 
	    }
		lv_useIncDir_4_0=ruleUseIncludeDirCmd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentRule());
	        }
       		set(
       			$current, 
       			"useIncDir",
        		lv_useIncDir_4_0, 
        		"at.jku.weiner.c.cmdarguments.CmdArgs.UseIncludeDirCmd");
	        afterParserOrEnumRuleCall();
	    }

)
)

)


    |
(
(
(
		lv_incSys_5_0=RULE_INCSYS
		{
			newLeafNode(lv_incSys_5_0, grammarAccess.getArgumentAccess().getIncSysINCSYSTerminalRuleCall_1_2_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArgumentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"incSys",
        		true, 
        		"at.jku.weiner.c.cmdarguments.CmdArgs.INCSYS");
	    }

)
)


(
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentAccess().getUseIncDirUseIncludeDirCmdParserRuleCall_1_2_1_0()); 
	    }
		lv_useIncDir_6_0=ruleUseIncludeDirCmd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentRule());
	        }
       		set(
       			$current, 
       			"useIncDir",
        		lv_useIncDir_6_0, 
        		"at.jku.weiner.c.cmdarguments.CmdArgs.UseIncludeDirCmd");
	        afterParserOrEnumRuleCall();
	    }

)
)

)


    |
(
(
		lv_nostdinc_7_0=RULE_NOSTDINC
		{
			newLeafNode(lv_nostdinc_7_0, grammarAccess.getArgumentAccess().getNostdincNOSTDINCTerminalRuleCall_1_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArgumentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"nostdinc",
        		true, 
        		"at.jku.weiner.c.cmdarguments.CmdArgs.NOSTDINC");
	    }

)
)

)

)


;





// Entry rule entryRuleMacro
entryRuleMacro returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMacroRule()); }
	 iv_ruleMacro=ruleMacro 
	 { $current=$iv_ruleMacro.current; } 
	 EOF 
;

// Rule Macro
ruleMacro returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		/*no after found*/
     }:

(

    { 
        newCompositeNode(grammarAccess.getMacroAccess().getSimpleMacroParserRuleCall_0()); 
    }
    this_SimpleMacro_0=ruleSimpleMacro
    { 
        $current = $this_SimpleMacro_0.current; 
        afterParserOrEnumRuleCall();
    }



    |

    { 
        newCompositeNode(grammarAccess.getMacroAccess().getObjectMacroParserRuleCall_1()); 
    }
    this_ObjectMacro_1=ruleObjectMacro
    { 
        $current = $this_ObjectMacro_1.current; 
        afterParserOrEnumRuleCall();
    }



    |

    { 
        newCompositeNode(grammarAccess.getMacroAccess().getFunctionMacroParserRuleCall_2()); 
    }
    this_FunctionMacro_2=ruleFunctionMacro
    { 
        $current = $this_FunctionMacro_2.current; 
        afterParserOrEnumRuleCall();
    }


)


;





// Entry rule entryRuleSimpleMacro
entryRuleSimpleMacro returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleMacroRule()); }
	 iv_ruleSimpleMacro=ruleSimpleMacro 
	 { $current=$iv_ruleSimpleMacro.current; } 
	 EOF 
;

// Rule SimpleMacro
ruleSimpleMacro returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		/*no after found*/
     }:

(
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getSimpleMacroAccess().getSimpleMacroAction_0(),
            $current);
    }
)


(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleMacroAccess().getNameIdentifierParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleMacroRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"at.jku.weiner.c.cmdarguments.CmdArgs.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)

)


;





// Entry rule entryRuleObjectMacro
entryRuleObjectMacro returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getObjectMacroRule()); }
	 iv_ruleObjectMacro=ruleObjectMacro 
	 { $current=$iv_ruleObjectMacro.current; } 
	 EOF 
;

// Rule ObjectMacro
ruleObjectMacro returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		/*no after found*/
     }:

(
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getObjectMacroAccess().getObjectMacroAction_0(),
            $current);
    }
)


(
(
		{ 
	        newCompositeNode(grammarAccess.getObjectMacroAccess().getNameIdentifierParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getObjectMacroRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"at.jku.weiner.c.cmdarguments.CmdArgs.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)


this_SKW_ASSIGN_2=RULE_SKW_ASSIGN
    { 
    newLeafNode(this_SKW_ASSIGN_2, grammarAccess.getObjectMacroAccess().getSKW_ASSIGNTerminalRuleCall_2()); 
    }



(
(
		{ 
	        newCompositeNode(grammarAccess.getObjectMacroAccess().getValueMyCodeParserRuleCall_3_0()); 
	    }
		lv_value_3_0=ruleMyCode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getObjectMacroRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"at.jku.weiner.c.cmdarguments.CmdArgs.MyCode");
	        afterParserOrEnumRuleCall();
	    }

)
)

)


;





// Entry rule entryRuleFunctionMacro
entryRuleFunctionMacro returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionMacroRule()); }
	 iv_ruleFunctionMacro=ruleFunctionMacro 
	 { $current=$iv_ruleFunctionMacro.current; } 
	 EOF 
;

// Rule FunctionMacro
ruleFunctionMacro returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		/*no after found*/
     }:

(
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getFunctionMacroAccess().getFunctionMacroAction_0(),
            $current);
    }
)


(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionMacroAccess().getNameIdentifierParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionMacroRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"at.jku.weiner.c.cmdarguments.CmdArgs.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)


this_SKW_LEFTPAREN_2=RULE_SKW_LEFTPAREN
    { 
    newLeafNode(this_SKW_LEFTPAREN_2, grammarAccess.getFunctionMacroAccess().getSKW_LEFTPARENTerminalRuleCall_2()); 
    }



(
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionMacroAccess().getParamsIdentifierParserRuleCall_3_0_0()); 
	    }
		lv_params_3_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionMacroRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_3_0, 
        		"at.jku.weiner.c.cmdarguments.CmdArgs.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)


(
this_SKW_COMMA_4=RULE_SKW_COMMA
    { 
    newLeafNode(this_SKW_COMMA_4, grammarAccess.getFunctionMacroAccess().getSKW_COMMATerminalRuleCall_3_1_0()); 
    }



(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionMacroAccess().getParamsIdentifierParserRuleCall_3_1_1_0()); 
	    }
		lv_params_5_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionMacroRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_5_0, 
        		"at.jku.weiner.c.cmdarguments.CmdArgs.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)

)*

)?


this_SKW_RIGHTPAREN_6=RULE_SKW_RIGHTPAREN
    { 
    newLeafNode(this_SKW_RIGHTPAREN_6, grammarAccess.getFunctionMacroAccess().getSKW_RIGHTPARENTerminalRuleCall_4()); 
    }



this_SKW_ASSIGN_7=RULE_SKW_ASSIGN
    { 
    newLeafNode(this_SKW_ASSIGN_7, grammarAccess.getFunctionMacroAccess().getSKW_ASSIGNTerminalRuleCall_5()); 
    }



(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionMacroAccess().getValueMyCodeParserRuleCall_6_0()); 
	    }
		lv_value_8_0=ruleMyCode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionMacroRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_8_0, 
        		"at.jku.weiner.c.cmdarguments.CmdArgs.MyCode");
	        afterParserOrEnumRuleCall();
	    }

)
)

)


;





// Entry rule entryRuleUseIncludeDirCmd
entryRuleUseIncludeDirCmd returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUseIncludeDirCmdRule()); }
	 iv_ruleUseIncludeDirCmd=ruleUseIncludeDirCmd 
	 { $current=$iv_ruleUseIncludeDirCmd.current; } 
	 EOF 
;

// Rule UseIncludeDirCmd
ruleUseIncludeDirCmd returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		/*no after found*/
     }:

(
(
		{ 
	        newCompositeNode(grammarAccess.getUseIncludeDirCmdAccess().getPathPathParserRuleCall_0()); 
	    }
		lv_path_0_0=rulePath		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUseIncludeDirCmdRule());
	        }
       		set(
       			$current, 
       			"path",
        		lv_path_0_0, 
        		"at.jku.weiner.c.cmdarguments.CmdArgs.Path");
	        afterParserOrEnumRuleCall();
	    }

)
)


;





// Entry rule entryRuleIdentifier
entryRuleIdentifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdentifierRule()); } 
	 iv_ruleIdentifier=ruleIdentifier 
	 { $current=$iv_ruleIdentifier.current.getText(); }  
	 EOF 
;

// Rule Identifier
ruleIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getIdentifierAccess().getIDTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleMyCode
entryRuleMyCode returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMyCodeRule()); } 
	 iv_ruleMyCode=ruleMyCode 
	 { $current=$iv_ruleMyCode.current.getText(); }  
	 EOF 
;

// Rule MyCode
ruleMyCode returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getMyCodeAccess().getIDTerminalRuleCall_0()); 
    }

    |    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getMyCodeAccess().getINTTerminalRuleCall_1()); 
    }

    |    this_STRING_2=RULE_STRING    {
		$current.merge(this_STRING_2);
    }

    { 
    newLeafNode(this_STRING_2, grammarAccess.getMyCodeAccess().getSTRINGTerminalRuleCall_2()); 
    }

    |    this_HASH_3=RULE_HASH    {
		$current.merge(this_HASH_3);
    }

    { 
    newLeafNode(this_HASH_3, grammarAccess.getMyCodeAccess().getHASHTerminalRuleCall_3()); 
    }

    |    this_SKW_COMMA_4=RULE_SKW_COMMA    {
		$current.merge(this_SKW_COMMA_4);
    }

    { 
    newLeafNode(this_SKW_COMMA_4, grammarAccess.getMyCodeAccess().getSKW_COMMATerminalRuleCall_4()); 
    }

    |    this_SKW_LEFTPAREN_5=RULE_SKW_LEFTPAREN    {
		$current.merge(this_SKW_LEFTPAREN_5);
    }

    { 
    newLeafNode(this_SKW_LEFTPAREN_5, grammarAccess.getMyCodeAccess().getSKW_LEFTPARENTerminalRuleCall_5()); 
    }

    |    this_SKW_RIGHTPAREN_6=RULE_SKW_RIGHTPAREN    {
		$current.merge(this_SKW_RIGHTPAREN_6);
    }

    { 
    newLeafNode(this_SKW_RIGHTPAREN_6, grammarAccess.getMyCodeAccess().getSKW_RIGHTPARENTerminalRuleCall_6()); 
    }

    |    this_ANY_OTHER_7=RULE_ANY_OTHER    {
		$current.merge(this_ANY_OTHER_7);
    }

    { 
    newLeafNode(this_ANY_OTHER_7, grammarAccess.getMyCodeAccess().getANY_OTHERTerminalRuleCall_7()); 
    }
)+
    ;





// Entry rule entryRulePath
entryRulePath returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPathRule()); } 
	 iv_rulePath=rulePath 
	 { $current=$iv_rulePath.current.getText(); }  
	 EOF 
;

// Rule Path
rulePath returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getPathAccess().getIDTerminalRuleCall_0()); 
    }

    |    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getPathAccess().getINTTerminalRuleCall_1()); 
    }

    |    this_STRING_2=RULE_STRING    {
		$current.merge(this_STRING_2);
    }

    { 
    newLeafNode(this_STRING_2, grammarAccess.getPathAccess().getSTRINGTerminalRuleCall_2()); 
    }

    |    this_HASH_3=RULE_HASH    {
		$current.merge(this_HASH_3);
    }

    { 
    newLeafNode(this_HASH_3, grammarAccess.getPathAccess().getHASHTerminalRuleCall_3()); 
    }

    |    this_SKW_COMMA_4=RULE_SKW_COMMA    {
		$current.merge(this_SKW_COMMA_4);
    }

    { 
    newLeafNode(this_SKW_COMMA_4, grammarAccess.getPathAccess().getSKW_COMMATerminalRuleCall_4()); 
    }

    |    this_ANY_OTHER_5=RULE_ANY_OTHER    {
		$current.merge(this_ANY_OTHER_5);
    }

    { 
    newLeafNode(this_ANY_OTHER_5, grammarAccess.getPathAccess().getANY_OTHERTerminalRuleCall_5()); 
    }
)+
    ;





fragment RULE_SKW_MINUS : '-';

RULE_SKW_ASSIGN : '=';

RULE_SKW_LEFTPAREN : '(';

RULE_SKW_RIGHTPAREN : ')';

RULE_SKW_COMMA : ',';

RULE_HASH : '#';

RULE_DEFINE : RULE_SKW_MINUS 'D';

RULE_INCLUDE : RULE_SKW_MINUS 'I';

RULE_NOSTDINC : RULE_SKW_MINUS 'nostdinc';

RULE_INCSYS : RULE_SKW_MINUS 'isystem';

RULE_NEWLINE : ('\n'|'\r');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


