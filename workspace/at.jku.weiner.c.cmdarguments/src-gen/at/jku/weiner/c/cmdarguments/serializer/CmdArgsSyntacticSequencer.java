/*
 * generated by Xtext 2.9.0-SNAPSHOT
 */
package at.jku.weiner.c.cmdarguments.serializer;

import at.jku.weiner.c.cmdarguments.services.CmdArgsGrammarAccess;
import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class CmdArgsSyntacticSequencer extends AbstractSyntacticSequencer {

	protected CmdArgsGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Argument_SKW_MINUSTerminalRuleCall_1_7_1_q;
	protected AbstractElementAlias match_Argument_WSTerminalRuleCall_1_2_1_p;
	protected AbstractElementAlias match_Argument_WSTerminalRuleCall_1_4_2_p;
	protected AbstractElementAlias match_Argument_WSTerminalRuleCall_1_5_1_p;
	protected AbstractElementAlias match_Argument_WSTerminalRuleCall_1_6_1_p;
	protected AbstractElementAlias match_Assignment_WSTerminalRuleCall_1_p;
	protected AbstractElementAlias match_Assignment_WSTerminalRuleCall_4_p;
	protected AbstractElementAlias match_Assignment_WSTerminalRuleCall_5_1_0_p;
	protected AbstractElementAlias match_Model_NEWLINETerminalRuleCall_1_1_0_a;
	protected AbstractElementAlias match_Model_NEWLINETerminalRuleCall_2_q;
	protected AbstractElementAlias match_Target_WSTerminalRuleCall_3_a;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (CmdArgsGrammarAccess) access;
		match_Argument_SKW_MINUSTerminalRuleCall_1_7_1_q = new TokenAlias(false, true, grammarAccess.getArgumentAccess().getSKW_MINUSTerminalRuleCall_1_7_1());
		match_Argument_WSTerminalRuleCall_1_2_1_p = new TokenAlias(true, false, grammarAccess.getArgumentAccess().getWSTerminalRuleCall_1_2_1());
		match_Argument_WSTerminalRuleCall_1_4_2_p = new TokenAlias(true, false, grammarAccess.getArgumentAccess().getWSTerminalRuleCall_1_4_2());
		match_Argument_WSTerminalRuleCall_1_5_1_p = new TokenAlias(true, false, grammarAccess.getArgumentAccess().getWSTerminalRuleCall_1_5_1());
		match_Argument_WSTerminalRuleCall_1_6_1_p = new TokenAlias(true, false, grammarAccess.getArgumentAccess().getWSTerminalRuleCall_1_6_1());
		match_Assignment_WSTerminalRuleCall_1_p = new TokenAlias(true, false, grammarAccess.getAssignmentAccess().getWSTerminalRuleCall_1());
		match_Assignment_WSTerminalRuleCall_4_p = new TokenAlias(true, false, grammarAccess.getAssignmentAccess().getWSTerminalRuleCall_4());
		match_Assignment_WSTerminalRuleCall_5_1_0_p = new TokenAlias(true, false, grammarAccess.getAssignmentAccess().getWSTerminalRuleCall_5_1_0());
		match_Model_NEWLINETerminalRuleCall_1_1_0_a = new TokenAlias(true, true, grammarAccess.getModelAccess().getNEWLINETerminalRuleCall_1_1_0());
		match_Model_NEWLINETerminalRuleCall_2_q = new TokenAlias(false, true, grammarAccess.getModelAccess().getNEWLINETerminalRuleCall_2());
		match_Target_WSTerminalRuleCall_3_a = new TokenAlias(true, true, grammarAccess.getTargetAccess().getWSTerminalRuleCall_3());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if(ruleCall.getRule() == grammarAccess.getFillUpRule())
			return getFillUpToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getIncSysRule())
			return getIncSysToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getKW_DEFINERule())
			return getKW_DEFINEToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getKW_INCDIRRule())
			return getKW_INCDIRToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getKW_INCLUDERule())
			return getKW_INCLUDEToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getKW_LANGRule())
			return getKW_LANGToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getKW_OUTPUTRule())
			return getKW_OUTPUTToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getNEWLINERule())
			return getNEWLINEToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getNoStdIncRule())
			return getNoStdIncToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getSKW_ASSIGNRule())
			return getSKW_ASSIGNToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getSKW_COLONRule())
			return getSKW_COLONToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getSKW_COMMARule())
			return getSKW_COMMAToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getSKW_LEFTPARENRule())
			return getSKW_LEFTPARENToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getSKW_MINUSRule())
			return getSKW_MINUSToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getSKW_RIGHTPARENRule())
			return getSKW_RIGHTPARENToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getWSRule())
			return getWSToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * FillUp:
	 * 	WS+ | (WS* NEWLINE WS+)
	 * ;
	 */
	protected String getFillUpToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return " ";
	}
	
	/**
	 * IncSys:
	 * 	SKW_MINUS KW_INCSYS
	 * ;
	 */
	protected String getIncSysToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "-isystem";
	}
	
	/**
	 * terminal KW_DEFINE: SKW_MINUS 'D';
	 */
	protected String getKW_DEFINEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "-D";
	}
	
	/**
	 * terminal KW_INCDIR: SKW_MINUS 'I';
	 */
	protected String getKW_INCDIRToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "-I";
	}
	
	/**
	 * terminal KW_INCLUDE: 'include';
	 */
	protected String getKW_INCLUDEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "include";
	}
	
	/**
	 * terminal KW_LANG: SKW_MINUS 'x';
	 */
	protected String getKW_LANGToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "-x";
	}
	
	/**
	 * terminal KW_OUTPUT: SKW_MINUS 'o';
	 */
	protected String getKW_OUTPUTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "-o";
	}
	
	/**
	 * terminal NEWLINE: '\n' | '\r';
	 */
	protected String getNEWLINEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\n";
	}
	
	/**
	 * NoStdInc:
	 * 	SKW_MINUS KW_NOSTDINC
	 * ;
	 */
	protected String getNoStdIncToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "-nostdinc";
	}
	
	/**
	 * terminal SKW_ASSIGN: '=';
	 */
	protected String getSKW_ASSIGNToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "=";
	}
	
	/**
	 * terminal SKW_COLON: ':';
	 */
	protected String getSKW_COLONToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ":";
	}
	
	/**
	 * terminal SKW_COMMA: ',';
	 */
	protected String getSKW_COMMAToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ",";
	}
	
	/**
	 * terminal SKW_LEFTPAREN: '(';
	 */
	protected String getSKW_LEFTPARENToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "(";
	}
	
	/**
	 * terminal SKW_MINUS: '-';
	 */
	protected String getSKW_MINUSToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "-";
	}
	
	/**
	 * terminal SKW_RIGHTPAREN: ')';
	 */
	protected String getSKW_RIGHTPARENToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ")";
	}
	
	/**
	 * terminal WS: (' '|'\t');
	 */
	protected String getWSToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return " ";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if(match_Argument_SKW_MINUSTerminalRuleCall_1_7_1_q.equals(syntax))
				emit_Argument_SKW_MINUSTerminalRuleCall_1_7_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Argument_WSTerminalRuleCall_1_2_1_p.equals(syntax))
				emit_Argument_WSTerminalRuleCall_1_2_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Argument_WSTerminalRuleCall_1_4_2_p.equals(syntax))
				emit_Argument_WSTerminalRuleCall_1_4_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Argument_WSTerminalRuleCall_1_5_1_p.equals(syntax))
				emit_Argument_WSTerminalRuleCall_1_5_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Argument_WSTerminalRuleCall_1_6_1_p.equals(syntax))
				emit_Argument_WSTerminalRuleCall_1_6_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Assignment_WSTerminalRuleCall_1_p.equals(syntax))
				emit_Assignment_WSTerminalRuleCall_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Assignment_WSTerminalRuleCall_4_p.equals(syntax))
				emit_Assignment_WSTerminalRuleCall_4_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Assignment_WSTerminalRuleCall_5_1_0_p.equals(syntax))
				emit_Assignment_WSTerminalRuleCall_5_1_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Model_NEWLINETerminalRuleCall_1_1_0_a.equals(syntax))
				emit_Model_NEWLINETerminalRuleCall_1_1_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Model_NEWLINETerminalRuleCall_2_q.equals(syntax))
				emit_Model_NEWLINETerminalRuleCall_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Target_WSTerminalRuleCall_3_a.equals(syntax))
				emit_Target_WSTerminalRuleCall_3_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     SKW_MINUS?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) SKW_MINUS (ambiguity) (rule start)
	 *     (rule start) SKW_MINUS (ambiguity) option=Option
	 */
	protected void emit_Argument_SKW_MINUSTerminalRuleCall_1_7_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     WS+
	 *
	 * This ambiguous syntax occurs at:
	 *     incSys?=IncSys (ambiguity) useIncDir=PathCmd
	 */
	protected void emit_Argument_WSTerminalRuleCall_1_2_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     WS+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) SKW_MINUS KW_INCLUDE (ambiguity) include=PathCmd
	 */
	protected void emit_Argument_WSTerminalRuleCall_1_4_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     WS+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) KW_OUTPUT (ambiguity) out=PathCmd
	 */
	protected void emit_Argument_WSTerminalRuleCall_1_5_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     WS+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) KW_LANG (ambiguity) lang=PathCmd
	 */
	protected void emit_Argument_WSTerminalRuleCall_1_6_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     WS+
	 *
	 * This ambiguous syntax occurs at:
	 *     start=Identifier (ambiguity) SKW_COLON SKW_ASSIGN WS+ arguments+=Argument
	 */
	protected void emit_Assignment_WSTerminalRuleCall_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     WS+
	 *
	 * This ambiguous syntax occurs at:
	 *     start=Identifier WS+ SKW_COLON SKW_ASSIGN (ambiguity) arguments+=Argument
	 */
	protected void emit_Assignment_WSTerminalRuleCall_4_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     WS+
	 *
	 * This ambiguous syntax occurs at:
	 *     arguments+=Argument (ambiguity) arguments+=Argument
	 */
	protected void emit_Assignment_WSTerminalRuleCall_5_1_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     lines+=CmdLine (ambiguity) lines+=CmdLine
	 */
	protected void emit_Model_NEWLINETerminalRuleCall_1_1_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     NEWLINE?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     lines+=CmdLine (ambiguity) (rule end)
	 */
	protected void emit_Model_NEWLINETerminalRuleCall_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     WS*
	 *
	 * This ambiguous syntax occurs at:
	 *     arguments+=Argument (ambiguity) NEWLINE NEWLINE (rule end)
	 *     start=Identifier SKW_COLON (ambiguity) NEWLINE NEWLINE (rule end)
	 */
	protected void emit_Target_WSTerminalRuleCall_3_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
