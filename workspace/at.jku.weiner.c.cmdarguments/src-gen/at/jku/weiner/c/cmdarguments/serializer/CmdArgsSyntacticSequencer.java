/*
 * generated by Xtext 2.9.0-SNAPSHOT
 */
package at.jku.weiner.c.cmdarguments.serializer;

import at.jku.weiner.c.cmdarguments.services.CmdArgsGrammarAccess;
import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class CmdArgsSyntacticSequencer extends AbstractSyntacticSequencer {

	protected CmdArgsGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Argument_WSTerminalRuleCall_1_2_1_p;
	protected AbstractElementAlias match_Argument_WSTerminalRuleCall_1_4_1_p;
	protected AbstractElementAlias match_Argument_WSTerminalRuleCall_1_5_1_p;
	protected AbstractElementAlias match_CmdLine_WSTerminalRuleCall_1_1_0_p;
	protected AbstractElementAlias match_Model_NEWLINETerminalRuleCall_2_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (CmdArgsGrammarAccess) access;
		match_Argument_WSTerminalRuleCall_1_2_1_p = new TokenAlias(true, false, grammarAccess.getArgumentAccess().getWSTerminalRuleCall_1_2_1());
		match_Argument_WSTerminalRuleCall_1_4_1_p = new TokenAlias(true, false, grammarAccess.getArgumentAccess().getWSTerminalRuleCall_1_4_1());
		match_Argument_WSTerminalRuleCall_1_5_1_p = new TokenAlias(true, false, grammarAccess.getArgumentAccess().getWSTerminalRuleCall_1_5_1());
		match_CmdLine_WSTerminalRuleCall_1_1_0_p = new TokenAlias(true, false, grammarAccess.getCmdLineAccess().getWSTerminalRuleCall_1_1_0());
		match_Model_NEWLINETerminalRuleCall_2_q = new TokenAlias(false, true, grammarAccess.getModelAccess().getNEWLINETerminalRuleCall_2());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if(ruleCall.getRule() == grammarAccess.getDefineRule())
			return getDefineToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getIncDirRule())
			return getIncDirToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getIncSysRule())
			return getIncSysToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getIncludeRule())
			return getIncludeToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getNEWLINERule())
			return getNEWLINEToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getNoStdIncRule())
			return getNoStdIncToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getOutputRule())
			return getOutputToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getSKW_ASSIGNRule())
			return getSKW_ASSIGNToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getSKW_COMMARule())
			return getSKW_COMMAToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getSKW_LEFTPARENRule())
			return getSKW_LEFTPARENToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getSKW_MINUSRule())
			return getSKW_MINUSToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getSKW_RIGHTPARENRule())
			return getSKW_RIGHTPARENToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getWSRule())
			return getWSToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * Define:
	 * 	KW_DEFINE
	 * ;
	 */
	protected String getDefineToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "-D";
	}
	
	/**
	 * IncDir:
	 * 	KW_INCDIR
	 * ;
	 */
	protected String getIncDirToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "-I";
	}
	
	/**
	 * IncSys:
	 * 	SKW_MINUS KW_INCSYS
	 * ;
	 */
	protected String getIncSysToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "-isystem";
	}
	
	/**
	 * Include:
	 * 	SKW_MINUS KW_INCLUDE
	 * ;
	 */
	protected String getIncludeToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "-include";
	}
	
	/**
	 * terminal NEWLINE: '\n' | '\r';
	 */
	protected String getNEWLINEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\n";
	}
	
	/**
	 * NoStdInc:
	 * 	SKW_MINUS KW_NOSTDINC
	 * ;
	 */
	protected String getNoStdIncToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "-nostdinc";
	}
	
	/**
	 * Output:
	 * 	KW_OUTPUT
	 * ;
	 */
	protected String getOutputToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "-o";
	}
	
	/**
	 * terminal SKW_ASSIGN: '=';
	 */
	protected String getSKW_ASSIGNToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "=";
	}
	
	/**
	 * terminal SKW_COMMA: ',';
	 */
	protected String getSKW_COMMAToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ",";
	}
	
	/**
	 * terminal SKW_LEFTPAREN: '(';
	 */
	protected String getSKW_LEFTPARENToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "(";
	}
	
	/**
	 * terminal SKW_MINUS: '-';
	 */
	protected String getSKW_MINUSToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "-";
	}
	
	/**
	 * terminal SKW_RIGHTPAREN: ')';
	 */
	protected String getSKW_RIGHTPARENToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ")";
	}
	
	/**
	 * terminal WS: (' '|'\t');
	 */
	protected String getWSToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return " ";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if(match_Argument_WSTerminalRuleCall_1_2_1_p.equals(syntax))
				emit_Argument_WSTerminalRuleCall_1_2_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Argument_WSTerminalRuleCall_1_4_1_p.equals(syntax))
				emit_Argument_WSTerminalRuleCall_1_4_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Argument_WSTerminalRuleCall_1_5_1_p.equals(syntax))
				emit_Argument_WSTerminalRuleCall_1_5_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_CmdLine_WSTerminalRuleCall_1_1_0_p.equals(syntax))
				emit_CmdLine_WSTerminalRuleCall_1_1_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Model_NEWLINETerminalRuleCall_2_q.equals(syntax))
				emit_Model_NEWLINETerminalRuleCall_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     WS+
	 *
	 * This ambiguous syntax occurs at:
	 *     incSys?=IncSys (ambiguity) useIncDir=PathCmd
	 */
	protected void emit_Argument_WSTerminalRuleCall_1_2_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     WS+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) Include (ambiguity) include=PathCmd
	 */
	protected void emit_Argument_WSTerminalRuleCall_1_4_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     WS+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) Output (ambiguity) out=PathCmd
	 */
	protected void emit_Argument_WSTerminalRuleCall_1_5_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     WS+
	 *
	 * This ambiguous syntax occurs at:
	 *     arguments+=Argument (ambiguity) arguments+=Argument
	 */
	protected void emit_CmdLine_WSTerminalRuleCall_1_1_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     NEWLINE?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     lines+=CmdLine (ambiguity) (rule end)
	 */
	protected void emit_Model_NEWLINETerminalRuleCall_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
