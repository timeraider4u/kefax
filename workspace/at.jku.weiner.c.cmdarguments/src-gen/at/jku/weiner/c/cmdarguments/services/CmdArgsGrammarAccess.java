/*
 * generated by Xtext 2.9.0-SNAPSHOT
 */
package at.jku.weiner.c.cmdarguments.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractParserRuleElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CmdArgsGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cLinesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cLinesCmdLineParserRuleCall_1_0_0 = (RuleCall)cLinesAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final RuleCall cNEWLINETerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Assignment cLinesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cLinesCmdLineParserRuleCall_1_1_1_0 = (RuleCall)cLinesAssignment_1_1_1.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Model:
		//	{Model} (lines+=CmdLine (NEWLINE* lines+=CmdLine)*)?
		//	NEWLINE?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Model} (lines+=CmdLine (NEWLINE* lines+=CmdLine)*)? NEWLINE?
		public Group getGroup() { return cGroup; }
		
		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }
		
		//(lines+=CmdLine (NEWLINE* lines+=CmdLine)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//lines+=CmdLine
		public Assignment getLinesAssignment_1_0() { return cLinesAssignment_1_0; }
		
		//CmdLine
		public RuleCall getLinesCmdLineParserRuleCall_1_0_0() { return cLinesCmdLineParserRuleCall_1_0_0; }
		
		//(NEWLINE* lines+=CmdLine)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//NEWLINE*
		public RuleCall getNEWLINETerminalRuleCall_1_1_0() { return cNEWLINETerminalRuleCall_1_1_0; }
		
		//lines+=CmdLine
		public Assignment getLinesAssignment_1_1_1() { return cLinesAssignment_1_1_1; }
		
		//CmdLine
		public RuleCall getLinesCmdLineParserRuleCall_1_1_1_0() { return cLinesCmdLineParserRuleCall_1_1_1_0; }
		
		//NEWLINE?
		public RuleCall getNEWLINETerminalRuleCall_2() { return cNEWLINETerminalRuleCall_2; }
	}
	public class CmdLineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.CmdLine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCmdLineAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStartAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStartIdentifierParserRuleCall_1_0 = (RuleCall)cStartAssignment_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cSKW_COLONTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cSKW_ASSIGNTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cWSTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cArgumentsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cArgumentsArgumentParserRuleCall_6_0_0 = (RuleCall)cArgumentsAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_6_1_0 = (RuleCall)cGroup_6_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cArgumentsArgumentParserRuleCall_6_1_1_0 = (RuleCall)cArgumentsAssignment_6_1_1.eContents().get(0);
		
		//CmdLine:
		//	{CmdLine} start=Identifier WS+ SKW_COLON SKW_ASSIGN WS+ (arguments+=Argument (WS+ arguments+=Argument)*);
		@Override public ParserRule getRule() { return rule; }
		
		//{CmdLine} start=Identifier WS+ SKW_COLON SKW_ASSIGN WS+ (arguments+=Argument (WS+ arguments+=Argument)*)
		public Group getGroup() { return cGroup; }
		
		//{CmdLine}
		public Action getCmdLineAction_0() { return cCmdLineAction_0; }
		
		//start=Identifier
		public Assignment getStartAssignment_1() { return cStartAssignment_1; }
		
		//Identifier
		public RuleCall getStartIdentifierParserRuleCall_1_0() { return cStartIdentifierParserRuleCall_1_0; }
		
		//WS+
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }
		
		//SKW_COLON
		public RuleCall getSKW_COLONTerminalRuleCall_3() { return cSKW_COLONTerminalRuleCall_3; }
		
		//SKW_ASSIGN
		public RuleCall getSKW_ASSIGNTerminalRuleCall_4() { return cSKW_ASSIGNTerminalRuleCall_4; }
		
		//WS+
		public RuleCall getWSTerminalRuleCall_5() { return cWSTerminalRuleCall_5; }
		
		//(arguments+=Argument (WS+ arguments+=Argument)*)
		public Group getGroup_6() { return cGroup_6; }
		
		//arguments+=Argument
		public Assignment getArgumentsAssignment_6_0() { return cArgumentsAssignment_6_0; }
		
		//Argument
		public RuleCall getArgumentsArgumentParserRuleCall_6_0_0() { return cArgumentsArgumentParserRuleCall_6_0_0; }
		
		//(WS+ arguments+=Argument)*
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//WS+
		public RuleCall getWSTerminalRuleCall_6_1_0() { return cWSTerminalRuleCall_6_1_0; }
		
		//arguments+=Argument
		public Assignment getArgumentsAssignment_6_1_1() { return cArgumentsAssignment_6_1_1; }
		
		//Argument
		public RuleCall getArgumentsArgumentParserRuleCall_6_1_1_0() { return cArgumentsArgumentParserRuleCall_6_1_1_0; }
	}
	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.Argument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArgumentAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cKW_DEFINETerminalRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Assignment cMacroAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cMacroMacroParserRuleCall_1_0_1_0 = (RuleCall)cMacroAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cIncDirAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cIncDirKW_INCDIRTerminalRuleCall_1_1_0_0 = (RuleCall)cIncDirAssignment_1_1_0.eContents().get(0);
		private final Assignment cUseIncDirAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cUseIncDirPathCmdParserRuleCall_1_1_1_0 = (RuleCall)cUseIncDirAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Assignment cIncSysAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cIncSysIncSysParserRuleCall_1_2_0_0 = (RuleCall)cIncSysAssignment_1_2_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1_2_1 = (RuleCall)cGroup_1_2.eContents().get(1);
		private final Assignment cUseIncDirAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cUseIncDirPathCmdParserRuleCall_1_2_2_0 = (RuleCall)cUseIncDirAssignment_1_2_2.eContents().get(0);
		private final Assignment cNostdincAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cNostdincNoStdIncParserRuleCall_1_3_0 = (RuleCall)cNostdincAssignment_1_3.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cAlternatives_1.eContents().get(4);
		private final RuleCall cSKW_MINUSTerminalRuleCall_1_4_0 = (RuleCall)cGroup_1_4.eContents().get(0);
		private final RuleCall cKW_INCLUDETerminalRuleCall_1_4_1 = (RuleCall)cGroup_1_4.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_1_4_2 = (RuleCall)cGroup_1_4.eContents().get(2);
		private final Assignment cIncludeAssignment_1_4_3 = (Assignment)cGroup_1_4.eContents().get(3);
		private final RuleCall cIncludePathCmdParserRuleCall_1_4_3_0 = (RuleCall)cIncludeAssignment_1_4_3.eContents().get(0);
		private final Group cGroup_1_5 = (Group)cAlternatives_1.eContents().get(5);
		private final RuleCall cKW_OUTPUTTerminalRuleCall_1_5_0 = (RuleCall)cGroup_1_5.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1_5_1 = (RuleCall)cGroup_1_5.eContents().get(1);
		private final Assignment cOutAssignment_1_5_2 = (Assignment)cGroup_1_5.eContents().get(2);
		private final RuleCall cOutPathCmdParserRuleCall_1_5_2_0 = (RuleCall)cOutAssignment_1_5_2.eContents().get(0);
		private final Group cGroup_1_6 = (Group)cAlternatives_1.eContents().get(6);
		private final RuleCall cKW_LANGTerminalRuleCall_1_6_0 = (RuleCall)cGroup_1_6.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1_6_1 = (RuleCall)cGroup_1_6.eContents().get(1);
		private final Assignment cLangAssignment_1_6_2 = (Assignment)cGroup_1_6.eContents().get(2);
		private final RuleCall cLangPathCmdParserRuleCall_1_6_2_0 = (RuleCall)cLangAssignment_1_6_2.eContents().get(0);
		private final Group cGroup_1_7 = (Group)cAlternatives_1.eContents().get(7);
		private final RuleCall cSKW_MINUSTerminalRuleCall_1_7_0 = (RuleCall)cGroup_1_7.eContents().get(0);
		private final RuleCall cSKW_MINUSTerminalRuleCall_1_7_1 = (RuleCall)cGroup_1_7.eContents().get(1);
		private final Assignment cOptionAssignment_1_7_2 = (Assignment)cGroup_1_7.eContents().get(2);
		private final RuleCall cOptionOptionParserRuleCall_1_7_2_0 = (RuleCall)cOptionAssignment_1_7_2.eContents().get(0);
		private final Assignment cInAssignment_1_8 = (Assignment)cAlternatives_1.eContents().get(8);
		private final RuleCall cInIdentifierParserRuleCall_1_8_0 = (RuleCall)cInAssignment_1_8.eContents().get(0);
		
		//Argument:
		//	{Argument} (KW_DEFINE macro=Macro | incDir?=KW_INCDIR useIncDir=PathCmd | incSys?=IncSys WS+ useIncDir=PathCmd |
		//	nostdinc?=NoStdInc | SKW_MINUS KW_INCLUDE WS+ include=PathCmd | KW_OUTPUT WS+ out=PathCmd | KW_LANG WS+ lang=PathCmd |
		//	SKW_MINUS SKW_MINUS? option=Option? | in=Identifier);
		@Override public ParserRule getRule() { return rule; }
		
		//{Argument} (KW_DEFINE macro=Macro | incDir?=KW_INCDIR useIncDir=PathCmd | incSys?=IncSys WS+ useIncDir=PathCmd |
		//nostdinc?=NoStdInc | SKW_MINUS KW_INCLUDE WS+ include=PathCmd | KW_OUTPUT WS+ out=PathCmd | KW_LANG WS+ lang=PathCmd |
		//SKW_MINUS SKW_MINUS? option=Option? | in=Identifier)
		public Group getGroup() { return cGroup; }
		
		//{Argument}
		public Action getArgumentAction_0() { return cArgumentAction_0; }
		
		//(KW_DEFINE macro=Macro | incDir?=KW_INCDIR useIncDir=PathCmd | incSys?=IncSys WS+ useIncDir=PathCmd | nostdinc?=NoStdInc
		//| SKW_MINUS KW_INCLUDE WS+ include=PathCmd | KW_OUTPUT WS+ out=PathCmd | KW_LANG WS+ lang=PathCmd | SKW_MINUS
		//SKW_MINUS? option=Option? | in=Identifier)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//KW_DEFINE macro=Macro
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//KW_DEFINE
		public RuleCall getKW_DEFINETerminalRuleCall_1_0_0() { return cKW_DEFINETerminalRuleCall_1_0_0; }
		
		//macro=Macro
		public Assignment getMacroAssignment_1_0_1() { return cMacroAssignment_1_0_1; }
		
		//Macro
		public RuleCall getMacroMacroParserRuleCall_1_0_1_0() { return cMacroMacroParserRuleCall_1_0_1_0; }
		
		//incDir?=KW_INCDIR useIncDir=PathCmd
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//incDir?=KW_INCDIR
		public Assignment getIncDirAssignment_1_1_0() { return cIncDirAssignment_1_1_0; }
		
		//KW_INCDIR
		public RuleCall getIncDirKW_INCDIRTerminalRuleCall_1_1_0_0() { return cIncDirKW_INCDIRTerminalRuleCall_1_1_0_0; }
		
		//useIncDir=PathCmd
		public Assignment getUseIncDirAssignment_1_1_1() { return cUseIncDirAssignment_1_1_1; }
		
		//PathCmd
		public RuleCall getUseIncDirPathCmdParserRuleCall_1_1_1_0() { return cUseIncDirPathCmdParserRuleCall_1_1_1_0; }
		
		//incSys?=IncSys WS+ useIncDir=PathCmd
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//incSys?=IncSys
		public Assignment getIncSysAssignment_1_2_0() { return cIncSysAssignment_1_2_0; }
		
		//IncSys
		public RuleCall getIncSysIncSysParserRuleCall_1_2_0_0() { return cIncSysIncSysParserRuleCall_1_2_0_0; }
		
		//WS+
		public RuleCall getWSTerminalRuleCall_1_2_1() { return cWSTerminalRuleCall_1_2_1; }
		
		//useIncDir=PathCmd
		public Assignment getUseIncDirAssignment_1_2_2() { return cUseIncDirAssignment_1_2_2; }
		
		//PathCmd
		public RuleCall getUseIncDirPathCmdParserRuleCall_1_2_2_0() { return cUseIncDirPathCmdParserRuleCall_1_2_2_0; }
		
		//nostdinc?=NoStdInc
		public Assignment getNostdincAssignment_1_3() { return cNostdincAssignment_1_3; }
		
		//NoStdInc
		public RuleCall getNostdincNoStdIncParserRuleCall_1_3_0() { return cNostdincNoStdIncParserRuleCall_1_3_0; }
		
		//SKW_MINUS KW_INCLUDE WS+ include=PathCmd
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//SKW_MINUS
		public RuleCall getSKW_MINUSTerminalRuleCall_1_4_0() { return cSKW_MINUSTerminalRuleCall_1_4_0; }
		
		//KW_INCLUDE
		public RuleCall getKW_INCLUDETerminalRuleCall_1_4_1() { return cKW_INCLUDETerminalRuleCall_1_4_1; }
		
		//WS+
		public RuleCall getWSTerminalRuleCall_1_4_2() { return cWSTerminalRuleCall_1_4_2; }
		
		//include=PathCmd
		public Assignment getIncludeAssignment_1_4_3() { return cIncludeAssignment_1_4_3; }
		
		//PathCmd
		public RuleCall getIncludePathCmdParserRuleCall_1_4_3_0() { return cIncludePathCmdParserRuleCall_1_4_3_0; }
		
		//KW_OUTPUT WS+ out=PathCmd
		public Group getGroup_1_5() { return cGroup_1_5; }
		
		//KW_OUTPUT
		public RuleCall getKW_OUTPUTTerminalRuleCall_1_5_0() { return cKW_OUTPUTTerminalRuleCall_1_5_0; }
		
		//WS+
		public RuleCall getWSTerminalRuleCall_1_5_1() { return cWSTerminalRuleCall_1_5_1; }
		
		//out=PathCmd
		public Assignment getOutAssignment_1_5_2() { return cOutAssignment_1_5_2; }
		
		//PathCmd
		public RuleCall getOutPathCmdParserRuleCall_1_5_2_0() { return cOutPathCmdParserRuleCall_1_5_2_0; }
		
		//KW_LANG WS+ lang=PathCmd
		public Group getGroup_1_6() { return cGroup_1_6; }
		
		//KW_LANG
		public RuleCall getKW_LANGTerminalRuleCall_1_6_0() { return cKW_LANGTerminalRuleCall_1_6_0; }
		
		//WS+
		public RuleCall getWSTerminalRuleCall_1_6_1() { return cWSTerminalRuleCall_1_6_1; }
		
		//lang=PathCmd
		public Assignment getLangAssignment_1_6_2() { return cLangAssignment_1_6_2; }
		
		//PathCmd
		public RuleCall getLangPathCmdParserRuleCall_1_6_2_0() { return cLangPathCmdParserRuleCall_1_6_2_0; }
		
		//SKW_MINUS SKW_MINUS? option=Option?
		public Group getGroup_1_7() { return cGroup_1_7; }
		
		//SKW_MINUS
		public RuleCall getSKW_MINUSTerminalRuleCall_1_7_0() { return cSKW_MINUSTerminalRuleCall_1_7_0; }
		
		//SKW_MINUS?
		public RuleCall getSKW_MINUSTerminalRuleCall_1_7_1() { return cSKW_MINUSTerminalRuleCall_1_7_1; }
		
		//option=Option?
		public Assignment getOptionAssignment_1_7_2() { return cOptionAssignment_1_7_2; }
		
		//Option
		public RuleCall getOptionOptionParserRuleCall_1_7_2_0() { return cOptionOptionParserRuleCall_1_7_2_0; }
		
		//in=Identifier
		public Assignment getInAssignment_1_8() { return cInAssignment_1_8; }
		
		//Identifier
		public RuleCall getInIdentifierParserRuleCall_1_8_0() { return cInIdentifierParserRuleCall_1_8_0; }
	}
	public class IncSysElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.IncSys");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSKW_MINUSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cKW_INCSYSTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//IncSys:
		//	SKW_MINUS KW_INCSYS;
		@Override public ParserRule getRule() { return rule; }
		
		//SKW_MINUS KW_INCSYS
		public Group getGroup() { return cGroup; }
		
		//SKW_MINUS
		public RuleCall getSKW_MINUSTerminalRuleCall_0() { return cSKW_MINUSTerminalRuleCall_0; }
		
		//KW_INCSYS
		public RuleCall getKW_INCSYSTerminalRuleCall_1() { return cKW_INCSYSTerminalRuleCall_1; }
	}
	public class NoStdIncElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.NoStdInc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSKW_MINUSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cKW_NOSTDINCTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//NoStdInc:
		//	SKW_MINUS KW_NOSTDINC;
		@Override public ParserRule getRule() { return rule; }
		
		//SKW_MINUS KW_NOSTDINC
		public Group getGroup() { return cGroup; }
		
		//SKW_MINUS
		public RuleCall getSKW_MINUSTerminalRuleCall_0() { return cSKW_MINUSTerminalRuleCall_0; }
		
		//KW_NOSTDINC
		public RuleCall getKW_NOSTDINCTerminalRuleCall_1() { return cKW_NOSTDINCTerminalRuleCall_1; }
	}
	public class MacroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.Macro");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleMacroParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cObjectMacroParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionMacroParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStringMacroParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Macro:
		//	SimpleMacro
		//	| ObjectMacro
		//	| FunctionMacro
		//	| StringMacro;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleMacro | ObjectMacro | FunctionMacro | StringMacro
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimpleMacro
		public RuleCall getSimpleMacroParserRuleCall_0() { return cSimpleMacroParserRuleCall_0; }
		
		//ObjectMacro
		public RuleCall getObjectMacroParserRuleCall_1() { return cObjectMacroParserRuleCall_1; }
		
		//FunctionMacro
		public RuleCall getFunctionMacroParserRuleCall_2() { return cFunctionMacroParserRuleCall_2; }
		
		//StringMacro
		public RuleCall getStringMacroParserRuleCall_3() { return cStringMacroParserRuleCall_3; }
	}
	public class SimpleMacroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.SimpleMacro");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSimpleMacroAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameMacroLegalPartParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//SimpleMacro Macro:
		//	{SimpleMacro} name=MacroLegalPart
		@Override public ParserRule getRule() { return rule; }
		
		//{SimpleMacro} name=MacroLegalPart
		public Group getGroup() { return cGroup; }
		
		//{SimpleMacro}
		public Action getSimpleMacroAction_0() { return cSimpleMacroAction_0; }
		
		//name=MacroLegalPart
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//MacroLegalPart
		public RuleCall getNameMacroLegalPartParserRuleCall_1_0() { return cNameMacroLegalPartParserRuleCall_1_0; }
	}
	public class ObjectMacroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.ObjectMacro");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObjectMacroAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameMacroLegalPartParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cSKW_ASSIGNTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueMyCodeParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//ObjectMacro Macro:
		//	{ObjectMacro} name=MacroLegalPart SKW_ASSIGN
		//	value=MyCode
		@Override public ParserRule getRule() { return rule; }
		
		//{ObjectMacro} name=MacroLegalPart SKW_ASSIGN value=MyCode
		public Group getGroup() { return cGroup; }
		
		//{ObjectMacro}
		public Action getObjectMacroAction_0() { return cObjectMacroAction_0; }
		
		//name=MacroLegalPart
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//MacroLegalPart
		public RuleCall getNameMacroLegalPartParserRuleCall_1_0() { return cNameMacroLegalPartParserRuleCall_1_0; }
		
		//SKW_ASSIGN
		public RuleCall getSKW_ASSIGNTerminalRuleCall_2() { return cSKW_ASSIGNTerminalRuleCall_2; }
		
		//value=MyCode
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//MyCode
		public RuleCall getValueMyCodeParserRuleCall_3_0() { return cValueMyCodeParserRuleCall_3_0; }
	}
	public class FunctionMacroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.FunctionMacro");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionMacroAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameMacroLegalPartParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cSKW_LEFTPARENTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParamsMacroLegalPartParserRuleCall_3_0_0 = (RuleCall)cParamsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final RuleCall cSKW_COMMATerminalRuleCall_3_1_0 = (RuleCall)cGroup_3_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParamsMacroLegalPartParserRuleCall_3_1_1_0 = (RuleCall)cParamsAssignment_3_1_1.eContents().get(0);
		private final RuleCall cSKW_RIGHTPARENTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cSKW_ASSIGNTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cValueAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cValueMyCodeParserRuleCall_6_0 = (RuleCall)cValueAssignment_6.eContents().get(0);
		
		//FunctionMacro Macro:
		//	{FunctionMacro} name=MacroLegalPart
		//	SKW_LEFTPAREN (params+=MacroLegalPart (SKW_COMMA params+=MacroLegalPart)*)?
		//	SKW_RIGHTPAREN SKW_ASSIGN
		//	value=MyCode
		@Override public ParserRule getRule() { return rule; }
		
		//{FunctionMacro} name=MacroLegalPart SKW_LEFTPAREN (params+=MacroLegalPart (SKW_COMMA params+=MacroLegalPart)*)?
		//SKW_RIGHTPAREN SKW_ASSIGN value=MyCode
		public Group getGroup() { return cGroup; }
		
		//{FunctionMacro}
		public Action getFunctionMacroAction_0() { return cFunctionMacroAction_0; }
		
		//name=MacroLegalPart
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//MacroLegalPart
		public RuleCall getNameMacroLegalPartParserRuleCall_1_0() { return cNameMacroLegalPartParserRuleCall_1_0; }
		
		//SKW_LEFTPAREN
		public RuleCall getSKW_LEFTPARENTerminalRuleCall_2() { return cSKW_LEFTPARENTerminalRuleCall_2; }
		
		//(params+=MacroLegalPart (SKW_COMMA params+=MacroLegalPart)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//params+=MacroLegalPart
		public Assignment getParamsAssignment_3_0() { return cParamsAssignment_3_0; }
		
		//MacroLegalPart
		public RuleCall getParamsMacroLegalPartParserRuleCall_3_0_0() { return cParamsMacroLegalPartParserRuleCall_3_0_0; }
		
		//(SKW_COMMA params+=MacroLegalPart)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//SKW_COMMA
		public RuleCall getSKW_COMMATerminalRuleCall_3_1_0() { return cSKW_COMMATerminalRuleCall_3_1_0; }
		
		//params+=MacroLegalPart
		public Assignment getParamsAssignment_3_1_1() { return cParamsAssignment_3_1_1; }
		
		//MacroLegalPart
		public RuleCall getParamsMacroLegalPartParserRuleCall_3_1_1_0() { return cParamsMacroLegalPartParserRuleCall_3_1_1_0; }
		
		//SKW_RIGHTPAREN
		public RuleCall getSKW_RIGHTPARENTerminalRuleCall_4() { return cSKW_RIGHTPARENTerminalRuleCall_4; }
		
		//SKW_ASSIGN
		public RuleCall getSKW_ASSIGNTerminalRuleCall_5() { return cSKW_ASSIGNTerminalRuleCall_5; }
		
		//value=MyCode
		public Assignment getValueAssignment_6() { return cValueAssignment_6; }
		
		//MyCode
		public RuleCall getValueMyCodeParserRuleCall_6_0() { return cValueMyCodeParserRuleCall_6_0; }
	}
	public class StringMacroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.StringMacro");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringMacroAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStringAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStringSTRING2TerminalRuleCall_1_0 = (RuleCall)cStringAssignment_1.eContents().get(0);
		
		//StringMacro Macro:
		//	{StringMacro} string=STRING2
		@Override public ParserRule getRule() { return rule; }
		
		//{StringMacro} string=STRING2
		public Group getGroup() { return cGroup; }
		
		//{StringMacro}
		public Action getStringMacroAction_0() { return cStringMacroAction_0; }
		
		//string=STRING2
		public Assignment getStringAssignment_1() { return cStringAssignment_1; }
		
		//STRING2
		public RuleCall getStringSTRING2TerminalRuleCall_1_0() { return cStringSTRING2TerminalRuleCall_1_0; }
	}
	public class PathCmdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.PathCmd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPathCmdAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathPathLegalPartParserRuleCall_1_0 = (RuleCall)cPathAssignment_1.eContents().get(0);
		
		//PathCmd:
		//	{PathCmd} path=PathLegalPart;
		@Override public ParserRule getRule() { return rule; }
		
		//{PathCmd} path=PathLegalPart
		public Group getGroup() { return cGroup; }
		
		//{PathCmd}
		public Action getPathCmdAction_0() { return cPathCmdAction_0; }
		
		//path=PathLegalPart
		public Assignment getPathAssignment_1() { return cPathAssignment_1; }
		
		//PathLegalPart
		public RuleCall getPathPathLegalPartParserRuleCall_1_0() { return cPathPathLegalPartParserRuleCall_1_0; }
	}
	public class PathLegalPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.PathLegalPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRING2TerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cKW_NOSTDINCTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cKW_INCSYSTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cKW_INCLUDETerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//PathLegalPart:
		//	Identifier
		//	| STRING2
		//	| KW_NOSTDINC
		//	| KW_INCSYS
		//	| KW_INCLUDE;
		@Override public ParserRule getRule() { return rule; }
		
		//Identifier | STRING2 | KW_NOSTDINC | KW_INCSYS | KW_INCLUDE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_0() { return cIdentifierParserRuleCall_0; }
		
		//STRING2
		public RuleCall getSTRING2TerminalRuleCall_1() { return cSTRING2TerminalRuleCall_1; }
		
		//KW_NOSTDINC
		public RuleCall getKW_NOSTDINCTerminalRuleCall_2() { return cKW_NOSTDINCTerminalRuleCall_2; }
		
		//KW_INCSYS
		public RuleCall getKW_INCSYSTerminalRuleCall_3() { return cKW_INCSYSTerminalRuleCall_3; }
		
		//KW_INCLUDE
		public RuleCall getKW_INCLUDETerminalRuleCall_4() { return cKW_INCLUDETerminalRuleCall_4; }
	}
	public class MacroLegalPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.MacroLegalPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cKW_NOSTDINCTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cKW_INCSYSTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cKW_INCLUDETerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cANY_OTHERTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//MacroLegalPart:
		//	Identifier
		//	| KW_NOSTDINC
		//	| KW_INCSYS
		//	| KW_INCLUDE
		//	| ANY_OTHER;
		@Override public ParserRule getRule() { return rule; }
		
		//Identifier | KW_NOSTDINC | KW_INCSYS | KW_INCLUDE | ANY_OTHER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_0() { return cIdentifierParserRuleCall_0; }
		
		//KW_NOSTDINC
		public RuleCall getKW_NOSTDINCTerminalRuleCall_1() { return cKW_NOSTDINCTerminalRuleCall_1; }
		
		//KW_INCSYS
		public RuleCall getKW_INCSYSTerminalRuleCall_2() { return cKW_INCSYSTerminalRuleCall_2; }
		
		//KW_INCLUDE
		public RuleCall getKW_INCLUDETerminalRuleCall_3() { return cKW_INCLUDETerminalRuleCall_3; }
		
		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_4() { return cANY_OTHERTerminalRuleCall_4; }
	}
	public class MyCodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.MyCode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRING2TerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSKW_LEFTPARENTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSKW_RIGHTPARENTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cKW_NOSTDINCTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cKW_INCSYSTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cKW_INCLUDETerminalRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cANY_OTHERTerminalRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//MyCode:
		//	Identifier
		//	| STRING2
		//	| SKW_LEFTPAREN
		//	| SKW_RIGHTPAREN
		//	| KW_NOSTDINC
		//	| KW_INCSYS
		//	| KW_INCLUDE
		//	| ANY_OTHER+;
		@Override public ParserRule getRule() { return rule; }
		
		//Identifier | STRING2 | SKW_LEFTPAREN | SKW_RIGHTPAREN | KW_NOSTDINC | KW_INCSYS | KW_INCLUDE | ANY_OTHER+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_0() { return cIdentifierParserRuleCall_0; }
		
		//STRING2
		public RuleCall getSTRING2TerminalRuleCall_1() { return cSTRING2TerminalRuleCall_1; }
		
		//SKW_LEFTPAREN
		public RuleCall getSKW_LEFTPARENTerminalRuleCall_2() { return cSKW_LEFTPARENTerminalRuleCall_2; }
		
		//SKW_RIGHTPAREN
		public RuleCall getSKW_RIGHTPARENTerminalRuleCall_3() { return cSKW_RIGHTPARENTerminalRuleCall_3; }
		
		//KW_NOSTDINC
		public RuleCall getKW_NOSTDINCTerminalRuleCall_4() { return cKW_NOSTDINCTerminalRuleCall_4; }
		
		//KW_INCSYS
		public RuleCall getKW_INCSYSTerminalRuleCall_5() { return cKW_INCSYSTerminalRuleCall_5; }
		
		//KW_INCLUDE
		public RuleCall getKW_INCLUDETerminalRuleCall_6() { return cKW_INCLUDETerminalRuleCall_6; }
		
		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_7() { return cANY_OTHERTerminalRuleCall_7; }
	}
	public class OptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.Option");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOptionPartParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cSKW_COMMATerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cSKW_MINUSTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cOptionPartParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//Option:
		//	OptionPart+ (SKW_COMMA SKW_MINUS? OptionPart+)*;
		@Override public ParserRule getRule() { return rule; }
		
		//OptionPart+ (SKW_COMMA SKW_MINUS? OptionPart+)*
		public Group getGroup() { return cGroup; }
		
		//OptionPart+
		public RuleCall getOptionPartParserRuleCall_0() { return cOptionPartParserRuleCall_0; }
		
		//(SKW_COMMA SKW_MINUS? OptionPart+)*
		public Group getGroup_1() { return cGroup_1; }
		
		//SKW_COMMA
		public RuleCall getSKW_COMMATerminalRuleCall_1_0() { return cSKW_COMMATerminalRuleCall_1_0; }
		
		//SKW_MINUS?
		public RuleCall getSKW_MINUSTerminalRuleCall_1_1() { return cSKW_MINUSTerminalRuleCall_1_1; }
		
		//OptionPart+
		public RuleCall getOptionPartParserRuleCall_1_2() { return cOptionPartParserRuleCall_1_2; }
	}
	public class OptionPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.OptionPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOptionLegalStartParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cOptionLegalContinuationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//OptionPart:
		//	OptionLegalStart OptionLegalContinuation*;
		@Override public ParserRule getRule() { return rule; }
		
		//OptionLegalStart OptionLegalContinuation*
		public Group getGroup() { return cGroup; }
		
		//OptionLegalStart
		public RuleCall getOptionLegalStartParserRuleCall_0() { return cOptionLegalStartParserRuleCall_0; }
		
		//OptionLegalContinuation*
		public RuleCall getOptionLegalContinuationParserRuleCall_1() { return cOptionLegalContinuationParserRuleCall_1; }
	}
	public class OptionLegalStartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.OptionLegalStart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRING2TerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OptionLegalStart:
		//	Identifier | STRING2;
		@Override public ParserRule getRule() { return rule; }
		
		//Identifier | STRING2
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_0() { return cIdentifierParserRuleCall_0; }
		
		//STRING2
		public RuleCall getSTRING2TerminalRuleCall_1() { return cSTRING2TerminalRuleCall_1; }
	}
	public class OptionLegalContinuationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.OptionLegalContinuation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cKW_NOSTDINCTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cKW_INCSYSTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cKW_INCLUDETerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSKW_ASSIGNTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cANY_OTHERTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//OptionLegalContinuation:
		//	KW_NOSTDINC
		//	| KW_INCSYS
		//	| KW_INCLUDE
		//	| SKW_ASSIGN
		//	| ANY_OTHER;
		@Override public ParserRule getRule() { return rule; }
		
		//KW_NOSTDINC | KW_INCSYS | KW_INCLUDE | SKW_ASSIGN | ANY_OTHER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//KW_NOSTDINC
		public RuleCall getKW_NOSTDINCTerminalRuleCall_0() { return cKW_NOSTDINCTerminalRuleCall_0; }
		
		//KW_INCSYS
		public RuleCall getKW_INCSYSTerminalRuleCall_1() { return cKW_INCSYSTerminalRuleCall_1; }
		
		//KW_INCLUDE
		public RuleCall getKW_INCLUDETerminalRuleCall_2() { return cKW_INCLUDETerminalRuleCall_2; }
		
		//SKW_ASSIGN
		public RuleCall getSKW_ASSIGNTerminalRuleCall_3() { return cSKW_ASSIGNTerminalRuleCall_3; }
		
		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_4() { return cANY_OTHERTerminalRuleCall_4; }
	}
	public class IdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.Identifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cKW_VARTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Identifier:
		//	ID | KW_VAR;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | KW_VAR
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//KW_VAR
		public RuleCall getKW_VARTerminalRuleCall_1() { return cKW_VARTerminalRuleCall_1; }
	}
	
	
	private final ModelElements pModel;
	private final CmdLineElements pCmdLine;
	private final ArgumentElements pArgument;
	private final IncSysElements pIncSys;
	private final NoStdIncElements pNoStdInc;
	private final MacroElements pMacro;
	private final SimpleMacroElements pSimpleMacro;
	private final ObjectMacroElements pObjectMacro;
	private final FunctionMacroElements pFunctionMacro;
	private final StringMacroElements pStringMacro;
	private final PathCmdElements pPathCmd;
	private final PathLegalPartElements pPathLegalPart;
	private final MacroLegalPartElements pMacroLegalPart;
	private final MyCodeElements pMyCode;
	private final OptionElements pOption;
	private final OptionPartElements pOptionPart;
	private final OptionLegalStartElements pOptionLegalStart;
	private final OptionLegalContinuationElements pOptionLegalContinuation;
	private final IdentifierElements pIdentifier;
	private final TerminalRule tSKW_DOT;
	private final TerminalRule tSKW_DIV;
	private final TerminalRule tSKW_COLON;
	private final TerminalRule tSKW_MINUS;
	private final TerminalRule tSKW_ASSIGN;
	private final TerminalRule tSKW_LEFTPAREN;
	private final TerminalRule tSKW_RIGHTPAREN;
	private final TerminalRule tSKW_COMMA;
	private final TerminalRule tSKW_DOLLAR;
	private final TerminalRule tSKW_BACKSLASH;
	private final TerminalRule tKW_DEFINE;
	private final TerminalRule tKW_INCDIR;
	private final TerminalRule tKW_OUTPUT;
	private final TerminalRule tKW_LANG;
	private final TerminalRule tKW_NOSTDINC;
	private final TerminalRule tKW_INCSYS;
	private final TerminalRule tKW_INCLUDE;
	private final TerminalRule tKW_VAR;
	private final TerminalRule tID;
	private final TerminalRule tID_PART_1;
	private final TerminalRule tID_PART_2;
	private final TerminalRule tLETTER;
	private final TerminalRule tINT;
	private final TerminalRule tDIGIT;
	private final TerminalRule tSTRING2;
	private final TerminalRule tNEWLINE;
	private final TerminalRule tWS;
	private final TerminalRule tSKW_HASH;
	private final TerminalRule tLINE_BREAK;
	private final TerminalRule tLINE_COMMENT;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public CmdArgsGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pModel = new ModelElements();
		this.pCmdLine = new CmdLineElements();
		this.pArgument = new ArgumentElements();
		this.pIncSys = new IncSysElements();
		this.pNoStdInc = new NoStdIncElements();
		this.pMacro = new MacroElements();
		this.pSimpleMacro = new SimpleMacroElements();
		this.pObjectMacro = new ObjectMacroElements();
		this.pFunctionMacro = new FunctionMacroElements();
		this.pStringMacro = new StringMacroElements();
		this.pPathCmd = new PathCmdElements();
		this.pPathLegalPart = new PathLegalPartElements();
		this.pMacroLegalPart = new MacroLegalPartElements();
		this.pMyCode = new MyCodeElements();
		this.pOption = new OptionElements();
		this.pOptionPart = new OptionPartElements();
		this.pOptionLegalStart = new OptionLegalStartElements();
		this.pOptionLegalContinuation = new OptionLegalContinuationElements();
		this.pIdentifier = new IdentifierElements();
		this.tSKW_DOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.SKW_DOT");
		this.tSKW_DIV = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.SKW_DIV");
		this.tSKW_COLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.SKW_COLON");
		this.tSKW_MINUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.SKW_MINUS");
		this.tSKW_ASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.SKW_ASSIGN");
		this.tSKW_LEFTPAREN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.SKW_LEFTPAREN");
		this.tSKW_RIGHTPAREN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.SKW_RIGHTPAREN");
		this.tSKW_COMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.SKW_COMMA");
		this.tSKW_DOLLAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.SKW_DOLLAR");
		this.tSKW_BACKSLASH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.SKW_BACKSLASH");
		this.tKW_DEFINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.KW_DEFINE");
		this.tKW_INCDIR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.KW_INCDIR");
		this.tKW_OUTPUT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.KW_OUTPUT");
		this.tKW_LANG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.KW_LANG");
		this.tKW_NOSTDINC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.KW_NOSTDINC");
		this.tKW_INCSYS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.KW_INCSYS");
		this.tKW_INCLUDE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.KW_INCLUDE");
		this.tKW_VAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.KW_VAR");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.ID");
		this.tID_PART_1 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.ID_PART_1");
		this.tID_PART_2 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.ID_PART_2");
		this.tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.LETTER");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.INT");
		this.tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.DIGIT");
		this.tSTRING2 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.STRING2");
		this.tNEWLINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.NEWLINE");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.WS");
		this.tSKW_HASH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.SKW_HASH");
		this.tLINE_BREAK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.LINE_BREAK");
		this.tLINE_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.LINE_COMMENT");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("at.jku.weiner.c.cmdarguments.CmdArgs".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//	{Model} (lines+=CmdLine (NEWLINE* lines+=CmdLine)*)?
	//	NEWLINE?;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//CmdLine:
	//	{CmdLine} start=Identifier WS+ SKW_COLON SKW_ASSIGN WS+ (arguments+=Argument (WS+ arguments+=Argument)*);
	public CmdLineElements getCmdLineAccess() {
		return pCmdLine;
	}
	
	public ParserRule getCmdLineRule() {
		return getCmdLineAccess().getRule();
	}
	
	//Argument:
	//	{Argument} (KW_DEFINE macro=Macro | incDir?=KW_INCDIR useIncDir=PathCmd | incSys?=IncSys WS+ useIncDir=PathCmd |
	//	nostdinc?=NoStdInc | SKW_MINUS KW_INCLUDE WS+ include=PathCmd | KW_OUTPUT WS+ out=PathCmd | KW_LANG WS+ lang=PathCmd |
	//	SKW_MINUS SKW_MINUS? option=Option? | in=Identifier);
	public ArgumentElements getArgumentAccess() {
		return pArgument;
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}
	
	//IncSys:
	//	SKW_MINUS KW_INCSYS;
	public IncSysElements getIncSysAccess() {
		return pIncSys;
	}
	
	public ParserRule getIncSysRule() {
		return getIncSysAccess().getRule();
	}
	
	//NoStdInc:
	//	SKW_MINUS KW_NOSTDINC;
	public NoStdIncElements getNoStdIncAccess() {
		return pNoStdInc;
	}
	
	public ParserRule getNoStdIncRule() {
		return getNoStdIncAccess().getRule();
	}
	
	//Macro:
	//	SimpleMacro
	//	| ObjectMacro
	//	| FunctionMacro
	//	| StringMacro;
	public MacroElements getMacroAccess() {
		return pMacro;
	}
	
	public ParserRule getMacroRule() {
		return getMacroAccess().getRule();
	}
	
	//SimpleMacro Macro:
	//	{SimpleMacro} name=MacroLegalPart
	public SimpleMacroElements getSimpleMacroAccess() {
		return pSimpleMacro;
	}
	
	public ParserRule getSimpleMacroRule() {
		return getSimpleMacroAccess().getRule();
	}
	
	//ObjectMacro Macro:
	//	{ObjectMacro} name=MacroLegalPart SKW_ASSIGN
	//	value=MyCode
	public ObjectMacroElements getObjectMacroAccess() {
		return pObjectMacro;
	}
	
	public ParserRule getObjectMacroRule() {
		return getObjectMacroAccess().getRule();
	}
	
	//FunctionMacro Macro:
	//	{FunctionMacro} name=MacroLegalPart
	//	SKW_LEFTPAREN (params+=MacroLegalPart (SKW_COMMA params+=MacroLegalPart)*)?
	//	SKW_RIGHTPAREN SKW_ASSIGN
	//	value=MyCode
	public FunctionMacroElements getFunctionMacroAccess() {
		return pFunctionMacro;
	}
	
	public ParserRule getFunctionMacroRule() {
		return getFunctionMacroAccess().getRule();
	}
	
	//StringMacro Macro:
	//	{StringMacro} string=STRING2
	public StringMacroElements getStringMacroAccess() {
		return pStringMacro;
	}
	
	public ParserRule getStringMacroRule() {
		return getStringMacroAccess().getRule();
	}
	
	//PathCmd:
	//	{PathCmd} path=PathLegalPart;
	public PathCmdElements getPathCmdAccess() {
		return pPathCmd;
	}
	
	public ParserRule getPathCmdRule() {
		return getPathCmdAccess().getRule();
	}
	
	//PathLegalPart:
	//	Identifier
	//	| STRING2
	//	| KW_NOSTDINC
	//	| KW_INCSYS
	//	| KW_INCLUDE;
	public PathLegalPartElements getPathLegalPartAccess() {
		return pPathLegalPart;
	}
	
	public ParserRule getPathLegalPartRule() {
		return getPathLegalPartAccess().getRule();
	}
	
	//MacroLegalPart:
	//	Identifier
	//	| KW_NOSTDINC
	//	| KW_INCSYS
	//	| KW_INCLUDE
	//	| ANY_OTHER;
	public MacroLegalPartElements getMacroLegalPartAccess() {
		return pMacroLegalPart;
	}
	
	public ParserRule getMacroLegalPartRule() {
		return getMacroLegalPartAccess().getRule();
	}
	
	//MyCode:
	//	Identifier
	//	| STRING2
	//	| SKW_LEFTPAREN
	//	| SKW_RIGHTPAREN
	//	| KW_NOSTDINC
	//	| KW_INCSYS
	//	| KW_INCLUDE
	//	| ANY_OTHER+;
	public MyCodeElements getMyCodeAccess() {
		return pMyCode;
	}
	
	public ParserRule getMyCodeRule() {
		return getMyCodeAccess().getRule();
	}
	
	//Option:
	//	OptionPart+ (SKW_COMMA SKW_MINUS? OptionPart+)*;
	public OptionElements getOptionAccess() {
		return pOption;
	}
	
	public ParserRule getOptionRule() {
		return getOptionAccess().getRule();
	}
	
	//OptionPart:
	//	OptionLegalStart OptionLegalContinuation*;
	public OptionPartElements getOptionPartAccess() {
		return pOptionPart;
	}
	
	public ParserRule getOptionPartRule() {
		return getOptionPartAccess().getRule();
	}
	
	//OptionLegalStart:
	//	Identifier | STRING2;
	public OptionLegalStartElements getOptionLegalStartAccess() {
		return pOptionLegalStart;
	}
	
	public ParserRule getOptionLegalStartRule() {
		return getOptionLegalStartAccess().getRule();
	}
	
	//OptionLegalContinuation:
	//	KW_NOSTDINC
	//	| KW_INCSYS
	//	| KW_INCLUDE
	//	| SKW_ASSIGN
	//	| ANY_OTHER;
	public OptionLegalContinuationElements getOptionLegalContinuationAccess() {
		return pOptionLegalContinuation;
	}
	
	public ParserRule getOptionLegalContinuationRule() {
		return getOptionLegalContinuationAccess().getRule();
	}
	
	//Identifier:
	//	ID | KW_VAR;
	public IdentifierElements getIdentifierAccess() {
		return pIdentifier;
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}
	
	//terminal fragment SKW_DOT:
	//	'.';
	public TerminalRule getSKW_DOTRule() {
		return tSKW_DOT;
	}
	
	//terminal fragment SKW_DIV:
	//	'/';
	public TerminalRule getSKW_DIVRule() {
		return tSKW_DIV;
	}
	
	//terminal SKW_COLON:
	//	':';
	public TerminalRule getSKW_COLONRule() {
		return tSKW_COLON;
	}
	
	//terminal SKW_MINUS:
	//	'-';
	public TerminalRule getSKW_MINUSRule() {
		return tSKW_MINUS;
	}
	
	//terminal SKW_ASSIGN:
	//	'=';
	public TerminalRule getSKW_ASSIGNRule() {
		return tSKW_ASSIGN;
	}
	
	//terminal SKW_LEFTPAREN:
	//	'(';
	public TerminalRule getSKW_LEFTPARENRule() {
		return tSKW_LEFTPAREN;
	}
	
	//terminal SKW_RIGHTPAREN:
	//	')';
	public TerminalRule getSKW_RIGHTPARENRule() {
		return tSKW_RIGHTPAREN;
	}
	
	//terminal SKW_COMMA:
	//	',';
	public TerminalRule getSKW_COMMARule() {
		return tSKW_COMMA;
	}
	
	//terminal SKW_DOLLAR:
	//	'$';
	public TerminalRule getSKW_DOLLARRule() {
		return tSKW_DOLLAR;
	}
	
	//terminal SKW_BACKSLASH:
	//	'\\';
	public TerminalRule getSKW_BACKSLASHRule() {
		return tSKW_BACKSLASH;
	}
	
	//terminal KW_DEFINE:
	//	SKW_MINUS 'D';
	public TerminalRule getKW_DEFINERule() {
		return tKW_DEFINE;
	}
	
	//terminal KW_INCDIR:
	//	SKW_MINUS 'I';
	public TerminalRule getKW_INCDIRRule() {
		return tKW_INCDIR;
	}
	
	//terminal KW_OUTPUT:
	//	SKW_MINUS 'o';
	public TerminalRule getKW_OUTPUTRule() {
		return tKW_OUTPUT;
	}
	
	//terminal KW_LANG:
	//	SKW_MINUS 'x';
	public TerminalRule getKW_LANGRule() {
		return tKW_LANG;
	}
	
	//terminal KW_NOSTDINC:
	//	'nostdinc';
	public TerminalRule getKW_NOSTDINCRule() {
		return tKW_NOSTDINC;
	}
	
	//terminal KW_INCSYS:
	//	'isystem';
	public TerminalRule getKW_INCSYSRule() {
		return tKW_INCSYS;
	}
	
	//terminal KW_INCLUDE:
	//	'include';
	public TerminalRule getKW_INCLUDERule() {
		return tKW_INCLUDE;
	}
	
	//terminal KW_VAR:
	//	SKW_DOLLAR SKW_LEFTPAREN->SKW_RIGHTPAREN;
	public TerminalRule getKW_VARRule() {
		return tKW_VAR;
	}
	
	//terminal ID:
	//	ID_PART_1 ID_PART_2*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal ID_PART_1:
	//	LETTER | SKW_DIV | SKW_DOT | INT;
	public TerminalRule getID_PART_1Rule() {
		return tID_PART_1;
	}
	
	//terminal ID_PART_2:
	//	ID_PART_1 | SKW_COLON SKW_BACKSLASH | SKW_BACKSLASH | SKW_MINUS;
	public TerminalRule getID_PART_2Rule() {
		return tID_PART_2;
	}
	
	//terminal fragment LETTER:
	//	'A'..'Z'
	//	| 'a'..'z'
	//	| '_';
	public TerminalRule getLETTERRule() {
		return tLETTER;
	}
	
	//terminal INT:
	//	DIGIT+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal fragment DIGIT:
	//	'0'..'9';
	public TerminalRule getDIGITRule() {
		return tDIGIT;
	}
	
	//terminal STRING2:
	//	'"' (SKW_BACKSLASH . | !(SKW_BACKSLASH | '"'))* '"' |
	//	"'" (SKW_BACKSLASH . | !(SKW_BACKSLASH | "'"))* "'";
	public TerminalRule getSTRING2Rule() {
		return tSTRING2;
	}
	
	//terminal NEWLINE:
	//	'\n' | '\r';
	public TerminalRule getNEWLINERule() {
		return tNEWLINE;
	}
	
	//terminal WS:
	//	' ' | '\t';
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal fragment SKW_HASH:
	//	'#';
	public TerminalRule getSKW_HASHRule() {
		return tSKW_HASH;
	}
	
	//terminal LINE_BREAK:
	//	SKW_BACKSLASH NEWLINE;
	public TerminalRule getLINE_BREAKRule() {
		return tLINE_BREAK;
	}
	
	//terminal LINE_COMMENT:
	//	SKW_HASH->NEWLINE;
	public TerminalRule getLINE_COMMENTRule() {
		return tLINE_COMMENT;
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
}
