/*
 * generated by Xtext 2.9.0-SNAPSHOT
 */
package at.jku.weiner.c.cmdarguments.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractParserRuleElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CmdArgsGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cLinesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cLinesCmdLineParserRuleCall_1_0_0 = (RuleCall)cLinesAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final RuleCall cNEWLINETerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Assignment cLinesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cLinesCmdLineParserRuleCall_1_1_1_0 = (RuleCall)cLinesAssignment_1_1_1.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Model:
		//	{Model} (lines+=CmdLine (NEWLINE lines+=CmdLine)*)?
		//	NEWLINE?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Model} (lines+=CmdLine (NEWLINE lines+=CmdLine)*)? NEWLINE?
		public Group getGroup() { return cGroup; }
		
		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }
		
		//(lines+=CmdLine (NEWLINE lines+=CmdLine)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//lines+=CmdLine
		public Assignment getLinesAssignment_1_0() { return cLinesAssignment_1_0; }
		
		//CmdLine
		public RuleCall getLinesCmdLineParserRuleCall_1_0_0() { return cLinesCmdLineParserRuleCall_1_0_0; }
		
		//(NEWLINE lines+=CmdLine)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_1_1_0() { return cNEWLINETerminalRuleCall_1_1_0; }
		
		//lines+=CmdLine
		public Assignment getLinesAssignment_1_1_1() { return cLinesAssignment_1_1_1; }
		
		//CmdLine
		public RuleCall getLinesCmdLineParserRuleCall_1_1_1_0() { return cLinesCmdLineParserRuleCall_1_1_1_0; }
		
		//NEWLINE?
		public RuleCall getNEWLINETerminalRuleCall_2() { return cNEWLINETerminalRuleCall_2; }
	}
	public class CmdLineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.CmdLine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCmdLineAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cArgumentsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cArgumentsArgumentParserRuleCall_1_0_0 = (RuleCall)cArgumentsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cArgumentsArgumentParserRuleCall_1_1_1_0 = (RuleCall)cArgumentsAssignment_1_1_1.eContents().get(0);
		
		//CmdLine:
		//	{CmdLine} (arguments+=Argument (WS+ arguments+=Argument)*);
		@Override public ParserRule getRule() { return rule; }
		
		//{CmdLine} (arguments+=Argument (WS+ arguments+=Argument)*)
		public Group getGroup() { return cGroup; }
		
		//{CmdLine}
		public Action getCmdLineAction_0() { return cCmdLineAction_0; }
		
		//(arguments+=Argument (WS+ arguments+=Argument)*)
		public Group getGroup_1() { return cGroup_1; }
		
		//arguments+=Argument
		public Assignment getArgumentsAssignment_1_0() { return cArgumentsAssignment_1_0; }
		
		//Argument
		public RuleCall getArgumentsArgumentParserRuleCall_1_0_0() { return cArgumentsArgumentParserRuleCall_1_0_0; }
		
		//(WS+ arguments+=Argument)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//WS+
		public RuleCall getWSTerminalRuleCall_1_1_0() { return cWSTerminalRuleCall_1_1_0; }
		
		//arguments+=Argument
		public Assignment getArgumentsAssignment_1_1_1() { return cArgumentsAssignment_1_1_1; }
		
		//Argument
		public RuleCall getArgumentsArgumentParserRuleCall_1_1_1_0() { return cArgumentsArgumentParserRuleCall_1_1_1_0; }
	}
	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.Argument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArgumentAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cDefineParserRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Assignment cMacroAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cMacroMacroParserRuleCall_1_0_1_0 = (RuleCall)cMacroAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cIncDirAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cIncDirIncDirParserRuleCall_1_1_0_0 = (RuleCall)cIncDirAssignment_1_1_0.eContents().get(0);
		private final Assignment cUseIncDirAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cUseIncDirPathCmdParserRuleCall_1_1_1_0 = (RuleCall)cUseIncDirAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Assignment cIncSysAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cIncSysIncSysParserRuleCall_1_2_0_0 = (RuleCall)cIncSysAssignment_1_2_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1_2_1 = (RuleCall)cGroup_1_2.eContents().get(1);
		private final Assignment cUseIncDirAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cUseIncDirPathCmdParserRuleCall_1_2_2_0 = (RuleCall)cUseIncDirAssignment_1_2_2.eContents().get(0);
		private final Assignment cNostdincAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cNostdincNoStdIncParserRuleCall_1_3_0 = (RuleCall)cNostdincAssignment_1_3.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cAlternatives_1.eContents().get(4);
		private final RuleCall cIncludeParserRuleCall_1_4_0 = (RuleCall)cGroup_1_4.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1_4_1 = (RuleCall)cGroup_1_4.eContents().get(1);
		private final Assignment cIncludeAssignment_1_4_2 = (Assignment)cGroup_1_4.eContents().get(2);
		private final RuleCall cIncludePathCmdParserRuleCall_1_4_2_0 = (RuleCall)cIncludeAssignment_1_4_2.eContents().get(0);
		private final Group cGroup_1_5 = (Group)cAlternatives_1.eContents().get(5);
		private final RuleCall cOutputParserRuleCall_1_5_0 = (RuleCall)cGroup_1_5.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1_5_1 = (RuleCall)cGroup_1_5.eContents().get(1);
		private final Assignment cOutAssignment_1_5_2 = (Assignment)cGroup_1_5.eContents().get(2);
		private final RuleCall cOutPathCmdParserRuleCall_1_5_2_0 = (RuleCall)cOutAssignment_1_5_2.eContents().get(0);
		private final Group cGroup_1_6 = (Group)cAlternatives_1.eContents().get(6);
		private final RuleCall cLangParserRuleCall_1_6_0 = (RuleCall)cGroup_1_6.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1_6_1 = (RuleCall)cGroup_1_6.eContents().get(1);
		private final Assignment cLangAssignment_1_6_2 = (Assignment)cGroup_1_6.eContents().get(2);
		private final RuleCall cLangPathCmdParserRuleCall_1_6_2_0 = (RuleCall)cLangAssignment_1_6_2.eContents().get(0);
		private final Group cGroup_1_7 = (Group)cAlternatives_1.eContents().get(7);
		private final RuleCall cSKW_MINUSTerminalRuleCall_1_7_0 = (RuleCall)cGroup_1_7.eContents().get(0);
		private final RuleCall cSKW_MINUSTerminalRuleCall_1_7_1 = (RuleCall)cGroup_1_7.eContents().get(1);
		private final Assignment cOptionAssignment_1_7_2 = (Assignment)cGroup_1_7.eContents().get(2);
		private final RuleCall cOptionOptionParserRuleCall_1_7_2_0 = (RuleCall)cOptionAssignment_1_7_2.eContents().get(0);
		private final Assignment cInAssignment_1_8 = (Assignment)cAlternatives_1.eContents().get(8);
		private final RuleCall cInOptionParserRuleCall_1_8_0 = (RuleCall)cInAssignment_1_8.eContents().get(0);
		
		//Argument:
		//	{Argument} (Define macro=Macro | incDir?=IncDir useIncDir=PathCmd | incSys?=IncSys WS+ useIncDir=PathCmd |
		//	nostdinc?=NoStdInc | Include WS+ include=PathCmd | Output WS+ out=PathCmd | Lang WS+ lang=PathCmd | SKW_MINUS
		//	SKW_MINUS? option=Option? | in=Option);
		@Override public ParserRule getRule() { return rule; }
		
		//{Argument} (Define macro=Macro | incDir?=IncDir useIncDir=PathCmd | incSys?=IncSys WS+ useIncDir=PathCmd |
		//nostdinc?=NoStdInc | Include WS+ include=PathCmd | Output WS+ out=PathCmd | Lang WS+ lang=PathCmd | SKW_MINUS
		//SKW_MINUS? option=Option? | in=Option)
		public Group getGroup() { return cGroup; }
		
		//{Argument}
		public Action getArgumentAction_0() { return cArgumentAction_0; }
		
		//(Define macro=Macro | incDir?=IncDir useIncDir=PathCmd | incSys?=IncSys WS+ useIncDir=PathCmd | nostdinc?=NoStdInc |
		//Include WS+ include=PathCmd | Output WS+ out=PathCmd | Lang WS+ lang=PathCmd | SKW_MINUS SKW_MINUS? option=Option? |
		//in=Option)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//Define macro=Macro
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//Define
		public RuleCall getDefineParserRuleCall_1_0_0() { return cDefineParserRuleCall_1_0_0; }
		
		//macro=Macro
		public Assignment getMacroAssignment_1_0_1() { return cMacroAssignment_1_0_1; }
		
		//Macro
		public RuleCall getMacroMacroParserRuleCall_1_0_1_0() { return cMacroMacroParserRuleCall_1_0_1_0; }
		
		//incDir?=IncDir useIncDir=PathCmd
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//incDir?=IncDir
		public Assignment getIncDirAssignment_1_1_0() { return cIncDirAssignment_1_1_0; }
		
		//IncDir
		public RuleCall getIncDirIncDirParserRuleCall_1_1_0_0() { return cIncDirIncDirParserRuleCall_1_1_0_0; }
		
		//useIncDir=PathCmd
		public Assignment getUseIncDirAssignment_1_1_1() { return cUseIncDirAssignment_1_1_1; }
		
		//PathCmd
		public RuleCall getUseIncDirPathCmdParserRuleCall_1_1_1_0() { return cUseIncDirPathCmdParserRuleCall_1_1_1_0; }
		
		//incSys?=IncSys WS+ useIncDir=PathCmd
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//incSys?=IncSys
		public Assignment getIncSysAssignment_1_2_0() { return cIncSysAssignment_1_2_0; }
		
		//IncSys
		public RuleCall getIncSysIncSysParserRuleCall_1_2_0_0() { return cIncSysIncSysParserRuleCall_1_2_0_0; }
		
		//WS+
		public RuleCall getWSTerminalRuleCall_1_2_1() { return cWSTerminalRuleCall_1_2_1; }
		
		//useIncDir=PathCmd
		public Assignment getUseIncDirAssignment_1_2_2() { return cUseIncDirAssignment_1_2_2; }
		
		//PathCmd
		public RuleCall getUseIncDirPathCmdParserRuleCall_1_2_2_0() { return cUseIncDirPathCmdParserRuleCall_1_2_2_0; }
		
		//nostdinc?=NoStdInc
		public Assignment getNostdincAssignment_1_3() { return cNostdincAssignment_1_3; }
		
		//NoStdInc
		public RuleCall getNostdincNoStdIncParserRuleCall_1_3_0() { return cNostdincNoStdIncParserRuleCall_1_3_0; }
		
		//Include WS+ include=PathCmd
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//Include
		public RuleCall getIncludeParserRuleCall_1_4_0() { return cIncludeParserRuleCall_1_4_0; }
		
		//WS+
		public RuleCall getWSTerminalRuleCall_1_4_1() { return cWSTerminalRuleCall_1_4_1; }
		
		//include=PathCmd
		public Assignment getIncludeAssignment_1_4_2() { return cIncludeAssignment_1_4_2; }
		
		//PathCmd
		public RuleCall getIncludePathCmdParserRuleCall_1_4_2_0() { return cIncludePathCmdParserRuleCall_1_4_2_0; }
		
		//Output WS+ out=PathCmd
		public Group getGroup_1_5() { return cGroup_1_5; }
		
		//Output
		public RuleCall getOutputParserRuleCall_1_5_0() { return cOutputParserRuleCall_1_5_0; }
		
		//WS+
		public RuleCall getWSTerminalRuleCall_1_5_1() { return cWSTerminalRuleCall_1_5_1; }
		
		//out=PathCmd
		public Assignment getOutAssignment_1_5_2() { return cOutAssignment_1_5_2; }
		
		//PathCmd
		public RuleCall getOutPathCmdParserRuleCall_1_5_2_0() { return cOutPathCmdParserRuleCall_1_5_2_0; }
		
		//Lang WS+ lang=PathCmd
		public Group getGroup_1_6() { return cGroup_1_6; }
		
		//Lang
		public RuleCall getLangParserRuleCall_1_6_0() { return cLangParserRuleCall_1_6_0; }
		
		//WS+
		public RuleCall getWSTerminalRuleCall_1_6_1() { return cWSTerminalRuleCall_1_6_1; }
		
		//lang=PathCmd
		public Assignment getLangAssignment_1_6_2() { return cLangAssignment_1_6_2; }
		
		//PathCmd
		public RuleCall getLangPathCmdParserRuleCall_1_6_2_0() { return cLangPathCmdParserRuleCall_1_6_2_0; }
		
		//SKW_MINUS SKW_MINUS? option=Option?
		public Group getGroup_1_7() { return cGroup_1_7; }
		
		//SKW_MINUS
		public RuleCall getSKW_MINUSTerminalRuleCall_1_7_0() { return cSKW_MINUSTerminalRuleCall_1_7_0; }
		
		//SKW_MINUS?
		public RuleCall getSKW_MINUSTerminalRuleCall_1_7_1() { return cSKW_MINUSTerminalRuleCall_1_7_1; }
		
		//option=Option?
		public Assignment getOptionAssignment_1_7_2() { return cOptionAssignment_1_7_2; }
		
		//Option
		public RuleCall getOptionOptionParserRuleCall_1_7_2_0() { return cOptionOptionParserRuleCall_1_7_2_0; }
		
		//in=Option
		public Assignment getInAssignment_1_8() { return cInAssignment_1_8; }
		
		//Option
		public RuleCall getInOptionParserRuleCall_1_8_0() { return cInOptionParserRuleCall_1_8_0; }
	}
	public class DefineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.Define");
		private final RuleCall cKW_DEFINETerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Define:
		//	KW_DEFINE;
		@Override public ParserRule getRule() { return rule; }
		
		//KW_DEFINE
		public RuleCall getKW_DEFINETerminalRuleCall() { return cKW_DEFINETerminalRuleCall; }
	}
	public class IncDirElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.IncDir");
		private final RuleCall cKW_INCDIRTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//IncDir:
		//	KW_INCDIR;
		@Override public ParserRule getRule() { return rule; }
		
		//KW_INCDIR
		public RuleCall getKW_INCDIRTerminalRuleCall() { return cKW_INCDIRTerminalRuleCall; }
	}
	public class IncSysElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.IncSys");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSKW_MINUSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cKW_INCSYSTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//IncSys:
		//	SKW_MINUS KW_INCSYS;
		@Override public ParserRule getRule() { return rule; }
		
		//SKW_MINUS KW_INCSYS
		public Group getGroup() { return cGroup; }
		
		//SKW_MINUS
		public RuleCall getSKW_MINUSTerminalRuleCall_0() { return cSKW_MINUSTerminalRuleCall_0; }
		
		//KW_INCSYS
		public RuleCall getKW_INCSYSTerminalRuleCall_1() { return cKW_INCSYSTerminalRuleCall_1; }
	}
	public class NoStdIncElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.NoStdInc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSKW_MINUSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cKW_NOSTDINCTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//NoStdInc:
		//	SKW_MINUS KW_NOSTDINC;
		@Override public ParserRule getRule() { return rule; }
		
		//SKW_MINUS KW_NOSTDINC
		public Group getGroup() { return cGroup; }
		
		//SKW_MINUS
		public RuleCall getSKW_MINUSTerminalRuleCall_0() { return cSKW_MINUSTerminalRuleCall_0; }
		
		//KW_NOSTDINC
		public RuleCall getKW_NOSTDINCTerminalRuleCall_1() { return cKW_NOSTDINCTerminalRuleCall_1; }
	}
	public class IncludeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.Include");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSKW_MINUSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cKW_INCLUDETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Include:
		//	SKW_MINUS KW_INCLUDE;
		@Override public ParserRule getRule() { return rule; }
		
		//SKW_MINUS KW_INCLUDE
		public Group getGroup() { return cGroup; }
		
		//SKW_MINUS
		public RuleCall getSKW_MINUSTerminalRuleCall_0() { return cSKW_MINUSTerminalRuleCall_0; }
		
		//KW_INCLUDE
		public RuleCall getKW_INCLUDETerminalRuleCall_1() { return cKW_INCLUDETerminalRuleCall_1; }
	}
	public class OutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.Output");
		private final RuleCall cKW_OUTPUTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Output:
		//	KW_OUTPUT;
		@Override public ParserRule getRule() { return rule; }
		
		//KW_OUTPUT
		public RuleCall getKW_OUTPUTTerminalRuleCall() { return cKW_OUTPUTTerminalRuleCall; }
	}
	public class LangElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.Lang");
		private final RuleCall cKW_LANGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Lang:
		//	KW_LANG;
		@Override public ParserRule getRule() { return rule; }
		
		//KW_LANG
		public RuleCall getKW_LANGTerminalRuleCall() { return cKW_LANGTerminalRuleCall; }
	}
	public class MacroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.Macro");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleMacroParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cObjectMacroParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionMacroParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Macro:
		//	SimpleMacro
		//	| ObjectMacro
		//	| FunctionMacro;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleMacro | ObjectMacro | FunctionMacro
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimpleMacro
		public RuleCall getSimpleMacroParserRuleCall_0() { return cSimpleMacroParserRuleCall_0; }
		
		//ObjectMacro
		public RuleCall getObjectMacroParserRuleCall_1() { return cObjectMacroParserRuleCall_1; }
		
		//FunctionMacro
		public RuleCall getFunctionMacroParserRuleCall_2() { return cFunctionMacroParserRuleCall_2; }
	}
	public class SimpleMacroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.SimpleMacro");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSimpleMacroAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//SimpleMacro Macro:
		//	{SimpleMacro} name=Identifier
		@Override public ParserRule getRule() { return rule; }
		
		//{SimpleMacro} name=Identifier
		public Group getGroup() { return cGroup; }
		
		//{SimpleMacro}
		public Action getSimpleMacroAction_0() { return cSimpleMacroAction_0; }
		
		//name=Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }
	}
	public class ObjectMacroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.ObjectMacro");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObjectMacroAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cSKW_ASSIGNTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueMyCodeParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//ObjectMacro Macro:
		//	{ObjectMacro} name=Identifier SKW_ASSIGN
		//	value=MyCode
		@Override public ParserRule getRule() { return rule; }
		
		//{ObjectMacro} name=Identifier SKW_ASSIGN value=MyCode
		public Group getGroup() { return cGroup; }
		
		//{ObjectMacro}
		public Action getObjectMacroAction_0() { return cObjectMacroAction_0; }
		
		//name=Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }
		
		//SKW_ASSIGN
		public RuleCall getSKW_ASSIGNTerminalRuleCall_2() { return cSKW_ASSIGNTerminalRuleCall_2; }
		
		//value=MyCode
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//MyCode
		public RuleCall getValueMyCodeParserRuleCall_3_0() { return cValueMyCodeParserRuleCall_3_0; }
	}
	public class FunctionMacroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.FunctionMacro");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionMacroAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cSKW_LEFTPARENTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParamsIdentifierParserRuleCall_3_0_0 = (RuleCall)cParamsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final RuleCall cSKW_COMMATerminalRuleCall_3_1_0 = (RuleCall)cGroup_3_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParamsIdentifierParserRuleCall_3_1_1_0 = (RuleCall)cParamsAssignment_3_1_1.eContents().get(0);
		private final RuleCall cSKW_RIGHTPARENTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cSKW_ASSIGNTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cValueAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cValueMyCodeParserRuleCall_6_0 = (RuleCall)cValueAssignment_6.eContents().get(0);
		
		//FunctionMacro Macro:
		//	{FunctionMacro} name=Identifier
		//	SKW_LEFTPAREN (params+=Identifier (SKW_COMMA params+=Identifier)*)?
		//	SKW_RIGHTPAREN SKW_ASSIGN
		//	value=MyCode
		@Override public ParserRule getRule() { return rule; }
		
		//{FunctionMacro} name=Identifier SKW_LEFTPAREN (params+=Identifier (SKW_COMMA params+=Identifier)*)? SKW_RIGHTPAREN
		//SKW_ASSIGN value=MyCode
		public Group getGroup() { return cGroup; }
		
		//{FunctionMacro}
		public Action getFunctionMacroAction_0() { return cFunctionMacroAction_0; }
		
		//name=Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }
		
		//SKW_LEFTPAREN
		public RuleCall getSKW_LEFTPARENTerminalRuleCall_2() { return cSKW_LEFTPARENTerminalRuleCall_2; }
		
		//(params+=Identifier (SKW_COMMA params+=Identifier)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//params+=Identifier
		public Assignment getParamsAssignment_3_0() { return cParamsAssignment_3_0; }
		
		//Identifier
		public RuleCall getParamsIdentifierParserRuleCall_3_0_0() { return cParamsIdentifierParserRuleCall_3_0_0; }
		
		//(SKW_COMMA params+=Identifier)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//SKW_COMMA
		public RuleCall getSKW_COMMATerminalRuleCall_3_1_0() { return cSKW_COMMATerminalRuleCall_3_1_0; }
		
		//params+=Identifier
		public Assignment getParamsAssignment_3_1_1() { return cParamsAssignment_3_1_1; }
		
		//Identifier
		public RuleCall getParamsIdentifierParserRuleCall_3_1_1_0() { return cParamsIdentifierParserRuleCall_3_1_1_0; }
		
		//SKW_RIGHTPAREN
		public RuleCall getSKW_RIGHTPARENTerminalRuleCall_4() { return cSKW_RIGHTPARENTerminalRuleCall_4; }
		
		//SKW_ASSIGN
		public RuleCall getSKW_ASSIGNTerminalRuleCall_5() { return cSKW_ASSIGNTerminalRuleCall_5; }
		
		//value=MyCode
		public Assignment getValueAssignment_6() { return cValueAssignment_6; }
		
		//MyCode
		public RuleCall getValueMyCodeParserRuleCall_6_0() { return cValueMyCodeParserRuleCall_6_0; }
	}
	public class PathCmdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.PathCmd");
		private final Assignment cPathAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPathPathParserRuleCall_0 = (RuleCall)cPathAssignment.eContents().get(0);
		
		//PathCmd:
		//	path=Path
		//	//name=Identifier
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//path=Path
		public Assignment getPathAssignment() { return cPathAssignment; }
		
		//Path
		public RuleCall getPathPathParserRuleCall_0() { return cPathPathParserRuleCall_0; }
	}
	public class IdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.Identifier");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Identifier:
		//	ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	public class MyCodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.MyCode");
		private final RuleCall cMyCodeCharParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//MyCode:
		//	MyCodeChar+;
		@Override public ParserRule getRule() { return rule; }
		
		//MyCodeChar+
		public RuleCall getMyCodeCharParserRuleCall() { return cMyCodeCharParserRuleCall; }
	}
	public class MyCodeCharElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.MyCodeChar");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPathCharParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSKW_LEFTPARENTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSKW_RIGHTPARENTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//MyCodeChar:
		//	PathChar | SKW_LEFTPAREN | SKW_RIGHTPAREN;
		@Override public ParserRule getRule() { return rule; }
		
		//PathChar | SKW_LEFTPAREN | SKW_RIGHTPAREN
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PathChar
		public RuleCall getPathCharParserRuleCall_0() { return cPathCharParserRuleCall_0; }
		
		//SKW_LEFTPAREN
		public RuleCall getSKW_LEFTPARENTerminalRuleCall_1() { return cSKW_LEFTPARENTerminalRuleCall_1; }
		
		//SKW_RIGHTPAREN
		public RuleCall getSKW_RIGHTPARENTerminalRuleCall_2() { return cSKW_RIGHTPARENTerminalRuleCall_2; }
	}
	public class PathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.Path");
		private final RuleCall cPathCharParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Path:
		//	PathChar+;
		@Override public ParserRule getRule() { return rule; }
		
		//PathChar+
		public RuleCall getPathCharParserRuleCall() { return cPathCharParserRuleCall; }
	}
	public class PathCharElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.PathChar");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOptionCharParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNonOptionCharParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PathChar:
		//	OptionChar | NonOptionChar;
		@Override public ParserRule getRule() { return rule; }
		
		//OptionChar | NonOptionChar
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OptionChar
		public RuleCall getOptionCharParserRuleCall_0() { return cOptionCharParserRuleCall_0; }
		
		//NonOptionChar
		public RuleCall getNonOptionCharParserRuleCall_1() { return cNonOptionCharParserRuleCall_1; }
	}
	public class OptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.Option");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNonOptionCharParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cOptionCharParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cNonOptionCharParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//Option:
		//	NonOptionChar (OptionChar | NonOptionChar)*;
		@Override public ParserRule getRule() { return rule; }
		
		//NonOptionChar (OptionChar | NonOptionChar)*
		public Group getGroup() { return cGroup; }
		
		//NonOptionChar
		public RuleCall getNonOptionCharParserRuleCall_0() { return cNonOptionCharParserRuleCall_0; }
		
		//(OptionChar | NonOptionChar)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//OptionChar
		public RuleCall getOptionCharParserRuleCall_1_0() { return cOptionCharParserRuleCall_1_0; }
		
		//NonOptionChar
		public RuleCall getNonOptionCharParserRuleCall_1_1() { return cNonOptionCharParserRuleCall_1_1; }
	}
	public class NonOptionCharElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.NonOptionChar");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSKW_ASSIGNTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSKW_COMMATerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cANY_OTHERTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//NonOptionChar:
		//	ID | INT | STRING | SKW_ASSIGN | SKW_COMMA | ANY_OTHER;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | INT | STRING | SKW_ASSIGN | SKW_COMMA | ANY_OTHER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }
		
		//SKW_ASSIGN
		public RuleCall getSKW_ASSIGNTerminalRuleCall_3() { return cSKW_ASSIGNTerminalRuleCall_3; }
		
		//SKW_COMMA
		public RuleCall getSKW_COMMATerminalRuleCall_4() { return cSKW_COMMATerminalRuleCall_4; }
		
		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_5() { return cANY_OTHERTerminalRuleCall_5; }
	}
	public class OptionCharElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.OptionChar");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSKW_MINUSTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cKW_DEFINETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cKW_INCDIRTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cKW_NOSTDINCTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cKW_INCSYSTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cKW_INCLUDETerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cKW_LANGTerminalRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cKW_OUTPUTTerminalRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//OptionChar:
		//	SKW_MINUS | KW_DEFINE | KW_INCDIR | KW_NOSTDINC | KW_INCSYS | KW_INCLUDE | KW_LANG | KW_OUTPUT;
		@Override public ParserRule getRule() { return rule; }
		
		//SKW_MINUS | KW_DEFINE | KW_INCDIR | KW_NOSTDINC | KW_INCSYS | KW_INCLUDE | KW_LANG | KW_OUTPUT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SKW_MINUS
		public RuleCall getSKW_MINUSTerminalRuleCall_0() { return cSKW_MINUSTerminalRuleCall_0; }
		
		//KW_DEFINE
		public RuleCall getKW_DEFINETerminalRuleCall_1() { return cKW_DEFINETerminalRuleCall_1; }
		
		//KW_INCDIR
		public RuleCall getKW_INCDIRTerminalRuleCall_2() { return cKW_INCDIRTerminalRuleCall_2; }
		
		//KW_NOSTDINC
		public RuleCall getKW_NOSTDINCTerminalRuleCall_3() { return cKW_NOSTDINCTerminalRuleCall_3; }
		
		//KW_INCSYS
		public RuleCall getKW_INCSYSTerminalRuleCall_4() { return cKW_INCSYSTerminalRuleCall_4; }
		
		//KW_INCLUDE
		public RuleCall getKW_INCLUDETerminalRuleCall_5() { return cKW_INCLUDETerminalRuleCall_5; }
		
		//KW_LANG
		public RuleCall getKW_LANGTerminalRuleCall_6() { return cKW_LANGTerminalRuleCall_6; }
		
		//KW_OUTPUT
		public RuleCall getKW_OUTPUTTerminalRuleCall_7() { return cKW_OUTPUTTerminalRuleCall_7; }
	}
	
	
	private final ModelElements pModel;
	private final CmdLineElements pCmdLine;
	private final ArgumentElements pArgument;
	private final DefineElements pDefine;
	private final IncDirElements pIncDir;
	private final IncSysElements pIncSys;
	private final NoStdIncElements pNoStdInc;
	private final IncludeElements pInclude;
	private final OutputElements pOutput;
	private final LangElements pLang;
	private final MacroElements pMacro;
	private final SimpleMacroElements pSimpleMacro;
	private final ObjectMacroElements pObjectMacro;
	private final FunctionMacroElements pFunctionMacro;
	private final PathCmdElements pPathCmd;
	private final IdentifierElements pIdentifier;
	private final MyCodeElements pMyCode;
	private final MyCodeCharElements pMyCodeChar;
	private final PathElements pPath;
	private final PathCharElements pPathChar;
	private final OptionElements pOption;
	private final NonOptionCharElements pNonOptionChar;
	private final OptionCharElements pOptionChar;
	private final TerminalRule tSKW_MINUS;
	private final TerminalRule tSKW_ASSIGN;
	private final TerminalRule tSKW_LEFTPAREN;
	private final TerminalRule tSKW_RIGHTPAREN;
	private final TerminalRule tSKW_COMMA;
	private final TerminalRule tKW_DEFINE;
	private final TerminalRule tKW_INCDIR;
	private final TerminalRule tKW_OUTPUT;
	private final TerminalRule tKW_LANG;
	private final TerminalRule tKW_NOSTDINC;
	private final TerminalRule tKW_INCSYS;
	private final TerminalRule tKW_INCLUDE;
	private final TerminalRule tID;
	private final TerminalRule tLETTER;
	private final TerminalRule tINT;
	private final TerminalRule tDIGIT;
	private final TerminalRule tSTRING;
	private final TerminalRule tNEWLINE;
	private final TerminalRule tWS;
	private final TerminalRule tLINE_COMMENT;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public CmdArgsGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pModel = new ModelElements();
		this.pCmdLine = new CmdLineElements();
		this.pArgument = new ArgumentElements();
		this.pDefine = new DefineElements();
		this.pIncDir = new IncDirElements();
		this.pIncSys = new IncSysElements();
		this.pNoStdInc = new NoStdIncElements();
		this.pInclude = new IncludeElements();
		this.pOutput = new OutputElements();
		this.pLang = new LangElements();
		this.pMacro = new MacroElements();
		this.pSimpleMacro = new SimpleMacroElements();
		this.pObjectMacro = new ObjectMacroElements();
		this.pFunctionMacro = new FunctionMacroElements();
		this.pPathCmd = new PathCmdElements();
		this.pIdentifier = new IdentifierElements();
		this.pMyCode = new MyCodeElements();
		this.pMyCodeChar = new MyCodeCharElements();
		this.pPath = new PathElements();
		this.pPathChar = new PathCharElements();
		this.pOption = new OptionElements();
		this.pNonOptionChar = new NonOptionCharElements();
		this.pOptionChar = new OptionCharElements();
		this.tSKW_MINUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.SKW_MINUS");
		this.tSKW_ASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.SKW_ASSIGN");
		this.tSKW_LEFTPAREN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.SKW_LEFTPAREN");
		this.tSKW_RIGHTPAREN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.SKW_RIGHTPAREN");
		this.tSKW_COMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.SKW_COMMA");
		this.tKW_DEFINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.KW_DEFINE");
		this.tKW_INCDIR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.KW_INCDIR");
		this.tKW_OUTPUT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.KW_OUTPUT");
		this.tKW_LANG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.KW_LANG");
		this.tKW_NOSTDINC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.KW_NOSTDINC");
		this.tKW_INCSYS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.KW_INCSYS");
		this.tKW_INCLUDE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.KW_INCLUDE");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.ID");
		this.tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.LETTER");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.INT");
		this.tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.DIGIT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.STRING");
		this.tNEWLINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.NEWLINE");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.WS");
		this.tLINE_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.LINE_COMMENT");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.cmdarguments.CmdArgs.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("at.jku.weiner.c.cmdarguments.CmdArgs".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//	{Model} (lines+=CmdLine (NEWLINE lines+=CmdLine)*)?
	//	NEWLINE?;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//CmdLine:
	//	{CmdLine} (arguments+=Argument (WS+ arguments+=Argument)*);
	public CmdLineElements getCmdLineAccess() {
		return pCmdLine;
	}
	
	public ParserRule getCmdLineRule() {
		return getCmdLineAccess().getRule();
	}
	
	//Argument:
	//	{Argument} (Define macro=Macro | incDir?=IncDir useIncDir=PathCmd | incSys?=IncSys WS+ useIncDir=PathCmd |
	//	nostdinc?=NoStdInc | Include WS+ include=PathCmd | Output WS+ out=PathCmd | Lang WS+ lang=PathCmd | SKW_MINUS
	//	SKW_MINUS? option=Option? | in=Option);
	public ArgumentElements getArgumentAccess() {
		return pArgument;
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}
	
	//Define:
	//	KW_DEFINE;
	public DefineElements getDefineAccess() {
		return pDefine;
	}
	
	public ParserRule getDefineRule() {
		return getDefineAccess().getRule();
	}
	
	//IncDir:
	//	KW_INCDIR;
	public IncDirElements getIncDirAccess() {
		return pIncDir;
	}
	
	public ParserRule getIncDirRule() {
		return getIncDirAccess().getRule();
	}
	
	//IncSys:
	//	SKW_MINUS KW_INCSYS;
	public IncSysElements getIncSysAccess() {
		return pIncSys;
	}
	
	public ParserRule getIncSysRule() {
		return getIncSysAccess().getRule();
	}
	
	//NoStdInc:
	//	SKW_MINUS KW_NOSTDINC;
	public NoStdIncElements getNoStdIncAccess() {
		return pNoStdInc;
	}
	
	public ParserRule getNoStdIncRule() {
		return getNoStdIncAccess().getRule();
	}
	
	//Include:
	//	SKW_MINUS KW_INCLUDE;
	public IncludeElements getIncludeAccess() {
		return pInclude;
	}
	
	public ParserRule getIncludeRule() {
		return getIncludeAccess().getRule();
	}
	
	//Output:
	//	KW_OUTPUT;
	public OutputElements getOutputAccess() {
		return pOutput;
	}
	
	public ParserRule getOutputRule() {
		return getOutputAccess().getRule();
	}
	
	//Lang:
	//	KW_LANG;
	public LangElements getLangAccess() {
		return pLang;
	}
	
	public ParserRule getLangRule() {
		return getLangAccess().getRule();
	}
	
	//Macro:
	//	SimpleMacro
	//	| ObjectMacro
	//	| FunctionMacro;
	public MacroElements getMacroAccess() {
		return pMacro;
	}
	
	public ParserRule getMacroRule() {
		return getMacroAccess().getRule();
	}
	
	//SimpleMacro Macro:
	//	{SimpleMacro} name=Identifier
	public SimpleMacroElements getSimpleMacroAccess() {
		return pSimpleMacro;
	}
	
	public ParserRule getSimpleMacroRule() {
		return getSimpleMacroAccess().getRule();
	}
	
	//ObjectMacro Macro:
	//	{ObjectMacro} name=Identifier SKW_ASSIGN
	//	value=MyCode
	public ObjectMacroElements getObjectMacroAccess() {
		return pObjectMacro;
	}
	
	public ParserRule getObjectMacroRule() {
		return getObjectMacroAccess().getRule();
	}
	
	//FunctionMacro Macro:
	//	{FunctionMacro} name=Identifier
	//	SKW_LEFTPAREN (params+=Identifier (SKW_COMMA params+=Identifier)*)?
	//	SKW_RIGHTPAREN SKW_ASSIGN
	//	value=MyCode
	public FunctionMacroElements getFunctionMacroAccess() {
		return pFunctionMacro;
	}
	
	public ParserRule getFunctionMacroRule() {
		return getFunctionMacroAccess().getRule();
	}
	
	//PathCmd:
	//	path=Path
	//	//name=Identifier
	//;
	public PathCmdElements getPathCmdAccess() {
		return pPathCmd;
	}
	
	public ParserRule getPathCmdRule() {
		return getPathCmdAccess().getRule();
	}
	
	//Identifier:
	//	ID;
	public IdentifierElements getIdentifierAccess() {
		return pIdentifier;
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}
	
	//MyCode:
	//	MyCodeChar+;
	public MyCodeElements getMyCodeAccess() {
		return pMyCode;
	}
	
	public ParserRule getMyCodeRule() {
		return getMyCodeAccess().getRule();
	}
	
	//MyCodeChar:
	//	PathChar | SKW_LEFTPAREN | SKW_RIGHTPAREN;
	public MyCodeCharElements getMyCodeCharAccess() {
		return pMyCodeChar;
	}
	
	public ParserRule getMyCodeCharRule() {
		return getMyCodeCharAccess().getRule();
	}
	
	//Path:
	//	PathChar+;
	public PathElements getPathAccess() {
		return pPath;
	}
	
	public ParserRule getPathRule() {
		return getPathAccess().getRule();
	}
	
	//PathChar:
	//	OptionChar | NonOptionChar;
	public PathCharElements getPathCharAccess() {
		return pPathChar;
	}
	
	public ParserRule getPathCharRule() {
		return getPathCharAccess().getRule();
	}
	
	//Option:
	//	NonOptionChar (OptionChar | NonOptionChar)*;
	public OptionElements getOptionAccess() {
		return pOption;
	}
	
	public ParserRule getOptionRule() {
		return getOptionAccess().getRule();
	}
	
	//NonOptionChar:
	//	ID | INT | STRING | SKW_ASSIGN | SKW_COMMA | ANY_OTHER;
	public NonOptionCharElements getNonOptionCharAccess() {
		return pNonOptionChar;
	}
	
	public ParserRule getNonOptionCharRule() {
		return getNonOptionCharAccess().getRule();
	}
	
	//OptionChar:
	//	SKW_MINUS | KW_DEFINE | KW_INCDIR | KW_NOSTDINC | KW_INCSYS | KW_INCLUDE | KW_LANG | KW_OUTPUT;
	public OptionCharElements getOptionCharAccess() {
		return pOptionChar;
	}
	
	public ParserRule getOptionCharRule() {
		return getOptionCharAccess().getRule();
	}
	
	//terminal SKW_MINUS:
	//	'-';
	public TerminalRule getSKW_MINUSRule() {
		return tSKW_MINUS;
	}
	
	//terminal SKW_ASSIGN:
	//	'=';
	public TerminalRule getSKW_ASSIGNRule() {
		return tSKW_ASSIGN;
	}
	
	//terminal SKW_LEFTPAREN:
	//	'(';
	public TerminalRule getSKW_LEFTPARENRule() {
		return tSKW_LEFTPAREN;
	}
	
	//terminal SKW_RIGHTPAREN:
	//	')';
	public TerminalRule getSKW_RIGHTPARENRule() {
		return tSKW_RIGHTPAREN;
	}
	
	//terminal SKW_COMMA:
	//	',';
	public TerminalRule getSKW_COMMARule() {
		return tSKW_COMMA;
	}
	
	//terminal KW_DEFINE:
	//	SKW_MINUS 'D';
	public TerminalRule getKW_DEFINERule() {
		return tKW_DEFINE;
	}
	
	//terminal KW_INCDIR:
	//	SKW_MINUS 'I';
	public TerminalRule getKW_INCDIRRule() {
		return tKW_INCDIR;
	}
	
	//terminal KW_OUTPUT:
	//	SKW_MINUS 'o';
	public TerminalRule getKW_OUTPUTRule() {
		return tKW_OUTPUT;
	}
	
	//terminal KW_LANG:
	//	SKW_MINUS 'x';
	public TerminalRule getKW_LANGRule() {
		return tKW_LANG;
	}
	
	//terminal KW_NOSTDINC:
	//	'nostdinc';
	public TerminalRule getKW_NOSTDINCRule() {
		return tKW_NOSTDINC;
	}
	
	//terminal KW_INCSYS:
	//	'isystem';
	public TerminalRule getKW_INCSYSRule() {
		return tKW_INCSYS;
	}
	
	//terminal KW_INCLUDE:
	//	'include';
	public TerminalRule getKW_INCLUDERule() {
		return tKW_INCLUDE;
	}
	
	//terminal ID:
	//	LETTER (LETTER | DIGIT)*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal fragment LETTER:
	//	'$'
	//	| 'A'..'Z'
	//	| 'a'..'z'
	//	| '_';
	public TerminalRule getLETTERRule() {
		return tLETTER;
	}
	
	//terminal INT:
	//	DIGIT+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal fragment DIGIT:
	//	'0'..'9';
	public TerminalRule getDIGITRule() {
		return tDIGIT;
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal NEWLINE:
	//	'\n' | '\r';
	public TerminalRule getNEWLINERule() {
		return tNEWLINE;
	}
	
	//terminal WS:
	//	' ' | '\t';
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal LINE_COMMENT:
	//	'//'->NEWLINE;
	public TerminalRule getLINE_COMMENTRule() {
		return tLINE_COMMENT;
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
}
