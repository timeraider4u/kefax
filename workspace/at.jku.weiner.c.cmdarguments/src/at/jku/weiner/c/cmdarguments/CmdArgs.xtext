grammar at.jku.weiner.c.cmdarguments.CmdArgs 
//with org.eclipse.xtext.common.Terminals
//hidden()
hidden(LINE_COMMENT,LINE_BREAK)

generate cmdArgs "http://www.jku.at/weiner/c/cmdarguments/CmdArgs"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model:
	{Model}
	(lines+=CmdLine (NEWLINE* lines+=CmdLine)*)?
	NEWLINE?
;

CmdLine:
		Assignment 
	|	Target
;

Target:
	start=Identifier SKW_COLON
		(FillUp arguments+=Argument)*
	WS* NEWLINE NEWLINE
;

FillUp:
	WS+ | (WS* NEWLINE WS+)
;

Assignment:
	start=Identifier WS+ SKW_COLON SKW_ASSIGN WS+
	(arguments+=Argument (WS+ arguments+=Argument)*)
;

Argument:
	{Argument}
	(
		(KW_DEFINE macro=Macro)
	|
		(incDir?=KW_INCDIR useIncDir=PathCmd)
	|
		(incSys?=IncSys WS+ useIncDir=PathCmd)
	|
		(nostdinc?=NoStdInc)
	|
		(SKW_MINUS KW_INCLUDE WS+ include=PathCmd)
	|
		(KW_OUTPUT WS+ out=PathCmd)
	|
		(KW_LANG WS+ lang=PathCmd)
	|
		(SKW_MINUS (SKW_MINUS)? (option=Option)?)
	|
		in=Identifier
	)
;

IncSys:
	SKW_MINUS KW_INCSYS
;

NoStdInc:
	SKW_MINUS KW_NOSTDINC
;

Macro returns Macro:
	(
		SimpleMacro
	|	ObjectMacro
	|	FunctionMacro
	|	StringMacro
	)
;

SimpleMacro returns Macro:
	{SimpleMacro}
	name=MacroLegalPart
;

ObjectMacro returns Macro:
	{ObjectMacro}
	name=MacroLegalPart SKW_ASSIGN
	value=MyCode
;

FunctionMacro returns Macro:
	{FunctionMacro}
	name=MacroLegalPart
	SKW_LEFTPAREN (params+=MacroLegalPart (SKW_COMMA params+=MacroLegalPart)*)? 
	SKW_RIGHTPAREN SKW_ASSIGN
	value=MyCode
;

StringMacro returns Macro:
	{StringMacro}
	string=STRING2
;

PathCmd:
	{PathCmd}
	path=PathLegalPart
;

PathLegalPart:
		Identifier
	|	STRING2
	|	KW_NOSTDINC 
	|	KW_INCSYS
	|	KW_INCLUDE
;

MacroLegalPart:
		Identifier
	|	KW_NOSTDINC 
	|	KW_INCSYS
	|	KW_INCLUDE
	|	ANY_OTHER
;

MyCode:
	(
		Identifier 
	|	STRING2
	|	SKW_LEFTPAREN
	|	SKW_RIGHTPAREN
	|	KW_NOSTDINC 
	|	KW_INCSYS
	|	KW_INCLUDE
	|	ANY_OTHER
	)+
;

Option:
	OptionPart+ (SKW_COMMA (SKW_MINUS)? OptionPart+)*
;

OptionPart:
	OptionLegalStart OptionLegalContinuation*
;

OptionLegalStart:
	Identifier | STRING2
;

OptionLegalContinuation:
		KW_NOSTDINC 
	|	KW_INCSYS
	|	KW_INCLUDE
	|	SKW_ASSIGN
	|	ANY_OTHER
;

Identifier returns ecore::EString:
		ID (SKW_COLON SKW_BACKSLASH ID)*
	|	KW_VAR
;

terminal fragment SKW_DOT: '.';
terminal fragment SKW_DIV: '/';
terminal SKW_COLON: ':';
terminal SKW_MINUS: '-';
terminal SKW_ASSIGN: '=';
terminal SKW_LEFTPAREN: '(';
terminal SKW_RIGHTPAREN: ')';
terminal SKW_COMMA: ',';
terminal SKW_DOLLAR: '$';
terminal SKW_BACKSLASH: '\\';

//terminal HASH: '#';
terminal KW_DEFINE: SKW_MINUS 'D';
terminal KW_INCDIR: SKW_MINUS 'I';
terminal KW_OUTPUT: SKW_MINUS 'o';
terminal KW_LANG: SKW_MINUS 'x';
terminal KW_NOSTDINC: 'nostdinc';
terminal KW_INCSYS: 'isystem';
terminal KW_INCLUDE: 'include';

terminal KW_VAR returns ecore::EString: SKW_DOLLAR SKW_LEFTPAREN -> SKW_RIGHTPAREN;

terminal ID: ID_PART_1 ID_PART_2*;

terminal ID_PART_1: 
	(LETTER|SKW_DIV|SKW_DOT|INT)
;

terminal ID_PART_2: 
	(ID_PART_1|SKW_BACKSLASH|SKW_MINUS)
;

terminal fragment LETTER:
		'A'..'Z'
	|	'a'..'z'
	|	'_'
;

terminal INT: DIGIT+;
terminal fragment DIGIT: ('0'..'9');

terminal STRING2	: 
			'"' ( SKW_BACKSLASH 
				. /* 'b'|'t'|'n'|'f'|'r'|'u'|'#'|'"'|"'"|'\\' */ 
				| !(SKW_BACKSLASH|'"')
			)* '"' |
			"'" ( SKW_BACKSLASH 
				. /* 'b'|'t'|'n'|'f'|'r'|'u'|'#'|'"'|"'"|'\\' */ 
				| !(SKW_BACKSLASH|"'")
			)* "'"
;

terminal NEWLINE: '\n' | '\r';
terminal WS: (' '|'\t');
terminal fragment SKW_HASH: '#';
terminal LINE_BREAK: SKW_BACKSLASH NEWLINE;
terminal LINE_COMMENT: SKW_HASH -> NEWLINE;

terminal ANY_OTHER: .;
//terminal END: EOF;
