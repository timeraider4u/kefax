/*
 * generated by Xtext 2.9.0-SNAPSHOT
 */
grammar InternalCommon;

options {
	superClass=AbstractInternalContentAssistParser;
	
	
}

@lexer::header {
package at.jku.weiner.c.common.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package at.jku.weiner.c.common.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import at.jku.weiner.c.common.services.CommonGrammarAccess;

}

@parser::members {
 
 	private CommonGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(CommonGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleExpression
entryRuleExpression 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WHITESPACE", "RULE_BLOCK_COMMENT", "RULE_LINE_COMMENT", "RULE_LINEBREAK");
}
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Expression
ruleExpression
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WHITESPACE", "RULE_BLOCK_COMMENT", "RULE_LINE_COMMENT", "RULE_LINEBREAK");
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getExpressionAccess().getGroup()); }
(rule__Expression__Group__0)
{ after(grammarAccess.getExpressionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}





// Entry rule entryRuleConditionalExpression
entryRuleConditionalExpression 
:
{ before(grammarAccess.getConditionalExpressionRule()); }
	 ruleConditionalExpression
{ after(grammarAccess.getConditionalExpressionRule()); } 
	 EOF 
;

// Rule ConditionalExpression
ruleConditionalExpression
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getConditionalExpressionAccess().getGroup()); }
(rule__ConditionalExpression__Group__0)
{ after(grammarAccess.getConditionalExpressionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogicalOrExpression
entryRuleLogicalOrExpression 
:
{ before(grammarAccess.getLogicalOrExpressionRule()); }
	 ruleLogicalOrExpression
{ after(grammarAccess.getLogicalOrExpressionRule()); } 
	 EOF 
;

// Rule LogicalOrExpression
ruleLogicalOrExpression
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getLogicalOrExpressionAccess().getGroup()); }
(rule__LogicalOrExpression__Group__0)
{ after(grammarAccess.getLogicalOrExpressionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogicalAndExpression
entryRuleLogicalAndExpression 
:
{ before(grammarAccess.getLogicalAndExpressionRule()); }
	 ruleLogicalAndExpression
{ after(grammarAccess.getLogicalAndExpressionRule()); } 
	 EOF 
;

// Rule LogicalAndExpression
ruleLogicalAndExpression
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getLogicalAndExpressionAccess().getGroup()); }
(rule__LogicalAndExpression__Group__0)
{ after(grammarAccess.getLogicalAndExpressionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInclusiveOrExpression
entryRuleInclusiveOrExpression 
:
{ before(grammarAccess.getInclusiveOrExpressionRule()); }
	 ruleInclusiveOrExpression
{ after(grammarAccess.getInclusiveOrExpressionRule()); } 
	 EOF 
;

// Rule InclusiveOrExpression
ruleInclusiveOrExpression
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getInclusiveOrExpressionAccess().getGroup()); }
(rule__InclusiveOrExpression__Group__0)
{ after(grammarAccess.getInclusiveOrExpressionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExclusiveOrExpression
entryRuleExclusiveOrExpression 
:
{ before(grammarAccess.getExclusiveOrExpressionRule()); }
	 ruleExclusiveOrExpression
{ after(grammarAccess.getExclusiveOrExpressionRule()); } 
	 EOF 
;

// Rule ExclusiveOrExpression
ruleExclusiveOrExpression
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getExclusiveOrExpressionAccess().getGroup()); }
(rule__ExclusiveOrExpression__Group__0)
{ after(grammarAccess.getExclusiveOrExpressionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAndExpression
entryRuleAndExpression 
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
(rule__AndExpression__Group__0)
{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression 
:
{ before(grammarAccess.getEqualityExpressionRule()); }
	 ruleEqualityExpression
{ after(grammarAccess.getEqualityExpressionRule()); } 
	 EOF 
;

// Rule EqualityExpression
ruleEqualityExpression
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getEqualityExpressionAccess().getGroup()); }
(rule__EqualityExpression__Group__0)
{ after(grammarAccess.getEqualityExpressionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression 
:
{ before(grammarAccess.getRelationalExpressionRule()); }
	 ruleRelationalExpression
{ after(grammarAccess.getRelationalExpressionRule()); } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup()); }
(rule__RelationalExpression__Group__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleShiftExpression
entryRuleShiftExpression 
:
{ before(grammarAccess.getShiftExpressionRule()); }
	 ruleShiftExpression
{ after(grammarAccess.getShiftExpressionRule()); } 
	 EOF 
;

// Rule ShiftExpression
ruleShiftExpression
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getShiftExpressionAccess().getGroup()); }
(rule__ShiftExpression__Group__0)
{ after(grammarAccess.getShiftExpressionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression 
:
{ before(grammarAccess.getAdditiveExpressionRule()); }
	 ruleAdditiveExpression
{ after(grammarAccess.getAdditiveExpressionRule()); } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
(rule__AdditiveExpression__Group__0)
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression 
:
{ before(grammarAccess.getMultiplicativeExpressionRule()); }
	 ruleMultiplicativeExpression
{ after(grammarAccess.getMultiplicativeExpressionRule()); } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
(rule__MultiplicativeExpression__Group__0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCastExpression
entryRuleCastExpression 
:
{ before(grammarAccess.getCastExpressionRule()); }
	 ruleCastExpression
{ after(grammarAccess.getCastExpressionRule()); } 
	 EOF 
;

// Rule CastExpression
ruleCastExpression
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getCastExpressionAccess().getGroup()); }
(rule__CastExpression__Group__0)
{ after(grammarAccess.getCastExpressionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression 
:
{ before(grammarAccess.getUnaryExpressionRule()); }
	 ruleUnaryExpression
{ after(grammarAccess.getUnaryExpressionRule()); } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getUnaryExpressionAccess().getGroup()); }
(rule__UnaryExpression__Group__0)
{ after(grammarAccess.getUnaryExpressionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryOperator
entryRuleUnaryOperator 
:
{ before(grammarAccess.getUnaryOperatorRule()); }
	 ruleUnaryOperator
{ after(grammarAccess.getUnaryOperatorRule()); } 
	 EOF 
;

// Rule UnaryOperator
ruleUnaryOperator
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getUnaryOperatorAccess().getAlternatives()); }
(rule__UnaryOperator__Alternatives)
{ after(grammarAccess.getUnaryOperatorAccess().getAlternatives()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePostfixExpression
entryRulePostfixExpression 
:
{ before(grammarAccess.getPostfixExpressionRule()); }
	 rulePostfixExpression
{ after(grammarAccess.getPostfixExpressionRule()); } 
	 EOF 
;

// Rule PostfixExpression
rulePostfixExpression
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getPostfixExpressionAccess().getGroup()); }
(rule__PostfixExpression__Group__0)
{ after(grammarAccess.getPostfixExpressionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePostfixExpressionSuffixArgument
entryRulePostfixExpressionSuffixArgument 
:
{ before(grammarAccess.getPostfixExpressionSuffixArgumentRule()); }
	 rulePostfixExpressionSuffixArgument
{ after(grammarAccess.getPostfixExpressionSuffixArgumentRule()); } 
	 EOF 
;

// Rule PostfixExpressionSuffixArgument
rulePostfixExpressionSuffixArgument
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getPostfixExpressionSuffixArgumentAccess().getGroup()); }
(rule__PostfixExpressionSuffixArgument__Group__0)
{ after(grammarAccess.getPostfixExpressionSuffixArgumentAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArgumentExpressionList
entryRuleArgumentExpressionList 
:
{ before(grammarAccess.getArgumentExpressionListRule()); }
	 ruleArgumentExpressionList
{ after(grammarAccess.getArgumentExpressionListRule()); } 
	 EOF 
;

// Rule ArgumentExpressionList
ruleArgumentExpressionList
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getArgumentExpressionListAccess().getGroup()); }
(rule__ArgumentExpressionList__Group__0)
{ after(grammarAccess.getArgumentExpressionListAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression 
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getPrimaryExpressionAccess().getGroup()); }
(rule__PrimaryExpression__Group__0)
{ after(grammarAccess.getPrimaryExpressionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstant1
entryRuleConstant1 
:
{ before(grammarAccess.getConstant1Rule()); }
	 ruleConstant1
{ after(grammarAccess.getConstant1Rule()); } 
	 EOF 
;

// Rule Constant1
ruleConstant1
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getConstant1Access().getAlternatives()); }
(rule__Constant1__Alternatives)
{ after(grammarAccess.getConstant1Access().getAlternatives()); }
)



;
finally {
	restoreStackSize(stackSize);
}










rule__EqualityExpression__Alternatives_2_0
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getEqualityExpressionAccess().getOpAssignment_2_0_0()); }
(rule__EqualityExpression__OpAssignment_2_0_0)
{ after(grammarAccess.getEqualityExpressionAccess().getOpAssignment_2_0_0()); }
)



    |
(
{ before(grammarAccess.getEqualityExpressionAccess().getOpAssignment_2_0_1()); }
(rule__EqualityExpression__OpAssignment_2_0_1)
{ after(grammarAccess.getEqualityExpressionAccess().getOpAssignment_2_0_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Alternatives_2_0
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getRelationalExpressionAccess().getOpAssignment_2_0_0()); }
(rule__RelationalExpression__OpAssignment_2_0_0)
{ after(grammarAccess.getRelationalExpressionAccess().getOpAssignment_2_0_0()); }
)



    |
(
{ before(grammarAccess.getRelationalExpressionAccess().getOpAssignment_2_0_1()); }
(rule__RelationalExpression__OpAssignment_2_0_1)
{ after(grammarAccess.getRelationalExpressionAccess().getOpAssignment_2_0_1()); }
)



    |
(
{ before(grammarAccess.getRelationalExpressionAccess().getOpAssignment_2_0_2()); }
(rule__RelationalExpression__OpAssignment_2_0_2)
{ after(grammarAccess.getRelationalExpressionAccess().getOpAssignment_2_0_2()); }
)



    |
(
{ before(grammarAccess.getRelationalExpressionAccess().getOpAssignment_2_0_3()); }
(rule__RelationalExpression__OpAssignment_2_0_3)
{ after(grammarAccess.getRelationalExpressionAccess().getOpAssignment_2_0_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Alternatives_2_0
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getShiftExpressionAccess().getOpAssignment_2_0_0()); }
(rule__ShiftExpression__OpAssignment_2_0_0)
{ after(grammarAccess.getShiftExpressionAccess().getOpAssignment_2_0_0()); }
)



    |
(
{ before(grammarAccess.getShiftExpressionAccess().getOpAssignment_2_0_1()); }
(rule__ShiftExpression__OpAssignment_2_0_1)
{ after(grammarAccess.getShiftExpressionAccess().getOpAssignment_2_0_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Alternatives_2_0
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAdditiveExpressionAccess().getOpAssignment_2_0_0()); }
(rule__AdditiveExpression__OpAssignment_2_0_0)
{ after(grammarAccess.getAdditiveExpressionAccess().getOpAssignment_2_0_0()); }
)



    |
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOpAssignment_2_0_1()); }
(rule__AdditiveExpression__OpAssignment_2_0_1)
{ after(grammarAccess.getAdditiveExpressionAccess().getOpAssignment_2_0_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Alternatives_2_0
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_2_0_0()); }
(rule__MultiplicativeExpression__OpAssignment_2_0_0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_2_0_0()); }
)



    |
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_2_0_1()); }
(rule__MultiplicativeExpression__OpAssignment_2_0_1)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_2_0_1()); }
)



    |
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_2_0_2()); }
(rule__MultiplicativeExpression__OpAssignment_2_0_2)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_2_0_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getUnaryExpressionAccess().getExprAssignment_1_0()); }
(rule__UnaryExpression__ExprAssignment_1_0)
{ after(grammarAccess.getUnaryExpressionAccess().getExprAssignment_1_0()); }
)



    |
(
{ before(grammarAccess.getUnaryExpressionAccess().getGroup_1_1()); }
(rule__UnaryExpression__Group_1_1__0)
{ after(grammarAccess.getUnaryExpressionAccess().getGroup_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getUnaryOperatorAccess().getGroup_0()); }
(rule__UnaryOperator__Group_0__0)
{ after(grammarAccess.getUnaryOperatorAccess().getGroup_0()); }
)



    |
(
{ before(grammarAccess.getUnaryOperatorAccess().getOpAssignment_1()); }
(rule__UnaryOperator__OpAssignment_1)
{ after(grammarAccess.getUnaryOperatorAccess().getOpAssignment_1()); }
)



    |
(
{ before(grammarAccess.getUnaryOperatorAccess().getOpAssignment_2()); }
(rule__UnaryOperator__OpAssignment_2)
{ after(grammarAccess.getUnaryOperatorAccess().getOpAssignment_2()); }
)



    |
(
{ before(grammarAccess.getUnaryOperatorAccess().getOpAssignment_3()); }
(rule__UnaryOperator__OpAssignment_3)
{ after(grammarAccess.getUnaryOperatorAccess().getOpAssignment_3()); }
)



    |
(
{ before(grammarAccess.getUnaryOperatorAccess().getOpAssignment_4()); }
(rule__UnaryOperator__OpAssignment_4)
{ after(grammarAccess.getUnaryOperatorAccess().getOpAssignment_4()); }
)



    |
(
{ before(grammarAccess.getUnaryOperatorAccess().getOpAssignment_5()); }
(rule__UnaryOperator__OpAssignment_5)
{ after(grammarAccess.getUnaryOperatorAccess().getOpAssignment_5()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPrimaryExpressionAccess().getConstAssignment_1_0()); }
(rule__PrimaryExpression__ConstAssignment_1_0)
{ after(grammarAccess.getPrimaryExpressionAccess().getConstAssignment_1_0()); }
)



    |
(
{ before(grammarAccess.getPrimaryExpressionAccess().getIdAssignment_1_1()); }
(rule__PrimaryExpression__IdAssignment_1_1)
{ after(grammarAccess.getPrimaryExpressionAccess().getIdAssignment_1_1()); }
)



    |
(
{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_1_2()); }
(rule__PrimaryExpression__Group_1_2__0)
{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_1_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__Constant1__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getConstant1Access().getHEX_LITERALTerminalRuleCall_0()); }
	RULE_HEX_LITERAL
{ after(grammarAccess.getConstant1Access().getHEX_LITERALTerminalRuleCall_0()); }
)



    |
(
{ before(grammarAccess.getConstant1Access().getOCTAL_LITERALTerminalRuleCall_1()); }
	RULE_OCTAL_LITERAL
{ after(grammarAccess.getConstant1Access().getOCTAL_LITERALTerminalRuleCall_1()); }
)



    |
(
{ before(grammarAccess.getConstant1Access().getDECIMAL_LITERALTerminalRuleCall_2()); }
	RULE_DECIMAL_LITERAL
{ after(grammarAccess.getConstant1Access().getDECIMAL_LITERALTerminalRuleCall_2()); }
)



    |
(
{ before(grammarAccess.getConstant1Access().getCHAR_LITERALTerminalRuleCall_3()); }
	RULE_CHAR_LITERAL
{ after(grammarAccess.getConstant1Access().getCHAR_LITERALTerminalRuleCall_3()); }
)



    |
(
{ before(grammarAccess.getConstant1Access().getSTRING_LITERALTerminalRuleCall_4()); }
	RULE_STRING_LITERAL
{ after(grammarAccess.getConstant1Access().getSTRING_LITERALTerminalRuleCall_4()); }
)



    |
(
{ before(grammarAccess.getConstant1Access().getFLOAT_LITERALTerminalRuleCall_5()); }
	RULE_FLOAT_LITERAL
{ after(grammarAccess.getConstant1Access().getFLOAT_LITERALTerminalRuleCall_5()); }
)



    |
(
{ before(grammarAccess.getConstant1Access().getBIN_LITERALTerminalRuleCall_6()); }
	RULE_BIN_LITERAL
{ after(grammarAccess.getConstant1Access().getBIN_LITERALTerminalRuleCall_6()); }
)



;
finally {
	restoreStackSize(stackSize);
}





rule__Expression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group__0__Impl
	rule__Expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getExpressionAccess().getExpressionAction_0()); }
(

)
{ after(grammarAccess.getExpressionAccess().getExpressionAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getExpressionAccess().getExpressionAssignment_1()); }
(rule__Expression__ExpressionAssignment_1)
{ after(grammarAccess.getExpressionAccess().getExpressionAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}







rule__ConditionalExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group__0__Impl
	rule__ConditionalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getConditionalExpressionAccess().getConditionalExpressionAction_0()); }
(

)
{ after(grammarAccess.getConditionalExpressionAccess().getConditionalExpressionAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group__1__Impl
	rule__ConditionalExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getConditionalExpressionAccess().getExprAssignment_1()); }
(rule__ConditionalExpression__ExprAssignment_1)
{ after(grammarAccess.getConditionalExpressionAccess().getExprAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getConditionalExpressionAccess().getGroup_2()); }
(rule__ConditionalExpression__Group_2__0)?
{ after(grammarAccess.getConditionalExpressionAccess().getGroup_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__ConditionalExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group_2__0__Impl
	rule__ConditionalExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getConditionalExpressionAccess().getSKW_QUESTIONTerminalRuleCall_2_0()); }
	RULE_SKW_QUESTION
{ after(grammarAccess.getConditionalExpressionAccess().getSKW_QUESTIONTerminalRuleCall_2_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group_2__1__Impl
	rule__ConditionalExpression__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getConditionalExpressionAccess().getQExprAssignment_2_1()); }
(rule__ConditionalExpression__QExprAssignment_2_1)
{ after(grammarAccess.getConditionalExpressionAccess().getQExprAssignment_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group_2__2__Impl
	rule__ConditionalExpression__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getConditionalExpressionAccess().getSKW_COLONTerminalRuleCall_2_2()); }
	RULE_SKW_COLON
{ after(grammarAccess.getConditionalExpressionAccess().getSKW_COLONTerminalRuleCall_2_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getConditionalExpressionAccess().getCExprAssignment_2_3()); }
(rule__ConditionalExpression__CExprAssignment_2_3)
{ after(grammarAccess.getConditionalExpressionAccess().getCExprAssignment_2_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}










rule__LogicalOrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group__0__Impl
	rule__LogicalOrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLogicalOrExpressionAccess().getLogicalOrExpressionAction_0()); }
(

)
{ after(grammarAccess.getLogicalOrExpressionAccess().getLogicalOrExpressionAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalOrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group__1__Impl
	rule__LogicalOrExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLogicalOrExpressionAccess().getExprAssignment_1()); }
(rule__LogicalOrExpression__ExprAssignment_1)
{ after(grammarAccess.getLogicalOrExpressionAccess().getExprAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalOrExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLogicalOrExpressionAccess().getGroup_2()); }
(rule__LogicalOrExpression__Group_2__0)*
{ after(grammarAccess.getLogicalOrExpressionAccess().getGroup_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__LogicalOrExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group_2__0__Impl
	rule__LogicalOrExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLogicalOrExpressionAccess().getSKW_ORORTerminalRuleCall_2_0()); }
	RULE_SKW_OROR
{ after(grammarAccess.getLogicalOrExpressionAccess().getSKW_ORORTerminalRuleCall_2_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalOrExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLogicalOrExpressionAccess().getExprAssignment_2_1()); }
(rule__LogicalOrExpression__ExprAssignment_2_1)
{ after(grammarAccess.getLogicalOrExpressionAccess().getExprAssignment_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalAndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group__0__Impl
	rule__LogicalAndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLogicalAndExpressionAccess().getLogicalAndExpressionAction_0()); }
(

)
{ after(grammarAccess.getLogicalAndExpressionAccess().getLogicalAndExpressionAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalAndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group__1__Impl
	rule__LogicalAndExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLogicalAndExpressionAccess().getExprAssignment_1()); }
(rule__LogicalAndExpression__ExprAssignment_1)
{ after(grammarAccess.getLogicalAndExpressionAccess().getExprAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalAndExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLogicalAndExpressionAccess().getGroup_2()); }
(rule__LogicalAndExpression__Group_2__0)*
{ after(grammarAccess.getLogicalAndExpressionAccess().getGroup_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__LogicalAndExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group_2__0__Impl
	rule__LogicalAndExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLogicalAndExpressionAccess().getSKW_ANDANDTerminalRuleCall_2_0()); }
	RULE_SKW_ANDAND
{ after(grammarAccess.getLogicalAndExpressionAccess().getSKW_ANDANDTerminalRuleCall_2_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalAndExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLogicalAndExpressionAccess().getExprAssignment_2_1()); }
(rule__LogicalAndExpression__ExprAssignment_2_1)
{ after(grammarAccess.getLogicalAndExpressionAccess().getExprAssignment_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__InclusiveOrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InclusiveOrExpression__Group__0__Impl
	rule__InclusiveOrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InclusiveOrExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInclusiveOrExpressionAccess().getInclusiveOrExpressionAction_0()); }
(

)
{ after(grammarAccess.getInclusiveOrExpressionAccess().getInclusiveOrExpressionAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__InclusiveOrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InclusiveOrExpression__Group__1__Impl
	rule__InclusiveOrExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InclusiveOrExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInclusiveOrExpressionAccess().getExprAssignment_1()); }
(rule__InclusiveOrExpression__ExprAssignment_1)
{ after(grammarAccess.getInclusiveOrExpressionAccess().getExprAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__InclusiveOrExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InclusiveOrExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InclusiveOrExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInclusiveOrExpressionAccess().getGroup_2()); }
(rule__InclusiveOrExpression__Group_2__0)*
{ after(grammarAccess.getInclusiveOrExpressionAccess().getGroup_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__InclusiveOrExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InclusiveOrExpression__Group_2__0__Impl
	rule__InclusiveOrExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InclusiveOrExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInclusiveOrExpressionAccess().getSKW_ORTerminalRuleCall_2_0()); }
	RULE_SKW_OR
{ after(grammarAccess.getInclusiveOrExpressionAccess().getSKW_ORTerminalRuleCall_2_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__InclusiveOrExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InclusiveOrExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InclusiveOrExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInclusiveOrExpressionAccess().getExprAssignment_2_1()); }
(rule__InclusiveOrExpression__ExprAssignment_2_1)
{ after(grammarAccess.getInclusiveOrExpressionAccess().getExprAssignment_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__ExclusiveOrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExclusiveOrExpression__Group__0__Impl
	rule__ExclusiveOrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExclusiveOrExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getExclusiveOrExpressionAccess().getExclusiveOrExpressionAction_0()); }
(

)
{ after(grammarAccess.getExclusiveOrExpressionAccess().getExclusiveOrExpressionAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ExclusiveOrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExclusiveOrExpression__Group__1__Impl
	rule__ExclusiveOrExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExclusiveOrExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getExclusiveOrExpressionAccess().getExprAssignment_1()); }
(rule__ExclusiveOrExpression__ExprAssignment_1)
{ after(grammarAccess.getExclusiveOrExpressionAccess().getExprAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ExclusiveOrExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExclusiveOrExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExclusiveOrExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getExclusiveOrExpressionAccess().getGroup_2()); }
(rule__ExclusiveOrExpression__Group_2__0)*
{ after(grammarAccess.getExclusiveOrExpressionAccess().getGroup_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__ExclusiveOrExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExclusiveOrExpression__Group_2__0__Impl
	rule__ExclusiveOrExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExclusiveOrExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getExclusiveOrExpressionAccess().getSKW_CARETTerminalRuleCall_2_0()); }
	RULE_SKW_CARET
{ after(grammarAccess.getExclusiveOrExpressionAccess().getSKW_CARETTerminalRuleCall_2_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ExclusiveOrExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExclusiveOrExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExclusiveOrExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getExclusiveOrExpressionAccess().getExprAssignment_2_1()); }
(rule__ExclusiveOrExpression__ExprAssignment_2_1)
{ after(grammarAccess.getExclusiveOrExpressionAccess().getExprAssignment_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAndExpressionAccess().getAndExpressionAction_0()); }
(

)
{ after(grammarAccess.getAndExpressionAccess().getAndExpressionAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__1__Impl
	rule__AndExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAndExpressionAccess().getExprAssignment_1()); }
(rule__AndExpression__ExprAssignment_1)
{ after(grammarAccess.getAndExpressionAccess().getExprAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAndExpressionAccess().getGroup_2()); }
(rule__AndExpression__Group_2__0)*
{ after(grammarAccess.getAndExpressionAccess().getGroup_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__AndExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_2__0__Impl
	rule__AndExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAndExpressionAccess().getSKW_ANDTerminalRuleCall_2_0()); }
	RULE_SKW_AND
{ after(grammarAccess.getAndExpressionAccess().getSKW_ANDTerminalRuleCall_2_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAndExpressionAccess().getExprAssignment_2_1()); }
(rule__AndExpression__ExprAssignment_2_1)
{ after(grammarAccess.getAndExpressionAccess().getExprAssignment_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__EqualityExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group__0__Impl
	rule__EqualityExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getEqualityExpressionAccess().getEqualityExpressionAction_0()); }
(

)
{ after(grammarAccess.getEqualityExpressionAccess().getEqualityExpressionAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group__1__Impl
	rule__EqualityExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getEqualityExpressionAccess().getExprAssignment_1()); }
(rule__EqualityExpression__ExprAssignment_1)
{ after(grammarAccess.getEqualityExpressionAccess().getExprAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getEqualityExpressionAccess().getGroup_2()); }
(rule__EqualityExpression__Group_2__0)*
{ after(grammarAccess.getEqualityExpressionAccess().getGroup_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__EqualityExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group_2__0__Impl
	rule__EqualityExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getEqualityExpressionAccess().getAlternatives_2_0()); }
(rule__EqualityExpression__Alternatives_2_0)
{ after(grammarAccess.getEqualityExpressionAccess().getAlternatives_2_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getEqualityExpressionAccess().getExprAssignment_2_1()); }
(rule__EqualityExpression__ExprAssignment_2_1)
{ after(grammarAccess.getEqualityExpressionAccess().getExprAssignment_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group__0__Impl
	rule__RelationalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getRelationalExpressionAccess().getRelationalExpressionAction_0()); }
(

)
{ after(grammarAccess.getRelationalExpressionAccess().getRelationalExpressionAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group__1__Impl
	rule__RelationalExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getRelationalExpressionAccess().getExprAssignment_1()); }
(rule__RelationalExpression__ExprAssignment_1)
{ after(grammarAccess.getRelationalExpressionAccess().getExprAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup_2()); }
(rule__RelationalExpression__Group_2__0)*
{ after(grammarAccess.getRelationalExpressionAccess().getGroup_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__RelationalExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_2__0__Impl
	rule__RelationalExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getRelationalExpressionAccess().getAlternatives_2_0()); }
(rule__RelationalExpression__Alternatives_2_0)
{ after(grammarAccess.getRelationalExpressionAccess().getAlternatives_2_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getRelationalExpressionAccess().getExprAssignment_2_1()); }
(rule__RelationalExpression__ExprAssignment_2_1)
{ after(grammarAccess.getRelationalExpressionAccess().getExprAssignment_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__ShiftExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftExpression__Group__0__Impl
	rule__ShiftExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getShiftExpressionAccess().getShiftExpressionAction_0()); }
(

)
{ after(grammarAccess.getShiftExpressionAccess().getShiftExpressionAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ShiftExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftExpression__Group__1__Impl
	rule__ShiftExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getShiftExpressionAccess().getExprAssignment_1()); }
(rule__ShiftExpression__ExprAssignment_1)
{ after(grammarAccess.getShiftExpressionAccess().getExprAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ShiftExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getShiftExpressionAccess().getGroup_2()); }
(rule__ShiftExpression__Group_2__0)*
{ after(grammarAccess.getShiftExpressionAccess().getGroup_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__ShiftExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftExpression__Group_2__0__Impl
	rule__ShiftExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getShiftExpressionAccess().getAlternatives_2_0()); }
(rule__ShiftExpression__Alternatives_2_0)
{ after(grammarAccess.getShiftExpressionAccess().getAlternatives_2_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ShiftExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getShiftExpressionAccess().getExprAssignment_2_1()); }
(rule__ShiftExpression__ExprAssignment_2_1)
{ after(grammarAccess.getShiftExpressionAccess().getExprAssignment_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group__0__Impl
	rule__AdditiveExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionAction_0()); }
(

)
{ after(grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group__1__Impl
	rule__AdditiveExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAdditiveExpressionAccess().getExprAssignment_1()); }
(rule__AdditiveExpression__ExprAssignment_1)
{ after(grammarAccess.getAdditiveExpressionAccess().getExprAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup_2()); }
(rule__AdditiveExpression__Group_2__0)*
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__AdditiveExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_2__0__Impl
	rule__AdditiveExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAdditiveExpressionAccess().getAlternatives_2_0()); }
(rule__AdditiveExpression__Alternatives_2_0)
{ after(grammarAccess.getAdditiveExpressionAccess().getAlternatives_2_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAdditiveExpressionAccess().getExprAssignment_2_1()); }
(rule__AdditiveExpression__ExprAssignment_2_1)
{ after(grammarAccess.getAdditiveExpressionAccess().getExprAssignment_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicativeExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group__0__Impl
	rule__MultiplicativeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionAction_0()); }
(

)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group__1__Impl
	rule__MultiplicativeExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getExprAssignment_1()); }
(rule__MultiplicativeExpression__ExprAssignment_1)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getExprAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_2()); }
(rule__MultiplicativeExpression__Group_2__0)*
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__MultiplicativeExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_2__0__Impl
	rule__MultiplicativeExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getAlternatives_2_0()); }
(rule__MultiplicativeExpression__Alternatives_2_0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getAlternatives_2_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getExprAssignment_2_1()); }
(rule__MultiplicativeExpression__ExprAssignment_2_1)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getExprAssignment_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__CastExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastExpression__Group__0__Impl
	rule__CastExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CastExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getCastExpressionAccess().getCastExpressionAction_0()); }
(

)
{ after(grammarAccess.getCastExpressionAccess().getCastExpressionAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__CastExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CastExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getCastExpressionAccess().getExprAssignment_1()); }
(rule__CastExpression__ExprAssignment_1)
{ after(grammarAccess.getCastExpressionAccess().getExprAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__UnaryExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group__0__Impl
	rule__UnaryExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getUnaryExpressionAccess().getUnaryExpressionAction_0()); }
(

)
{ after(grammarAccess.getUnaryExpressionAccess().getUnaryExpressionAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getUnaryExpressionAccess().getAlternatives_1()); }
(rule__UnaryExpression__Alternatives_1)
{ after(grammarAccess.getUnaryExpressionAccess().getAlternatives_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__UnaryExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_1_1__0__Impl
	rule__UnaryExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getUnaryExpressionAccess().getOpAssignment_1_1_0()); }
(rule__UnaryExpression__OpAssignment_1_1_0)
{ after(grammarAccess.getUnaryExpressionAccess().getOpAssignment_1_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getUnaryExpressionAccess().getExprAssignment_1_1_1()); }
(rule__UnaryExpression__ExprAssignment_1_1_1)
{ after(grammarAccess.getUnaryExpressionAccess().getExprAssignment_1_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__UnaryOperator__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryOperator__Group_0__0__Impl
	rule__UnaryOperator__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperator__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getUnaryOperatorAccess().getUnaryOperatorAction_0_0()); }
(

)
{ after(grammarAccess.getUnaryOperatorAccess().getUnaryOperatorAction_0_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryOperator__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryOperator__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperator__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getUnaryOperatorAccess().getOpAssignment_0_1()); }
(rule__UnaryOperator__OpAssignment_0_1)
{ after(grammarAccess.getUnaryOperatorAccess().getOpAssignment_0_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__PostfixExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixExpression__Group__0__Impl
	rule__PostfixExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPostfixExpressionAccess().getPostfixExpressionAction_0()); }
(

)
{ after(grammarAccess.getPostfixExpressionAccess().getPostfixExpressionAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__PostfixExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPostfixExpressionAccess().getGroup_1()); }
(rule__PostfixExpression__Group_1__0)
{ after(grammarAccess.getPostfixExpressionAccess().getGroup_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__PostfixExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixExpression__Group_1__0__Impl
	rule__PostfixExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPostfixExpressionAccess().getExprAssignment_1_0()); }
(rule__PostfixExpression__ExprAssignment_1_0)
{ after(grammarAccess.getPostfixExpressionAccess().getExprAssignment_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__PostfixExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPostfixExpressionAccess().getSuffixAssignment_1_1()); }
(rule__PostfixExpression__SuffixAssignment_1_1)*
{ after(grammarAccess.getPostfixExpressionAccess().getSuffixAssignment_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__PostfixExpressionSuffixArgument__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixExpressionSuffixArgument__Group__0__Impl
	rule__PostfixExpressionSuffixArgument__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpressionSuffixArgument__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPostfixExpressionSuffixArgumentAccess().getPostfixExpressionSuffixArgumentAction_0()); }
(

)
{ after(grammarAccess.getPostfixExpressionSuffixArgumentAccess().getPostfixExpressionSuffixArgumentAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__PostfixExpressionSuffixArgument__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixExpressionSuffixArgument__Group__1__Impl
	rule__PostfixExpressionSuffixArgument__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpressionSuffixArgument__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPostfixExpressionSuffixArgumentAccess().getSKW_LEFTPARENTerminalRuleCall_1()); }
	RULE_SKW_LEFTPAREN
{ after(grammarAccess.getPostfixExpressionSuffixArgumentAccess().getSKW_LEFTPARENTerminalRuleCall_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__PostfixExpressionSuffixArgument__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixExpressionSuffixArgument__Group__2__Impl
	rule__PostfixExpressionSuffixArgument__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpressionSuffixArgument__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPostfixExpressionSuffixArgumentAccess().getArgumentExpressionListAssignment_2()); }
(rule__PostfixExpressionSuffixArgument__ArgumentExpressionListAssignment_2)?
{ after(grammarAccess.getPostfixExpressionSuffixArgumentAccess().getArgumentExpressionListAssignment_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__PostfixExpressionSuffixArgument__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixExpressionSuffixArgument__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpressionSuffixArgument__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPostfixExpressionSuffixArgumentAccess().getSKW_RIGHTPARENTerminalRuleCall_3()); }
	RULE_SKW_RIGHTPAREN
{ after(grammarAccess.getPostfixExpressionSuffixArgumentAccess().getSKW_RIGHTPARENTerminalRuleCall_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}










rule__ArgumentExpressionList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArgumentExpressionList__Group__0__Impl
	rule__ArgumentExpressionList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentExpressionList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getArgumentExpressionListAccess().getExprAssignment_0()); }
(rule__ArgumentExpressionList__ExprAssignment_0)
{ after(grammarAccess.getArgumentExpressionListAccess().getExprAssignment_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ArgumentExpressionList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArgumentExpressionList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentExpressionList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getArgumentExpressionListAccess().getGroup_1()); }
(rule__ArgumentExpressionList__Group_1__0)*
{ after(grammarAccess.getArgumentExpressionListAccess().getGroup_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__ArgumentExpressionList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArgumentExpressionList__Group_1__0__Impl
	rule__ArgumentExpressionList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentExpressionList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getArgumentExpressionListAccess().getSKW_COMMATerminalRuleCall_1_0()); }
	RULE_SKW_COMMA
{ after(grammarAccess.getArgumentExpressionListAccess().getSKW_COMMATerminalRuleCall_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ArgumentExpressionList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArgumentExpressionList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentExpressionList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getArgumentExpressionListAccess().getExprAssignment_1_1()); }
(rule__ArgumentExpressionList__ExprAssignment_1_1)
{ after(grammarAccess.getArgumentExpressionListAccess().getExprAssignment_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__PrimaryExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group__0__Impl
	rule__PrimaryExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPrimaryExpressionAccess().getPrimaryExpressionAction_0()); }
(

)
{ after(grammarAccess.getPrimaryExpressionAccess().getPrimaryExpressionAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives_1()); }
(rule__PrimaryExpression__Alternatives_1)
{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__PrimaryExpression__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_1_2__0__Impl
	rule__PrimaryExpression__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPrimaryExpressionAccess().getSKW_LEFTPARENTerminalRuleCall_1_2_0()); }
	RULE_SKW_LEFTPAREN
{ after(grammarAccess.getPrimaryExpressionAccess().getSKW_LEFTPARENTerminalRuleCall_1_2_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_1_2__1__Impl
	rule__PrimaryExpression__Group_1_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPrimaryExpressionAccess().getExprAssignment_1_2_1()); }
(rule__PrimaryExpression__ExprAssignment_1_2_1)
{ after(grammarAccess.getPrimaryExpressionAccess().getExprAssignment_1_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_1_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_1_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPrimaryExpressionAccess().getSKW_RIGHTPARENTerminalRuleCall_1_2_2()); }
	RULE_SKW_RIGHTPAREN
{ after(grammarAccess.getPrimaryExpressionAccess().getSKW_RIGHTPARENTerminalRuleCall_1_2_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}











rule__Expression__ExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getExpressionConditionalExpressionParserRuleCall_1_0()); }
	ruleConditionalExpression{ after(grammarAccess.getExpressionAccess().getExpressionConditionalExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getExprLogicalOrExpressionParserRuleCall_1_0()); }
	ruleLogicalOrExpression{ after(grammarAccess.getConditionalExpressionAccess().getExprLogicalOrExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__QExprAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getQExprExpressionParserRuleCall_2_1_0()); }
	ruleExpression{ after(grammarAccess.getConditionalExpressionAccess().getQExprExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__CExprAssignment_2_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getCExprConditionalExpressionParserRuleCall_2_3_0()); }
	ruleConditionalExpression{ after(grammarAccess.getConditionalExpressionAccess().getCExprConditionalExpressionParserRuleCall_2_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getExprLogicalAndExpressionParserRuleCall_1_0()); }
	ruleLogicalAndExpression{ after(grammarAccess.getLogicalOrExpressionAccess().getExprLogicalAndExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__ExprAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getExprLogicalAndExpressionParserRuleCall_2_1_0()); }
	ruleLogicalAndExpression{ after(grammarAccess.getLogicalOrExpressionAccess().getExprLogicalAndExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getExprInclusiveOrExpressionParserRuleCall_1_0()); }
	ruleInclusiveOrExpression{ after(grammarAccess.getLogicalAndExpressionAccess().getExprInclusiveOrExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__ExprAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getExprInclusiveOrExpressionParserRuleCall_2_1_0()); }
	ruleInclusiveOrExpression{ after(grammarAccess.getLogicalAndExpressionAccess().getExprInclusiveOrExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InclusiveOrExpression__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInclusiveOrExpressionAccess().getExprExclusiveOrExpressionParserRuleCall_1_0()); }
	ruleExclusiveOrExpression{ after(grammarAccess.getInclusiveOrExpressionAccess().getExprExclusiveOrExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InclusiveOrExpression__ExprAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInclusiveOrExpressionAccess().getExprExclusiveOrExpressionParserRuleCall_2_1_0()); }
	ruleExclusiveOrExpression{ after(grammarAccess.getInclusiveOrExpressionAccess().getExprExclusiveOrExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExclusiveOrExpression__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExclusiveOrExpressionAccess().getExprAndExpressionParserRuleCall_1_0()); }
	ruleAndExpression{ after(grammarAccess.getExclusiveOrExpressionAccess().getExprAndExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExclusiveOrExpression__ExprAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExclusiveOrExpressionAccess().getExprAndExpressionParserRuleCall_2_1_0()); }
	ruleAndExpression{ after(grammarAccess.getExclusiveOrExpressionAccess().getExprAndExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getExprEqualityExpressionParserRuleCall_1_0()); }
	ruleEqualityExpression{ after(grammarAccess.getAndExpressionAccess().getExprEqualityExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__ExprAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getExprEqualityExpressionParserRuleCall_2_1_0()); }
	ruleEqualityExpression{ after(grammarAccess.getAndExpressionAccess().getExprEqualityExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getExprRelationalExpressionParserRuleCall_1_0()); }
	ruleRelationalExpression{ after(grammarAccess.getEqualityExpressionAccess().getExprRelationalExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__OpAssignment_2_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getOpSKW_EQUALTerminalRuleCall_2_0_0_0()); }
	RULE_SKW_EQUAL{ after(grammarAccess.getEqualityExpressionAccess().getOpSKW_EQUALTerminalRuleCall_2_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__OpAssignment_2_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getOpSKW_NOTEQUALTerminalRuleCall_2_0_1_0()); }
	RULE_SKW_NOTEQUAL{ after(grammarAccess.getEqualityExpressionAccess().getOpSKW_NOTEQUALTerminalRuleCall_2_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__ExprAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getExprRelationalExpressionParserRuleCall_2_1_0()); }
	ruleRelationalExpression{ after(grammarAccess.getEqualityExpressionAccess().getExprRelationalExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getExprShiftExpressionParserRuleCall_1_0()); }
	ruleShiftExpression{ after(grammarAccess.getRelationalExpressionAccess().getExprShiftExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__OpAssignment_2_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOpSKW_LESSTerminalRuleCall_2_0_0_0()); }
	RULE_SKW_LESS{ after(grammarAccess.getRelationalExpressionAccess().getOpSKW_LESSTerminalRuleCall_2_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__OpAssignment_2_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOpSKW_GREATERTerminalRuleCall_2_0_1_0()); }
	RULE_SKW_GREATER{ after(grammarAccess.getRelationalExpressionAccess().getOpSKW_GREATERTerminalRuleCall_2_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__OpAssignment_2_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOpSKW_LESSEQUALTerminalRuleCall_2_0_2_0()); }
	RULE_SKW_LESSEQUAL{ after(grammarAccess.getRelationalExpressionAccess().getOpSKW_LESSEQUALTerminalRuleCall_2_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__OpAssignment_2_0_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOpSKW_GREATEREQUALTerminalRuleCall_2_0_3_0()); }
	RULE_SKW_GREATEREQUAL{ after(grammarAccess.getRelationalExpressionAccess().getOpSKW_GREATEREQUALTerminalRuleCall_2_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__ExprAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getExprShiftExpressionParserRuleCall_2_1_0()); }
	ruleShiftExpression{ after(grammarAccess.getRelationalExpressionAccess().getExprShiftExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftExpressionAccess().getExprAdditiveExpressionParserRuleCall_1_0()); }
	ruleAdditiveExpression{ after(grammarAccess.getShiftExpressionAccess().getExprAdditiveExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__OpAssignment_2_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftExpressionAccess().getOpSKW_LEFTSHIFTTerminalRuleCall_2_0_0_0()); }
	RULE_SKW_LEFTSHIFT{ after(grammarAccess.getShiftExpressionAccess().getOpSKW_LEFTSHIFTTerminalRuleCall_2_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__OpAssignment_2_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftExpressionAccess().getOpSKW_RIGHTSHIFTTerminalRuleCall_2_0_1_0()); }
	RULE_SKW_RIGHTSHIFT{ after(grammarAccess.getShiftExpressionAccess().getOpSKW_RIGHTSHIFTTerminalRuleCall_2_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__ExprAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftExpressionAccess().getExprAdditiveExpressionParserRuleCall_2_1_0()); }
	ruleAdditiveExpression{ after(grammarAccess.getShiftExpressionAccess().getExprAdditiveExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getExprMultiplicativeExpressionParserRuleCall_1_0()); }
	ruleMultiplicativeExpression{ after(grammarAccess.getAdditiveExpressionAccess().getExprMultiplicativeExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__OpAssignment_2_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOpSKW_PLUSTerminalRuleCall_2_0_0_0()); }
	RULE_SKW_PLUS{ after(grammarAccess.getAdditiveExpressionAccess().getOpSKW_PLUSTerminalRuleCall_2_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__OpAssignment_2_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOpSKW_MINUSTerminalRuleCall_2_0_1_0()); }
	RULE_SKW_MINUS{ after(grammarAccess.getAdditiveExpressionAccess().getOpSKW_MINUSTerminalRuleCall_2_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__ExprAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getExprMultiplicativeExpressionParserRuleCall_2_1_0()); }
	ruleMultiplicativeExpression{ after(grammarAccess.getAdditiveExpressionAccess().getExprMultiplicativeExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getExprCastExpressionParserRuleCall_1_0()); }
	ruleCastExpression{ after(grammarAccess.getMultiplicativeExpressionAccess().getExprCastExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__OpAssignment_2_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpSKW_STARTerminalRuleCall_2_0_0_0()); }
	RULE_SKW_STAR{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpSKW_STARTerminalRuleCall_2_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__OpAssignment_2_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpSKW_DIVTerminalRuleCall_2_0_1_0()); }
	RULE_SKW_DIV{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpSKW_DIVTerminalRuleCall_2_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__OpAssignment_2_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpSKW_MODTerminalRuleCall_2_0_2_0()); }
	RULE_SKW_MOD{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpSKW_MODTerminalRuleCall_2_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__ExprAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getExprCastExpressionParserRuleCall_2_1_0()); }
	ruleCastExpression{ after(grammarAccess.getMultiplicativeExpressionAccess().getExprCastExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CastExpression__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastExpressionAccess().getExprUnaryExpressionParserRuleCall_1_0()); }
	ruleUnaryExpression{ after(grammarAccess.getCastExpressionAccess().getExprUnaryExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__ExprAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getExprPostfixExpressionParserRuleCall_1_0_0()); }
	rulePostfixExpression{ after(grammarAccess.getUnaryExpressionAccess().getExprPostfixExpressionParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__OpAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getOpUnaryOperatorParserRuleCall_1_1_0_0()); }
	ruleUnaryOperator{ after(grammarAccess.getUnaryExpressionAccess().getOpUnaryOperatorParserRuleCall_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__ExprAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getExprCastExpressionParserRuleCall_1_1_1_0()); }
	ruleCastExpression{ after(grammarAccess.getUnaryExpressionAccess().getExprCastExpressionParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperator__OpAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperatorAccess().getOpSKW_ANDTerminalRuleCall_0_1_0()); }
	RULE_SKW_AND{ after(grammarAccess.getUnaryOperatorAccess().getOpSKW_ANDTerminalRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperator__OpAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperatorAccess().getOpSKW_STARTerminalRuleCall_1_0()); }
	RULE_SKW_STAR{ after(grammarAccess.getUnaryOperatorAccess().getOpSKW_STARTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperator__OpAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperatorAccess().getOpSKW_PLUSTerminalRuleCall_2_0()); }
	RULE_SKW_PLUS{ after(grammarAccess.getUnaryOperatorAccess().getOpSKW_PLUSTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperator__OpAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperatorAccess().getOpSKW_MINUSTerminalRuleCall_3_0()); }
	RULE_SKW_MINUS{ after(grammarAccess.getUnaryOperatorAccess().getOpSKW_MINUSTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperator__OpAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperatorAccess().getOpSKW_TILDETerminalRuleCall_4_0()); }
	RULE_SKW_TILDE{ after(grammarAccess.getUnaryOperatorAccess().getOpSKW_TILDETerminalRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperator__OpAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperatorAccess().getOpSKW_NOTTerminalRuleCall_5_0()); }
	RULE_SKW_NOT{ after(grammarAccess.getUnaryOperatorAccess().getOpSKW_NOTTerminalRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpression__ExprAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixExpressionAccess().getExprPrimaryExpressionParserRuleCall_1_0_0()); }
	rulePrimaryExpression{ after(grammarAccess.getPostfixExpressionAccess().getExprPrimaryExpressionParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpression__SuffixAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixExpressionAccess().getSuffixPostfixExpressionSuffixArgumentParserRuleCall_1_1_0()); }
	rulePostfixExpressionSuffixArgument{ after(grammarAccess.getPostfixExpressionAccess().getSuffixPostfixExpressionSuffixArgumentParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpressionSuffixArgument__ArgumentExpressionListAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixExpressionSuffixArgumentAccess().getArgumentExpressionListArgumentExpressionListParserRuleCall_2_0()); }
	ruleArgumentExpressionList{ after(grammarAccess.getPostfixExpressionSuffixArgumentAccess().getArgumentExpressionListArgumentExpressionListParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentExpressionList__ExprAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentExpressionListAccess().getExprConditionalExpressionParserRuleCall_0_0()); }
	ruleConditionalExpression{ after(grammarAccess.getArgumentExpressionListAccess().getExprConditionalExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentExpressionList__ExprAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentExpressionListAccess().getExprConditionalExpressionParserRuleCall_1_1_0()); }
	ruleConditionalExpression{ after(grammarAccess.getArgumentExpressionListAccess().getExprConditionalExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__ConstAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getConstConstant1ParserRuleCall_1_0_0()); }
	ruleConstant1{ after(grammarAccess.getPrimaryExpressionAccess().getConstConstant1ParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__IdAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getIdIDTerminalRuleCall_1_1_0()); }
	RULE_ID{ after(grammarAccess.getPrimaryExpressionAccess().getIdIDTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__ExprAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getExprExpressionParserRuleCall_1_2_1_0()); }
	ruleExpression{ after(grammarAccess.getPrimaryExpressionAccess().getExprExpressionParserRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}









RULE_SKW_AND : '&';

RULE_SKW_ANDAND : RULE_SKW_AND RULE_SKW_AND;

RULE_SKW_ASSIGN : '=';

RULE_SKW_BACKSLASH : '\\';

RULE_SKW_CARET : '^';

RULE_SKW_COMMA : ',';

RULE_SKW_COLON : ':';

RULE_SKW_DIV : '/';

fragment RULE_SKW_DOLLAR : '$';

RULE_SKW_DOT : '.';

RULE_SKW_DOUBLEQUOTE : '"';

RULE_SKW_EQUAL : RULE_SKW_ASSIGN RULE_SKW_ASSIGN;

RULE_SKW_GREATER : '>';

RULE_SKW_GREATEREQUAL : RULE_SKW_GREATER RULE_SKW_ASSIGN;

RULE_SKW_LEFTBRACE : '{';

RULE_SKW_LEFTBRACKET : '[';

RULE_SKW_LEFTPAREN : '(';

RULE_SKW_LEFTSHIFT : RULE_SKW_LESS RULE_SKW_LESS;

RULE_SKW_LESS : '<';

RULE_SKW_LESSEQUAL : RULE_SKW_LESS RULE_SKW_ASSIGN;

RULE_SKW_MINUS : '-';

RULE_SKW_MINUSMINUS : RULE_SKW_MINUS RULE_SKW_MINUS;

RULE_SKW_MOD : '%';

RULE_SKW_NOT : '!';

RULE_SKW_NOTEQUAL : RULE_SKW_NOT RULE_SKW_ASSIGN;

RULE_SKW_OR : '|';

RULE_SKW_OROR : RULE_SKW_OR RULE_SKW_OR;

RULE_SKW_PLUS : '+';

RULE_SKW_PLUSPLUS : RULE_SKW_PLUS RULE_SKW_PLUS;

RULE_SKW_QUESTION : '?';

RULE_SKW_RIGHTBRACE : '}';

RULE_SKW_RIGHTBRACKET : ']';

RULE_SKW_RIGHTPAREN : ')';

RULE_SKW_RIGHTSHIFT : RULE_SKW_GREATER RULE_SKW_GREATER;

RULE_SKW_SEMI : ';';

RULE_SKW_SINGLEQUOTE : '\'';

RULE_SKW_STAR : '*';

RULE_SKW_TILDE : '~';

fragment RULE_SKW_UNDERSCORE : '_';

RULE_ID : RULE_IDENTIFIER;

fragment RULE_IDENTIFIER : RULE_LETTER (RULE_LETTER|'0'..'9')*;

fragment RULE_LETTER : (RULE_SKW_DOLLAR|'A'..'Z'|'a'..'z'|RULE_SKW_UNDERSCORE);

RULE_CHAR_LITERAL : RULE_SKW_SINGLEQUOTE (RULE_ESCAPE_SEQUENCE|~((RULE_SKW_SINGLEQUOTE|RULE_SKW_BACKSLASH))) RULE_SKW_SINGLEQUOTE;

RULE_STRING_LITERAL : RULE_SKW_DOUBLEQUOTE (RULE_ESCAPE_SEQUENCE|~((RULE_SKW_BACKSLASH|RULE_SKW_DOUBLEQUOTE)))* RULE_SKW_DOUBLEQUOTE;

RULE_HEX_LITERAL : '0' ('x'|'X') RULE_HEX_DIGIT+ RULE_INTEGER_TYPE_SUFFIX?;

RULE_DECIMAL_LITERAL : ('0'|'1'..'9' ('0'..'9')*) RULE_INTEGER_TYPE_SUFFIX?;

RULE_OCTAL_LITERAL : '0' ('0'..'7')+ RULE_INTEGER_TYPE_SUFFIX?;

RULE_BIN_LITERAL : ('0b'|'0B') ('0'..'1')+;

fragment RULE_HEX_DIGIT : ('0'..'9'|'a'..'f'|'A'..'F');

fragment RULE_INTEGER_TYPE_SUFFIX : (('u'|'U')? ('l'|'L')|('u'|'U') ('l'|'L')?);

RULE_FLOAT_LITERAL : (('0'..'9')+ RULE_SKW_DOT ('0'..'9')* RULE_EXPONENT? RULE_FLOAT_TYPE_SUFFIX?|RULE_SKW_DOT ('0'..'9')+ RULE_EXPONENT? RULE_FLOAT_TYPE_SUFFIX?|('0'..'9')+ RULE_EXPONENT RULE_FLOAT_TYPE_SUFFIX?|('0'..'9')+ RULE_EXPONENT? RULE_FLOAT_TYPE_SUFFIX);

fragment RULE_EXPONENT : ('e'|'E') ('+'|'-')? ('0'..'9')+;

fragment RULE_FLOAT_TYPE_SUFFIX : ('f'|'F'|'d'|'D');

fragment RULE_ESCAPE_SEQUENCE : (RULE_SKW_BACKSLASH ('b'|'t'|'n'|'f'|'r'|'"'|RULE_SKW_SINGLEQUOTE|RULE_SKW_BACKSLASH)|RULE_OCTAL_ESCAPE|RULE_HEX_ESCAPE);

fragment RULE_OCTAL_ESCAPE : (RULE_SKW_BACKSLASH '0'..'3' '0'..'7' '0'..'7'|RULE_SKW_BACKSLASH '0'..'7' '0'..'7'|RULE_SKW_BACKSLASH '0'..'7');

fragment RULE_HEX_ESCAPE : RULE_SKW_BACKSLASH 'x' RULE_HEX_DIGIT+;

fragment RULE_LINEFEED : '\n';

fragment RULE_CARRIAGERETURN : '\r';

fragment RULE_LINE_END : (RULE_CARRIAGERETURN|RULE_LINEFEED);

RULE_LINEBREAK : RULE_SKW_BACKSLASH RULE_LINE_END;

RULE_NEWLINE : RULE_LINE_END;

fragment RULE_SPACE : ' ';

fragment RULE_TAB : '\t';

RULE_WHITESPACE : (RULE_SPACE|RULE_TAB);

RULE_BLOCK_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_LINE_COMMENT : '//' ~(RULE_LINE_END)*;

RULE_SPECIAL : .;


