/*
 * generated by Xtext 2.9.0-SNAPSHOT
 */
grammar InternalCommon;

options {
	superClass=AbstractInternalAntlrParser;
	
	
}

@lexer::header {
package at.jku.weiner.c.common.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package at.jku.weiner.c.common.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import at.jku.weiner.c.common.services.CommonGrammarAccess;

}

@parser::members {

 	private CommonGrammarAccess grammarAccess;
 	
    public InternalCommonParser(TokenStream input, CommonGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Expression";	
   	}
   	
   	@Override
   	protected CommonGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WHITESPACE", "RULE_IGNORED");
	}
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WHITESPACE", "RULE_IGNORED");
    }
    @after { leaveRule();
    		
     }:


    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getConditionalExpressionParserRuleCall()); 
    }
    this_ConditionalExpression_0=ruleConditionalExpression
    { 
        $current = $this_ConditionalExpression_0.current; 
        afterParserOrEnumRuleCall();
    }



;
finally {
	myHiddenTokenState.restore();

	/*no after found*/

}







// Entry rule entryRuleConditionalExpression
entryRuleConditionalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionalExpressionRule()); }
	 iv_ruleConditionalExpression=ruleConditionalExpression 
	 { $current=$iv_ruleConditionalExpression.current; } 
	 EOF 
;

// Rule ConditionalExpression
ruleConditionalExpression returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(

    { 
        newCompositeNode(grammarAccess.getConditionalExpressionAccess().getLogicalOrExpressionParserRuleCall_0()); 
    }
    this_LogicalOrExpression_0=ruleLogicalOrExpression
    { 
        $current = $this_LogicalOrExpression_0.current; 
        afterParserOrEnumRuleCall();
    }



(
(
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getConditionalExpressionAccess().getConditionalExpressionExprAction_1_0(),
            $current);
    }
)


this_SKW_QUESTION_2=RULE_SKW_QUESTION
    { 
    newLeafNode(this_SKW_QUESTION_2, grammarAccess.getConditionalExpressionAccess().getSKW_QUESTIONTerminalRuleCall_1_1()); 
    }



(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalExpressionAccess().getQExprExpressionParserRuleCall_1_2_0()); 
	    }
		lv_qExpr_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
	        }
       		set(
       			$current, 
       			"qExpr",
        		lv_qExpr_3_0, 
        		"at.jku.weiner.c.common.Common.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)


this_SKW_COLON_4=RULE_SKW_COLON
    { 
    newLeafNode(this_SKW_COLON_4, grammarAccess.getConditionalExpressionAccess().getSKW_COLONTerminalRuleCall_1_3()); 
    }



(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalExpressionAccess().getCExprConditionalExpressionParserRuleCall_1_4_0()); 
	    }
		lv_cExpr_5_0=ruleConditionalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
	        }
       		set(
       			$current, 
       			"cExpr",
        		lv_cExpr_5_0, 
        		"at.jku.weiner.c.common.Common.ConditionalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)

)?

)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleLogicalOrExpression
entryRuleLogicalOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalOrExpressionRule()); }
	 iv_ruleLogicalOrExpression=ruleLogicalOrExpression 
	 { $current=$iv_ruleLogicalOrExpression.current; } 
	 EOF 
;

// Rule LogicalOrExpression
ruleLogicalOrExpression returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(

    { 
        newCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getLogicalAndExpressionParserRuleCall_0()); 
    }
    this_LogicalAndExpression_0=ruleLogicalAndExpression
    { 
        $current = $this_LogicalAndExpression_0.current; 
        afterParserOrEnumRuleCall();
    }



(
(
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getLogicalOrExpressionAccess().getLogicalOrExpressionLeftAction_1_0(),
            $current);
    }
)


this_SKW_OROR_2=RULE_SKW_OROR
    { 
    newLeafNode(this_SKW_OROR_2, grammarAccess.getLogicalOrExpressionAccess().getSKW_ORORTerminalRuleCall_1_1()); 
    }



(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getRightLogicalAndExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleLogicalAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalOrExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"at.jku.weiner.c.common.Common.LogicalAndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)

)*

)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleLogicalAndExpression
entryRuleLogicalAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalAndExpressionRule()); }
	 iv_ruleLogicalAndExpression=ruleLogicalAndExpression 
	 { $current=$iv_ruleLogicalAndExpression.current; } 
	 EOF 
;

// Rule LogicalAndExpression
ruleLogicalAndExpression returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(

    { 
        newCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getInclusiveOrExpressionParserRuleCall_0()); 
    }
    this_InclusiveOrExpression_0=ruleInclusiveOrExpression
    { 
        $current = $this_InclusiveOrExpression_0.current; 
        afterParserOrEnumRuleCall();
    }



(
(
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getLogicalAndExpressionAccess().getLogicalAndExpressionLeftAction_1_0(),
            $current);
    }
)


this_SKW_ANDAND_2=RULE_SKW_ANDAND
    { 
    newLeafNode(this_SKW_ANDAND_2, grammarAccess.getLogicalAndExpressionAccess().getSKW_ANDANDTerminalRuleCall_1_1()); 
    }



(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getRightInclusiveOrExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleInclusiveOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalAndExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"at.jku.weiner.c.common.Common.InclusiveOrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)

)*

)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleInclusiveOrExpression
entryRuleInclusiveOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInclusiveOrExpressionRule()); }
	 iv_ruleInclusiveOrExpression=ruleInclusiveOrExpression 
	 { $current=$iv_ruleInclusiveOrExpression.current; } 
	 EOF 
;

// Rule InclusiveOrExpression
ruleInclusiveOrExpression returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(

    { 
        newCompositeNode(grammarAccess.getInclusiveOrExpressionAccess().getExclusiveOrExpressionParserRuleCall_0()); 
    }
    this_ExclusiveOrExpression_0=ruleExclusiveOrExpression
    { 
        $current = $this_ExclusiveOrExpression_0.current; 
        afterParserOrEnumRuleCall();
    }



(
(
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getInclusiveOrExpressionAccess().getInclusiveOrExpressionLeftAction_1_0(),
            $current);
    }
)


this_SKW_OR_2=RULE_SKW_OR
    { 
    newLeafNode(this_SKW_OR_2, grammarAccess.getInclusiveOrExpressionAccess().getSKW_ORTerminalRuleCall_1_1()); 
    }



(
(
		{ 
	        newCompositeNode(grammarAccess.getInclusiveOrExpressionAccess().getRightExclusiveOrExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleExclusiveOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInclusiveOrExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"at.jku.weiner.c.common.Common.ExclusiveOrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)

)*

)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleExclusiveOrExpression
entryRuleExclusiveOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExclusiveOrExpressionRule()); }
	 iv_ruleExclusiveOrExpression=ruleExclusiveOrExpression 
	 { $current=$iv_ruleExclusiveOrExpression.current; } 
	 EOF 
;

// Rule ExclusiveOrExpression
ruleExclusiveOrExpression returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(

    { 
        newCompositeNode(grammarAccess.getExclusiveOrExpressionAccess().getAndExpressionParserRuleCall_0()); 
    }
    this_AndExpression_0=ruleAndExpression
    { 
        $current = $this_AndExpression_0.current; 
        afterParserOrEnumRuleCall();
    }



(
(
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExclusiveOrExpressionAccess().getExclusiveOrExpressionLeftAction_1_0(),
            $current);
    }
)


this_SKW_CARET_2=RULE_SKW_CARET
    { 
    newLeafNode(this_SKW_CARET_2, grammarAccess.getExclusiveOrExpressionAccess().getSKW_CARETTerminalRuleCall_1_1()); 
    }



(
(
		{ 
	        newCompositeNode(grammarAccess.getExclusiveOrExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExclusiveOrExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"at.jku.weiner.c.common.Common.AndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)

)*

)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	 iv_ruleAndExpression=ruleAndExpression 
	 { $current=$iv_ruleAndExpression.current; } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(

    { 
        newCompositeNode(grammarAccess.getAndExpressionAccess().getEqualityExpressionParserRuleCall_0()); 
    }
    this_EqualityExpression_0=ruleEqualityExpression
    { 
        $current = $this_EqualityExpression_0.current; 
        afterParserOrEnumRuleCall();
    }



(
(
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0(),
            $current);
    }
)


this_SKW_AND_2=RULE_SKW_AND
    { 
    newLeafNode(this_SKW_AND_2, grammarAccess.getAndExpressionAccess().getSKW_ANDTerminalRuleCall_1_1()); 
    }



(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExpressionAccess().getRightEqualityExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleEqualityExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"at.jku.weiner.c.common.Common.EqualityExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)

)*

)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEqualityExpressionRule()); }
	 iv_ruleEqualityExpression=ruleEqualityExpression 
	 { $current=$iv_ruleEqualityExpression.current; } 
	 EOF 
;

// Rule EqualityExpression
ruleEqualityExpression returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(

    { 
        newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
    }
    this_RelationalExpression_0=ruleRelationalExpression
    { 
        $current = $this_RelationalExpression_0.current; 
        afterParserOrEnumRuleCall();
    }



(
(
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLeftAction_1_0(),
            $current);
    }
)


(
(
(
		lv_op_2_0=RULE_SKW_EQUAL
		{
			newLeafNode(lv_op_2_0, grammarAccess.getEqualityExpressionAccess().getOpSKW_EQUALTerminalRuleCall_1_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEqualityExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"at.jku.weiner.c.common.Common.SKW_EQUAL");
	    }

)
)


    |
(
(
		lv_op_3_0=RULE_SKW_NOTEQUAL
		{
			newLeafNode(lv_op_3_0, grammarAccess.getEqualityExpressionAccess().getOpSKW_NOTEQUALTerminalRuleCall_1_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEqualityExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_3_0, 
        		"at.jku.weiner.c.common.Common.SKW_NOTEQUAL");
	    }

)
)

)


(
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRightRelationalExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_4_0=ruleRelationalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_4_0, 
        		"at.jku.weiner.c.common.Common.RelationalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)

)*

)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationalExpressionRule()); }
	 iv_ruleRelationalExpression=ruleRelationalExpression 
	 { $current=$iv_ruleRelationalExpression.current; } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(

    { 
        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0()); 
    }
    this_ShiftExpression_0=ruleShiftExpression
    { 
        $current = $this_ShiftExpression_0.current; 
        afterParserOrEnumRuleCall();
    }



(
(
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLeftAction_1_0(),
            $current);
    }
)


(
(
(
		lv_op_2_0=RULE_SKW_LESS
		{
			newLeafNode(lv_op_2_0, grammarAccess.getRelationalExpressionAccess().getOpSKW_LESSTerminalRuleCall_1_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"at.jku.weiner.c.common.Common.SKW_LESS");
	    }

)
)


    |
(
(
		lv_op_3_0=RULE_SKW_GREATER
		{
			newLeafNode(lv_op_3_0, grammarAccess.getRelationalExpressionAccess().getOpSKW_GREATERTerminalRuleCall_1_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_3_0, 
        		"at.jku.weiner.c.common.Common.SKW_GREATER");
	    }

)
)


    |
(
(
		lv_op_4_0=RULE_SKW_LESSEQUAL
		{
			newLeafNode(lv_op_4_0, grammarAccess.getRelationalExpressionAccess().getOpSKW_LESSEQUALTerminalRuleCall_1_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_4_0, 
        		"at.jku.weiner.c.common.Common.SKW_LESSEQUAL");
	    }

)
)


    |
(
(
		lv_op_5_0=RULE_SKW_GREATEREQUAL
		{
			newLeafNode(lv_op_5_0, grammarAccess.getRelationalExpressionAccess().getOpSKW_GREATEREQUALTerminalRuleCall_1_1_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_5_0, 
        		"at.jku.weiner.c.common.Common.SKW_GREATEREQUAL");
	    }

)
)

)


(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRightShiftExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_6_0=ruleShiftExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_6_0, 
        		"at.jku.weiner.c.common.Common.ShiftExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)

)*

)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleShiftExpression
entryRuleShiftExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getShiftExpressionRule()); }
	 iv_ruleShiftExpression=ruleShiftExpression 
	 { $current=$iv_ruleShiftExpression.current; } 
	 EOF 
;

// Rule ShiftExpression
ruleShiftExpression returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(

    { 
        newCompositeNode(grammarAccess.getShiftExpressionAccess().getAdditiveExpressionParserRuleCall_0()); 
    }
    this_AdditiveExpression_0=ruleAdditiveExpression
    { 
        $current = $this_AdditiveExpression_0.current; 
        afterParserOrEnumRuleCall();
    }



(
(
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getShiftExpressionAccess().getShiftExpressionLeftAction_1_0(),
            $current);
    }
)


(
(
(
		lv_op_2_0=RULE_SKW_LEFTSHIFT
		{
			newLeafNode(lv_op_2_0, grammarAccess.getShiftExpressionAccess().getOpSKW_LEFTSHIFTTerminalRuleCall_1_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getShiftExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"at.jku.weiner.c.common.Common.SKW_LEFTSHIFT");
	    }

)
)


    |
(
(
		lv_op_3_0=RULE_SKW_RIGHTSHIFT
		{
			newLeafNode(lv_op_3_0, grammarAccess.getShiftExpressionAccess().getOpSKW_RIGHTSHIFTTerminalRuleCall_1_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getShiftExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_3_0, 
        		"at.jku.weiner.c.common.Common.SKW_RIGHTSHIFT");
	    }

)
)

)


(
(
		{ 
	        newCompositeNode(grammarAccess.getShiftExpressionAccess().getRightAdditiveExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_4_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShiftExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_4_0, 
        		"at.jku.weiner.c.common.Common.AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)

)*

)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditiveExpressionRule()); }
	 iv_ruleAdditiveExpression=ruleAdditiveExpression 
	 { $current=$iv_ruleAdditiveExpression.current; } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(

    { 
        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); 
    }
    this_MultiplicativeExpression_0=ruleMultiplicativeExpression
    { 
        $current = $this_MultiplicativeExpression_0.current; 
        afterParserOrEnumRuleCall();
    }



(
(
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftAction_1_0(),
            $current);
    }
)


(
(
(
		lv_op_2_0=RULE_SKW_PLUS
		{
			newLeafNode(lv_op_2_0, grammarAccess.getAdditiveExpressionAccess().getOpSKW_PLUSTerminalRuleCall_1_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAdditiveExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"at.jku.weiner.c.common.Common.SKW_PLUS");
	    }

)
)


    |
(
(
		lv_op_3_0=RULE_SKW_MINUS
		{
			newLeafNode(lv_op_3_0, grammarAccess.getAdditiveExpressionAccess().getOpSKW_MINUSTerminalRuleCall_1_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAdditiveExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_3_0, 
        		"at.jku.weiner.c.common.Common.SKW_MINUS");
	    }

)
)

)


(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getRightMultiplicativeExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_4_0=ruleMultiplicativeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_4_0, 
        		"at.jku.weiner.c.common.Common.MultiplicativeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)

)*

)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicativeExpressionRule()); }
	 iv_ruleMultiplicativeExpression=ruleMultiplicativeExpression 
	 { $current=$iv_ruleMultiplicativeExpression.current; } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(

    { 
        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getCastExpressionParserRuleCall_0()); 
    }
    this_CastExpression_0=ruleCastExpression
    { 
        $current = $this_CastExpression_0.current; 
        afterParserOrEnumRuleCall();
    }



(
(
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftAction_1_0(),
            $current);
    }
)


(
(
(
		lv_op_2_0=RULE_SKW_STAR
		{
			newLeafNode(lv_op_2_0, grammarAccess.getMultiplicativeExpressionAccess().getOpSKW_STARTerminalRuleCall_1_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"at.jku.weiner.c.common.Common.SKW_STAR");
	    }

)
)


    |
(
(
		lv_op_3_0=RULE_SKW_DIV
		{
			newLeafNode(lv_op_3_0, grammarAccess.getMultiplicativeExpressionAccess().getOpSKW_DIVTerminalRuleCall_1_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_3_0, 
        		"at.jku.weiner.c.common.Common.SKW_DIV");
	    }

)
)


    |
(
(
		lv_op_4_0=RULE_SKW_MOD
		{
			newLeafNode(lv_op_4_0, grammarAccess.getMultiplicativeExpressionAccess().getOpSKW_MODTerminalRuleCall_1_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_4_0, 
        		"at.jku.weiner.c.common.Common.SKW_MOD");
	    }

)
)

)


(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getRightCastExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_5_0=ruleCastExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_5_0, 
        		"at.jku.weiner.c.common.Common.CastExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)

)*

)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleCastExpression
entryRuleCastExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCastExpressionRule()); }
	 iv_ruleCastExpression=ruleCastExpression 
	 { $current=$iv_ruleCastExpression.current; } 
	 EOF 
;

// Rule CastExpression
ruleCastExpression returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:


    { 
        newCompositeNode(grammarAccess.getCastExpressionAccess().getUnaryExpressionParserRuleCall()); 
    }
    this_UnaryExpression_0=ruleUnaryExpression
    { 
        $current = $this_UnaryExpression_0.current; 
        afterParserOrEnumRuleCall();
    }



;
finally {

	/*no after found*/

}





// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryExpressionRule()); }
	 iv_ruleUnaryExpression=ruleUnaryExpression 
	 { $current=$iv_ruleUnaryExpression.current; } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(

    { 
        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getPostfixExpressionParserRuleCall_0()); 
    }
    this_PostfixExpression_0=rulePostfixExpression
    { 
        $current = $this_PostfixExpression_0.current; 
        afterParserOrEnumRuleCall();
    }



    |
(
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnaryExpressionAccess().getUnaryExpressionAction_1_0(),
            $current);
    }
)


(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getOpUnaryOperatorParserRuleCall_1_1_0()); 
	    }
		lv_op_2_0=ruleUnaryOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"at.jku.weiner.c.common.Common.UnaryOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)


(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getExprCastExpressionParserRuleCall_1_2_0()); 
	    }
		lv_expr_3_0=ruleCastExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_3_0, 
        		"at.jku.weiner.c.common.Common.CastExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)

)

)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleUnaryOperator
entryRuleUnaryOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryOperatorRule()); } 
	 iv_ruleUnaryOperator=ruleUnaryOperator 
	 { $current=$iv_ruleUnaryOperator.current.getText(); }  
	 EOF 
;

// Rule UnaryOperator
ruleUnaryOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_SKW_AND_0=RULE_SKW_AND    {
		$current.merge(this_SKW_AND_0);
    }

    { 
    newLeafNode(this_SKW_AND_0, grammarAccess.getUnaryOperatorAccess().getSKW_ANDTerminalRuleCall_0()); 
    }

    |    this_SKW_STAR_1=RULE_SKW_STAR    {
		$current.merge(this_SKW_STAR_1);
    }

    { 
    newLeafNode(this_SKW_STAR_1, grammarAccess.getUnaryOperatorAccess().getSKW_STARTerminalRuleCall_1()); 
    }

    |    this_SKW_PLUS_2=RULE_SKW_PLUS    {
		$current.merge(this_SKW_PLUS_2);
    }

    { 
    newLeafNode(this_SKW_PLUS_2, grammarAccess.getUnaryOperatorAccess().getSKW_PLUSTerminalRuleCall_2()); 
    }

    |    this_SKW_MINUS_3=RULE_SKW_MINUS    {
		$current.merge(this_SKW_MINUS_3);
    }

    { 
    newLeafNode(this_SKW_MINUS_3, grammarAccess.getUnaryOperatorAccess().getSKW_MINUSTerminalRuleCall_3()); 
    }

    |    this_SKW_TILDE_4=RULE_SKW_TILDE    {
		$current.merge(this_SKW_TILDE_4);
    }

    { 
    newLeafNode(this_SKW_TILDE_4, grammarAccess.getUnaryOperatorAccess().getSKW_TILDETerminalRuleCall_4()); 
    }

    |    this_SKW_NOT_5=RULE_SKW_NOT    {
		$current.merge(this_SKW_NOT_5);
    }

    { 
    newLeafNode(this_SKW_NOT_5, grammarAccess.getUnaryOperatorAccess().getSKW_NOTTerminalRuleCall_5()); 
    }
)
    ;





// Entry rule entryRulePostfixExpression
entryRulePostfixExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPostfixExpressionRule()); }
	 iv_rulePostfixExpression=rulePostfixExpression 
	 { $current=$iv_rulePostfixExpression.current; } 
	 EOF 
;

// Rule PostfixExpression
rulePostfixExpression returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(

    { 
        newCompositeNode(grammarAccess.getPostfixExpressionAccess().getPrimaryExpressionParserRuleCall_0()); 
    }
    this_PrimaryExpression_0=rulePrimaryExpression
    { 
        $current = $this_PrimaryExpression_0.current; 
        afterParserOrEnumRuleCall();
    }



(
(
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPostfixExpressionAccess().getPostfixExpressionExprAction_1_0(),
            $current);
    }
)


(
(
		{ 
	        newCompositeNode(grammarAccess.getPostfixExpressionAccess().getSuffixPostfixExpressionSuffixArgumentParserRuleCall_1_1_0()); 
	    }
		lv_suffix_2_0=rulePostfixExpressionSuffixArgument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPostfixExpressionRule());
	        }
       		set(
       			$current, 
       			"suffix",
        		lv_suffix_2_0, 
        		"at.jku.weiner.c.common.Common.PostfixExpressionSuffixArgument");
	        afterParserOrEnumRuleCall();
	    }

)
)

)*

)


;
finally {

	/*no after found*/

}





// Entry rule entryRulePostfixExpressionSuffixArgument
entryRulePostfixExpressionSuffixArgument returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPostfixExpressionSuffixArgumentRule()); }
	 iv_rulePostfixExpressionSuffixArgument=rulePostfixExpressionSuffixArgument 
	 { $current=$iv_rulePostfixExpressionSuffixArgument.current; } 
	 EOF 
;

// Rule PostfixExpressionSuffixArgument
rulePostfixExpressionSuffixArgument returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getPostfixExpressionSuffixArgumentAccess().getPostfixExpressionSuffixArgumentAction_0(),
            $current);
    }
)


this_SKW_LEFTPAREN_1=RULE_SKW_LEFTPAREN
    { 
    newLeafNode(this_SKW_LEFTPAREN_1, grammarAccess.getPostfixExpressionSuffixArgumentAccess().getSKW_LEFTPARENTerminalRuleCall_1()); 
    }



(
(
		{ 
	        newCompositeNode(grammarAccess.getPostfixExpressionSuffixArgumentAccess().getArgumentExpressionListArgumentExpressionListParserRuleCall_2_0()); 
	    }
		lv_argumentExpressionList_2_0=ruleArgumentExpressionList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPostfixExpressionSuffixArgumentRule());
	        }
       		set(
       			$current, 
       			"argumentExpressionList",
        		lv_argumentExpressionList_2_0, 
        		"at.jku.weiner.c.common.Common.ArgumentExpressionList");
	        afterParserOrEnumRuleCall();
	    }

)
)?


this_SKW_RIGHTPAREN_3=RULE_SKW_RIGHTPAREN
    { 
    newLeafNode(this_SKW_RIGHTPAREN_3, grammarAccess.getPostfixExpressionSuffixArgumentAccess().getSKW_RIGHTPARENTerminalRuleCall_3()); 
    }


)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleArgumentExpressionList
entryRuleArgumentExpressionList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgumentExpressionListRule()); }
	 iv_ruleArgumentExpressionList=ruleArgumentExpressionList 
	 { $current=$iv_ruleArgumentExpressionList.current; } 
	 EOF 
;

// Rule ArgumentExpressionList
ruleArgumentExpressionList returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(
(
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentExpressionListAccess().getExprConditionalExpressionParserRuleCall_0_0()); 
	    }
		lv_expr_0_0=ruleConditionalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentExpressionListRule());
	        }
       		add(
       			$current, 
       			"expr",
        		lv_expr_0_0, 
        		"at.jku.weiner.c.common.Common.ConditionalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)


(
this_SKW_COMMA_1=RULE_SKW_COMMA
    { 
    newLeafNode(this_SKW_COMMA_1, grammarAccess.getArgumentExpressionListAccess().getSKW_COMMATerminalRuleCall_1_0()); 
    }



(
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentExpressionListAccess().getExprConditionalExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expr_2_0=ruleConditionalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentExpressionListRule());
	        }
       		add(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"at.jku.weiner.c.common.Common.ConditionalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)

)*

)


;
finally {

	/*no after found*/

}





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryExpressionAccess().getPrimaryExpressionAction_0(),
            $current);
    }
)


(
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getConstConstant1ParserRuleCall_1_0_0()); 
	    }
		lv_const_1_0=ruleConstant1		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"const",
        		lv_const_1_0, 
        		"at.jku.weiner.c.common.Common.Constant1");
	        afterParserOrEnumRuleCall();
	    }

)
)


    |
(
(
		lv_ident_2_0=RULE_ID
		{
			newLeafNode(lv_ident_2_0, grammarAccess.getPrimaryExpressionAccess().getIdentIDTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ident",
        		lv_ident_2_0, 
        		"at.jku.weiner.c.common.Common.ID");
	    }

)
)


    |
(
(
(
		lv_parentheses_3_0=RULE_SKW_LEFTPAREN
		{
			newLeafNode(lv_parentheses_3_0, grammarAccess.getPrimaryExpressionAccess().getParenthesesSKW_LEFTPARENTerminalRuleCall_1_2_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"parentheses",
        		true, 
        		"at.jku.weiner.c.common.Common.SKW_LEFTPAREN");
	    }

)
)


(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getExprExpressionParserRuleCall_1_2_1_0()); 
	    }
		lv_expr_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_4_0, 
        		"at.jku.weiner.c.common.Common.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)


this_SKW_RIGHTPAREN_5=RULE_SKW_RIGHTPAREN
    { 
    newLeafNode(this_SKW_RIGHTPAREN_5, grammarAccess.getPrimaryExpressionAccess().getSKW_RIGHTPARENTerminalRuleCall_1_2_2()); 
    }


)

)

)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleConstant1
entryRuleConstant1 returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstant1Rule()); } 
	 iv_ruleConstant1=ruleConstant1 
	 { $current=$iv_ruleConstant1.current.getText(); }  
	 EOF 
;

// Rule Constant1
ruleConstant1 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getConstant1Access().getHexLiteralParserRuleCall_0()); 
    }
    this_HexLiteral_0=ruleHexLiteral    {
		$current.merge(this_HexLiteral_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConstant1Access().getOctalLiteralParserRuleCall_1()); 
    }
    this_OctalLiteral_1=ruleOctalLiteral    {
		$current.merge(this_OctalLiteral_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConstant1Access().getDecimalLiteralParserRuleCall_2()); 
    }
    this_DecimalLiteral_2=ruleDecimalLiteral    {
		$current.merge(this_DecimalLiteral_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConstant1Access().getCharLiteralParserRuleCall_3()); 
    }
    this_CharLiteral_3=ruleCharLiteral    {
		$current.merge(this_CharLiteral_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConstant1Access().getStringLiteralParserRuleCall_4()); 
    }
    this_StringLiteral_4=ruleStringLiteral    {
		$current.merge(this_StringLiteral_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConstant1Access().getFloatLiteralParserRuleCall_5()); 
    }
    this_FloatLiteral_5=ruleFloatLiteral    {
		$current.merge(this_FloatLiteral_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConstant1Access().getBinLiteralParserRuleCall_6()); 
    }
    this_BinLiteral_6=ruleBinLiteral    {
		$current.merge(this_BinLiteral_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;











// Entry rule entryRuleHexLiteral
entryRuleHexLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getHexLiteralRule()); } 
	 iv_ruleHexLiteral=ruleHexLiteral 
	 { $current=$iv_ruleHexLiteral.current.getText(); }  
	 EOF 
;

// Rule HexLiteral
ruleHexLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_HEX_LITERAL_0=RULE_HEX_LITERAL    {
		$current.merge(this_HEX_LITERAL_0);
    }

    { 
    newLeafNode(this_HEX_LITERAL_0, grammarAccess.getHexLiteralAccess().getHEX_LITERALTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleOctalLiteral
entryRuleOctalLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOctalLiteralRule()); } 
	 iv_ruleOctalLiteral=ruleOctalLiteral 
	 { $current=$iv_ruleOctalLiteral.current.getText(); }  
	 EOF 
;

// Rule OctalLiteral
ruleOctalLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_OCTAL_LITERAL_0=RULE_OCTAL_LITERAL    {
		$current.merge(this_OCTAL_LITERAL_0);
    }

    { 
    newLeafNode(this_OCTAL_LITERAL_0, grammarAccess.getOctalLiteralAccess().getOCTAL_LITERALTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleDecimalLiteral
entryRuleDecimalLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDecimalLiteralRule()); } 
	 iv_ruleDecimalLiteral=ruleDecimalLiteral 
	 { $current=$iv_ruleDecimalLiteral.current.getText(); }  
	 EOF 
;

// Rule DecimalLiteral
ruleDecimalLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_DECIMAL_LITERAL_0=RULE_DECIMAL_LITERAL    {
		$current.merge(this_DECIMAL_LITERAL_0);
    }

    { 
    newLeafNode(this_DECIMAL_LITERAL_0, grammarAccess.getDecimalLiteralAccess().getDECIMAL_LITERALTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleCharLiteral
entryRuleCharLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCharLiteralRule()); } 
	 iv_ruleCharLiteral=ruleCharLiteral 
	 { $current=$iv_ruleCharLiteral.current.getText(); }  
	 EOF 
;

// Rule CharLiteral
ruleCharLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_CHAR_LITERAL_0=RULE_CHAR_LITERAL    {
		$current.merge(this_CHAR_LITERAL_0);
    }

    { 
    newLeafNode(this_CHAR_LITERAL_0, grammarAccess.getCharLiteralAccess().getCHAR_LITERALTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); } 
	 iv_ruleStringLiteral=ruleStringLiteral 
	 { $current=$iv_ruleStringLiteral.current.getText(); }  
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_STRING_LITERAL_0=RULE_STRING_LITERAL    {
		$current.merge(this_STRING_LITERAL_0);
    }

    { 
    newLeafNode(this_STRING_LITERAL_0, grammarAccess.getStringLiteralAccess().getSTRING_LITERALTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleFloatLiteral
entryRuleFloatLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFloatLiteralRule()); } 
	 iv_ruleFloatLiteral=ruleFloatLiteral 
	 { $current=$iv_ruleFloatLiteral.current.getText(); }  
	 EOF 
;

// Rule FloatLiteral
ruleFloatLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_FLOAT_LITERAL_0=RULE_FLOAT_LITERAL    {
		$current.merge(this_FLOAT_LITERAL_0);
    }

    { 
    newLeafNode(this_FLOAT_LITERAL_0, grammarAccess.getFloatLiteralAccess().getFLOAT_LITERALTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleBinLiteral
entryRuleBinLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBinLiteralRule()); } 
	 iv_ruleBinLiteral=ruleBinLiteral 
	 { $current=$iv_ruleBinLiteral.current.getText(); }  
	 EOF 
;

// Rule BinLiteral
ruleBinLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_BIN_LITERAL_0=RULE_BIN_LITERAL    {
		$current.merge(this_BIN_LITERAL_0);
    }

    { 
    newLeafNode(this_BIN_LITERAL_0, grammarAccess.getBinLiteralAccess().getBIN_LITERALTerminalRuleCall()); 
    }

    ;





RULE_SKW_AND : '&';

RULE_SKW_ANDAND : RULE_SKW_AND RULE_SKW_AND;

RULE_SKW_ASSIGN : '=';

RULE_SKW_BACKSLASH : '\\';

RULE_SKW_CARET : '^';

RULE_SKW_COMMA : ',';

RULE_SKW_COLON : ':';

RULE_SKW_DIV : '/';

fragment RULE_SKW_DOLLAR : '$';

RULE_SKW_DOT : '.';

RULE_SKW_DOUBLEQUOTE : '"';

RULE_SKW_EQUAL : RULE_SKW_ASSIGN RULE_SKW_ASSIGN;

RULE_SKW_GREATER : '>';

RULE_SKW_GREATEREQUAL : RULE_SKW_GREATER RULE_SKW_ASSIGN;

RULE_SKW_LEFTBRACE : '{';

RULE_SKW_LEFTBRACKET : '[';

RULE_SKW_LEFTPAREN : '(';

RULE_SKW_LEFTSHIFT : RULE_SKW_LESS RULE_SKW_LESS;

RULE_SKW_LESS : '<';

RULE_SKW_LESSEQUAL : RULE_SKW_LESS RULE_SKW_ASSIGN;

RULE_SKW_MINUS : '-';

RULE_SKW_MINUSMINUS : RULE_SKW_MINUS RULE_SKW_MINUS;

RULE_SKW_MOD : '%';

RULE_SKW_NOT : '!';

RULE_SKW_NOTEQUAL : RULE_SKW_NOT RULE_SKW_ASSIGN;

RULE_SKW_OR : '|';

RULE_SKW_OROR : RULE_SKW_OR RULE_SKW_OR;

RULE_SKW_PLUS : '+';

RULE_SKW_PLUSPLUS : RULE_SKW_PLUS RULE_SKW_PLUS;

RULE_SKW_QUESTION : '?';

RULE_SKW_RIGHTBRACE : '}';

RULE_SKW_RIGHTBRACKET : ']';

RULE_SKW_RIGHTPAREN : ')';

RULE_SKW_RIGHTSHIFT : RULE_SKW_GREATER RULE_SKW_GREATER;

RULE_SKW_SEMI : ';';

RULE_SKW_SINGLEQUOTE : '\'';

RULE_SKW_STAR : '*';

RULE_SKW_TILDE : '~';

fragment RULE_SKW_UNDERSCORE : '_';

RULE_ID : RULE_IDENTIFIER;

fragment RULE_IDENTIFIER : RULE_LETTER (RULE_LETTER|'0'..'9')*;

fragment RULE_LETTER : (RULE_SKW_DOLLAR|'A'..'Z'|'a'..'z'|RULE_SKW_UNDERSCORE);

RULE_CHAR_LITERAL : 'L'? RULE_SKW_SINGLEQUOTE (RULE_ESCAPE_SEQUENCE|~((RULE_SKW_SINGLEQUOTE|RULE_SKW_BACKSLASH))|RULE_LINEBREAK) RULE_SKW_SINGLEQUOTE;

RULE_STRING_LITERAL : RULE_SKW_DOUBLEQUOTE (RULE_ESCAPE_SEQUENCE|~((RULE_SKW_BACKSLASH|RULE_SKW_DOUBLEQUOTE))|RULE_LINEBREAK)* RULE_SKW_DOUBLEQUOTE;

RULE_HEX_LITERAL : RULE_HEX_PREFIX RULE_HEX_DIGIT+ RULE_INTEGER_TYPE_SUFFIX?;

fragment RULE_HEX_PREFIX : ('0x'|'0X');

RULE_DECIMAL_LITERAL : ('0'|'1'..'9' ('0'..'9')*) RULE_INTEGER_TYPE_SUFFIX?;

RULE_OCTAL_LITERAL : '0' ('0'..'7')+ RULE_INTEGER_TYPE_SUFFIX?;

RULE_BIN_LITERAL : ('0b'|'0B') ('0'..'1')+;

fragment RULE_HEX_DIGIT : ('0'..'9'|'a'..'f'|'A'..'F');

fragment RULE_INTEGER_TYPE_SUFFIX : (RULE_UNSIGNED_SUFFIX RULE_LONG_SUFFIX?|RULE_UNSIGNED_SUFFIX RULE_LONG_LONG_SUFFIX|RULE_LONG_SUFFIX RULE_UNSIGNED_SUFFIX?|RULE_LONG_LONG_SUFFIX RULE_UNSIGNED_SUFFIX?);

fragment RULE_UNSIGNED_SUFFIX : ('u'|'U');

fragment RULE_LONG_SUFFIX : ('l'|'L');

fragment RULE_LONG_LONG_SUFFIX : ('ll'|'LL');

RULE_FLOAT_LITERAL : (('0'..'9')+ RULE_SKW_DOT ('0'..'9')* RULE_EXPONENT? RULE_FLOAT_TYPE_SUFFIX?|RULE_SKW_DOT ('0'..'9')+ RULE_EXPONENT? RULE_FLOAT_TYPE_SUFFIX?|('0'..'9')+ RULE_EXPONENT RULE_FLOAT_TYPE_SUFFIX?|('0'..'9')+ RULE_EXPONENT? RULE_FLOAT_TYPE_SUFFIX);

fragment RULE_EXPONENT : ('e'|'E') ('+'|'-')? ('0'..'9')+;

fragment RULE_FLOAT_TYPE_SUFFIX : ('f'|'F'|'d'|'D');

fragment RULE_ESCAPE_SEQUENCE : (RULE_SKW_BACKSLASH ('b'|'t'|'n'|'f'|'r'|'"'|RULE_SKW_SINGLEQUOTE|RULE_SKW_BACKSLASH)|RULE_OCTAL_ESCAPE|RULE_HEX_ESCAPE);

fragment RULE_OCTAL_ESCAPE : (RULE_SKW_BACKSLASH '0'..'3' '0'..'7' '0'..'7'|RULE_SKW_BACKSLASH '0'..'7' '0'..'7'|RULE_SKW_BACKSLASH '0'..'7');

fragment RULE_HEX_ESCAPE : RULE_SKW_BACKSLASH 'x' RULE_HEX_DIGIT+;

fragment RULE_LINEFEED : '\n';

fragment RULE_CARRIAGERETURN : '\r';

fragment RULE_LINE_END : (RULE_CARRIAGERETURN|RULE_LINEFEED);

fragment RULE_LINEBREAK : RULE_SKW_BACKSLASH RULE_LINE_END;

RULE_NEWLINE : RULE_LINE_END;

fragment RULE_SPACE : ' ';

fragment RULE_TAB : '\t';

RULE_WHITESPACE : (RULE_SPACE|RULE_TAB);

fragment RULE_BLOCK_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

fragment RULE_LINE_COMMENT : '//' ~(RULE_LINE_END)*;

fragment RULE_FORM_FEED : '\f';

RULE_IGNORED : (RULE_LINEBREAK|RULE_BLOCK_COMMENT|RULE_LINE_COMMENT|RULE_FORM_FEED);

RULE_SPECIAL : .;


