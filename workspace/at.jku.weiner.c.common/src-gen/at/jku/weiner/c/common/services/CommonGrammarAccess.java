/*
 * generated by Xtext 2.9.0-SNAPSHOT
 */
package at.jku.weiner.c.common.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractParserRuleElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CommonGrammarAccess extends AbstractGrammarElementFinder {
	
	public class CommonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.Common");
		private final Action cCommonAction = (Action)rule.eContents().get(1);
		
		//Common:
		//	{Common};
		@Override public ParserRule getRule() { return rule; }
		
		//{Common}
		public Action getCommonAction() { return cCommonAction; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionConditionalExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//Expression hidden(WHITESPACE, BLOCK_COMMENT, LINE_COMMENT, LINEBREAK):
		//	{Expression} expression=ConditionalExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{Expression} expression=ConditionalExpression
		public Group getGroup() { return cGroup; }
		
		//{Expression}
		public Action getExpressionAction_0() { return cExpressionAction_0; }
		
		//expression=ConditionalExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//ConditionalExpression
		public RuleCall getExpressionConditionalExpressionParserRuleCall_1_0() { return cExpressionConditionalExpressionParserRuleCall_1_0; }
	}
	public class ConstantExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.ConstantExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstantExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprConditionalExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//ConstantExpression Expression hidden(WHITESPACE, BLOCK_COMMENT, LINE_COMMENT, LINEBREAK):
		//	{ConstantExpression} expr=ConditionalExpression
		@Override public ParserRule getRule() { return rule; }
		
		//{ConstantExpression} expr=ConditionalExpression
		public Group getGroup() { return cGroup; }
		
		//{ConstantExpression}
		public Action getConstantExpressionAction_0() { return cConstantExpressionAction_0; }
		
		//expr=ConditionalExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//ConditionalExpression
		public RuleCall getExprConditionalExpressionParserRuleCall_1_0() { return cExprConditionalExpressionParserRuleCall_1_0; }
	}
	public class ConditionalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.ConditionalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConditionalExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprLogicalOrExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cSKW_QUESTIONTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cQExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cQExprExpressionParserRuleCall_2_1_0 = (RuleCall)cQExprAssignment_2_1.eContents().get(0);
		private final RuleCall cSKW_COLONTerminalRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Assignment cCExprAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cCExprConditionalExpressionParserRuleCall_2_3_0 = (RuleCall)cCExprAssignment_2_3.eContents().get(0);
		
		//ConditionalExpression Expression:
		//	{ConditionalExpression} expr=LogicalOrExpression (SKW_QUESTION qExpr=Expression SKW_COLON
		//	cExpr=ConditionalExpression)?
		@Override public ParserRule getRule() { return rule; }
		
		//{ConditionalExpression} expr=LogicalOrExpression (SKW_QUESTION qExpr=Expression SKW_COLON cExpr=ConditionalExpression)?
		public Group getGroup() { return cGroup; }
		
		//{ConditionalExpression}
		public Action getConditionalExpressionAction_0() { return cConditionalExpressionAction_0; }
		
		//expr=LogicalOrExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//LogicalOrExpression
		public RuleCall getExprLogicalOrExpressionParserRuleCall_1_0() { return cExprLogicalOrExpressionParserRuleCall_1_0; }
		
		//(SKW_QUESTION qExpr=Expression SKW_COLON cExpr=ConditionalExpression)?
		public Group getGroup_2() { return cGroup_2; }
		
		//SKW_QUESTION
		public RuleCall getSKW_QUESTIONTerminalRuleCall_2_0() { return cSKW_QUESTIONTerminalRuleCall_2_0; }
		
		//qExpr=Expression
		public Assignment getQExprAssignment_2_1() { return cQExprAssignment_2_1; }
		
		//Expression
		public RuleCall getQExprExpressionParserRuleCall_2_1_0() { return cQExprExpressionParserRuleCall_2_1_0; }
		
		//SKW_COLON
		public RuleCall getSKW_COLONTerminalRuleCall_2_2() { return cSKW_COLONTerminalRuleCall_2_2; }
		
		//cExpr=ConditionalExpression
		public Assignment getCExprAssignment_2_3() { return cCExprAssignment_2_3; }
		
		//ConditionalExpression
		public RuleCall getCExprConditionalExpressionParserRuleCall_2_3_0() { return cCExprConditionalExpressionParserRuleCall_2_3_0; }
	}
	public class LogicalOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.LogicalOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLogicalOrExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprLogicalAndExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cSKW_ORORTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprLogicalAndExpressionParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		
		//LogicalOrExpression Expression:
		//	{LogicalOrExpression} expr+=LogicalAndExpression (SKW_OROR expr+=LogicalAndExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//{LogicalOrExpression} expr+=LogicalAndExpression (SKW_OROR expr+=LogicalAndExpression)*
		public Group getGroup() { return cGroup; }
		
		//{LogicalOrExpression}
		public Action getLogicalOrExpressionAction_0() { return cLogicalOrExpressionAction_0; }
		
		//expr+=LogicalAndExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//LogicalAndExpression
		public RuleCall getExprLogicalAndExpressionParserRuleCall_1_0() { return cExprLogicalAndExpressionParserRuleCall_1_0; }
		
		//(SKW_OROR expr+=LogicalAndExpression)*
		public Group getGroup_2() { return cGroup_2; }
		
		//SKW_OROR
		public RuleCall getSKW_ORORTerminalRuleCall_2_0() { return cSKW_ORORTerminalRuleCall_2_0; }
		
		//expr+=LogicalAndExpression
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }
		
		//LogicalAndExpression
		public RuleCall getExprLogicalAndExpressionParserRuleCall_2_1_0() { return cExprLogicalAndExpressionParserRuleCall_2_1_0; }
	}
	public class LogicalAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.LogicalAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLogicalAndExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprInclusiveOrExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cSKW_ANDANDTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprInclusiveOrExpressionParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		
		//LogicalAndExpression Expression:
		//	{LogicalAndExpression} expr+=InclusiveOrExpression (SKW_ANDAND expr+=InclusiveOrExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//{LogicalAndExpression} expr+=InclusiveOrExpression (SKW_ANDAND expr+=InclusiveOrExpression)*
		public Group getGroup() { return cGroup; }
		
		//{LogicalAndExpression}
		public Action getLogicalAndExpressionAction_0() { return cLogicalAndExpressionAction_0; }
		
		//expr+=InclusiveOrExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//InclusiveOrExpression
		public RuleCall getExprInclusiveOrExpressionParserRuleCall_1_0() { return cExprInclusiveOrExpressionParserRuleCall_1_0; }
		
		//(SKW_ANDAND expr+=InclusiveOrExpression)*
		public Group getGroup_2() { return cGroup_2; }
		
		//SKW_ANDAND
		public RuleCall getSKW_ANDANDTerminalRuleCall_2_0() { return cSKW_ANDANDTerminalRuleCall_2_0; }
		
		//expr+=InclusiveOrExpression
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }
		
		//InclusiveOrExpression
		public RuleCall getExprInclusiveOrExpressionParserRuleCall_2_1_0() { return cExprInclusiveOrExpressionParserRuleCall_2_1_0; }
	}
	public class InclusiveOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.InclusiveOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInclusiveOrExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExclusiveOrExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cSKW_ORTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprExclusiveOrExpressionParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		
		//InclusiveOrExpression Expression:
		//	{InclusiveOrExpression} expr+=ExclusiveOrExpression (SKW_OR expr+=ExclusiveOrExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//{InclusiveOrExpression} expr+=ExclusiveOrExpression (SKW_OR expr+=ExclusiveOrExpression)*
		public Group getGroup() { return cGroup; }
		
		//{InclusiveOrExpression}
		public Action getInclusiveOrExpressionAction_0() { return cInclusiveOrExpressionAction_0; }
		
		//expr+=ExclusiveOrExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//ExclusiveOrExpression
		public RuleCall getExprExclusiveOrExpressionParserRuleCall_1_0() { return cExprExclusiveOrExpressionParserRuleCall_1_0; }
		
		//(SKW_OR expr+=ExclusiveOrExpression)*
		public Group getGroup_2() { return cGroup_2; }
		
		//SKW_OR
		public RuleCall getSKW_ORTerminalRuleCall_2_0() { return cSKW_ORTerminalRuleCall_2_0; }
		
		//expr+=ExclusiveOrExpression
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }
		
		//ExclusiveOrExpression
		public RuleCall getExprExclusiveOrExpressionParserRuleCall_2_1_0() { return cExprExclusiveOrExpressionParserRuleCall_2_1_0; }
	}
	public class ExclusiveOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.ExclusiveOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExclusiveOrExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprAndExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cSKW_CARETTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprAndExpressionParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		
		//ExclusiveOrExpression Expression:
		//	{ExclusiveOrExpression} expr+=AndExpression (SKW_CARET expr+=AndExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//{ExclusiveOrExpression} expr+=AndExpression (SKW_CARET expr+=AndExpression)*
		public Group getGroup() { return cGroup; }
		
		//{ExclusiveOrExpression}
		public Action getExclusiveOrExpressionAction_0() { return cExclusiveOrExpressionAction_0; }
		
		//expr+=AndExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//AndExpression
		public RuleCall getExprAndExpressionParserRuleCall_1_0() { return cExprAndExpressionParserRuleCall_1_0; }
		
		//(SKW_CARET expr+=AndExpression)*
		public Group getGroup_2() { return cGroup_2; }
		
		//SKW_CARET
		public RuleCall getSKW_CARETTerminalRuleCall_2_0() { return cSKW_CARETTerminalRuleCall_2_0; }
		
		//expr+=AndExpression
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }
		
		//AndExpression
		public RuleCall getExprAndExpressionParserRuleCall_2_1_0() { return cExprAndExpressionParserRuleCall_2_1_0; }
	}
	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAndExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprEqualityExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cSKW_ANDTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprEqualityExpressionParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		
		//AndExpression Expression:
		//	{AndExpression} expr+=EqualityExpression (SKW_AND expr+=EqualityExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//{AndExpression} expr+=EqualityExpression (SKW_AND expr+=EqualityExpression)*
		public Group getGroup() { return cGroup; }
		
		//{AndExpression}
		public Action getAndExpressionAction_0() { return cAndExpressionAction_0; }
		
		//expr+=EqualityExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//EqualityExpression
		public RuleCall getExprEqualityExpressionParserRuleCall_1_0() { return cExprEqualityExpressionParserRuleCall_1_0; }
		
		//(SKW_AND expr+=EqualityExpression)*
		public Group getGroup_2() { return cGroup_2; }
		
		//SKW_AND
		public RuleCall getSKW_ANDTerminalRuleCall_2_0() { return cSKW_ANDTerminalRuleCall_2_0; }
		
		//expr+=EqualityExpression
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }
		
		//EqualityExpression
		public RuleCall getExprEqualityExpressionParserRuleCall_2_1_0() { return cExprEqualityExpressionParserRuleCall_2_1_0; }
	}
	public class EqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.EqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEqualityExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprRelationalExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Assignment cOpAssignment_2_0_0 = (Assignment)cAlternatives_2_0.eContents().get(0);
		private final RuleCall cOpSKW_EQUALTerminalRuleCall_2_0_0_0 = (RuleCall)cOpAssignment_2_0_0.eContents().get(0);
		private final Assignment cOpAssignment_2_0_1 = (Assignment)cAlternatives_2_0.eContents().get(1);
		private final RuleCall cOpSKW_NOTEQUALTerminalRuleCall_2_0_1_0 = (RuleCall)cOpAssignment_2_0_1.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprRelationalExpressionParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		
		//EqualityExpression Expression:
		//	{EqualityExpression} expr+=RelationalExpression ((op+=SKW_EQUAL
		//	| op+=SKW_NOTEQUAL) expr+=RelationalExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//{EqualityExpression} expr+=RelationalExpression ((op+=SKW_EQUAL | op+=SKW_NOTEQUAL) expr+=RelationalExpression)*
		public Group getGroup() { return cGroup; }
		
		//{EqualityExpression}
		public Action getEqualityExpressionAction_0() { return cEqualityExpressionAction_0; }
		
		//expr+=RelationalExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//RelationalExpression
		public RuleCall getExprRelationalExpressionParserRuleCall_1_0() { return cExprRelationalExpressionParserRuleCall_1_0; }
		
		//((op+=SKW_EQUAL | op+=SKW_NOTEQUAL) expr+=RelationalExpression)*
		public Group getGroup_2() { return cGroup_2; }
		
		//(op+=SKW_EQUAL | op+=SKW_NOTEQUAL)
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//op+=SKW_EQUAL
		public Assignment getOpAssignment_2_0_0() { return cOpAssignment_2_0_0; }
		
		//SKW_EQUAL
		public RuleCall getOpSKW_EQUALTerminalRuleCall_2_0_0_0() { return cOpSKW_EQUALTerminalRuleCall_2_0_0_0; }
		
		//op+=SKW_NOTEQUAL
		public Assignment getOpAssignment_2_0_1() { return cOpAssignment_2_0_1; }
		
		//SKW_NOTEQUAL
		public RuleCall getOpSKW_NOTEQUALTerminalRuleCall_2_0_1_0() { return cOpSKW_NOTEQUALTerminalRuleCall_2_0_1_0; }
		
		//expr+=RelationalExpression
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }
		
		//RelationalExpression
		public RuleCall getExprRelationalExpressionParserRuleCall_2_1_0() { return cExprRelationalExpressionParserRuleCall_2_1_0; }
	}
	public class RelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.RelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRelationalExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprShiftExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Assignment cOpAssignment_2_0_0 = (Assignment)cAlternatives_2_0.eContents().get(0);
		private final RuleCall cOpSKW_LESSTerminalRuleCall_2_0_0_0 = (RuleCall)cOpAssignment_2_0_0.eContents().get(0);
		private final Assignment cOpAssignment_2_0_1 = (Assignment)cAlternatives_2_0.eContents().get(1);
		private final RuleCall cOpSKW_GREATERTerminalRuleCall_2_0_1_0 = (RuleCall)cOpAssignment_2_0_1.eContents().get(0);
		private final Assignment cOpAssignment_2_0_2 = (Assignment)cAlternatives_2_0.eContents().get(2);
		private final RuleCall cOpSKW_LESSEQUALTerminalRuleCall_2_0_2_0 = (RuleCall)cOpAssignment_2_0_2.eContents().get(0);
		private final Assignment cOpAssignment_2_0_3 = (Assignment)cAlternatives_2_0.eContents().get(3);
		private final RuleCall cOpSKW_GREATEREQUALTerminalRuleCall_2_0_3_0 = (RuleCall)cOpAssignment_2_0_3.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprShiftExpressionParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		
		//RelationalExpression Expression:
		//	{RelationalExpression} expr+=ShiftExpression ((op+=SKW_LESS
		//	| op+=SKW_GREATER
		//	| op+=SKW_LESSEQUAL
		//	| op+=SKW_GREATEREQUAL) expr+=ShiftExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//{RelationalExpression} expr+=ShiftExpression ((op+=SKW_LESS | op+=SKW_GREATER | op+=SKW_LESSEQUAL |
		//op+=SKW_GREATEREQUAL) expr+=ShiftExpression)*
		public Group getGroup() { return cGroup; }
		
		//{RelationalExpression}
		public Action getRelationalExpressionAction_0() { return cRelationalExpressionAction_0; }
		
		//expr+=ShiftExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//ShiftExpression
		public RuleCall getExprShiftExpressionParserRuleCall_1_0() { return cExprShiftExpressionParserRuleCall_1_0; }
		
		//((op+=SKW_LESS | op+=SKW_GREATER | op+=SKW_LESSEQUAL | op+=SKW_GREATEREQUAL) expr+=ShiftExpression)*
		public Group getGroup_2() { return cGroup_2; }
		
		//(op+=SKW_LESS | op+=SKW_GREATER | op+=SKW_LESSEQUAL | op+=SKW_GREATEREQUAL)
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//op+=SKW_LESS
		public Assignment getOpAssignment_2_0_0() { return cOpAssignment_2_0_0; }
		
		//SKW_LESS
		public RuleCall getOpSKW_LESSTerminalRuleCall_2_0_0_0() { return cOpSKW_LESSTerminalRuleCall_2_0_0_0; }
		
		//op+=SKW_GREATER
		public Assignment getOpAssignment_2_0_1() { return cOpAssignment_2_0_1; }
		
		//SKW_GREATER
		public RuleCall getOpSKW_GREATERTerminalRuleCall_2_0_1_0() { return cOpSKW_GREATERTerminalRuleCall_2_0_1_0; }
		
		//op+=SKW_LESSEQUAL
		public Assignment getOpAssignment_2_0_2() { return cOpAssignment_2_0_2; }
		
		//SKW_LESSEQUAL
		public RuleCall getOpSKW_LESSEQUALTerminalRuleCall_2_0_2_0() { return cOpSKW_LESSEQUALTerminalRuleCall_2_0_2_0; }
		
		//op+=SKW_GREATEREQUAL
		public Assignment getOpAssignment_2_0_3() { return cOpAssignment_2_0_3; }
		
		//SKW_GREATEREQUAL
		public RuleCall getOpSKW_GREATEREQUALTerminalRuleCall_2_0_3_0() { return cOpSKW_GREATEREQUALTerminalRuleCall_2_0_3_0; }
		
		//expr+=ShiftExpression
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }
		
		//ShiftExpression
		public RuleCall getExprShiftExpressionParserRuleCall_2_1_0() { return cExprShiftExpressionParserRuleCall_2_1_0; }
	}
	public class ShiftExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.ShiftExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cShiftExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprAdditiveExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Assignment cOpAssignment_2_0_0 = (Assignment)cAlternatives_2_0.eContents().get(0);
		private final RuleCall cOpSKW_LEFTSHIFTTerminalRuleCall_2_0_0_0 = (RuleCall)cOpAssignment_2_0_0.eContents().get(0);
		private final Assignment cOpAssignment_2_0_1 = (Assignment)cAlternatives_2_0.eContents().get(1);
		private final RuleCall cOpSKW_RIGHTSHIFTTerminalRuleCall_2_0_1_0 = (RuleCall)cOpAssignment_2_0_1.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprAdditiveExpressionParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		
		//ShiftExpression Expression:
		//	{ShiftExpression} expr+=AdditiveExpression ((op+=SKW_LEFTSHIFT
		//	| op+=SKW_RIGHTSHIFT) expr+=AdditiveExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//{ShiftExpression} expr+=AdditiveExpression ((op+=SKW_LEFTSHIFT | op+=SKW_RIGHTSHIFT) expr+=AdditiveExpression)*
		public Group getGroup() { return cGroup; }
		
		//{ShiftExpression}
		public Action getShiftExpressionAction_0() { return cShiftExpressionAction_0; }
		
		//expr+=AdditiveExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//AdditiveExpression
		public RuleCall getExprAdditiveExpressionParserRuleCall_1_0() { return cExprAdditiveExpressionParserRuleCall_1_0; }
		
		//((op+=SKW_LEFTSHIFT | op+=SKW_RIGHTSHIFT) expr+=AdditiveExpression)*
		public Group getGroup_2() { return cGroup_2; }
		
		//(op+=SKW_LEFTSHIFT | op+=SKW_RIGHTSHIFT)
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//op+=SKW_LEFTSHIFT
		public Assignment getOpAssignment_2_0_0() { return cOpAssignment_2_0_0; }
		
		//SKW_LEFTSHIFT
		public RuleCall getOpSKW_LEFTSHIFTTerminalRuleCall_2_0_0_0() { return cOpSKW_LEFTSHIFTTerminalRuleCall_2_0_0_0; }
		
		//op+=SKW_RIGHTSHIFT
		public Assignment getOpAssignment_2_0_1() { return cOpAssignment_2_0_1; }
		
		//SKW_RIGHTSHIFT
		public RuleCall getOpSKW_RIGHTSHIFTTerminalRuleCall_2_0_1_0() { return cOpSKW_RIGHTSHIFTTerminalRuleCall_2_0_1_0; }
		
		//expr+=AdditiveExpression
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }
		
		//AdditiveExpression
		public RuleCall getExprAdditiveExpressionParserRuleCall_2_1_0() { return cExprAdditiveExpressionParserRuleCall_2_1_0; }
	}
	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAdditiveExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprMultiplicativeExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Assignment cOpAssignment_2_0_0 = (Assignment)cAlternatives_2_0.eContents().get(0);
		private final RuleCall cOpSKW_PLUSTerminalRuleCall_2_0_0_0 = (RuleCall)cOpAssignment_2_0_0.eContents().get(0);
		private final Assignment cOpAssignment_2_0_1 = (Assignment)cAlternatives_2_0.eContents().get(1);
		private final RuleCall cOpSKW_MINUSTerminalRuleCall_2_0_1_0 = (RuleCall)cOpAssignment_2_0_1.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprMultiplicativeExpressionParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		
		//AdditiveExpression Expression:
		//	{AdditiveExpression} expr+=MultiplicativeExpression ((op+=SKW_PLUS
		//	| op+=SKW_MINUS) expr+=MultiplicativeExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//{AdditiveExpression} expr+=MultiplicativeExpression ((op+=SKW_PLUS | op+=SKW_MINUS) expr+=MultiplicativeExpression)*
		public Group getGroup() { return cGroup; }
		
		//{AdditiveExpression}
		public Action getAdditiveExpressionAction_0() { return cAdditiveExpressionAction_0; }
		
		//expr+=MultiplicativeExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//MultiplicativeExpression
		public RuleCall getExprMultiplicativeExpressionParserRuleCall_1_0() { return cExprMultiplicativeExpressionParserRuleCall_1_0; }
		
		//((op+=SKW_PLUS | op+=SKW_MINUS) expr+=MultiplicativeExpression)*
		public Group getGroup_2() { return cGroup_2; }
		
		//(op+=SKW_PLUS | op+=SKW_MINUS)
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//op+=SKW_PLUS
		public Assignment getOpAssignment_2_0_0() { return cOpAssignment_2_0_0; }
		
		//SKW_PLUS
		public RuleCall getOpSKW_PLUSTerminalRuleCall_2_0_0_0() { return cOpSKW_PLUSTerminalRuleCall_2_0_0_0; }
		
		//op+=SKW_MINUS
		public Assignment getOpAssignment_2_0_1() { return cOpAssignment_2_0_1; }
		
		//SKW_MINUS
		public RuleCall getOpSKW_MINUSTerminalRuleCall_2_0_1_0() { return cOpSKW_MINUSTerminalRuleCall_2_0_1_0; }
		
		//expr+=MultiplicativeExpression
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }
		
		//MultiplicativeExpression
		public RuleCall getExprMultiplicativeExpressionParserRuleCall_2_1_0() { return cExprMultiplicativeExpressionParserRuleCall_2_1_0; }
	}
	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMultiplicativeExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprCastExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Assignment cOpAssignment_2_0_0 = (Assignment)cAlternatives_2_0.eContents().get(0);
		private final RuleCall cOpSKW_STARTerminalRuleCall_2_0_0_0 = (RuleCall)cOpAssignment_2_0_0.eContents().get(0);
		private final Assignment cOpAssignment_2_0_1 = (Assignment)cAlternatives_2_0.eContents().get(1);
		private final RuleCall cOpSKW_DIVTerminalRuleCall_2_0_1_0 = (RuleCall)cOpAssignment_2_0_1.eContents().get(0);
		private final Assignment cOpAssignment_2_0_2 = (Assignment)cAlternatives_2_0.eContents().get(2);
		private final RuleCall cOpSKW_MODTerminalRuleCall_2_0_2_0 = (RuleCall)cOpAssignment_2_0_2.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprCastExpressionParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		
		//MultiplicativeExpression Expression:
		//	{MultiplicativeExpression} expr+=CastExpression ((op+=SKW_STAR
		//	| op+=SKW_DIV
		//	| op+=SKW_MOD) expr+=CastExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//{MultiplicativeExpression} expr+=CastExpression ((op+=SKW_STAR | op+=SKW_DIV | op+=SKW_MOD) expr+=CastExpression)*
		public Group getGroup() { return cGroup; }
		
		//{MultiplicativeExpression}
		public Action getMultiplicativeExpressionAction_0() { return cMultiplicativeExpressionAction_0; }
		
		//expr+=CastExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//CastExpression
		public RuleCall getExprCastExpressionParserRuleCall_1_0() { return cExprCastExpressionParserRuleCall_1_0; }
		
		//((op+=SKW_STAR | op+=SKW_DIV | op+=SKW_MOD) expr+=CastExpression)*
		public Group getGroup_2() { return cGroup_2; }
		
		//(op+=SKW_STAR | op+=SKW_DIV | op+=SKW_MOD)
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//op+=SKW_STAR
		public Assignment getOpAssignment_2_0_0() { return cOpAssignment_2_0_0; }
		
		//SKW_STAR
		public RuleCall getOpSKW_STARTerminalRuleCall_2_0_0_0() { return cOpSKW_STARTerminalRuleCall_2_0_0_0; }
		
		//op+=SKW_DIV
		public Assignment getOpAssignment_2_0_1() { return cOpAssignment_2_0_1; }
		
		//SKW_DIV
		public RuleCall getOpSKW_DIVTerminalRuleCall_2_0_1_0() { return cOpSKW_DIVTerminalRuleCall_2_0_1_0; }
		
		//op+=SKW_MOD
		public Assignment getOpAssignment_2_0_2() { return cOpAssignment_2_0_2; }
		
		//SKW_MOD
		public RuleCall getOpSKW_MODTerminalRuleCall_2_0_2_0() { return cOpSKW_MODTerminalRuleCall_2_0_2_0; }
		
		//expr+=CastExpression
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }
		
		//CastExpression
		public RuleCall getExprCastExpressionParserRuleCall_2_1_0() { return cExprCastExpressionParserRuleCall_2_1_0; }
	}
	public class CastExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.CastExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCastExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprUnaryExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//CastExpression Expression:
		//	{CastExpression} expr=UnaryExpression
		@Override public ParserRule getRule() { return rule; }
		
		//{CastExpression} expr=UnaryExpression
		public Group getGroup() { return cGroup; }
		
		//{CastExpression}
		public Action getCastExpressionAction_0() { return cCastExpressionAction_0; }
		
		//expr=UnaryExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//UnaryExpression
		public RuleCall getExprUnaryExpressionParserRuleCall_1_0() { return cExprUnaryExpressionParserRuleCall_1_0; }
	}
	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.UnaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnaryExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cExprPostfixExpressionParserRuleCall_1_0_0 = (RuleCall)cExprAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cOpAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cOpUnaryOperatorParserRuleCall_1_1_0_0 = (RuleCall)cOpAssignment_1_1_0.eContents().get(0);
		private final Assignment cExprAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cExprCastExpressionParserRuleCall_1_1_1_0 = (RuleCall)cExprAssignment_1_1_1.eContents().get(0);
		
		//UnaryExpression Expression:
		//	{UnaryExpression} (expr=PostfixExpression
		//	//|	plusplus=SKW_PLUSPLUS expr=UnaryExpression
		//	//|	minusminus=SKW_MINUSMINUS expr=UnaryExpression
		//	| op=UnaryOperator expr=CastExpression
		//	//|	sizeOf=SKW_SIZEOF SKW_LEFTPAREN typeName=TypeName SKW_RIGHTPAREN
		//	//|	sizeOf=SKW_SIZEOF expr=UnaryExpression 
		//	//|	ALIGNOF LEFTPAREN typeName=typeName RIGHTPAREN
		//	//|	andand=SKW_ANDAND id=ID // GCC extension address of label
		//)
		@Override public ParserRule getRule() { return rule; }
		
		//{UnaryExpression} (expr=PostfixExpression //|	plusplus=SKW_PLUSPLUS expr=UnaryExpression
		////|	minusminus=SKW_MINUSMINUS expr=UnaryExpression
		//| op=UnaryOperator expr=CastExpression //|	sizeOf=SKW_SIZEOF SKW_LEFTPAREN typeName=TypeName SKW_RIGHTPAREN
		////|	sizeOf=SKW_SIZEOF expr=UnaryExpression 
		////|	ALIGNOF LEFTPAREN typeName=typeName RIGHTPAREN
		////|	andand=SKW_ANDAND id=ID // GCC extension address of label
		//)
		public Group getGroup() { return cGroup; }
		
		//{UnaryExpression}
		public Action getUnaryExpressionAction_0() { return cUnaryExpressionAction_0; }
		
		//(expr=PostfixExpression //|	plusplus=SKW_PLUSPLUS expr=UnaryExpression
		////|	minusminus=SKW_MINUSMINUS expr=UnaryExpression
		//| op=UnaryOperator expr=CastExpression //|	sizeOf=SKW_SIZEOF SKW_LEFTPAREN typeName=TypeName SKW_RIGHTPAREN
		////|	sizeOf=SKW_SIZEOF expr=UnaryExpression 
		////|	ALIGNOF LEFTPAREN typeName=typeName RIGHTPAREN
		////|	andand=SKW_ANDAND id=ID // GCC extension address of label
		//)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//expr=PostfixExpression
		public Assignment getExprAssignment_1_0() { return cExprAssignment_1_0; }
		
		//PostfixExpression
		public RuleCall getExprPostfixExpressionParserRuleCall_1_0_0() { return cExprPostfixExpressionParserRuleCall_1_0_0; }
		
		//op=UnaryOperator expr=CastExpression
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//op=UnaryOperator
		public Assignment getOpAssignment_1_1_0() { return cOpAssignment_1_1_0; }
		
		//UnaryOperator
		public RuleCall getOpUnaryOperatorParserRuleCall_1_1_0_0() { return cOpUnaryOperatorParserRuleCall_1_1_0_0; }
		
		//expr=CastExpression
		public Assignment getExprAssignment_1_1_1() { return cExprAssignment_1_1_1; }
		
		//CastExpression
		public RuleCall getExprCastExpressionParserRuleCall_1_1_1_0() { return cExprCastExpressionParserRuleCall_1_1_1_0; }
	}
	public class UnaryOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.UnaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cUnaryOperatorAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOpAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOpSKW_ANDTerminalRuleCall_0_1_0 = (RuleCall)cOpAssignment_0_1.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOpSKW_STARTerminalRuleCall_1_0 = (RuleCall)cOpAssignment_1.eContents().get(0);
		private final Assignment cOpAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cOpSKW_PLUSTerminalRuleCall_2_0 = (RuleCall)cOpAssignment_2.eContents().get(0);
		private final Assignment cOpAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cOpSKW_MINUSTerminalRuleCall_3_0 = (RuleCall)cOpAssignment_3.eContents().get(0);
		private final Assignment cOpAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cOpSKW_TILDETerminalRuleCall_4_0 = (RuleCall)cOpAssignment_4.eContents().get(0);
		private final Assignment cOpAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cOpSKW_NOTTerminalRuleCall_5_0 = (RuleCall)cOpAssignment_5.eContents().get(0);
		
		//UnaryOperator:
		//	{UnaryOperator} op=SKW_AND
		//	| op=SKW_STAR
		//	| op=SKW_PLUS
		//	| op=SKW_MINUS
		//	| op=SKW_TILDE
		//	| op=SKW_NOT;
		@Override public ParserRule getRule() { return rule; }
		
		//{UnaryOperator} op=SKW_AND | op=SKW_STAR | op=SKW_PLUS | op=SKW_MINUS | op=SKW_TILDE | op=SKW_NOT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{UnaryOperator} op=SKW_AND
		public Group getGroup_0() { return cGroup_0; }
		
		//{UnaryOperator}
		public Action getUnaryOperatorAction_0_0() { return cUnaryOperatorAction_0_0; }
		
		//op=SKW_AND
		public Assignment getOpAssignment_0_1() { return cOpAssignment_0_1; }
		
		//SKW_AND
		public RuleCall getOpSKW_ANDTerminalRuleCall_0_1_0() { return cOpSKW_ANDTerminalRuleCall_0_1_0; }
		
		//op=SKW_STAR
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//SKW_STAR
		public RuleCall getOpSKW_STARTerminalRuleCall_1_0() { return cOpSKW_STARTerminalRuleCall_1_0; }
		
		//op=SKW_PLUS
		public Assignment getOpAssignment_2() { return cOpAssignment_2; }
		
		//SKW_PLUS
		public RuleCall getOpSKW_PLUSTerminalRuleCall_2_0() { return cOpSKW_PLUSTerminalRuleCall_2_0; }
		
		//op=SKW_MINUS
		public Assignment getOpAssignment_3() { return cOpAssignment_3; }
		
		//SKW_MINUS
		public RuleCall getOpSKW_MINUSTerminalRuleCall_3_0() { return cOpSKW_MINUSTerminalRuleCall_3_0; }
		
		//op=SKW_TILDE
		public Assignment getOpAssignment_4() { return cOpAssignment_4; }
		
		//SKW_TILDE
		public RuleCall getOpSKW_TILDETerminalRuleCall_4_0() { return cOpSKW_TILDETerminalRuleCall_4_0; }
		
		//op=SKW_NOT
		public Assignment getOpAssignment_5() { return cOpAssignment_5; }
		
		//SKW_NOT
		public RuleCall getOpSKW_NOTTerminalRuleCall_5_0() { return cOpSKW_NOTTerminalRuleCall_5_0; }
	}
	public class PostfixExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.PostfixExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPostfixExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cExprPrimaryExpressionParserRuleCall_1_0_0 = (RuleCall)cExprAssignment_1_0.eContents().get(0);
		private final Assignment cSuffixAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSuffixPostfixExpressionSuffixArgumentParserRuleCall_1_1_0 = (RuleCall)cSuffixAssignment_1_1.eContents().get(0);
		
		//PostfixExpression Expression:
		//	{PostfixExpression} (expr=PrimaryExpression
		//	/ *	(
		//	|	('__extension__' LEFTPAREN typeName RIGHTPAREN LEFTBRACE initializerList=initializerList) 
		//			(COMMA? RIGHTBRACE)
		//	)
		//	* /
		//	suffix+=PostfixExpressionSuffixArgument
		//	//|	suffix+=PostfixExpressionSuffixDot
		//	//|	suffix+=PostfixExpressionSuffixArrow
		//	//	suffix+=PostfixExpressionSuffixPlusPlus
		//	//|	suffix+=PostfixExpressionSuffixMinusMinus
		// *)
		@Override public ParserRule getRule() { return rule; }
		
		//{PostfixExpression} (expr=PrimaryExpression / *	(
		//	|	('__extension__' LEFTPAREN typeName RIGHTPAREN LEFTBRACE initializerList=initializerList) 
		//			(COMMA? RIGHTBRACE)
		//	)
		//	* / suffix+=PostfixExpressionSuffixArgument //|	suffix+=PostfixExpressionSuffixDot
		////|	suffix+=PostfixExpressionSuffixArrow
		////	suffix+=PostfixExpressionSuffixPlusPlus
		////|	suffix+=PostfixExpressionSuffixMinusMinus
		// *)
		public Group getGroup() { return cGroup; }
		
		//{PostfixExpression}
		public Action getPostfixExpressionAction_0() { return cPostfixExpressionAction_0; }
		
		//(expr=PrimaryExpression / *	(
		//	|	('__extension__' LEFTPAREN typeName RIGHTPAREN LEFTBRACE initializerList=initializerList) 
		//			(COMMA? RIGHTBRACE)
		//	)
		//	* / suffix+=PostfixExpressionSuffixArgument //|	suffix+=PostfixExpressionSuffixDot
		////|	suffix+=PostfixExpressionSuffixArrow
		////	suffix+=PostfixExpressionSuffixPlusPlus
		////|	suffix+=PostfixExpressionSuffixMinusMinus
		// *)
		public Group getGroup_1() { return cGroup_1; }
		
		//expr=PrimaryExpression
		public Assignment getExprAssignment_1_0() { return cExprAssignment_1_0; }
		
		//PrimaryExpression
		public RuleCall getExprPrimaryExpressionParserRuleCall_1_0_0() { return cExprPrimaryExpressionParserRuleCall_1_0_0; }
		
		/// *	(
		//	|	('__extension__' LEFTPAREN typeName RIGHTPAREN LEFTBRACE initializerList=initializerList) 
		//			(COMMA? RIGHTBRACE)
		//	)
		//	* / suffix+=PostfixExpressionSuffixArgument //|	suffix+=PostfixExpressionSuffixDot
		////|	suffix+=PostfixExpressionSuffixArrow
		////	suffix+=PostfixExpressionSuffixPlusPlus
		////|	suffix+=PostfixExpressionSuffixMinusMinus
		// *
		public Assignment getSuffixAssignment_1_1() { return cSuffixAssignment_1_1; }
		
		//PostfixExpressionSuffixArgument
		public RuleCall getSuffixPostfixExpressionSuffixArgumentParserRuleCall_1_1_0() { return cSuffixPostfixExpressionSuffixArgumentParserRuleCall_1_1_0; }
	}
	public class PostfixExpressionSuffixArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.PostfixExpressionSuffixArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPostfixExpressionSuffixArgumentAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cSKW_LEFTPARENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cArgumentExpressionListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentExpressionListArgumentExpressionListParserRuleCall_2_0 = (RuleCall)cArgumentExpressionListAssignment_2.eContents().get(0);
		private final RuleCall cSKW_RIGHTPARENTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		/// *
		//PostfixExpressionSuffixArray returns PostfixExpressionSuffix:
		//	{PostfixExpressionSuffixArray}
		//	SKW_LEFTBRACKET arrayExpr=Expression SKW_RIGHTBRACKET
		//;
		// * / PostfixExpressionSuffixArgument PostfixExpressionSuffix:
		//	{PostfixExpressionSuffixArgument} SKW_LEFTPAREN argumentExpressionList=ArgumentExpressionList? SKW_RIGHTPAREN
		@Override public ParserRule getRule() { return rule; }
		
		//{PostfixExpressionSuffixArgument} SKW_LEFTPAREN argumentExpressionList=ArgumentExpressionList? SKW_RIGHTPAREN
		public Group getGroup() { return cGroup; }
		
		//{PostfixExpressionSuffixArgument}
		public Action getPostfixExpressionSuffixArgumentAction_0() { return cPostfixExpressionSuffixArgumentAction_0; }
		
		//SKW_LEFTPAREN
		public RuleCall getSKW_LEFTPARENTerminalRuleCall_1() { return cSKW_LEFTPARENTerminalRuleCall_1; }
		
		//argumentExpressionList=ArgumentExpressionList?
		public Assignment getArgumentExpressionListAssignment_2() { return cArgumentExpressionListAssignment_2; }
		
		//ArgumentExpressionList
		public RuleCall getArgumentExpressionListArgumentExpressionListParserRuleCall_2_0() { return cArgumentExpressionListArgumentExpressionListParserRuleCall_2_0; }
		
		//SKW_RIGHTPAREN
		public RuleCall getSKW_RIGHTPARENTerminalRuleCall_3() { return cSKW_RIGHTPARENTerminalRuleCall_3; }
	}
	public class ArgumentExpressionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.ArgumentExpressionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExprConditionalExpressionParserRuleCall_0_0 = (RuleCall)cExprAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cSKW_COMMATerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExprConditionalExpressionParserRuleCall_1_1_0 = (RuleCall)cExprAssignment_1_1.eContents().get(0);
		
		/// *
		//PostfixExpressionSuffixDot returns PostfixExpressionSuffix:
		//	{PostfixExpressionSuffixDot}
		//	SKW_DOT id=ID
		//;
		//
		//PostfixExpressionSuffixArrow returns PostfixExpressionSuffix:
		//	{PostfixExpressionSuffixArrow}
		//	SKW_ARROW id=ID
		//;
		//
		//
		//PostfixExpressionSuffixPlusPlus returns PostfixExpressionSuffix:
		//	{PostfixExpressionSuffixPlusPlus}
		//	SKW_PLUSPLUS
		//;
		//
		//PostfixExpressionSuffixMinusMinus returns PostfixExpressionSuffix:
		//	{PostfixExpressionSuffixMinusMinus}
		//	SKW_MINUSMINUS
		//;
		// * / ArgumentExpressionList:
		//	expr+=ConditionalExpression (SKW_COMMA expr+=ConditionalExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//expr+=ConditionalExpression (SKW_COMMA expr+=ConditionalExpression)*
		public Group getGroup() { return cGroup; }
		
		//expr+=ConditionalExpression
		public Assignment getExprAssignment_0() { return cExprAssignment_0; }
		
		//ConditionalExpression
		public RuleCall getExprConditionalExpressionParserRuleCall_0_0() { return cExprConditionalExpressionParserRuleCall_0_0; }
		
		//(SKW_COMMA expr+=ConditionalExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//SKW_COMMA
		public RuleCall getSKW_COMMATerminalRuleCall_1_0() { return cSKW_COMMATerminalRuleCall_1_0; }
		
		//expr+=ConditionalExpression
		public Assignment getExprAssignment_1_1() { return cExprAssignment_1_1; }
		
		//ConditionalExpression
		public RuleCall getExprConditionalExpressionParserRuleCall_1_1_0() { return cExprConditionalExpressionParserRuleCall_1_1_0; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.PrimaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimaryExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cConstAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cConstConstant1ParserRuleCall_1_0_0 = (RuleCall)cConstAssignment_1_0.eContents().get(0);
		private final RuleCall cSKW_LEFTPARENTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cExprAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_1_2_0 = (RuleCall)cExprAssignment_1_2.eContents().get(0);
		private final RuleCall cSKW_RIGHTPARENTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		
		//PrimaryExpression Expression:
		//	{PrimaryExpression} (const=Constant1
		//	//|	string+=STRING_LITERAL+ // reachable over Constant!
		//	SKW_LEFTPAREN expr=Expression SKW_RIGHTPAREN)
		@Override public ParserRule getRule() { return rule; }
		
		//{PrimaryExpression} (const=Constant1 //|	string+=STRING_LITERAL+ // reachable over Constant!
		//SKW_LEFTPAREN expr=Expression SKW_RIGHTPAREN)
		public Group getGroup() { return cGroup; }
		
		//{PrimaryExpression}
		public Action getPrimaryExpressionAction_0() { return cPrimaryExpressionAction_0; }
		
		//(const=Constant1 //|	string+=STRING_LITERAL+ // reachable over Constant!
		//SKW_LEFTPAREN expr=Expression SKW_RIGHTPAREN)
		public Group getGroup_1() { return cGroup_1; }
		
		//const=Constant1
		public Assignment getConstAssignment_1_0() { return cConstAssignment_1_0; }
		
		//Constant1
		public RuleCall getConstConstant1ParserRuleCall_1_0_0() { return cConstConstant1ParserRuleCall_1_0_0; }
		
		////|	string+=STRING_LITERAL+ // reachable over Constant!
		//SKW_LEFTPAREN
		public RuleCall getSKW_LEFTPARENTerminalRuleCall_1_1() { return cSKW_LEFTPARENTerminalRuleCall_1_1; }
		
		//expr=Expression
		public Assignment getExprAssignment_1_2() { return cExprAssignment_1_2; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_2_0() { return cExprExpressionParserRuleCall_1_2_0; }
		
		//SKW_RIGHTPAREN
		public RuleCall getSKW_RIGHTPARENTerminalRuleCall_1_3() { return cSKW_RIGHTPARENTerminalRuleCall_1_3; }
	}
	public class Constant1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.Constant1");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHEX_LITERALTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOCTAL_LITERALTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDECIMAL_LITERALTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCHAR_LITERALTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSTRING_LITERALTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cFLOAT_LITERALTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cBIN_LITERALTerminalRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Constant1:
		//	HEX_LITERAL
		//	| OCTAL_LITERAL
		//	| DECIMAL_LITERAL
		//	| CHAR_LITERAL
		//	| STRING_LITERAL
		//	| FLOAT_LITERAL
		//	| BIN_LITERAL;
		@Override public ParserRule getRule() { return rule; }
		
		//HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL | CHAR_LITERAL | STRING_LITERAL | FLOAT_LITERAL | BIN_LITERAL
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//HEX_LITERAL
		public RuleCall getHEX_LITERALTerminalRuleCall_0() { return cHEX_LITERALTerminalRuleCall_0; }
		
		//OCTAL_LITERAL
		public RuleCall getOCTAL_LITERALTerminalRuleCall_1() { return cOCTAL_LITERALTerminalRuleCall_1; }
		
		//DECIMAL_LITERAL
		public RuleCall getDECIMAL_LITERALTerminalRuleCall_2() { return cDECIMAL_LITERALTerminalRuleCall_2; }
		
		//CHAR_LITERAL
		public RuleCall getCHAR_LITERALTerminalRuleCall_3() { return cCHAR_LITERALTerminalRuleCall_3; }
		
		//STRING_LITERAL
		public RuleCall getSTRING_LITERALTerminalRuleCall_4() { return cSTRING_LITERALTerminalRuleCall_4; }
		
		//FLOAT_LITERAL
		public RuleCall getFLOAT_LITERALTerminalRuleCall_5() { return cFLOAT_LITERALTerminalRuleCall_5; }
		
		//BIN_LITERAL
		public RuleCall getBIN_LITERALTerminalRuleCall_6() { return cBIN_LITERALTerminalRuleCall_6; }
	}
	public class Constant2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.Constant2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstant2Action_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cHexAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cHexHEX_LITERALTerminalRuleCall_1_0_0 = (RuleCall)cHexAssignment_1_0.eContents().get(0);
		private final Assignment cOctAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cOctOCTAL_LITERALTerminalRuleCall_1_1_0 = (RuleCall)cOctAssignment_1_1.eContents().get(0);
		private final Assignment cDecAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cDecDECIMAL_LITERALTerminalRuleCall_1_2_0 = (RuleCall)cDecAssignment_1_2.eContents().get(0);
		private final Assignment cChAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cChCHAR_LITERALTerminalRuleCall_1_3_0 = (RuleCall)cChAssignment_1_3.eContents().get(0);
		private final Assignment cStrAssignment_1_4 = (Assignment)cAlternatives_1.eContents().get(4);
		private final RuleCall cStrSTRING_LITERALTerminalRuleCall_1_4_0 = (RuleCall)cStrAssignment_1_4.eContents().get(0);
		private final Assignment cFloatAssignment_1_5 = (Assignment)cAlternatives_1.eContents().get(5);
		private final RuleCall cFloatFLOAT_LITERALTerminalRuleCall_1_5_0 = (RuleCall)cFloatAssignment_1_5.eContents().get(0);
		private final Assignment cBinAssignment_1_6 = (Assignment)cAlternatives_1.eContents().get(6);
		private final RuleCall cBinBIN_LITERALTerminalRuleCall_1_6_0 = (RuleCall)cBinAssignment_1_6.eContents().get(0);
		
		//Constant2:
		//	{Constant2} (hex=HEX_LITERAL
		//	| oct=OCTAL_LITERAL
		//	| dec=DECIMAL_LITERAL
		//	| ch=CHAR_LITERAL
		//	| str=STRING_LITERAL
		//	| float=FLOAT_LITERAL
		//	| bin=BIN_LITERAL);
		@Override public ParserRule getRule() { return rule; }
		
		//{Constant2} (hex=HEX_LITERAL | oct=OCTAL_LITERAL | dec=DECIMAL_LITERAL | ch=CHAR_LITERAL | str=STRING_LITERAL |
		//float=FLOAT_LITERAL | bin=BIN_LITERAL)
		public Group getGroup() { return cGroup; }
		
		//{Constant2}
		public Action getConstant2Action_0() { return cConstant2Action_0; }
		
		//(hex=HEX_LITERAL | oct=OCTAL_LITERAL | dec=DECIMAL_LITERAL | ch=CHAR_LITERAL | str=STRING_LITERAL | float=FLOAT_LITERAL
		//| bin=BIN_LITERAL)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//hex=HEX_LITERAL
		public Assignment getHexAssignment_1_0() { return cHexAssignment_1_0; }
		
		//HEX_LITERAL
		public RuleCall getHexHEX_LITERALTerminalRuleCall_1_0_0() { return cHexHEX_LITERALTerminalRuleCall_1_0_0; }
		
		//oct=OCTAL_LITERAL
		public Assignment getOctAssignment_1_1() { return cOctAssignment_1_1; }
		
		//OCTAL_LITERAL
		public RuleCall getOctOCTAL_LITERALTerminalRuleCall_1_1_0() { return cOctOCTAL_LITERALTerminalRuleCall_1_1_0; }
		
		//dec=DECIMAL_LITERAL
		public Assignment getDecAssignment_1_2() { return cDecAssignment_1_2; }
		
		//DECIMAL_LITERAL
		public RuleCall getDecDECIMAL_LITERALTerminalRuleCall_1_2_0() { return cDecDECIMAL_LITERALTerminalRuleCall_1_2_0; }
		
		//ch=CHAR_LITERAL
		public Assignment getChAssignment_1_3() { return cChAssignment_1_3; }
		
		//CHAR_LITERAL
		public RuleCall getChCHAR_LITERALTerminalRuleCall_1_3_0() { return cChCHAR_LITERALTerminalRuleCall_1_3_0; }
		
		//str=STRING_LITERAL
		public Assignment getStrAssignment_1_4() { return cStrAssignment_1_4; }
		
		//STRING_LITERAL
		public RuleCall getStrSTRING_LITERALTerminalRuleCall_1_4_0() { return cStrSTRING_LITERALTerminalRuleCall_1_4_0; }
		
		//float=FLOAT_LITERAL
		public Assignment getFloatAssignment_1_5() { return cFloatAssignment_1_5; }
		
		//FLOAT_LITERAL
		public RuleCall getFloatFLOAT_LITERALTerminalRuleCall_1_5_0() { return cFloatFLOAT_LITERALTerminalRuleCall_1_5_0; }
		
		//bin=BIN_LITERAL
		public Assignment getBinAssignment_1_6() { return cBinAssignment_1_6; }
		
		//BIN_LITERAL
		public RuleCall getBinBIN_LITERALTerminalRuleCall_1_6_0() { return cBinBIN_LITERALTerminalRuleCall_1_6_0; }
	}
	public class SpecialKeywordsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.SpecialKeywords");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSKW_ANDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSKW_ANDANDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSKW_ASSIGNTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSKW_BACKSLASHTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSKW_CARETTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSKW_COMMATerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSKW_COLONTerminalRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cSKW_DIVTerminalRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cSKW_DOTTerminalRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cSKW_DOUBLEQUOTETerminalRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cSKW_EQUALTerminalRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cSKW_GREATERTerminalRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cSKW_GREATEREQUALTerminalRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cSKW_LEFTBRACETerminalRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cSKW_LEFTBRACKETTerminalRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cSKW_LEFTPARENTerminalRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cSKW_LEFTSHIFTTerminalRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cSKW_LESSTerminalRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cSKW_LESSEQUALTerminalRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cSKW_MINUSTerminalRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cSKW_MINUSMINUSTerminalRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		private final RuleCall cSKW_MODTerminalRuleCall_21 = (RuleCall)cAlternatives.eContents().get(21);
		private final RuleCall cSKW_NOTTerminalRuleCall_22 = (RuleCall)cAlternatives.eContents().get(22);
		private final RuleCall cSKW_NOTEQUALTerminalRuleCall_23 = (RuleCall)cAlternatives.eContents().get(23);
		private final RuleCall cSKW_ORTerminalRuleCall_24 = (RuleCall)cAlternatives.eContents().get(24);
		private final RuleCall cSKW_ORORTerminalRuleCall_25 = (RuleCall)cAlternatives.eContents().get(25);
		private final RuleCall cSKW_PLUSTerminalRuleCall_26 = (RuleCall)cAlternatives.eContents().get(26);
		private final RuleCall cSKW_PLUSPLUSTerminalRuleCall_27 = (RuleCall)cAlternatives.eContents().get(27);
		private final RuleCall cSKW_QUESTIONTerminalRuleCall_28 = (RuleCall)cAlternatives.eContents().get(28);
		private final RuleCall cSKW_RIGHTBRACETerminalRuleCall_29 = (RuleCall)cAlternatives.eContents().get(29);
		private final RuleCall cSKW_RIGHTBRACKETTerminalRuleCall_30 = (RuleCall)cAlternatives.eContents().get(30);
		private final RuleCall cSKW_RIGHTPARENTerminalRuleCall_31 = (RuleCall)cAlternatives.eContents().get(31);
		private final RuleCall cSKW_RIGHTSHIFTTerminalRuleCall_32 = (RuleCall)cAlternatives.eContents().get(32);
		private final RuleCall cSKW_SEMITerminalRuleCall_33 = (RuleCall)cAlternatives.eContents().get(33);
		private final RuleCall cSKW_SINGLEQUOTETerminalRuleCall_34 = (RuleCall)cAlternatives.eContents().get(34);
		private final RuleCall cSKW_STARTerminalRuleCall_35 = (RuleCall)cAlternatives.eContents().get(35);
		private final RuleCall cSKW_TILDETerminalRuleCall_36 = (RuleCall)cAlternatives.eContents().get(36);
		
		//// keywords
		//// special keywords
		//SpecialKeywords:
		//	SKW_AND
		//	| SKW_ANDAND
		//	| SKW_ASSIGN
		//	| SKW_BACKSLASH
		//	| SKW_CARET
		//	| SKW_COMMA
		//	| SKW_COLON
		//	| SKW_DIV
		//	| SKW_DOT
		//	| SKW_DOUBLEQUOTE
		//	| SKW_EQUAL
		//	| SKW_GREATER
		//	| SKW_GREATEREQUAL
		//	| SKW_LEFTBRACE
		//	| SKW_LEFTBRACKET
		//	| SKW_LEFTPAREN
		//	| SKW_LEFTSHIFT
		//	| SKW_LESS
		//	| SKW_LESSEQUAL
		//	| SKW_MINUS
		//	| SKW_MINUSMINUS
		//	| SKW_MOD
		//	| SKW_NOT
		//	| SKW_NOTEQUAL
		//	| SKW_OR
		//	| SKW_OROR
		//	| SKW_PLUS
		//	| SKW_PLUSPLUS
		//	| SKW_QUESTION
		//	| SKW_RIGHTBRACE
		//	| SKW_RIGHTBRACKET
		//	| SKW_RIGHTPAREN
		//	| SKW_RIGHTSHIFT
		//	| SKW_SEMI
		//	| SKW_SINGLEQUOTE
		//	| SKW_STAR
		//	| SKW_TILDE;
		@Override public ParserRule getRule() { return rule; }
		
		//SKW_AND | SKW_ANDAND | SKW_ASSIGN | SKW_BACKSLASH | SKW_CARET | SKW_COMMA | SKW_COLON | SKW_DIV | SKW_DOT |
		//SKW_DOUBLEQUOTE | SKW_EQUAL | SKW_GREATER | SKW_GREATEREQUAL | SKW_LEFTBRACE | SKW_LEFTBRACKET | SKW_LEFTPAREN |
		//SKW_LEFTSHIFT | SKW_LESS | SKW_LESSEQUAL | SKW_MINUS | SKW_MINUSMINUS | SKW_MOD | SKW_NOT | SKW_NOTEQUAL | SKW_OR |
		//SKW_OROR | SKW_PLUS | SKW_PLUSPLUS | SKW_QUESTION | SKW_RIGHTBRACE | SKW_RIGHTBRACKET | SKW_RIGHTPAREN | SKW_RIGHTSHIFT
		//| SKW_SEMI | SKW_SINGLEQUOTE | SKW_STAR | SKW_TILDE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SKW_AND
		public RuleCall getSKW_ANDTerminalRuleCall_0() { return cSKW_ANDTerminalRuleCall_0; }
		
		//SKW_ANDAND
		public RuleCall getSKW_ANDANDTerminalRuleCall_1() { return cSKW_ANDANDTerminalRuleCall_1; }
		
		//SKW_ASSIGN
		public RuleCall getSKW_ASSIGNTerminalRuleCall_2() { return cSKW_ASSIGNTerminalRuleCall_2; }
		
		//SKW_BACKSLASH
		public RuleCall getSKW_BACKSLASHTerminalRuleCall_3() { return cSKW_BACKSLASHTerminalRuleCall_3; }
		
		//SKW_CARET
		public RuleCall getSKW_CARETTerminalRuleCall_4() { return cSKW_CARETTerminalRuleCall_4; }
		
		//SKW_COMMA
		public RuleCall getSKW_COMMATerminalRuleCall_5() { return cSKW_COMMATerminalRuleCall_5; }
		
		//SKW_COLON
		public RuleCall getSKW_COLONTerminalRuleCall_6() { return cSKW_COLONTerminalRuleCall_6; }
		
		//SKW_DIV
		public RuleCall getSKW_DIVTerminalRuleCall_7() { return cSKW_DIVTerminalRuleCall_7; }
		
		//SKW_DOT
		public RuleCall getSKW_DOTTerminalRuleCall_8() { return cSKW_DOTTerminalRuleCall_8; }
		
		//SKW_DOUBLEQUOTE
		public RuleCall getSKW_DOUBLEQUOTETerminalRuleCall_9() { return cSKW_DOUBLEQUOTETerminalRuleCall_9; }
		
		//SKW_EQUAL
		public RuleCall getSKW_EQUALTerminalRuleCall_10() { return cSKW_EQUALTerminalRuleCall_10; }
		
		//SKW_GREATER
		public RuleCall getSKW_GREATERTerminalRuleCall_11() { return cSKW_GREATERTerminalRuleCall_11; }
		
		//SKW_GREATEREQUAL
		public RuleCall getSKW_GREATEREQUALTerminalRuleCall_12() { return cSKW_GREATEREQUALTerminalRuleCall_12; }
		
		//SKW_LEFTBRACE
		public RuleCall getSKW_LEFTBRACETerminalRuleCall_13() { return cSKW_LEFTBRACETerminalRuleCall_13; }
		
		//SKW_LEFTBRACKET
		public RuleCall getSKW_LEFTBRACKETTerminalRuleCall_14() { return cSKW_LEFTBRACKETTerminalRuleCall_14; }
		
		//SKW_LEFTPAREN
		public RuleCall getSKW_LEFTPARENTerminalRuleCall_15() { return cSKW_LEFTPARENTerminalRuleCall_15; }
		
		//SKW_LEFTSHIFT
		public RuleCall getSKW_LEFTSHIFTTerminalRuleCall_16() { return cSKW_LEFTSHIFTTerminalRuleCall_16; }
		
		//SKW_LESS
		public RuleCall getSKW_LESSTerminalRuleCall_17() { return cSKW_LESSTerminalRuleCall_17; }
		
		//SKW_LESSEQUAL
		public RuleCall getSKW_LESSEQUALTerminalRuleCall_18() { return cSKW_LESSEQUALTerminalRuleCall_18; }
		
		//SKW_MINUS
		public RuleCall getSKW_MINUSTerminalRuleCall_19() { return cSKW_MINUSTerminalRuleCall_19; }
		
		//SKW_MINUSMINUS
		public RuleCall getSKW_MINUSMINUSTerminalRuleCall_20() { return cSKW_MINUSMINUSTerminalRuleCall_20; }
		
		//SKW_MOD
		public RuleCall getSKW_MODTerminalRuleCall_21() { return cSKW_MODTerminalRuleCall_21; }
		
		//SKW_NOT
		public RuleCall getSKW_NOTTerminalRuleCall_22() { return cSKW_NOTTerminalRuleCall_22; }
		
		//SKW_NOTEQUAL
		public RuleCall getSKW_NOTEQUALTerminalRuleCall_23() { return cSKW_NOTEQUALTerminalRuleCall_23; }
		
		//SKW_OR
		public RuleCall getSKW_ORTerminalRuleCall_24() { return cSKW_ORTerminalRuleCall_24; }
		
		//SKW_OROR
		public RuleCall getSKW_ORORTerminalRuleCall_25() { return cSKW_ORORTerminalRuleCall_25; }
		
		//SKW_PLUS
		public RuleCall getSKW_PLUSTerminalRuleCall_26() { return cSKW_PLUSTerminalRuleCall_26; }
		
		//SKW_PLUSPLUS
		public RuleCall getSKW_PLUSPLUSTerminalRuleCall_27() { return cSKW_PLUSPLUSTerminalRuleCall_27; }
		
		//SKW_QUESTION
		public RuleCall getSKW_QUESTIONTerminalRuleCall_28() { return cSKW_QUESTIONTerminalRuleCall_28; }
		
		//SKW_RIGHTBRACE
		public RuleCall getSKW_RIGHTBRACETerminalRuleCall_29() { return cSKW_RIGHTBRACETerminalRuleCall_29; }
		
		//SKW_RIGHTBRACKET
		public RuleCall getSKW_RIGHTBRACKETTerminalRuleCall_30() { return cSKW_RIGHTBRACKETTerminalRuleCall_30; }
		
		//SKW_RIGHTPAREN
		public RuleCall getSKW_RIGHTPARENTerminalRuleCall_31() { return cSKW_RIGHTPARENTerminalRuleCall_31; }
		
		//SKW_RIGHTSHIFT
		public RuleCall getSKW_RIGHTSHIFTTerminalRuleCall_32() { return cSKW_RIGHTSHIFTTerminalRuleCall_32; }
		
		//SKW_SEMI
		public RuleCall getSKW_SEMITerminalRuleCall_33() { return cSKW_SEMITerminalRuleCall_33; }
		
		//SKW_SINGLEQUOTE
		public RuleCall getSKW_SINGLEQUOTETerminalRuleCall_34() { return cSKW_SINGLEQUOTETerminalRuleCall_34; }
		
		//SKW_STAR
		public RuleCall getSKW_STARTerminalRuleCall_35() { return cSKW_STARTerminalRuleCall_35; }
		
		//SKW_TILDE
		public RuleCall getSKW_TILDETerminalRuleCall_36() { return cSKW_TILDETerminalRuleCall_36; }
	}
	
	
	private final CommonElements pCommon;
	private final ExpressionElements pExpression;
	private final ConstantExpressionElements pConstantExpression;
	private final ConditionalExpressionElements pConditionalExpression;
	private final LogicalOrExpressionElements pLogicalOrExpression;
	private final LogicalAndExpressionElements pLogicalAndExpression;
	private final InclusiveOrExpressionElements pInclusiveOrExpression;
	private final ExclusiveOrExpressionElements pExclusiveOrExpression;
	private final AndExpressionElements pAndExpression;
	private final EqualityExpressionElements pEqualityExpression;
	private final RelationalExpressionElements pRelationalExpression;
	private final ShiftExpressionElements pShiftExpression;
	private final AdditiveExpressionElements pAdditiveExpression;
	private final MultiplicativeExpressionElements pMultiplicativeExpression;
	private final CastExpressionElements pCastExpression;
	private final UnaryExpressionElements pUnaryExpression;
	private final UnaryOperatorElements pUnaryOperator;
	private final PostfixExpressionElements pPostfixExpression;
	private final PostfixExpressionSuffixArgumentElements pPostfixExpressionSuffixArgument;
	private final ArgumentExpressionListElements pArgumentExpressionList;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final Constant1Elements pConstant1;
	private final Constant2Elements pConstant2;
	private final SpecialKeywordsElements pSpecialKeywords;
	private final TerminalRule tSKW_AND;
	private final TerminalRule tSKW_ANDAND;
	private final TerminalRule tSKW_ASSIGN;
	private final TerminalRule tSKW_BACKSLASH;
	private final TerminalRule tSKW_CARET;
	private final TerminalRule tSKW_COMMA;
	private final TerminalRule tSKW_COLON;
	private final TerminalRule tSKW_DIV;
	private final TerminalRule tSKW_DOLLAR;
	private final TerminalRule tSKW_DOT;
	private final TerminalRule tSKW_DOUBLEQUOTE;
	private final TerminalRule tSKW_EQUAL;
	private final TerminalRule tSKW_GREATER;
	private final TerminalRule tSKW_GREATEREQUAL;
	private final TerminalRule tSKW_LEFTBRACE;
	private final TerminalRule tSKW_LEFTBRACKET;
	private final TerminalRule tSKW_LEFTPAREN;
	private final TerminalRule tSKW_LEFTSHIFT;
	private final TerminalRule tSKW_LESS;
	private final TerminalRule tSKW_LESSEQUAL;
	private final TerminalRule tSKW_MINUS;
	private final TerminalRule tSKW_MINUSMINUS;
	private final TerminalRule tSKW_MOD;
	private final TerminalRule tSKW_NOT;
	private final TerminalRule tSKW_NOTEQUAL;
	private final TerminalRule tSKW_OR;
	private final TerminalRule tSKW_OROR;
	private final TerminalRule tSKW_PLUS;
	private final TerminalRule tSKW_PLUSPLUS;
	private final TerminalRule tSKW_QUESTION;
	private final TerminalRule tSKW_RIGHTBRACE;
	private final TerminalRule tSKW_RIGHTBRACKET;
	private final TerminalRule tSKW_RIGHTPAREN;
	private final TerminalRule tSKW_RIGHTSHIFT;
	private final TerminalRule tSKW_SEMI;
	private final TerminalRule tSKW_SINGLEQUOTE;
	private final TerminalRule tSKW_STAR;
	private final TerminalRule tSKW_TILDE;
	private final TerminalRule tSKW_UNDERSCORE;
	private final TerminalRule tID;
	private final TerminalRule tIDENTIFIER;
	private final TerminalRule tLETTER;
	private final TerminalRule tCHAR_LITERAL;
	private final TerminalRule tSTRING_LITERAL;
	private final TerminalRule tHEX_LITERAL;
	private final TerminalRule tDECIMAL_LITERAL;
	private final TerminalRule tOCTAL_LITERAL;
	private final TerminalRule tBIN_LITERAL;
	private final TerminalRule tHEX_DIGIT;
	private final TerminalRule tINTEGER_TYPE_SUFFIX;
	private final TerminalRule tFLOAT_LITERAL;
	private final TerminalRule tEXPONENT;
	private final TerminalRule tFLOAT_TYPE_SUFFIX;
	private final TerminalRule tESCAPE_SEQUENCE;
	private final TerminalRule tOCTAL_ESCAPE;
	private final TerminalRule tLINEFEED;
	private final TerminalRule tCARRIAGERETURN;
	private final TerminalRule tNEWLINE;
	private final TerminalRule tLINEBREAK;
	private final TerminalRule tSPACE;
	private final TerminalRule tTAB;
	private final TerminalRule tWHITESPACE;
	private final TerminalRule tBLOCK_COMMENT;
	private final TerminalRule tLINE_COMMENT;
	private final TerminalRule tSPECIAL;
	
	private final Grammar grammar;

	@Inject
	public CommonGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pCommon = new CommonElements();
		this.pExpression = new ExpressionElements();
		this.pConstantExpression = new ConstantExpressionElements();
		this.pConditionalExpression = new ConditionalExpressionElements();
		this.pLogicalOrExpression = new LogicalOrExpressionElements();
		this.pLogicalAndExpression = new LogicalAndExpressionElements();
		this.pInclusiveOrExpression = new InclusiveOrExpressionElements();
		this.pExclusiveOrExpression = new ExclusiveOrExpressionElements();
		this.pAndExpression = new AndExpressionElements();
		this.pEqualityExpression = new EqualityExpressionElements();
		this.pRelationalExpression = new RelationalExpressionElements();
		this.pShiftExpression = new ShiftExpressionElements();
		this.pAdditiveExpression = new AdditiveExpressionElements();
		this.pMultiplicativeExpression = new MultiplicativeExpressionElements();
		this.pCastExpression = new CastExpressionElements();
		this.pUnaryExpression = new UnaryExpressionElements();
		this.pUnaryOperator = new UnaryOperatorElements();
		this.pPostfixExpression = new PostfixExpressionElements();
		this.pPostfixExpressionSuffixArgument = new PostfixExpressionSuffixArgumentElements();
		this.pArgumentExpressionList = new ArgumentExpressionListElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pConstant1 = new Constant1Elements();
		this.pConstant2 = new Constant2Elements();
		this.pSpecialKeywords = new SpecialKeywordsElements();
		this.tSKW_AND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.SKW_AND");
		this.tSKW_ANDAND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.SKW_ANDAND");
		this.tSKW_ASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.SKW_ASSIGN");
		this.tSKW_BACKSLASH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.SKW_BACKSLASH");
		this.tSKW_CARET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.SKW_CARET");
		this.tSKW_COMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.SKW_COMMA");
		this.tSKW_COLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.SKW_COLON");
		this.tSKW_DIV = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.SKW_DIV");
		this.tSKW_DOLLAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.SKW_DOLLAR");
		this.tSKW_DOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.SKW_DOT");
		this.tSKW_DOUBLEQUOTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.SKW_DOUBLEQUOTE");
		this.tSKW_EQUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.SKW_EQUAL");
		this.tSKW_GREATER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.SKW_GREATER");
		this.tSKW_GREATEREQUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.SKW_GREATEREQUAL");
		this.tSKW_LEFTBRACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.SKW_LEFTBRACE");
		this.tSKW_LEFTBRACKET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.SKW_LEFTBRACKET");
		this.tSKW_LEFTPAREN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.SKW_LEFTPAREN");
		this.tSKW_LEFTSHIFT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.SKW_LEFTSHIFT");
		this.tSKW_LESS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.SKW_LESS");
		this.tSKW_LESSEQUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.SKW_LESSEQUAL");
		this.tSKW_MINUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.SKW_MINUS");
		this.tSKW_MINUSMINUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.SKW_MINUSMINUS");
		this.tSKW_MOD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.SKW_MOD");
		this.tSKW_NOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.SKW_NOT");
		this.tSKW_NOTEQUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.SKW_NOTEQUAL");
		this.tSKW_OR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.SKW_OR");
		this.tSKW_OROR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.SKW_OROR");
		this.tSKW_PLUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.SKW_PLUS");
		this.tSKW_PLUSPLUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.SKW_PLUSPLUS");
		this.tSKW_QUESTION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.SKW_QUESTION");
		this.tSKW_RIGHTBRACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.SKW_RIGHTBRACE");
		this.tSKW_RIGHTBRACKET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.SKW_RIGHTBRACKET");
		this.tSKW_RIGHTPAREN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.SKW_RIGHTPAREN");
		this.tSKW_RIGHTSHIFT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.SKW_RIGHTSHIFT");
		this.tSKW_SEMI = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.SKW_SEMI");
		this.tSKW_SINGLEQUOTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.SKW_SINGLEQUOTE");
		this.tSKW_STAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.SKW_STAR");
		this.tSKW_TILDE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.SKW_TILDE");
		this.tSKW_UNDERSCORE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.SKW_UNDERSCORE");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.ID");
		this.tIDENTIFIER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.IDENTIFIER");
		this.tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.LETTER");
		this.tCHAR_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.CHAR_LITERAL");
		this.tSTRING_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.STRING_LITERAL");
		this.tHEX_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.HEX_LITERAL");
		this.tDECIMAL_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.DECIMAL_LITERAL");
		this.tOCTAL_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.OCTAL_LITERAL");
		this.tBIN_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.BIN_LITERAL");
		this.tHEX_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.HEX_DIGIT");
		this.tINTEGER_TYPE_SUFFIX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.INTEGER_TYPE_SUFFIX");
		this.tFLOAT_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.FLOAT_LITERAL");
		this.tEXPONENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.EXPONENT");
		this.tFLOAT_TYPE_SUFFIX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.FLOAT_TYPE_SUFFIX");
		this.tESCAPE_SEQUENCE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.ESCAPE_SEQUENCE");
		this.tOCTAL_ESCAPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.OCTAL_ESCAPE");
		this.tLINEFEED = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.LINEFEED");
		this.tCARRIAGERETURN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.CARRIAGERETURN");
		this.tNEWLINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.NEWLINE");
		this.tLINEBREAK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.LINEBREAK");
		this.tSPACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.SPACE");
		this.tTAB = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.TAB");
		this.tWHITESPACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.WHITESPACE");
		this.tBLOCK_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.BLOCK_COMMENT");
		this.tLINE_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.LINE_COMMENT");
		this.tSPECIAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.common.Common.SPECIAL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("at.jku.weiner.c.common.Common".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Common:
	//	{Common};
	public CommonElements getCommonAccess() {
		return pCommon;
	}
	
	public ParserRule getCommonRule() {
		return getCommonAccess().getRule();
	}
	
	//Expression hidden(WHITESPACE, BLOCK_COMMENT, LINE_COMMENT, LINEBREAK):
	//	{Expression} expression=ConditionalExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//ConstantExpression Expression hidden(WHITESPACE, BLOCK_COMMENT, LINE_COMMENT, LINEBREAK):
	//	{ConstantExpression} expr=ConditionalExpression
	public ConstantExpressionElements getConstantExpressionAccess() {
		return pConstantExpression;
	}
	
	public ParserRule getConstantExpressionRule() {
		return getConstantExpressionAccess().getRule();
	}
	
	//ConditionalExpression Expression:
	//	{ConditionalExpression} expr=LogicalOrExpression (SKW_QUESTION qExpr=Expression SKW_COLON
	//	cExpr=ConditionalExpression)?
	public ConditionalExpressionElements getConditionalExpressionAccess() {
		return pConditionalExpression;
	}
	
	public ParserRule getConditionalExpressionRule() {
		return getConditionalExpressionAccess().getRule();
	}
	
	//LogicalOrExpression Expression:
	//	{LogicalOrExpression} expr+=LogicalAndExpression (SKW_OROR expr+=LogicalAndExpression)*
	public LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return pLogicalOrExpression;
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}
	
	//LogicalAndExpression Expression:
	//	{LogicalAndExpression} expr+=InclusiveOrExpression (SKW_ANDAND expr+=InclusiveOrExpression)*
	public LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return pLogicalAndExpression;
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}
	
	//InclusiveOrExpression Expression:
	//	{InclusiveOrExpression} expr+=ExclusiveOrExpression (SKW_OR expr+=ExclusiveOrExpression)*
	public InclusiveOrExpressionElements getInclusiveOrExpressionAccess() {
		return pInclusiveOrExpression;
	}
	
	public ParserRule getInclusiveOrExpressionRule() {
		return getInclusiveOrExpressionAccess().getRule();
	}
	
	//ExclusiveOrExpression Expression:
	//	{ExclusiveOrExpression} expr+=AndExpression (SKW_CARET expr+=AndExpression)*
	public ExclusiveOrExpressionElements getExclusiveOrExpressionAccess() {
		return pExclusiveOrExpression;
	}
	
	public ParserRule getExclusiveOrExpressionRule() {
		return getExclusiveOrExpressionAccess().getRule();
	}
	
	//AndExpression Expression:
	//	{AndExpression} expr+=EqualityExpression (SKW_AND expr+=EqualityExpression)*
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	//EqualityExpression Expression:
	//	{EqualityExpression} expr+=RelationalExpression ((op+=SKW_EQUAL
	//	| op+=SKW_NOTEQUAL) expr+=RelationalExpression)*
	public EqualityExpressionElements getEqualityExpressionAccess() {
		return pEqualityExpression;
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}
	
	//RelationalExpression Expression:
	//	{RelationalExpression} expr+=ShiftExpression ((op+=SKW_LESS
	//	| op+=SKW_GREATER
	//	| op+=SKW_LESSEQUAL
	//	| op+=SKW_GREATEREQUAL) expr+=ShiftExpression)*
	public RelationalExpressionElements getRelationalExpressionAccess() {
		return pRelationalExpression;
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}
	
	//ShiftExpression Expression:
	//	{ShiftExpression} expr+=AdditiveExpression ((op+=SKW_LEFTSHIFT
	//	| op+=SKW_RIGHTSHIFT) expr+=AdditiveExpression)*
	public ShiftExpressionElements getShiftExpressionAccess() {
		return pShiftExpression;
	}
	
	public ParserRule getShiftExpressionRule() {
		return getShiftExpressionAccess().getRule();
	}
	
	//AdditiveExpression Expression:
	//	{AdditiveExpression} expr+=MultiplicativeExpression ((op+=SKW_PLUS
	//	| op+=SKW_MINUS) expr+=MultiplicativeExpression)*
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return pAdditiveExpression;
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}
	
	//MultiplicativeExpression Expression:
	//	{MultiplicativeExpression} expr+=CastExpression ((op+=SKW_STAR
	//	| op+=SKW_DIV
	//	| op+=SKW_MOD) expr+=CastExpression)*
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return pMultiplicativeExpression;
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}
	
	//CastExpression Expression:
	//	{CastExpression} expr=UnaryExpression
	public CastExpressionElements getCastExpressionAccess() {
		return pCastExpression;
	}
	
	public ParserRule getCastExpressionRule() {
		return getCastExpressionAccess().getRule();
	}
	
	//UnaryExpression Expression:
	//	{UnaryExpression} (expr=PostfixExpression
	//	//|	plusplus=SKW_PLUSPLUS expr=UnaryExpression
	//	//|	minusminus=SKW_MINUSMINUS expr=UnaryExpression
	//	| op=UnaryOperator expr=CastExpression
	//	//|	sizeOf=SKW_SIZEOF SKW_LEFTPAREN typeName=TypeName SKW_RIGHTPAREN
	//	//|	sizeOf=SKW_SIZEOF expr=UnaryExpression 
	//	//|	ALIGNOF LEFTPAREN typeName=typeName RIGHTPAREN
	//	//|	andand=SKW_ANDAND id=ID // GCC extension address of label
	//)
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return pUnaryExpression;
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}
	
	//UnaryOperator:
	//	{UnaryOperator} op=SKW_AND
	//	| op=SKW_STAR
	//	| op=SKW_PLUS
	//	| op=SKW_MINUS
	//	| op=SKW_TILDE
	//	| op=SKW_NOT;
	public UnaryOperatorElements getUnaryOperatorAccess() {
		return pUnaryOperator;
	}
	
	public ParserRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}
	
	//PostfixExpression Expression:
	//	{PostfixExpression} (expr=PrimaryExpression
	//	/ *	(
	//	|	('__extension__' LEFTPAREN typeName RIGHTPAREN LEFTBRACE initializerList=initializerList) 
	//			(COMMA? RIGHTBRACE)
	//	)
	//	* /
	//	suffix+=PostfixExpressionSuffixArgument
	//	//|	suffix+=PostfixExpressionSuffixDot
	//	//|	suffix+=PostfixExpressionSuffixArrow
	//	//	suffix+=PostfixExpressionSuffixPlusPlus
	//	//|	suffix+=PostfixExpressionSuffixMinusMinus
	// *)
	public PostfixExpressionElements getPostfixExpressionAccess() {
		return pPostfixExpression;
	}
	
	public ParserRule getPostfixExpressionRule() {
		return getPostfixExpressionAccess().getRule();
	}
	
	/// *
	//PostfixExpressionSuffixArray returns PostfixExpressionSuffix:
	//	{PostfixExpressionSuffixArray}
	//	SKW_LEFTBRACKET arrayExpr=Expression SKW_RIGHTBRACKET
	//;
	// * / PostfixExpressionSuffixArgument PostfixExpressionSuffix:
	//	{PostfixExpressionSuffixArgument} SKW_LEFTPAREN argumentExpressionList=ArgumentExpressionList? SKW_RIGHTPAREN
	public PostfixExpressionSuffixArgumentElements getPostfixExpressionSuffixArgumentAccess() {
		return pPostfixExpressionSuffixArgument;
	}
	
	public ParserRule getPostfixExpressionSuffixArgumentRule() {
		return getPostfixExpressionSuffixArgumentAccess().getRule();
	}
	
	/// *
	//PostfixExpressionSuffixDot returns PostfixExpressionSuffix:
	//	{PostfixExpressionSuffixDot}
	//	SKW_DOT id=ID
	//;
	//
	//PostfixExpressionSuffixArrow returns PostfixExpressionSuffix:
	//	{PostfixExpressionSuffixArrow}
	//	SKW_ARROW id=ID
	//;
	//
	//
	//PostfixExpressionSuffixPlusPlus returns PostfixExpressionSuffix:
	//	{PostfixExpressionSuffixPlusPlus}
	//	SKW_PLUSPLUS
	//;
	//
	//PostfixExpressionSuffixMinusMinus returns PostfixExpressionSuffix:
	//	{PostfixExpressionSuffixMinusMinus}
	//	SKW_MINUSMINUS
	//;
	// * / ArgumentExpressionList:
	//	expr+=ConditionalExpression (SKW_COMMA expr+=ConditionalExpression)*;
	public ArgumentExpressionListElements getArgumentExpressionListAccess() {
		return pArgumentExpressionList;
	}
	
	public ParserRule getArgumentExpressionListRule() {
		return getArgumentExpressionListAccess().getRule();
	}
	
	//PrimaryExpression Expression:
	//	{PrimaryExpression} (const=Constant1
	//	//|	string+=STRING_LITERAL+ // reachable over Constant!
	//	SKW_LEFTPAREN expr=Expression SKW_RIGHTPAREN)
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//Constant1:
	//	HEX_LITERAL
	//	| OCTAL_LITERAL
	//	| DECIMAL_LITERAL
	//	| CHAR_LITERAL
	//	| STRING_LITERAL
	//	| FLOAT_LITERAL
	//	| BIN_LITERAL;
	public Constant1Elements getConstant1Access() {
		return pConstant1;
	}
	
	public ParserRule getConstant1Rule() {
		return getConstant1Access().getRule();
	}
	
	//Constant2:
	//	{Constant2} (hex=HEX_LITERAL
	//	| oct=OCTAL_LITERAL
	//	| dec=DECIMAL_LITERAL
	//	| ch=CHAR_LITERAL
	//	| str=STRING_LITERAL
	//	| float=FLOAT_LITERAL
	//	| bin=BIN_LITERAL);
	public Constant2Elements getConstant2Access() {
		return pConstant2;
	}
	
	public ParserRule getConstant2Rule() {
		return getConstant2Access().getRule();
	}
	
	//// keywords
	//// special keywords
	//SpecialKeywords:
	//	SKW_AND
	//	| SKW_ANDAND
	//	| SKW_ASSIGN
	//	| SKW_BACKSLASH
	//	| SKW_CARET
	//	| SKW_COMMA
	//	| SKW_COLON
	//	| SKW_DIV
	//	| SKW_DOT
	//	| SKW_DOUBLEQUOTE
	//	| SKW_EQUAL
	//	| SKW_GREATER
	//	| SKW_GREATEREQUAL
	//	| SKW_LEFTBRACE
	//	| SKW_LEFTBRACKET
	//	| SKW_LEFTPAREN
	//	| SKW_LEFTSHIFT
	//	| SKW_LESS
	//	| SKW_LESSEQUAL
	//	| SKW_MINUS
	//	| SKW_MINUSMINUS
	//	| SKW_MOD
	//	| SKW_NOT
	//	| SKW_NOTEQUAL
	//	| SKW_OR
	//	| SKW_OROR
	//	| SKW_PLUS
	//	| SKW_PLUSPLUS
	//	| SKW_QUESTION
	//	| SKW_RIGHTBRACE
	//	| SKW_RIGHTBRACKET
	//	| SKW_RIGHTPAREN
	//	| SKW_RIGHTSHIFT
	//	| SKW_SEMI
	//	| SKW_SINGLEQUOTE
	//	| SKW_STAR
	//	| SKW_TILDE;
	public SpecialKeywordsElements getSpecialKeywordsAccess() {
		return pSpecialKeywords;
	}
	
	public ParserRule getSpecialKeywordsRule() {
		return getSpecialKeywordsAccess().getRule();
	}
	
	//terminal SKW_AND:
	//	'&';
	public TerminalRule getSKW_ANDRule() {
		return tSKW_AND;
	}
	
	//terminal SKW_ANDAND:
	//	SKW_AND SKW_AND;
	public TerminalRule getSKW_ANDANDRule() {
		return tSKW_ANDAND;
	}
	
	//terminal SKW_ASSIGN:
	//	'=';
	public TerminalRule getSKW_ASSIGNRule() {
		return tSKW_ASSIGN;
	}
	
	//terminal SKW_BACKSLASH:
	//	'\\';
	public TerminalRule getSKW_BACKSLASHRule() {
		return tSKW_BACKSLASH;
	}
	
	//terminal SKW_CARET:
	//	'^';
	public TerminalRule getSKW_CARETRule() {
		return tSKW_CARET;
	}
	
	//terminal SKW_COMMA:
	//	',';
	public TerminalRule getSKW_COMMARule() {
		return tSKW_COMMA;
	}
	
	//terminal SKW_COLON:
	//	':';
	public TerminalRule getSKW_COLONRule() {
		return tSKW_COLON;
	}
	
	//terminal SKW_DIV:
	//	'/';
	public TerminalRule getSKW_DIVRule() {
		return tSKW_DIV;
	}
	
	//terminal fragment SKW_DOLLAR:
	//	'$';
	public TerminalRule getSKW_DOLLARRule() {
		return tSKW_DOLLAR;
	}
	
	//terminal SKW_DOT:
	//	'.';
	public TerminalRule getSKW_DOTRule() {
		return tSKW_DOT;
	}
	
	//terminal SKW_DOUBLEQUOTE:
	//	'"';
	public TerminalRule getSKW_DOUBLEQUOTERule() {
		return tSKW_DOUBLEQUOTE;
	}
	
	//terminal SKW_EQUAL:
	//	SKW_ASSIGN SKW_ASSIGN;
	public TerminalRule getSKW_EQUALRule() {
		return tSKW_EQUAL;
	}
	
	//terminal SKW_GREATER:
	//	'>';
	public TerminalRule getSKW_GREATERRule() {
		return tSKW_GREATER;
	}
	
	//terminal SKW_GREATEREQUAL:
	//	SKW_GREATER SKW_ASSIGN;
	public TerminalRule getSKW_GREATEREQUALRule() {
		return tSKW_GREATEREQUAL;
	}
	
	//terminal SKW_LEFTBRACE:
	//	'{';
	public TerminalRule getSKW_LEFTBRACERule() {
		return tSKW_LEFTBRACE;
	}
	
	//terminal SKW_LEFTBRACKET:
	//	'[';
	public TerminalRule getSKW_LEFTBRACKETRule() {
		return tSKW_LEFTBRACKET;
	}
	
	//terminal SKW_LEFTPAREN:
	//	'(';
	public TerminalRule getSKW_LEFTPARENRule() {
		return tSKW_LEFTPAREN;
	}
	
	//terminal SKW_LEFTSHIFT:
	//	SKW_LESS SKW_LESS;
	public TerminalRule getSKW_LEFTSHIFTRule() {
		return tSKW_LEFTSHIFT;
	}
	
	//terminal SKW_LESS:
	//	'<';
	public TerminalRule getSKW_LESSRule() {
		return tSKW_LESS;
	}
	
	//terminal SKW_LESSEQUAL:
	//	SKW_LESS SKW_ASSIGN;
	public TerminalRule getSKW_LESSEQUALRule() {
		return tSKW_LESSEQUAL;
	}
	
	//terminal SKW_MINUS:
	//	'-';
	public TerminalRule getSKW_MINUSRule() {
		return tSKW_MINUS;
	}
	
	//terminal SKW_MINUSMINUS:
	//	SKW_MINUS SKW_MINUS;
	public TerminalRule getSKW_MINUSMINUSRule() {
		return tSKW_MINUSMINUS;
	}
	
	//terminal SKW_MOD:
	//	'%';
	public TerminalRule getSKW_MODRule() {
		return tSKW_MOD;
	}
	
	//terminal SKW_NOT:
	//	'!';
	public TerminalRule getSKW_NOTRule() {
		return tSKW_NOT;
	}
	
	//terminal SKW_NOTEQUAL:
	//	SKW_NOT SKW_ASSIGN;
	public TerminalRule getSKW_NOTEQUALRule() {
		return tSKW_NOTEQUAL;
	}
	
	//terminal SKW_OR:
	//	'|';
	public TerminalRule getSKW_ORRule() {
		return tSKW_OR;
	}
	
	//terminal SKW_OROR:
	//	SKW_OR SKW_OR;
	public TerminalRule getSKW_ORORRule() {
		return tSKW_OROR;
	}
	
	//terminal SKW_PLUS:
	//	'+';
	public TerminalRule getSKW_PLUSRule() {
		return tSKW_PLUS;
	}
	
	//terminal SKW_PLUSPLUS:
	//	SKW_PLUS SKW_PLUS;
	public TerminalRule getSKW_PLUSPLUSRule() {
		return tSKW_PLUSPLUS;
	}
	
	//terminal SKW_QUESTION:
	//	'?';
	public TerminalRule getSKW_QUESTIONRule() {
		return tSKW_QUESTION;
	}
	
	//terminal SKW_RIGHTBRACE:
	//	'}';
	public TerminalRule getSKW_RIGHTBRACERule() {
		return tSKW_RIGHTBRACE;
	}
	
	//terminal SKW_RIGHTBRACKET:
	//	']';
	public TerminalRule getSKW_RIGHTBRACKETRule() {
		return tSKW_RIGHTBRACKET;
	}
	
	//terminal SKW_RIGHTPAREN:
	//	')';
	public TerminalRule getSKW_RIGHTPARENRule() {
		return tSKW_RIGHTPAREN;
	}
	
	//terminal SKW_RIGHTSHIFT:
	//	SKW_GREATER SKW_GREATER;
	public TerminalRule getSKW_RIGHTSHIFTRule() {
		return tSKW_RIGHTSHIFT;
	}
	
	//terminal SKW_SEMI:
	//	';';
	public TerminalRule getSKW_SEMIRule() {
		return tSKW_SEMI;
	}
	
	//terminal SKW_SINGLEQUOTE:
	//	'\'';
	public TerminalRule getSKW_SINGLEQUOTERule() {
		return tSKW_SINGLEQUOTE;
	}
	
	//terminal SKW_STAR:
	//	'*';
	public TerminalRule getSKW_STARRule() {
		return tSKW_STAR;
	}
	
	//terminal SKW_TILDE:
	//	'~';
	public TerminalRule getSKW_TILDERule() {
		return tSKW_TILDE;
	}
	
	//terminal fragment SKW_UNDERSCORE:
	//	'_';
	public TerminalRule getSKW_UNDERSCORERule() {
		return tSKW_UNDERSCORE;
	}
	
	//terminal ID:
	//	IDENTIFIER;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal fragment IDENTIFIER:
	//	LETTER (LETTER | '0'..'9')*;
	public TerminalRule getIDENTIFIERRule() {
		return tIDENTIFIER;
	}
	
	//terminal fragment LETTER:
	//	SKW_DOLLAR
	//	| 'A'..'Z'
	//	| 'a'..'z'
	//	| SKW_UNDERSCORE;
	public TerminalRule getLETTERRule() {
		return tLETTER;
	}
	
	//terminal CHAR_LITERAL:
	//	SKW_SINGLEQUOTE (ESCAPE_SEQUENCE | !(SKW_SINGLEQUOTE | SKW_BACKSLASH)) SKW_SINGLEQUOTE;
	public TerminalRule getCHAR_LITERALRule() {
		return tCHAR_LITERAL;
	}
	
	//terminal STRING_LITERAL:
	//	SKW_DOUBLEQUOTE (ESCAPE_SEQUENCE | !(SKW_BACKSLASH | SKW_DOUBLEQUOTE))* SKW_DOUBLEQUOTE;
	public TerminalRule getSTRING_LITERALRule() {
		return tSTRING_LITERAL;
	}
	
	//terminal HEX_LITERAL:
	//	'0' ('x' | 'X') HEX_DIGIT+ INTEGER_TYPE_SUFFIX?;
	public TerminalRule getHEX_LITERALRule() {
		return tHEX_LITERAL;
	}
	
	//terminal DECIMAL_LITERAL:
	//	('0' | '1'..'9' '0'..'9'*) INTEGER_TYPE_SUFFIX?;
	public TerminalRule getDECIMAL_LITERALRule() {
		return tDECIMAL_LITERAL;
	}
	
	//terminal OCTAL_LITERAL:
	//	'0' '0'..'7'+ INTEGER_TYPE_SUFFIX?;
	public TerminalRule getOCTAL_LITERALRule() {
		return tOCTAL_LITERAL;
	}
	
	//terminal BIN_LITERAL:
	//	('0b' | '0B') '0'..'1'+;
	public TerminalRule getBIN_LITERALRule() {
		return tBIN_LITERAL;
	}
	
	//terminal fragment HEX_DIGIT:
	//	'0'..'9' | 'a'..'f' | 'A'..'F';
	public TerminalRule getHEX_DIGITRule() {
		return tHEX_DIGIT;
	}
	
	//terminal fragment INTEGER_TYPE_SUFFIX:
	//	('u' | 'U')? ('l' | 'L') | ('u' | 'U') ('l' | 'L')?;
	public TerminalRule getINTEGER_TYPE_SUFFIXRule() {
		return tINTEGER_TYPE_SUFFIX;
	}
	
	//terminal FLOAT_LITERAL:
	//	'0'..'9'+ SKW_DOT '0'..'9'* EXPONENT? FLOAT_TYPE_SUFFIX?
	//	| SKW_DOT '0'..'9'+ EXPONENT? FLOAT_TYPE_SUFFIX?
	//	| '0'..'9'+ EXPONENT FLOAT_TYPE_SUFFIX?
	//	| '0'..'9'+ EXPONENT? FLOAT_TYPE_SUFFIX;
	public TerminalRule getFLOAT_LITERALRule() {
		return tFLOAT_LITERAL;
	}
	
	//terminal fragment EXPONENT:
	//	('e' | 'E') ('+' | '-')? '0'..'9'+;
	public TerminalRule getEXPONENTRule() {
		return tEXPONENT;
	}
	
	//terminal fragment FLOAT_TYPE_SUFFIX:
	//	'f' | 'F' | 'd' | 'D';
	public TerminalRule getFLOAT_TYPE_SUFFIXRule() {
		return tFLOAT_TYPE_SUFFIX;
	}
	
	//terminal fragment ESCAPE_SEQUENCE:
	//	SKW_BACKSLASH ('b' | 't' | 'n' | 'f' | 'r' | '\"' | SKW_SINGLEQUOTE | SKW_BACKSLASH) | OCTAL_ESCAPE;
	public TerminalRule getESCAPE_SEQUENCERule() {
		return tESCAPE_SEQUENCE;
	}
	
	//terminal fragment OCTAL_ESCAPE:
	//	SKW_BACKSLASH '0'..'3' '0'..'7' '0'..'7' | SKW_BACKSLASH '0'..'7' '0'..'7' | SKW_BACKSLASH '0'..'7';
	public TerminalRule getOCTAL_ESCAPERule() {
		return tOCTAL_ESCAPE;
	}
	
	//terminal fragment LINEFEED:
	//	'\n';
	public TerminalRule getLINEFEEDRule() {
		return tLINEFEED;
	}
	
	//terminal fragment CARRIAGERETURN:
	//	'\r';
	public TerminalRule getCARRIAGERETURNRule() {
		return tCARRIAGERETURN;
	}
	
	//terminal NEWLINE:
	//	CARRIAGERETURN | LINEFEED;
	public TerminalRule getNEWLINERule() {
		return tNEWLINE;
	}
	
	//terminal LINEBREAK:
	//	SKW_BACKSLASH NEWLINE;
	public TerminalRule getLINEBREAKRule() {
		return tLINEBREAK;
	}
	
	//terminal fragment SPACE:
	//	' ';
	public TerminalRule getSPACERule() {
		return tSPACE;
	}
	
	//terminal fragment TAB:
	//	'\t';
	public TerminalRule getTABRule() {
		return tTAB;
	}
	
	//terminal WHITESPACE:
	//	SPACE | TAB;
	public TerminalRule getWHITESPACERule() {
		return tWHITESPACE;
	}
	
	//terminal BLOCK_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getBLOCK_COMMENTRule() {
		return tBLOCK_COMMENT;
	}
	
	//terminal LINE_COMMENT:
	//	'//' !NEWLINE*;
	public TerminalRule getLINE_COMMENTRule() {
		return tLINE_COMMENT;
	}
	
	//terminal SPECIAL:
	//	.;
	public TerminalRule getSPECIALRule() {
		return tSPECIAL;
	}
}
