/*
 * generated by Xtext 2.9.0-SNAPSHOT
 */
package at.jku.weiner.c.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractParserRuleElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CommonGrammarAccess extends AbstractGrammarElementFinder {
	
	public class CommonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.Common.Common");
		private final Action cCommonAction = (Action)rule.eContents().get(1);
		
		//Common:
		//	{Common};
		@Override public ParserRule getRule() { return rule; }
		
		//{Common}
		public Action getCommonAction() { return cCommonAction; }
	}
	public class SpecialKeywordsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.Common.SpecialKeywords");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSKW_ANDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSKW_ANDANDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSKW_ASSIGNTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSKW_BACKSLASHTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSKW_CARETTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSKW_COMMATerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSKW_COLONTerminalRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cSKW_DIVTerminalRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cSKW_DOTTerminalRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cSKW_DOUBLEQUOTETerminalRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cSKW_EQUALTerminalRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cSKW_GREATERTerminalRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cSKW_GREATEREQUALTerminalRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cSKW_LEFTBRACETerminalRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cSKW_LEFTBRACKETTerminalRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cSKW_LEFTPARENTerminalRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cSKW_LEFTSHIFTTerminalRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cSKW_LESSTerminalRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cSKW_LESSEQUALTerminalRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cSKW_MINUSTerminalRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cSKW_MINUSMINUSTerminalRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		private final RuleCall cSKW_MODTerminalRuleCall_21 = (RuleCall)cAlternatives.eContents().get(21);
		private final RuleCall cSKW_NOTTerminalRuleCall_22 = (RuleCall)cAlternatives.eContents().get(22);
		private final RuleCall cSKW_NOTEQUALTerminalRuleCall_23 = (RuleCall)cAlternatives.eContents().get(23);
		private final RuleCall cSKW_ORTerminalRuleCall_24 = (RuleCall)cAlternatives.eContents().get(24);
		private final RuleCall cSKW_ORORTerminalRuleCall_25 = (RuleCall)cAlternatives.eContents().get(25);
		private final RuleCall cSKW_PLUSTerminalRuleCall_26 = (RuleCall)cAlternatives.eContents().get(26);
		private final RuleCall cSKW_PLUSPLUSTerminalRuleCall_27 = (RuleCall)cAlternatives.eContents().get(27);
		private final RuleCall cSKW_QUESTIONTerminalRuleCall_28 = (RuleCall)cAlternatives.eContents().get(28);
		private final RuleCall cSKW_RIGHTBRACETerminalRuleCall_29 = (RuleCall)cAlternatives.eContents().get(29);
		private final RuleCall cSKW_RIGHTBRACKETTerminalRuleCall_30 = (RuleCall)cAlternatives.eContents().get(30);
		private final RuleCall cSKW_RIGHTPARENTerminalRuleCall_31 = (RuleCall)cAlternatives.eContents().get(31);
		private final RuleCall cSKW_RIGHTSHIFTTerminalRuleCall_32 = (RuleCall)cAlternatives.eContents().get(32);
		private final RuleCall cSKW_SEMITerminalRuleCall_33 = (RuleCall)cAlternatives.eContents().get(33);
		private final RuleCall cSKW_SINGLEQUOTETerminalRuleCall_34 = (RuleCall)cAlternatives.eContents().get(34);
		private final RuleCall cSKW_STARTerminalRuleCall_35 = (RuleCall)cAlternatives.eContents().get(35);
		private final RuleCall cSKW_TILDETerminalRuleCall_36 = (RuleCall)cAlternatives.eContents().get(36);
		
		//// keywords
		//// special keywords
		//SpecialKeywords:
		//	SKW_AND
		//	| SKW_ANDAND
		//	| SKW_ASSIGN
		//	| SKW_BACKSLASH
		//	| SKW_CARET
		//	| SKW_COMMA
		//	| SKW_COLON
		//	| SKW_DIV
		//	| SKW_DOT
		//	| SKW_DOUBLEQUOTE
		//	| SKW_EQUAL
		//	| SKW_GREATER
		//	| SKW_GREATEREQUAL
		//	| SKW_LEFTBRACE
		//	| SKW_LEFTBRACKET
		//	| SKW_LEFTPAREN
		//	| SKW_LEFTSHIFT
		//	| SKW_LESS
		//	| SKW_LESSEQUAL
		//	| SKW_MINUS
		//	| SKW_MINUSMINUS
		//	| SKW_MOD
		//	| SKW_NOT
		//	| SKW_NOTEQUAL
		//	| SKW_OR
		//	| SKW_OROR
		//	| SKW_PLUS
		//	| SKW_PLUSPLUS
		//	| SKW_QUESTION
		//	| SKW_RIGHTBRACE
		//	| SKW_RIGHTBRACKET
		//	| SKW_RIGHTPAREN
		//	| SKW_RIGHTSHIFT
		//	| SKW_SEMI
		//	| SKW_SINGLEQUOTE
		//	| SKW_STAR
		//	| SKW_TILDE;
		@Override public ParserRule getRule() { return rule; }
		
		//SKW_AND | SKW_ANDAND | SKW_ASSIGN | SKW_BACKSLASH | SKW_CARET | SKW_COMMA | SKW_COLON | SKW_DIV | SKW_DOT |
		//SKW_DOUBLEQUOTE | SKW_EQUAL | SKW_GREATER | SKW_GREATEREQUAL | SKW_LEFTBRACE | SKW_LEFTBRACKET | SKW_LEFTPAREN |
		//SKW_LEFTSHIFT | SKW_LESS | SKW_LESSEQUAL | SKW_MINUS | SKW_MINUSMINUS | SKW_MOD | SKW_NOT | SKW_NOTEQUAL | SKW_OR |
		//SKW_OROR | SKW_PLUS | SKW_PLUSPLUS | SKW_QUESTION | SKW_RIGHTBRACE | SKW_RIGHTBRACKET | SKW_RIGHTPAREN | SKW_RIGHTSHIFT
		//| SKW_SEMI | SKW_SINGLEQUOTE | SKW_STAR | SKW_TILDE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SKW_AND
		public RuleCall getSKW_ANDTerminalRuleCall_0() { return cSKW_ANDTerminalRuleCall_0; }
		
		//SKW_ANDAND
		public RuleCall getSKW_ANDANDTerminalRuleCall_1() { return cSKW_ANDANDTerminalRuleCall_1; }
		
		//SKW_ASSIGN
		public RuleCall getSKW_ASSIGNTerminalRuleCall_2() { return cSKW_ASSIGNTerminalRuleCall_2; }
		
		//SKW_BACKSLASH
		public RuleCall getSKW_BACKSLASHTerminalRuleCall_3() { return cSKW_BACKSLASHTerminalRuleCall_3; }
		
		//SKW_CARET
		public RuleCall getSKW_CARETTerminalRuleCall_4() { return cSKW_CARETTerminalRuleCall_4; }
		
		//SKW_COMMA
		public RuleCall getSKW_COMMATerminalRuleCall_5() { return cSKW_COMMATerminalRuleCall_5; }
		
		//SKW_COLON
		public RuleCall getSKW_COLONTerminalRuleCall_6() { return cSKW_COLONTerminalRuleCall_6; }
		
		//SKW_DIV
		public RuleCall getSKW_DIVTerminalRuleCall_7() { return cSKW_DIVTerminalRuleCall_7; }
		
		//SKW_DOT
		public RuleCall getSKW_DOTTerminalRuleCall_8() { return cSKW_DOTTerminalRuleCall_8; }
		
		//SKW_DOUBLEQUOTE
		public RuleCall getSKW_DOUBLEQUOTETerminalRuleCall_9() { return cSKW_DOUBLEQUOTETerminalRuleCall_9; }
		
		//SKW_EQUAL
		public RuleCall getSKW_EQUALTerminalRuleCall_10() { return cSKW_EQUALTerminalRuleCall_10; }
		
		//SKW_GREATER
		public RuleCall getSKW_GREATERTerminalRuleCall_11() { return cSKW_GREATERTerminalRuleCall_11; }
		
		//SKW_GREATEREQUAL
		public RuleCall getSKW_GREATEREQUALTerminalRuleCall_12() { return cSKW_GREATEREQUALTerminalRuleCall_12; }
		
		//SKW_LEFTBRACE
		public RuleCall getSKW_LEFTBRACETerminalRuleCall_13() { return cSKW_LEFTBRACETerminalRuleCall_13; }
		
		//SKW_LEFTBRACKET
		public RuleCall getSKW_LEFTBRACKETTerminalRuleCall_14() { return cSKW_LEFTBRACKETTerminalRuleCall_14; }
		
		//SKW_LEFTPAREN
		public RuleCall getSKW_LEFTPARENTerminalRuleCall_15() { return cSKW_LEFTPARENTerminalRuleCall_15; }
		
		//SKW_LEFTSHIFT
		public RuleCall getSKW_LEFTSHIFTTerminalRuleCall_16() { return cSKW_LEFTSHIFTTerminalRuleCall_16; }
		
		//SKW_LESS
		public RuleCall getSKW_LESSTerminalRuleCall_17() { return cSKW_LESSTerminalRuleCall_17; }
		
		//SKW_LESSEQUAL
		public RuleCall getSKW_LESSEQUALTerminalRuleCall_18() { return cSKW_LESSEQUALTerminalRuleCall_18; }
		
		//SKW_MINUS
		public RuleCall getSKW_MINUSTerminalRuleCall_19() { return cSKW_MINUSTerminalRuleCall_19; }
		
		//SKW_MINUSMINUS
		public RuleCall getSKW_MINUSMINUSTerminalRuleCall_20() { return cSKW_MINUSMINUSTerminalRuleCall_20; }
		
		//SKW_MOD
		public RuleCall getSKW_MODTerminalRuleCall_21() { return cSKW_MODTerminalRuleCall_21; }
		
		//SKW_NOT
		public RuleCall getSKW_NOTTerminalRuleCall_22() { return cSKW_NOTTerminalRuleCall_22; }
		
		//SKW_NOTEQUAL
		public RuleCall getSKW_NOTEQUALTerminalRuleCall_23() { return cSKW_NOTEQUALTerminalRuleCall_23; }
		
		//SKW_OR
		public RuleCall getSKW_ORTerminalRuleCall_24() { return cSKW_ORTerminalRuleCall_24; }
		
		//SKW_OROR
		public RuleCall getSKW_ORORTerminalRuleCall_25() { return cSKW_ORORTerminalRuleCall_25; }
		
		//SKW_PLUS
		public RuleCall getSKW_PLUSTerminalRuleCall_26() { return cSKW_PLUSTerminalRuleCall_26; }
		
		//SKW_PLUSPLUS
		public RuleCall getSKW_PLUSPLUSTerminalRuleCall_27() { return cSKW_PLUSPLUSTerminalRuleCall_27; }
		
		//SKW_QUESTION
		public RuleCall getSKW_QUESTIONTerminalRuleCall_28() { return cSKW_QUESTIONTerminalRuleCall_28; }
		
		//SKW_RIGHTBRACE
		public RuleCall getSKW_RIGHTBRACETerminalRuleCall_29() { return cSKW_RIGHTBRACETerminalRuleCall_29; }
		
		//SKW_RIGHTBRACKET
		public RuleCall getSKW_RIGHTBRACKETTerminalRuleCall_30() { return cSKW_RIGHTBRACKETTerminalRuleCall_30; }
		
		//SKW_RIGHTPAREN
		public RuleCall getSKW_RIGHTPARENTerminalRuleCall_31() { return cSKW_RIGHTPARENTerminalRuleCall_31; }
		
		//SKW_RIGHTSHIFT
		public RuleCall getSKW_RIGHTSHIFTTerminalRuleCall_32() { return cSKW_RIGHTSHIFTTerminalRuleCall_32; }
		
		//SKW_SEMI
		public RuleCall getSKW_SEMITerminalRuleCall_33() { return cSKW_SEMITerminalRuleCall_33; }
		
		//SKW_SINGLEQUOTE
		public RuleCall getSKW_SINGLEQUOTETerminalRuleCall_34() { return cSKW_SINGLEQUOTETerminalRuleCall_34; }
		
		//SKW_STAR
		public RuleCall getSKW_STARTerminalRuleCall_35() { return cSKW_STARTerminalRuleCall_35; }
		
		//SKW_TILDE
		public RuleCall getSKW_TILDETerminalRuleCall_36() { return cSKW_TILDETerminalRuleCall_36; }
	}
	
	
	private final CommonElements pCommon;
	private final SpecialKeywordsElements pSpecialKeywords;
	private final TerminalRule tSKW_AND;
	private final TerminalRule tSKW_ANDAND;
	private final TerminalRule tSKW_ASSIGN;
	private final TerminalRule tSKW_BACKSLASH;
	private final TerminalRule tSKW_CARET;
	private final TerminalRule tSKW_COMMA;
	private final TerminalRule tSKW_COLON;
	private final TerminalRule tSKW_DIV;
	private final TerminalRule tSKW_DOLLAR;
	private final TerminalRule tSKW_DOT;
	private final TerminalRule tSKW_DOUBLEQUOTE;
	private final TerminalRule tSKW_EQUAL;
	private final TerminalRule tSKW_GREATER;
	private final TerminalRule tSKW_GREATEREQUAL;
	private final TerminalRule tSKW_LEFTBRACE;
	private final TerminalRule tSKW_LEFTBRACKET;
	private final TerminalRule tSKW_LEFTPAREN;
	private final TerminalRule tSKW_LEFTSHIFT;
	private final TerminalRule tSKW_LESS;
	private final TerminalRule tSKW_LESSEQUAL;
	private final TerminalRule tSKW_MINUS;
	private final TerminalRule tSKW_MINUSMINUS;
	private final TerminalRule tSKW_MOD;
	private final TerminalRule tSKW_NOT;
	private final TerminalRule tSKW_NOTEQUAL;
	private final TerminalRule tSKW_OR;
	private final TerminalRule tSKW_OROR;
	private final TerminalRule tSKW_PLUS;
	private final TerminalRule tSKW_PLUSPLUS;
	private final TerminalRule tSKW_QUESTION;
	private final TerminalRule tSKW_RIGHTBRACE;
	private final TerminalRule tSKW_RIGHTBRACKET;
	private final TerminalRule tSKW_RIGHTPAREN;
	private final TerminalRule tSKW_RIGHTSHIFT;
	private final TerminalRule tSKW_SEMI;
	private final TerminalRule tSKW_SINGLEQUOTE;
	private final TerminalRule tSKW_STAR;
	private final TerminalRule tSKW_TILDE;
	private final TerminalRule tSKW_UNDERSCORE;
	private final TerminalRule tSPECIAL;
	
	private final Grammar grammar;

	@Inject
	public CommonGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pCommon = new CommonElements();
		this.pSpecialKeywords = new SpecialKeywordsElements();
		this.tSKW_AND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.Common.SKW_AND");
		this.tSKW_ANDAND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.Common.SKW_ANDAND");
		this.tSKW_ASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.Common.SKW_ASSIGN");
		this.tSKW_BACKSLASH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.Common.SKW_BACKSLASH");
		this.tSKW_CARET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.Common.SKW_CARET");
		this.tSKW_COMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.Common.SKW_COMMA");
		this.tSKW_COLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.Common.SKW_COLON");
		this.tSKW_DIV = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.Common.SKW_DIV");
		this.tSKW_DOLLAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.Common.SKW_DOLLAR");
		this.tSKW_DOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.Common.SKW_DOT");
		this.tSKW_DOUBLEQUOTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.Common.SKW_DOUBLEQUOTE");
		this.tSKW_EQUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.Common.SKW_EQUAL");
		this.tSKW_GREATER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.Common.SKW_GREATER");
		this.tSKW_GREATEREQUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.Common.SKW_GREATEREQUAL");
		this.tSKW_LEFTBRACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.Common.SKW_LEFTBRACE");
		this.tSKW_LEFTBRACKET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.Common.SKW_LEFTBRACKET");
		this.tSKW_LEFTPAREN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.Common.SKW_LEFTPAREN");
		this.tSKW_LEFTSHIFT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.Common.SKW_LEFTSHIFT");
		this.tSKW_LESS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.Common.SKW_LESS");
		this.tSKW_LESSEQUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.Common.SKW_LESSEQUAL");
		this.tSKW_MINUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.Common.SKW_MINUS");
		this.tSKW_MINUSMINUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.Common.SKW_MINUSMINUS");
		this.tSKW_MOD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.Common.SKW_MOD");
		this.tSKW_NOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.Common.SKW_NOT");
		this.tSKW_NOTEQUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.Common.SKW_NOTEQUAL");
		this.tSKW_OR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.Common.SKW_OR");
		this.tSKW_OROR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.Common.SKW_OROR");
		this.tSKW_PLUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.Common.SKW_PLUS");
		this.tSKW_PLUSPLUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.Common.SKW_PLUSPLUS");
		this.tSKW_QUESTION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.Common.SKW_QUESTION");
		this.tSKW_RIGHTBRACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.Common.SKW_RIGHTBRACE");
		this.tSKW_RIGHTBRACKET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.Common.SKW_RIGHTBRACKET");
		this.tSKW_RIGHTPAREN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.Common.SKW_RIGHTPAREN");
		this.tSKW_RIGHTSHIFT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.Common.SKW_RIGHTSHIFT");
		this.tSKW_SEMI = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.Common.SKW_SEMI");
		this.tSKW_SINGLEQUOTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.Common.SKW_SINGLEQUOTE");
		this.tSKW_STAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.Common.SKW_STAR");
		this.tSKW_TILDE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.Common.SKW_TILDE");
		this.tSKW_UNDERSCORE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.Common.SKW_UNDERSCORE");
		this.tSPECIAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.Common.SPECIAL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("at.jku.weiner.c.Common".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Common:
	//	{Common};
	public CommonElements getCommonAccess() {
		return pCommon;
	}
	
	public ParserRule getCommonRule() {
		return getCommonAccess().getRule();
	}
	
	//// keywords
	//// special keywords
	//SpecialKeywords:
	//	SKW_AND
	//	| SKW_ANDAND
	//	| SKW_ASSIGN
	//	| SKW_BACKSLASH
	//	| SKW_CARET
	//	| SKW_COMMA
	//	| SKW_COLON
	//	| SKW_DIV
	//	| SKW_DOT
	//	| SKW_DOUBLEQUOTE
	//	| SKW_EQUAL
	//	| SKW_GREATER
	//	| SKW_GREATEREQUAL
	//	| SKW_LEFTBRACE
	//	| SKW_LEFTBRACKET
	//	| SKW_LEFTPAREN
	//	| SKW_LEFTSHIFT
	//	| SKW_LESS
	//	| SKW_LESSEQUAL
	//	| SKW_MINUS
	//	| SKW_MINUSMINUS
	//	| SKW_MOD
	//	| SKW_NOT
	//	| SKW_NOTEQUAL
	//	| SKW_OR
	//	| SKW_OROR
	//	| SKW_PLUS
	//	| SKW_PLUSPLUS
	//	| SKW_QUESTION
	//	| SKW_RIGHTBRACE
	//	| SKW_RIGHTBRACKET
	//	| SKW_RIGHTPAREN
	//	| SKW_RIGHTSHIFT
	//	| SKW_SEMI
	//	| SKW_SINGLEQUOTE
	//	| SKW_STAR
	//	| SKW_TILDE;
	public SpecialKeywordsElements getSpecialKeywordsAccess() {
		return pSpecialKeywords;
	}
	
	public ParserRule getSpecialKeywordsRule() {
		return getSpecialKeywordsAccess().getRule();
	}
	
	//terminal SKW_AND:
	//	'&';
	public TerminalRule getSKW_ANDRule() {
		return tSKW_AND;
	}
	
	//terminal SKW_ANDAND:
	//	SKW_AND SKW_AND;
	public TerminalRule getSKW_ANDANDRule() {
		return tSKW_ANDAND;
	}
	
	//terminal SKW_ASSIGN:
	//	'=';
	public TerminalRule getSKW_ASSIGNRule() {
		return tSKW_ASSIGN;
	}
	
	//terminal SKW_BACKSLASH:
	//	'\\';
	public TerminalRule getSKW_BACKSLASHRule() {
		return tSKW_BACKSLASH;
	}
	
	//terminal SKW_CARET:
	//	'^';
	public TerminalRule getSKW_CARETRule() {
		return tSKW_CARET;
	}
	
	//terminal SKW_COMMA:
	//	',';
	public TerminalRule getSKW_COMMARule() {
		return tSKW_COMMA;
	}
	
	//terminal SKW_COLON:
	//	':';
	public TerminalRule getSKW_COLONRule() {
		return tSKW_COLON;
	}
	
	//terminal SKW_DIV:
	//	'/';
	public TerminalRule getSKW_DIVRule() {
		return tSKW_DIV;
	}
	
	//terminal fragment SKW_DOLLAR:
	//	'$';
	public TerminalRule getSKW_DOLLARRule() {
		return tSKW_DOLLAR;
	}
	
	//terminal SKW_DOT:
	//	'.';
	public TerminalRule getSKW_DOTRule() {
		return tSKW_DOT;
	}
	
	//terminal SKW_DOUBLEQUOTE:
	//	'"';
	public TerminalRule getSKW_DOUBLEQUOTERule() {
		return tSKW_DOUBLEQUOTE;
	}
	
	//terminal SKW_EQUAL:
	//	SKW_ASSIGN SKW_ASSIGN;
	public TerminalRule getSKW_EQUALRule() {
		return tSKW_EQUAL;
	}
	
	//terminal SKW_GREATER:
	//	'>';
	public TerminalRule getSKW_GREATERRule() {
		return tSKW_GREATER;
	}
	
	//terminal SKW_GREATEREQUAL:
	//	SKW_GREATER SKW_ASSIGN;
	public TerminalRule getSKW_GREATEREQUALRule() {
		return tSKW_GREATEREQUAL;
	}
	
	//terminal SKW_LEFTBRACE:
	//	'{';
	public TerminalRule getSKW_LEFTBRACERule() {
		return tSKW_LEFTBRACE;
	}
	
	//terminal SKW_LEFTBRACKET:
	//	'[';
	public TerminalRule getSKW_LEFTBRACKETRule() {
		return tSKW_LEFTBRACKET;
	}
	
	//terminal SKW_LEFTPAREN:
	//	'(';
	public TerminalRule getSKW_LEFTPARENRule() {
		return tSKW_LEFTPAREN;
	}
	
	//terminal SKW_LEFTSHIFT:
	//	SKW_LESS SKW_LESS;
	public TerminalRule getSKW_LEFTSHIFTRule() {
		return tSKW_LEFTSHIFT;
	}
	
	//terminal SKW_LESS:
	//	'<';
	public TerminalRule getSKW_LESSRule() {
		return tSKW_LESS;
	}
	
	//terminal SKW_LESSEQUAL:
	//	SKW_LESS SKW_ASSIGN;
	public TerminalRule getSKW_LESSEQUALRule() {
		return tSKW_LESSEQUAL;
	}
	
	//terminal SKW_MINUS:
	//	'-';
	public TerminalRule getSKW_MINUSRule() {
		return tSKW_MINUS;
	}
	
	//terminal SKW_MINUSMINUS:
	//	SKW_MINUS SKW_MINUS;
	public TerminalRule getSKW_MINUSMINUSRule() {
		return tSKW_MINUSMINUS;
	}
	
	//terminal SKW_MOD:
	//	'%';
	public TerminalRule getSKW_MODRule() {
		return tSKW_MOD;
	}
	
	//terminal SKW_NOT:
	//	'!';
	public TerminalRule getSKW_NOTRule() {
		return tSKW_NOT;
	}
	
	//terminal SKW_NOTEQUAL:
	//	SKW_NOT SKW_ASSIGN;
	public TerminalRule getSKW_NOTEQUALRule() {
		return tSKW_NOTEQUAL;
	}
	
	//terminal SKW_OR:
	//	'|';
	public TerminalRule getSKW_ORRule() {
		return tSKW_OR;
	}
	
	//terminal SKW_OROR:
	//	SKW_OR SKW_OR;
	public TerminalRule getSKW_ORORRule() {
		return tSKW_OROR;
	}
	
	//terminal SKW_PLUS:
	//	'+';
	public TerminalRule getSKW_PLUSRule() {
		return tSKW_PLUS;
	}
	
	//terminal SKW_PLUSPLUS:
	//	SKW_PLUS SKW_PLUS;
	public TerminalRule getSKW_PLUSPLUSRule() {
		return tSKW_PLUSPLUS;
	}
	
	//terminal SKW_QUESTION:
	//	'?';
	public TerminalRule getSKW_QUESTIONRule() {
		return tSKW_QUESTION;
	}
	
	//terminal SKW_RIGHTBRACE:
	//	'}';
	public TerminalRule getSKW_RIGHTBRACERule() {
		return tSKW_RIGHTBRACE;
	}
	
	//terminal SKW_RIGHTBRACKET:
	//	']';
	public TerminalRule getSKW_RIGHTBRACKETRule() {
		return tSKW_RIGHTBRACKET;
	}
	
	//terminal SKW_RIGHTPAREN:
	//	')';
	public TerminalRule getSKW_RIGHTPARENRule() {
		return tSKW_RIGHTPAREN;
	}
	
	//terminal SKW_RIGHTSHIFT:
	//	SKW_GREATER SKW_GREATER;
	public TerminalRule getSKW_RIGHTSHIFTRule() {
		return tSKW_RIGHTSHIFT;
	}
	
	//terminal SKW_SEMI:
	//	';';
	public TerminalRule getSKW_SEMIRule() {
		return tSKW_SEMI;
	}
	
	//terminal SKW_SINGLEQUOTE:
	//	'\'';
	public TerminalRule getSKW_SINGLEQUOTERule() {
		return tSKW_SINGLEQUOTE;
	}
	
	//terminal SKW_STAR:
	//	'*';
	public TerminalRule getSKW_STARRule() {
		return tSKW_STAR;
	}
	
	//terminal SKW_TILDE:
	//	'~';
	public TerminalRule getSKW_TILDERule() {
		return tSKW_TILDE;
	}
	
	//terminal fragment SKW_UNDERSCORE:
	//	'_';
	public TerminalRule getSKW_UNDERSCORERule() {
		return tSKW_UNDERSCORE;
	}
	
	//terminal SPECIAL:
	//	.;
	public TerminalRule getSPECIALRule() {
		return tSPECIAL;
	}
}
