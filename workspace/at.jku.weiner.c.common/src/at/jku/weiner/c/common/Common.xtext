/*
 [The "BSD licence"]
 Copyright (c) 2016 Harald Weiner

 Copyright (c) 2013 Sam Harwell
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions
 are met:
 1. Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.
 3. The name of the author may not be used to endorse or promote products
    derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
grammar at.jku.weiner.c.common.Common
// with org.eclipse.xtext.common.Terminals
// hidden(LINEBREAK,BLOCK_COMMENT,LINE_COMMENT)
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.jku.at/weiner/c/common/Common"

//generate common "http://www.jku.at/weiner/c/common/Common"

/*** expressions ***/
Expression hidden(WHITESPACE,IGNORED):
	ConditionalExpression
;

ConstantExpression returns Expression hidden(WHITESPACE,IGNORED):
	ConditionalExpression
;

ConditionalExpression returns Expression:
	LogicalOrExpression
	({ConditionalExpression.expr=current}
		SKW_QUESTION qExpr=Expression SKW_COLON
		cExpr=ConditionalExpression
	)?
;

LogicalOrExpression returns Expression:
	LogicalAndExpression
	({LogicalOrExpression.left=current} 
		SKW_OROR right=LogicalAndExpression
	)*
;

LogicalAndExpression returns Expression:
	InclusiveOrExpression
	({LogicalAndExpression.left=current} 
		SKW_ANDAND right=InclusiveOrExpression
	)*
;

InclusiveOrExpression returns Expression:
	ExclusiveOrExpression
	({InclusiveOrExpression.left=current} 
		SKW_OR right=ExclusiveOrExpression
	)*
;

ExclusiveOrExpression returns Expression:
	AndExpression
	({ExclusiveOrExpression.left=current} 
		SKW_CARET right=AndExpression
	)*
;

AndExpression returns Expression:
	EqualityExpression
	({AndExpression.left=current} 
		SKW_AND right=EqualityExpression
	)*
;

EqualityExpression returns Expression:
	RelationalExpression
	({EqualityExpression.left=current} 
		(
				op=SKW_EQUAL
			|	op=SKW_NOTEQUAL
		)
		right=RelationalExpression
	)*
;

RelationalExpression returns Expression:
	ShiftExpression
	({RelationalExpression.left=current} 
		(
				op=SKW_LESS
			|	op=SKW_GREATER
			|	op=SKW_LESSEQUAL
			|	op=SKW_GREATEREQUAL
		)
		right = ShiftExpression
	)*
;

ShiftExpression returns Expression:
	AdditiveExpression
	({ShiftExpression.left=current} 
		(
				op=SKW_LEFTSHIFT
			|	op=SKW_RIGHTSHIFT
		)
		right=AdditiveExpression
	)*
;

AdditiveExpression returns Expression:
	MultiplicativeExpression
	({AdditiveExpression.left=current} 
		(
				op=SKW_PLUS
			|	op=SKW_MINUS
		)
		right=MultiplicativeExpression
	)*
;

MultiplicativeExpression returns Expression:
	CastExpression
	({MultiplicativeExpression.left=current} 
		(
				op=SKW_STAR
			|	op=SKW_DIV
			|	op=SKW_MOD
		)
		right=CastExpression
	)*
;

CastExpression returns Expression:
	UnaryExpression
;

UnaryExpression returns Expression:
	(
		PostfixExpression
	|	{UnaryExpression} op=UnaryOperator expr=CastExpression
	)
;

UnaryOperator:
		SKW_AND
	|	SKW_STAR
	|	SKW_PLUS 
	|	SKW_MINUS 
	|	SKW_TILDE
	|	SKW_NOT
;

PostfixExpression returns Expression:
	PrimaryExpression
	({PostfixExpression.expr=current} 
		suffix=PostfixExpressionSuffixArgument
	)*
;

PostfixExpressionSuffixArgument returns PostfixExpressionSuffix:
	{PostfixExpressionSuffixArgument}
	SKW_LEFTPAREN (argumentExpressionList=ArgumentExpressionList)? SKW_RIGHTPAREN
;

ArgumentExpressionList: expr+=ConditionalExpression (SKW_COMMA expr+=ConditionalExpression)*;


PrimaryExpression returns Expression:
	{PrimaryExpression}
	(	
			const=Constant1
		|	ident=ID
		|	parentheses?=SKW_LEFTPAREN expr=Expression SKW_RIGHTPAREN
	)
;

Constant1:
	(
		HexLiteral
	|	OctalLiteral
	|	DecimalLiteral
	|	CharLiteral
	|	StringLiteral
	|	FloatLiteral
	|	BinLiteral
	)
;

Constant2:
	{Constant2}
	(
		hex=HexLiteral
	|	oct=OctalLiteral
	|	dec=DecimalLiteral
	|	ch=CharLiteral
	//|	str=StringLiteral
	|	float=FloatLiteral
	|	bin=BinLiteral
	)
;

// keywords

// special keywords
SpecialKeywords returns ecore::EString:
		SKW_AND 
	|	SKW_ANDAND
	|	SKW_ASSIGN
	|	SKW_BACKSLASH
	|	SKW_CARET
	|	SKW_COMMA
	|	SKW_COLON
	|	SKW_DIV
	|	SKW_DOT
	|	SKW_DOUBLEQUOTE
	|	SKW_EQUAL
	|	SKW_GREATER
	|	SKW_GREATEREQUAL
	|	SKW_LEFTBRACE
	|	SKW_LEFTBRACKET
	|	SKW_LEFTPAREN
	|	SKW_LEFTSHIFT
	|	SKW_LESS
	|	SKW_LESSEQUAL
	|	SKW_MINUS
	|	SKW_MINUSMINUS
	|	SKW_MOD
	|	SKW_NOT
	|	SKW_NOTEQUAL
	|	SKW_OR
	|	SKW_OROR
	|	SKW_PLUS
	|	SKW_PLUSPLUS
	|	SKW_QUESTION
	|	SKW_RIGHTBRACE
	|	SKW_RIGHTBRACKET
	|	SKW_RIGHTPAREN
	|	SKW_RIGHTSHIFT
	|	SKW_SEMI
	|	SKW_SINGLEQUOTE
	|	SKW_STAR
	|	SKW_TILDE
;

Ellipsis:
	SKW_DOT SKW_DOT SKW_DOT
;

HexLiteral returns ecore::EString: HEX_LITERAL;

OctalLiteral returns ecore::EString: OCTAL_LITERAL;

DecimalLiteral returns ecore::EString: DECIMAL_LITERAL;

CharLiteral returns ecore::EString: CHAR_LITERAL;

StringLiteral returns ecore::EString: STRING_LITERAL;

FloatLiteral returns ecore::EString: FLOAT_LITERAL;

BinLiteral returns ecore::EString: BIN_LITERAL;

// special keywords
terminal SKW_AND: '&';
terminal SKW_ANDAND: SKW_AND SKW_AND;
terminal SKW_ASSIGN: '=';
terminal SKW_BACKSLASH: '\\';
terminal SKW_CARET: '^';
terminal SKW_COMMA: ',';
terminal SKW_COLON: ':';
terminal SKW_DIV: '/';
terminal fragment SKW_DOLLAR: '$';
terminal SKW_DOT: '.';
terminal SKW_DOUBLEQUOTE: '"';
terminal SKW_EQUAL: SKW_ASSIGN SKW_ASSIGN;
terminal SKW_GREATER: '>';
terminal SKW_GREATEREQUAL: SKW_GREATER SKW_ASSIGN;
terminal SKW_LEFTBRACE: '{';
terminal SKW_LEFTBRACKET: '[';
terminal SKW_LEFTPAREN: '(';
terminal SKW_LEFTSHIFT: SKW_LESS SKW_LESS;
terminal SKW_LESS: '<';
terminal SKW_LESSEQUAL: SKW_LESS SKW_ASSIGN;
terminal SKW_MINUS: '-';
terminal SKW_MINUSMINUS: SKW_MINUS SKW_MINUS;
terminal SKW_MOD: '%';
terminal SKW_NOT: '!';
terminal SKW_NOTEQUAL: SKW_NOT SKW_ASSIGN;
terminal SKW_OR: '|';
terminal SKW_OROR: SKW_OR SKW_OR;
terminal SKW_PLUS: '+';
terminal SKW_PLUSPLUS: SKW_PLUS SKW_PLUS;
terminal SKW_QUESTION: '?';
terminal SKW_RIGHTBRACE: '}';
terminal SKW_RIGHTBRACKET: ']';
terminal SKW_RIGHTPAREN: ')';
terminal SKW_RIGHTSHIFT: SKW_GREATER SKW_GREATER;
terminal SKW_SEMI: ';';
terminal SKW_SINGLEQUOTE: '\'';
terminal SKW_STAR: '*';
terminal SKW_TILDE: '~';
terminal fragment SKW_UNDERSCORE: '_';

// identifiers and constants
terminal ID: IDENTIFIER;
terminal fragment IDENTIFIER:
	LETTER (LETTER|'0'..'9')*
;

terminal fragment LETTER:
		SKW_DOLLAR
	|	'A'..'Z'
	|	'a'..'z'
	|	SKW_UNDERSCORE
;

terminal CHAR_LITERAL:
	('L')? SKW_SINGLEQUOTE ( ESCAPE_SEQUENCE | !(SKW_SINGLEQUOTE|SKW_BACKSLASH) | LINEBREAK ) SKW_SINGLEQUOTE
;

terminal STRING_LITERAL:
	SKW_DOUBLEQUOTE ( ESCAPE_SEQUENCE | !(SKW_BACKSLASH|SKW_DOUBLEQUOTE) | LINEBREAK )* SKW_DOUBLEQUOTE
;

terminal HEX_LITERAL: '0' ('x'|'X') HEX_DIGIT+ INTEGER_TYPE_SUFFIX? ;

terminal DECIMAL_LITERAL: ('0' | '1'..'9' '0'..'9'*) INTEGER_TYPE_SUFFIX? ;

terminal OCTAL_LITERAL: '0' ('0'..'7')+ INTEGER_TYPE_SUFFIX? ;

terminal BIN_LITERAL: ('0b' | '0B') ('0'..'1')+;

terminal fragment HEX_DIGIT: ('0'..'9'|'a'..'f'|'A'..'F');

//terminal fragment INTEGER_TYPE_SUFFIX:
//	('u'|'U')? ('l'|'L')
//	|	('u'|'U')  ('l'|'L')?
//;

terminal fragment INTEGER_TYPE_SUFFIX
    :   UNSIGNED_SUFFIX LONG_SUFFIX?
    |   UNSIGNED_SUFFIX LONG_LONG_SUFFIX
    |   LONG_SUFFIX UNSIGNED_SUFFIX?
    |   LONG_LONG_SUFFIX UNSIGNED_SUFFIX?
    ;

terminal fragment UNSIGNED_SUFFIX
    :   'u' | 'U'
    ;

terminal fragment LONG_SUFFIX
    :   'l' | 'L'
    ;

terminal fragment LONG_LONG_SUFFIX
    :   'll' | 'LL'
    ;

terminal FLOAT_LITERAL:
	('0'..'9')+ SKW_DOT ('0'..'9')* EXPONENT? FLOAT_TYPE_SUFFIX?
	|	SKW_DOT ('0'..'9')+ EXPONENT? FLOAT_TYPE_SUFFIX?
	|	('0'..'9')+ EXPONENT FLOAT_TYPE_SUFFIX?
	|	('0'..'9')+ EXPONENT? FLOAT_TYPE_SUFFIX
;

terminal fragment EXPONENT:
	('e'|'E') ('+'|'-')? ('0'..'9')+
;

terminal fragment FLOAT_TYPE_SUFFIX: ('f'|'F'|'d'|'D') ;

terminal fragment ESCAPE_SEQUENCE:
		SKW_BACKSLASH ('b'|'t'|'n'|'f'|'r'|'\"'|SKW_SINGLEQUOTE|SKW_BACKSLASH)
	|	OCTAL_ESCAPE
	|	HEX_ESCAPE
;

terminal fragment OCTAL_ESCAPE:
	SKW_BACKSLASH ('0'..'3') ('0'..'7') ('0'..'7')
	|	SKW_BACKSLASH ('0'..'7') ('0'..'7')
	|	SKW_BACKSLASH ('0'..'7')
;

terminal fragment HEX_ESCAPE:
	SKW_BACKSLASH 'x' HEX_DIGIT+
;

// Whitespace terminals
terminal fragment LINEFEED: '\n';
terminal fragment CARRIAGERETURN: '\r';
terminal LINE_END: (CARRIAGERETURN | LINEFEED) ;
terminal fragment LINEBREAK: (SKW_BACKSLASH LINE_END);
terminal NEWLINE: LINE_END;
terminal fragment SPACE: ' ';
terminal fragment TAB: '\t';
terminal WHITESPACE: (SPACE | TAB);

terminal fragment BLOCK_COMMENT: '/*' -> '*/';
terminal fragment LINE_COMMENT: '//' (!LINE_END)*;

terminal fragment FORM_FEED: '\u000c';

terminal IGNORED: LINEBREAK | BLOCK_COMMENT | LINE_COMMENT | FORM_FEED;

// for anything else:
terminal SPECIAL: .;
