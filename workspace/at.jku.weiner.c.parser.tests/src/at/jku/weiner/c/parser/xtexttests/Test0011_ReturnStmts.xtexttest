//----------------------------------------------------------------------
//----------------------------------------------------------------------
package at.jku.weiner.c.parser
language parser
imports at.jku.weiner.c.common.common
//----------------------------------------------------------------------
source file="res/Test0011_ReturnStmts.c"
//----------------------------------------------------------------------
lexer-tokens
KW_CHAR WHITESPACE ID SKW_LEFTPAREN SKW_RIGHTPAREN WHITESPACE SKW_LEFTBRACE NEWLINE
WHITESPACE KW_RETURN WHITESPACE CHAR_LITERAL SKW_SEMI NEWLINE
SKW_RIGHTBRACE NEWLINE NEWLINE
KW_INT WHITESPACE ID SKW_LEFTPAREN SKW_RIGHTPAREN WHITESPACE SKW_LEFTBRACE NEWLINE
WHITESPACE KW_RETURN WHITESPACE SKW_MINUS DECIMAL_LITERAL SKW_SEMI NEWLINE
SKW_RIGHTBRACE NEWLINE NEWLINE
KW_DOUBLE WHITESPACE ID SKW_LEFTPAREN SKW_RIGHTPAREN WHITESPACE SKW_LEFTBRACE NEWLINE
WHITESPACE KW_RETURN WHITESPACE FLOAT_LITERAL SKW_SEMI NEWLINE
SKW_RIGHTBRACE NEWLINE NEWLINE
KW_FLOAT WHITESPACE ID SKW_LEFTPAREN SKW_RIGHTPAREN WHITESPACE SKW_LEFTBRACE NEWLINE
WHITESPACE KW_RETURN WHITESPACE HEX_LITERAL SKW_SEMI NEWLINE
SKW_RIGHTBRACE NEWLINE NEWLINE
KW_VOID WHITESPACE ID SKW_LEFTPAREN SKW_RIGHTPAREN WHITESPACE SKW_LEFTBRACE NEWLINE
WHITESPACE KW_RETURN SKW_SEMI NEWLINE
SKW_RIGHTBRACE NEWLINE
//----------------------------------------------------------------------
//(common::Model units+=
	//(common::TranslationUnit 
	(Parser
		external+=
		(ExternalDeclaration 
			functiondefHead=
			(FunctionDefHead
				funDeclSpecifiers=
				(FunctionDeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						name++"char"
					)
				),
				funDeclarator=
				(Declarator
					declarator=
					(DirectDeclarator
						id++"doSomething1"
					)
				)
			),
			functionDefinition=
			(FunctionDefinition
				body=
				(BodyStatement
					blockList+=
					(BlockList
						statement+=
						(Statement
							stmt=
							(JumpStatement
								expr=
								(PrimaryExpression
									const=
									(common::Constant2
										ch++"'a'"
									)
								), // end expression
								return++"return"
							)// end jump statement
						)//end statement
					)
				)
			)
		), // end external declaration
		(ExternalDeclaration 
			functiondefHead=
			(FunctionDefHead
				funDeclSpecifiers=
				(FunctionDeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						name++"int"
					)
				),
				funDeclarator=
				(Declarator
					declarator=
					(DirectDeclarator
						id++"doSomething2"
					)
				)
			),
			functionDefinition=
			(FunctionDefinition
				body=
				(BodyStatement
					blockList+=
					(BlockList
						statement+=
						(Statement
							stmt=
							(JumpStatement
								expr=
								(UnaryExpression
									expr=
									(PrimaryExpression
										const=
										(common::Constant2
											dec++"1"
										)
									), 
									op++"-"
								), // end expression
								return++"return"
							)// end jump statement
						)//end statement
					)
				)
			)
		),// end external declaration
		(ExternalDeclaration 
			functiondefHead=
			(FunctionDefHead
				funDeclSpecifiers=
				(FunctionDeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						name++"double"
					)
				),
				funDeclarator=
				(Declarator
					declarator=
					(DirectDeclarator
						id++"doSomething3"
					)
				)
			),
			functionDefinition=
			(FunctionDefinition
				body=
				(BodyStatement
					blockList+=
					(BlockList
						statement+=
						(Statement
							stmt=
							(JumpStatement
								expr=
								(PrimaryExpression
									const=
									(common::Constant2
										float++"0.8"
									)
								), // end expression
								return++"return"
							)// end jump statement
						)//end statement
					)
				)
			)
		),// end external declaration
		(ExternalDeclaration 
			functiondefHead=
			(FunctionDefHead
				funDeclSpecifiers=
				(FunctionDeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						name++"float"
					)
				),
				funDeclarator=
				(Declarator
					declarator=
					(DirectDeclarator
						id++"doSomething4"
					)
				)
			),
			functionDefinition=
			(FunctionDefinition
				body=
				(BodyStatement
					blockList+=
					(BlockList
						statement+=
						(Statement
							stmt=
							(JumpStatement
								expr=
								(PrimaryExpression
									const=
									(common::Constant2
										hex++"0x01A"
									)
								), // end expression
								return++"return"
							)// end jump statement
						)//end statement
					)
				)
			)
		),// end external declaration
		(ExternalDeclaration 
			functiondefHead=
			(FunctionDefHead
				funDeclSpecifiers=
				(FunctionDeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						name++"void"
					)
				),
				funDeclarator=
				(Declarator
					declarator=
					(DirectDeclarator
						id++"doSomething5"
					)
				)
			),
			functionDefinition=
			(FunctionDefinition
				body=
				(BodyStatement
					blockList+=
					(BlockList
						statement+=
						(Statement
							stmt=
							(JumpStatement
								// no expression
								return++"return"
							)// end jump statement
						)//end statement
					)
				)
			)
		)// end external declaration
		
	)
//)
//)
//----------------------------------------------------------------------
output file="bin/Test0011_ReturnStmts.c"
expected file isSameAsInputFile

replacePatterns file="res/Patterns.txt"
//----------------------------------------------------------------------
//----------------------------------------------------------------------
