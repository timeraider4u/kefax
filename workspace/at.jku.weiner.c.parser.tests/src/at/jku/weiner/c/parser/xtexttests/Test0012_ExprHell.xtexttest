//----------------------------------------------------------------------
//----------------------------------------------------------------------
package at.jku.weiner.c.parser
language parser
imports at.jku.weiner.c.common.common
//----------------------------------------------------------------------
source file="res/Test0012_ExprHell.c"
//----------------------------------------------------------------------
lexer-tokens
KW_VOID WHITESPACE ID SKW_LEFTPAREN SKW_RIGHTPAREN WHITESPACE SKW_LEFTBRACE NEWLINE
WHITESPACE DECIMAL_LITERAL SKW_SEMI NEWLINE
WHITESPACE SKW_LEFTPAREN DECIMAL_LITERAL SKW_RIGHTPAREN SKW_SEMI NEWLINE
WHITESPACE DECIMAL_LITERAL SKW_STAR DECIMAL_LITERAL SKW_SEMI NEWLINE
WHITESPACE DECIMAL_LITERAL SKW_LEFTSHIFT DECIMAL_LITERAL SKW_SEMI NEWLINE
WHITESPACE DECIMAL_LITERAL SKW_LESS DECIMAL_LITERAL SKW_SEMI NEWLINE
WHITESPACE DECIMAL_LITERAL SKW_EQUAL DECIMAL_LITERAL SKW_SEMI NEWLINE
WHITESPACE DECIMAL_LITERAL SKW_AND DECIMAL_LITERAL SKW_SEMI NEWLINE
WHITESPACE DECIMAL_LITERAL SKW_OR DECIMAL_LITERAL SKW_SEMI NEWLINE
WHITESPACE DECIMAL_LITERAL SKW_CARET DECIMAL_LITERAL SKW_SEMI NEWLINE
WHITESPACE DECIMAL_LITERAL SKW_ANDAND DECIMAL_LITERAL SKW_SEMI NEWLINE
WHITESPACE DECIMAL_LITERAL SKW_OROR DECIMAL_LITERAL SKW_SEMI NEWLINE
WHITESPACE DECIMAL_LITERAL SKW_QUESTION DECIMAL_LITERAL SKW_COLON DECIMAL_LITERAL SKW_SEMI NEWLINE
SKW_RIGHTBRACE NEWLINE
//----------------------------------------------------------------------
//(common::Model units+=
	//(common::TranslationUnit 
	(Parser
		external+=
		(ExternalDeclaration 
			functiondefHead=
			(FunctionDefHead
				funDeclSpecifiers=
				(FunctionDeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						name++"void"
					)
				),
				funDeclarator=
				(Declarator
					declarator=
					(DirectDeclarator
						id++"doSomething"
					)
				)
			),
			functionDefinition=
			(FunctionDefinition
				body=
				(BodyStatement
					blockList+=
					(BlockList
						statement+=
						// 1;
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(PrimaryExpression
									const=
									(common::Constant2
										dec++"1"
									)
								)//end expression
							)
						), // end statement
						// (1);
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(PrimaryExpression
									parentheses?=true,
									expr=
									(PrimaryExpression
										const=
										(common::Constant2
											dec++"2"
										)
									)
								)//end expression
							)
						), // end statement
						// 1 * 2;
						(Statement
							stmt=
							(ExpressionStatement
								expression=									
								(MultiplicativeExpression
									left=
									(PrimaryExpression
										const=
										(common::Constant2
											dec++"1"
										)
									),
									right=
									(PrimaryExpression
										const=
										(common::Constant2
											dec++"2"
										)
									),
									op++"*"
								)//end expression
							)
						), // end statement
						// 1 << 2;
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(ShiftExpression
									left=
									(PrimaryExpression
										const=
										(common::Constant2
											dec++"1"
										)
									),
									right=			
									(PrimaryExpression
										const=
										(common::Constant2
											dec++"2"
										)
									),
									op++"<<"
								) // end shift
							)
						), // end statement
						// 1 < 2;
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(RelationalExpression
									left=
									(PrimaryExpression
										const=
										(common::Constant2
											dec++"1"
										)
									), // end 
									right=
									(PrimaryExpression
										const=
										(common::Constant2
											dec++"2"
										)
									), // end
									op++"<"
								) // end relational
							)
						), // end statement
						// 1 == 2;
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(EqualityExpression
									left=
									(PrimaryExpression
										const=
										(common::Constant2
											dec++"1"
										)
									),
									right=
									(PrimaryExpression
										const=
										(common::Constant2
											dec++"2"
										)
									),
									op++"=="
								) // end equal
							)
						), // end statement
						// 1 & 2;
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(AndExpression
									left=
									(PrimaryExpression
										const=
										(common::Constant2
											dec++"1"
										)
									),
									right=
									(PrimaryExpression
										const=
										(common::Constant2
											dec++"2"
										)
									) // end and
								)//end expression
							)
						), // end statement
						// 1 | 2;
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(InclusiveOrExpression
									left=
									(PrimaryExpression
										const=
										(common::Constant2
											dec++"1"
										)
									),
									right=
									(PrimaryExpression
										const=
										(common::Constant2
											dec++"2"
										)
									)
								) // end exclusive
							)
						), // end statement
						// 1 ^ 2;
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(ExclusiveOrExpression
									left=
									(PrimaryExpression
										const=
										(common::Constant2
											dec++"1"
										)
									),
									right=							
									(PrimaryExpression
										const=
										(common::Constant2
											dec++"2"
										)
									)
								) // end exclusive
							)
						), // end statement
						// 1 && 2;
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(LogicalAndExpression
									left=
									(PrimaryExpression
										const=
										(common::Constant2
											dec++"1"
										)
									),
									right=
									(PrimaryExpression
										const=
										(common::Constant2
											dec++"2"
										)
									)
								)//end expression
							)
						), // end statement
						// 1 || 2;
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(LogicalOrExpression
									left=
									(PrimaryExpression
										const=
										(common::Constant2
											dec++"1"
										)
									),
									right=
									(PrimaryExpression
										const=
										(common::Constant2
											dec++"2"
										)
									)
								)//end expression
							)
						), // end statement
						// 1 ? 2 : 3
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(ConditionalExpression
									left=
									(PrimaryExpression
										const=
										(common::Constant2
											dec++"1"
										)
									),
									qExpr=
									(PrimaryExpression
										const=
										(common::Constant2
											dec++"2"
										)
									),// end qExpr-expression
									cExpr=
									(PrimaryExpression
										const=
										(common::Constant2
											dec++"3"
										)
									)
								)//end expression
							)
						) // end statement
						
					)
				)
			)
		)
		
	)
//)
//)
//----------------------------------------------------------------------
output file="bin/Test0012_ExprHell.c"
expected file isSameAsInputFile

replacePatterns file="res/Patterns.txt"
//----------------------------------------------------------------------
//----------------------------------------------------------------------
