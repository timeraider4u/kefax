//----------------------------------------------------------------------
//----------------------------------------------------------------------
package at.jku.weiner.c.parser
language parser
//----------------------------------------------------------------------
source file="res/Test0014_AssignExpr.c"
//----------------------------------------------------------------------
lexer-tokens
KW_VOID WHITESPACE ID LEFTPAREN RIGHTPAREN WHITESPACE LEFTBRACE NEWLINE
WHITESPACE KW_INT WHITESPACE ID WHITESPACE ASSIGN WHITESPACE DECIMAL_LITERAL SEMI NEWLINE
WHITESPACE KW_INT WHITESPACE ID WHITESPACE ASSIGN WHITESPACE DECIMAL_LITERAL SEMI NEWLINE
WHITESPACE ID WHITESPACE ASSIGN WHITESPACE DECIMAL_LITERAL COMMA
WHITESPACE ID WHITESPACE ASSIGN WHITESPACE DECIMAL_LITERAL SEMI NEWLINE
RIGHTBRACE NEWLINE
//----------------------------------------------------------------------
(Model unit+=
	(TranslationUnit 
		external+=
		(ExternalDeclaration 
			functiondefHead=
			(FunctionDefHead
				funDeclSpecifiers=
				(FunctionDeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						name++"void"
					)
				),
				funDeclarator=
				(Declarator
					declarator=
					(DirectDeclarator
						id++"doSomething"
					)
				)
			),
			functionDefinition=
			(FunctionDefinition
				body=
				(BodyStatement
					blockList+=
					(BlockList
						// int a = 0;
						declaration+=
						(Declaration
							specifiers=
							(DeclarationSpecifiers
								declarationSpecifier+=
								(TypeSpecifier
									name++"int"
								)
							),
							initDeclaratorList+=
							(InitDeclaratorList
								initDeclarator+=
								(InitDeclarator
									declarator=
									(Declarator
										declarator=
										(DirectDeclarator
											id++"a"
										)
									),
									initializer=
									(Initializer
										expr=
										(AssignmentExpression
											expr=
											(ConditionalExpression
												expr=
												(LogicalOrExpression
													expr+=
													(LogicalAndExpression
														expr+=
														(InclusiveOrExpression
															expr+=
															(ExclusiveOrExpression
																expr+=
																(AndExpression
																	expr+=
																	(EqualityExpression
																		expr+=
																		(RelationalExpression
																			expr+=
																			(ShiftExpression
																				expr+=
																				(AdditiveExpression
																					expr+=
																					(MultiplicativeExpression
																						expr+=
																						(CastExpression
																							expr=
																							(UnaryExpression
																								expr=
																								(PostfixExpression
																									expr+=
																									(PrimaryExpression
																										const=
																										(Constant
																											dec++"0"
																										)
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										) // end assignment expression
									)
								)
							)
						), // end declaration
						// int b = 0;
						(Declaration
							specifiers=
							(DeclarationSpecifiers
								declarationSpecifier+=
								(TypeSpecifier
									name++"int"
								)
							),
							initDeclaratorList+=
							(InitDeclaratorList
								initDeclarator+=
								(InitDeclarator
									declarator=
									(Declarator
										declarator=
										(DirectDeclarator
											id++"b"
										)
									),
									initializer=
									(Initializer
										expr=
										(AssignmentExpression
											expr=
											(ConditionalExpression
												expr=
												(LogicalOrExpression
													expr+=
													(LogicalAndExpression
														expr+=
														(InclusiveOrExpression
															expr+=
															(ExclusiveOrExpression
																expr+=
																(AndExpression
																	expr+=
																	(EqualityExpression
																		expr+=
																		(RelationalExpression
																			expr+=
																			(ShiftExpression
																				expr+=
																				(AdditiveExpression
																					expr+=
																					(MultiplicativeExpression
																						expr+=
																						(CastExpression
																							expr=
																							(UnaryExpression
																								expr=
																								(PostfixExpression
																									expr+=
																									(PrimaryExpression
																										const=
																										(Constant
																											dec++"2"
																										)
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										) // end assignment expression
									)
								)
							)
						),
						// a = 1, b = 1;
						statement+=
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(Expression
									exprExpr+=
									// a = 1
									(AssignmentExpression
										expr=
										(UnaryExpression
											expr=
											(PostfixExpression
												expr+=
												(PrimaryExpression
													id++"a"
												)
											)
										), // end unary expression
										op=
										(AssignmentOperator
											op++"="
										),
										assignmentExpr=
										(AssignmentExpression
											expr=
											(ConditionalExpression
												expr=
												(LogicalOrExpression
													expr+=
													(LogicalAndExpression
														expr+=
														(InclusiveOrExpression
															expr+=
															(ExclusiveOrExpression
																expr+=
																(AndExpression
																	expr+=
																	(EqualityExpression
																		expr+=
																		(RelationalExpression
																			expr+=
																			(ShiftExpression
																				expr+=
																				(AdditiveExpression
																					expr+=
																					(MultiplicativeExpression
																						expr+=
																						(CastExpression
																							expr=
																							(UnaryExpression
																								expr=
																								(PostfixExpression
																									expr+=
																									(PrimaryExpression
																										const=
																										(Constant
																											dec++"12"
																										)
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																		
																	)
																)
															)
														)
													)
												)
											) // end conditional expression
										) // end assignment expression
									), // end assignment expression
									// b = 0
									(AssignmentExpression
										expr=
										(UnaryExpression
											expr=
											(PostfixExpression
												expr+=
												(PrimaryExpression
													id++"b"
												)
											)
										), // end unary expression
										op=
										(AssignmentOperator
											op++"="
										),
										assignmentExpr=
										(AssignmentExpression
											expr=
											(ConditionalExpression
												expr=
												(LogicalOrExpression
													expr+=
													(LogicalAndExpression
														expr+=
														(InclusiveOrExpression
															expr+=
															(ExclusiveOrExpression
																expr+=
																(AndExpression
																	expr+=
																	(EqualityExpression
																		expr+=
																		(RelationalExpression
																			expr+=
																			(ShiftExpression
																				expr+=
																				(AdditiveExpression
																					expr+=
																					(MultiplicativeExpression
																						expr+=
																						(CastExpression
																							expr=
																							(UnaryExpression
																								expr=
																								(PostfixExpression
																									expr+=
																									(PrimaryExpression
																										const=
																										(Constant
																											dec++"21"
																										)
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										) // end assignment expression
									) // end assignment expression
								),//end expression
								semi++";"
							)
						) // end statement
					) // end block list
				)
			)
		)
	)
)
//----------------------------------------------------------------------
output file="bin/Test0014_AssignExpr.c"
expected file isSameAsInputFile
replacePatterns file="res/Patterns.txt"
//----------------------------------------------------------------------
//----------------------------------------------------------------------
