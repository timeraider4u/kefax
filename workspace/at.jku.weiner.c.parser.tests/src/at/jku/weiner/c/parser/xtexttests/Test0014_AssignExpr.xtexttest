//----------------------------------------------------------------------
//----------------------------------------------------------------------
package at.jku.weiner.c.parser
language parser
imports at.jku.weiner.c.common.common
//----------------------------------------------------------------------
source file="res/Test0014_AssignExpr.c"
//----------------------------------------------------------------------
lexer-tokens
KW_VOID WHITESPACE ID SKW_LEFTPAREN SKW_RIGHTPAREN WHITESPACE SKW_LEFTBRACE NEWLINE
WHITESPACE KW_INT WHITESPACE ID WHITESPACE SKW_ASSIGN WHITESPACE DECIMAL_LITERAL SKW_SEMI NEWLINE
WHITESPACE KW_INT WHITESPACE ID WHITESPACE SKW_ASSIGN WHITESPACE DECIMAL_LITERAL SKW_SEMI NEWLINE
WHITESPACE ID WHITESPACE SKW_ASSIGN WHITESPACE DECIMAL_LITERAL SKW_COMMA
WHITESPACE ID WHITESPACE SKW_ASSIGN WHITESPACE DECIMAL_LITERAL SKW_SEMI NEWLINE
SKW_RIGHTBRACE NEWLINE
//----------------------------------------------------------------------
//(common::Model units+=
	//(common::TranslationUnit 
	(Parser
		external+=
		(ExternalDeclaration 
			functiondefHead=
			(FunctionDefHead
				funDeclSpecifiers=
				(FunctionDeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						name++"void"
					)
				),
				funDeclarator=
				(Declarator
					declarator=
					(DirectDeclarator
						ident++"doSomething"
					)
				)
			),
			functionDefinition=
			(FunctionDefinition
				body=
				(BodyStatement
					blockList+=
					(BlockList
						// int a = 0;
						declaration+=
						(Declaration
							specifiers=
							(DeclarationSpecifiers
								declarationSpecifier+=
								(TypeSpecifier
									name++"int"
								)
							),
							initDeclaratorList+=
							(InitDeclaratorList
								initDeclarator+=
								(InitDeclarator
									declarator=
									(Declarator
										declarator=
										(DirectDeclarator
											ident++"a"
										)
									),
									initializer=
									(Initializer
										expr=
										(PrimaryExpression
											const=
											(common::Constant2
												dec++"0"
											)
										)
									)
								)
							)
						), // end declaration
						// int b = 0;
						(Declaration
							specifiers=
							(DeclarationSpecifiers
								declarationSpecifier+=
								(TypeSpecifier
									name++"int"
								)
							),
							initDeclaratorList+=
							(InitDeclaratorList
								initDeclarator+=
								(InitDeclarator
									declarator=
									(Declarator
										declarator=
										(DirectDeclarator
											ident++"b"
										)
									),
									initializer=
									(Initializer
										expr=
										(PrimaryExpression
											const=
											(common::Constant2
												dec++"2"
											)
										)
									)
								)
							)
						),
						// a = 1, b = 1;
						statement+=
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(Expression
									left=
									// a = 1
									(AssignmentExpression
										expr=
										(PrimaryExpression
											ident++"a"
										),
										op++"=",
										assignmentExpr=
										(PrimaryExpression
											const=
											(common::Constant2
												dec++"12"
											)
										)
									), // end assignment expression
									right=
									// b = 0
									(AssignmentExpression
										expr=
										(PrimaryExpression
											ident++"b"
										),
										op++"=",
										assignmentExpr=
										(PrimaryExpression
											const=
											(common::Constant2
												dec++"21"
											)
										)
									)
								)//end expression
							)
						) // end statement
					) // end block list
				)
			)
		)
	)
//)
//)
//----------------------------------------------------------------------
output file="bin/Test0014_AssignExpr.c"
expected file isSameAsInputFile
replacePatterns file="res/Patterns.txt"
//----------------------------------------------------------------------
//----------------------------------------------------------------------
