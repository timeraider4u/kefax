//----------------------------------------------------------------------
//----------------------------------------------------------------------
package at.jku.weiner.c.parser
language parser
imports at.jku.weiner.c.common.common
//----------------------------------------------------------------------
source file="res/Test0020_Goto.c"
//----------------------------------------------------------------------
lexer-tokens
KW_VOID WHITESPACE ID SKW_LEFTPAREN SKW_RIGHTPAREN WHITESPACE SKW_LEFTBRACE NEWLINE
WHITESPACE KW_GOTO WHITESPACE ID SKW_SEMI NEWLINE
WHITESPACE ID SKW_LEFTPAREN STRING_LITERAL SKW_RIGHTPAREN SKW_SEMI NEWLINE
WHITESPACE ID SKW_COLON WHITESPACE 
ID SKW_LEFTPAREN STRING_LITERAL SKW_RIGHTPAREN SKW_SEMI NEWLINE
SKW_RIGHTBRACE NEWLINE
//----------------------------------------------------------------------
//(common::Model units+=
	//(common::TranslationUnit 
	(Parser
		external+=
		(ExternalDeclaration 
			functiondefHead=
			(FunctionDefHead
				funDeclSpecifiers=
				(FunctionDeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						name++"void"
					)
				),
				funDeclarator=
				(Declarator
					declarator=
					(DirectDeclarator
						id++"doSomething"
					)
				)
			),
			functionDefinition=
			(FunctionDefinition
				body=
				(BodyStatement
					blockList+=
					(BlockList
						statement+=
						(Statement
							stmt=
							(JumpStatement
								expr=
								(PrimaryExpression
									id++"target"
								), // end expression
								goto++"goto"
							) // end expression statement
						), // end first statement
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(PostfixExpression
									expr=
									(PrimaryExpression
										id++"printf"
									),
									suffix=
									(PostfixExpressionSuffixArgument
										argumentExpressionList=
										(ArgumentExpressionList
											expr+=
											(PrimaryExpression
												string+*"[\\\"will never be reached\\\\n\\\"]"
											)
										)
									)
								)
							) // end expression statement
						), // end second statement
						(Statement
							stmt=
							(LabeledStatement
								id++"target",
								lStmt=
								(Statement
									stmt=
									(ExpressionStatement
										expression=
										(PostfixExpression
											expr=
											(PrimaryExpression
												id++"printf"
											),
											suffix=
											(PostfixExpressionSuffixArgument
												argumentExpressionList=
												(ArgumentExpressionList
													expr+=
													(PrimaryExpression
														string+*"[\\\"reached target\\\\n\\\"]"
													)
												)
											)
										)
									)
								)
							) // end labeled statement
						) // end third statement
					) // end block list
				) // end body statement
			)
		) // end external declaration
	)
//)
//)
//----------------------------------------------------------------------
output file="bin/Test0020_Goto.c"
expected file isSameAsInputFile
replacePatterns file="res/Patterns.txt"
//----------------------------------------------------------------------
//----------------------------------------------------------------------
