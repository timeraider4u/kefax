//----------------------------------------------------------------------
//----------------------------------------------------------------------
package at.jku.weiner.c.parser
language parser
imports at.jku.weiner.c.common.common
//----------------------------------------------------------------------
source file="res/Test0021_IfElse.c"
//----------------------------------------------------------------------
lexer-tokens
KW_INT WHITESPACE ID SKW_LEFTPAREN KW_INT WHITESPACE ID SKW_RIGHTPAREN 
WHITESPACE SKW_LEFTBRACE NEWLINE
	WHITESPACE KW_IF WHITESPACE SKW_LEFTPAREN ID WHITESPACE SKW_GREATER WHITESPACE 
	DECIMAL_LITERAL SKW_RIGHTPAREN NEWLINE
	WHITESPACE KW_RETURN WHITESPACE DECIMAL_LITERAL SKW_SEMI NEWLINE
	
	WHITESPACE BLOCK_COMMENT NEWLINE
	
	WHITESPACE KW_ELSE WHITESPACE KW_IF WHITESPACE SKW_LEFTPAREN ID 
	WHITESPACE SKW_EQUAL WHITESPACE DECIMAL_LITERAL SKW_RIGHTPAREN 
	WHITESPACE SKW_LEFTBRACE NEWLINE
	WHITESPACE KW_RETURN WHITESPACE DECIMAL_LITERAL SKW_SEMI NEWLINE
	WHITESPACE SKW_RIGHTBRACE NEWLINE
	
	WHITESPACE BLOCK_COMMENT NEWLINE	  
	
	WHITESPACE KW_ELSE WHITESPACE SKW_LEFTBRACE NEWLINE
	WHITESPACE KW_RETURN WHITESPACE DECIMAL_LITERAL SKW_SEMI NEWLINE
	WHITESPACE SKW_RIGHTBRACE NEWLINE
SKW_RIGHTBRACE NEWLINE
//----------------------------------------------------------------------
//(common::Model units+=
	//(common::TranslationUnit 
	(Parser
		external+=
		(ExternalDeclaration 
			functiondefHead=
			(FunctionDefHead
				funDeclSpecifiers=
				(FunctionDeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						name++"int"
					)
				),
				funDeclarator=
				(Declarator
					declarator=
					(DirectDeclarator
						id++"doSomething",
						declaratorSuffix+=
						(DeclaratorSuffix
							lastSuffix=
							(DirectDeclaratorLastSuffix
								parameterTypeList+=
								(ParameterTypeList
									list=
									(ParameterList
										parameterDeclaration+=
										(ParameterDeclaration
											declSpecifiers=
											(DeclarationSpecifiers
												declarationSpecifier+=
												(TypeSpecifier
													name++"int"
												)
											),
											declarator=
											(Declarator
												declarator=
												(DirectDeclarator
													id++"argc"
												)
											)
										)
									) // end parameter list
								)
							)
						) // DeclaratorSuffix
					)
				)
			),
			functionDefinition=
			(FunctionDefinition
				body=
				(BodyStatement
					blockList+=
					(BlockList
						statement+=
						(Statement
							stmt=
							(SelectionStatement
								if++"if",
								expr=
								(RelationalExpression
									op++">",
									left=
									(PrimaryExpression
										id++"argc"
									),
									right=
									(PrimaryExpression
										const=
										(common::Constant2
											dec++"0"
										)
									)
								), // end expression
								ifStatement=
								(Statement
									stmt=
									(JumpStatement
										expr=
										(PrimaryExpression
											const=
											(common::Constant2
												dec++"0"
											)
										), // end expression
										return++"return"
									)// end jump statement
								), // end ifStatement=Statement
								// else if ...
								elseStatement=
								(Statement
									stmt=
									(SelectionStatement
										if++"if",
										expr=
										(EqualityExpression
											op++"==",
											left=
											(PrimaryExpression
												id++"argc"
											),
											right=
											(PrimaryExpression
												const=
												(common::Constant2
													dec++"1"	
												)
											)
										), // end expression
										else++"else",
										ifStatement=
										(Statement
											stmt=
											(CompoundStatement
												body=
												(BodyStatement
													blockList+=
													(BlockList
														statement+=
														(Statement
															stmt=
															(JumpStatement
																expr=
																(PrimaryExpression
																	const=
																	(common::Constant2
																		dec++"1"
																	)
																), // end expression
																return++"return"
															)// end jump statement
														)
													)
												)
											) // end compound statement
										), // end ifStatement=Statement
										elseStatement=
										(Statement
											stmt=
											(CompoundStatement
												body=
												(BodyStatement
													blockList+=
													(BlockList
														statement+=
														(Statement
															stmt=
															(JumpStatement
																expr=
																(PrimaryExpression
																	const=
																	(common::Constant2
																		dec++"2"
																	)
																), // end expression
																return++"return"
															)// end jump statement
														)
													)
												)
											) // end compound statement
										) // end elseStatement=Statement
									) // selection statement
								) // elseStatement=Statement
							)// end selection statement
						)//end statement
					)
				)
			)
		)// end external declaration		
	)
//)
//)
//----------------------------------------------------------------------
output file="bin/Test0021_IfElse.c"
expected file isSameAsInputFile
replacePatterns file="res/Patterns.txt"
//----------------------------------------------------------------------
//----------------------------------------------------------------------
