//----------------------------------------------------------------------
//----------------------------------------------------------------------
package at.jku.weiner.c.parser
language parser
imports at.jku.weiner.c.common.common
//----------------------------------------------------------------------
source file="res/Test0022_PlusPlus.c"
//----------------------------------------------------------------------
lexer-tokens
KW_INT WHITESPACE ID SKW_LEFTPAREN
KW_INT WHITESPACE ID SKW_RIGHTPAREN WHITESPACE SKW_LEFTBRACE NEWLINE
	WHITESPACE ID SKW_PLUSPLUS SKW_SEMI NEWLINE
	WHITESPACE KW_RETURN WHITESPACE SKW_PLUSPLUS ID SKW_SEMI NEWLINE
SKW_RIGHTBRACE NEWLINE
//----------------------------------------------------------------------
//(common::Model units+=
	//(common::TranslationUnit 
	(Parser
		external+=
		(ExternalDeclaration 
			functiondefHead=
			(FunctionDefHead
				funDeclSpecifiers=
				(FunctionDeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						name++"int"
					)
				),
				funDeclarator=
				(Declarator
					declarator=
					(DirectDeclarator
						ident++"a",
						declaratorSuffix+=
						(DeclaratorSuffix
							lastSuffix=
							(DirectDeclaratorLastSuffix
								parameterTypeList+=
								(ParameterTypeList
									list=
									(ParameterList
										parameterDeclaration+=
										(ParameterDeclaration
											declSpecifiers=
											(DeclarationSpecifiers
												declarationSpecifier+=
												(TypeSpecifier
													name++"int"
												)
											),
											declarator=
											(Declarator
												declarator=
												(DirectDeclarator
													ident++"num"
												)
											)
										) 
									) // end parameter list
								)
							)
						) // DeclaratorSuffix
					)
				)
			),
			functionDefinition=
			(FunctionDefinition
				body=
				(BodyStatement
					blockList+=
					(BlockList
						statement+=
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(PostfixExpression
									expr=
									(PrimaryExpression
										ident++"num"
									),
									suffix=
									(PostfixExpressionSuffixPlusPlus
										
									)
								) // end expression
							) // end expression statement
						), // end statement
						(Statement
							stmt=
							(JumpStatement
								return++"return",
								expr=
								(UnaryExpression
									expr=
									(PrimaryExpression
										ident++"num"
									),
									plusplus++"++"
								) // end expression
							) // end expression statement
						) // end statement
					) // end block list
				) // end body statement
			)
		) // end external declaration
	)
//)
//)
//----------------------------------------------------------------------
output file="bin/Test0022_PlusPlus.c"
expected file isSameAsInputFile
replacePatterns file="res/Patterns.txt"
//----------------------------------------------------------------------
//----------------------------------------------------------------------
