//----------------------------------------------------------------------
//----------------------------------------------------------------------
package at.jku.weiner.c.parser
language parser
//----------------------------------------------------------------------
source file="res/Test0027_For.c"
//----------------------------------------------------------------------
lexer-tokens
KW_VOID WHITESPACE ID SKW_LEFTPAREN
KW_INT WHITESPACE ID SKW_RIGHTPAREN WHITESPACE SKW_LEFTBRACE NEWLINE
	WHITESPACE KW_FOR WHITESPACE SKW_LEFTPAREN ID SKW_ASSIGN DECIMAL_LITERAL SKW_SEMI
	WHITESPACE ID WHITESPACE SKW_LESS WHITESPACE DECIMAL_LITERAL SKW_SEMI
	WHITESPACE ID SKW_PLUSPLUS SKW_RIGHTPAREN WHITESPACE SKW_LEFTBRACE NEWLINE
		WHITESPACE ID SKW_MINUSMINUS SKW_SEMI NEWLINE
		WHITESPACE KW_BREAK SKW_SEMI NEWLINE
	WHITESPACE SKW_RIGHTBRACE NEWLINE
SKW_RIGHTBRACE NEWLINE
//----------------------------------------------------------------------
(Model unit+=
	(TranslationUnit 
		external+=
		(ExternalDeclaration 
			functiondefHead=
			(FunctionDefHead
				funDeclSpecifiers=
				(FunctionDeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						name++"void"
					)
				),
				funDeclarator=
				(Declarator
					declarator=
					(DirectDeclarator
						id++"a",
						declaratorSuffix+=
						(DeclaratorSuffix
							lastSuffix=
							(DirectDeclaratorLastSuffix
								parameterTypeList+=
								(ParameterTypeList
									list=
									(ParameterList
										parameterDeclaration+=
										(ParameterDeclaration
											declSpecifiers=
											(DeclarationSpecifiers
												declarationSpecifier+=
												(TypeSpecifier
													name++"int"
												)
											),
											declarator=
											(Declarator
												declarator=
												(DirectDeclarator
													id++"num"
												)
											)
										) 
									) // end parameter list
								)
							)
						) // DeclaratorSuffix
					)
				)
			),
			functionDefinition=
			(FunctionDefinition
				body=
				(BodyStatement
					blockList+=
					(BlockList
						statement+=
						(Statement
							stmt=
							(IterationStatement
								for++"for",
								// num = 0
								initExpr=
								(Expression
									exprExpr+=
									(AssignmentExpression
										op=
										(AssignmentOperator
											op++"="
										),
										expr=
										(UnaryExpression
											expr=
											(PostfixExpression
												expr+=
												(PrimaryExpression
													id++"num"
												)
											)
										
										), // end unary expression
										assignmentExpr=
										(AssignmentExpression
											expr=
											(ConditionalExpression
												expr=
												(LogicalOrExpression
													expr+=
													(LogicalAndExpression
														expr+=
														(InclusiveOrExpression
															expr+=
															(ExclusiveOrExpression
																expr+=
																(AndExpression
																	expr+=
																	(EqualityExpression
																		expr+=
																		(RelationalExpression
																			expr+=
																			(ShiftExpression
																				expr+=
																				(AdditiveExpression
																					expr+=
																					(MultiplicativeExpression
																						expr+=
																						(CastExpression
																							expr=
																							(UnaryExpression
																								expr=
																								(PostfixExpression
																									expr+=
																									(PrimaryExpression
																										const=
																										(Constant
																											dec++"0"
																										)
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											) // end conditional expression
										) // end assignment expression
									) // end assignment expression
								), // end init expression
								// num < 5
								expr=
								(Expression
									exprExpr+=
									(AssignmentExpression
										expr=
										(ConditionalExpression
											expr=
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		op+*"[<]",
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									id++"num"
																								)
																							)
																						)
																					)
																				)
																			)
																		),
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									const=
																									(Constant
																										dec++"5"
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										)
									)
								), // end loop criteria expression
								// num++
								incExpr=
								(Expression
									exprExpr+=
									(AssignmentExpression
										expr=
										(ConditionalExpression
											expr=
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									id++"num"
																								),
																								suffix+=
																								(PostfixExpressionSuffixPlusPlus
																									
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										)
									)
								), // end increment expression
								statement=
								(Statement
									stmt=
									(CompoundStatement
										body=
										(BodyStatement
											blockList+=
											(BlockList
												statement+=
												(Statement
													stmt=
													(ExpressionStatement
														expression=
														(Expression
															exprExpr+=
															(AssignmentExpression
																expr=
																(ConditionalExpression
																	expr=
																	(LogicalOrExpression
																		expr+=
																		(LogicalAndExpression
																			expr+=
																			(InclusiveOrExpression
																				expr+=
																				(ExclusiveOrExpression
																					expr+=
																					(AndExpression
																						expr+=
																						(EqualityExpression
																							expr+=
																							(RelationalExpression
																								expr+=
																								(ShiftExpression
																									expr+=
																									(AdditiveExpression
																										expr+=
																										(MultiplicativeExpression
																											expr+=
																											(CastExpression
																												expr=
																												(UnaryExpression
																													expr=
																													(PostfixExpression
																														expr+=
																														(PrimaryExpression
																															id++"num"
																														),
																														suffix+=
																														(PostfixExpressionSuffixMinusMinus
																															
																														)
																													)
																												)
																											)
																										)
																									)
																								)
																							)
																							
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														), // end expression
														semi++";"
													) // end expression statement
												),
												(Statement
													stmt=
													(JumpStatement
														break++"break"
													)
												)
											)
										)
									) // end compound statement
								) // end statement
							) // end iteration statement
						) // end statement
					) // end block list
				) // end body statement
			)
		) // end external declaration
	)
)
//----------------------------------------------------------------------
output file="bin/Test0027_For.c"
expected file isSameAsInputFile
replacePatterns file="res/Patterns.txt"
//----------------------------------------------------------------------
//----------------------------------------------------------------------
