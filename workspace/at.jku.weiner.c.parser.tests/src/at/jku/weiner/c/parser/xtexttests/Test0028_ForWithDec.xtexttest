//----------------------------------------------------------------------
//----------------------------------------------------------------------
package at.jku.weiner.c.parser
language parser
imports at.jku.weiner.c.common.common
//----------------------------------------------------------------------
source file="res/Test0028_ForWithDec.c"
//----------------------------------------------------------------------
lexer-tokens
KW_VOID WHITESPACE ID SKW_LEFTPAREN
KW_INT WHITESPACE ID SKW_RIGHTPAREN WHITESPACE SKW_LEFTBRACE NEWLINE
	WHITESPACE KW_FOR WHITESPACE SKW_LEFTPAREN 
	KW_INT WHITESPACE ID SKW_ASSIGN DECIMAL_LITERAL SKW_SEMI
	WHITESPACE ID WHITESPACE SKW_LESS WHITESPACE DECIMAL_LITERAL SKW_SEMI
	WHITESPACE ID SKW_PLUSPLUS SKW_RIGHTPAREN WHITESPACE SKW_LEFTBRACE NEWLINE
		WHITESPACE KW_CONTINUE SKW_SEMI NEWLINE
	WHITESPACE SKW_RIGHTBRACE NEWLINE
SKW_RIGHTBRACE NEWLINE
//----------------------------------------------------------------------
//(common::Model units+=
	//(common::TranslationUnit 
	(Parser
		external+=
		(ExternalDeclaration 
			functiondefHead=
			(FunctionDefHead
				funDeclSpecifiers=
				(FunctionDeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						name++"void"
					)
				),
				funDeclarator=
				(Declarator
					declarator=
					(DirectDeclarator
						id++"a",
						declaratorSuffix+=
						(DeclaratorSuffix
							lastSuffix=
							(DirectDeclaratorLastSuffix
								parameterTypeList+=
								(ParameterTypeList
									list=
									(ParameterList
										parameterDeclaration+=
										(ParameterDeclaration
											declSpecifiers=
											(DeclarationSpecifiers
												declarationSpecifier+=
												(TypeSpecifier
													name++"int"
												)
											),
											declarator=
											(Declarator
												declarator=
												(DirectDeclarator
													id++"num"
												)
											)
										) 
									) // end parameter list
								)
							)
						) // DeclaratorSuffix
					)
				)
			),
			functionDefinition=
			(FunctionDefinition
				body=
				(BodyStatement
					blockList+=
					(BlockList
						statement+=
						(Statement
							stmt=
							(IterationStatement
								for++"for",
								// int i=0
								initDecl=
								(Declaration
									specifiers=
									(DeclarationSpecifiers
										declarationSpecifier+=
										(TypeSpecifier
											name++"int"
										)
									),
									initDeclaratorList+=
									(InitDeclaratorList
										initDeclarator+=
										(InitDeclarator
											declarator=
											(Declarator
												declarator=
												(DirectDeclarator
													id++"i"
												)
											),
											initializer=
											(Initializer
												expr=
												(PrimaryExpression
													const=
													(common::Constant2
														dec++"0"
													)
												) // end  expression
											)
										)
									)
								), // end init declaration
								// i < 5
								expr=
								(RelationalExpression
									op++"<",
									left=
									(PrimaryExpression
										id++"i"
									),
									right=
									(PrimaryExpression
										const=
										(common::Constant2
											dec++"5"
										)
									)
								), // end loop criteria expression
								// i++
								incExpr=
								(PostfixExpression
									expr=
									(PrimaryExpression
										id++"i"
									),
									suffix=
									(PostfixExpressionSuffixPlusPlus
										
									)
								), // end increment expression
								statement=
								(Statement
									stmt=
									(CompoundStatement
										body=
										(BodyStatement
											blockList+=
											(BlockList
												statement+=
												(Statement
													stmt=
													(JumpStatement
														continue++"continue"
													)
												)
											)
										)
									) // end compound statement
								) // end statement
							) // end iteration statement
						) // end statement
					) // end block list
				) // end body statement
			)
		) // end external declaration
	)
//)
//)
//----------------------------------------------------------------------
output file="bin/Test0028_ForWithDec.c"
expected file isSameAsInputFile
replacePatterns file="res/Patterns.txt"
//----------------------------------------------------------------------
//----------------------------------------------------------------------
