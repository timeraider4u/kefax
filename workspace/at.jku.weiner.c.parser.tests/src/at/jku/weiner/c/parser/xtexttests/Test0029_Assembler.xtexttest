//----------------------------------------------------------------------
//----------------------------------------------------------------------
package at.jku.weiner.c.parser
language parser
imports at.jku.weiner.c.common.common
//----------------------------------------------------------------------
source file="res/Test0029_Assembler.c"
//----------------------------------------------------------------------
lexer-tokens
BLOCK_COMMENT NEWLINE
KW_EXTERN WHITESPACE KW_INT WHITESPACE ID SKW_SEMI NEWLINE
NEWLINE
KW_INT WHITESPACE ID SKW_LEFTPAREN
	KW_INT WHITESPACE ID SKW_COMMA WHITESPACE
	KW_INT WHITESPACE SKW_STAR ID SKW_COMMA WHITESPACE
	KW_INT WHITESPACE ID
SKW_RIGHTPAREN NEWLINE
SKW_LEFTBRACE NEWLINE
	WHITESPACE KW_INT WHITESPACE ID SKW_SEMI NEWLINE
	WHITESPACE KW_ASM3 WHITESPACE KW_VOLATILE SKW_LEFTPAREN NEWLINE
		WHITESPACE STRING_LITERAL WHITESPACE BLOCK_COMMENT NEWLINE
		WHITESPACE SKW_COLON WHITESPACE STRING_LITERAL 
			WHITESPACE SKW_LEFTPAREN ID SKW_RIGHTPAREN SKW_COMMA 
			WHITESPACE BLOCK_COMMENT NEWLINE
		WHITESPACE STRING_LITERAL 
			WHITESPACE SKW_LEFTPAREN ID SKW_RIGHTPAREN SKW_COMMA
			WHITESPACE BLOCK_COMMENT NEWLINE
		WHITESPACE STRING_LITERAL 
			WHITESPACE SKW_LEFTPAREN ID SKW_RIGHTPAREN SKW_COMMA
			WHITESPACE BLOCK_COMMENT NEWLINE
		WHITESPACE STRING_LITERAL 
			WHITESPACE SKW_LEFTPAREN ID SKW_RIGHTPAREN
			WHITESPACE BLOCK_COMMENT NEWLINE
		WHITESPACE SKW_COLON WHITESPACE STRING_LITERAL 
			WHITESPACE SKW_LEFTPAREN DECIMAL_LITERAL SKW_RIGHTPAREN
			WHITESPACE BLOCK_COMMENT NEWLINE
		WHITESPACE SKW_COLON WHITESPACE STRING_LITERAL SKW_COMMA
			WHITESPACE STRING_LITERAL WHITESPACE BLOCK_COMMENT NEWLINE
	WHITESPACE SKW_RIGHTPAREN SKW_SEMI NEWLINE
	WHITESPACE BLOCK_COMMENT NEWLINE
	WHITESPACE KW_IF WHITESPACE SKW_LEFTPAREN
		SKW_MINUS DECIMAL_LITERAL WHITESPACE 
		SKW_LESSEQUAL WHITESPACE ID WHITESPACE
		SKW_ANDAND WHITESPACE ID WHITESPACE SKW_LESS
		WHITESPACE DECIMAL_LITERAL 
	SKW_RIGHTPAREN WHITESPACE SKW_LEFTBRACE NEWLINE
		WHITESPACE ID WHITESPACE SKW_ASSIGN WHITESPACE
			SKW_MINUS ID SKW_SEMI NEWLINE
		WHITESPACE ID WHITESPACE SKW_ASSIGN WHITESPACE
			SKW_MINUS DECIMAL_LITERAL SKW_SEMI NEWLINE
	WHITESPACE SKW_RIGHTBRACE NEWLINE
	WHITESPACE KW_RETURN WHITESPACE ID SKW_SEMI NEWLINE
SKW_RIGHTBRACE NEWLINE	
//----------------------------------------------------------------------
//(common::Model units+=
	//(common::TranslationUnit 
	(Parser
		external+=
		(ExternalDeclaration
			declaration=
			(Declaration
				specifiers=
				(DeclarationSpecifiers
					declarationSpecifier+=
					(StorageClassSpecifier
						name++"extern"
					),
					(TypeSpecifier
						name++"int"
					)
				),
				initDeclaratorList+=
				(InitDeclaratorList
					initDeclarator+=
					(InitDeclarator
						declarator=
						(Declarator
							declarator=
							(DirectDeclarator
								id++"errno"
							)
						)
					)
				),
				semi++";"
			)
		), // end external declaration (extern int errno;)
		(ExternalDeclaration 
			functiondefHead=
			(FunctionDefHead
				funDeclSpecifiers=
				(FunctionDeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						name++"int"
					)
				),
				funDeclarator=
				(Declarator
					declarator=
					(DirectDeclarator
						id++"funcname",
						declaratorSuffix+=
						(DeclaratorSuffix
							lastSuffix=
							(DirectDeclaratorLastSuffix
								parameterTypeList+=
								(ParameterTypeList
									list=
									(ParameterList
										parameterDeclaration+=
										(ParameterDeclaration
											declSpecifiers=
											(DeclarationSpecifiers
												declarationSpecifier+=
												(TypeSpecifier
													name++"int"
												)
											),
											declarator=
											(Declarator
												declarator=
												(DirectDeclarator
													id++"arg1"
												)
											)
										),
										(ParameterDeclaration
											declSpecifiers=
											(DeclarationSpecifiers
												declarationSpecifier+=
												(TypeSpecifier
													name++"int"
												)
											),
											declarator=
											(Declarator
												declarator=
												(DirectDeclarator
													id++"arg2"
												),
												pointer=
												(Pointer 
													star+*"[*]"
												)
											)
										),
										(ParameterDeclaration
											declSpecifiers=
											(DeclarationSpecifiers
												declarationSpecifier+=
												(TypeSpecifier
													name++"int"
												)
											),
											declarator=
											(Declarator
												declarator=
												(DirectDeclarator
													id++"arg3"
												)
											)
										)
									) // end parameter list
								)
							)
						) // DeclaratorSuffix
					)
				)
			),
			functionDefinition=
			(FunctionDefinition
				body=
				(BodyStatement
					blockList+=
					(BlockList
						declaration+=
						(Declaration
							specifiers=
							(DeclarationSpecifiers
								declarationSpecifier+=
								(TypeSpecifier
									name++"int"
								)
							),
							initDeclaratorList+=
							(InitDeclaratorList
								initDeclarator+=
								(InitDeclarator
									declarator=
									(Declarator
										declarator=
										(DirectDeclarator
											id++"res"
										)
									)
								)
							),
							semi++";"
						), // end declaration
						statement+=
						// __asm (...)
						(Statement
							stmt=
							(AsmStatement
								asmLine1=
								// "int $0x80"
								(AsmLineWithoutColon
									expr=
									(LogicalOrExpression
										expr+=
										(LogicalAndExpression
											expr+=
											(InclusiveOrExpression
												expr+=
												(ExclusiveOrExpression
													expr+=
													(AndExpression
														expr+=
														(EqualityExpression
															expr+=
															(RelationalExpression
																expr+=
																(ShiftExpression
																	expr+=
																	(AdditiveExpression
																		expr+=
																		(MultiplicativeExpression
																			expr+=
																			(CastExpression
																				expr=
																				(UnaryExpression
																					expr=
																					(PostfixExpression
																						expr+=
																						(PrimaryExpression
																							const=
																							(common::Constant2
																								str++"\\\"int $0x80\\\""
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										)
									) // end LogicalOrExpression
								), // end AsmLineWithoutColon
								asmLines+=
								// : "=a" (res),
								(AsmLineWithColon
									asmLine=
									//"=a" (res),
									(AsmLineWithoutColon
										expr=
										(LogicalOrExpression
											expr+=
											(LogicalAndExpression
												expr+=
												(InclusiveOrExpression
													expr+=
													(ExclusiveOrExpression
														expr+=
														(AndExpression
															expr+=
															(EqualityExpression
																expr+=
																(RelationalExpression
																	expr+=
																	(ShiftExpression
																		expr+=
																		(AdditiveExpression
																			expr+=
																			(MultiplicativeExpression
																				expr+=
																				(CastExpression
																					expr=
																					(UnaryExpression
																						expr=
																						(PostfixExpression
																							expr+=
																							(PrimaryExpression
																								const=
																								(common::Constant2
																									str++"\\\"=a\\\""
																								)
																							),
																							suffix+=
																							(PostfixExpressionSuffixArgument
																								argumentExpressionList=
																								(ArgumentExpressionList
																									expr+=
																									(AssignmentExpression
																										expr=
																										(ConditionalExpression
																											expr=
																											(LogicalOrExpression
																												expr+=
																												(LogicalAndExpression
																													expr+=
																													(InclusiveOrExpression
																														expr+=
																														(ExclusiveOrExpression
																															expr+=
																															(AndExpression
																																expr+=
																																(EqualityExpression
																																	expr+=
																																	(RelationalExpression
																																		expr+=
																																		(ShiftExpression
																																			expr+=
																																			(AdditiveExpression
																																				expr+=
																																				(MultiplicativeExpression
																																					expr+=
																																					(CastExpression
																																						expr=
																																						(UnaryExpression
																																							expr=
																																							(PostfixExpression
																																								expr+=
																																								(PrimaryExpression
																																									id++"res"
																																								)
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											) // end LogicalOrExpression
																										)
																									) // end assignment expression
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										), // end LogicalOrExpression
										asmLines+=
										(AsmLine
											comma?=true,
											expr=
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									const=
																									(common::Constant2
																										str++"\\\"+b\\\""
																									)
																								),
																								suffix+=
																								(PostfixExpressionSuffixArgument
																									argumentExpressionList=
																									(ArgumentExpressionList
																										expr+=
																										(AssignmentExpression
																											expr=
																											(ConditionalExpression
																												expr=
																												(LogicalOrExpression
																													expr+=
																													(LogicalAndExpression
																														expr+=
																														(InclusiveOrExpression
																															expr+=
																															(ExclusiveOrExpression
																																expr+=
																																(AndExpression
																																	expr+=
																																	(EqualityExpression
																																		expr+=
																																		(RelationalExpression
																																			expr+=
																																			(ShiftExpression
																																				expr+=
																																				(AdditiveExpression
																																					expr+=
																																					(MultiplicativeExpression
																																						expr+=
																																						(CastExpression
																																							expr=
																																							(UnaryExpression
																																								expr=
																																								(PostfixExpression
																																									expr+=
																																									(PrimaryExpression
																																										id++"arg1"
																																									)
																																								)
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												) // end LogicalOrExpression
																											)
																										) // end assignment expression
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											) // end LogicalOrExpression
										),
										(AsmLine
											comma?=true,
											expr=
											// "+c" (arg2),
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									const=
																									(common::Constant2
																										str++"\\\"+c\\\""
																									)
																								),
																								suffix+=
																								(PostfixExpressionSuffixArgument
																									argumentExpressionList=
																									(ArgumentExpressionList
																										expr+=
																										(AssignmentExpression
																											expr=
																											(ConditionalExpression
																												expr=
																												(LogicalOrExpression
																													expr+=
																													(LogicalAndExpression
																														expr+=
																														(InclusiveOrExpression
																															expr+=
																															(ExclusiveOrExpression
																																expr+=
																																(AndExpression
																																	expr+=
																																	(EqualityExpression
																																		expr+=
																																		(RelationalExpression
																																			expr+=
																																			(ShiftExpression
																																				expr+=
																																				(AdditiveExpression
																																					expr+=
																																					(MultiplicativeExpression
																																						expr+=
																																						(CastExpression
																																							expr=
																																							(UnaryExpression
																																								expr=
																																								(PostfixExpression
																																									expr+=
																																									(PrimaryExpression
																																										id++"arg2"
																																									)
																																								)
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												) // end LogicalOrExpression
																											)
																										) // end assignment expression
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											) // end LogicalOrExpression
										),
										(AsmLine
											comma?=true,
											expr=
											// "+d" (arg3),
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									const=
																									(common::Constant2
																										str++"\\\"+d\\\""
																									)
																								),
																								suffix+=
																								(PostfixExpressionSuffixArgument
																									argumentExpressionList=
																									(ArgumentExpressionList
																										expr+=
																										(AssignmentExpression
																											expr=
																											(ConditionalExpression
																												expr=
																												(LogicalOrExpression
																													expr+=
																													(LogicalAndExpression
																														expr+=
																														(InclusiveOrExpression
																															expr+=
																															(ExclusiveOrExpression
																																expr+=
																																(AndExpression
																																	expr+=
																																	(EqualityExpression
																																		expr+=
																																		(RelationalExpression
																																			expr+=
																																			(ShiftExpression
																																				expr+=
																																				(AdditiveExpression
																																					expr+=
																																					(MultiplicativeExpression
																																						expr+=
																																						(CastExpression
																																							expr=
																																							(UnaryExpression
																																								expr=
																																								(PostfixExpression
																																									expr+=
																																									(PrimaryExpression
																																										id++"arg3"
																																									)
																																								)
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												) // end LogicalOrExpression
																											)
																										) // end assignment expression
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											) // end LogicalOrExpression
										)
									)
								),
								(AsmLineWithColon
									asmLine=
									(AsmLineWithoutColon
										expr=
										// : "a" (128)
										(LogicalOrExpression
											expr+=
											(LogicalAndExpression
												expr+=
												(InclusiveOrExpression
													expr+=
													(ExclusiveOrExpression
														expr+=
														(AndExpression
															expr+=
															(EqualityExpression
																expr+=
																(RelationalExpression
																	expr+=
																	(ShiftExpression
																		expr+=
																		(AdditiveExpression
																			expr+=
																			(MultiplicativeExpression
																				expr+=
																				(CastExpression
																					expr=
																					(UnaryExpression
																						expr=
																						(PostfixExpression
																							expr+=
																							(PrimaryExpression
																								const=
																								(common::Constant2
																									str++"\\\"a\\\""
																								)
																							),
																							suffix+=
																							(PostfixExpressionSuffixArgument
																								argumentExpressionList=
																								(ArgumentExpressionList
																									expr+=
																									(AssignmentExpression
																										expr=
																										(ConditionalExpression
																											expr=
																											(LogicalOrExpression
																												expr+=
																												(LogicalAndExpression
																													expr+=
																													(InclusiveOrExpression
																														expr+=
																														(ExclusiveOrExpression
																															expr+=
																															(AndExpression
																																expr+=
																																(EqualityExpression
																																	expr+=
																																	(RelationalExpression
																																		expr+=
																																		(ShiftExpression
																																			expr+=
																																			(AdditiveExpression
																																				expr+=
																																				(MultiplicativeExpression
																																					expr+=
																																					(CastExpression
																																						expr=
																																						(UnaryExpression
																																							expr=
																																							(PostfixExpression
																																								expr+=
																																								(PrimaryExpression
																																									const=
																																									(common::Constant2
																																										dec++"128"
																																									)
																																								)
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											) // end LogicalOrExpression
																										)
																									) // end assignment expression
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										) // end LogicalOrExpression
									)
								),
								(AsmLineWithColon
									asmLine=
									(AsmLineWithoutColon
										expr=
										// : "memory",
										(LogicalOrExpression
											expr+=
											(LogicalAndExpression
												expr+=
												(InclusiveOrExpression
													expr+=
													(ExclusiveOrExpression
														expr+=
														(AndExpression
															expr+=
															(EqualityExpression
																expr+=
																(RelationalExpression
																	expr+=
																	(ShiftExpression
																		expr+=
																		(AdditiveExpression
																			expr+=
																			(MultiplicativeExpression
																				expr+=
																				(CastExpression
																					expr=
																					(UnaryExpression
																						expr=
																						(PostfixExpression
																							expr+=
																							(PrimaryExpression
																								const=
																								(common::Constant2
																									str++"\\\"memory\\\""
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										), // end LogicalOrExpression
										asmLines+=
										(AsmLine
											comma?=true,
											expr=
											// "cc"
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									const=
																									(common::Constant2
																										str++"\\\"cc\\\""
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											) // end LogicalOrExpression
										)
									)
								),
								semi++";"
							) // end AsmStatement
						),
						// if (...) { }
						(Statement
							stmt=
							(SelectionStatement
								if++"if",
								expr=
								(Expression
									exprExpr+=
									(AssignmentExpression
										expr=
										(ConditionalExpression
											expr=
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		op+*"[<=]",
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(CastExpression
																								expr=
																								(UnaryExpression
																									expr=
																								
																									(PostfixExpression
																										expr+=
																										(PrimaryExpression
																											const=
																											(common::Constant2
																												dec++"125"
																											)
																										)
																									)
																								
																								)
																							),
																							op=
																							(UnaryOperator
																								op++"-"
																							)
																						)
																					)
																				)
																			)
																		),
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									id++"res"
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													), // end inclusive or expression
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		op+*"[<]",
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									id++"res"
																								)
																							)
																						)
																					)
																				)
																			)
																		),
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									const=
																									(common::Constant2
																										dec++"0"
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													) // end inclusive or expression
												) // end logical and expression
											)
										)
									)
								), // end expression
								ifStatement=
								(Statement
									stmt=
									(CompoundStatement
										body=
										(BodyStatement
											blockList+=
											(BlockList
												statement+=
												// errno = -res;
												(Statement
													stmt=
													(ExpressionStatement
														expression=
														(Expression
															exprExpr+=
															(AssignmentExpression
																expr=
																(UnaryExpression
																	expr=
																	(PostfixExpression
																		expr+=
																		(PrimaryExpression
																			id++"errno"
																		)
																	)
																), // end unary expression
																op=
																(AssignmentOperator
																	op++"="
																),
																assignmentExpr=
																(AssignmentExpression
																	expr=
																	(ConditionalExpression
																		expr=
																		(LogicalOrExpression
																			expr+=
																			(LogicalAndExpression
																				expr+=
																				(InclusiveOrExpression
																					expr+=
																					(ExclusiveOrExpression
																						expr+=
																						(AndExpression
																							expr+=
																							(EqualityExpression
																								expr+=
																								(RelationalExpression
																									expr+=
																									(ShiftExpression
																										expr+=
																										(AdditiveExpression
																											expr+=
																											(MultiplicativeExpression
																												expr+=
																												(CastExpression
																													expr=
																													(UnaryExpression
																														op=
																														(UnaryOperator
																															op++"-"
																														),
																														expr=
																														(CastExpression
																															expr=
																															(UnaryExpression
																																expr=
																																(PostfixExpression
																																	expr+=
																																	(PrimaryExpression
																																		id++"res"
																																	)
																																)
																															
																															)
																														)
																													)
																												)
																											)
																										)
																									)
																								)
																								
																							)
																						)
																					)
																				)
																			)
																		)
																	) // end conditional expression
																) // end assignment expression
															) // end assignment expression
															
														)//end expression
													)
												), // end statement (errno = ...)
												// res = -1;
												(Statement
													stmt=
													(ExpressionStatement
														expression=
														(Expression
															exprExpr+=
															(AssignmentExpression
																expr=
																(UnaryExpression
																	expr=
																	(PostfixExpression
																		expr+=
																		(PrimaryExpression
																			id++"res"
																		)
																	)
																), // end unary expression
																op=
																(AssignmentOperator
																	op++"="
																),
																assignmentExpr=
																(AssignmentExpression
																	expr=
																	(ConditionalExpression
																		expr=
																		(LogicalOrExpression
																			expr+=
																			(LogicalAndExpression
																				expr+=
																				(InclusiveOrExpression
																					expr+=
																					(ExclusiveOrExpression
																						expr+=
																						(AndExpression
																							expr+=
																							(EqualityExpression
																								expr+=
																								(RelationalExpression
																									expr+=
																									(ShiftExpression
																										expr+=
																										(AdditiveExpression
																											expr+=
																											(MultiplicativeExpression
																												expr+=
																												(CastExpression
																													expr=
																													(UnaryExpression
																														op=
																														(UnaryOperator
																															op++"-"
																														),
																														expr=
																														(CastExpression
																															expr=
																															(UnaryExpression
																																expr=
																																(PostfixExpression
																																	expr+=
																																	(PrimaryExpression
																																		const=
																																		(common::Constant2
																																			dec++"1"
																																		)
																																	)
																																)
																															
																															)
																														)
																													)
																												)
																											)
																										)
																									)
																								)
																								
																							)
																						)
																					)
																				)
																			)
																		)
																	) // end conditional expression
																) // end assignment expression
															) // end assignment expression
															
														)//end expression
													)
												) // end statement (res = ...)
											)
										)
									) // end compound statement
								) // end ifStatement=Statement
							) // end SelectionStatement
						), // end Statement
						// return res;
						(Statement
							stmt=
							(JumpStatement
								expr=
								(Expression
									exprExpr+=
									(AssignmentExpression
										expr=
										(ConditionalExpression
											expr=
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									id++"res"
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										)
									)
								), // end expression
							return++"return",
							semi++";"
							) // end jump statement
						) // end statement
					) // end block list
				) // end body statement
			) // end function definition			
		) // end external declaration of function
	)
//)
//)
//----------------------------------------------------------------------
output file="bin/Test0029_Assembler.c"
expected file isSameAsInputFile
replacePatterns file="res/Patterns.txt"
//----------------------------------------------------------------------
//----------------------------------------------------------------------
