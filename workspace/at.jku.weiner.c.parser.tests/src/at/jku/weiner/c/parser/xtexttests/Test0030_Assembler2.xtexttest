//----------------------------------------------------------------------
//----------------------------------------------------------------------
package at.jku.weiner.c.parser
language parser
//----------------------------------------------------------------------
source file="res/Test0030_Assembler2.c"
//----------------------------------------------------------------------
lexer-tokens
BLOCK_COMMENT NEWLINE
LINEDIRECTIVE NEWLINE
NEWLINE
KW_INT WHITESPACE ID LEFTPAREN
	KW_VOID
RIGHTPAREN NEWLINE
LEFTBRACE NEWLINE
	WHITESPACE KW_INT WHITESPACE ID WHITESPACE ASSIGN WHITESPACE DECIMAL_LITERAL SEMI NEWLINE
	WHITESPACE KW_INT WHITESPACE ID WHITESPACE ASSIGN WHITESPACE DECIMAL_LITERAL SEMI NEWLINE	
	NEWLINE
	WHITESPACE BLOCK_COMMENT NEWLINE
	WHITESPACE KW_ASM2 WHITESPACE LEFTPAREN NEWLINE
		WHITESPACE STRING_LITERAL WHITESPACE BLOCK_COMMENT NEWLINE
		WHITESPACE STRING_LITERAL WHITESPACE BLOCK_COMMENT NEWLINE
		WHITESPACE BLOCK_COMMENT NEWLINE
		WHITESPACE COLON WHITESPACE STRING_LITERAL WHITESPACE
			LEFTPAREN ID RIGHTPAREN WHITESPACE BLOCK_COMMENT NEWLINE
		WHITESPACE COLON WHITESPACE STRING_LITERAL WHITESPACE
			LEFTPAREN ID RIGHTPAREN WHITESPACE BLOCK_COMMENT NEWLINE
		WHITESPACE COLON WHITESPACE STRING_LITERAL WHITESPACE
			BLOCK_COMMENT NEWLINE
	WHITESPACE RIGHTPAREN SEMI NEWLINE
	NEWLINE
	WHITESPACE BLOCK_COMMENT NEWLINE
	WHITESPACE ID LEFTPAREN STRING_LITERAL COMMA WHITESPACE ID RIGHTPAREN SEMI NEWLINE
	WHITESPACE KW_RETURN WHITESPACE DECIMAL_LITERAL SEMI NEWLINE
RIGHTBRACE NEWLINE
//----------------------------------------------------------------------
(Model unit+=
	(TranslationUnit 
		external+=
		// int main(void)
		(ExternalDeclaration 
			functiondefHead=
			(FunctionDefHead
				funDeclSpecifiers=
				(FunctionDeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						name++"int"
					)
				),
				funDeclarator=
				(Declarator
					declarator=
					(DirectDeclarator
						id++"main",
						declaratorSuffix+=
						(DeclaratorSuffix
							lastSuffix=
							(DirectDeclaratorLastSuffix
								parameterTypeList+=
								(ParameterTypeList
									list=
									(ParameterList
										parameterDeclaration+=
										(ParameterDeclaration
											declSpecifiers=
											(DeclarationSpecifiers
												declarationSpecifier+=
												(TypeSpecifier
													name++"void"
												)	
											)
										)
									) // end parameter list
								)
							)
						) // DeclaratorSuffix
					)
				)
			),
			functionDefinition=
			(FunctionDefinition
				body=
				(BodyStatement
					blockList+=
					(BlockList
						declaration+=
						// int foo = 5;
						(Declaration
							specifiers=
							(DeclarationSpecifiers
								declarationSpecifier+=
								(TypeSpecifier
									name++"int"
								)
							),
							initDeclaratorList+=
							(InitDeclaratorList
								initDeclarator+=
								(InitDeclarator
									declarator=
									(Declarator
										declarator=
										(DirectDeclarator
											id++"foo"
										)
									),
									initializer=
									(Initializer
										expr=
										(AssignmentExpression
											expr=
											(ConditionalExpression
												expr=
												(LogicalOrExpression
													expr+=
													(LogicalAndExpression
														expr+=
														(InclusiveOrExpression
															expr+=
															(ExclusiveOrExpression
																expr+=
																(AndExpression
																	expr+=
																	(EqualityExpression
																		expr+=
																		(RelationalExpression
																			expr+=
																			(ShiftExpression
																				expr+=
																				(AdditiveExpression
																					expr+=
																					(MultiplicativeExpression
																						expr+=
																						(CastExpression
																							expr=
																							(UnaryExpression
																								expr=
																								(PostfixExpression
																									expr+=
																									(PrimaryExpression
																										const=
																										(Constant
																											dec++"5"
																										)
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										) // end assignment expression
									)
								)
							),
							semi++";"
						), // end declaration
						// int bar = 4;
						(Declaration
							specifiers=
							(DeclarationSpecifiers
								declarationSpecifier+=
								(TypeSpecifier
									name++"int"
								)
							),
							initDeclaratorList+=
							(InitDeclaratorList
								initDeclarator+=
								(InitDeclarator
									declarator=
									(Declarator
										declarator=
										(DirectDeclarator
											id++"bar"
										)
									),
									initializer=
									(Initializer
										expr=
										(AssignmentExpression
											expr=
											(ConditionalExpression
												expr=
												(LogicalOrExpression
													expr+=
													(LogicalAndExpression
														expr+=
														(InclusiveOrExpression
															expr+=
															(ExclusiveOrExpression
																expr+=
																(AndExpression
																	expr+=
																	(EqualityExpression
																		expr+=
																		(RelationalExpression
																			expr+=
																			(ShiftExpression
																				expr+=
																				(AdditiveExpression
																					expr+=
																					(MultiplicativeExpression
																						expr+=
																						(CastExpression
																							expr=
																							(UnaryExpression
																								expr=
																								(PostfixExpression
																									expr+=
																									(PrimaryExpression
																										const=
																										(Constant
																											dec++"4"
																										)
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										) // end assignment expression
									)
								)
							),
							semi++";"
						), // end declaration
						statement+=
						// _asm statement
						(Statement
							stmt=
							(AsmStatement
								asmLine+=
								// "add .."
								(AsmLineWithColon
									expr=
									(LogicalOrExpression
										expr+=
										(LogicalAndExpression
											expr+=
											(InclusiveOrExpression
												expr+=
												(ExclusiveOrExpression
													expr+=
													(AndExpression
														expr+=
														(EqualityExpression
															expr+=
															(RelationalExpression
																expr+=
																(ShiftExpression
																	expr+=
																	(AdditiveExpression
																		expr+=
																		(MultiplicativeExpression
																			expr+=
																			(CastExpression
																				expr=
																				(UnaryExpression
																					expr=
																					(PostfixExpression
																						expr+=
																						(PrimaryExpression
																							const=
																							(Constant
																								str++"\\\"add %1, %0\\\\n\\\\t\\\""
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										)
									) // end LogicalOrExpression
								),
								// "inc .."
								(AsmLineWithColon
									expr=
									(LogicalOrExpression
										expr+=
										(LogicalAndExpression
											expr+=
											(InclusiveOrExpression
												expr+=
												(ExclusiveOrExpression
													expr+=
													(AndExpression
														expr+=
														(EqualityExpression
															expr+=
															(RelationalExpression
																expr+=
																(ShiftExpression
																	expr+=
																	(AdditiveExpression
																		expr+=
																		(MultiplicativeExpression
																			expr+=
																			(CastExpression
																				expr=
																				(UnaryExpression
																					expr=
																					(PostfixExpression
																						expr+=
																						(PrimaryExpression
																							const=
																							(Constant
																								str++"\\\"inc %0\\\""
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										)
									) // end LogicalOrExpression
								),
								// : "+r" (bar)
								(AsmLineWithColon
									expr=
									(LogicalOrExpression
										expr+=
										(LogicalAndExpression
											expr+=
											(InclusiveOrExpression
												expr+=
												(ExclusiveOrExpression
													expr+=
													(AndExpression
														expr+=
														(EqualityExpression
															expr+=
															(RelationalExpression
																expr+=
																(ShiftExpression
																	expr+=
																	(AdditiveExpression
																		expr+=
																		(MultiplicativeExpression
																			expr+=
																			(CastExpression
																				expr=
																				(UnaryExpression
																					expr=
																					(PostfixExpression
																						expr+=
																						(PrimaryExpression
																							const=
																							(Constant
																								str++"\\\"+r\\\""
																							)
																						),
																						suffix+=
																						(PostfixExpressionSuffixArgument
																							argumentExpressionList=
																							(ArgumentExpressionList
																								expr+=
																								(AssignmentExpression
																									expr=
																									(ConditionalExpression
																										expr=
																										(LogicalOrExpression
																											expr+=
																											(LogicalAndExpression
																												expr+=
																												(InclusiveOrExpression
																													expr+=
																													(ExclusiveOrExpression
																														expr+=
																														(AndExpression
																															expr+=
																															(EqualityExpression
																																expr+=
																																(RelationalExpression
																																	expr+=
																																	(ShiftExpression
																																		expr+=
																																		(AdditiveExpression
																																			expr+=
																																			(MultiplicativeExpression
																																				expr+=
																																				(CastExpression
																																					expr=
																																					(UnaryExpression
																																						expr=
																																						(PostfixExpression
																																							expr+=
																																							(PrimaryExpression
																																								id++"bar"
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										) // end LogicalOrExpression
																									)
																								) // end assignment expression
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										)
									) // end LogicalOrExpression
								),
								// : "g" (foo)
								(AsmLine
									expr=
									(LogicalOrExpression
										expr+=
										(LogicalAndExpression
											expr+=
											(InclusiveOrExpression
												expr+=
												(ExclusiveOrExpression
													expr+=
													(AndExpression
														expr+=
														(EqualityExpression
															expr+=
															(RelationalExpression
																expr+=
																(ShiftExpression
																	expr+=
																	(AdditiveExpression
																		expr+=
																		(MultiplicativeExpression
																			expr+=
																			(CastExpression
																				expr=
																				(UnaryExpression
																					expr=
																					(PostfixExpression
																						expr+=
																						(PrimaryExpression
																							const=
																							(Constant
																								str++"\\\"g\\\""
																							)
																						),
																						suffix+=
																						(PostfixExpressionSuffixArgument
																							argumentExpressionList=
																							(ArgumentExpressionList
																								expr+=
																								(AssignmentExpression
																									expr=
																									(ConditionalExpression
																										expr=
																										(LogicalOrExpression
																											expr+=
																											(LogicalAndExpression
																												expr+=
																												(InclusiveOrExpression
																													expr+=
																													(ExclusiveOrExpression
																														expr+=
																														(AndExpression
																															expr+=
																															(EqualityExpression
																																expr+=
																																(RelationalExpression
																																	expr+=
																																	(ShiftExpression
																																		expr+=
																																		(AdditiveExpression
																																			expr+=
																																			(MultiplicativeExpression
																																				expr+=
																																				(CastExpression
																																					expr=
																																					(UnaryExpression
																																						expr=
																																						(PostfixExpression
																																							expr+=
																																							(PrimaryExpression
																																								id++"foo"
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										) // end LogicalOrExpression
																									)
																								) // end assignment expression
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										)
									) // end LogicalOrExpression
								),
								// "cc"
								(AsmLineWithColon
									expr=
									(LogicalOrExpression
										expr+=
										(LogicalAndExpression
											expr+=
											(InclusiveOrExpression
												expr+=
												(ExclusiveOrExpression
													expr+=
													(AndExpression
														expr+=
														(EqualityExpression
															expr+=
															(RelationalExpression
																expr+=
																(ShiftExpression
																	expr+=
																	(AdditiveExpression
																		expr+=
																		(MultiplicativeExpression
																			expr+=
																			(CastExpression
																				expr=
																				(UnaryExpression
																					expr=
																					(PostfixExpression
																						expr+=
																						(PrimaryExpression
																							const=
																							(Constant
																								str++"\\\"cc\\\""
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										)
									) // end LogicalOrExpressio
								)
							) // end asm statement
						),
						// printf(...);
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(Expression
									exprExpr+=
									(AssignmentExpression
										expr=
										(ConditionalExpression
											expr=
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									id++"printf"
																								),
																								suffix+=
																								(PostfixExpressionSuffixArgument
																									argumentExpressionList=
																									(ArgumentExpressionList
																										expr+=
																										(AssignmentExpression
																											expr=
																											(ConditionalExpression
																												expr=
																												(LogicalOrExpression
																													expr+=
																													(LogicalAndExpression
																														expr+=
																														(InclusiveOrExpression
																															expr+=
																															(ExclusiveOrExpression
																																expr+=
																																(AndExpression
																																	expr+=
																																	(EqualityExpression
																																		expr+=
																																		(RelationalExpression
																																			expr+=
																																			(ShiftExpression
																																				expr+=
																																				(AdditiveExpression
																																					expr+=
																																					(MultiplicativeExpression
																																						expr+=
																																						(CastExpression
																																							expr=
																																							(UnaryExpression
																																								expr=
																																								(PostfixExpression
																																									expr+=
																																									(PrimaryExpression
																																										const=
																																										(Constant
																																											str++"\\\"Ergebnis: %i\\\\n\\\""
																																										)
																																									)
																																								)
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										), // end assignment expression
																										(AssignmentExpression
																											expr=
																											(ConditionalExpression
																												expr=
																												(LogicalOrExpression
																													expr+=
																													(LogicalAndExpression
																														expr+=
																														(InclusiveOrExpression
																															expr+=
																															(ExclusiveOrExpression
																																expr+=
																																(AndExpression
																																	expr+=
																																	(EqualityExpression
																																		expr+=
																																		(RelationalExpression
																																			expr+=
																																			(ShiftExpression
																																				expr+=
																																				(AdditiveExpression
																																					expr+=
																																					(MultiplicativeExpression
																																						expr+=
																																						(CastExpression
																																							expr=
																																							(UnaryExpression
																																								expr=
																																								(PostfixExpression
																																									expr+=
																																									(PrimaryExpression
																																										id++"bar"
																																									)
																																								)
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										) // end assignment expression
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																	
																)
															)
														)
													)
												)
											)
										)
									)
								), // end expression
								semi++";"
							) // end expression statement
						), // end printf statement
						// return 0;
						(Statement
							stmt=
							(JumpStatement
								expr=
								(Expression
									exprExpr+=
									(AssignmentExpression
										expr=
										(ConditionalExpression
											expr=
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									const=
																									(Constant
																										dec++"0"
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										)
									)
								), // end expression
							return++"return",
							semi++";"
							) // end jump statement
						) // end statement
					) // end block list
				) // end body statement
			) // end function definition			
		) // end external declaration of function
	)
)
//----------------------------------------------------------------------
output file="bin/Test0030_Assembler2.c"
expected file isSameAsInputFile
replacePatterns file="res/Patterns.txt"
//----------------------------------------------------------------------
//----------------------------------------------------------------------
