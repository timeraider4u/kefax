//----------------------------------------------------------------------
//----------------------------------------------------------------------
package at.jku.weiner.c.parser
language parser
imports at.jku.weiner.c.common.common
//----------------------------------------------------------------------
source file="res/Test0031_Enums.c"
//----------------------------------------------------------------------
lexer-tokens
LINEDIRECTIVE NEWLINE
NEWLINE
KW_CONST WHITESPACE KW_INT
	WHITESPACE ID WHITESPACE SKW_ASSIGN WHITESPACE DECIMAL_LITERAL SKW_COMMA NEWLINE
	WHITESPACE ID WHITESPACE SKW_ASSIGN WHITESPACE DECIMAL_LITERAL SKW_COMMA NEWLINE
	WHITESPACE ID WHITESPACE SKW_ASSIGN WHITESPACE DECIMAL_LITERAL SKW_COMMA NEWLINE
	WHITESPACE ID WHITESPACE SKW_ASSIGN WHITESPACE DECIMAL_LITERAL SKW_COMMA NEWLINE
	WHITESPACE ID WHITESPACE SKW_ASSIGN WHITESPACE DECIMAL_LITERAL SKW_COMMA NEWLINE
	WHITESPACE ID WHITESPACE SKW_ASSIGN WHITESPACE DECIMAL_LITERAL SKW_COMMA NEWLINE
	WHITESPACE ID WHITESPACE SKW_ASSIGN WHITESPACE DECIMAL_LITERAL SKW_SEMI NEWLINE	
NEWLINE
KW_ENUM WHITESPACE SKW_LEFTBRACE 
	WHITESPACE ID SKW_ASSIGN DECIMAL_LITERAL SKW_COMMA
	WHITESPACE ID SKW_COMMA WHITESPACE ID SKW_COMMA NEWLINE 
	WHITESPACE ID SKW_COMMA WHITESPACE ID SKW_COMMA WHITESPACE ID SKW_COMMA NEWLINE
	WHITESPACE ID SKW_COMMA WHITESPACE SKW_RIGHTBRACE SKW_SEMI NEWLINE
NEWLINE
KW_ENUM WHITESPACE SKW_LEFTBRACE 
	WHITESPACE ID SKW_ASSIGN DECIMAL_LITERAL SKW_COMMA
	WHITESPACE ID SKW_COMMA WHITESPACE ID SKW_COMMA NEWLINE 
	WHITESPACE ID SKW_COMMA WHITESPACE ID SKW_COMMA WHITESPACE ID SKW_COMMA NEWLINE
	WHITESPACE ID SKW_RIGHTBRACE WHITESPACE ID SKW_SEMI NEWLINE
NEWLINE
KW_ENUM WHITESPACE ID WHITESPACE SKW_LEFTBRACE 
	WHITESPACE ID SKW_ASSIGN DECIMAL_LITERAL SKW_COMMA
	WHITESPACE ID SKW_COMMA WHITESPACE ID SKW_COMMA NEWLINE 
	WHITESPACE ID SKW_COMMA WHITESPACE ID SKW_COMMA WHITESPACE ID SKW_COMMA NEWLINE
	WHITESPACE ID SKW_RIGHTBRACE SKW_SEMI NEWLINE
KW_ENUM WHITESPACE ID WHITESPACE ID WHITESPACE SKW_ASSIGN WHITESPACE ID SKW_SEMI NEWLINE
NEWLINE
KW_INT WHITESPACE ID SKW_LEFTPAREN KW_VOID SKW_RIGHTPAREN WHITESPACE SKW_LEFTBRACE NEWLINE
	WHITESPACE ID SKW_LEFTPAREN STRING_LITERAL SKW_COMMA WHITESPACE ID SKW_RIGHTPAREN SKW_SEMI NEWLINE
	WHITESPACE ID SKW_LEFTPAREN STRING_LITERAL SKW_COMMA WHITESPACE ID SKW_RIGHTPAREN SKW_SEMI NEWLINE
	WHITESPACE ID SKW_LEFTPAREN STRING_LITERAL SKW_COMMA WHITESPACE ID SKW_RIGHTPAREN SKW_SEMI NEWLINE
	WHITESPACE ID SKW_LEFTPAREN STRING_LITERAL SKW_COMMA WHITESPACE ID SKW_RIGHTPAREN SKW_SEMI NEWLINE
	WHITESPACE ID WHITESPACE SKW_ASSIGN WHITESPACE ID SKW_SEMI NEWLINE
	WHITESPACE ID SKW_LEFTPAREN STRING_LITERAL SKW_COMMA WHITESPACE ID SKW_RIGHTPAREN SKW_SEMI NEWLINE
	WHITESPACE ID SKW_LEFTPAREN STRING_LITERAL SKW_COMMA WHITESPACE ID SKW_RIGHTPAREN SKW_SEMI NEWLINE
	WHITESPACE KW_RETURN WHITESPACE DECIMAL_LITERAL SKW_SEMI NEWLINE
SKW_RIGHTBRACE NEWLINE
//----------------------------------------------------------------------
//(common::Model units+=
	//(common::TranslationUnit 
	(Parser
		external+=
		// const int ...;
		(ExternalDeclaration
			declaration=
			(Declaration
				specifiers=
				(DeclarationSpecifiers
					declarationSpecifier+=
					(TypeQualifier
						type++"const"
					),
					(TypeSpecifier
						name++"int"
					)
				),
				initDeclaratorList+=
				(InitDeclaratorList
					initDeclarator+=
					(InitDeclarator
						declarator=
						(Declarator
							declarator=
							(DirectDeclarator
								ident++"W_MONDAY"
							)
						),
						initializer=
						(Initializer
							expr=
							(PrimaryExpression
								const=
								(common::Constant2
									dec++"1"
								)
							)
						) // end initializer
					), // end init declarator
					(InitDeclarator
						declarator=
						(Declarator
							declarator=
							(DirectDeclarator
								ident++"W_TUESDAY"
							)
						),
						initializer=
						(Initializer
							expr=
							(PrimaryExpression
								const=
								(common::Constant2
									dec++"2"
								)
							) // end expression
						) // end initializer
					), // end init declarator
					(InitDeclarator
						declarator=
						(Declarator
							declarator=
							(DirectDeclarator
								ident++"W_WEDNESDAY"
							)
						),
						initializer=
						(Initializer
							expr=
							(PrimaryExpression
								const=
								(common::Constant2
									dec++"3"
								)
							) // end expression
						) // end initializer
					), // end init declarator
					(InitDeclarator
						declarator=
						(Declarator
							declarator=
							(DirectDeclarator
								ident++"W_THURSDAY"
							)
						),
						initializer=
						(Initializer
							expr=
							(PrimaryExpression
								const=
								(common::Constant2
									dec++"4"
								)
							)
						) // end initializer
					), // end init declarator
					(InitDeclarator
						declarator=
						(Declarator
							declarator=
							(DirectDeclarator
								ident++"W_FRIDAY"
							)
						),
						initializer=
						(Initializer
							expr=
							(PrimaryExpression
								const=
								(common::Constant2
									dec++"5"
								)
							)
						) // end initializer
					), // end init declarator
					(InitDeclarator
						declarator=
						(Declarator
							declarator=
							(DirectDeclarator
								ident++"W_SATURDAY"
							)
						),
						initializer=
						(Initializer
							expr=
							(PrimaryExpression
								const=
								(common::Constant2
									dec++"6"
								)
							)
						) // end initializer
					), // end init declarator
					(InitDeclarator
						declarator=
						(Declarator
							declarator=
							(DirectDeclarator
								ident++"W_SUNDAY"
							)
						),
						initializer=
						(Initializer
							expr=
							(PrimaryExpression
								const=
								(common::Constant2
									dec++"7"
								)
							)
						) // end initializer
					) // end init declarator
				)
			)
		),
		// enum { ... };
		(ExternalDeclaration
			declaration=
			(Declaration
				specifiers=
				(DeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						specifier=
						(EnumSpecifier
							enumList=
							(EnumeratorList
								enumerator+=
								// MONDAY = ...
								(Enumerator
									ident++"MONDAY",
									expr=
									(PrimaryExpression
										const=
										(common::Constant2
											dec++"1"
										)
									)
								), // end enumerator
								// TUESDAY = ...
								(Enumerator
									ident++"TUESDAY"
								), // end enumerator
								// WEDNESDAY = ...
								(Enumerator
									ident++"WEDNESDAY"
								), // end enumerator
								// THURSDAY = ...
								(Enumerator
									ident++"THURSDAY"
								), // end enumerator
								// FRIDAY = ...
								(Enumerator
									ident++"FRIDAY"
								), // end enumerator
								// SATURDAY = ...
								(Enumerator
									ident++"SATURDAY"
								), // end enumerator
								// SUNDAY = ...
								(Enumerator
									ident++"SUNDAY"
								) // end enumerator
							)
						)
					)
				)
				
			)
		),
		// enum { ... } iAmInLove;
		(ExternalDeclaration
			declaration=
			(Declaration
				specifiers=
				(DeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						specifier=
						(EnumSpecifier
							enumList=
							(EnumeratorList
								enumerator+=
								// I_MONDAY = ...
								(Enumerator
									ident++"I_MONDAY",
									expr=
									(PrimaryExpression
										const=
										(common::Constant2
											dec++"1"
										)
									)
								), // end enumerator
								// I_TUESDAY = ...
								(Enumerator
									ident++"I_TUESDAY"
								), // end enumerator
								// I_WEDNESDAY = ...
								(Enumerator
									ident++"I_WEDNESDAY"
								), // end enumerator
								// I_THURSDAY = ...
								(Enumerator
									ident++"I_THURSDAY"
								), // end enumerator
								// I_FRIDAY = ...
								(Enumerator
									ident++"I_FRIDAY"
								), // end enumerator
								// I_SATURDAY = ...
								(Enumerator
									ident++"I_SATURDAY"
								), // end enumerator
								// I_SUNDAY = ...
								(Enumerator
									ident++"I_SUNDAY"
								) // end enumerator
							)
						)
					)
				)
				
			)
		),
		// enum weekdays { ... };
		(ExternalDeclaration
			declaration=
			(Declaration
				specifiers=
				(DeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						specifier=
						(EnumSpecifier
							ident++"weekdays",
							enumList=
							(EnumeratorList
								enumerator+=
								// M_MONDAY = ...
								(Enumerator
									ident++"M_MONDAY",
									expr=
									(PrimaryExpression
										const=
										(common::Constant2
											dec++"1"
										)
									)
								), // end enumerator
								// M_TUESDAY = ...
								(Enumerator
									ident++"M_TUESDAY"
								), // end enumerator
								// M_WEDNESDAY = ...
								(Enumerator
									ident++"M_WEDNESDAY"
								), // end enumerator
								// M_THURSDAY = ...
								(Enumerator
									ident++"M_THURSDAY"
								), // end enumerator
								// M_FRIDAY = ...
								(Enumerator
									ident++"M_FRIDAY"
								), // end enumerator
								// M_SATURDAY = ...
								(Enumerator
									ident++"M_SATURDAY"
								), // end enumerator
								// M_SUNDAY = ...
								(Enumerator
									ident++"M_SUNDAY"
								) // end enumerator
							)
						)
					)
				)
				
			)
		),
		// enum weekdays my_weekday = ... ;
		(ExternalDeclaration
			declaration=
			(Declaration
				specifiers=
				(DeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						specifier=
						(EnumSpecifier
							ident++"weekdays"
						)
					)
				),
				initDeclaratorList+=
				(InitDeclaratorList
					initDeclarator+=
					(InitDeclarator
						declarator=
						(Declarator
							declarator=
							(DirectDeclarator
								ident++"my_weekday"
							)
						),
						initializer=
						(Initializer
							expr=
							(PrimaryExpression
								ident++"M_FRIDAY"
							)
						) // end initializer
					) // end init declarator
				) // end init declarator list
			)
		),
		// int main(...)
		(ExternalDeclaration 
			functiondefHead=
			(FunctionDefHead
				funDeclSpecifiers=
				(FunctionDeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						name++"int"
					)
				),
				funDeclarator=
				(Declarator
					declarator=
					(DirectDeclarator
						ident++"main",
						declaratorSuffix+=
						(DeclaratorSuffix
							lastSuffix=
							(DirectDeclaratorLastSuffix
								parameterTypeList+=
								(ParameterTypeList
									list=
									(ParameterList
										parameterDeclaration+=
										(ParameterDeclaration
											declSpecifiers=
											(DeclarationSpecifiers
												declarationSpecifier+=
												(TypeSpecifier
													name++"void"
												)
											)
										) 
									) // end parameter list
								)
							)
						) // DeclaratorSuffix
					)
				)
			),
			functionDefinition=
			(FunctionDefinition
				body=
				(BodyStatement
					blockList+=
					(BlockList
						statement+=
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(PostfixExpression
									expr=
									(PrimaryExpression
										ident++"printf"
									),
									suffix=
									(PostfixExpressionSuffixArgument
										argumentExpressionList=
										(ArgumentExpressionList
											expr+=
											(PrimaryExpression
												string+*"[\\\"Monday is %d. day of week\\\\n\\\"]"
											),
											(PrimaryExpression
												ident++"W_MONDAY"
											)
										)
									)
								)
							) // end expression statement
						), // end statement
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(PostfixExpression
									expr=
									(PrimaryExpression
										ident++"printf"
									),
									suffix=
									(PostfixExpressionSuffixArgument
										argumentExpressionList=
										(ArgumentExpressionList
											expr+=
											(PrimaryExpression
													string+*"[\\\"Monday is %d. day of week\\\\n\\\"]"
											),
											(PrimaryExpression
												ident++"MONDAY"
											)
										)
									)
								)
							) // end expression statement
						), // end statement
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(PostfixExpression
									expr=
									(PrimaryExpression
										ident++"printf"
									),
									suffix=
									(PostfixExpressionSuffixArgument
										argumentExpressionList=
										(ArgumentExpressionList
											expr+=
											(PrimaryExpression
												string+*"[\\\"Sunday is %d. day of week\\\\n\\\"]"
											),
											(PrimaryExpression
												ident++"W_SUNDAY"
											)
										)
									)
								) // end expression
							) // end expression statement
						), // end statement
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(PostfixExpression
									expr=
									(PrimaryExpression
										ident++"printf"
									),
									suffix=
									(PostfixExpressionSuffixArgument
										argumentExpressionList=
										(ArgumentExpressionList
											expr+=
											(PrimaryExpression
												string+*"[\\\"Sunday is %d. day of week\\\\n\\\"]"
											),
											(PrimaryExpression
												ident++"SUNDAY"
											)
										)
									)
								) // end expression
							) // end expression statement
						), // end statement
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(AssignmentExpression
									expr=
									(PrimaryExpression
										ident++"iAmInLove"
									),
									op++"=",
									assignmentExpr=
									(PrimaryExpression
										ident++"I_FRIDAY"
									)
								) // end assignment expression
							)
						), // end statement
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(PostfixExpression
									expr=
									(PrimaryExpression
										ident++"printf"
									),
									suffix=
									(PostfixExpressionSuffixArgument
										argumentExpressionList=
										(ArgumentExpressionList
											expr+=
											(PrimaryExpression
												string+*"[\\\"The %d. day of the week is my favourite!\\\\n\\\"]"
											),
											(PrimaryExpression
												ident++"iAmInLove"
											)
										)
									)
								)
							)
						), // end statement
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(PostfixExpression
									expr=
									(PrimaryExpression
										ident++"printf"
									),
									suffix=
									(PostfixExpressionSuffixArgument
										argumentExpressionList=
										(ArgumentExpressionList
											expr+=
											(PrimaryExpression
												string+*"[\\\"The %d. day of the week is my favourite!\\\\n\\\"]"
											),
											(PrimaryExpression
												ident++"my_weekday"
											)
										)
									)
								)
							)
						), // end statement
						(Statement
							stmt=
							(JumpStatement
								expr=
								(PrimaryExpression
									const=
									(common::Constant2
										dec++"0"	
									)
								), // end expression
								return++"return"
							) // end jump statement
						) // end second statement
					) // end block list
				) // end body statement
			)
		) // end external declaration
	)
//)
//)
//----------------------------------------------------------------------
output file="bin/Test0031_Enums.c"
expected file isSameAsInputFile
replacePatterns file="res/Patterns.txt"
//----------------------------------------------------------------------
//----------------------------------------------------------------------
