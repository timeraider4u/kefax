//----------------------------------------------------------------------
//----------------------------------------------------------------------
package at.jku.weiner.c.parser
language parser
imports at.jku.weiner.c.common.common
//----------------------------------------------------------------------
source file="res/Test0034_Union.c"
//----------------------------------------------------------------------
lexer-tokens
LINEDIRECTIVE NEWLINE
NEWLINE

KW_UNION WHITESPACE ID WHITESPACE SKW_LEFTBRACE NEWLINE
	WHITESPACE KW_CHAR WHITESPACE ID SKW_SEMI NEWLINE
	WHITESPACE KW_FLOAT WHITESPACE ID SKW_SEMI NEWLINE 
SKW_RIGHTBRACE SKW_SEMI NEWLINE
NEWLINE
KW_UNION WHITESPACE ID WHITESPACE ID SKW_SEMI NEWLINE
NEWLINE

KW_INT WHITESPACE ID SKW_LEFTPAREN KW_VOID SKW_RIGHTPAREN WHITESPACE SKW_LEFTBRACE NEWLINE
	// unsigned long size = (unsigned long)sizeof(number);
	WHITESPACE KW_UNSIGNED WHITESPACE KW_LONG WHITESPACE ID WHITESPACE SKW_ASSIGN
		WHITESPACE SKW_LEFTPAREN KW_UNSIGNED WHITESPACE KW_LONG SKW_RIGHTPAREN
		KW_SIZEOF SKW_LEFTPAREN ID SKW_RIGHTPAREN SKW_SEMI NEWLINE
	// printf(s)
	WHITESPACE ID SKW_LEFTPAREN STRING_LITERAL SKW_COMMA WHITESPACE ID SKW_RIGHTPAREN SKW_SEMI NEWLINE
	WHITESPACE ID SKW_LEFTPAREN STRING_LITERAL SKW_COMMA WHITESPACE 
		KW_SIZEOF SKW_LEFTPAREN ID SKW_DOT ID SKW_RIGHTPAREN SKW_RIGHTPAREN SKW_SEMI NEWLINE
	WHITESPACE ID SKW_LEFTPAREN STRING_LITERAL SKW_COMMA WHITESPACE 
		KW_SIZEOF SKW_LEFTPAREN KW_FLOAT SKW_RIGHTPAREN SKW_RIGHTPAREN SKW_SEMI NEWLINE
	// number.numChar = 65;
	//WHITESPACE LINE_COMMENT NEWLINE
	WHITESPACE ID SKW_DOT ID WHITESPACE SKW_ASSIGN WHITESPACE DECIMAL_LITERAL SKW_SEMI NEWLINE
	// printf(s)
	WHITESPACE ID SKW_LEFTPAREN STRING_LITERAL SKW_COMMA WHITESPACE ID SKW_DOT ID SKW_RIGHTPAREN SKW_SEMI NEWLINE
	WHITESPACE ID SKW_LEFTPAREN STRING_LITERAL SKW_COMMA WHITESPACE ID SKW_DOT ID SKW_RIGHTPAREN SKW_SEMI NEWLINE
	WHITESPACE ID SKW_LEFTPAREN STRING_LITERAL SKW_COMMA WHITESPACE ID SKW_DOT ID SKW_RIGHTPAREN SKW_SEMI NEWLINE
	// number.numFloat = 0.56789;
	WHITESPACE ID SKW_DOT ID WHITESPACE SKW_ASSIGN WHITESPACE FLOAT_LITERAL SKW_SEMI NEWLINE
	// printf(s)
	WHITESPACE ID SKW_LEFTPAREN STRING_LITERAL SKW_COMMA WHITESPACE ID SKW_DOT ID SKW_RIGHTPAREN SKW_SEMI NEWLINE
	WHITESPACE ID SKW_LEFTPAREN STRING_LITERAL SKW_COMMA WHITESPACE ID SKW_DOT ID SKW_RIGHTPAREN SKW_SEMI NEWLINE
	// return
	WHITESPACE KW_RETURN WHITESPACE DECIMAL_LITERAL SKW_SEMI NEWLINE
SKW_RIGHTBRACE NEWLINE
//----------------------------------------------------------------------
//(common::Model units+=
	//(common::TranslationUnit 
	(Parser
		external+=
		// union num { ... };
		(ExternalDeclaration
			declaration=
			(Declaration
				specifiers=
				(DeclarationSpecifiers
					declarationSpecifier+=
					(StructOrUnionSpecifier
						type=
						(StructOrUnion
							name++"union"
						),
						id++"num",
						structDeclList=
						(StructDeclarationList
							structDeclaration+=
							// char numChar
							(StructDeclaration
								list=
								(SpecifierQualifierList
									typeSpecifier+=
									(TypeSpecifier
										name++"char"
									)
								),
								structDeclarationList=
								(StructDeclaratorList
									structDeclarator+=
									(StructDeclarator
										declarator=
										(Declarator
											declarator=
											(DirectDeclarator
												id++"numChar"
											)
										)
									)
								)
							),
							// float numFloat
							(StructDeclaration
								list=
								(SpecifierQualifierList
									typeSpecifier+=
									(TypeSpecifier
										name++"float"
									)
								),
								structDeclarationList=
								(StructDeclaratorList
									structDeclarator+=
									(StructDeclarator
										declarator=
										(Declarator
											declarator=
											(DirectDeclarator
												id++"numFloat"
											)
										)
									)
								)
							)
						)
					)
				)
			)
		),
		// union num number;
		(ExternalDeclaration
			declaration=
			(Declaration
				specifiers=
				(DeclarationSpecifiers
					declarationSpecifier+=
					(StructOrUnionSpecifier
						type=
						(StructOrUnion
							name++"union"
						),
						id++"num"
					)
				),
				initDeclaratorList+=
				(InitDeclaratorList
					initDeclarator+=
					(InitDeclarator
						declarator=
						(Declarator
							declarator=
							(DirectDeclarator
								id++"number"
							)
						)
					)
				)
			)
		),
		// int main(...)
		(ExternalDeclaration 
			functiondefHead=
			(FunctionDefHead
				funDeclSpecifiers=
				(FunctionDeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						name++"int"
					)
				),
				funDeclarator=
				(Declarator
					declarator=
					(DirectDeclarator
						id++"main",
						declaratorSuffix+=
						(DeclaratorSuffix
							lastSuffix=
							(DirectDeclaratorLastSuffix
								parameterTypeList+=
								(ParameterTypeList
									list=
									(ParameterList
										parameterDeclaration+=
										(ParameterDeclaration
											declSpecifiers=
											(DeclarationSpecifiers
												declarationSpecifier+=
												(TypeSpecifier
													name++"void"
												)
											)
										) 
									) // end parameter list
								)
							)
						) // DeclaratorSuffix
					)
				)
			),
			functionDefinition=
			(FunctionDefinition
				body=
				(BodyStatement
					blockList+=
					(BlockList
						declaration+=
						// unsigned long size = ...
						(Declaration
							specifiers=
							(DeclarationSpecifiers
								declarationSpecifier+=
								(TypeSpecifier
									name++"unsigned"
								),
								(TypeSpecifier
									name++"long"
								)
							),
							initDeclaratorList+=
							(InitDeclaratorList
								initDeclarator+=
								(InitDeclarator
									declarator=
									(Declarator
										declarator=
										(DirectDeclarator
											id++"size"
										)
									),
									initializer=
									(Initializer
										expr=
										(AssignmentExpression
											expr=
											(ConditionalExpression
												expr=
												(LogicalOrExpression
													expr+=
													(LogicalAndExpression
														expr+=
														(InclusiveOrExpression
															expr+=
															(ExclusiveOrExpression
																expr+=
																(AndExpression
																	expr+=
																	(EqualityExpression
																		expr+=
																		(RelationalExpression
																			expr+=
																			(ShiftExpression
																				expr+=
																				(AdditiveExpression
																					expr+=
																					(MultiplicativeExpression
																						expr+=
																						(CastExpression
																							type=
																							(TypeName
																								list=
																								(SpecifierQualifierList
																									typeSpecifier+=
																									(TypeSpecifier
																										name++"unsigned"
																									),
																									(TypeSpecifier
																										name++"long"
																									)
																								)
																							),
																							expr=
																							(CastExpression
																								expr=
																								(UnaryExpression
																									sizeOf++"sizeof",
																									expr=
																									(UnaryExpression
																										expr=
																										(PostfixExpression
																											expr+=
																											(PrimaryExpression
																												expr=
																												(Expression
																													exprExpr+=
																													(AssignmentExpression
																														expr=
																														(ConditionalExpression
																															expr=
																															(LogicalOrExpression
																																expr+=
																																(LogicalAndExpression
																																	expr+=
																																	(InclusiveOrExpression
																																		expr+=
																																		(ExclusiveOrExpression
																																			expr+=
																																			(AndExpression
																																				expr+=
																																				(EqualityExpression
																																					expr+=
																																					(RelationalExpression
																																						expr+=
																																						(ShiftExpression
																																							expr+=
																																							(AdditiveExpression
																																								expr+=
																																								(MultiplicativeExpression
																																									expr+=
																																									(CastExpression
																																										expr=
																																										(UnaryExpression
																																											expr=
																																											(PostfixExpression
																																												expr+=
																																												(PrimaryExpression
																																													id++"number"
																																												) 
																																											) 
																																										)
																																									)
																																								)
																																							)
																																						)
																																					)	
																																				) 
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										)
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										) // end assignment expression
									)
								)
							)
						), // end declaration (unsigned long size = ...)
						statement+=
						// printf(..., size);
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(Expression
									exprExpr+=
									(AssignmentExpression
										expr=
										(ConditionalExpression
											expr=
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									id++"printf"
																								),
																								suffix+=
																								(PostfixExpressionSuffixArgument
																									argumentExpressionList=
																									(ArgumentExpressionList
																										expr+=
																										(AssignmentExpression
																											expr=
																											(ConditionalExpression
																												expr=
																												(LogicalOrExpression
																													expr+=
																													(LogicalAndExpression
																														expr+=
																														(InclusiveOrExpression
																															expr+=
																															(ExclusiveOrExpression
																																expr+=
																																(AndExpression
																																	expr+=
																																	(EqualityExpression
																																		expr+=
																																		(RelationalExpression
																																			expr+=
																																			(ShiftExpression
																																				expr+=
																																				(AdditiveExpression
																																					expr+=
																																					(MultiplicativeExpression
																																						expr+=
																																						(CastExpression
																																							expr=
																																							(UnaryExpression
																																								expr=
																																								(PostfixExpression
																																									expr+=
																																									(PrimaryExpression
																																										const=
																																										(common::Constant2
																																											str++"\\\"sizeof(number)=%lu\\\\n\\\""
																																										)
																																									)
																																								)
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										), // end assignment expression
																										(AssignmentExpression
																											expr=
																											(ConditionalExpression
																												expr=
																												(LogicalOrExpression
																													expr+=
																													(LogicalAndExpression
																														expr+=
																														(InclusiveOrExpression
																															expr+=
																															(ExclusiveOrExpression
																																expr+=
																																(AndExpression
																																	expr+=
																																	(EqualityExpression
																																		expr+=
																																		(RelationalExpression
																																			expr+=
																																			(ShiftExpression
																																				expr+=
																																				(AdditiveExpression
																																					expr+=
																																					(MultiplicativeExpression
																																						expr+=
																																						(CastExpression
																																							expr=
																																							(UnaryExpression
																																								expr=
																																								(PostfixExpression
																																									expr+=
																																									(PrimaryExpression
																																										id++"size"
																																									) // end primary expression
																																								)
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										) // end assignment expression
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																	
																)
															)
														)
													)
												)
											)
										)
									)
								), // end expression
								semi++";"
							) // end expression statement
						), // end statement
						// printf(..., sizeof(number.numChar);
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(Expression
									exprExpr+=
									(AssignmentExpression
										expr=
										(ConditionalExpression
											expr=
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									id++"printf"
																								),
																								suffix+=
																								(PostfixExpressionSuffixArgument
																									argumentExpressionList=
																									(ArgumentExpressionList
																										expr+=
																										(AssignmentExpression
																											expr=
																											(ConditionalExpression
																												expr=
																												(LogicalOrExpression
																													expr+=
																													(LogicalAndExpression
																														expr+=
																														(InclusiveOrExpression
																															expr+=
																															(ExclusiveOrExpression
																																expr+=
																																(AndExpression
																																	expr+=
																																	(EqualityExpression
																																		expr+=
																																		(RelationalExpression
																																			expr+=
																																			(ShiftExpression
																																				expr+=
																																				(AdditiveExpression
																																					expr+=
																																					(MultiplicativeExpression
																																						expr+=
																																						(CastExpression
																																							expr=
																																							(UnaryExpression
																																								expr=
																																								(PostfixExpression
																																									expr+=
																																									(PrimaryExpression
																																										const=
																																										(common::Constant2
																																											str++"\\\"sizeof(number.numChar)=%lu\\\\n\\\""
																																										)
																																									)
																																								)
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										), // end assignment expression
																										(AssignmentExpression
																											expr=
																											(ConditionalExpression
																												expr=
																												(LogicalOrExpression
																													expr+=
																													(LogicalAndExpression
																														expr+=
																														(InclusiveOrExpression
																															expr+=
																															(ExclusiveOrExpression
																																expr+=
																																(AndExpression
																																	expr+=
																																	(EqualityExpression
																																		expr+=
																																		(RelationalExpression
																																			expr+=
																																			(ShiftExpression
																																				expr+=
																																				(AdditiveExpression
																																					expr+=
																																					(MultiplicativeExpression
																																						expr+=
																																						(CastExpression
																																							expr=
																																							(UnaryExpression
																																								sizeOf++"sizeof",
																																								expr=
																																								(UnaryExpression
																																									expr=
																																									(PostfixExpression
																																										expr+=
																																										(PrimaryExpression
																																											// (...)
																																											expr=
																																											(Expression
																																												exprExpr+=
																																												(AssignmentExpression
																																													expr=
																																													(ConditionalExpression
																																														expr=
																																														(LogicalOrExpression
																																															expr+=
																																															(LogicalAndExpression
																																																expr+=
																																																(InclusiveOrExpression
																																																	expr+=
																																																	(ExclusiveOrExpression
																																																		expr+=
																																																		(AndExpression
																																																			expr+=
																																																			(EqualityExpression
																																																				expr+=
																																																				(RelationalExpression
																																																					expr+=
																																																					(ShiftExpression
																																																						expr+=
																																																						(AdditiveExpression
																																																							expr+=
																																																							(MultiplicativeExpression
																																																								expr+=
																																																								(CastExpression
																																																									expr=
																																																									(UnaryExpression
																																																										expr=
																																																										(PostfixExpression
																																																											expr+=
																																																											(PrimaryExpression
																																																												id++"number"
																																																											),
																																																											suffix+=
																																																											(PostfixExpressionSuffixDot
																																																												id++"numChar"
																																																											)
																																																										)
																																																									)	
																																																								)
																																																							)
																																																						)
																																																					)
																																																				)
																																																			)
																																																		)
																																																	)
																																																)
																																															)
																																														)
																																													)
																																												)
																																											) 
																																										) // end primary expression
																																									)
																																								)
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										) // end assignment expression
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																	
																)
															)
														)
													)
												)
											)
										)
									)
								), // end expression
								semi++";"
							) // end expression statement
						), // end statement
						// printf(..., sizeof(float);
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(Expression
									exprExpr+=
									(AssignmentExpression
										expr=
										(ConditionalExpression
											expr=
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									id++"printf"
																								),
																								suffix+=
																								(PostfixExpressionSuffixArgument
																									argumentExpressionList=
																									(ArgumentExpressionList
																										expr+=
																										(AssignmentExpression
																											expr=
																											(ConditionalExpression
																												expr=
																												(LogicalOrExpression
																													expr+=
																													(LogicalAndExpression
																														expr+=
																														(InclusiveOrExpression
																															expr+=
																															(ExclusiveOrExpression
																																expr+=
																																(AndExpression
																																	expr+=
																																	(EqualityExpression
																																		expr+=
																																		(RelationalExpression
																																			expr+=
																																			(ShiftExpression
																																				expr+=
																																				(AdditiveExpression
																																					expr+=
																																					(MultiplicativeExpression
																																						expr+=
																																						(CastExpression
																																							expr=
																																							(UnaryExpression
																																								expr=
																																								(PostfixExpression
																																									expr+=
																																									(PrimaryExpression
																																										const=
																																										(common::Constant2
																																											str++"\\\"sizeof(float)=%lu\\\\n\\\""
																																										)
																																									)
																																								)
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										), // end assignment expression
																										(AssignmentExpression
																											expr=
																											(ConditionalExpression
																												expr=
																												(LogicalOrExpression
																													expr+=
																													(LogicalAndExpression
																														expr+=
																														(InclusiveOrExpression
																															expr+=
																															(ExclusiveOrExpression
																																expr+=
																																(AndExpression
																																	expr+=
																																	(EqualityExpression
																																		expr+=
																																		(RelationalExpression
																																			expr+=
																																			(ShiftExpression
																																				expr+=
																																				(AdditiveExpression
																																					expr+=
																																					(MultiplicativeExpression
																																						expr+=
																																						(CastExpression
																																							expr=
																																							(UnaryExpression
																																								sizeOf++"sizeof",
																																								typeName=
																																								(TypeName
																																									list=
																																									(SpecifierQualifierList
																																										typeSpecifier+=
																																										(TypeSpecifier
																																											name++"float"
																																										)
																																									)
																																								)
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										) // end assignment expression
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																	
																)
															)
														)
													)
												)
											)
										)
									)
								), // end expression
								semi++";"
							) // end expression statement
						), // end statement
						// number.numChar = 65;
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(Expression
									exprExpr+=
									(AssignmentExpression
										expr=
										(UnaryExpression
											expr=
											(PostfixExpression
												expr+=
												(PrimaryExpression
													id++"number"
												),
												suffix+=
												(PostfixExpressionSuffixDot
													id++"numChar"
												)
											)
										), // end unary expression
										op=
										(AssignmentOperator
											op++"="
										),
										assignmentExpr=
										(AssignmentExpression
											expr=
											(ConditionalExpression
												expr=
												(LogicalOrExpression
													expr+=
													(LogicalAndExpression
														expr+=
														(InclusiveOrExpression
															expr+=
															(ExclusiveOrExpression
																expr+=
																(AndExpression
																	expr+=
																	(EqualityExpression
																		expr+=
																		(RelationalExpression
																			expr+=
																			(ShiftExpression
																				expr+=
																				(AdditiveExpression
																					expr+=
																					(MultiplicativeExpression
																						expr+=
																						(CastExpression
																							expr=
																							(UnaryExpression
																								expr=
																								(PostfixExpression
																									expr+=
																									(PrimaryExpression
																										const=
																										(common::Constant2
																											dec++"65"
																										)
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																		
																	)
																)
															)
														)
													)
												)
											) // end conditional expression
										) // end assignment expression
									) // end assignment expression
								),//end expression
								semi++";"
							)
						), // end statement
						// printf(..., number.numFloat);
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(Expression
									exprExpr+=
									(AssignmentExpression
										expr=
										(ConditionalExpression
											expr=
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									id++"printf"
																								),
																								suffix+=
																								(PostfixExpressionSuffixArgument
																									argumentExpressionList=
																									(ArgumentExpressionList
																										expr+=
																										(AssignmentExpression
																											expr=
																											(ConditionalExpression
																												expr=
																												(LogicalOrExpression
																													expr+=
																													(LogicalAndExpression
																														expr+=
																														(InclusiveOrExpression
																															expr+=
																															(ExclusiveOrExpression
																																expr+=
																																(AndExpression
																																	expr+=
																																	(EqualityExpression
																																		expr+=
																																		(RelationalExpression
																																			expr+=
																																			(ShiftExpression
																																				expr+=
																																				(AdditiveExpression
																																					expr+=
																																					(MultiplicativeExpression
																																						expr+=
																																						(CastExpression
																																							expr=
																																							(UnaryExpression
																																								expr=
																																								(PostfixExpression
																																									expr+=
																																									(PrimaryExpression
																																										const=
																																										(common::Constant2
																																											str++"\\\"number.numChar(as decimal)=%d\\\\n\\\""
																																										)
																																									)
																																								)
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										), // end assignment expression
																										(AssignmentExpression
																											expr=
																											(ConditionalExpression
																												expr=
																												(LogicalOrExpression
																													expr+=
																													(LogicalAndExpression
																														expr+=
																														(InclusiveOrExpression
																															expr+=
																															(ExclusiveOrExpression
																																expr+=
																																(AndExpression
																																	expr+=
																																	(EqualityExpression
																																		expr+=
																																		(RelationalExpression
																																			expr+=
																																			(ShiftExpression
																																				expr+=
																																				(AdditiveExpression
																																					expr+=
																																					(MultiplicativeExpression
																																						expr+=
																																						(CastExpression
																																							expr=
																																							(UnaryExpression
																																								expr=
																																								(PostfixExpression
																																									expr+=
																																									(PrimaryExpression
																																										id++"number"
																																									),
																																									suffix+=
																																									(PostfixExpressionSuffixDot
																																										id++"numChar"
																																									)
																																								)
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										) // end assignment expression
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																	
																)
															)
														)
													)
												)
											)
										)
									)
								), // end expression
								semi++";"
							) // end expression statement
						), // end statement
						// printf(..., number.numFloat);
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(Expression
									exprExpr+=
									(AssignmentExpression
										expr=
										(ConditionalExpression
											expr=
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									id++"printf"
																								),
																								suffix+=
																								(PostfixExpressionSuffixArgument
																									argumentExpressionList=
																									(ArgumentExpressionList
																										expr+=
																										(AssignmentExpression
																											expr=
																											(ConditionalExpression
																												expr=
																												(LogicalOrExpression
																													expr+=
																													(LogicalAndExpression
																														expr+=
																														(InclusiveOrExpression
																															expr+=
																															(ExclusiveOrExpression
																																expr+=
																																(AndExpression
																																	expr+=
																																	(EqualityExpression
																																		expr+=
																																		(RelationalExpression
																																			expr+=
																																			(ShiftExpression
																																				expr+=
																																				(AdditiveExpression
																																					expr+=
																																					(MultiplicativeExpression
																																						expr+=
																																						(CastExpression
																																							expr=
																																							(UnaryExpression
																																								expr=
																																								(PostfixExpression
																																									expr+=
																																									(PrimaryExpression
																																										const=
																																										(common::Constant2
																																											str++"\\\"number.numChar(as char)=%c\\\\n\\\""
																																										)
																																									)
																																								)
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										), // end assignment expression
																										(AssignmentExpression
																											expr=
																											(ConditionalExpression
																												expr=
																												(LogicalOrExpression
																													expr+=
																													(LogicalAndExpression
																														expr+=
																														(InclusiveOrExpression
																															expr+=
																															(ExclusiveOrExpression
																																expr+=
																																(AndExpression
																																	expr+=
																																	(EqualityExpression
																																		expr+=
																																		(RelationalExpression
																																			expr+=
																																			(ShiftExpression
																																				expr+=
																																				(AdditiveExpression
																																					expr+=
																																					(MultiplicativeExpression
																																						expr+=
																																						(CastExpression
																																							expr=
																																							(UnaryExpression
																																								expr=
																																								(PostfixExpression
																																									expr+=
																																									(PrimaryExpression
																																										id++"number"
																																									),
																																									suffix+=
																																									(PostfixExpressionSuffixDot
																																										id++"numChar"
																																									)
																																								)
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										) // end assignment expression
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																	
																)
															)
														)
													)
												)
											)
										)
									)
								), // end expression
								semi++";"
							) // end expression statement
						), // end statement
						// printf(..., number.numFloat);
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(Expression
									exprExpr+=
									(AssignmentExpression
										expr=
										(ConditionalExpression
											expr=
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									id++"printf"
																								),
																								suffix+=
																								(PostfixExpressionSuffixArgument
																									argumentExpressionList=
																									(ArgumentExpressionList
																										expr+=
																										(AssignmentExpression
																											expr=
																											(ConditionalExpression
																												expr=
																												(LogicalOrExpression
																													expr+=
																													(LogicalAndExpression
																														expr+=
																														(InclusiveOrExpression
																															expr+=
																															(ExclusiveOrExpression
																																expr+=
																																(AndExpression
																																	expr+=
																																	(EqualityExpression
																																		expr+=
																																		(RelationalExpression
																																			expr+=
																																			(ShiftExpression
																																				expr+=
																																				(AdditiveExpression
																																					expr+=
																																					(MultiplicativeExpression
																																						expr+=
																																						(CastExpression
																																							expr=
																																							(UnaryExpression
																																								expr=
																																								(PostfixExpression
																																									expr+=
																																									(PrimaryExpression
																																										const=
																																										(common::Constant2
																																											str++"\\\"number.numFloat=%f\\\\n\\\""
																																										)
																																									)
																																								)
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										), // end assignment expression
																										(AssignmentExpression
																											expr=
																											(ConditionalExpression
																												expr=
																												(LogicalOrExpression
																													expr+=
																													(LogicalAndExpression
																														expr+=
																														(InclusiveOrExpression
																															expr+=
																															(ExclusiveOrExpression
																																expr+=
																																(AndExpression
																																	expr+=
																																	(EqualityExpression
																																		expr+=
																																		(RelationalExpression
																																			expr+=
																																			(ShiftExpression
																																				expr+=
																																				(AdditiveExpression
																																					expr+=
																																					(MultiplicativeExpression
																																						expr+=
																																						(CastExpression
																																							expr=
																																							(UnaryExpression
																																								expr=
																																								(PostfixExpression
																																									expr+=
																																									(PrimaryExpression
																																										id++"number"
																																									),
																																									suffix+=
																																									(PostfixExpressionSuffixDot
																																										id++"numFloat"
																																									)
																																								)
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										) // end assignment expression
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																	
																)
															)
														)
													)
												)
											)
										)
									)
								), // end expression
								semi++";"
							) // end expression statement
						), // end statement
						// number.numFloat = 0.56789;
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(Expression
									exprExpr+=
									(AssignmentExpression
										expr=
										(UnaryExpression
											expr=
											(PostfixExpression
												expr+=
												(PrimaryExpression
													id++"number"
												),
												suffix+=
												(PostfixExpressionSuffixDot
													id++"numFloat"
												)
											)
										), // end unary expression
										op=
										(AssignmentOperator
											op++"="
										),
										assignmentExpr=
										(AssignmentExpression
											expr=
											(ConditionalExpression
												expr=
												(LogicalOrExpression
													expr+=
													(LogicalAndExpression
														expr+=
														(InclusiveOrExpression
															expr+=
															(ExclusiveOrExpression
																expr+=
																(AndExpression
																	expr+=
																	(EqualityExpression
																		expr+=
																		(RelationalExpression
																			expr+=
																			(ShiftExpression
																				expr+=
																				(AdditiveExpression
																					expr+=
																					(MultiplicativeExpression
																						expr+=
																						(CastExpression
																							expr=
																							(UnaryExpression
																								expr=
																								(PostfixExpression
																									expr+=
																									(PrimaryExpression
																										const=
																										(common::Constant2
																											float++"0.56789"
																										)
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																		
																	)
																)
															)
														)
													)
												)
											) // end conditional expression
										) // end assignment expression
									) // end assignment expression
								),//end expression
								semi++";"
							)
						), // end statement
						// printf(..., number.numFloat);
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(Expression
									exprExpr+=
									(AssignmentExpression
										expr=
										(ConditionalExpression
											expr=
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									id++"printf"
																								),
																								suffix+=
																								(PostfixExpressionSuffixArgument
																									argumentExpressionList=
																									(ArgumentExpressionList
																										expr+=
																										(AssignmentExpression
																											expr=
																											(ConditionalExpression
																												expr=
																												(LogicalOrExpression
																													expr+=
																													(LogicalAndExpression
																														expr+=
																														(InclusiveOrExpression
																															expr+=
																															(ExclusiveOrExpression
																																expr+=
																																(AndExpression
																																	expr+=
																																	(EqualityExpression
																																		expr+=
																																		(RelationalExpression
																																			expr+=
																																			(ShiftExpression
																																				expr+=
																																				(AdditiveExpression
																																					expr+=
																																					(MultiplicativeExpression
																																						expr+=
																																						(CastExpression
																																							expr=
																																							(UnaryExpression
																																								expr=
																																								(PostfixExpression
																																									expr+=
																																									(PrimaryExpression
																																										const=
																																										(common::Constant2
																																											str++"\\\"number.numChar(as decimal)=%d\\\\n\\\""
																																										)
																																									)
																																								)
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										), // end assignment expression
																										(AssignmentExpression
																											expr=
																											(ConditionalExpression
																												expr=
																												(LogicalOrExpression
																													expr+=
																													(LogicalAndExpression
																														expr+=
																														(InclusiveOrExpression
																															expr+=
																															(ExclusiveOrExpression
																																expr+=
																																(AndExpression
																																	expr+=
																																	(EqualityExpression
																																		expr+=
																																		(RelationalExpression
																																			expr+=
																																			(ShiftExpression
																																				expr+=
																																				(AdditiveExpression
																																					expr+=
																																					(MultiplicativeExpression
																																						expr+=
																																						(CastExpression
																																							expr=
																																							(UnaryExpression
																																								expr=
																																								(PostfixExpression
																																									expr+=
																																									(PrimaryExpression
																																										id++"number"
																																									),
																																									suffix+=
																																									(PostfixExpressionSuffixDot
																																										id++"numChar"
																																									)
																																								)
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										) // end assignment expression
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										)
									)
								), // end expression
								semi++";"
							) // end expression statement
						), // end statement
						// printf(..., number.numFloat);
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(Expression
									exprExpr+=
									(AssignmentExpression
										expr=
										(ConditionalExpression
											expr=
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									id++"printf"
																								),
																								suffix+=
																								(PostfixExpressionSuffixArgument
																									argumentExpressionList=
																									(ArgumentExpressionList
																										expr+=
																										(AssignmentExpression
																											expr=
																											(ConditionalExpression
																												expr=
																												(LogicalOrExpression
																													expr+=
																													(LogicalAndExpression
																														expr+=
																														(InclusiveOrExpression
																															expr+=
																															(ExclusiveOrExpression
																																expr+=
																																(AndExpression
																																	expr+=
																																	(EqualityExpression
																																		expr+=
																																		(RelationalExpression
																																			expr+=
																																			(ShiftExpression
																																				expr+=
																																				(AdditiveExpression
																																					expr+=
																																					(MultiplicativeExpression
																																						expr+=
																																						(CastExpression
																																							expr=
																																							(UnaryExpression
																																								expr=
																																								(PostfixExpression
																																									expr+=
																																									(PrimaryExpression
																																										const=
																																										(common::Constant2
																																											str++"\\\"number.numFloat=%f\\\\n\\\""
																																										)
																																									)
																																								)
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										), // end assignment expression
																										(AssignmentExpression
																											expr=
																											(ConditionalExpression
																												expr=
																												(LogicalOrExpression
																													expr+=
																													(LogicalAndExpression
																														expr+=
																														(InclusiveOrExpression
																															expr+=
																															(ExclusiveOrExpression
																																expr+=
																																(AndExpression
																																	expr+=
																																	(EqualityExpression
																																		expr+=
																																		(RelationalExpression
																																			expr+=
																																			(ShiftExpression
																																				expr+=
																																				(AdditiveExpression
																																					expr+=
																																					(MultiplicativeExpression
																																						expr+=
																																						(CastExpression
																																							expr=
																																							(UnaryExpression
																																								expr=
																																								(PostfixExpression
																																									expr+=
																																									(PrimaryExpression
																																										id++"number"
																																									),
																																									suffix+=
																																									(PostfixExpressionSuffixDot
																																										id++"numFloat"
																																									)
																																								)
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										) // end assignment expression
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																	
																)
															)
														)
													)
												)
											)
										)
									)
								), // end expression
								semi++";"
							) // end expression statement
						), // end statement
						// return statement
						(Statement
							stmt=
							(JumpStatement
								expr=
								(Expression
									exprExpr+=
									(AssignmentExpression
										expr=
										(ConditionalExpression
											expr=
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									const=
																									(common::Constant2
																										dec++"0"
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																	
																)
															)
														)
													)
												)
											)
										)
									)
								), // end expression
								return++"return",
								semi++";"
							) // end jump statement
						) // end second statement
					) // end block list
				) // end body statement
			)
		) // end external declaration
	)
//)
//)
//----------------------------------------------------------------------
output file="bin/Test0034_Union.c"
expected file isSameAsInputFile
replacePatterns file="res/Patterns.txt"
//----------------------------------------------------------------------
//----------------------------------------------------------------------
