//----------------------------------------------------------------------
//----------------------------------------------------------------------
package at.jku.weiner.c.parser
language parser
imports at.jku.weiner.c.common.common
//----------------------------------------------------------------------
source file="res/Test0034_Union.c"
//----------------------------------------------------------------------
lexer-tokens
LINEDIRECTIVE NEWLINE
NEWLINE

KW_UNION WHITESPACE ID WHITESPACE SKW_LEFTBRACE NEWLINE
	WHITESPACE KW_CHAR WHITESPACE ID SKW_SEMI NEWLINE
	WHITESPACE KW_FLOAT WHITESPACE ID SKW_SEMI NEWLINE 
SKW_RIGHTBRACE SKW_SEMI NEWLINE
NEWLINE
KW_UNION WHITESPACE ID WHITESPACE ID SKW_SEMI NEWLINE
NEWLINE

KW_INT WHITESPACE ID SKW_LEFTPAREN KW_VOID SKW_RIGHTPAREN WHITESPACE SKW_LEFTBRACE NEWLINE
	// unsigned long size = (unsigned long)sizeof(number);
	WHITESPACE KW_UNSIGNED WHITESPACE KW_LONG WHITESPACE ID WHITESPACE SKW_ASSIGN
		WHITESPACE SKW_LEFTPAREN KW_UNSIGNED WHITESPACE KW_LONG SKW_RIGHTPAREN
		KW_SIZEOF SKW_LEFTPAREN ID SKW_RIGHTPAREN SKW_SEMI NEWLINE
	// printf(s)
	WHITESPACE ID SKW_LEFTPAREN STRING_LITERAL SKW_COMMA WHITESPACE ID SKW_RIGHTPAREN SKW_SEMI NEWLINE
	WHITESPACE ID SKW_LEFTPAREN STRING_LITERAL SKW_COMMA WHITESPACE 
		KW_SIZEOF SKW_LEFTPAREN ID SKW_DOT ID SKW_RIGHTPAREN SKW_RIGHTPAREN SKW_SEMI NEWLINE
	WHITESPACE ID SKW_LEFTPAREN STRING_LITERAL SKW_COMMA WHITESPACE 
		KW_SIZEOF SKW_LEFTPAREN KW_FLOAT SKW_RIGHTPAREN SKW_RIGHTPAREN SKW_SEMI NEWLINE
	// number.numChar = 65;
	//WHITESPACE LINE_COMMENT NEWLINE
	WHITESPACE ID SKW_DOT ID WHITESPACE SKW_ASSIGN WHITESPACE DECIMAL_LITERAL SKW_SEMI NEWLINE
	// printf(s)
	WHITESPACE ID SKW_LEFTPAREN STRING_LITERAL SKW_COMMA WHITESPACE ID SKW_DOT ID SKW_RIGHTPAREN SKW_SEMI NEWLINE
	WHITESPACE ID SKW_LEFTPAREN STRING_LITERAL SKW_COMMA WHITESPACE ID SKW_DOT ID SKW_RIGHTPAREN SKW_SEMI NEWLINE
	WHITESPACE ID SKW_LEFTPAREN STRING_LITERAL SKW_COMMA WHITESPACE ID SKW_DOT ID SKW_RIGHTPAREN SKW_SEMI NEWLINE
	// number.numFloat = 0.56789;
	WHITESPACE ID SKW_DOT ID WHITESPACE SKW_ASSIGN WHITESPACE FLOAT_LITERAL SKW_SEMI NEWLINE
	// printf(s)
	WHITESPACE ID SKW_LEFTPAREN STRING_LITERAL SKW_COMMA WHITESPACE ID SKW_DOT ID SKW_RIGHTPAREN SKW_SEMI NEWLINE
	WHITESPACE ID SKW_LEFTPAREN STRING_LITERAL SKW_COMMA WHITESPACE ID SKW_DOT ID SKW_RIGHTPAREN SKW_SEMI NEWLINE
	// return
	WHITESPACE KW_RETURN WHITESPACE DECIMAL_LITERAL SKW_SEMI NEWLINE
SKW_RIGHTBRACE NEWLINE
//----------------------------------------------------------------------
//(common::Model units+=
	//(common::TranslationUnit 
	(Parser
		external+=
		// union num { ... };
		(ExternalDeclaration
			declaration=
			(Declaration
				specifiers=
				(DeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						specifier=
						(StructOrUnionSpecifier
							type=
							(StructOrUnion
								name++"union"
							),
							ident++"num",
							structDeclList=
							(StructDeclarationList
								structDeclaration+=
								// char numChar
								(StructDeclaration
									list=
									(SpecifierQualifierList
										typeSpecifier+=
										(TypeSpecifier
											name++"char"
										)
									),
									structDeclarationList=
									(StructDeclaratorList
										structDeclarator+=
										(StructDeclarator
											declarator=
											(Declarator
												declarator=
												(DirectDeclarator
													ident++"numChar"
												)
											)
										)
									)
								),
								// float numFloat
								(StructDeclaration
									list=
									(SpecifierQualifierList
										typeSpecifier+=
										(TypeSpecifier
											name++"float"
										)
									),
									structDeclarationList=
									(StructDeclaratorList
										structDeclarator+=
										(StructDeclarator
											declarator=
											(Declarator
												declarator=
												(DirectDeclarator
													ident++"numFloat"
												)
											)
										)
									)
								)
							)
						) // struct or union specifier
					)
				)
			)
		),
		// union num number;
		(ExternalDeclaration
			declaration=
			(Declaration
				specifiers=
				(DeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						specifier=
						(StructOrUnionSpecifier
							type=
							(StructOrUnion
								name++"union"
							),
							ident++"num"
						)
					)
				),
				initDeclaratorList+=
				(InitDeclaratorList
					initDeclarator+=
					(InitDeclarator
						declarator=
						(Declarator
							declarator=
							(DirectDeclarator
								ident++"number"
							)
						)
					)
				)
			)
		),
		// int main(...)
		(ExternalDeclaration 
			functiondefHead=
			(FunctionDefHead
				funDeclSpecifiers=
				(FunctionDeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						name++"int"
					)
				),
				funDeclarator=
				(Declarator
					declarator=
					(DirectDeclarator
						ident++"main",
						declaratorSuffix+=
						(DeclaratorSuffix
							lastSuffix=
							(DirectDeclaratorLastSuffix
								parameterTypeList+=
								(ParameterTypeList
									list=
									(ParameterList
										parameterDeclaration+=
										(ParameterDeclaration
											declSpecifiers=
											(DeclarationSpecifiers
												declarationSpecifier+=
												(TypeSpecifier
													name++"void"
												)
											)
										) 
									) // end parameter list
								)
							)
						) // DeclaratorSuffix
					)
				)
			),
			functionDefinition=
			(FunctionDefinition
				body=
				(BodyStatement
					blockList+=
					(BlockList
						declaration+=
						// unsigned long size = ...
						(Declaration
							specifiers=
							(DeclarationSpecifiers
								declarationSpecifier+=
								(TypeSpecifier
									name++"unsigned"
								),
								(TypeSpecifier
									name++"long"
								)
							),
							initDeclaratorList+=
							(InitDeclaratorList
								initDeclarator+=
								(InitDeclarator
									declarator=
									(Declarator
										declarator=
										(DirectDeclarator
											ident++"size"
										)
									),
									initializer=
									(Initializer
										expr=
										(CastExpression
											type=
											(TypeName
												list=
												(SpecifierQualifierList
													typeSpecifier+=
													(TypeSpecifier
														name++"unsigned"
													),
													(TypeSpecifier
														name++"long"
													)
												)
											),
											expr=
											(UnaryExpression
												sizeOf++"sizeof",
												expr=
												(PrimaryExpression
													expr=
													(PrimaryExpression
														ident++"number"
													)
												)
											)
										)
									)
								)
							)
						), // end declaration (unsigned long size = ...)
						statement+=
						// printf(..., size);
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(PostfixExpression
									expr=
									(PrimaryExpression
										ident++"printf"
									),
									suffix=
									(PostfixExpressionSuffixArgument
										argumentExpressionList=
										(ArgumentExpressionList
											expr+=
											(PrimaryExpression
												string+*"[\\\"sizeof(number)=%lu\\\\n\\\"]"
											), // end expression
											(PrimaryExpression
												ident++"size"
											) // end primary expression
										)
									)
								) // end expression
							) // end expression statement
						), // end statement
						// printf(..., sizeof(number.numChar);
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(PostfixExpression
									expr=
									(PrimaryExpression
										ident++"printf"
									),
									suffix=
									(PostfixExpressionSuffixArgument
										argumentExpressionList=
										(ArgumentExpressionList
											expr+=
											(PrimaryExpression
												string+*"[\\\"sizeof(number.numChar)=%lu\\\\n\\\"]"
											),
											(UnaryExpression
												sizeOf++"sizeof",
												expr=
												(PrimaryExpression
													// (...)
													parentheses?=true,
													expr=
													(PostfixExpression
														expr=
														(PrimaryExpression
															ident++"number"
														),
														suffix=
														(PostfixExpressionSuffixDot
															ident++"numChar"
														)
													)
												) // end primary expression
											)
										)
									)
								) // end expression
							) // end expression statement
						), // end statement
						// printf(..., sizeof(float);
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(PostfixExpression
									expr=
									(PrimaryExpression
										ident++"printf"
									),
									suffix=
									(PostfixExpressionSuffixArgument
										argumentExpressionList=
										(ArgumentExpressionList
											expr+=
											(PrimaryExpression
												string+*"[\\\"sizeof(float)=%lu\\\\n\\\"]"
											), // end expression
											(UnaryExpression
												sizeOf++"sizeof",
												typeName=
												(TypeName
													list=
													(SpecifierQualifierList
														typeSpecifier+=
														(TypeSpecifier
															name++"float"
														)
													)
												)
											)
										)
									)	
								)	
							) // end expression statement
						), // end statement
						// number.numChar = 65;
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(AssignmentExpression
									expr=
									(PostfixExpression
										expr=
										(PrimaryExpression
											ident++"number"
										),
										suffix=
										(PostfixExpressionSuffixDot
											ident++"numChar"
										)
									), // end  expression
									op++"=",
									assignmentExpr=										
									(PrimaryExpression
										const=
										(common::Constant2
											dec++"65"
										)
									)
								) // end expression	
							)
						), // end statement
						// printf(..., number.numFloat);
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(PostfixExpression
									expr=
									(PrimaryExpression
										ident++"printf"
									),
									suffix=
									(PostfixExpressionSuffixArgument
										argumentExpressionList=
										(ArgumentExpressionList
											expr+=
											(PrimaryExpression
												string+*"[\\\"number.numChar(as decimal)=%d\\\\n\\\"]"
											), // end expression
											(PostfixExpression
												expr=
												(PrimaryExpression
													ident++"number"
												),
												suffix=
												(PostfixExpressionSuffixDot
													ident++"numChar"
												)
											)
										)
									)
								) // end expression
							) // end expression statement
						), // end statement
						// printf(..., number.numFloat);
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(PostfixExpression
									expr=
									(PrimaryExpression
										ident++"printf"
									),
									suffix=
									(PostfixExpressionSuffixArgument
										argumentExpressionList=
										(ArgumentExpressionList
											expr+=
											(PrimaryExpression
												string+*"[\\\"number.numChar(as char)=%c\\\\n\\\"]"
											), // end expression
											(PostfixExpression
												expr=
												(PrimaryExpression
													ident++"number"
												),
												suffix=
												(PostfixExpressionSuffixDot
													ident++"numChar"
												)
											)
										)
									)
								) // end expression
							) // end expression statement
						), // end statement
						// printf(..., number.numFloat);
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(PostfixExpression
									expr=
									(PrimaryExpression
										ident++"printf"
									),
									suffix=
									(PostfixExpressionSuffixArgument
										argumentExpressionList=
										(ArgumentExpressionList
											expr+=
											(PrimaryExpression
												string+*"[\\\"number.numFloat=%f\\\\n\\\"]"
											), // end expression
											(PostfixExpression
												expr=
												(PrimaryExpression
													ident++"number"
												),
												suffix=
												(PostfixExpressionSuffixDot
													ident++"numFloat"
												)
											)
										)
									)
								) // end expression
							) // end expression statement
						), // end statement
						// number.numFloat = 0.56789;
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(AssignmentExpression
									expr=
									(PostfixExpression
										expr=
										(PrimaryExpression
											ident++"number"
										),
										suffix=
										(PostfixExpressionSuffixDot
											ident++"numFloat"
										)
									), // end postfix expression
									op++"=",
									assignmentExpr=
									(PrimaryExpression
										const=
										(common::Constant2
											float++"0.56789"
										)
									)
								)
							)
						), // end statement
						// printf(..., number.numFloat);
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(PostfixExpression
									expr=
									(PrimaryExpression
										ident++"printf"
									),
									suffix=
									(PostfixExpressionSuffixArgument
										argumentExpressionList=
										(ArgumentExpressionList
											expr+=
											(PrimaryExpression
												string+*"[\\\"number.numChar(as decimal)=%d\\\\n\\\"]"
											), // end expression
											(PostfixExpression
												expr=
												(PrimaryExpression
													ident++"number"
												),
												suffix=
												(PostfixExpressionSuffixDot
													ident++"numChar"
												)
											)
										)
									)	
								) // end expression
							) // end expression statement
						), // end statement
						// printf(..., number.numFloat);
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(PostfixExpression
									expr=
									(PrimaryExpression
										ident++"printf"
									),
									suffix=
									(PostfixExpressionSuffixArgument
										argumentExpressionList=
										(ArgumentExpressionList
											expr+=
											(PrimaryExpression
												string+*"[\\\"number.numFloat=%f\\\\n\\\"]"
											), // end expression
											(PostfixExpression
												expr=
												(PrimaryExpression
													ident++"number"
												),
												suffix=
												(PostfixExpressionSuffixDot
													ident++"numFloat"
												)
											)
										)
									)
								) // end expression
							) // end expression statement
						), // end statement
						// return statement
						(Statement
							stmt=
							(JumpStatement
								expr=
								(PrimaryExpression
									const=
									(common::Constant2
										dec++"0"
									)
								), // end expression
								return++"return"
							) // end jump statement
						) // end second statement
					) // end block list
				) // end body statement
			)
		) // end external declaration
	)
//)
//)
//----------------------------------------------------------------------
output file="bin/Test0034_Union.c"
expected file isSameAsInputFile
replacePatterns file="res/Patterns.txt"
//----------------------------------------------------------------------
//----------------------------------------------------------------------
