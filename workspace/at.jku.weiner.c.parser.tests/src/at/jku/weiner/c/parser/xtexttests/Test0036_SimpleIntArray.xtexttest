//----------------------------------------------------------------------
//----------------------------------------------------------------------
package at.jku.weiner.c.parser
language parser
imports at.jku.weiner.c.common.common
//----------------------------------------------------------------------
source file="res/Test0036_SimpleIntArray.c"
//----------------------------------------------------------------------
lexer-tokens
LINEDIRECTIVE NEWLINE
LINEDIRECTIVE NEWLINE
NEWLINE

KW_INT WHITESPACE ID SKW_LEFTBRACKET DECIMAL_LITERAL SKW_RIGHTBRACKET 
	WHITESPACE SKW_ASSIGN WHITESPACE SKW_LEFTBRACE
		DECIMAL_LITERAL SKW_COMMA WHITESPACE
		DECIMAL_LITERAL SKW_COMMA WHITESPACE
		DECIMAL_LITERAL SKW_COMMA WHITESPACE
		DECIMAL_LITERAL SKW_COMMA WHITESPACE
		DECIMAL_LITERAL SKW_COMMA WHITESPACE
		DECIMAL_LITERAL SKW_COMMA WHITESPACE 
	SKW_RIGHTBRACE SKW_SEMI NEWLINE
NEWLINE

KW_INT WHITESPACE ID SKW_LEFTPAREN
	KW_VOID
SKW_RIGHTPAREN WHITESPACE SKW_LEFTBRACE NEWLINE
	WHITESPACE ID SKW_LEFTPAREN STRING_LITERAL SKW_COMMA WHITESPACE 
		ID SKW_LEFTBRACKET DECIMAL_LITERAL SKW_RIGHTBRACKET SKW_RIGHTPAREN SKW_SEMI NEWLINE
	WHITESPACE KW_RETURN WHITESPACE DECIMAL_LITERAL SKW_SEMI NEWLINE
SKW_RIGHTBRACE NEWLINE
//----------------------------------------------------------------------
//(common::Model units+=
	//(common::TranslationUnit 
	(Parser
		external+=
		// int array[...] = ...
		(ExternalDeclaration
			declaration=
			(Declaration
				specifiers=
				(DeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						name++"int"
					)
				),
				initDeclaratorList+=
				(InitDeclaratorList
					initDeclarator+=
					(InitDeclarator
						declarator=
						(Declarator
							declarator=
							(DirectDeclarator
								id++"array",
								declaratorSuffix+=
								(DeclaratorSuffix
									expr=
									(PrimaryExpression
										const=
										(common::Constant2
											dec++"6"
										)
									)
								)
							)
						), // end declarator
						initializer=
						(Initializer
							// { ... }:
							list=
							(InitializerList
								init+=
								(Init
									initializer=
									(Initializer
										expr=
										(PrimaryExpression
											const=
											(common::Constant2
												dec++"1"
											)
										)
									) // end initializer
								),
								(Init
									initializer=
									(Initializer
										expr=
										(PrimaryExpression
											const=
											(common::Constant2
												dec++"2"
											)
										)
									) // end initializer
								),
								(Init
									initializer=
									(Initializer
										expr=
										(PrimaryExpression
											const=
											(common::Constant2
												dec++"3"
											)
										)
									) // end initializer
								),
								(Init
									initializer=
									(Initializer
										expr=
										(PrimaryExpression
											const=
											(common::Constant2
												dec++"5"
											)
										)
									) // end initializer
								),
								(Init
									initializer=
									(Initializer
										expr=
										(PrimaryExpression
											const=
											(common::Constant2
												dec++"7"
											)
										)
									) // end initializer
								),
								(Init
									initializer=
									(Initializer
										expr=
										(PrimaryExpression
											const=
											(common::Constant2
												dec++"11"
											)
										)
									) // end initializer
								)
							)
						)
					)
				)
			)
		),
		(ExternalDeclaration 
			functiondefHead=
			(FunctionDefHead
				funDeclSpecifiers=
				(FunctionDeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						name++"int"
					)
				),
				funDeclarator=
				(Declarator
					declarator=
					(DirectDeclarator
						id++"main",
						declaratorSuffix+=
						(DeclaratorSuffix
							lastSuffix=
							(DirectDeclaratorLastSuffix
								parameterTypeList+=
								(ParameterTypeList
									list=
									(ParameterList
										parameterDeclaration+=
										(ParameterDeclaration
											declSpecifiers=
											(DeclarationSpecifiers
												declarationSpecifier+=
												(TypeSpecifier
													name++"void"
												)
											)
										) 
									) // end parameter list
								)
							)
						) // DeclaratorSuffix
					)
				)
			),
			functionDefinition=
			(FunctionDefinition
				body=
				(BodyStatement
					blockList+=
					(BlockList
						statement+=
						// printf(..., ...);
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(PostfixExpression
									expr=
									(PrimaryExpression
										id++"printf"
									),
									suffix=
									(PostfixExpressionSuffixArgument
										argumentExpressionList=
										(ArgumentExpressionList
											expr+=
											(PrimaryExpression
												string+*"[\\\"%d\\\\n\\\"]"
											),
											(PostfixExpression
												expr=
												(PrimaryExpression
													id++"array"
												),
												suffix=
												(PostfixExpressionSuffixArray
													arrayExpr=
													(PrimaryExpression
														const=
														(common::Constant2
															dec++"3"
														)
													)	
												)	
											)	
										)
									)
								) // end expression
							) // end expression statement
						), // end statement
						// return statement
						(Statement
							stmt=
							(JumpStatement
								expr=
								(PrimaryExpression
									const=
									(common::Constant2
										dec++"0"
									)
								), // end expression
								return++"return"
							) // end jump statement
						) // end second statement
					) // end block list
				) // end body statement
			)
		) // end external declaration
	)
//)
//)
//----------------------------------------------------------------------
output file="bin/Test0036_SimpleIntArray.c"
expected file isSameAsInputFile
replacePatterns file="res/Patterns.txt"
//----------------------------------------------------------------------
//----------------------------------------------------------------------
