//----------------------------------------------------------------------
//----------------------------------------------------------------------
package at.jku.weiner.c.parser
language parser
imports at.jku.weiner.c.common.common
//----------------------------------------------------------------------
source file="res/Test0037_Struct.c"
//----------------------------------------------------------------------
lexer-tokens
LINEDIRECTIVE NEWLINE
LINEDIRECTIVE NEWLINE
NEWLINE

KW_STRUCT WHITESPACE ID WHITESPACE SKW_LEFTBRACE NEWLINE
	WHITESPACE KW_INT WHITESPACE ID SKW_SEMI NEWLINE
	WHITESPACE KW_CHAR WHITESPACE ID SKW_LEFTBRACKET 
		DECIMAL_LITERAL SKW_RIGHTBRACKET SKW_SEMI NEWLINE 
SKW_RIGHTBRACE WHITESPACE ID SKW_SEMI NEWLINE
NEWLINE
KW_STRUCT WHITESPACE ID WHITESPACE ID WHITESPACE SKW_ASSIGN WHITESPACE
	SKW_LEFTBRACE HEX_LITERAL SKW_COMMA WHITESPACE STRING_LITERAL SKW_RIGHTBRACE SKW_SEMI NEWLINE
NEWLINE

KW_INT WHITESPACE ID SKW_LEFTPAREN KW_VOID SKW_RIGHTPAREN WHITESPACE SKW_LEFTBRACE NEWLINE
	WHITESPACE ID SKW_LEFTPAREN STRING_LITERAL SKW_COMMA WHITESPACE 
		KW_SIZEOF SKW_LEFTPAREN ID SKW_DOT ID SKW_RIGHTPAREN SKW_RIGHTPAREN SKW_SEMI NEWLINE
	WHITESPACE ID SKW_LEFTPAREN STRING_LITERAL SKW_COMMA WHITESPACE 
		KW_SIZEOF SKW_LEFTPAREN ID SKW_DOT ID SKW_RIGHTPAREN SKW_RIGHTPAREN SKW_SEMI NEWLINE
	WHITESPACE ID SKW_LEFTPAREN STRING_LITERAL SKW_COMMA WHITESPACE 
		KW_SIZEOF SKW_LEFTPAREN ID SKW_RIGHTPAREN SKW_RIGHTPAREN SKW_SEMI NEWLINE
	
	WHITESPACE ID SKW_DOT ID WHITESPACE SKW_ASSIGN WHITESPACE HEX_LITERAL SKW_SEMI NEWLINE
	WHITESPACE ID SKW_LEFTPAREN ID SKW_DOT ID SKW_COMMA WHITESPACE 
		STRING_LITERAL SKW_RIGHTPAREN SKW_SEMI NEWLINE
	
	WHITESPACE ID SKW_LEFTPAREN STRING_LITERAL SKW_COMMA WHITESPACE ID SKW_DOT ID SKW_RIGHTPAREN SKW_SEMI NEWLINE
	WHITESPACE ID SKW_LEFTPAREN STRING_LITERAL SKW_COMMA WHITESPACE ID SKW_DOT ID SKW_RIGHTPAREN SKW_SEMI NEWLINE
	WHITESPACE ID SKW_LEFTPAREN STRING_LITERAL SKW_COMMA WHITESPACE ID SKW_DOT ID SKW_RIGHTPAREN SKW_SEMI NEWLINE
	WHITESPACE ID SKW_LEFTPAREN STRING_LITERAL SKW_COMMA WHITESPACE ID SKW_DOT ID SKW_RIGHTPAREN SKW_SEMI NEWLINE
	// return
	WHITESPACE KW_RETURN WHITESPACE DECIMAL_LITERAL SKW_SEMI NEWLINE
SKW_RIGHTBRACE NEWLINE

//----------------------------------------------------------------------
//(common::Model units+=
	//(common::TranslationUnit 
	(Parser
		external+=
		// struct employee { ... } phil;
		(ExternalDeclaration
			declaration=
			(Declaration
				specifiers=
				(DeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						specifier=
						(StructOrUnionSpecifier
							type=
							(StructOrUnion
								name++"struct"
							),
							ident++"employee",
							structDeclList=
							(StructDeclarationList
								structDeclaration+=
								// int ident
								(StructDeclaration
									list=
									(SpecifierQualifierList
										typeSpecifier+=
										(TypeSpecifier
											name++"int"
										)
									),
									structDeclarationList=
									(StructDeclaratorList
										structDeclarator+=
										(StructDeclarator
											declarator=
											(Declarator
												declarator=
												(DirectDeclarator
													ident++"ident"
												)
											)
										)
									)
								),
								// char name [...]
								(StructDeclaration
									list=
									(SpecifierQualifierList
										typeSpecifier+=
										(TypeSpecifier
											name++"char"
										)
									),
									structDeclarationList=
									(StructDeclaratorList
										structDeclarator+=
										(StructDeclarator
											declarator=
											(Declarator
												declarator=
												(DirectDeclarator
													ident++"name",
													declaratorSuffix+=
													(DeclaratorSuffix
														expr=
														(PrimaryExpression
															const=
															(common::Constant2
																dec++"250"
															)
														)
													)
												)
											)
										)
									)
								)
							)
						) // end struct or union specifier
					)
				), // end declaration specifiers
				initDeclaratorList+=
				(InitDeclaratorList
					initDeclarator+=
					(InitDeclarator
						declarator=
						(Declarator
							declarator=
							(DirectDeclarator
								ident++"phil"
							)
						)
					)
				)
			)
		),
		// struct employee joe;
		(ExternalDeclaration
			declaration=
			(Declaration
				specifiers=
				(DeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						specifier=
						(StructOrUnionSpecifier
							type=
							(StructOrUnion
								name++"struct"
							),
							ident++"employee"
						)
					)
				), // end declaration specifiers
				initDeclaratorList+=
				(InitDeclaratorList
					initDeclarator+=
					(InitDeclarator
						declarator=
						(Declarator
							declarator=
							(DirectDeclarator
								ident++"joe"
							)
						), // end declarator
						initializer=
						(Initializer
							// { ... }:
							list=
							(InitializerList
								init+=
								(Init
									initializer=
									(Initializer
										expr=
										(PrimaryExpression
											const=
											(common::Constant2
												hex++"0x007"
											)
										)
									) // end initializer
								),
								(Init
									initializer=
									(Initializer
										expr=
										(PrimaryExpression
											//const=
											//(common::Constant2
												string+*"[\\\"Joe Nobody\\\"]"
											//)
										)
									) // end initializer
								)
							)
						)
					)
				)
			)
		), // end external declaration
		// int main(...)
		(ExternalDeclaration 
			functiondefHead=
			(FunctionDefHead
				funDeclSpecifiers=
				(FunctionDeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						name++"int"
					)
				),
				funDeclarator=
				(Declarator
					declarator=
					(DirectDeclarator
						ident++"main",
						declaratorSuffix+=
						(DeclaratorSuffix
							lastSuffix=
							(DirectDeclaratorLastSuffix
								parameterTypeList+=
								(ParameterTypeList
									list=
									(ParameterList
										parameterDeclaration+=
										(ParameterDeclaration
											declSpecifiers=
											(DeclarationSpecifiers
												declarationSpecifier+=
												(TypeSpecifier
													name++"void"
												)
											)
										) 
									) // end parameter list
								)
							)
						) // DeclaratorSuffix
					)
				)
			),
			functionDefinition=
			(FunctionDefinition
				body=
				(BodyStatement
					blockList+=
					(BlockList
						statement+=
						// printf(..., sizeof(joe.ident));
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(PostfixExpression
									expr=
									(PrimaryExpression
										ident++"printf"
									),
									suffix=
									(PostfixExpressionSuffixArgument
										argumentExpressionList=
										(ArgumentExpressionList
											expr+=
											(PrimaryExpression
												string+*"[\\\"sizeof(joe.ident)=%lu\\\\n\\\"]"
											),
											(UnaryExpression
												sizeOf++"sizeof",
												expr=
												(PrimaryExpression
													parentheses?=true,
													// (...)
													expr=
													(PostfixExpression
														expr=
														(PrimaryExpression
															ident++"joe"
														),
														suffix=
														(PostfixExpressionSuffixDot
															ident++"ident"
														)
													)
													
												)
											)
										)
									)
								) // end expression
							) // end expression statement
						), // end statement
						// printf(..., sizeof(joe.name));
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(PostfixExpression
									expr=
									(PrimaryExpression
										ident++"printf"
									),
									suffix=
									(PostfixExpressionSuffixArgument
										argumentExpressionList=
										(ArgumentExpressionList
											expr+=
											(PrimaryExpression
												string+*"[\\\"sizeof(joe.name)=%lu\\\\n\\\"]"
											),
											(UnaryExpression
												sizeOf++"sizeof",
												expr=
												(PrimaryExpression
													parentheses?=true,
													expr=
													(PostfixExpression
														expr=
														(PrimaryExpression
															ident++"joe"
														),
														suffix=
														(PostfixExpressionSuffixDot
															ident++"name"
														)
													)
												)
											)
										)
									)
								) // end expression
							) // end expression statement
						), // end statement
						// printf(..., sizeof(joe));
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(PostfixExpression
									expr=
									(PrimaryExpression
										ident++"printf"
									),
									suffix=
									(PostfixExpressionSuffixArgument
										argumentExpressionList=
										(ArgumentExpressionList
											expr+=
											(PrimaryExpression
												string+*"[\\\"sizeof(joe)=%lu\\\\n\\\"]"
											),
											(UnaryExpression
												sizeOf++"sizeof",
												expr=
												(PrimaryExpression
													parentheses?=true,
													// (...)
													expr=
													(PrimaryExpression
														ident++"joe"
													)
												)
											)
										)
									)
								) // end expression
							) // end expression statement
						), // end statement
						
						// phil.ident = ...;
						// number.numChar = 65;
						(Statement
							stmt=
							(ExpressionStatement
								expression=	
								(AssignmentExpression
									expr=
									(PostfixExpression
										expr=
										(PrimaryExpression
											ident++"phil"
										),
										suffix=
										(PostfixExpressionSuffixDot
											ident++"ident"
										)
									),
									op++"=",
									assignmentExpr=
									(PrimaryExpression
										const=
										(common::Constant2
											hex++"0x008"
										)
									)
								)//end expression
							)
						), // end statement
						// strcpy(..., ...);
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(PostfixExpression
									expr=
									(PrimaryExpression
										ident++"strcpy"
									),
									suffix=
									(PostfixExpressionSuffixArgument
										argumentExpressionList=
										(ArgumentExpressionList
											expr+=
											(PostfixExpression
												expr=
												(PrimaryExpression
													ident++"phil"
												),
												suffix=
												(PostfixExpressionSuffixDot
													ident++"name"
												)
											),
											(PrimaryExpression
												string+*"[\\\"Phil Morrison\\\"]"
											)
										)
									)
								) // end expression
							) // end expression statement
						), // end statement
						
						// printf(..., joe.ident);
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(PostfixExpression
									expr=
									(PrimaryExpression
										ident++"printf"
									),
									suffix=
									(PostfixExpressionSuffixArgument
										argumentExpressionList=
										(ArgumentExpressionList
											expr+=
											(PrimaryExpression
												string+*"[\\\"joe.ident=%d\\\\n\\\"]"
											),
											(PostfixExpression
												expr=
												(PrimaryExpression
													ident++"joe"
												),
												suffix=
												(PostfixExpressionSuffixDot
													ident++"ident"
												)
											)
										)
									)
								) // end expression
							) // end expression statement
						), // end statement
						// printf(..., joe.name);
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(PostfixExpression
									expr=
									(PrimaryExpression
										ident++"printf"
									),
									suffix=
									(PostfixExpressionSuffixArgument
										argumentExpressionList=
										(ArgumentExpressionList
											expr+=
											(PrimaryExpression
												string+*"[\\\"joe.name=%s\\\\n\\\"]"
											),
											(PostfixExpression
												expr=
												(PrimaryExpression
													ident++"joe"
												),
												suffix=
												(PostfixExpressionSuffixDot
													ident++"name"
												)
											)
										)
									)
								) // end expression
							) // end expression statement
						), // end statement
						// printf(..., phil.ident);
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(PostfixExpression
									expr=
									(PrimaryExpression
										ident++"printf"
									),
									suffix=
									(PostfixExpressionSuffixArgument
										argumentExpressionList=
										(ArgumentExpressionList
											expr+=
											(PrimaryExpression
												string+*"[\\\"phil.ident=%d\\\\n\\\"]"
											),
											(PostfixExpression
												expr=
												(PrimaryExpression
													ident++"phil"
												),
												suffix=
												(PostfixExpressionSuffixDot
													ident++"ident"
												)
											)
										)
									)
								) // end expression
							) // end expression statement
						), // end statement
						// printf(..., phil.name);
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(PostfixExpression
									expr=
									(PrimaryExpression
										ident++"printf"
									),
									suffix=
									(PostfixExpressionSuffixArgument
										argumentExpressionList=
										(ArgumentExpressionList
											expr+=
											(PrimaryExpression
												string+*"[\\\"phil.name=%s\\\\n\\\"]"
											),
											(PostfixExpression
												expr=
												(PrimaryExpression
													ident++"phil"
												),
												suffix=
												(PostfixExpressionSuffixDot
													ident++"name"
												)
											)
										)
									)
								) // end expression
							) // end expression statement
						), // end statement
						// return statement
						(Statement
							stmt=
							(JumpStatement
								expr=
								(PrimaryExpression
									const=
									(common::Constant2
										dec++"0"
									)
								), // end expression
								return++"return"
							) // end jump statement
						) // end second statement
					) // end block list
				) // end body statement
			)
		) // end external declaration		  
	)
//)
//)
//----------------------------------------------------------------------
output file="bin/Test0037_Struct.c"
expected file isSameAsInputFile
replacePatterns file="res/Patterns.txt"
//----------------------------------------------------------------------
before
	class = at.jku.weiner.c.parser.xtexttests.TestSuite_Structs
	method = testSize
	()
after
	class = at.jku.weiner.c.parser.xtexttests.TestSuite_Structs
	method = testSize
	()
//----------------------------------------------------------------------
//----------------------------------------------------------------------
