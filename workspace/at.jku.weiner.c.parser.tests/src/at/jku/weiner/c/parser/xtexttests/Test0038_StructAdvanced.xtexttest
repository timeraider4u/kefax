//----------------------------------------------------------------------
//----------------------------------------------------------------------
package at.jku.weiner.c.parser
language parser
//----------------------------------------------------------------------
source file="res/Test0038_StructAdvanced.c"
//----------------------------------------------------------------------
lexer-tokens
LINEDIRECTIVE NEWLINE
LINEDIRECTIVE NEWLINE
LINEDIRECTIVE NEWLINE
NEWLINE

KW_TYPEDEF WHITESPACE KW_STRUCT WHITESPACE ID WHITESPACE LEFTBRACE NEWLINE
	WHITESPACE KW_INT WHITESPACE ID SEMI NEWLINE
	WHITESPACE KW_CHAR WHITESPACE ID LEFTBRACKET 
		DECIMAL_LITERAL RIGHTBRACKET SEMI NEWLINE 
RIGHTBRACE WHITESPACE ID SEMI NEWLINE
NEWLINE
KW_STRUCT WHITESPACE ID WHITESPACE ID WHITESPACE ASSIGN WHITESPACE
	LEFTBRACE HEX_LITERAL COMMA WHITESPACE STRING_LITERAL RIGHTBRACE SEMI NEWLINE
ID WHITESPACE ID WHITESPACE ASSIGN WHITESPACE
	LEFTBRACE HEX_LITERAL COMMA WHITESPACE STRING_LITERAL RIGHTBRACE SEMI NEWLINE
NEWLINE

// void print(...) { ... }
KW_VOID WHITESPACE ID LEFTPAREN ID WHITESPACE STAR ID RIGHTPAREN WHITESPACE 
LEFTBRACE NEWLINE
	WHITESPACE ID LEFTPAREN STRING_LITERAL COMMA WHITESPACE
		LEFTPAREN STAR ID RIGHTPAREN DOT ID RIGHTPAREN SEMI NEWLINE
	WHITESPACE ID LEFTPAREN STRING_LITERAL COMMA WHITESPACE 
		ID ARROW ID RIGHTPAREN SEMI NEWLINE
RIGHTBRACE NEWLINE
NEWLINE

// int main(...) { ... }
KW_INT WHITESPACE ID LEFTPAREN KW_VOID RIGHTPAREN WHITESPACE LEFTBRACE NEWLINE
	// employee * newEmployee = ...;
	WHITESPACE ID WHITESPACE STAR WHITESPACE ID WHITESPACE ASSIGN
		WHITESPACE ID LEFTPAREN KW_SIZEOF LEFTPAREN ID RIGHTPAREN
		RIGHTPAREN SEMI NEWLINE
	// if (...) { ... }
	WHITESPACE KW_IF WHITESPACE LEFTPAREN ID WHITESPACE EQUAL WHITESPACE ID
	RIGHTPAREN WHITESPACE LEFTBRACE NEWLINE
		WHITESPACE ID LEFTPAREN STRING_LITERAL RIGHTPAREN SEMI NEWLINE
		WHITESPACE KW_RETURN WHITESPACE MINUS DECIMAL_LITERAL SEMI NEWLINE
	WHITESPACE RIGHTBRACE NEWLINE
	// print(...);
	WHITESPACE ID LEFTPAREN AND ID RIGHTPAREN SEMI NEWLINE
	WHITESPACE ID LEFTPAREN AND ID RIGHTPAREN SEMI NEWLINE
	// set-up newEmployee
	WHITESPACE ID ARROW ID WHITESPACE ASSIGN WHITESPACE HEX_LITERAL SEMI NEWLINE
	WHITESPACE ID LEFTPAREN ID ARROW ID COMMA WHITESPACE 
		STRING_LITERAL RIGHTPAREN SEMI NEWLINE
	// print(newEmployee); free(newEmployee);
	WHITESPACE ID LEFTPAREN ID RIGHTPAREN SEMI NEWLINE	
	WHITESPACE ID LEFTPAREN ID RIGHTPAREN SEMI NEWLINE
	// return
	WHITESPACE KW_RETURN WHITESPACE DECIMAL_LITERAL SEMI NEWLINE
RIGHTBRACE NEWLINE

//----------------------------------------------------------------------
(Model unit+=
	(TranslationUnit 
		external+=
		// typedef struct ... ;
		(ExternalDeclaration
			declaration=
			(Declaration
				specifiers=
				(DeclarationSpecifiers
					declarationSpecifier+=
					(StorageClassSpecifier
						name++"typedef"
					),
					(StructOrUnionSpecifier
						type=
						(StructOrUnion
							name++"struct"
						),
						id++"empStruct",
						structDeclList=
						(StructDeclarationList
							structDeclaration+=
							// int id
							(StructDeclaration
								list=
								(SpecifierQualifierList
									typeSpecifier+=
									(TypeSpecifier
										name++"int"
									)
								),
								structDeclarationList=
								(StructDeclaratorList
									structDeclarator+=
									(StructDeclarator
										declarator=
										(Declarator
											declarator=
											(DirectDeclarator
												id++"id"
											)
										)
									)
								)
							),
							// char name [...]
							(StructDeclaration
								list=
								(SpecifierQualifierList
									typeSpecifier+=
									(TypeSpecifier
										name++"char"
									)
								),
								structDeclarationList=
								(StructDeclaratorList
									structDeclarator+=
									(StructDeclarator
										declarator=
										(Declarator
											declarator=
											(DirectDeclarator
												id++"name",
												declaratorSuffix+=
												(DeclaratorSuffix
													expr=
													(AssignmentExpression
														expr=
														(ConditionalExpression
															expr=
															(LogicalOrExpression
																expr+=
																(LogicalAndExpression
																	expr+=
																	(InclusiveOrExpression
																		expr+=
																		(ExclusiveOrExpression
																			expr+=
																			(AndExpression
																				expr+=
																				(EqualityExpression
																					expr+=
																					(RelationalExpression
																						expr+=
																						(ShiftExpression
																							expr+=
																							(AdditiveExpression
																								expr+=
																								(MultiplicativeExpression
																									expr+=
																									(CastExpression
																										expr=
																										(UnaryExpression
																											expr=
																											(PostfixExpression
																												expr+=
																												(PrimaryExpression
																													const=
																													(Constant
																														dec++"250"
																													)
																												)
																											)
																										)
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													) // end assignment expression
												)
											)
										)
									)
								)
							)
						)
					)
				), // end declaration specifiers
				initDeclaratorList+=
				(InitDeclaratorList
					initDeclarator+=
					(InitDeclarator
						declarator=
						(Declarator
							declarator=
							(DirectDeclarator
								id++"employee"
							)
						)
					)
				)
			)
		),
		// struct empStruct joe;
		(ExternalDeclaration
			declaration=
			(Declaration
				specifiers=
				(DeclarationSpecifiers
					declarationSpecifier+=
					(StructOrUnionSpecifier
						type=
						(StructOrUnion
							name++"struct"
						),
						id++"empStruct"
					)
				), // end declaration specifiers
				initDeclaratorList+=
				(InitDeclaratorList
					initDeclarator+=
					(InitDeclarator
						declarator=
						(Declarator
							declarator=
							(DirectDeclarator
								id++"joe"
							)
						), // end declarator
						initializer=
						(Initializer
							// { ... }:
							list=
							(InitializerList
								initializer+=
								(Initializer
									expr=
									(AssignmentExpression
										expr=
										(ConditionalExpression
											expr=
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									const=
																									(Constant
																										hex++"0x007"
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										)
									) // end assignment expression
								), // end initializer
								(Initializer
									expr=
									(AssignmentExpression
										expr=
										(ConditionalExpression
											expr=
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									const=
																									(Constant
																										str++"\\\"Joe Nobody\\\""
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										)
									) // end assignment expression
								) // end initializer
							)
						)
					)
				)
			)
		), // end external declaration
		// employee phil;
		(ExternalDeclaration
			declaration=
			(Declaration
				specifiers=
				(DeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						type=
						(TypedefName
							id++"employee"
						)
					)
				), // end declaration specifiers
				initDeclaratorList+=
				(InitDeclaratorList
					initDeclarator+=
					(InitDeclarator
						declarator=
						(Declarator
							declarator=
							(DirectDeclarator
								id++"phil"
							)
						), // end declarator
						initializer=
						(Initializer
							// { ... }:
							list=
							(InitializerList
								initializer+=
								(Initializer
									expr=
									(AssignmentExpression
										expr=
										(ConditionalExpression
											expr=
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									const=
																									(Constant
																										hex++"0x008"
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										)
									) // end assignment expression
								), // end initializer
								(Initializer
									expr=
									(AssignmentExpression
										expr=
										(ConditionalExpression
											expr=
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									const=
																									(Constant
																										str++"\\\"Phil Morrison\\\""
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										)
									) // end assignment expression
								) // end initializer
							)
						)
					)
				)
			)
		), // end external declaration
		// void print(...) 
		(ExternalDeclaration 
			functiondefHead=
			(FunctionDefHead
				funDeclSpecifiers=
				(FunctionDeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						name++"void"
					)
				),
				funDeclarator=
				(Declarator
					declarator=
					(DirectDeclarator
						id++"print",
						declaratorSuffix+=
						(DeclaratorSuffix
							lastSuffix=
							(DirectDeclaratorLastSuffix
								parameterTypeList+=
								(ParameterTypeList
									list=
									(ParameterList
										parameterDeclaration+=
										(ParameterDeclaration
											declSpecifiers=
											(DeclarationSpecifiers
												declarationSpecifier+=
												(TypeSpecifier
													type=
													(TypedefName
														id++"employee"
													)
												)
											), // end declaration specifiers
											declarator=
											(Declarator
												declarator=
												(DirectDeclarator
													id++"emp"
												),
												pointer=
												(Pointer
													star+*"[*]"
												)
											)
										) 
									) // end parameter list
								)
							)
						) // DeclaratorSuffix
					)
				)
			),
			functionDefinition=
			(FunctionDefinition
				body=
				(BodyStatement
					blockList+=
					(BlockList
						statement+=
						// printf(..., (*emp).name);
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(Expression
									exprExpr+=
									(AssignmentExpression
										expr=
										(ConditionalExpression
											expr=
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									id++"printf"
																								),
																								suffix+=
																								(PostfixExpressionSuffixArgument
																									argumentExpressionList=
																									(ArgumentExpressionList
																										expr+=
																										(AssignmentExpression
																											expr=
																											(ConditionalExpression
																												expr=
																												(LogicalOrExpression
																													expr+=
																													(LogicalAndExpression
																														expr+=
																														(InclusiveOrExpression
																															expr+=
																															(ExclusiveOrExpression
																																expr+=
																																(AndExpression
																																	expr+=
																																	(EqualityExpression
																																		expr+=
																																		(RelationalExpression
																																			expr+=
																																			(ShiftExpression
																																				expr+=
																																				(AdditiveExpression
																																					expr+=
																																					(MultiplicativeExpression
																																						expr+=
																																						(CastExpression
																																							expr=
																																							(UnaryExpression
																																								expr=
																																								(PostfixExpression
																																									expr+=
																																									(PrimaryExpression
																																										const=
																																										(Constant
																																											str++"\\\"(*employee).id=%d\\\\n\\\""
																																										)
																																									)
																																								)
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										), // end assignment expression
																										(AssignmentExpression
																											expr=
																											(ConditionalExpression
																												expr=
																												(LogicalOrExpression
																													expr+=
																													(LogicalAndExpression
																														expr+=
																														(InclusiveOrExpression
																															expr+=
																															(ExclusiveOrExpression
																																expr+=
																																(AndExpression
																																	expr+=
																																	(EqualityExpression
																																		expr+=
																																		(RelationalExpression
																																			expr+=
																																			(ShiftExpression
																																				expr+=
																																				(AdditiveExpression
																																					expr+=
																																					(MultiplicativeExpression
																																						expr+=
																																						(CastExpression
																																							expr=
																																							(UnaryExpression
																																								expr=
																																								(PostfixExpression
																																									expr+=
																																									(PrimaryExpression
																																										// (...)
																																										expr=
																																										(Expression
																																											exprExpr+=
																																											(AssignmentExpression
																																												expr=
																																												(ConditionalExpression
																																													expr=
																																													(LogicalOrExpression
																																														expr+=
																																														(LogicalAndExpression
																																															expr+=
																																															(InclusiveOrExpression
																																																expr+=
																																																(ExclusiveOrExpression
																																																	expr+=
																																																	(AndExpression
																																																		expr+=
																																																		(EqualityExpression
																																																			expr+=
																																																			(RelationalExpression
																																																				expr+=
																																																				(ShiftExpression
																																																					expr+=
																																																					(AdditiveExpression
																																																						expr+=
																																																						(MultiplicativeExpression
																																																							expr+=
																																																							(CastExpression
																																																								expr=
																																																								(UnaryExpression
																																																									op=
																																																									(UnaryOperator
																																																										op++"*"
																																																									),
																																																									expr=
																																																									(CastExpression
																																																										expr=
																																																										(UnaryExpression
																																																											expr=
																																																											(PostfixExpression
																																																												expr+=
																																																												(PrimaryExpression
																																																													id++"emp"
																																																												)
																																																											)
																																																										)
																																																									)
																																																								)	
																																																							)
																																																						)
																																																					)
																																																				)
																																																			)
																																																		)
																																																	)
																																																)
																																															)
																																														)
																																													)
																																												)
																																											)
																																										) 
																																									), // end primary expression
																																									suffix+=
																																									(PostfixExpressionSuffixDot
																																										id++"id"
																																									)
																																								)
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										) // end assignment expression
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																	
																)
															)
														)
													)
												)
											)
										)
									)
								), // end expression
								semi++";"
							) // end expression statement
						), // end statement
						// printf(..., emp->name);
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(Expression
									exprExpr+=
									(AssignmentExpression
										expr=
										(ConditionalExpression
											expr=
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									id++"printf"
																								),
																								suffix+=
																								(PostfixExpressionSuffixArgument
																									argumentExpressionList=
																									(ArgumentExpressionList
																										expr+=
																										(AssignmentExpression
																											expr=
																											(ConditionalExpression
																												expr=
																												(LogicalOrExpression
																													expr+=
																													(LogicalAndExpression
																														expr+=
																														(InclusiveOrExpression
																															expr+=
																															(ExclusiveOrExpression
																																expr+=
																																(AndExpression
																																	expr+=
																																	(EqualityExpression
																																		expr+=
																																		(RelationalExpression
																																			expr+=
																																			(ShiftExpression
																																				expr+=
																																				(AdditiveExpression
																																					expr+=
																																					(MultiplicativeExpression
																																						expr+=
																																						(CastExpression
																																							expr=
																																							(UnaryExpression
																																								expr=
																																								(PostfixExpression
																																									expr+=
																																									(PrimaryExpression
																																										const=
																																										(Constant
																																											str++"\\\"employee->name=%s\\\\n\\\""
																																										)
																																									)
																																								)
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										), // end assignment expression
																										(AssignmentExpression
																											expr=
																											(ConditionalExpression
																												expr=
																												(LogicalOrExpression
																													expr+=
																													(LogicalAndExpression
																														expr+=
																														(InclusiveOrExpression
																															expr+=
																															(ExclusiveOrExpression
																																expr+=
																																(AndExpression
																																	expr+=
																																	(EqualityExpression
																																		expr+=
																																		(RelationalExpression
																																			expr+=
																																			(ShiftExpression
																																				expr+=
																																				(AdditiveExpression
																																					expr+=
																																					(MultiplicativeExpression
																																						expr+=
																																						(CastExpression
																																							expr=
																																							(UnaryExpression
																																								expr=
																																								(PostfixExpression
																																									expr+=
																																									(PrimaryExpression
																																										id++"emp"
																																									),
																																									suffix+=
																																									(PostfixExpressionSuffixArrow
																																										id++"name"
																																									)
																																								)
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										) // end assignment expression
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																	
																)
															)
														)
													)
												)
											)
										)
									)
								), // end expression
								semi++";"
							) // end expression statement
						) // end statement
					)
				)
			)
		), // end external declaration
		// int main(...)
		(ExternalDeclaration 
			functiondefHead=
			(FunctionDefHead
				funDeclSpecifiers=
				(FunctionDeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						name++"int"
					)
				),
				funDeclarator=
				(Declarator
					declarator=
					(DirectDeclarator
						id++"main",
						declaratorSuffix+=
						(DeclaratorSuffix
							lastSuffix=
							(DirectDeclaratorLastSuffix
								parameterTypeList+=
								(ParameterTypeList
									list=
									(ParameterList
										parameterDeclaration+=
										(ParameterDeclaration
											declSpecifiers=
											(DeclarationSpecifiers
												declarationSpecifier+=
												(TypeSpecifier
													name++"void"
												)
											)
										) 
									) // end parameter list
								)
							)
						) // DeclaratorSuffix
					)
				)
			),
			functionDefinition=
			(FunctionDefinition
				body=
				(BodyStatement
					blockList+=
					(BlockList
						declaration+=
						// employee * newEmployee = ...;
						(Declaration
							specifiers=
							(DeclarationSpecifiers
								declarationSpecifier+=
								(TypeSpecifier
									type=
									(TypedefName
										id++"employee"
									)
								)
							), // end declarationSpecifiers
							initDeclaratorList+=
							(InitDeclaratorList
								initDeclarator+=
								(InitDeclarator
									declarator=
									(Declarator
										pointer=
										(Pointer
											star+*"[*]"
										), // end pointer
										declarator=
										(DirectDeclarator
											id++"newEmployee"
										)
									), // end declarator
									initializer=
									(Initializer
										expr=
										// malloc(sizeof(employee));
										(AssignmentExpression
											expr=
											(ConditionalExpression
												expr=
												(LogicalOrExpression
													expr+=
													(LogicalAndExpression
														expr+=
														(InclusiveOrExpression
															expr+=
															(ExclusiveOrExpression
																expr+=
																(AndExpression
																	expr+=
																	(EqualityExpression
																		expr+=
																		(RelationalExpression
																			expr+=
																			(ShiftExpression
																				expr+=
																				(AdditiveExpression
																					expr+=
																					(MultiplicativeExpression
																						expr+=
																						(CastExpression
																							expr=
																							(UnaryExpression
																								expr=
																								(PostfixExpression
																									expr+=
																									(PrimaryExpression
																										id++"malloc"
																									),
																									suffix+=
																									(PostfixExpressionSuffixArgument
																										argumentExpressionList=
																										(ArgumentExpressionList
																											expr+=
																											(AssignmentExpression
																												expr=
																												(ConditionalExpression
																													expr=
																													(LogicalOrExpression
																														expr+=
																														(LogicalAndExpression
																															expr+=
																															(InclusiveOrExpression
																																expr+=
																																(ExclusiveOrExpression
																																	expr+=
																																	(AndExpression
																																		expr+=
																																		(EqualityExpression
																																			expr+=
																																			(RelationalExpression
																																				expr+=
																																				(ShiftExpression
																																					expr+=
																																					(AdditiveExpression
																																						expr+=
																																						(MultiplicativeExpression
																																							expr+=
																																							(CastExpression
																																								expr=
																																								(UnaryExpression
																																									sizeOf++"sizeof",
																																									typeName=
																																									(TypeName
																																										list=
																																										(SpecifierQualifierList
																																											typeSpecifier+=
																																											(TypeSpecifier
																																												type=
																																												(TypedefName
																																													id++"employee"
																																												)
																																											)
																																										)
																																									)
																																								)
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											) // end assignment expression
																										)
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										)
									) // end initializer
								)
							)
						),
						statement+=
						// if (...) { ... }
						(Statement
							stmt=
							(SelectionStatement
								if++"if",
								expr=
								(Expression
									exprExpr+=
									(AssignmentExpression
										expr=
										(ConditionalExpression
											expr=
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	op+*"[==]",
																	expr+=
																	(RelationalExpression
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									id++"newEmployee"
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	), // end relation expression
																	(RelationalExpression
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									id++"NULL"
																								)
																							)
																						)
																					)
																				)
																			)
																		) // end shift expression
																	) // end relational expression
																) // end equality expression
															)
														)
													)
												)
											)
										)
									)
								), // end expression
								ifStatement=
								(Statement
									stmt=
									(CompoundStatement
										body=
										(BodyStatement
											blockList+=
											(BlockList
												statement+=
												// printf(...);
												(Statement
													stmt=
													(ExpressionStatement
														expression=
														(Expression
															exprExpr+=
															(AssignmentExpression
																expr=
																(ConditionalExpression
																	expr=
																	(LogicalOrExpression
																		expr+=
																		(LogicalAndExpression
																			expr+=
																			(InclusiveOrExpression
																				expr+=
																				(ExclusiveOrExpression
																					expr+=
																					(AndExpression
																						expr+=
																						(EqualityExpression
																							expr+=
																							(RelationalExpression
																								expr+=
																								(ShiftExpression
																									expr+=
																									(AdditiveExpression
																										expr+=
																										(MultiplicativeExpression
																											expr+=
																											(CastExpression
																												expr=
																												(UnaryExpression
																													expr=
																													(PostfixExpression
																														expr+=
																														(PrimaryExpression
																															id++"printf"
																														),
																														suffix+=
																														(PostfixExpressionSuffixArgument
																															argumentExpressionList=
																															(ArgumentExpressionList
																																expr+=
																																(AssignmentExpression
																																	expr=
																																	(ConditionalExpression
																																		expr=
																																		(LogicalOrExpression
																																			expr+=
																																			(LogicalAndExpression
																																				expr+=
																																				(InclusiveOrExpression
																																					expr+=
																																					(ExclusiveOrExpression
																																						expr+=
																																						(AndExpression
																																							expr+=
																																							(EqualityExpression
																																								expr+=
																																								(RelationalExpression
																																									expr+=
																																									(ShiftExpression
																																										expr+=
																																										(AdditiveExpression
																																											expr+=
																																											(MultiplicativeExpression
																																												expr+=
																																												(CastExpression
																																													expr=
																																													(UnaryExpression
																																														expr=
																																														(PostfixExpression
																																															expr+=
																																															(PrimaryExpression
																																																const=
																																																(Constant
																																																	str++"\\\"Could not reserve space for new employee!\\\\n\\\""
																																																)
																																															)
																																														)
																																													)
																																												) // end unary expression
																																											)
																																										)
																																									)
																																								)
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																) // end assignment expression
																															)
																														)
																													)
																												)
																											)
																										)
																									)
																								)
																							)
																							
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														), // end expression
														semi++";"
													) // end expression statement
												),
												// return -1;
												(Statement
													stmt=
													(JumpStatement
														expr=
														(Expression
															exprExpr+=
															(AssignmentExpression
																expr=
																(ConditionalExpression
																	expr=
																	(LogicalOrExpression
																		expr+=
																		(LogicalAndExpression
																			expr+=
																			(InclusiveOrExpression
																				expr+=
																				(ExclusiveOrExpression
																					expr+=
																					(AndExpression
																						expr+=
																						(EqualityExpression
																							expr+=
																							(RelationalExpression
																								expr+=
																								(ShiftExpression
																									expr+=
																									(AdditiveExpression
																										expr+=
																										(MultiplicativeExpression
																											expr+=
																											(CastExpression
																												expr=
																												(UnaryExpression
																													op=
																													(UnaryOperator
																														op++"-"
																													),
																													expr=
																													(CastExpression
																														expr=
																														(UnaryExpression
																															expr=
																															(PostfixExpression
																																expr+=
																																(PrimaryExpression
																																	const=
																																	(Constant
																																		dec++"1"
																																	)
																																)
																															)
																														)
																													) // end cast expression
																												)
																											)
																										)
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														), // end expression
														return++"return",
														semi++";" 
													)
												) // end statement
											)
										)
									) // end compound statement
								) // end ifStatement=Statement
							)// end selection statement
						),//end statement	
						// print (&joe);
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(Expression
									exprExpr+=
									(AssignmentExpression
										expr=
										(ConditionalExpression
											expr=
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									id++"print"
																								),
																								suffix+=
																								(PostfixExpressionSuffixArgument
																									argumentExpressionList=
																									(ArgumentExpressionList
																										expr+=
																										(AssignmentExpression
																											expr=
																											(ConditionalExpression
																												expr=
																												(LogicalOrExpression
																													expr+=
																													(LogicalAndExpression
																														expr+=
																														(InclusiveOrExpression
																															expr+=
																															(ExclusiveOrExpression
																																expr+=
																																(AndExpression
																																	expr+=
																																	(EqualityExpression
																																		expr+=
																																		(RelationalExpression
																																			expr+=
																																			(ShiftExpression
																																				expr+=
																																				(AdditiveExpression
																																					expr+=
																																					(MultiplicativeExpression
																																						expr+=
																																						(CastExpression
																																							expr=
																																							(UnaryExpression
																																								op=
																																								(UnaryOperator
																																									op++"&"
																																								),
																																								expr=
																																								(CastExpression
																																									expr=
																																									(UnaryExpression
																																										expr=
																																										(PostfixExpression
																																											expr+=
																																											(PrimaryExpression
																																												id++"joe"
																																											)
																																										)
																																									)
																																								)
																																							)
																																						) // end unary expression
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										) // end assignment expression
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																	
																)
															)
														)
													)
												)
											)
										)
									)
								), // end expression
								semi++";"
							) // end expression statement
						),
						// print (&phil);
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(Expression
									exprExpr+=
									(AssignmentExpression
										expr=
										(ConditionalExpression
											expr=
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									id++"print"
																								),
																								suffix+=
																								(PostfixExpressionSuffixArgument
																									argumentExpressionList=
																									(ArgumentExpressionList
																										expr+=
																										(AssignmentExpression
																											expr=
																											(ConditionalExpression
																												expr=
																												(LogicalOrExpression
																													expr+=
																													(LogicalAndExpression
																														expr+=
																														(InclusiveOrExpression
																															expr+=
																															(ExclusiveOrExpression
																																expr+=
																																(AndExpression
																																	expr+=
																																	(EqualityExpression
																																		expr+=
																																		(RelationalExpression
																																			expr+=
																																			(ShiftExpression
																																				expr+=
																																				(AdditiveExpression
																																					expr+=
																																					(MultiplicativeExpression
																																						expr+=
																																						(CastExpression
																																							expr=
																																							(UnaryExpression
																																								op=
																																								(UnaryOperator
																																									op++"&"
																																								),
																																								expr=
																																								(CastExpression
																																									expr=
																																									(UnaryExpression
																																										expr=
																																										(PostfixExpression
																																											expr+=
																																											(PrimaryExpression
																																												id++"phil"
																																											)
																																										)
																																									)
																																								)
																																							)
																																						) // end unary expression
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										) // end assignment expression
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																	
																)
															)
														)
													)
												)
											)
										)
									)
								), // end expression
								semi++";"
							) // end expression statement
						),
						// newEmployee->id = ...;
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(Expression
									exprExpr+=
									(AssignmentExpression
										expr=
										(UnaryExpression
											expr=
											(PostfixExpression
												expr+=
												(PrimaryExpression
													id++"newEmployee"
												),
												suffix+=
												(PostfixExpressionSuffixArrow
													id++"id"
												)
											)
										), // end unary expression
										op=
										(AssignmentOperator
											op++"="
										),
										assignmentExpr=
										(AssignmentExpression
											expr=
											(ConditionalExpression
												expr=
												(LogicalOrExpression
													expr+=
													(LogicalAndExpression
														expr+=
														(InclusiveOrExpression
															expr+=
															(ExclusiveOrExpression
																expr+=
																(AndExpression
																	expr+=
																	(EqualityExpression
																		expr+=
																		(RelationalExpression
																			expr+=
																			(ShiftExpression
																				expr+=
																				(AdditiveExpression
																					expr+=
																					(MultiplicativeExpression
																						expr+=
																						(CastExpression
																							expr=
																							(UnaryExpression
																								expr=
																								(PostfixExpression
																									expr+=
																									(PrimaryExpression
																										const=
																										(Constant
																											hex++"0x009"
																										)
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																		
																	)
																)
															)
														)
													)
												)
											) // end conditional expression
										) // end assignment expression
									) // end assignment expression
								),//end expression
								semi++";"
							)
						), // end statement
						// strcpy(..., ...);
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(Expression
									exprExpr+=
									(AssignmentExpression
										expr=
										(ConditionalExpression
											expr=
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									id++"strcpy"
																								),
																								suffix+=
																								(PostfixExpressionSuffixArgument
																									argumentExpressionList=
																									(ArgumentExpressionList
																										expr+=
																										(AssignmentExpression
																											expr=
																											(ConditionalExpression
																												expr=
																												(LogicalOrExpression
																													expr+=
																													(LogicalAndExpression
																														expr+=
																														(InclusiveOrExpression
																															expr+=
																															(ExclusiveOrExpression
																																expr+=
																																(AndExpression
																																	expr+=
																																	(EqualityExpression
																																		expr+=
																																		(RelationalExpression
																																			expr+=
																																			(ShiftExpression
																																				expr+=
																																				(AdditiveExpression
																																					expr+=
																																					(MultiplicativeExpression
																																						expr+=
																																						(CastExpression
																																							expr=
																																							(UnaryExpression
																																								expr=
																																								(PostfixExpression
																																									expr+=
																																									(PrimaryExpression
																																										id++"newEmployee"
																																									),
																																									suffix+=
																																									(PostfixExpressionSuffixArrow
																																										id++"name"
																																									)
																																								)
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										), // end assignment expression
																										(AssignmentExpression
																											expr=
																											(ConditionalExpression
																												expr=
																												(LogicalOrExpression
																													expr+=
																													(LogicalAndExpression
																														expr+=
																														(InclusiveOrExpression
																															expr+=
																															(ExclusiveOrExpression
																																expr+=
																																(AndExpression
																																	expr+=
																																	(EqualityExpression
																																		expr+=
																																		(RelationalExpression
																																			expr+=
																																			(ShiftExpression
																																				expr+=
																																				(AdditiveExpression
																																					expr+=
																																					(MultiplicativeExpression
																																						expr+=
																																						(CastExpression
																																							expr=
																																							(UnaryExpression
																																								expr=
																																								(PostfixExpression
																																									expr+=
																																									(PrimaryExpression
																																										const=
																																										(Constant
																																											str++"\\\"Billy The Kid\\\""
																																										)
																																									)
																																								)
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										) // end assignment expression
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										)
									)
								), // end expression
								semi++";"
							) // end expression statement
						), // end statement
						// print(newEmployee);
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(Expression
									exprExpr+=
									(AssignmentExpression
										expr=
										(ConditionalExpression
											expr=
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									id++"print"
																								),
																								suffix+=
																								(PostfixExpressionSuffixArgument
																									argumentExpressionList=
																									(ArgumentExpressionList
																										expr+=
																										(AssignmentExpression
																											expr=
																											(ConditionalExpression
																												expr=
																												(LogicalOrExpression
																													expr+=
																													(LogicalAndExpression
																														expr+=
																														(InclusiveOrExpression
																															expr+=
																															(ExclusiveOrExpression
																																expr+=
																																(AndExpression
																																	expr+=
																																	(EqualityExpression
																																		expr+=
																																		(RelationalExpression
																																			expr+=
																																			(ShiftExpression
																																				expr+=
																																				(AdditiveExpression
																																					expr+=
																																					(MultiplicativeExpression
																																						expr+=
																																						(CastExpression
																																							expr=
																																							(UnaryExpression
																																								expr=
																																								(PostfixExpression
																																									expr+=
																																									(PrimaryExpression
																																										id++"newEmployee"
																																									)
																																								)
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										) // end assignment expression
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																	
																)
															)
														)
													)
												)
											)
										)
									)
								), // end expression
								semi++";"
							) // end expression statement
						),
						// free(newEmployee);
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(Expression
									exprExpr+=
									(AssignmentExpression
										expr=
										(ConditionalExpression
											expr=
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									id++"free"
																								),
																								suffix+=
																								(PostfixExpressionSuffixArgument
																									argumentExpressionList=
																									(ArgumentExpressionList
																										expr+=
																										(AssignmentExpression
																											expr=
																											(ConditionalExpression
																												expr=
																												(LogicalOrExpression
																													expr+=
																													(LogicalAndExpression
																														expr+=
																														(InclusiveOrExpression
																															expr+=
																															(ExclusiveOrExpression
																																expr+=
																																(AndExpression
																																	expr+=
																																	(EqualityExpression
																																		expr+=
																																		(RelationalExpression
																																			expr+=
																																			(ShiftExpression
																																				expr+=
																																				(AdditiveExpression
																																					expr+=
																																					(MultiplicativeExpression
																																						expr+=
																																						(CastExpression
																																							expr=
																																							(UnaryExpression
																																								expr=
																																								(PostfixExpression
																																									expr+=
																																									(PrimaryExpression
																																										id++"newEmployee"
																																									)
																																								)
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										) // end assignment expression
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																	
																)
															)
														)
													)
												)
											)
										)
									)
								), // end expression
								semi++";"
							) // end expression statement
						),
						// return statement
						(Statement
							stmt=
							(JumpStatement
								expr=
								(Expression
									exprExpr+=
									(AssignmentExpression
										expr=
										(ConditionalExpression
											expr=
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									const=
																									(Constant
																										dec++"0"
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																	
																)
															)
														)
													)
												)
											)
										)
									)
								), // end expression
								return++"return",
								semi++";"
							) // end jump statement
						) // end second statement
					) // end block list
				) // end body statement
			)
		) // end external declaration		  
	)
)
//----------------------------------------------------------------------
output file="bin/Test0038_StructAdvanced.c"
expected file isSameAsInputFile
replacePatterns file="res/Patterns.txt"
//----------------------------------------------------------------------
before
	class = at.jku.weiner.c.parser.xtexttests.TestSuite_Structs
	method = testSize
	()
after
	class = at.jku.weiner.c.parser.xtexttests.TestSuite_Structs
	method = testSize
	()
//----------------------------------------------------------------------
//----------------------------------------------------------------------
