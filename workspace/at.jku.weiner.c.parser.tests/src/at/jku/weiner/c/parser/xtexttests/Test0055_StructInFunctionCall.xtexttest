//----------------------------------------------------------------------
//----------------------------------------------------------------------
package at.jku.weiner.c.parser
language parser
imports at.jku.weiner.c.common.common
//----------------------------------------------------------------------
source file="res/Test0055_StructInFunctionCall.c"
//----------------------------------------------------------------------
lexer-tokens

KW_STRUCT WHITESPACE ID WHITESPACE SKW_LEFTBRACE NEWLINE
	WHITESPACE KW_INT WHITESPACE ID SKW_SEMI NEWLINE
SKW_RIGHTBRACE SKW_SEMI NEWLINE
NEWLINE
KW_EXTERN WHITESPACE KW_VOID WHITESPACE ID SKW_LEFTPAREN 
	KW_STRUCT WHITESPACE ID WHITESPACE ID SKW_RIGHTPAREN SKW_SEMI NEWLINE
NEWLINE


KW_VOID WHITESPACE ID SKW_LEFTPAREN 
	KW_STRUCT WHITESPACE ID WHITESPACE ID SKW_RIGHTPAREN WHITESPACE SKW_LEFTBRACE NEWLINE
	WHITESPACE ID SKW_LEFTPAREN ID SKW_RIGHTPAREN SKW_SEMI NEWLINE
SKW_RIGHTBRACE NEWLINE

//----------------------------------------------------------------------
//(common::Model units+=
	//(common::TranslationUnit 
	(Parser
		external+=
		// struct ;
		(ExternalDeclaration
			declaration=
			(Declaration
				specifiers=
				(DeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						specifier=
						(StructOrUnionSpecifier
							type=
							(StructOrUnion
								name++"struct"
							),
							id++"foo",
							structDeclList=
							(StructDeclarationList
								structDeclaration+=
								// int i
								(StructDeclaration
									list=
									(SpecifierQualifierList
										typeSpecifier+=
										(TypeSpecifier
											name++"int"
										)
									),
									structDeclarationList=
									(StructDeclaratorList
										structDeclarator+=
										(StructDeclarator
											declarator=
											(Declarator
												declarator=
												(DirectDeclarator
													id++"i"
												)
											)
										)
									)
								)
							)
						)
					)
				)	
			)
		),
		(ExternalDeclaration 
			declaration=
			(Declaration
				specifiers=
				(DeclarationSpecifiers
					declarationSpecifier+=
					(StorageClassSpecifier
						name++"extern"
					),
					(TypeSpecifier
						name++"void"
					)
				),
				initDeclaratorList+=
				(InitDeclaratorList
					initDeclarator+=
					(InitDeclarator
						declarator=
						(Declarator
							declarator=
							(DirectDeclarator
								id++"myprintf",
								declaratorSuffix+=
								(DeclaratorSuffix
									lastSuffix=
									(DirectDeclaratorLastSuffix
										parameterTypeList+=
										(ParameterTypeList
											list=
											(ParameterList
												parameterDeclaration+=
												(ParameterDeclaration
													declSpecifiers=
													(DeclarationSpecifiers
														declarationSpecifier+=
														(TypeSpecifier
															specifier=
															(StructOrUnionSpecifier
																type=
																(StructOrUnion
																	name++"struct"
																),
																id++"foo"
															)
														)
													),
													declarator=
													(Declarator
														declarator=
														(DirectDeclarator
															id++"foobar"
														)
													)
												)
											)
										)
									)
								)
							)
						)
					)
				),
				semi++";"
			)
		),
		// void bar(...)
		(ExternalDeclaration 
			functiondefHead=
			(FunctionDefHead
				funDeclSpecifiers=
				(FunctionDeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						name++"void"
					)
				),
				funDeclarator=
				(Declarator
					declarator=
					(DirectDeclarator
						id++"bar",
						declaratorSuffix+=
						(DeclaratorSuffix
							lastSuffix=
							(DirectDeclaratorLastSuffix
								parameterTypeList+=
								(ParameterTypeList
									list=
									(ParameterList
										parameterDeclaration+=
										(ParameterDeclaration
											declSpecifiers=
											(DeclarationSpecifiers
												declarationSpecifier+=
												(TypeSpecifier
													specifier=
													(StructOrUnionSpecifier
														type=
														(StructOrUnion
															name++"struct"
														),
														id++"foo"
													)
												)
											),
											declarator=
											(Declarator
												declarator=
												(DirectDeclarator
													id++"foobar"
												)
											)
										) 
									) // end parameter list
								)
							)
						) // DeclaratorSuffix
					)
				)
			),
			functionDefinition=
			(FunctionDefinition
				body=
				(BodyStatement
					blockList+=
					(BlockList
						statement+=
						// printf(foobar);
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(Expression
									exprExpr+=
									(AssignmentExpression
										expr=
										(ConditionalExpression
											expr=
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									id++"myprintf"
																								),
																								suffix+=
																								(PostfixExpressionSuffixArgument
																									argumentExpressionList=
																									(ArgumentExpressionList
																										expr+=
																										(AssignmentExpression
																											expr=
																											(ConditionalExpression
																												expr=
																												(LogicalOrExpression
																													expr+=
																													(LogicalAndExpression
																														expr+=
																														(InclusiveOrExpression
																															expr+=
																															(ExclusiveOrExpression
																																expr+=
																																(AndExpression
																																	expr+=
																																	(EqualityExpression
																																		expr+=
																																		(RelationalExpression
																																			expr+=
																																			(ShiftExpression
																																				expr+=
																																				(AdditiveExpression
																																					expr+=
																																					(MultiplicativeExpression
																																						expr+=
																																						(CastExpression
																																							expr=
																																							(UnaryExpression
																																								expr=
																																								(PostfixExpression
																																									expr+=
																																									(PrimaryExpression
																																										id++"foobar"
																																									)
																																								)
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										)	
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																	
																)
															)
														)
													)
												)
											)
										)
									)
								), // end expression
								semi++";"
							) // end expression statement
						) // end statement
					) // end block list
				) // end body statement
			)
		) // end external declaration		  
	)
//)
//)
//----------------------------------------------------------------------
output file="bin/Test0037_Struct.c"
expected file isSameAsInputFile
replacePatterns file="res/Patterns.txt"
//----------------------------------------------------------------------
before
	class = at.jku.weiner.c.parser.xtexttests.TestSuite_Structs
	method = testSize
	()
after
	class = at.jku.weiner.c.parser.xtexttests.TestSuite_Structs
	method = testSize
	()
//----------------------------------------------------------------------
//----------------------------------------------------------------------
