//----------------------------------------------------------------------
//----------------------------------------------------------------------
package at.jku.weiner.c.parser
language parser
imports at.jku.weiner.c.common.common
//----------------------------------------------------------------------
source file="res/Test0064_BlocksInExpressions.c"
//----------------------------------------------------------------------
lexer-tokens
KW_INT WHITESPACE ID SKW_LEFTPAREN SKW_RIGHTPAREN WHITESPACE SKW_LEFTBRACE NEWLINE
	// 1 + (int) { 7 };
	WHITESPACE DECIMAL_LITERAL WHITESPACE SKW_PLUS WHITESPACE
		SKW_LEFTPAREN KW_INT SKW_RIGHTPAREN WHITESPACE
		SKW_LEFTBRACE WHITESPACE DECIMAL_LITERAL WHITESPACE SKW_RIGHTBRACE SKW_SEMI NEWLINE
	// return ...
	WHITESPACE KW_RETURN WHITESPACE SKW_LEFTPAREN DECIMAL_LITERAL WHITESPACE 
	SKW_OROR WHITESPACE SKW_LEFTPAREN SKW_LEFTBRACE NEWLINE
		WHITESPACE DECIMAL_LITERAL SKW_SEMI NEWLINE
	WHITESPACE SKW_RIGHTBRACE SKW_RIGHTPAREN SKW_RIGHTPAREN SKW_SEMI NEWLINE
SKW_RIGHTBRACE NEWLINE

//----------------------------------------------------------------------
//(common::Model units+=
	//(common::TranslationUnit 
	(Parser
		external+=
		(ExternalDeclaration 
			functiondefHead=
			(FunctionDefHead
				funDeclSpecifiers=
				(FunctionDeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						name++"int"
					)
				),
				funDeclarator=
				(Declarator
					declarator=
					(DirectDeclarator
						ident++"foo"
					)
				)
			),
			functionDefinition=
			(FunctionDefinition
				body=
				(BodyStatement
					blockList+=
					(BlockList
						statement+=
						// statement 1 + (int) { 7 };
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(AdditiveExpression
									left=
									(PrimaryExpression
										const=
										(common::Constant2
											dec++"1"
										)
									),
									op++"+",
									right=
									(PostfixExpression
										expr isNull,
										ext?=false,
										typeName=
										(TypeName
											list=
											(SpecifierQualifierList
												typeSpecifier+=
												(TypeSpecifier
													name++"int"
												)
											)
										),
										initializerList=
										(InitializerList
											init+=
											(Init
												initializer=
												(Initializer
													expr=
													(PrimaryExpression
														const=
														(common::Constant2
															dec++"7"
														)
													)
												)
											)
										)
									)
								)
							) // end expression statement
						), // end statement (int) { 7 };
						// return ...
						(Statement
							stmt=
							(JumpStatement
								expr=
								(PrimaryExpression
									parentheses?=true,
									expr=
									(LogicalOrExpression
										left=
										(PrimaryExpression
											const=
											(common::Constant2
												dec++"0"
											)
										),
										right=
										(PrimaryExpression
											ext?=false,
											compoundStmt=
											(CompoundStatement
												body=
												(BodyStatement
													blockList+=
													(BlockList
														statement+=
														(Statement
															stmt=
															(ExpressionStatement
																expression=
																(PrimaryExpression
																	const=
																	(common::Constant2
																		dec++"5"
																	)
																)	
															)
														)
													)
												)
											)
										)
									)
								), // end expression
								return++"return"
							)// end jump statement
						)//end statement
					)
				)
			)
		)
	)
//)
//)
//----------------------------------------------------------------------
output file="bin/Test0064_BlocksInExpressions.c"
expected file isSameAsInputFile

replacePatterns file="res/Patterns.txt"
//----------------------------------------------------------------------
//----------------------------------------------------------------------
