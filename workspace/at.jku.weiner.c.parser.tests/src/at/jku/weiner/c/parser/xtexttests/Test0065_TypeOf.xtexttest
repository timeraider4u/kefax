//----------------------------------------------------------------------
//----------------------------------------------------------------------
package at.jku.weiner.c.parser
language parser
imports at.jku.weiner.c.common.common
//----------------------------------------------------------------------
source file="res/Test0065_TypeOf.c"
//----------------------------------------------------------------------
lexer-tokens
KW_INT WHITESPACE ID SKW_SEMI NEWLINE
KW_TYPEOF1 SKW_LEFTPAREN ID SKW_RIGHTPAREN WHITESPACE ID SKW_SEMI NEWLINE
KW_TYPEOF3 SKW_LEFTPAREN 
	//KW_INT WHITESPACE SKW_STAR
	ID 
	SKW_RIGHTPAREN WHITESPACE ID SKW_SEMI NEWLINE
//----------------------------------------------------------------------
//(common::Model units+=
	//(common::TranslationUnit 
	(Parser
		external+=
		(ExternalDeclaration 
			declaration=
			(Declaration
				specifiers=
				(DeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						name++"int"
					)
				),
				initDeclaratorList+=
				(InitDeclaratorList
					initDeclarator+=
					(InitDeclarator
						declarator=
						(Declarator
							declarator=
							(DirectDeclarator
								id++"i"
							)
						)
					)
				),
				semi++";"
			)
		),
		(ExternalDeclaration
			declaration=
			(Declaration
				specifiers=
				(DeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						typeOf++"typeof",
						constExpr=
						(ConstantExpression
							expr=
							(ConditionalExpression
								expr=
								(LogicalOrExpression
									expr+=
									(LogicalAndExpression
										expr+=
										(InclusiveOrExpression
											expr+=
											(ExclusiveOrExpression
												expr+=
												(AndExpression
													expr+=
													(EqualityExpression
														expr+=
														(RelationalExpression
															expr+=
															(ShiftExpression
																expr+=
																(AdditiveExpression
																	expr+=
																	(MultiplicativeExpression
																		expr+=
																		(CastExpression
																			expr=
																			(UnaryExpression
																				expr=
																				(PostfixExpression
																					expr+=
																					(PrimaryExpression
																						id++"i"
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
														
													)
												)
											)
										)
									)
								)
							)
						)
					)
				)
				,
				initDeclaratorList+=
				(InitDeclaratorList
					initDeclarator+=
					(InitDeclarator
						declarator=
						(Declarator
							declarator=
							(DirectDeclarator
								id++"j"
							)
						)
					)
				),
				semi++";"
			)
			
		),
		(ExternalDeclaration 
			declaration=
			(Declaration
				specifiers=
				(DeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						typeOf++"__typeof__",
						constExpr=
						(ConstantExpression
							expr=
							(ConditionalExpression
								expr=
								(LogicalOrExpression
									expr+=
									(LogicalAndExpression
										expr+=
										(InclusiveOrExpression
											expr+=
											(ExclusiveOrExpression
												expr+=
												(AndExpression
													expr+=
													(EqualityExpression
														expr+=
														(RelationalExpression
															expr+=
															(ShiftExpression
																expr+=
																(AdditiveExpression
																	expr+=
																	(MultiplicativeExpression
																		expr+=
																		(CastExpression
																			expr=
																			(UnaryExpression
																				expr=
																				(PostfixExpression
																					expr+=
																					(PrimaryExpression
																						id++"j"
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
														
													)
												)
											)
										)
									)
								)
							)
						)
					)
				),
				initDeclaratorList+=
				(InitDeclaratorList
					initDeclarator+=
					(InitDeclarator
						declarator=
						(Declarator
							declarator=
							(DirectDeclarator
								id++"k"
							)
						)
					)
				),
				semi++";"
			)
		)
	)
//)
//)
//----------------------------------------------------------------------
output file="bin/Test0065_TypeOf.c"
expected file isSameAsInputFile
replacePatterns file="res/Patterns.txt"
//----------------------------------------------------------------------
//----------------------------------------------------------------------
