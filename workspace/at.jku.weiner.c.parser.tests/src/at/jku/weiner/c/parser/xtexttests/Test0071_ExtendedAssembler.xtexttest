//----------------------------------------------------------------------
//----------------------------------------------------------------------
package at.jku.weiner.c.parser
language parser
imports at.jku.weiner.c.common.common
//----------------------------------------------------------------------
source file="res/Test0071_ExtendedAssembler.c"
//----------------------------------------------------------------------
lexer-tokens
KW_UNSIGNED WHITESPACE KW_INT WHITESPACE ID WHITESPACE SKW_ASSIGN WHITESPACE DECIMAL_LITERAL SKW_SEMI NEWLINE
KW_UNSIGNED WHITESPACE KW_INT WHITESPACE ID SKW_SEMI NEWLINE
KW_UNSIGNED WHITESPACE KW_INT WHITESPACE SKW_STAR WHITESPACE ID WHITESPACE SKW_ASSIGN WHITESPACE SKW_AND ID SKW_SEMI NEWLINE

NEWLINE

KW_VOID WHITESPACE ID SKW_LEFTPAREN SKW_RIGHTPAREN WHITESPACE SKW_LEFTBRACE NEWLINE
	WHITESPACE LINE_COMMENT NEWLINE
	WHITESPACE LINE_COMMENT NEWLINE
	WHITESPACE LINE_COMMENT NEWLINE
	WHITESPACE KW_ASM1 WHITESPACE SKW_LEFTPAREN WHITESPACE STRING_LITERAL NEWLINE
		WHITESPACE STRING_LITERAL NEWLINE
		WHITESPACE SKW_COLON WHITESPACE SKW_LEFTBRACKET ID SKW_RIGHTBRACKET 
			WHITESPACE STRING_LITERAL WHITESPACE SKW_LEFTPAREN ID SKW_RIGHTPAREN NEWLINE
		WHITESPACE SKW_COLON WHITESPACE SKW_LEFTBRACKET ID SKW_RIGHTBRACKET
			WHITESPACE STRING_LITERAL WHITESPACE SKW_LEFTPAREN SKW_STAR ID SKW_RIGHTPAREN SKW_COMMA NEWLINE
		WHITESPACE SKW_LEFTBRACKET ID SKW_RIGHTBRACKET WHITESPACE STRING_LITERAL
			WHITESPACE SKW_LEFTPAREN DECIMAL_LITERAL SKW_RIGHTPAREN SKW_COMMA NEWLINE
		WHITESPACE STRING_LITERAL WHITESPACE SKW_LEFTPAREN ID SKW_RIGHTPAREN SKW_COMMA NEWLINE
 	WHITESPACE SKW_RIGHTPAREN SKW_SEMI NEWLINE
SKW_RIGHTBRACE NEWLINE
//----------------------------------------------------------------------
//(common::Model units+=
	//(common::TranslationUnit 
	(Parser
		external+=
		(ExternalDeclaration 
			declaration=
			(Declaration
				specifiers=
				(DeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						name++"unsigned"
					),
					(TypeSpecifier
						name++"int"
					)
				),
				initDeclaratorList+=
				(InitDeclaratorList
					initDeclarator+=
					(InitDeclarator
						declarator=
						(Declarator
							declarator=
							(DirectDeclarator
								id++"i"
							)
						),
						initializer=
						(Initializer
							expr=
							(PrimaryExpression
								const=
								(common::Constant2
									dec++"0"
								)
							)
						) // end initializer
					)
				)
			)
		), // end external declaration
		(ExternalDeclaration 
			declaration=
			(Declaration
				specifiers=
				(DeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						name++"unsigned"
					),
					(TypeSpecifier
						name++"int"
					)
				),
				initDeclaratorList+=
				(InitDeclaratorList
					initDeclarator+=
					(InitDeclarator
						declarator=
						(Declarator
							declarator=
							(DirectDeclarator
								id++"j"
							)
						)
					)
				)
			)
		), // end external declaration
		(ExternalDeclaration 
			declaration=
			(Declaration
				specifiers=
				(DeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						name++"unsigned"
					),
					(TypeSpecifier
						name++"int"
					)
				),
				initDeclaratorList+=
				(InitDeclaratorList
					initDeclarator+=
					(InitDeclarator
						declarator=
						(Declarator
							pointer=
							(Pointer
								star+*"[*]"
							),
							declarator=
							(DirectDeclarator
								id++"k"
							)
						),
						initializer=
						(Initializer
							expr=
							(UnaryExpression
								op++"&",
								expr=
								(PrimaryExpression
									id++"i"
								)
							) // end expression
						) // end initializer
					)
				)
			)
		),
		// void foo()
		(ExternalDeclaration 
			functiondefHead=
			(FunctionDefHead
				funDeclSpecifiers=
				(FunctionDeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						name++"void"
					)
				),
				funDeclarator=
				(Declarator
					declarator=
					(DirectDeclarator
						id++"foo"
					)
				)
			),
			functionDefinition=
			(FunctionDefinition
				body=
				(BodyStatement
					blockList+=
					(BlockList
						statement+=
						// statement
						(Statement
							stmt=
							(AsmStatement
								asmLine1=
								// "mov %[e], %[d]\n\t"
								(AsmLine
									sym isNull,
									expr=
									(PrimaryExpression
										string+*"[\\\"mov %[e], %[d]\\\\n\\\\t\\\", \\\"mov %[f], %[e]\\\"]"
									)
								),
								asmLines+=
								// : [d] "=rm" (i)
								(AsmLineWithColon
									asmLine=
									(AsmLineWithoutColon
										asmLines+=
										(AsmLine
											sym=
											(AsmSymbolicName
												id++"d"
											),
											expr=
											(PostfixExpression
												expr=
												(PrimaryExpression
													string+*"[\\\"=rm\\\"]"
												),
												suffix=
												(PostfixExpressionSuffixArgument
													argumentExpressionList=
													(ArgumentExpressionList
														expr+=
														(PrimaryExpression
															id++"i"
														)
													)
												)
											) // end LogicalOrExpression
										)
									)
								), // end asm lines with colon
								// : [e] "rm" (*k)
								(AsmLineWithColon
									asmLine=
									(AsmLineWithoutColon
										asmLines+=
										(AsmLine
											sym=
											(AsmSymbolicName
												id++"e"
											),
											expr=
											(PostfixExpression
												expr=
												(PrimaryExpression
													string+*"[\\\"rm\\\"]"
												),
												suffix=
												(PostfixExpressionSuffixArgument
													argumentExpressionList=
													(ArgumentExpressionList
														expr+=
														(UnaryExpression
															op++"*",
															expr=
															(PrimaryExpression
																id++"k"
															)
														)
													)
												)
											) // end expression
										),
										// [f] "i" (1),
										(AsmLine
											sym=
											(AsmSymbolicName
												id++"f"
											),
											expr=
											(PostfixExpression
												expr=
												(PrimaryExpression
													string+*"[\\\"i\\\"]"
												),
												suffix=
												(PostfixExpressionSuffixArgument
													argumentExpressionList=
													(ArgumentExpressionList
														expr+=
														(PrimaryExpression
															const=
															(common::Constant2
																dec++"1"
															)
														)
													)
												)
											) // end expression
										),
										// "d" (j)
										(AsmLine
											sym isNull,
											expr=
											(PostfixExpression
												expr=
												(PrimaryExpression
													//const=
													//(common::Constant2
														string+*"[\\\"d\\\"]"
													//)
												),
												suffix=
												(PostfixExpressionSuffixArgument
													argumentExpressionList=
													(ArgumentExpressionList
														expr+=
														(PrimaryExpression
															id++"j"
														)
													)
												)
											) // end LogicalOrExpression
										)
									) // end asm line without colon
								) // end asm line with colon
								//lastComma?=true 
							) // end assembler statement
						)
					)
				)
			)
		)
		
	)
//)
//)
//----------------------------------------------------------------------
output file="bin/Test0071_ExtendedAssembler.c"
expected file isSameAsInputFile

replacePatterns file="res/Patterns.txt"
//----------------------------------------------------------------------
//----------------------------------------------------------------------
