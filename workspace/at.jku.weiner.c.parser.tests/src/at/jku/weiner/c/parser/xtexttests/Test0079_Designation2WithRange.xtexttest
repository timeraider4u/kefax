//----------------------------------------------------------------------
//----------------------------------------------------------------------
package at.jku.weiner.c.parser
language parser
imports at.jku.weiner.c.common.common
//----------------------------------------------------------------------
source file="res/Test0079_Designation2WithRange.c"
//----------------------------------------------------------------------
lexer-tokens
KW_INT WHITESPACE ID SKW_LEFTBRACKET SKW_RIGHTBRACKET
WHITESPACE SKW_ASSIGN WHITESPACE SKW_LEFTBRACE NEWLINE
	WHITESPACE SKW_LEFTBRACKET DECIMAL_LITERAL SKW_RIGHTBRACKET 
		WHITESPACE SKW_ASSIGN WHITESPACE DECIMAL_LITERAL SKW_COMMA NEWLINE
		
	//WHITESPACE LINE_COMMENT NEWLINE
	WHITESPACE SKW_LEFTBRACKET DECIMAL_LITERAL WHITESPACE
		SKW_DOT +*3 WHITESPACE DECIMAL_LITERAL SKW_RIGHTBRACKET 
		WHITESPACE SKW_ASSIGN WHITESPACE DECIMAL_LITERAL SKW_COMMA NEWLINE
	WHITESPACE SKW_LEFTBRACKET DECIMAL_LITERAL SKW_RIGHTBRACKET 
		WHITESPACE SKW_ASSIGN WHITESPACE DECIMAL_LITERAL SKW_COMMA NEWLINE
SKW_RIGHTBRACE SKW_SEMI NEWLINE
//----------------------------------------------------------------------
//(common::Model units+=
	//(common::TranslationUnit 
	(Parser
		external+=
		// int array[] = ...
		(ExternalDeclaration
			declaration=
			(Declaration
				specifiers=
				(DeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						name++"int"
					)
				),
				initDeclaratorList+=
				(InitDeclaratorList
					initDeclarator+=
					(InitDeclarator
						declarator=
						(Declarator
							declarator=
							(DirectDeclarator
								id++"foo",
								declaratorSuffix+=
								(DeclaratorSuffix
									expr isNull
								)
							)
						), // end declarator
						initializer=
						(Initializer
							// { ... }:
							list=
							(InitializerList
								init+=
								// [0] = 0,
								(Init
									designation=
									(Designation
										list=
										(DesignatorList
											designator+=
											(Designator
												expr=
												(PrimaryExpression
													const=
													(common::Constant2
														dec++"0"
													)
												)
											)
										)
									),
									initializer=
									(Initializer
										expr=
										(PrimaryExpression
											const=
											(common::Constant2
												dec++"0"
											)
										)
									) // end initializer
								), // end init
								// [1 ... 9] = 1,
								(Init
									designation=
									(Designation
										list=
										(DesignatorList
											designator+=
											(Designator
												expr=
												(PrimaryExpression
													const=
													(common::Constant2
														dec++"1"
													)
												), // end constant expression
												to=
												(PrimaryExpression
													const=
													(common::Constant2
														dec++"9"
													)
												)
											) // end designator
										)
									),
									initializer=
									(Initializer
										expr=
										(PrimaryExpression
											const=
											(common::Constant2
												dec++"1"
											)
										)
									) // end initializer
								), // end init
								// [10] = 2,
								(Init
									designation=
									(Designation
										list=
										(DesignatorList
											designator+=
											(Designator
												expr=
												(PrimaryExpression
													const=
													(common::Constant2
														dec++"10"
													)
												)
											)
										)
									),
									initializer=
									(Initializer
										expr=
										(PrimaryExpression
											const=
											(common::Constant2
												dec++"2"
											)
										)
									) // end initializer
								) // end init
							), // end initializer list
							lastComma?=true
						)
					)
				)
			)
		) // end external declaration
	)
//)
//)
//----------------------------------------------------------------------
output file="bin/Test0079_Designation2WithRange.c"
expected file isSameAsInputFile
replacePatterns file="res/Patterns.txt"
//----------------------------------------------------------------------
//----------------------------------------------------------------------
