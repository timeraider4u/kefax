//----------------------------------------------------------------------
//----------------------------------------------------------------------
package at.jku.weiner.c.parser
language parser
imports at.jku.weiner.c.common.common
//----------------------------------------------------------------------
source file="res/Test0091_StructWithAttribute.c"
//----------------------------------------------------------------------
lexer-tokens
KW_STRUCT WHITESPACE ID WHITESPACE SKW_LEFTBRACE NEWLINE
	WHITESPACE KW_INT WHITESPACE ID SKW_SEMI NEWLINE
	WHITESPACE
	KW_STRUCT WHITESPACE ID WHITESPACE SKW_LEFTBRACE NEWLINE
		WHITESPACE KW_INT WHITESPACE ID SKW_SEMI NEWLINE
		WHITESPACE SKW_RIGHTBRACE WHITESPACE KW_ATTRIBUTE3 SKW_LEFTPAREN SKW_LEFTPAREN
			KW_ALIGNED3 SKW_LEFTPAREN SKW_LEFTPAREN
					DECIMAL_LITERAL WHITESPACE SKW_LEFTSHIFT WHITESPACE
					SKW_LEFTPAREN 
						DECIMAL_LITERAL 
					SKW_RIGHTPAREN
			SKW_RIGHTPAREN SKW_RIGHTPAREN
		SKW_RIGHTPAREN SKW_RIGHTPAREN SKW_SEMI NEWLINE 
SKW_RIGHTBRACE WHITESPACE KW_ATTRIBUTE3 SKW_LEFTPAREN SKW_LEFTPAREN
		KW_ALIGNED3 SKW_LEFTPAREN SKW_LEFTPAREN
				DECIMAL_LITERAL WHITESPACE SKW_LEFTSHIFT WHITESPACE
				SKW_LEFTPAREN 
					DECIMAL_LITERAL 
				SKW_RIGHTPAREN
		SKW_RIGHTPAREN SKW_RIGHTPAREN
	SKW_RIGHTPAREN SKW_RIGHTPAREN 
	SKW_SEMI 
NEWLINE

//----------------------------------------------------------------------
//(common::Model units+=
	//(common::TranslationUnit 
	(Parser
		external+=
		// struct foo { ... } ... ;
		(ExternalDeclaration
			declaration=
			(Declaration
				specifiers=
				(DeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						specifier=
						(StructOrUnionSpecifier
							type=
							(StructOrUnion
								name++"struct"
							),
							ident++"foo",
							structDeclList=
							(StructDeclarationList
								structDeclaration+=
								// int i
								(StructDeclaration
									list=
									(SpecifierQualifierList
										typeSpecifier+=
										(TypeSpecifier
											name++"int"
										)
									),
									structDeclarationList=
									(StructDeclaratorList
										structDeclarator+=
										(StructDeclarator
											declarator=
											(Declarator
												declarator=
												(DirectDeclarator
													ident++"i"
												)
											)
										)
									)
								),
								// struct ...
								(StructDeclaration
									list=
									(SpecifierQualifierList
										typeSpecifier+=
										(TypeSpecifier
											specifier=
										
											(StructOrUnionSpecifier
												type=
												(StructOrUnion
													name++"struct"
												),
												ident++"bar",
												structDeclList=
												(StructDeclarationList
													structDeclaration+=
													// int j
													(StructDeclaration
														list=
														(SpecifierQualifierList
															typeSpecifier+=
															(TypeSpecifier
																name++"int"
															)
														),
														structDeclarationList=
														(StructDeclaratorList
															structDeclarator+=
															(StructDeclarator
																declarator=
																(Declarator
																	declarator=
																	(DirectDeclarator
																		ident++"j"
																	)
																)
															)
														)
													)
												)
											) // struct or union specifier
										),
										(TypeSpecifier
											gccAttributeSpecifier=
											(GccAttributeSpecifier
												list=
												(GccAttributeList
													gccAttribute+=
													(GccAttribute
														keyword++"__aligned__",
														list=
														(ArgumentExpressionList
															expr+=
															(PrimaryExpression
																parentheses?=true,
																expr=
																(ShiftExpression
																	op++"<<",
																	left=
																	(PrimaryExpression
																		const=
																		(common::Constant2
																			dec++"2"
																		)
																	),
																	right=
																	(PrimaryExpression
																		parentheses?=true,
																		expr=
																		(PrimaryExpression
																			const=
																			(common::Constant2
																				dec++"3"
																			)
																		)
																	)
																)
															)
														)
													) // end gcc attribute
												)
											)
										)
									)
								)
							)
						) // end struct or union specifier
					),
					(TypeSpecifier
						gccAttributeSpecifier=
						(GccAttributeSpecifier
							list=
							(GccAttributeList
								gccAttribute+=
								(GccAttribute
									keyword++"__aligned__",
									list=
									(ArgumentExpressionList
										expr+=
										(PrimaryExpression
											parentheses?=true,
											expr=
											(ShiftExpression
												op++"<<",
												left=
												(PrimaryExpression
													const=
													(common::Constant2
														dec++"2"
													)
												),
												right=
												(PrimaryExpression
													parentheses?=true,
													expr=
													(PrimaryExpression
														const=
														(common::Constant2
															dec++"3"
														)
													)
												)
											)
										)
									)
								)
							)
						)
					)
				) // end declaration specifiers
			)
		) // end external declaration		  
	)
//)
//)
//----------------------------------------------------------------------
output file="bin/Test0091_StructWithAttribute.c"
expected file isSameAsInputFile
replacePatterns file="res/Patterns.txt"
//----------------------------------------------------------------------
before
	class = at.jku.weiner.c.parser.xtexttests.TestSuite_Structs
	method = testSize
	()
after
	class = at.jku.weiner.c.parser.xtexttests.TestSuite_Structs
	method = testSize
	()
//----------------------------------------------------------------------
//----------------------------------------------------------------------
