//----------------------------------------------------------------------
//----------------------------------------------------------------------
package at.jku.weiner.c.parser
language parser
imports at.jku.weiner.c.common.common
//----------------------------------------------------------------------
source file="res/Test0092_CaseRangeExpr.c"
//----------------------------------------------------------------------
lexer-tokens
KW_INT WHITESPACE ID SKW_LEFTPAREN KW_INT WHITESPACE ID SKW_RIGHTPAREN 
WHITESPACE SKW_LEFTBRACE NEWLINE
	WHITESPACE KW_SWITCH WHITESPACE SKW_LEFTPAREN ID SKW_RIGHTPAREN 
	WHITESPACE SKW_LEFTBRACE NEWLINE 
			
		WHITESPACE KW_CASE WHITESPACE 
			SKW_LEFTPAREN 
				DECIMAL_LITERAL SKW_MINUS DECIMAL_LITERAL 
			SKW_RIGHTPAREN
			WHITESPACE SKW_DOT SKW_DOT SKW_DOT WHITESPACE 
			SKW_LEFTPAREN
				DECIMAL_LITERAL SKW_PLUS DECIMAL_LITERAL
			SKW_RIGHTPAREN
			SKW_COLON NEWLINE
		WHITESPACE KW_RETURN WHITESPACE DECIMAL_LITERAL SKW_SEMI NEWLINE
	WHITESPACE SKW_RIGHTBRACE NEWLINE
	WHITESPACE KW_RETURN WHITESPACE DECIMAL_LITERAL SKW_SEMI NEWLINE
SKW_RIGHTBRACE NEWLINE
//----------------------------------------------------------------------
//(common::Model units+=
	//(common::TranslationUnit 
	(Parser
		external+=
		(ExternalDeclaration 
			functiondefHead=
			(FunctionDefHead
				funDeclSpecifiers=
				(FunctionDeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						name++"int"
					)
				),
				funDeclarator=
				(Declarator
					declarator=
					(DirectDeclarator
						ident++"foo",
						declaratorSuffix+=
						(DeclaratorSuffix
							lastSuffix=
							(DirectDeclaratorLastSuffix
								parameterTypeList+=
								(ParameterTypeList
									list=
									(ParameterList
										parameterDeclaration+=
										(ParameterDeclaration
											declSpecifiers=
											(DeclarationSpecifiers
												declarationSpecifier+=
												(TypeSpecifier
													name++"int"
												)
											),
											declarator=
											(Declarator
												declarator=
												(DirectDeclarator
													ident++"bar"
												)
											)
										)
									) // end parameter list
								)
							)
						) // DeclaratorSuffix
					)
				)
			),
			functionDefinition=
			(FunctionDefinition
				body=
				(BodyStatement
					blockList+=
					(BlockList
						statement+=
						(Statement
							stmt=
							(SelectionStatement
								switch++"switch",
								expr=
								(PrimaryExpression
									ident++"bar"
								), // end expression
								switchStatement=
								(Statement
									stmt=
									(CompoundStatement
										body=
										(BodyStatement
											blockList+=
											(BlockList
												statement+=
												// case (8-2) ... (8+2):
												(Statement
													stmt=	
													(LabeledStatement
														case++"case",
														expr=
														(PrimaryExpression
															parentheses?=true,
															expr=
															(AdditiveExpression
																op++"-",
																left=
																(PrimaryExpression
																	const=
																	(common::Constant2
																		dec++"8"
																	)
																),
																right=
																(PrimaryExpression
																	const=
																	(common::Constant2
																		dec++"2"
																	)
																)
															)
															
														), // end constant expression of lower
														higher=
														(PrimaryExpression
															parentheses?=true,
															expr=
															(AdditiveExpression
																op++"+",
																left=
																(PrimaryExpression
																	const=
																	(common::Constant2
																		dec++"8"
																	)
																),
																right=
																(PrimaryExpression
																	const=
																	(common::Constant2
																		dec++"2"
																	)
																)
															)
														), // end constant expression of higher
														lStmt=
														(Statement
															stmt=
															(JumpStatement
																return++"return",
																expr=
																(PrimaryExpression
																	const=
																	(common::Constant2
																		dec++"1"	
																	)
																) // end expression
															) // end jump statement
														)
													) // end labeled statement
												) // end statement
											)
										)
									) // end compound statement of switch
								) // switch
							)// end selection statement
						),//end of switch statement
						// return ...;
						(Statement
							stmt=
							(JumpStatement
								expr=
								(PrimaryExpression
									const=
									(common::Constant2
										dec++"0"
									)
								), // end expression
								return++"return"
							)// end jump statement
						)//end statement
					)
				)
			)
		)// end external declaration		
	)
//)
//)
//----------------------------------------------------------------------
output file="bin/Test0092_CaseRangeExpr.c"
expected file isSameAsInputFile
replacePatterns file="res/Patterns.txt"
//----------------------------------------------------------------------
//----------------------------------------------------------------------
