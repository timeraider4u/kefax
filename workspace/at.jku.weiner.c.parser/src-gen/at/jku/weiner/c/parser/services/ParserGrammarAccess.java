/*
 * generated by Xtext 2.9.0-SNAPSHOT
 */
package at.jku.weiner.c.parser.services;

import at.jku.weiner.c.common.services.CommonGrammarAccess;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractParserRuleElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ParserGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ParserElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.Parser");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParserAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExternalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExternalExternalDeclarationParserRuleCall_1_0 = (RuleCall)cExternalAssignment_1.eContents().get(0);
		
		/// *** handled by discoverer  *** / //Model returns common::Model: 
		////	{common::Model} 
		////	(units+=TranslationUnit)
		////;
		////
		////TranslationUnit returns common::TranslationUnit:
		////	{common::TranslationUnit}
		////	parser=Parser
		////;
		/// *** parser *** / Parser common::Parser initRuleAction { at.jku.weiner.c.parser.utils.Scope.createFirstScope("Parser"); }
		//afterRuleAction { at.jku.weiner.c.parser.utils.Scope.removeScope(); }:
		//	{Parser} external+=ExternalDeclaration*
		@Override public ParserRule getRule() { return rule; }
		
		//{Parser} external+=ExternalDeclaration*
		public Group getGroup() { return cGroup; }
		
		//{Parser}
		public Action getParserAction_0() { return cParserAction_0; }
		
		//external+=ExternalDeclaration*
		public Assignment getExternalAssignment_1() { return cExternalAssignment_1; }
		
		//ExternalDeclaration
		public RuleCall getExternalExternalDeclarationParserRuleCall_1_0() { return cExternalExternalDeclarationParserRuleCall_1_0; }
	}
	public class ExternalDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.ExternalDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExternalDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Assignment cFunctiondefHeadAssignment_1_0_0_0 = (Assignment)cGroup_1_0_0.eContents().get(0);
		private final RuleCall cFunctiondefHeadFunctionDefHeadParserRuleCall_1_0_0_0_0 = (RuleCall)cFunctiondefHeadAssignment_1_0_0_0.eContents().get(0);
		private final RuleCall cSKW_LEFTBRACETerminalRuleCall_1_0_0_1 = (RuleCall)cGroup_1_0_0.eContents().get(1);
		private final Assignment cFunctionDefinitionAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cFunctionDefinitionFunctionDefinitionParserRuleCall_1_0_1_0 = (RuleCall)cFunctionDefinitionAssignment_1_0_1.eContents().get(0);
		private final RuleCall cSKW_RIGHTBRACETerminalRuleCall_1_0_2 = (RuleCall)cGroup_1_0.eContents().get(2);
		private final Assignment cDeclarationAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cDeclarationDeclarationParserRuleCall_1_1_0 = (RuleCall)cDeclarationAssignment_1_1.eContents().get(0);
		private final Assignment cSemiAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cSemiSKW_SEMITerminalRuleCall_1_2_0 = (RuleCall)cSemiAssignment_1_2.eContents().get(0);
		
		//ExternalDeclaration:
		//	{ExternalDeclaration} ((=>
		//	functiondefHead=FunctionDefHead
		//	SKW_LEFTBRACE) functionDefinition=FunctionDefinition
		//	SKW_RIGHTBRACE
		//	| declaration=Declaration
		//	| semi=SKW_SEMI);
		@Override public ParserRule getRule() { return rule; }
		
		//{ExternalDeclaration} ((=> functiondefHead=FunctionDefHead SKW_LEFTBRACE) functionDefinition=FunctionDefinition
		//SKW_RIGHTBRACE | declaration=Declaration | semi=SKW_SEMI)
		public Group getGroup() { return cGroup; }
		
		//{ExternalDeclaration}
		public Action getExternalDeclarationAction_0() { return cExternalDeclarationAction_0; }
		
		//((=> functiondefHead=FunctionDefHead SKW_LEFTBRACE) functionDefinition=FunctionDefinition SKW_RIGHTBRACE |
		//declaration=Declaration | semi=SKW_SEMI)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//(=> functiondefHead=FunctionDefHead SKW_LEFTBRACE) functionDefinition=FunctionDefinition SKW_RIGHTBRACE
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//(=> functiondefHead=FunctionDefHead SKW_LEFTBRACE)
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//=> functiondefHead=FunctionDefHead
		public Assignment getFunctiondefHeadAssignment_1_0_0_0() { return cFunctiondefHeadAssignment_1_0_0_0; }
		
		//FunctionDefHead
		public RuleCall getFunctiondefHeadFunctionDefHeadParserRuleCall_1_0_0_0_0() { return cFunctiondefHeadFunctionDefHeadParserRuleCall_1_0_0_0_0; }
		
		//SKW_LEFTBRACE
		public RuleCall getSKW_LEFTBRACETerminalRuleCall_1_0_0_1() { return cSKW_LEFTBRACETerminalRuleCall_1_0_0_1; }
		
		//functionDefinition=FunctionDefinition
		public Assignment getFunctionDefinitionAssignment_1_0_1() { return cFunctionDefinitionAssignment_1_0_1; }
		
		//FunctionDefinition
		public RuleCall getFunctionDefinitionFunctionDefinitionParserRuleCall_1_0_1_0() { return cFunctionDefinitionFunctionDefinitionParserRuleCall_1_0_1_0; }
		
		//SKW_RIGHTBRACE
		public RuleCall getSKW_RIGHTBRACETerminalRuleCall_1_0_2() { return cSKW_RIGHTBRACETerminalRuleCall_1_0_2; }
		
		//declaration=Declaration
		public Assignment getDeclarationAssignment_1_1() { return cDeclarationAssignment_1_1; }
		
		//Declaration
		public RuleCall getDeclarationDeclarationParserRuleCall_1_1_0() { return cDeclarationDeclarationParserRuleCall_1_1_0; }
		
		//semi=SKW_SEMI
		public Assignment getSemiAssignment_1_2() { return cSemiAssignment_1_2; }
		
		//SKW_SEMI
		public RuleCall getSemiSKW_SEMITerminalRuleCall_1_2_0() { return cSemiSKW_SEMITerminalRuleCall_1_2_0; }
	}
	public class FunctionDefHeadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.FunctionDefHead");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionDefHeadAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFunDeclSpecifiersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunDeclSpecifiersFunctionDeclarationSpecifiersParserRuleCall_1_0 = (RuleCall)cFunDeclSpecifiersAssignment_1.eContents().get(0);
		private final Assignment cFunDeclaratorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFunDeclaratorDeclaratorParserRuleCall_2_0 = (RuleCall)cFunDeclaratorAssignment_2.eContents().get(0);
		private final Assignment cFunDeclarationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFunDeclarationDeclarationParserRuleCall_3_0 = (RuleCall)cFunDeclarationAssignment_3.eContents().get(0);
		
		//FunctionDefHead:
		//	{FunctionDefHead} funDeclSpecifiers=FunctionDeclarationSpecifiers?
		//	funDeclarator=Declarator
		//	funDeclaration+=Declaration*;
		@Override public ParserRule getRule() { return rule; }
		
		//{FunctionDefHead} funDeclSpecifiers=FunctionDeclarationSpecifiers? funDeclarator=Declarator funDeclaration+=Declaration*
		public Group getGroup() { return cGroup; }
		
		//{FunctionDefHead}
		public Action getFunctionDefHeadAction_0() { return cFunctionDefHeadAction_0; }
		
		//funDeclSpecifiers=FunctionDeclarationSpecifiers?
		public Assignment getFunDeclSpecifiersAssignment_1() { return cFunDeclSpecifiersAssignment_1; }
		
		//FunctionDeclarationSpecifiers
		public RuleCall getFunDeclSpecifiersFunctionDeclarationSpecifiersParserRuleCall_1_0() { return cFunDeclSpecifiersFunctionDeclarationSpecifiersParserRuleCall_1_0; }
		
		//funDeclarator=Declarator
		public Assignment getFunDeclaratorAssignment_2() { return cFunDeclaratorAssignment_2; }
		
		//Declarator
		public RuleCall getFunDeclaratorDeclaratorParserRuleCall_2_0() { return cFunDeclaratorDeclaratorParserRuleCall_2_0; }
		
		//funDeclaration+=Declaration*
		public Assignment getFunDeclarationAssignment_3() { return cFunDeclarationAssignment_3; }
		
		//Declaration
		public RuleCall getFunDeclarationDeclarationParserRuleCall_3_0() { return cFunDeclarationDeclarationParserRuleCall_3_0; }
	}
	public class FunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.FunctionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyBodyStatementParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		
		//FunctionDefinition initRuleAction { at.jku.weiner.c.parser.utils.Scope.createNewScope("FunctionDefinition"); }
		//afterRuleAction { at.jku.weiner.c.parser.utils.Scope.removeScope(); }:
		//	{FunctionDefinition} body=BodyStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//{FunctionDefinition} body=BodyStatement
		public Group getGroup() { return cGroup; }
		
		//{FunctionDefinition}
		public Action getFunctionDefinitionAction_0() { return cFunctionDefinitionAction_0; }
		
		//body=BodyStatement
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }
		
		//BodyStatement
		public RuleCall getBodyBodyStatementParserRuleCall_1_0() { return cBodyBodyStatementParserRuleCall_1_0; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.Declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cSpecifiersAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cSpecifiersDeclarationSpecifiersParserRuleCall_1_0_0 = (RuleCall)cSpecifiersAssignment_1_0.eContents().get(0);
		private final Assignment cInitDeclaratorListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cInitDeclaratorListInitDeclaratorListParserRuleCall_1_1_0 = (RuleCall)cInitDeclaratorListAssignment_1_1.eContents().get(0);
		private final Assignment cSemiAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSemiSKW_SEMITerminalRuleCall_1_2_0 = (RuleCall)cSemiAssignment_1_2.eContents().get(0);
		
		////
		//// ambiguity:
		//// 1.)declarationSpecifiers->declarationSpecifier->typeSpecifier->typedefName->IDENTIFIER
		//// 2.)initDeclaratorList->initDeclarator->declarator->directDeclarator->IDENTIFIER
		//Declaration initRuleAction { at.jku.weiner.c.parser.utils.Scope.setTypedef(false); }:
		//	{Declaration} (specifiers=DeclarationSpecifiers
		//	initDeclaratorList+=InitDeclaratorList?
		//	semi=SKW_SEMI
		//	//|	staticAssertDeclaration
		//);
		@Override public ParserRule getRule() { return rule; }
		
		//{Declaration} (specifiers=DeclarationSpecifiers initDeclaratorList+=InitDeclaratorList? semi=SKW_SEMI //|	staticAssertDeclaration
		//)
		public Group getGroup() { return cGroup; }
		
		//{Declaration}
		public Action getDeclarationAction_0() { return cDeclarationAction_0; }
		
		//(specifiers=DeclarationSpecifiers initDeclaratorList+=InitDeclaratorList? semi=SKW_SEMI //|	staticAssertDeclaration
		//)
		public Group getGroup_1() { return cGroup_1; }
		
		//specifiers=DeclarationSpecifiers
		public Assignment getSpecifiersAssignment_1_0() { return cSpecifiersAssignment_1_0; }
		
		//DeclarationSpecifiers
		public RuleCall getSpecifiersDeclarationSpecifiersParserRuleCall_1_0_0() { return cSpecifiersDeclarationSpecifiersParserRuleCall_1_0_0; }
		
		//initDeclaratorList+=InitDeclaratorList?
		public Assignment getInitDeclaratorListAssignment_1_1() { return cInitDeclaratorListAssignment_1_1; }
		
		//InitDeclaratorList
		public RuleCall getInitDeclaratorListInitDeclaratorListParserRuleCall_1_1_0() { return cInitDeclaratorListInitDeclaratorListParserRuleCall_1_1_0; }
		
		//semi=SKW_SEMI
		public Assignment getSemiAssignment_1_2() { return cSemiAssignment_1_2; }
		
		//SKW_SEMI
		public RuleCall getSemiSKW_SEMITerminalRuleCall_1_2_0() { return cSemiSKW_SEMITerminalRuleCall_1_2_0; }
	}
	public class FunctionDeclarationSpecifiersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.FunctionDeclarationSpecifiers");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionDeclarationSpecifiersAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cDeclarationSpecifierAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cDeclarationSpecifierStorageClassSpecifierParserRuleCall_1_0_0 = (RuleCall)cDeclarationSpecifierAssignment_1_0.eContents().get(0);
		private final Assignment cDeclarationSpecifierAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cDeclarationSpecifierTypeSpecifierParserRuleCall_1_1_0 = (RuleCall)cDeclarationSpecifierAssignment_1_1.eContents().get(0);
		private final Assignment cDeclarationSpecifierAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cDeclarationSpecifierTypeQualifierParserRuleCall_1_2_0 = (RuleCall)cDeclarationSpecifierAssignment_1_2.eContents().get(0);
		private final Assignment cDeclarationSpecifierAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cDeclarationSpecifierFunctionSpecifierParserRuleCall_1_3_0 = (RuleCall)cDeclarationSpecifierAssignment_1_3.eContents().get(0);
		
		//FunctionDeclarationSpecifiers:
		//	{FunctionDeclarationSpecifiers} (declarationSpecifier+=StorageClassSpecifier
		//	| declarationSpecifier+=TypeSpecifier
		//	| declarationSpecifier+=TypeQualifier
		//	| declarationSpecifier+=FunctionSpecifier
		//	//|	declarationSpecifier+=alignmentSpecifier
		//)+;
		@Override public ParserRule getRule() { return rule; }
		
		//{FunctionDeclarationSpecifiers} (declarationSpecifier+=StorageClassSpecifier | declarationSpecifier+=TypeSpecifier |
		//declarationSpecifier+=TypeQualifier | declarationSpecifier+=FunctionSpecifier //|	declarationSpecifier+=alignmentSpecifier
		//)+
		public Group getGroup() { return cGroup; }
		
		//{FunctionDeclarationSpecifiers}
		public Action getFunctionDeclarationSpecifiersAction_0() { return cFunctionDeclarationSpecifiersAction_0; }
		
		//(declarationSpecifier+=StorageClassSpecifier | declarationSpecifier+=TypeSpecifier | declarationSpecifier+=TypeQualifier
		//| declarationSpecifier+=FunctionSpecifier //|	declarationSpecifier+=alignmentSpecifier
		//)+
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//declarationSpecifier+=StorageClassSpecifier
		public Assignment getDeclarationSpecifierAssignment_1_0() { return cDeclarationSpecifierAssignment_1_0; }
		
		//StorageClassSpecifier
		public RuleCall getDeclarationSpecifierStorageClassSpecifierParserRuleCall_1_0_0() { return cDeclarationSpecifierStorageClassSpecifierParserRuleCall_1_0_0; }
		
		//declarationSpecifier+=TypeSpecifier
		public Assignment getDeclarationSpecifierAssignment_1_1() { return cDeclarationSpecifierAssignment_1_1; }
		
		//TypeSpecifier
		public RuleCall getDeclarationSpecifierTypeSpecifierParserRuleCall_1_1_0() { return cDeclarationSpecifierTypeSpecifierParserRuleCall_1_1_0; }
		
		//declarationSpecifier+=TypeQualifier
		public Assignment getDeclarationSpecifierAssignment_1_2() { return cDeclarationSpecifierAssignment_1_2; }
		
		//TypeQualifier
		public RuleCall getDeclarationSpecifierTypeQualifierParserRuleCall_1_2_0() { return cDeclarationSpecifierTypeQualifierParserRuleCall_1_2_0; }
		
		//declarationSpecifier+=FunctionSpecifier
		public Assignment getDeclarationSpecifierAssignment_1_3() { return cDeclarationSpecifierAssignment_1_3; }
		
		//FunctionSpecifier
		public RuleCall getDeclarationSpecifierFunctionSpecifierParserRuleCall_1_3_0() { return cDeclarationSpecifierFunctionSpecifierParserRuleCall_1_3_0; }
	}
	public class DeclarationSpecifiersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.DeclarationSpecifiers");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeclarationSpecifiersAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cDeclarationSpecifierAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cDeclarationSpecifierStorageClassSpecifierParserRuleCall_1_0_0 = (RuleCall)cDeclarationSpecifierAssignment_1_0.eContents().get(0);
		private final Assignment cDeclarationSpecifierAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cDeclarationSpecifierTypeSpecifierParserRuleCall_1_1_0 = (RuleCall)cDeclarationSpecifierAssignment_1_1.eContents().get(0);
		private final Assignment cDeclarationSpecifierAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cDeclarationSpecifierTypeQualifierParserRuleCall_1_2_0 = (RuleCall)cDeclarationSpecifierAssignment_1_2.eContents().get(0);
		private final Assignment cDeclarationSpecifierAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cDeclarationSpecifierFunctionSpecifierParserRuleCall_1_3_0 = (RuleCall)cDeclarationSpecifierAssignment_1_3.eContents().get(0);
		
		//DeclarationSpecifiers:
		//	{DeclarationSpecifiers} (declarationSpecifier+=StorageClassSpecifier
		//	| declarationSpecifier+=TypeSpecifier
		//	| declarationSpecifier+=TypeQualifier
		//	| declarationSpecifier+=FunctionSpecifier
		//	//|	declarationSpecifier+=alignmentSpecifier
		//)+;
		@Override public ParserRule getRule() { return rule; }
		
		//{DeclarationSpecifiers} (declarationSpecifier+=StorageClassSpecifier | declarationSpecifier+=TypeSpecifier |
		//declarationSpecifier+=TypeQualifier | declarationSpecifier+=FunctionSpecifier //|	declarationSpecifier+=alignmentSpecifier
		//)+
		public Group getGroup() { return cGroup; }
		
		//{DeclarationSpecifiers}
		public Action getDeclarationSpecifiersAction_0() { return cDeclarationSpecifiersAction_0; }
		
		//(declarationSpecifier+=StorageClassSpecifier | declarationSpecifier+=TypeSpecifier | declarationSpecifier+=TypeQualifier
		//| declarationSpecifier+=FunctionSpecifier //|	declarationSpecifier+=alignmentSpecifier
		//)+
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//declarationSpecifier+=StorageClassSpecifier
		public Assignment getDeclarationSpecifierAssignment_1_0() { return cDeclarationSpecifierAssignment_1_0; }
		
		//StorageClassSpecifier
		public RuleCall getDeclarationSpecifierStorageClassSpecifierParserRuleCall_1_0_0() { return cDeclarationSpecifierStorageClassSpecifierParserRuleCall_1_0_0; }
		
		//declarationSpecifier+=TypeSpecifier
		public Assignment getDeclarationSpecifierAssignment_1_1() { return cDeclarationSpecifierAssignment_1_1; }
		
		//TypeSpecifier
		public RuleCall getDeclarationSpecifierTypeSpecifierParserRuleCall_1_1_0() { return cDeclarationSpecifierTypeSpecifierParserRuleCall_1_1_0; }
		
		//declarationSpecifier+=TypeQualifier
		public Assignment getDeclarationSpecifierAssignment_1_2() { return cDeclarationSpecifierAssignment_1_2; }
		
		//TypeQualifier
		public RuleCall getDeclarationSpecifierTypeQualifierParserRuleCall_1_2_0() { return cDeclarationSpecifierTypeQualifierParserRuleCall_1_2_0; }
		
		//declarationSpecifier+=FunctionSpecifier
		public Assignment getDeclarationSpecifierAssignment_1_3() { return cDeclarationSpecifierAssignment_1_3; }
		
		//FunctionSpecifier
		public RuleCall getDeclarationSpecifierFunctionSpecifierParserRuleCall_1_3_0() { return cDeclarationSpecifierFunctionSpecifierParserRuleCall_1_3_0; }
	}
	public class InitDeclaratorListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.InitDeclaratorList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInitDeclaratorListAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cInitDeclaratorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInitDeclaratorInitDeclaratorParserRuleCall_1_0 = (RuleCall)cInitDeclaratorAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cSKW_COMMATerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cInitDeclaratorAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInitDeclaratorInitDeclaratorParserRuleCall_2_1_0 = (RuleCall)cInitDeclaratorAssignment_2_1.eContents().get(0);
		
		//InitDeclaratorList:
		//	{InitDeclaratorList} initDeclarator+=InitDeclarator (SKW_COMMA initDeclarator+=InitDeclarator)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{InitDeclaratorList} initDeclarator+=InitDeclarator (SKW_COMMA initDeclarator+=InitDeclarator)*
		public Group getGroup() { return cGroup; }
		
		//{InitDeclaratorList}
		public Action getInitDeclaratorListAction_0() { return cInitDeclaratorListAction_0; }
		
		//initDeclarator+=InitDeclarator
		public Assignment getInitDeclaratorAssignment_1() { return cInitDeclaratorAssignment_1; }
		
		//InitDeclarator
		public RuleCall getInitDeclaratorInitDeclaratorParserRuleCall_1_0() { return cInitDeclaratorInitDeclaratorParserRuleCall_1_0; }
		
		//(SKW_COMMA initDeclarator+=InitDeclarator)*
		public Group getGroup_2() { return cGroup_2; }
		
		//SKW_COMMA
		public RuleCall getSKW_COMMATerminalRuleCall_2_0() { return cSKW_COMMATerminalRuleCall_2_0; }
		
		//initDeclarator+=InitDeclarator
		public Assignment getInitDeclaratorAssignment_2_1() { return cInitDeclaratorAssignment_2_1; }
		
		//InitDeclarator
		public RuleCall getInitDeclaratorInitDeclaratorParserRuleCall_2_1_0() { return cInitDeclaratorInitDeclaratorParserRuleCall_2_1_0; }
	}
	public class InitDeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.InitDeclarator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInitDeclaratorAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDeclaratorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeclaratorDeclaratorParserRuleCall_1_0 = (RuleCall)cDeclaratorAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cSKW_ASSIGNTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cInitializerAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInitializerInitializerParserRuleCall_2_1_0 = (RuleCall)cInitializerAssignment_2_1.eContents().get(0);
		
		//InitDeclarator:
		//	{InitDeclarator} declarator=Declarator (SKW_ASSIGN initializer=Initializer)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{InitDeclarator} declarator=Declarator (SKW_ASSIGN initializer=Initializer)?
		public Group getGroup() { return cGroup; }
		
		//{InitDeclarator}
		public Action getInitDeclaratorAction_0() { return cInitDeclaratorAction_0; }
		
		//declarator=Declarator
		public Assignment getDeclaratorAssignment_1() { return cDeclaratorAssignment_1; }
		
		//Declarator
		public RuleCall getDeclaratorDeclaratorParserRuleCall_1_0() { return cDeclaratorDeclaratorParserRuleCall_1_0; }
		
		//(SKW_ASSIGN initializer=Initializer)?
		public Group getGroup_2() { return cGroup_2; }
		
		//SKW_ASSIGN
		public RuleCall getSKW_ASSIGNTerminalRuleCall_2_0() { return cSKW_ASSIGNTerminalRuleCall_2_0; }
		
		//initializer=Initializer
		public Assignment getInitializerAssignment_2_1() { return cInitializerAssignment_2_1; }
		
		//Initializer
		public RuleCall getInitializerInitializerParserRuleCall_2_1_0() { return cInitializerInitializerParserRuleCall_2_1_0; }
	}
	public class StorageClassSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.StorageClassSpecifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStorageClassSpecifierAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cNameKW_TYPEDEFTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cNameKW_EXTERNTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Assignment cNameAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cNameKW_STATICTerminalRuleCall_1_2_0 = (RuleCall)cNameAssignment_1_2.eContents().get(0);
		private final Assignment cNameAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cNameKW_THREADLOCALTerminalRuleCall_1_3_0 = (RuleCall)cNameAssignment_1_3.eContents().get(0);
		private final Assignment cNameAssignment_1_4 = (Assignment)cAlternatives_1.eContents().get(4);
		private final RuleCall cNameKW_AUTOTerminalRuleCall_1_4_0 = (RuleCall)cNameAssignment_1_4.eContents().get(0);
		private final Assignment cNameAssignment_1_5 = (Assignment)cAlternatives_1.eContents().get(5);
		private final RuleCall cNameKW_REGISTERTerminalRuleCall_1_5_0 = (RuleCall)cNameAssignment_1_5.eContents().get(0);
		
		//StorageClassSpecifier:
		//	{StorageClassSpecifier} (name=KW_TYPEDEF
		//	postAction{ { at.jku.weiner.c.parser.utils.Scope.setTypedef(true); } } | name=KW_EXTERN
		//	| name=KW_STATIC
		//	| name=KW_THREADLOCAL
		//	| name=KW_AUTO
		//	| name=KW_REGISTER);
		@Override public ParserRule getRule() { return rule; }
		
		//{StorageClassSpecifier} (name=KW_TYPEDEF postAction{ { at.jku.weiner.c.parser.utils.Scope.setTypedef(true); } } |
		//name=KW_EXTERN | name=KW_STATIC | name=KW_THREADLOCAL | name=KW_AUTO | name=KW_REGISTER)
		public Group getGroup() { return cGroup; }
		
		//{StorageClassSpecifier}
		public Action getStorageClassSpecifierAction_0() { return cStorageClassSpecifierAction_0; }
		
		//(name=KW_TYPEDEF postAction{ { at.jku.weiner.c.parser.utils.Scope.setTypedef(true); } } | name=KW_EXTERN |
		//name=KW_STATIC | name=KW_THREADLOCAL | name=KW_AUTO | name=KW_REGISTER)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//name=KW_TYPEDEF postAction{ { at.jku.weiner.c.parser.utils.Scope.setTypedef(true); } }
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//KW_TYPEDEF
		public RuleCall getNameKW_TYPEDEFTerminalRuleCall_1_0_0() { return cNameKW_TYPEDEFTerminalRuleCall_1_0_0; }
		
		//name=KW_EXTERN
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//KW_EXTERN
		public RuleCall getNameKW_EXTERNTerminalRuleCall_1_1_0() { return cNameKW_EXTERNTerminalRuleCall_1_1_0; }
		
		//name=KW_STATIC
		public Assignment getNameAssignment_1_2() { return cNameAssignment_1_2; }
		
		//KW_STATIC
		public RuleCall getNameKW_STATICTerminalRuleCall_1_2_0() { return cNameKW_STATICTerminalRuleCall_1_2_0; }
		
		//name=KW_THREADLOCAL
		public Assignment getNameAssignment_1_3() { return cNameAssignment_1_3; }
		
		//KW_THREADLOCAL
		public RuleCall getNameKW_THREADLOCALTerminalRuleCall_1_3_0() { return cNameKW_THREADLOCALTerminalRuleCall_1_3_0; }
		
		//name=KW_AUTO
		public Assignment getNameAssignment_1_4() { return cNameAssignment_1_4; }
		
		//KW_AUTO
		public RuleCall getNameKW_AUTOTerminalRuleCall_1_4_0() { return cNameKW_AUTOTerminalRuleCall_1_4_0; }
		
		//name=KW_REGISTER
		public Assignment getNameAssignment_1_5() { return cNameAssignment_1_5; }
		
		//KW_REGISTER
		public RuleCall getNameKW_REGISTERTerminalRuleCall_1_5_0() { return cNameKW_REGISTERTerminalRuleCall_1_5_0; }
	}
	public class TypeSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.TypeSpecifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cTypeSpecifierAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameKW_BOOLTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNameKW_BUILTIN_VA_LISTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cNameKW_CHARTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cNameKW_COMPLEXTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cNameKW_DOUBLETerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Assignment cNameAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cNameKW_FLOATTerminalRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Assignment cNameAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cNameKW_INTTerminalRuleCall_6_0 = (RuleCall)cNameAssignment_6.eContents().get(0);
		private final Assignment cNameAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cNameKW_INT128_3TerminalRuleCall_7_0 = (RuleCall)cNameAssignment_7.eContents().get(0);
		private final Assignment cNameAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final RuleCall cNameKW_LONGTerminalRuleCall_8_0 = (RuleCall)cNameAssignment_8.eContents().get(0);
		private final Assignment cNameAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final RuleCall cNameKW_SHORTTerminalRuleCall_9_0 = (RuleCall)cNameAssignment_9.eContents().get(0);
		private final Assignment cNameAssignment_10 = (Assignment)cAlternatives.eContents().get(10);
		private final RuleCall cNameKW_M128TerminalRuleCall_10_0 = (RuleCall)cNameAssignment_10.eContents().get(0);
		private final Assignment cNameAssignment_11 = (Assignment)cAlternatives.eContents().get(11);
		private final RuleCall cNameKW_M128DTerminalRuleCall_11_0 = (RuleCall)cNameAssignment_11.eContents().get(0);
		private final Assignment cNameAssignment_12 = (Assignment)cAlternatives.eContents().get(12);
		private final RuleCall cNameKW_M128ITerminalRuleCall_12_0 = (RuleCall)cNameAssignment_12.eContents().get(0);
		private final Assignment cNameAssignment_13 = (Assignment)cAlternatives.eContents().get(13);
		private final RuleCall cNameKW_SIGNED1TerminalRuleCall_13_0 = (RuleCall)cNameAssignment_13.eContents().get(0);
		private final Assignment cNameAssignment_14 = (Assignment)cAlternatives.eContents().get(14);
		private final RuleCall cNameKW_SIGNED2TerminalRuleCall_14_0 = (RuleCall)cNameAssignment_14.eContents().get(0);
		private final Assignment cNameAssignment_15 = (Assignment)cAlternatives.eContents().get(15);
		private final RuleCall cNameKW_SIGNED3TerminalRuleCall_15_0 = (RuleCall)cNameAssignment_15.eContents().get(0);
		private final Assignment cNameAssignment_16 = (Assignment)cAlternatives.eContents().get(16);
		private final RuleCall cNameKW_UNSIGNEDTerminalRuleCall_16_0 = (RuleCall)cNameAssignment_16.eContents().get(0);
		private final Assignment cNameAssignment_17 = (Assignment)cAlternatives.eContents().get(17);
		private final RuleCall cNameKW_VOIDTerminalRuleCall_17_0 = (RuleCall)cNameAssignment_17.eContents().get(0);
		private final Group cGroup_18 = (Group)cAlternatives.eContents().get(18);
		private final Assignment cNameAssignment_18_0 = (Assignment)cGroup_18.eContents().get(0);
		private final RuleCall cNameKW_EXTENSIONTerminalRuleCall_18_0_0 = (RuleCall)cNameAssignment_18_0.eContents().get(0);
		private final Group cGroup_18_1 = (Group)cGroup_18.eContents().get(1);
		private final RuleCall cSKW_LEFTPARENTerminalRuleCall_18_1_0 = (RuleCall)cGroup_18_1.eContents().get(0);
		private final Alternatives cAlternatives_18_1_1 = (Alternatives)cGroup_18_1.eContents().get(1);
		private final Assignment cExtTypeAssignment_18_1_1_0 = (Assignment)cAlternatives_18_1_1.eContents().get(0);
		private final RuleCall cExtTypeKW_M128TerminalRuleCall_18_1_1_0_0 = (RuleCall)cExtTypeAssignment_18_1_1_0.eContents().get(0);
		private final Assignment cExtTypeAssignment_18_1_1_1 = (Assignment)cAlternatives_18_1_1.eContents().get(1);
		private final RuleCall cExtTypeKW_M128DTerminalRuleCall_18_1_1_1_0 = (RuleCall)cExtTypeAssignment_18_1_1_1.eContents().get(0);
		private final Assignment cExtTypeAssignment_18_1_1_2 = (Assignment)cAlternatives_18_1_1.eContents().get(2);
		private final RuleCall cExtTypeKW_M128ITerminalRuleCall_18_1_1_2_0 = (RuleCall)cExtTypeAssignment_18_1_1_2.eContents().get(0);
		private final RuleCall cSKW_RIGHTPARENTerminalRuleCall_18_1_2 = (RuleCall)cGroup_18_1.eContents().get(2);
		private final Assignment cSpecifierAssignment_19 = (Assignment)cAlternatives.eContents().get(19);
		private final RuleCall cSpecifierStructOrUnionSpecifierParserRuleCall_19_0 = (RuleCall)cSpecifierAssignment_19.eContents().get(0);
		private final Assignment cSpecifierAssignment_20 = (Assignment)cAlternatives.eContents().get(20);
		private final RuleCall cSpecifierEnumSpecifierParserRuleCall_20_0 = (RuleCall)cSpecifierAssignment_20.eContents().get(0);
		private final Assignment cTypeAssignment_21 = (Assignment)cAlternatives.eContents().get(21);
		private final RuleCall cTypeTypedefNameParserRuleCall_21_0 = (RuleCall)cTypeAssignment_21.eContents().get(0);
		private final Group cGroup_22 = (Group)cAlternatives.eContents().get(22);
		private final Assignment cTypeOfAssignment_22_0 = (Assignment)cGroup_22.eContents().get(0);
		private final Alternatives cTypeOfAlternatives_22_0_0 = (Alternatives)cTypeOfAssignment_22_0.eContents().get(0);
		private final RuleCall cTypeOfKW_TYPEOF1TerminalRuleCall_22_0_0_0 = (RuleCall)cTypeOfAlternatives_22_0_0.eContents().get(0);
		private final RuleCall cTypeOfKW_TYPEOF3TerminalRuleCall_22_0_0_1 = (RuleCall)cTypeOfAlternatives_22_0_0.eContents().get(1);
		private final RuleCall cSKW_LEFTPARENTerminalRuleCall_22_1 = (RuleCall)cGroup_22.eContents().get(1);
		private final Alternatives cAlternatives_22_2 = (Alternatives)cGroup_22.eContents().get(2);
		private final Assignment cTypeNameAssignment_22_2_0 = (Assignment)cAlternatives_22_2.eContents().get(0);
		private final RuleCall cTypeNameTypeNameParserRuleCall_22_2_0_0 = (RuleCall)cTypeNameAssignment_22_2_0.eContents().get(0);
		private final Assignment cConstExprAssignment_22_2_1 = (Assignment)cAlternatives_22_2.eContents().get(1);
		private final RuleCall cConstExprConstantExpressionParserRuleCall_22_2_1_0 = (RuleCall)cConstExprAssignment_22_2_1.eContents().get(0);
		private final RuleCall cSKW_RIGHTPARENTerminalRuleCall_22_3 = (RuleCall)cGroup_22.eContents().get(3);
		
		//TypeSpecifier initRuleAction { at.jku.weiner.c.parser.utils.Log.log("In typeSpecifier "); }:
		//	{TypeSpecifier} name=KW_BOOL
		//	| name=KW_BUILTIN_VA_LIST
		//	| name=KW_CHAR
		//	| name=KW_COMPLEX
		//	| name=KW_DOUBLE
		//	| name=KW_FLOAT
		//	| name=KW_INT
		//	| name=KW_INT128_3
		//	| name=KW_LONG
		//	| name=KW_SHORT
		//	| name=KW_M128
		//	| name=KW_M128D
		//	| name=KW_M128I
		//	| name=KW_SIGNED1
		//	| name=KW_SIGNED2
		//	| name=KW_SIGNED3
		//	| name=KW_UNSIGNED
		//	| name=KW_VOID
		//	| name=KW_EXTENSION (SKW_LEFTPAREN (extType=KW_M128 | extType=KW_M128D | extType=KW_M128I) SKW_RIGHTPAREN)?
		//	//  |	specifier=atomicTypeSpecifier
		//	| specifier=StructOrUnionSpecifier
		//	| specifier=EnumSpecifier
		//	| type=TypedefName
		//	| typeOf=(KW_TYPEOF1 | KW_TYPEOF3) SKW_LEFTPAREN (typeName=TypeName | constExpr=ConstantExpression) SKW_RIGHTPAREN // GCC extension
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{TypeSpecifier} name=KW_BOOL | name=KW_BUILTIN_VA_LIST | name=KW_CHAR | name=KW_COMPLEX | name=KW_DOUBLE | name=KW_FLOAT
		//| name=KW_INT | name=KW_INT128_3 | name=KW_LONG | name=KW_SHORT | name=KW_M128 | name=KW_M128D | name=KW_M128I |
		//name=KW_SIGNED1 | name=KW_SIGNED2 | name=KW_SIGNED3 | name=KW_UNSIGNED | name=KW_VOID | name=KW_EXTENSION
		//(SKW_LEFTPAREN (extType=KW_M128 | extType=KW_M128D | extType=KW_M128I) SKW_RIGHTPAREN)? //  |	specifier=atomicTypeSpecifier
		//| specifier=StructOrUnionSpecifier | specifier=EnumSpecifier | type=TypedefName | typeOf=(KW_TYPEOF1 | KW_TYPEOF3)
		//SKW_LEFTPAREN (typeName=TypeName | constExpr=ConstantExpression) SKW_RIGHTPAREN
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{TypeSpecifier} name=KW_BOOL
		public Group getGroup_0() { return cGroup_0; }
		
		//{TypeSpecifier}
		public Action getTypeSpecifierAction_0_0() { return cTypeSpecifierAction_0_0; }
		
		//name=KW_BOOL
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//KW_BOOL
		public RuleCall getNameKW_BOOLTerminalRuleCall_0_1_0() { return cNameKW_BOOLTerminalRuleCall_0_1_0; }
		
		//name=KW_BUILTIN_VA_LIST
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//KW_BUILTIN_VA_LIST
		public RuleCall getNameKW_BUILTIN_VA_LISTTerminalRuleCall_1_0() { return cNameKW_BUILTIN_VA_LISTTerminalRuleCall_1_0; }
		
		//name=KW_CHAR
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//KW_CHAR
		public RuleCall getNameKW_CHARTerminalRuleCall_2_0() { return cNameKW_CHARTerminalRuleCall_2_0; }
		
		//name=KW_COMPLEX
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//KW_COMPLEX
		public RuleCall getNameKW_COMPLEXTerminalRuleCall_3_0() { return cNameKW_COMPLEXTerminalRuleCall_3_0; }
		
		//name=KW_DOUBLE
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//KW_DOUBLE
		public RuleCall getNameKW_DOUBLETerminalRuleCall_4_0() { return cNameKW_DOUBLETerminalRuleCall_4_0; }
		
		//name=KW_FLOAT
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }
		
		//KW_FLOAT
		public RuleCall getNameKW_FLOATTerminalRuleCall_5_0() { return cNameKW_FLOATTerminalRuleCall_5_0; }
		
		//name=KW_INT
		public Assignment getNameAssignment_6() { return cNameAssignment_6; }
		
		//KW_INT
		public RuleCall getNameKW_INTTerminalRuleCall_6_0() { return cNameKW_INTTerminalRuleCall_6_0; }
		
		//name=KW_INT128_3
		public Assignment getNameAssignment_7() { return cNameAssignment_7; }
		
		//KW_INT128_3
		public RuleCall getNameKW_INT128_3TerminalRuleCall_7_0() { return cNameKW_INT128_3TerminalRuleCall_7_0; }
		
		//name=KW_LONG
		public Assignment getNameAssignment_8() { return cNameAssignment_8; }
		
		//KW_LONG
		public RuleCall getNameKW_LONGTerminalRuleCall_8_0() { return cNameKW_LONGTerminalRuleCall_8_0; }
		
		//name=KW_SHORT
		public Assignment getNameAssignment_9() { return cNameAssignment_9; }
		
		//KW_SHORT
		public RuleCall getNameKW_SHORTTerminalRuleCall_9_0() { return cNameKW_SHORTTerminalRuleCall_9_0; }
		
		//name=KW_M128
		public Assignment getNameAssignment_10() { return cNameAssignment_10; }
		
		//KW_M128
		public RuleCall getNameKW_M128TerminalRuleCall_10_0() { return cNameKW_M128TerminalRuleCall_10_0; }
		
		//name=KW_M128D
		public Assignment getNameAssignment_11() { return cNameAssignment_11; }
		
		//KW_M128D
		public RuleCall getNameKW_M128DTerminalRuleCall_11_0() { return cNameKW_M128DTerminalRuleCall_11_0; }
		
		//name=KW_M128I
		public Assignment getNameAssignment_12() { return cNameAssignment_12; }
		
		//KW_M128I
		public RuleCall getNameKW_M128ITerminalRuleCall_12_0() { return cNameKW_M128ITerminalRuleCall_12_0; }
		
		//name=KW_SIGNED1
		public Assignment getNameAssignment_13() { return cNameAssignment_13; }
		
		//KW_SIGNED1
		public RuleCall getNameKW_SIGNED1TerminalRuleCall_13_0() { return cNameKW_SIGNED1TerminalRuleCall_13_0; }
		
		//name=KW_SIGNED2
		public Assignment getNameAssignment_14() { return cNameAssignment_14; }
		
		//KW_SIGNED2
		public RuleCall getNameKW_SIGNED2TerminalRuleCall_14_0() { return cNameKW_SIGNED2TerminalRuleCall_14_0; }
		
		//name=KW_SIGNED3
		public Assignment getNameAssignment_15() { return cNameAssignment_15; }
		
		//KW_SIGNED3
		public RuleCall getNameKW_SIGNED3TerminalRuleCall_15_0() { return cNameKW_SIGNED3TerminalRuleCall_15_0; }
		
		//name=KW_UNSIGNED
		public Assignment getNameAssignment_16() { return cNameAssignment_16; }
		
		//KW_UNSIGNED
		public RuleCall getNameKW_UNSIGNEDTerminalRuleCall_16_0() { return cNameKW_UNSIGNEDTerminalRuleCall_16_0; }
		
		//name=KW_VOID
		public Assignment getNameAssignment_17() { return cNameAssignment_17; }
		
		//KW_VOID
		public RuleCall getNameKW_VOIDTerminalRuleCall_17_0() { return cNameKW_VOIDTerminalRuleCall_17_0; }
		
		//name=KW_EXTENSION (SKW_LEFTPAREN (extType=KW_M128 | extType=KW_M128D | extType=KW_M128I) SKW_RIGHTPAREN)?
		public Group getGroup_18() { return cGroup_18; }
		
		//name=KW_EXTENSION
		public Assignment getNameAssignment_18_0() { return cNameAssignment_18_0; }
		
		//KW_EXTENSION
		public RuleCall getNameKW_EXTENSIONTerminalRuleCall_18_0_0() { return cNameKW_EXTENSIONTerminalRuleCall_18_0_0; }
		
		//(SKW_LEFTPAREN (extType=KW_M128 | extType=KW_M128D | extType=KW_M128I) SKW_RIGHTPAREN)?
		public Group getGroup_18_1() { return cGroup_18_1; }
		
		//SKW_LEFTPAREN
		public RuleCall getSKW_LEFTPARENTerminalRuleCall_18_1_0() { return cSKW_LEFTPARENTerminalRuleCall_18_1_0; }
		
		//(extType=KW_M128 | extType=KW_M128D | extType=KW_M128I)
		public Alternatives getAlternatives_18_1_1() { return cAlternatives_18_1_1; }
		
		//extType=KW_M128
		public Assignment getExtTypeAssignment_18_1_1_0() { return cExtTypeAssignment_18_1_1_0; }
		
		//KW_M128
		public RuleCall getExtTypeKW_M128TerminalRuleCall_18_1_1_0_0() { return cExtTypeKW_M128TerminalRuleCall_18_1_1_0_0; }
		
		//extType=KW_M128D
		public Assignment getExtTypeAssignment_18_1_1_1() { return cExtTypeAssignment_18_1_1_1; }
		
		//KW_M128D
		public RuleCall getExtTypeKW_M128DTerminalRuleCall_18_1_1_1_0() { return cExtTypeKW_M128DTerminalRuleCall_18_1_1_1_0; }
		
		//extType=KW_M128I
		public Assignment getExtTypeAssignment_18_1_1_2() { return cExtTypeAssignment_18_1_1_2; }
		
		//KW_M128I
		public RuleCall getExtTypeKW_M128ITerminalRuleCall_18_1_1_2_0() { return cExtTypeKW_M128ITerminalRuleCall_18_1_1_2_0; }
		
		//SKW_RIGHTPAREN
		public RuleCall getSKW_RIGHTPARENTerminalRuleCall_18_1_2() { return cSKW_RIGHTPARENTerminalRuleCall_18_1_2; }
		
		//specifier=StructOrUnionSpecifier
		public Assignment getSpecifierAssignment_19() { return cSpecifierAssignment_19; }
		
		//StructOrUnionSpecifier
		public RuleCall getSpecifierStructOrUnionSpecifierParserRuleCall_19_0() { return cSpecifierStructOrUnionSpecifierParserRuleCall_19_0; }
		
		//specifier=EnumSpecifier
		public Assignment getSpecifierAssignment_20() { return cSpecifierAssignment_20; }
		
		//EnumSpecifier
		public RuleCall getSpecifierEnumSpecifierParserRuleCall_20_0() { return cSpecifierEnumSpecifierParserRuleCall_20_0; }
		
		//type=TypedefName
		public Assignment getTypeAssignment_21() { return cTypeAssignment_21; }
		
		//TypedefName
		public RuleCall getTypeTypedefNameParserRuleCall_21_0() { return cTypeTypedefNameParserRuleCall_21_0; }
		
		//typeOf=(KW_TYPEOF1 | KW_TYPEOF3) SKW_LEFTPAREN (typeName=TypeName | constExpr=ConstantExpression) SKW_RIGHTPAREN
		public Group getGroup_22() { return cGroup_22; }
		
		//typeOf=(KW_TYPEOF1 | KW_TYPEOF3)
		public Assignment getTypeOfAssignment_22_0() { return cTypeOfAssignment_22_0; }
		
		//(KW_TYPEOF1 | KW_TYPEOF3)
		public Alternatives getTypeOfAlternatives_22_0_0() { return cTypeOfAlternatives_22_0_0; }
		
		//KW_TYPEOF1
		public RuleCall getTypeOfKW_TYPEOF1TerminalRuleCall_22_0_0_0() { return cTypeOfKW_TYPEOF1TerminalRuleCall_22_0_0_0; }
		
		//KW_TYPEOF3
		public RuleCall getTypeOfKW_TYPEOF3TerminalRuleCall_22_0_0_1() { return cTypeOfKW_TYPEOF3TerminalRuleCall_22_0_0_1; }
		
		//SKW_LEFTPAREN
		public RuleCall getSKW_LEFTPARENTerminalRuleCall_22_1() { return cSKW_LEFTPARENTerminalRuleCall_22_1; }
		
		//(typeName=TypeName | constExpr=ConstantExpression)
		public Alternatives getAlternatives_22_2() { return cAlternatives_22_2; }
		
		//typeName=TypeName
		public Assignment getTypeNameAssignment_22_2_0() { return cTypeNameAssignment_22_2_0; }
		
		//TypeName
		public RuleCall getTypeNameTypeNameParserRuleCall_22_2_0_0() { return cTypeNameTypeNameParserRuleCall_22_2_0_0; }
		
		//constExpr=ConstantExpression
		public Assignment getConstExprAssignment_22_2_1() { return cConstExprAssignment_22_2_1; }
		
		//ConstantExpression
		public RuleCall getConstExprConstantExpressionParserRuleCall_22_2_1_0() { return cConstExprConstantExpressionParserRuleCall_22_2_1_0; }
		
		//SKW_RIGHTPAREN
		public RuleCall getSKW_RIGHTPARENTerminalRuleCall_22_3() { return cSKW_RIGHTPARENTerminalRuleCall_22_3; }
	}
	public class TypedefNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.TypedefName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypedefNameAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		
		//TypedefName initRuleAction { at.jku.weiner.c.parser.utils.Log.log("In typedefname "); }:
		//	{TypedefName} id=ID
		//	preAction{ { at.jku.weiner.c.parser.utils.Scope.isTypeName(input) } ? };
		@Override public ParserRule getRule() { return rule; }
		
		//{TypedefName} id=ID preAction{ { at.jku.weiner.c.parser.utils.Scope.isTypeName(input) } ? }
		public Group getGroup() { return cGroup; }
		
		//{TypedefName}
		public Action getTypedefNameAction_0() { return cTypedefNameAction_0; }
		
		//id=ID preAction{ { at.jku.weiner.c.parser.utils.Scope.isTypeName(input) } ? }
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }
	}
	public class StructOrUnionSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.StructOrUnionSpecifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStructOrUnionSpecifierAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeStructOrUnionParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cIdAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_2_0_0_0 = (RuleCall)cIdAssignment_2_0_0.eContents().get(0);
		private final RuleCall cSKW_LEFTBRACETerminalRuleCall_2_0_1 = (RuleCall)cGroup_2_0.eContents().get(1);
		private final Assignment cStructDeclListAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cStructDeclListStructDeclarationListParserRuleCall_2_0_2_0 = (RuleCall)cStructDeclListAssignment_2_0_2.eContents().get(0);
		private final RuleCall cSKW_RIGHTBRACETerminalRuleCall_2_0_3 = (RuleCall)cGroup_2_0.eContents().get(3);
		private final Assignment cIdAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_2_1_0 = (RuleCall)cIdAssignment_2_1.eContents().get(0);
		
		//StructOrUnionSpecifier DeclarationSpecifier initRuleAction {
		//at.jku.weiner.c.parser.utils.Scope.createNewScope("StructOrUnion"); } afterRuleAction {
		//at.jku.weiner.c.parser.utils.Scope.removeScope(); }:
		//	{StructOrUnionSpecifier} type=StructOrUnion (id=ID? SKW_LEFTBRACE structDeclList=StructDeclarationList SKW_RIGHTBRACE
		//	| id=ID)
		@Override public ParserRule getRule() { return rule; }
		
		//{StructOrUnionSpecifier} type=StructOrUnion (id=ID? SKW_LEFTBRACE structDeclList=StructDeclarationList SKW_RIGHTBRACE |
		//id=ID)
		public Group getGroup() { return cGroup; }
		
		//{StructOrUnionSpecifier}
		public Action getStructOrUnionSpecifierAction_0() { return cStructOrUnionSpecifierAction_0; }
		
		//type=StructOrUnion
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//StructOrUnion
		public RuleCall getTypeStructOrUnionParserRuleCall_1_0() { return cTypeStructOrUnionParserRuleCall_1_0; }
		
		//(id=ID? SKW_LEFTBRACE structDeclList=StructDeclarationList SKW_RIGHTBRACE | id=ID)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//id=ID? SKW_LEFTBRACE structDeclList=StructDeclarationList SKW_RIGHTBRACE
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//id=ID?
		public Assignment getIdAssignment_2_0_0() { return cIdAssignment_2_0_0; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_2_0_0_0() { return cIdIDTerminalRuleCall_2_0_0_0; }
		
		//SKW_LEFTBRACE
		public RuleCall getSKW_LEFTBRACETerminalRuleCall_2_0_1() { return cSKW_LEFTBRACETerminalRuleCall_2_0_1; }
		
		//structDeclList=StructDeclarationList
		public Assignment getStructDeclListAssignment_2_0_2() { return cStructDeclListAssignment_2_0_2; }
		
		//StructDeclarationList
		public RuleCall getStructDeclListStructDeclarationListParserRuleCall_2_0_2_0() { return cStructDeclListStructDeclarationListParserRuleCall_2_0_2_0; }
		
		//SKW_RIGHTBRACE
		public RuleCall getSKW_RIGHTBRACETerminalRuleCall_2_0_3() { return cSKW_RIGHTBRACETerminalRuleCall_2_0_3; }
		
		//id=ID
		public Assignment getIdAssignment_2_1() { return cIdAssignment_2_1; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_2_1_0() { return cIdIDTerminalRuleCall_2_1_0; }
	}
	public class StructOrUnionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.StructOrUnion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cStructOrUnionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameKW_STRUCTTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNameKW_UNIONTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//StructOrUnion:
		//	{StructOrUnion} name=KW_STRUCT
		//	| name=KW_UNION;
		@Override public ParserRule getRule() { return rule; }
		
		//{StructOrUnion} name=KW_STRUCT | name=KW_UNION
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{StructOrUnion} name=KW_STRUCT
		public Group getGroup_0() { return cGroup_0; }
		
		//{StructOrUnion}
		public Action getStructOrUnionAction_0_0() { return cStructOrUnionAction_0_0; }
		
		//name=KW_STRUCT
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//KW_STRUCT
		public RuleCall getNameKW_STRUCTTerminalRuleCall_0_1_0() { return cNameKW_STRUCTTerminalRuleCall_0_1_0; }
		
		//name=KW_UNION
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//KW_UNION
		public RuleCall getNameKW_UNIONTerminalRuleCall_1_0() { return cNameKW_UNIONTerminalRuleCall_1_0; }
	}
	public class StructDeclarationListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.StructDeclarationList");
		private final Assignment cStructDeclarationAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStructDeclarationStructDeclarationParserRuleCall_0 = (RuleCall)cStructDeclarationAssignment.eContents().get(0);
		
		//StructDeclarationList:
		//	structDeclaration+=StructDeclaration+;
		@Override public ParserRule getRule() { return rule; }
		
		//structDeclaration+=StructDeclaration+
		public Assignment getStructDeclarationAssignment() { return cStructDeclarationAssignment; }
		
		//StructDeclaration
		public RuleCall getStructDeclarationStructDeclarationParserRuleCall_0() { return cStructDeclarationStructDeclarationParserRuleCall_0; }
	}
	public class StructDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.StructDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cListSpecifierQualifierListParserRuleCall_0_0 = (RuleCall)cListAssignment_0.eContents().get(0);
		private final Assignment cStructDeclarationListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStructDeclarationListStructDeclaratorListParserRuleCall_1_0 = (RuleCall)cStructDeclarationListAssignment_1.eContents().get(0);
		private final RuleCall cSKW_SEMITerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//StructDeclaration:
		//	list=SpecifierQualifierList structDeclarationList=StructDeclaratorList? SKW_SEMI
		//	//|	staticAssertDeclaration
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//list=SpecifierQualifierList structDeclarationList=StructDeclaratorList? SKW_SEMI
		public Group getGroup() { return cGroup; }
		
		//list=SpecifierQualifierList
		public Assignment getListAssignment_0() { return cListAssignment_0; }
		
		//SpecifierQualifierList
		public RuleCall getListSpecifierQualifierListParserRuleCall_0_0() { return cListSpecifierQualifierListParserRuleCall_0_0; }
		
		//structDeclarationList=StructDeclaratorList?
		public Assignment getStructDeclarationListAssignment_1() { return cStructDeclarationListAssignment_1; }
		
		//StructDeclaratorList
		public RuleCall getStructDeclarationListStructDeclaratorListParserRuleCall_1_0() { return cStructDeclarationListStructDeclaratorListParserRuleCall_1_0; }
		
		//SKW_SEMI
		public RuleCall getSKW_SEMITerminalRuleCall_2() { return cSKW_SEMITerminalRuleCall_2; }
	}
	public class SpecifierQualifierListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.SpecifierQualifierList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSpecifierQualifierListAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cTypeSpecifierAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cTypeSpecifierTypeSpecifierParserRuleCall_1_0_0 = (RuleCall)cTypeSpecifierAssignment_1_0.eContents().get(0);
		private final Assignment cTypeQualifierAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cTypeQualifierTypeQualifierParserRuleCall_1_1_0 = (RuleCall)cTypeQualifierAssignment_1_1.eContents().get(0);
		
		//SpecifierQualifierList initRuleAction { at.jku.weiner.c.parser.utils.Log.log("In SpecifierQualifierList "); }:
		//	{SpecifierQualifierList} (typeSpecifier+=TypeSpecifier | typeQualifier+=TypeQualifier)+;
		@Override public ParserRule getRule() { return rule; }
		
		//{SpecifierQualifierList} (typeSpecifier+=TypeSpecifier | typeQualifier+=TypeQualifier)+
		public Group getGroup() { return cGroup; }
		
		//{SpecifierQualifierList}
		public Action getSpecifierQualifierListAction_0() { return cSpecifierQualifierListAction_0; }
		
		//(typeSpecifier+=TypeSpecifier | typeQualifier+=TypeQualifier)+
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//typeSpecifier+=TypeSpecifier
		public Assignment getTypeSpecifierAssignment_1_0() { return cTypeSpecifierAssignment_1_0; }
		
		//TypeSpecifier
		public RuleCall getTypeSpecifierTypeSpecifierParserRuleCall_1_0_0() { return cTypeSpecifierTypeSpecifierParserRuleCall_1_0_0; }
		
		//typeQualifier+=TypeQualifier
		public Assignment getTypeQualifierAssignment_1_1() { return cTypeQualifierAssignment_1_1; }
		
		//TypeQualifier
		public RuleCall getTypeQualifierTypeQualifierParserRuleCall_1_1_0() { return cTypeQualifierTypeQualifierParserRuleCall_1_1_0; }
	}
	public class StructDeclaratorListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.StructDeclaratorList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStructDeclaratorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStructDeclaratorStructDeclaratorParserRuleCall_0_0 = (RuleCall)cStructDeclaratorAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cSKW_COMMATerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cStructDeclaratorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStructDeclaratorStructDeclaratorParserRuleCall_1_1_0 = (RuleCall)cStructDeclaratorAssignment_1_1.eContents().get(0);
		
		//StructDeclaratorList:
		//	structDeclarator+=StructDeclarator (SKW_COMMA structDeclarator+=StructDeclarator)*;
		@Override public ParserRule getRule() { return rule; }
		
		//structDeclarator+=StructDeclarator (SKW_COMMA structDeclarator+=StructDeclarator)*
		public Group getGroup() { return cGroup; }
		
		//structDeclarator+=StructDeclarator
		public Assignment getStructDeclaratorAssignment_0() { return cStructDeclaratorAssignment_0; }
		
		//StructDeclarator
		public RuleCall getStructDeclaratorStructDeclaratorParserRuleCall_0_0() { return cStructDeclaratorStructDeclaratorParserRuleCall_0_0; }
		
		//(SKW_COMMA structDeclarator+=StructDeclarator)*
		public Group getGroup_1() { return cGroup_1; }
		
		//SKW_COMMA
		public RuleCall getSKW_COMMATerminalRuleCall_1_0() { return cSKW_COMMATerminalRuleCall_1_0; }
		
		//structDeclarator+=StructDeclarator
		public Assignment getStructDeclaratorAssignment_1_1() { return cStructDeclaratorAssignment_1_1; }
		
		//StructDeclarator
		public RuleCall getStructDeclaratorStructDeclaratorParserRuleCall_1_1_0() { return cStructDeclaratorStructDeclaratorParserRuleCall_1_1_0; }
	}
	public class StructDeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.StructDeclarator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cDeclaratorAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cDeclaratorDeclaratorParserRuleCall_0_0_0 = (RuleCall)cDeclaratorAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final RuleCall cSKW_COLONTerminalRuleCall_0_1_0 = (RuleCall)cGroup_0_1.eContents().get(0);
		private final Assignment cConstExprAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cConstExprConstantExpressionParserRuleCall_0_1_1_0 = (RuleCall)cConstExprAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cSKW_COLONTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cConstExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConstExprConstantExpressionParserRuleCall_1_1_0 = (RuleCall)cConstExprAssignment_1_1.eContents().get(0);
		
		//StructDeclarator:
		//	declarator=Declarator (SKW_COLON constExpr+=ConstantExpression)?
		//	| SKW_COLON constExpr+=ConstantExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//declarator=Declarator (SKW_COLON constExpr+=ConstantExpression)? | SKW_COLON constExpr+=ConstantExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//declarator=Declarator (SKW_COLON constExpr+=ConstantExpression)?
		public Group getGroup_0() { return cGroup_0; }
		
		//declarator=Declarator
		public Assignment getDeclaratorAssignment_0_0() { return cDeclaratorAssignment_0_0; }
		
		//Declarator
		public RuleCall getDeclaratorDeclaratorParserRuleCall_0_0_0() { return cDeclaratorDeclaratorParserRuleCall_0_0_0; }
		
		//(SKW_COLON constExpr+=ConstantExpression)?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//SKW_COLON
		public RuleCall getSKW_COLONTerminalRuleCall_0_1_0() { return cSKW_COLONTerminalRuleCall_0_1_0; }
		
		//constExpr+=ConstantExpression
		public Assignment getConstExprAssignment_0_1_1() { return cConstExprAssignment_0_1_1; }
		
		//ConstantExpression
		public RuleCall getConstExprConstantExpressionParserRuleCall_0_1_1_0() { return cConstExprConstantExpressionParserRuleCall_0_1_1_0; }
		
		//SKW_COLON constExpr+=ConstantExpression
		public Group getGroup_1() { return cGroup_1; }
		
		//SKW_COLON
		public RuleCall getSKW_COLONTerminalRuleCall_1_0() { return cSKW_COLONTerminalRuleCall_1_0; }
		
		//constExpr+=ConstantExpression
		public Assignment getConstExprAssignment_1_1() { return cConstExprAssignment_1_1; }
		
		//ConstantExpression
		public RuleCall getConstExprConstantExpressionParserRuleCall_1_1_0() { return cConstExprConstantExpressionParserRuleCall_1_1_0; }
	}
	public class EnumSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.EnumSpecifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnumSpecifierAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cKW_ENUMTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cSKW_LEFTBRACETerminalRuleCall_1_1_0_0 = (RuleCall)cGroup_1_1_0.eContents().get(0);
		private final Assignment cEnumListAssignment_1_1_0_1 = (Assignment)cGroup_1_1_0.eContents().get(1);
		private final RuleCall cEnumListEnumeratorListParserRuleCall_1_1_0_1_0 = (RuleCall)cEnumListAssignment_1_1_0_1.eContents().get(0);
		private final RuleCall cSKW_RIGHTBRACETerminalRuleCall_1_1_0_2 = (RuleCall)cGroup_1_1_0.eContents().get(2);
		private final Group cGroup_1_1_1 = (Group)cAlternatives_1_1.eContents().get(1);
		private final Assignment cIdAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_1_1_1_0_0 = (RuleCall)cIdAssignment_1_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1_1 = (Group)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cSKW_LEFTBRACETerminalRuleCall_1_1_1_1_0 = (RuleCall)cGroup_1_1_1_1.eContents().get(0);
		private final Assignment cEnumListAssignment_1_1_1_1_1 = (Assignment)cGroup_1_1_1_1.eContents().get(1);
		private final RuleCall cEnumListEnumeratorListParserRuleCall_1_1_1_1_1_0 = (RuleCall)cEnumListAssignment_1_1_1_1_1.eContents().get(0);
		private final RuleCall cSKW_RIGHTBRACETerminalRuleCall_1_1_1_1_2 = (RuleCall)cGroup_1_1_1_1.eContents().get(2);
		
		//EnumSpecifier DeclarationSpecifier:
		//	{EnumSpecifier} (KW_ENUM (SKW_LEFTBRACE enumList=EnumeratorList SKW_RIGHTBRACE
		//	| id=ID (SKW_LEFTBRACE enumList=EnumeratorList SKW_RIGHTBRACE)?))
		@Override public ParserRule getRule() { return rule; }
		
		//{EnumSpecifier} (KW_ENUM (SKW_LEFTBRACE enumList=EnumeratorList SKW_RIGHTBRACE | id=ID (SKW_LEFTBRACE
		//enumList=EnumeratorList SKW_RIGHTBRACE)?))
		public Group getGroup() { return cGroup; }
		
		//{EnumSpecifier}
		public Action getEnumSpecifierAction_0() { return cEnumSpecifierAction_0; }
		
		//(KW_ENUM (SKW_LEFTBRACE enumList=EnumeratorList SKW_RIGHTBRACE | id=ID (SKW_LEFTBRACE enumList=EnumeratorList
		//SKW_RIGHTBRACE)?))
		public Group getGroup_1() { return cGroup_1; }
		
		//KW_ENUM
		public RuleCall getKW_ENUMTerminalRuleCall_1_0() { return cKW_ENUMTerminalRuleCall_1_0; }
		
		//(SKW_LEFTBRACE enumList=EnumeratorList SKW_RIGHTBRACE | id=ID (SKW_LEFTBRACE enumList=EnumeratorList SKW_RIGHTBRACE)?)
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//SKW_LEFTBRACE enumList=EnumeratorList SKW_RIGHTBRACE
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }
		
		//SKW_LEFTBRACE
		public RuleCall getSKW_LEFTBRACETerminalRuleCall_1_1_0_0() { return cSKW_LEFTBRACETerminalRuleCall_1_1_0_0; }
		
		//enumList=EnumeratorList
		public Assignment getEnumListAssignment_1_1_0_1() { return cEnumListAssignment_1_1_0_1; }
		
		//EnumeratorList
		public RuleCall getEnumListEnumeratorListParserRuleCall_1_1_0_1_0() { return cEnumListEnumeratorListParserRuleCall_1_1_0_1_0; }
		
		//SKW_RIGHTBRACE
		public RuleCall getSKW_RIGHTBRACETerminalRuleCall_1_1_0_2() { return cSKW_RIGHTBRACETerminalRuleCall_1_1_0_2; }
		
		//id=ID (SKW_LEFTBRACE enumList=EnumeratorList SKW_RIGHTBRACE)?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//id=ID
		public Assignment getIdAssignment_1_1_1_0() { return cIdAssignment_1_1_1_0; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_1_1_0_0() { return cIdIDTerminalRuleCall_1_1_1_0_0; }
		
		//(SKW_LEFTBRACE enumList=EnumeratorList SKW_RIGHTBRACE)?
		public Group getGroup_1_1_1_1() { return cGroup_1_1_1_1; }
		
		//SKW_LEFTBRACE
		public RuleCall getSKW_LEFTBRACETerminalRuleCall_1_1_1_1_0() { return cSKW_LEFTBRACETerminalRuleCall_1_1_1_1_0; }
		
		//enumList=EnumeratorList
		public Assignment getEnumListAssignment_1_1_1_1_1() { return cEnumListAssignment_1_1_1_1_1; }
		
		//EnumeratorList
		public RuleCall getEnumListEnumeratorListParserRuleCall_1_1_1_1_1_0() { return cEnumListEnumeratorListParserRuleCall_1_1_1_1_1_0; }
		
		//SKW_RIGHTBRACE
		public RuleCall getSKW_RIGHTBRACETerminalRuleCall_1_1_1_1_2() { return cSKW_RIGHTBRACETerminalRuleCall_1_1_1_1_2; }
	}
	public class EnumeratorListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.EnumeratorList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEnumeratorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEnumeratorEnumeratorParserRuleCall_0_0 = (RuleCall)cEnumeratorAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cSKW_COMMATerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cEnumeratorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEnumeratorEnumeratorParserRuleCall_1_1_0 = (RuleCall)cEnumeratorAssignment_1_1.eContents().get(0);
		private final Assignment cLastCommaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLastCommaSKW_COMMATerminalRuleCall_2_0 = (RuleCall)cLastCommaAssignment_2.eContents().get(0);
		
		//EnumeratorList:
		//	enumerator+=Enumerator (SKW_COMMA enumerator+=Enumerator)*
		//	lastComma?=SKW_COMMA?;
		@Override public ParserRule getRule() { return rule; }
		
		//enumerator+=Enumerator (SKW_COMMA enumerator+=Enumerator)* lastComma?=SKW_COMMA?
		public Group getGroup() { return cGroup; }
		
		//enumerator+=Enumerator
		public Assignment getEnumeratorAssignment_0() { return cEnumeratorAssignment_0; }
		
		//Enumerator
		public RuleCall getEnumeratorEnumeratorParserRuleCall_0_0() { return cEnumeratorEnumeratorParserRuleCall_0_0; }
		
		//(SKW_COMMA enumerator+=Enumerator)*
		public Group getGroup_1() { return cGroup_1; }
		
		//SKW_COMMA
		public RuleCall getSKW_COMMATerminalRuleCall_1_0() { return cSKW_COMMATerminalRuleCall_1_0; }
		
		//enumerator+=Enumerator
		public Assignment getEnumeratorAssignment_1_1() { return cEnumeratorAssignment_1_1; }
		
		//Enumerator
		public RuleCall getEnumeratorEnumeratorParserRuleCall_1_1_0() { return cEnumeratorEnumeratorParserRuleCall_1_1_0; }
		
		//lastComma?=SKW_COMMA?
		public Assignment getLastCommaAssignment_2() { return cLastCommaAssignment_2; }
		
		//SKW_COMMA
		public RuleCall getLastCommaSKW_COMMATerminalRuleCall_2_0() { return cLastCommaSKW_COMMATerminalRuleCall_2_0; }
	}
	public class EnumeratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.Enumerator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnumeratorAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cSKW_ASSIGNTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprConstantExpressionParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		
		//Enumerator:
		//	{Enumerator} id=ID (SKW_ASSIGN expr=ConstantExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Enumerator} id=ID (SKW_ASSIGN expr=ConstantExpression)?
		public Group getGroup() { return cGroup; }
		
		//{Enumerator}
		public Action getEnumeratorAction_0() { return cEnumeratorAction_0; }
		
		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }
		
		//(SKW_ASSIGN expr=ConstantExpression)?
		public Group getGroup_2() { return cGroup_2; }
		
		//SKW_ASSIGN
		public RuleCall getSKW_ASSIGNTerminalRuleCall_2_0() { return cSKW_ASSIGNTerminalRuleCall_2_0; }
		
		//expr=ConstantExpression
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }
		
		//ConstantExpression
		public RuleCall getExprConstantExpressionParserRuleCall_2_1_0() { return cExprConstantExpressionParserRuleCall_2_1_0; }
	}
	public class TypeQualifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.TypeQualifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypeQualifierAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cTypeKW_CONSTTerminalRuleCall_1_0_0 = (RuleCall)cTypeAssignment_1_0.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cTypeKW_RESTRICTTerminalRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cTypeKW_RESTRICT2TerminalRuleCall_1_2_0 = (RuleCall)cTypeAssignment_1_2.eContents().get(0);
		private final Assignment cTypeAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cTypeKW_RESTRICT3TerminalRuleCall_1_3_0 = (RuleCall)cTypeAssignment_1_3.eContents().get(0);
		private final Assignment cTypeAssignment_1_4 = (Assignment)cAlternatives_1.eContents().get(4);
		private final RuleCall cTypeKW_VOLATILETerminalRuleCall_1_4_0 = (RuleCall)cTypeAssignment_1_4.eContents().get(0);
		private final Assignment cTypeAssignment_1_5 = (Assignment)cAlternatives_1.eContents().get(5);
		private final RuleCall cTypeKW_ATOMICTerminalRuleCall_1_5_0 = (RuleCall)cTypeAssignment_1_5.eContents().get(0);
		
		/// *
		//atomicTypeSpecifier returns declarationSpecifier:
		//	ATOMIC LEFTPAREN typeName RIGHTPAREN
		//;
		// * / TypeQualifier:
		//	{TypeQualifier} (type=KW_CONST
		//	| type=KW_RESTRICT
		//	| type=KW_RESTRICT2
		//	| type=KW_RESTRICT3
		//	| type=KW_VOLATILE
		//	| type=KW_ATOMIC);
		@Override public ParserRule getRule() { return rule; }
		
		//{TypeQualifier} (type=KW_CONST | type=KW_RESTRICT | type=KW_RESTRICT2 | type=KW_RESTRICT3 | type=KW_VOLATILE |
		//type=KW_ATOMIC)
		public Group getGroup() { return cGroup; }
		
		//{TypeQualifier}
		public Action getTypeQualifierAction_0() { return cTypeQualifierAction_0; }
		
		//(type=KW_CONST | type=KW_RESTRICT | type=KW_RESTRICT2 | type=KW_RESTRICT3 | type=KW_VOLATILE | type=KW_ATOMIC)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//type=KW_CONST
		public Assignment getTypeAssignment_1_0() { return cTypeAssignment_1_0; }
		
		//KW_CONST
		public RuleCall getTypeKW_CONSTTerminalRuleCall_1_0_0() { return cTypeKW_CONSTTerminalRuleCall_1_0_0; }
		
		//type=KW_RESTRICT
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//KW_RESTRICT
		public RuleCall getTypeKW_RESTRICTTerminalRuleCall_1_1_0() { return cTypeKW_RESTRICTTerminalRuleCall_1_1_0; }
		
		//type=KW_RESTRICT2
		public Assignment getTypeAssignment_1_2() { return cTypeAssignment_1_2; }
		
		//KW_RESTRICT2
		public RuleCall getTypeKW_RESTRICT2TerminalRuleCall_1_2_0() { return cTypeKW_RESTRICT2TerminalRuleCall_1_2_0; }
		
		//type=KW_RESTRICT3
		public Assignment getTypeAssignment_1_3() { return cTypeAssignment_1_3; }
		
		//KW_RESTRICT3
		public RuleCall getTypeKW_RESTRICT3TerminalRuleCall_1_3_0() { return cTypeKW_RESTRICT3TerminalRuleCall_1_3_0; }
		
		//type=KW_VOLATILE
		public Assignment getTypeAssignment_1_4() { return cTypeAssignment_1_4; }
		
		//KW_VOLATILE
		public RuleCall getTypeKW_VOLATILETerminalRuleCall_1_4_0() { return cTypeKW_VOLATILETerminalRuleCall_1_4_0; }
		
		//type=KW_ATOMIC
		public Assignment getTypeAssignment_1_5() { return cTypeAssignment_1_5; }
		
		//KW_ATOMIC
		public RuleCall getTypeKW_ATOMICTerminalRuleCall_1_5_0() { return cTypeKW_ATOMICTerminalRuleCall_1_5_0; }
	}
	public class FunctionSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.FunctionSpecifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionSpecifierAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cAlternatives_1.eContents().get(0);
		private final Assignment cNameAssignment_1_0_0 = (Assignment)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cNameKW_INLINE1TerminalRuleCall_1_0_0_0 = (RuleCall)cNameAssignment_1_0_0.eContents().get(0);
		private final Assignment cNameAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cNameKW_INLINE2TerminalRuleCall_1_0_1_0 = (RuleCall)cNameAssignment_1_0_1.eContents().get(0);
		private final Assignment cNameAssignment_1_0_2 = (Assignment)cAlternatives_1_0.eContents().get(2);
		private final RuleCall cNameKW_INLINE3TerminalRuleCall_1_0_2_0 = (RuleCall)cNameAssignment_1_0_2.eContents().get(0);
		private final Assignment cNameAssignment_1_0_3 = (Assignment)cAlternatives_1_0.eContents().get(3);
		private final RuleCall cNameKW_NORETURNTerminalRuleCall_1_0_3_0 = (RuleCall)cNameAssignment_1_0_3.eContents().get(0);
		private final Assignment cGccAttributeSpecifierAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cGccAttributeSpecifierGccAttributeSpecifierParserRuleCall_1_1_0 = (RuleCall)cGccAttributeSpecifierAssignment_1_1.eContents().get(0);
		
		//FunctionSpecifier:
		//	{FunctionSpecifier} ((name=KW_INLINE1
		//	| name=KW_INLINE2 // GCC extension
		//	| name=KW_INLINE3 // GCC extension?
		//	| name=KW_NORETURN
		//	//|	'__stdcall'
		//) | gccAttributeSpecifier=GccAttributeSpecifier
		//	//|	'__declspec' LEFTPAREN IDENTIFIER RIGHTPAREN
		//);
		@Override public ParserRule getRule() { return rule; }
		
		//{FunctionSpecifier} ((name=KW_INLINE1 | name=KW_INLINE2 // GCC extension
		//| name=KW_INLINE3 // GCC extension?
		//| name=KW_NORETURN //|	'__stdcall'
		//) | gccAttributeSpecifier=GccAttributeSpecifier //|	'__declspec' LEFTPAREN IDENTIFIER RIGHTPAREN
		//)
		public Group getGroup() { return cGroup; }
		
		//{FunctionSpecifier}
		public Action getFunctionSpecifierAction_0() { return cFunctionSpecifierAction_0; }
		
		//((name=KW_INLINE1 | name=KW_INLINE2 // GCC extension
		//| name=KW_INLINE3 // GCC extension?
		//| name=KW_NORETURN //|	'__stdcall'
		//) | gccAttributeSpecifier=GccAttributeSpecifier //|	'__declspec' LEFTPAREN IDENTIFIER RIGHTPAREN
		//)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//(name=KW_INLINE1 | name=KW_INLINE2 // GCC extension
		//| name=KW_INLINE3 // GCC extension?
		//| name=KW_NORETURN //|	'__stdcall'
		//)
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//name=KW_INLINE1
		public Assignment getNameAssignment_1_0_0() { return cNameAssignment_1_0_0; }
		
		//KW_INLINE1
		public RuleCall getNameKW_INLINE1TerminalRuleCall_1_0_0_0() { return cNameKW_INLINE1TerminalRuleCall_1_0_0_0; }
		
		//name=KW_INLINE2
		public Assignment getNameAssignment_1_0_1() { return cNameAssignment_1_0_1; }
		
		//KW_INLINE2
		public RuleCall getNameKW_INLINE2TerminalRuleCall_1_0_1_0() { return cNameKW_INLINE2TerminalRuleCall_1_0_1_0; }
		
		//name=KW_INLINE3
		public Assignment getNameAssignment_1_0_2() { return cNameAssignment_1_0_2; }
		
		//KW_INLINE3
		public RuleCall getNameKW_INLINE3TerminalRuleCall_1_0_2_0() { return cNameKW_INLINE3TerminalRuleCall_1_0_2_0; }
		
		//name=KW_NORETURN
		public Assignment getNameAssignment_1_0_3() { return cNameAssignment_1_0_3; }
		
		//KW_NORETURN
		public RuleCall getNameKW_NORETURNTerminalRuleCall_1_0_3_0() { return cNameKW_NORETURNTerminalRuleCall_1_0_3_0; }
		
		//gccAttributeSpecifier=GccAttributeSpecifier
		public Assignment getGccAttributeSpecifierAssignment_1_1() { return cGccAttributeSpecifierAssignment_1_1; }
		
		//GccAttributeSpecifier
		public RuleCall getGccAttributeSpecifierGccAttributeSpecifierParserRuleCall_1_1_0() { return cGccAttributeSpecifierGccAttributeSpecifierParserRuleCall_1_1_0; }
	}
	public class DeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.Declarator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeclaratorAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPointerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPointerPointerParserRuleCall_1_0 = (RuleCall)cPointerAssignment_1.eContents().get(0);
		private final Assignment cGccDeclExt1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGccDeclExt1GccDeclaratorExtensionParserRuleCall_2_0 = (RuleCall)cGccDeclExt1Assignment_2.eContents().get(0);
		private final Assignment cDeclaratorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeclaratorDirectDeclaratorParserRuleCall_3_0 = (RuleCall)cDeclaratorAssignment_3.eContents().get(0);
		private final Assignment cGccDeclExt2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGccDeclExt2GccDeclaratorExtensionParserRuleCall_4_0 = (RuleCall)cGccDeclExt2Assignment_4.eContents().get(0);
		
		/// *
		//alignmentSpecifier: ALIGNAS LEFTPAREN (typeName | constantExpression) RIGHTPAREN;
		// * / Declarator:
		//	{Declarator} pointer=Pointer?
		//	gccDeclExt1+=GccDeclaratorExtension*
		//	declarator=DirectDeclarator gccDeclExt2+=GccDeclaratorExtension*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Declarator} pointer=Pointer? gccDeclExt1+=GccDeclaratorExtension* declarator=DirectDeclarator
		//gccDeclExt2+=GccDeclaratorExtension*
		public Group getGroup() { return cGroup; }
		
		//{Declarator}
		public Action getDeclaratorAction_0() { return cDeclaratorAction_0; }
		
		//pointer=Pointer?
		public Assignment getPointerAssignment_1() { return cPointerAssignment_1; }
		
		//Pointer
		public RuleCall getPointerPointerParserRuleCall_1_0() { return cPointerPointerParserRuleCall_1_0; }
		
		//gccDeclExt1+=GccDeclaratorExtension*
		public Assignment getGccDeclExt1Assignment_2() { return cGccDeclExt1Assignment_2; }
		
		//GccDeclaratorExtension
		public RuleCall getGccDeclExt1GccDeclaratorExtensionParserRuleCall_2_0() { return cGccDeclExt1GccDeclaratorExtensionParserRuleCall_2_0; }
		
		//declarator=DirectDeclarator
		public Assignment getDeclaratorAssignment_3() { return cDeclaratorAssignment_3; }
		
		//DirectDeclarator
		public RuleCall getDeclaratorDirectDeclaratorParserRuleCall_3_0() { return cDeclaratorDirectDeclaratorParserRuleCall_3_0; }
		
		//gccDeclExt2+=GccDeclaratorExtension*
		public Assignment getGccDeclExt2Assignment_4() { return cGccDeclExt2Assignment_4; }
		
		//GccDeclaratorExtension
		public RuleCall getGccDeclExt2GccDeclaratorExtensionParserRuleCall_4_0() { return cGccDeclExt2GccDeclaratorExtensionParserRuleCall_4_0; }
	}
	public class DirectDeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.DirectDeclarator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDirectDeclaratorAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_1_0_0 = (RuleCall)cIdAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cSKW_LEFTPARENTerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Assignment cDeclaratorAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cDeclaratorDeclaratorParserRuleCall_1_1_1_0 = (RuleCall)cDeclaratorAssignment_1_1_1.eContents().get(0);
		private final RuleCall cSKW_RIGHTPARENTerminalRuleCall_1_1_2 = (RuleCall)cGroup_1_1.eContents().get(2);
		private final Assignment cDeclaratorSuffixAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclaratorSuffixDeclaratorSuffixParserRuleCall_2_0 = (RuleCall)cDeclaratorSuffixAssignment_2.eContents().get(0);
		
		//DirectDeclarator:
		//	{DirectDeclarator} (id=ID
		//	preAction{ { at.jku.weiner.c.parser.utils.Scope.setTemp(input);
		//	} } postAction{ { at.jku.weiner.c.parser.utils.Scope.addTypedefIfIsTypedef();
		//	} } | SKW_LEFTPAREN declarator=Declarator SKW_RIGHTPAREN) declaratorSuffix+=DeclaratorSuffix*;
		@Override public ParserRule getRule() { return rule; }
		
		//{DirectDeclarator} (id=ID preAction{ { at.jku.weiner.c.parser.utils.Scope.setTemp(input); } } postAction{ {
		//at.jku.weiner.c.parser.utils.Scope.addTypedefIfIsTypedef(); } } | SKW_LEFTPAREN declarator=Declarator SKW_RIGHTPAREN)
		//declaratorSuffix+=DeclaratorSuffix*
		public Group getGroup() { return cGroup; }
		
		//{DirectDeclarator}
		public Action getDirectDeclaratorAction_0() { return cDirectDeclaratorAction_0; }
		
		//(id=ID preAction{ { at.jku.weiner.c.parser.utils.Scope.setTemp(input); } } postAction{ {
		//at.jku.weiner.c.parser.utils.Scope.addTypedefIfIsTypedef(); } } | SKW_LEFTPAREN declarator=Declarator SKW_RIGHTPAREN)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//id=ID preAction{ { at.jku.weiner.c.parser.utils.Scope.setTemp(input); } } postAction{ {
		//at.jku.weiner.c.parser.utils.Scope.addTypedefIfIsTypedef(); } }
		public Assignment getIdAssignment_1_0() { return cIdAssignment_1_0; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0_0() { return cIdIDTerminalRuleCall_1_0_0; }
		
		//SKW_LEFTPAREN declarator=Declarator SKW_RIGHTPAREN
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//SKW_LEFTPAREN
		public RuleCall getSKW_LEFTPARENTerminalRuleCall_1_1_0() { return cSKW_LEFTPARENTerminalRuleCall_1_1_0; }
		
		//declarator=Declarator
		public Assignment getDeclaratorAssignment_1_1_1() { return cDeclaratorAssignment_1_1_1; }
		
		//Declarator
		public RuleCall getDeclaratorDeclaratorParserRuleCall_1_1_1_0() { return cDeclaratorDeclaratorParserRuleCall_1_1_1_0; }
		
		//SKW_RIGHTPAREN
		public RuleCall getSKW_RIGHTPARENTerminalRuleCall_1_1_2() { return cSKW_RIGHTPARENTerminalRuleCall_1_1_2; }
		
		//declaratorSuffix+=DeclaratorSuffix*
		public Assignment getDeclaratorSuffixAssignment_2() { return cDeclaratorSuffixAssignment_2; }
		
		//DeclaratorSuffix
		public RuleCall getDeclaratorSuffixDeclaratorSuffixParserRuleCall_2_0() { return cDeclaratorSuffixDeclaratorSuffixParserRuleCall_2_0; }
	}
	public class DeclaratorSuffixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.DeclaratorSuffix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeclaratorSuffixAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cSKW_LEFTBRACKETTerminalRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Assignment cTypeQualifierListAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cTypeQualifierListTypeQualifierListParserRuleCall_1_0_1_0 = (RuleCall)cTypeQualifierListAssignment_1_0_1.eContents().get(0);
		private final Assignment cExprAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cExprAssignmentExpressionParserRuleCall_1_0_2_0 = (RuleCall)cExprAssignment_1_0_2.eContents().get(0);
		private final RuleCall cSKW_RIGHTBRACKETTerminalRuleCall_1_0_3 = (RuleCall)cGroup_1_0.eContents().get(3);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cSKW_LEFTBRACKETTerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Assignment cStaticAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cStaticKW_STATICTerminalRuleCall_1_1_1_0 = (RuleCall)cStaticAssignment_1_1_1.eContents().get(0);
		private final Assignment cTypeQualifierListAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cTypeQualifierListTypeQualifierListParserRuleCall_1_1_2_0 = (RuleCall)cTypeQualifierListAssignment_1_1_2.eContents().get(0);
		private final Assignment cExprAssignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final RuleCall cExprAssignmentExpressionParserRuleCall_1_1_3_0 = (RuleCall)cExprAssignment_1_1_3.eContents().get(0);
		private final RuleCall cSKW_RIGHTBRACKETTerminalRuleCall_1_1_4 = (RuleCall)cGroup_1_1.eContents().get(4);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final RuleCall cSKW_LEFTBRACKETTerminalRuleCall_1_2_0 = (RuleCall)cGroup_1_2.eContents().get(0);
		private final Assignment cTypeQualifierListAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cTypeQualifierListTypeQualifierListParserRuleCall_1_2_1_0 = (RuleCall)cTypeQualifierListAssignment_1_2_1.eContents().get(0);
		private final Assignment cStaticAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cStaticKW_STATICTerminalRuleCall_1_2_2_0 = (RuleCall)cStaticAssignment_1_2_2.eContents().get(0);
		private final Assignment cExprAssignment_1_2_3 = (Assignment)cGroup_1_2.eContents().get(3);
		private final RuleCall cExprAssignmentExpressionParserRuleCall_1_2_3_0 = (RuleCall)cExprAssignment_1_2_3.eContents().get(0);
		private final RuleCall cSKW_RIGHTBRACKETTerminalRuleCall_1_2_4 = (RuleCall)cGroup_1_2.eContents().get(4);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final RuleCall cSKW_LEFTBRACKETTerminalRuleCall_1_3_0 = (RuleCall)cGroup_1_3.eContents().get(0);
		private final Assignment cTypeQualifierListAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cTypeQualifierListTypeQualifierListParserRuleCall_1_3_1_0 = (RuleCall)cTypeQualifierListAssignment_1_3_1.eContents().get(0);
		private final Assignment cStarAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cStarSKW_STARTerminalRuleCall_1_3_2_0 = (RuleCall)cStarAssignment_1_3_2.eContents().get(0);
		private final RuleCall cSKW_RIGHTBRACKETTerminalRuleCall_1_3_3 = (RuleCall)cGroup_1_3.eContents().get(3);
		private final Assignment cLastSuffixAssignment_1_4 = (Assignment)cAlternatives_1.eContents().get(4);
		private final RuleCall cLastSuffixDirectDeclaratorLastSuffixParserRuleCall_1_4_0 = (RuleCall)cLastSuffixAssignment_1_4.eContents().get(0);
		
		//DeclaratorSuffix:
		//	{DeclaratorSuffix} (SKW_LEFTBRACKET typeQualifierList=TypeQualifierList?
		//	expr=AssignmentExpression? SKW_RIGHTBRACKET
		//	| SKW_LEFTBRACKET static=KW_STATIC typeQualifierList=TypeQualifierList?
		//	expr=AssignmentExpression SKW_RIGHTBRACKET
		//	| SKW_LEFTBRACKET typeQualifierList=TypeQualifierList static=KW_STATIC
		//	expr=AssignmentExpression SKW_RIGHTBRACKET
		//	| SKW_LEFTBRACKET typeQualifierList=TypeQualifierList? star=SKW_STAR SKW_RIGHTBRACKET
		//	| lastSuffix=DirectDeclaratorLastSuffix);
		@Override public ParserRule getRule() { return rule; }
		
		//{DeclaratorSuffix} (SKW_LEFTBRACKET typeQualifierList=TypeQualifierList? expr=AssignmentExpression? SKW_RIGHTBRACKET |
		//SKW_LEFTBRACKET static=KW_STATIC typeQualifierList=TypeQualifierList? expr=AssignmentExpression SKW_RIGHTBRACKET |
		//SKW_LEFTBRACKET typeQualifierList=TypeQualifierList static=KW_STATIC expr=AssignmentExpression SKW_RIGHTBRACKET |
		//SKW_LEFTBRACKET typeQualifierList=TypeQualifierList? star=SKW_STAR SKW_RIGHTBRACKET |
		//lastSuffix=DirectDeclaratorLastSuffix)
		public Group getGroup() { return cGroup; }
		
		//{DeclaratorSuffix}
		public Action getDeclaratorSuffixAction_0() { return cDeclaratorSuffixAction_0; }
		
		//(SKW_LEFTBRACKET typeQualifierList=TypeQualifierList? expr=AssignmentExpression? SKW_RIGHTBRACKET | SKW_LEFTBRACKET
		//static=KW_STATIC typeQualifierList=TypeQualifierList? expr=AssignmentExpression SKW_RIGHTBRACKET | SKW_LEFTBRACKET
		//typeQualifierList=TypeQualifierList static=KW_STATIC expr=AssignmentExpression SKW_RIGHTBRACKET | SKW_LEFTBRACKET
		//typeQualifierList=TypeQualifierList? star=SKW_STAR SKW_RIGHTBRACKET | lastSuffix=DirectDeclaratorLastSuffix)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//SKW_LEFTBRACKET typeQualifierList=TypeQualifierList? expr=AssignmentExpression? SKW_RIGHTBRACKET
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//SKW_LEFTBRACKET
		public RuleCall getSKW_LEFTBRACKETTerminalRuleCall_1_0_0() { return cSKW_LEFTBRACKETTerminalRuleCall_1_0_0; }
		
		//typeQualifierList=TypeQualifierList?
		public Assignment getTypeQualifierListAssignment_1_0_1() { return cTypeQualifierListAssignment_1_0_1; }
		
		//TypeQualifierList
		public RuleCall getTypeQualifierListTypeQualifierListParserRuleCall_1_0_1_0() { return cTypeQualifierListTypeQualifierListParserRuleCall_1_0_1_0; }
		
		//expr=AssignmentExpression?
		public Assignment getExprAssignment_1_0_2() { return cExprAssignment_1_0_2; }
		
		//AssignmentExpression
		public RuleCall getExprAssignmentExpressionParserRuleCall_1_0_2_0() { return cExprAssignmentExpressionParserRuleCall_1_0_2_0; }
		
		//SKW_RIGHTBRACKET
		public RuleCall getSKW_RIGHTBRACKETTerminalRuleCall_1_0_3() { return cSKW_RIGHTBRACKETTerminalRuleCall_1_0_3; }
		
		//SKW_LEFTBRACKET static=KW_STATIC typeQualifierList=TypeQualifierList? expr=AssignmentExpression SKW_RIGHTBRACKET
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//SKW_LEFTBRACKET
		public RuleCall getSKW_LEFTBRACKETTerminalRuleCall_1_1_0() { return cSKW_LEFTBRACKETTerminalRuleCall_1_1_0; }
		
		//static=KW_STATIC
		public Assignment getStaticAssignment_1_1_1() { return cStaticAssignment_1_1_1; }
		
		//KW_STATIC
		public RuleCall getStaticKW_STATICTerminalRuleCall_1_1_1_0() { return cStaticKW_STATICTerminalRuleCall_1_1_1_0; }
		
		//typeQualifierList=TypeQualifierList?
		public Assignment getTypeQualifierListAssignment_1_1_2() { return cTypeQualifierListAssignment_1_1_2; }
		
		//TypeQualifierList
		public RuleCall getTypeQualifierListTypeQualifierListParserRuleCall_1_1_2_0() { return cTypeQualifierListTypeQualifierListParserRuleCall_1_1_2_0; }
		
		//expr=AssignmentExpression
		public Assignment getExprAssignment_1_1_3() { return cExprAssignment_1_1_3; }
		
		//AssignmentExpression
		public RuleCall getExprAssignmentExpressionParserRuleCall_1_1_3_0() { return cExprAssignmentExpressionParserRuleCall_1_1_3_0; }
		
		//SKW_RIGHTBRACKET
		public RuleCall getSKW_RIGHTBRACKETTerminalRuleCall_1_1_4() { return cSKW_RIGHTBRACKETTerminalRuleCall_1_1_4; }
		
		//SKW_LEFTBRACKET typeQualifierList=TypeQualifierList static=KW_STATIC expr=AssignmentExpression SKW_RIGHTBRACKET
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//SKW_LEFTBRACKET
		public RuleCall getSKW_LEFTBRACKETTerminalRuleCall_1_2_0() { return cSKW_LEFTBRACKETTerminalRuleCall_1_2_0; }
		
		//typeQualifierList=TypeQualifierList
		public Assignment getTypeQualifierListAssignment_1_2_1() { return cTypeQualifierListAssignment_1_2_1; }
		
		//TypeQualifierList
		public RuleCall getTypeQualifierListTypeQualifierListParserRuleCall_1_2_1_0() { return cTypeQualifierListTypeQualifierListParserRuleCall_1_2_1_0; }
		
		//static=KW_STATIC
		public Assignment getStaticAssignment_1_2_2() { return cStaticAssignment_1_2_2; }
		
		//KW_STATIC
		public RuleCall getStaticKW_STATICTerminalRuleCall_1_2_2_0() { return cStaticKW_STATICTerminalRuleCall_1_2_2_0; }
		
		//expr=AssignmentExpression
		public Assignment getExprAssignment_1_2_3() { return cExprAssignment_1_2_3; }
		
		//AssignmentExpression
		public RuleCall getExprAssignmentExpressionParserRuleCall_1_2_3_0() { return cExprAssignmentExpressionParserRuleCall_1_2_3_0; }
		
		//SKW_RIGHTBRACKET
		public RuleCall getSKW_RIGHTBRACKETTerminalRuleCall_1_2_4() { return cSKW_RIGHTBRACKETTerminalRuleCall_1_2_4; }
		
		//SKW_LEFTBRACKET typeQualifierList=TypeQualifierList? star=SKW_STAR SKW_RIGHTBRACKET
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//SKW_LEFTBRACKET
		public RuleCall getSKW_LEFTBRACKETTerminalRuleCall_1_3_0() { return cSKW_LEFTBRACKETTerminalRuleCall_1_3_0; }
		
		//typeQualifierList=TypeQualifierList?
		public Assignment getTypeQualifierListAssignment_1_3_1() { return cTypeQualifierListAssignment_1_3_1; }
		
		//TypeQualifierList
		public RuleCall getTypeQualifierListTypeQualifierListParserRuleCall_1_3_1_0() { return cTypeQualifierListTypeQualifierListParserRuleCall_1_3_1_0; }
		
		//star=SKW_STAR
		public Assignment getStarAssignment_1_3_2() { return cStarAssignment_1_3_2; }
		
		//SKW_STAR
		public RuleCall getStarSKW_STARTerminalRuleCall_1_3_2_0() { return cStarSKW_STARTerminalRuleCall_1_3_2_0; }
		
		//SKW_RIGHTBRACKET
		public RuleCall getSKW_RIGHTBRACKETTerminalRuleCall_1_3_3() { return cSKW_RIGHTBRACKETTerminalRuleCall_1_3_3; }
		
		//lastSuffix=DirectDeclaratorLastSuffix
		public Assignment getLastSuffixAssignment_1_4() { return cLastSuffixAssignment_1_4; }
		
		//DirectDeclaratorLastSuffix
		public RuleCall getLastSuffixDirectDeclaratorLastSuffixParserRuleCall_1_4_0() { return cLastSuffixDirectDeclaratorLastSuffixParserRuleCall_1_4_0; }
	}
	public class DirectDeclaratorLastSuffixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.DirectDeclaratorLastSuffix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDirectDeclaratorLastSuffixAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cSKW_LEFTPARENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cParameterTypeListAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cParameterTypeListParameterTypeListParserRuleCall_2_0_0 = (RuleCall)cParameterTypeListAssignment_2_0.eContents().get(0);
		private final Assignment cIdentifierListAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cIdentifierListIdentifierListParserRuleCall_2_1_0 = (RuleCall)cIdentifierListAssignment_2_1.eContents().get(0);
		private final RuleCall cSKW_RIGHTPARENTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//DirectDeclaratorLastSuffix:
		//	{DirectDeclaratorLastSuffix} SKW_LEFTPAREN (parameterTypeList+=ParameterTypeList | identifierList=IdentifierList?)
		//	SKW_RIGHTPAREN;
		@Override public ParserRule getRule() { return rule; }
		
		//{DirectDeclaratorLastSuffix} SKW_LEFTPAREN (parameterTypeList+=ParameterTypeList | identifierList=IdentifierList?)
		//SKW_RIGHTPAREN
		public Group getGroup() { return cGroup; }
		
		//{DirectDeclaratorLastSuffix}
		public Action getDirectDeclaratorLastSuffixAction_0() { return cDirectDeclaratorLastSuffixAction_0; }
		
		//SKW_LEFTPAREN
		public RuleCall getSKW_LEFTPARENTerminalRuleCall_1() { return cSKW_LEFTPARENTerminalRuleCall_1; }
		
		//(parameterTypeList+=ParameterTypeList | identifierList=IdentifierList?)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//parameterTypeList+=ParameterTypeList
		public Assignment getParameterTypeListAssignment_2_0() { return cParameterTypeListAssignment_2_0; }
		
		//ParameterTypeList
		public RuleCall getParameterTypeListParameterTypeListParserRuleCall_2_0_0() { return cParameterTypeListParameterTypeListParserRuleCall_2_0_0; }
		
		//identifierList=IdentifierList?
		public Assignment getIdentifierListAssignment_2_1() { return cIdentifierListAssignment_2_1; }
		
		//IdentifierList
		public RuleCall getIdentifierListIdentifierListParserRuleCall_2_1_0() { return cIdentifierListIdentifierListParserRuleCall_2_1_0; }
		
		//SKW_RIGHTPAREN
		public RuleCall getSKW_RIGHTPARENTerminalRuleCall_3() { return cSKW_RIGHTPARENTerminalRuleCall_3; }
	}
	public class GccDeclaratorExtensionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.GccDeclaratorExtension");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGccDeclaratorExtensionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cAsmAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Alternatives cAsmAlternatives_1_0_0_0 = (Alternatives)cAsmAssignment_1_0_0.eContents().get(0);
		private final RuleCall cAsmKW_ASM1TerminalRuleCall_1_0_0_0_0 = (RuleCall)cAsmAlternatives_1_0_0_0.eContents().get(0);
		private final RuleCall cAsmKW_ASM2TerminalRuleCall_1_0_0_0_1 = (RuleCall)cAsmAlternatives_1_0_0_0.eContents().get(1);
		private final RuleCall cAsmKW_ASM3TerminalRuleCall_1_0_0_0_2 = (RuleCall)cAsmAlternatives_1_0_0_0.eContents().get(2);
		private final RuleCall cSKW_LEFTPARENTerminalRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Assignment cStringAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cStringSTRING_LITERALTerminalRuleCall_1_0_2_0 = (RuleCall)cStringAssignment_1_0_2.eContents().get(0);
		private final RuleCall cSKW_RIGHTPARENTerminalRuleCall_1_0_3 = (RuleCall)cGroup_1_0.eContents().get(3);
		private final Assignment cGccAttributeSpecifierAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cGccAttributeSpecifierGccAttributeSpecifierParserRuleCall_1_1_0 = (RuleCall)cGccAttributeSpecifierAssignment_1_1.eContents().get(0);
		
		//GccDeclaratorExtension:
		//	{GccDeclaratorExtension} (asm=(KW_ASM1 | KW_ASM2 | KW_ASM3) SKW_LEFTPAREN string+=STRING_LITERAL+ SKW_RIGHTPAREN
		//	| gccAttributeSpecifier=GccAttributeSpecifier);
		@Override public ParserRule getRule() { return rule; }
		
		//{GccDeclaratorExtension} (asm=(KW_ASM1 | KW_ASM2 | KW_ASM3) SKW_LEFTPAREN string+=STRING_LITERAL+ SKW_RIGHTPAREN |
		//gccAttributeSpecifier=GccAttributeSpecifier)
		public Group getGroup() { return cGroup; }
		
		//{GccDeclaratorExtension}
		public Action getGccDeclaratorExtensionAction_0() { return cGccDeclaratorExtensionAction_0; }
		
		//(asm=(KW_ASM1 | KW_ASM2 | KW_ASM3) SKW_LEFTPAREN string+=STRING_LITERAL+ SKW_RIGHTPAREN |
		//gccAttributeSpecifier=GccAttributeSpecifier)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//asm=(KW_ASM1 | KW_ASM2 | KW_ASM3) SKW_LEFTPAREN string+=STRING_LITERAL+ SKW_RIGHTPAREN
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//asm=(KW_ASM1 | KW_ASM2 | KW_ASM3)
		public Assignment getAsmAssignment_1_0_0() { return cAsmAssignment_1_0_0; }
		
		//(KW_ASM1 | KW_ASM2 | KW_ASM3)
		public Alternatives getAsmAlternatives_1_0_0_0() { return cAsmAlternatives_1_0_0_0; }
		
		//KW_ASM1
		public RuleCall getAsmKW_ASM1TerminalRuleCall_1_0_0_0_0() { return cAsmKW_ASM1TerminalRuleCall_1_0_0_0_0; }
		
		//KW_ASM2
		public RuleCall getAsmKW_ASM2TerminalRuleCall_1_0_0_0_1() { return cAsmKW_ASM2TerminalRuleCall_1_0_0_0_1; }
		
		//KW_ASM3
		public RuleCall getAsmKW_ASM3TerminalRuleCall_1_0_0_0_2() { return cAsmKW_ASM3TerminalRuleCall_1_0_0_0_2; }
		
		//SKW_LEFTPAREN
		public RuleCall getSKW_LEFTPARENTerminalRuleCall_1_0_1() { return cSKW_LEFTPARENTerminalRuleCall_1_0_1; }
		
		//string+=STRING_LITERAL+
		public Assignment getStringAssignment_1_0_2() { return cStringAssignment_1_0_2; }
		
		//STRING_LITERAL
		public RuleCall getStringSTRING_LITERALTerminalRuleCall_1_0_2_0() { return cStringSTRING_LITERALTerminalRuleCall_1_0_2_0; }
		
		//SKW_RIGHTPAREN
		public RuleCall getSKW_RIGHTPARENTerminalRuleCall_1_0_3() { return cSKW_RIGHTPARENTerminalRuleCall_1_0_3; }
		
		//gccAttributeSpecifier=GccAttributeSpecifier
		public Assignment getGccAttributeSpecifierAssignment_1_1() { return cGccAttributeSpecifierAssignment_1_1; }
		
		//GccAttributeSpecifier
		public RuleCall getGccAttributeSpecifierGccAttributeSpecifierParserRuleCall_1_1_0() { return cGccAttributeSpecifierGccAttributeSpecifierParserRuleCall_1_1_0; }
	}
	public class GccAttributeSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.GccAttributeSpecifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGccAttributeSpecifierAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cKW_ATTRIBUTETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cSKW_LEFTPARENTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cSKW_LEFTPARENTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cListAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cListGccAttributeListParserRuleCall_4_0 = (RuleCall)cListAssignment_4.eContents().get(0);
		private final RuleCall cSKW_RIGHTPARENTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cSKW_RIGHTPARENTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//GccAttributeSpecifier:
		//	{GccAttributeSpecifier} KW_ATTRIBUTE SKW_LEFTPAREN SKW_LEFTPAREN
		//	list=GccAttributeList?
		//	SKW_RIGHTPAREN SKW_RIGHTPAREN;
		@Override public ParserRule getRule() { return rule; }
		
		//{GccAttributeSpecifier} KW_ATTRIBUTE SKW_LEFTPAREN SKW_LEFTPAREN list=GccAttributeList? SKW_RIGHTPAREN SKW_RIGHTPAREN
		public Group getGroup() { return cGroup; }
		
		//{GccAttributeSpecifier}
		public Action getGccAttributeSpecifierAction_0() { return cGccAttributeSpecifierAction_0; }
		
		//KW_ATTRIBUTE
		public RuleCall getKW_ATTRIBUTETerminalRuleCall_1() { return cKW_ATTRIBUTETerminalRuleCall_1; }
		
		//SKW_LEFTPAREN
		public RuleCall getSKW_LEFTPARENTerminalRuleCall_2() { return cSKW_LEFTPARENTerminalRuleCall_2; }
		
		//SKW_LEFTPAREN
		public RuleCall getSKW_LEFTPARENTerminalRuleCall_3() { return cSKW_LEFTPARENTerminalRuleCall_3; }
		
		//list=GccAttributeList?
		public Assignment getListAssignment_4() { return cListAssignment_4; }
		
		//GccAttributeList
		public RuleCall getListGccAttributeListParserRuleCall_4_0() { return cListGccAttributeListParserRuleCall_4_0; }
		
		//SKW_RIGHTPAREN
		public RuleCall getSKW_RIGHTPARENTerminalRuleCall_5() { return cSKW_RIGHTPARENTerminalRuleCall_5; }
		
		//SKW_RIGHTPAREN
		public RuleCall getSKW_RIGHTPARENTerminalRuleCall_6() { return cSKW_RIGHTPARENTerminalRuleCall_6; }
	}
	public class GccAttributeListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.GccAttributeList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGccAttributeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cGccAttributeGccAttributeParserRuleCall_0_0 = (RuleCall)cGccAttributeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cSKW_COMMATerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cGccAttributeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cGccAttributeGccAttributeParserRuleCall_1_1_0 = (RuleCall)cGccAttributeAssignment_1_1.eContents().get(0);
		
		//GccAttributeList:
		//	gccAttribute+=GccAttribute (SKW_COMMA gccAttribute+=GccAttribute)*;
		@Override public ParserRule getRule() { return rule; }
		
		//gccAttribute+=GccAttribute (SKW_COMMA gccAttribute+=GccAttribute)*
		public Group getGroup() { return cGroup; }
		
		//gccAttribute+=GccAttribute
		public Assignment getGccAttributeAssignment_0() { return cGccAttributeAssignment_0; }
		
		//GccAttribute
		public RuleCall getGccAttributeGccAttributeParserRuleCall_0_0() { return cGccAttributeGccAttributeParserRuleCall_0_0; }
		
		//(SKW_COMMA gccAttribute+=GccAttribute)*
		public Group getGroup_1() { return cGroup_1; }
		
		//SKW_COMMA
		public RuleCall getSKW_COMMATerminalRuleCall_1_0() { return cSKW_COMMATerminalRuleCall_1_0; }
		
		//gccAttribute+=GccAttribute
		public Assignment getGccAttributeAssignment_1_1() { return cGccAttributeAssignment_1_1; }
		
		//GccAttribute
		public RuleCall getGccAttributeGccAttributeParserRuleCall_1_1_0() { return cGccAttributeGccAttributeParserRuleCall_1_1_0; }
	}
	public class GccAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.GccAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGccAttributeAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_1_0_0 = (RuleCall)cIdAssignment_1_0.eContents().get(0);
		private final Assignment cConstAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cConstConstant1ParserRuleCall_1_1_0 = (RuleCall)cConstAssignment_1_1.eContents().get(0);
		private final Assignment cKeywordAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cKeywordParserKeywordsParserRuleCall_1_2_0 = (RuleCall)cKeywordAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cSKW_LEFTPARENTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cListAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cListArgumentExpressionListParserRuleCall_2_1_0 = (RuleCall)cListAssignment_2_1.eContents().get(0);
		private final RuleCall cSKW_RIGHTPARENTerminalRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		
		//GccAttribute:
		//	{GccAttribute} (id=ID
		//	| const=Constant1
		//	| keyword=ParserKeywords) (SKW_LEFTPAREN list=ArgumentExpressionList? SKW_RIGHTPAREN)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{GccAttribute} (id=ID | const=Constant1 | keyword=ParserKeywords) (SKW_LEFTPAREN list=ArgumentExpressionList?
		//SKW_RIGHTPAREN)?
		public Group getGroup() { return cGroup; }
		
		//{GccAttribute}
		public Action getGccAttributeAction_0() { return cGccAttributeAction_0; }
		
		//(id=ID | const=Constant1 | keyword=ParserKeywords)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//id=ID
		public Assignment getIdAssignment_1_0() { return cIdAssignment_1_0; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0_0() { return cIdIDTerminalRuleCall_1_0_0; }
		
		//const=Constant1
		public Assignment getConstAssignment_1_1() { return cConstAssignment_1_1; }
		
		//Constant1
		public RuleCall getConstConstant1ParserRuleCall_1_1_0() { return cConstConstant1ParserRuleCall_1_1_0; }
		
		//keyword=ParserKeywords
		public Assignment getKeywordAssignment_1_2() { return cKeywordAssignment_1_2; }
		
		//ParserKeywords
		public RuleCall getKeywordParserKeywordsParserRuleCall_1_2_0() { return cKeywordParserKeywordsParserRuleCall_1_2_0; }
		
		//(SKW_LEFTPAREN list=ArgumentExpressionList? SKW_RIGHTPAREN)?
		public Group getGroup_2() { return cGroup_2; }
		
		//SKW_LEFTPAREN
		public RuleCall getSKW_LEFTPARENTerminalRuleCall_2_0() { return cSKW_LEFTPARENTerminalRuleCall_2_0; }
		
		//list=ArgumentExpressionList?
		public Assignment getListAssignment_2_1() { return cListAssignment_2_1; }
		
		//ArgumentExpressionList
		public RuleCall getListArgumentExpressionListParserRuleCall_2_1_0() { return cListArgumentExpressionListParserRuleCall_2_1_0; }
		
		//SKW_RIGHTPAREN
		public RuleCall getSKW_RIGHTPARENTerminalRuleCall_2_2() { return cSKW_RIGHTPARENTerminalRuleCall_2_2; }
	}
	public class PointerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.Pointer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPointerAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Assignment cStarAssignment_1_0_0 = (Assignment)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cStarSKW_STARTerminalRuleCall_1_0_0_0 = (RuleCall)cStarAssignment_1_0_0.eContents().get(0);
		private final Assignment cCaretAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cCaretSKW_CARETTerminalRuleCall_1_0_1_0 = (RuleCall)cCaretAssignment_1_0_1.eContents().get(0);
		private final Assignment cTypeQualifierListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeQualifierListTypeQualifierListParserRuleCall_1_1_0 = (RuleCall)cTypeQualifierListAssignment_1_1.eContents().get(0);
		
		//Pointer:
		//	{Pointer} ((star+=SKW_STAR | caret+=SKW_CARET) typeQualifierList+=TypeQualifierList?)*
		//	//|	{pointer} CARET typeQualifierList=typeQualifierList? pointer=pointer?// Blocks language extension
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Pointer} ((star+=SKW_STAR | caret+=SKW_CARET) typeQualifierList+=TypeQualifierList?)*
		public Group getGroup() { return cGroup; }
		
		//{Pointer}
		public Action getPointerAction_0() { return cPointerAction_0; }
		
		//((star+=SKW_STAR | caret+=SKW_CARET) typeQualifierList+=TypeQualifierList?)*
		public Group getGroup_1() { return cGroup_1; }
		
		//(star+=SKW_STAR | caret+=SKW_CARET)
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//star+=SKW_STAR
		public Assignment getStarAssignment_1_0_0() { return cStarAssignment_1_0_0; }
		
		//SKW_STAR
		public RuleCall getStarSKW_STARTerminalRuleCall_1_0_0_0() { return cStarSKW_STARTerminalRuleCall_1_0_0_0; }
		
		//caret+=SKW_CARET
		public Assignment getCaretAssignment_1_0_1() { return cCaretAssignment_1_0_1; }
		
		//SKW_CARET
		public RuleCall getCaretSKW_CARETTerminalRuleCall_1_0_1_0() { return cCaretSKW_CARETTerminalRuleCall_1_0_1_0; }
		
		//typeQualifierList+=TypeQualifierList?
		public Assignment getTypeQualifierListAssignment_1_1() { return cTypeQualifierListAssignment_1_1; }
		
		//TypeQualifierList
		public RuleCall getTypeQualifierListTypeQualifierListParserRuleCall_1_1_0() { return cTypeQualifierListTypeQualifierListParserRuleCall_1_1_0; }
	}
	public class TypeQualifierListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.TypeQualifierList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypeQualifierListAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeQualifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeQualifierTypeQualifierParserRuleCall_1_0 = (RuleCall)cTypeQualifierAssignment_1.eContents().get(0);
		
		//TypeQualifierList:
		//	{TypeQualifierList} typeQualifier+=TypeQualifier+;
		@Override public ParserRule getRule() { return rule; }
		
		//{TypeQualifierList} typeQualifier+=TypeQualifier+
		public Group getGroup() { return cGroup; }
		
		//{TypeQualifierList}
		public Action getTypeQualifierListAction_0() { return cTypeQualifierListAction_0; }
		
		//typeQualifier+=TypeQualifier+
		public Assignment getTypeQualifierAssignment_1() { return cTypeQualifierAssignment_1; }
		
		//TypeQualifier
		public RuleCall getTypeQualifierTypeQualifierParserRuleCall_1_0() { return cTypeQualifierTypeQualifierParserRuleCall_1_0; }
	}
	public class ParameterTypeListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.ParameterTypeList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterTypeListAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cListParameterListParserRuleCall_1_0 = (RuleCall)cListAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cSKW_COMMATerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cEllipsisAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cEllipsisEllipsisParserRuleCall_2_1_0 = (RuleCall)cEllipsisAssignment_2_1.eContents().get(0);
		
		//ParameterTypeList:
		//	{ParameterTypeList} list=ParameterList (SKW_COMMA ellipsis?=Ellipsis)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ParameterTypeList} list=ParameterList (SKW_COMMA ellipsis?=Ellipsis)?
		public Group getGroup() { return cGroup; }
		
		//{ParameterTypeList}
		public Action getParameterTypeListAction_0() { return cParameterTypeListAction_0; }
		
		//list=ParameterList
		public Assignment getListAssignment_1() { return cListAssignment_1; }
		
		//ParameterList
		public RuleCall getListParameterListParserRuleCall_1_0() { return cListParameterListParserRuleCall_1_0; }
		
		//(SKW_COMMA ellipsis?=Ellipsis)?
		public Group getGroup_2() { return cGroup_2; }
		
		//SKW_COMMA
		public RuleCall getSKW_COMMATerminalRuleCall_2_0() { return cSKW_COMMATerminalRuleCall_2_0; }
		
		//ellipsis?=Ellipsis
		public Assignment getEllipsisAssignment_2_1() { return cEllipsisAssignment_2_1; }
		
		//Ellipsis
		public RuleCall getEllipsisEllipsisParserRuleCall_2_1_0() { return cEllipsisEllipsisParserRuleCall_2_1_0; }
	}
	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.ParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterListAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cParameterDeclarationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParameterDeclarationParameterDeclarationParserRuleCall_1_0 = (RuleCall)cParameterDeclarationAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cSKW_COMMATerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cParameterDeclarationAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParameterDeclarationParameterDeclarationParserRuleCall_2_1_0 = (RuleCall)cParameterDeclarationAssignment_2_1.eContents().get(0);
		
		//ParameterList:
		//	{ParameterList} parameterDeclaration+=ParameterDeclaration (SKW_COMMA parameterDeclaration+=ParameterDeclaration)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{ParameterList} parameterDeclaration+=ParameterDeclaration (SKW_COMMA parameterDeclaration+=ParameterDeclaration)*
		public Group getGroup() { return cGroup; }
		
		//{ParameterList}
		public Action getParameterListAction_0() { return cParameterListAction_0; }
		
		//parameterDeclaration+=ParameterDeclaration
		public Assignment getParameterDeclarationAssignment_1() { return cParameterDeclarationAssignment_1; }
		
		//ParameterDeclaration
		public RuleCall getParameterDeclarationParameterDeclarationParserRuleCall_1_0() { return cParameterDeclarationParameterDeclarationParserRuleCall_1_0; }
		
		//(SKW_COMMA parameterDeclaration+=ParameterDeclaration)*
		public Group getGroup_2() { return cGroup_2; }
		
		//SKW_COMMA
		public RuleCall getSKW_COMMATerminalRuleCall_2_0() { return cSKW_COMMATerminalRuleCall_2_0; }
		
		//parameterDeclaration+=ParameterDeclaration
		public Assignment getParameterDeclarationAssignment_2_1() { return cParameterDeclarationAssignment_2_1; }
		
		//ParameterDeclaration
		public RuleCall getParameterDeclarationParameterDeclarationParserRuleCall_2_1_0() { return cParameterDeclarationParameterDeclarationParserRuleCall_2_1_0; }
	}
	public class ParameterDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.ParameterDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDeclSpecifiersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeclSpecifiersDeclarationSpecifiersParserRuleCall_1_0 = (RuleCall)cDeclSpecifiersAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cDeclaratorAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cDeclaratorDeclaratorParserRuleCall_2_0_0 = (RuleCall)cDeclaratorAssignment_2_0.eContents().get(0);
		private final Assignment cAbstractDeclatorAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cAbstractDeclatorAbstractDeclaratorParserRuleCall_2_1_0 = (RuleCall)cAbstractDeclatorAssignment_2_1.eContents().get(0);
		
		//ParameterDeclaration:
		//	{ParameterDeclaration} declSpecifiers=DeclarationSpecifiers (declarator=Declarator
		//	| abstractDeclator=AbstractDeclarator?);
		@Override public ParserRule getRule() { return rule; }
		
		//{ParameterDeclaration} declSpecifiers=DeclarationSpecifiers (declarator=Declarator |
		//abstractDeclator=AbstractDeclarator?)
		public Group getGroup() { return cGroup; }
		
		//{ParameterDeclaration}
		public Action getParameterDeclarationAction_0() { return cParameterDeclarationAction_0; }
		
		//declSpecifiers=DeclarationSpecifiers
		public Assignment getDeclSpecifiersAssignment_1() { return cDeclSpecifiersAssignment_1; }
		
		//DeclarationSpecifiers
		public RuleCall getDeclSpecifiersDeclarationSpecifiersParserRuleCall_1_0() { return cDeclSpecifiersDeclarationSpecifiersParserRuleCall_1_0; }
		
		//(declarator=Declarator | abstractDeclator=AbstractDeclarator?)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//declarator=Declarator
		public Assignment getDeclaratorAssignment_2_0() { return cDeclaratorAssignment_2_0; }
		
		//Declarator
		public RuleCall getDeclaratorDeclaratorParserRuleCall_2_0_0() { return cDeclaratorDeclaratorParserRuleCall_2_0_0; }
		
		//abstractDeclator=AbstractDeclarator?
		public Assignment getAbstractDeclatorAssignment_2_1() { return cAbstractDeclatorAssignment_2_1; }
		
		//AbstractDeclarator
		public RuleCall getAbstractDeclatorAbstractDeclaratorParserRuleCall_2_1_0() { return cAbstractDeclatorAbstractDeclaratorParserRuleCall_2_1_0; }
	}
	public class IdentifierListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.IdentifierList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIdentifierListAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdMyIdentifierParserRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cSKW_COMMATerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cIdAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIdMyIdentifierParserRuleCall_2_1_0 = (RuleCall)cIdAssignment_2_1.eContents().get(0);
		
		//IdentifierList:
		//	{IdentifierList} id+=MyIdentifier (SKW_COMMA id+=MyIdentifier)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{IdentifierList} id+=MyIdentifier (SKW_COMMA id+=MyIdentifier)*
		public Group getGroup() { return cGroup; }
		
		//{IdentifierList}
		public Action getIdentifierListAction_0() { return cIdentifierListAction_0; }
		
		//id+=MyIdentifier
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//MyIdentifier
		public RuleCall getIdMyIdentifierParserRuleCall_1_0() { return cIdMyIdentifierParserRuleCall_1_0; }
		
		//(SKW_COMMA id+=MyIdentifier)*
		public Group getGroup_2() { return cGroup_2; }
		
		//SKW_COMMA
		public RuleCall getSKW_COMMATerminalRuleCall_2_0() { return cSKW_COMMATerminalRuleCall_2_0; }
		
		//id+=MyIdentifier
		public Assignment getIdAssignment_2_1() { return cIdAssignment_2_1; }
		
		//MyIdentifier
		public RuleCall getIdMyIdentifierParserRuleCall_2_1_0() { return cIdMyIdentifierParserRuleCall_2_1_0; }
	}
	public class MyIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.MyIdentifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMyIdentifierAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		
		//MyIdentifier:
		//	{MyIdentifier} id=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{MyIdentifier} id=ID
		public Group getGroup() { return cGroup; }
		
		//{MyIdentifier}
		public Action getMyIdentifierAction_0() { return cMyIdentifierAction_0; }
		
		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }
	}
	public class TypeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.TypeName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypeNameAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cListSpecifierQualifierListParserRuleCall_1_0 = (RuleCall)cListAssignment_1.eContents().get(0);
		private final Assignment cAbstractDeclaratorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAbstractDeclaratorAbstractDeclaratorParserRuleCall_2_0 = (RuleCall)cAbstractDeclaratorAssignment_2.eContents().get(0);
		
		//TypeName initRuleAction { at.jku.weiner.c.parser.utils.Log.log("In type name"); }:
		//	{TypeName} list=SpecifierQualifierList
		//	preAction{ { at.jku.weiner.c.parser.utils.Log.error("In typeName");
		//	} } abstractDeclarator=AbstractDeclarator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{TypeName} list=SpecifierQualifierList preAction{ { at.jku.weiner.c.parser.utils.Log.error("In typeName"); } }
		//abstractDeclarator=AbstractDeclarator?
		public Group getGroup() { return cGroup; }
		
		//{TypeName}
		public Action getTypeNameAction_0() { return cTypeNameAction_0; }
		
		//list=SpecifierQualifierList preAction{ { at.jku.weiner.c.parser.utils.Log.error("In typeName"); } }
		public Assignment getListAssignment_1() { return cListAssignment_1; }
		
		//SpecifierQualifierList
		public RuleCall getListSpecifierQualifierListParserRuleCall_1_0() { return cListSpecifierQualifierListParserRuleCall_1_0; }
		
		//abstractDeclarator=AbstractDeclarator?
		public Assignment getAbstractDeclaratorAssignment_2() { return cAbstractDeclaratorAssignment_2; }
		
		//AbstractDeclarator
		public RuleCall getAbstractDeclaratorAbstractDeclaratorParserRuleCall_2_0() { return cAbstractDeclaratorAbstractDeclaratorParserRuleCall_2_0; }
	}
	public class AbstractDeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.AbstractDeclarator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAbstractDeclaratorAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPointerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPointerPointerParserRuleCall_1_0 = (RuleCall)cPointerAssignment_1.eContents().get(0);
		
		//AbstractDeclarator:
		//	{AbstractDeclarator} pointer=Pointer
		//	//(directAbstractDeclarator=DirectAbstractDeclarator)?
		//	//(gccDeclExtAbstract+=gccDeclaratorExtension)*
		//	//| 
		//	//(directAbstractDeclarator=DirectAbstractDeclarator)?
		//	//(gccDeclExtAbstract+=gccDeclaratorExtension)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{AbstractDeclarator} pointer=Pointer
		public Group getGroup() { return cGroup; }
		
		//{AbstractDeclarator}
		public Action getAbstractDeclaratorAction_0() { return cAbstractDeclaratorAction_0; }
		
		//pointer=Pointer
		public Assignment getPointerAssignment_1() { return cPointerAssignment_1; }
		
		//Pointer
		public RuleCall getPointerPointerParserRuleCall_1_0() { return cPointerPointerParserRuleCall_1_0; }
	}
	public class InitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.Initializer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInitializerAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cExprAssignmentExpressionParserRuleCall_1_0_0 = (RuleCall)cExprAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cSKW_LEFTBRACETerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Assignment cListAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cListInitializerListParserRuleCall_1_1_1_0 = (RuleCall)cListAssignment_1_1_1.eContents().get(0);
		private final RuleCall cSKW_COMMATerminalRuleCall_1_1_2 = (RuleCall)cGroup_1_1.eContents().get(2);
		private final RuleCall cSKW_RIGHTBRACETerminalRuleCall_1_1_3 = (RuleCall)cGroup_1_1.eContents().get(3);
		
		////DirectAbstractDeclarator returns AbstractDeclarator:
		////	{DirectAbstractDeclarator}
		////	(SKW_LEFTPAREN declarator=AbstractDeclarator SKW_RIGHTPAREN
		////		//(gccDeclExt+=gccDeclaratorExtension)*
		////	|	abstractDeclaratorSuffix+=AbstractDeclaratorSuffix
		////	)
		////	
		////	//(abstractDeclaratorSuffix+=abstractDeclaratorSuffix)*
		////;
		////AbstractDeclaratorSuffix:
		////	{AbstractDeclaratorSuffix}
		////	(SKW_LEFTBRACKET typeQualifierList=TypeQualifierList? (assignmentExpr+=AssignmentExpression)? SKW_RIGHTBRACKET
		////	|	SKW_LEFTBRACKET KW_STATIC typeQualifierList=TypeQualifierList? (assignmentExpr+=AssignmentExpression) SKW_RIGHTBRACKET
		////	|	SKW_LEFTBRACKET typeQualifierListOrig=TypeQualifierList KW_STATIC assignmentExpr+=AssignmentExpression SKW_RIGHTBRACKET
		////	|	SKW_LEFTBRACKET SKW_STAR SKW_RIGHTBRACKET
		////	//|	SKW_LEFTPAREN parameterTypeList=ParameterTypeList? SKW_RIGHTPAREN (gccDeclExt+=gccDeclaratorExtension)*
		////	)
		////;
		//Initializer:
		//	{Initializer} (expr=AssignmentExpression
		//	| SKW_LEFTBRACE list=InitializerList SKW_COMMA? SKW_RIGHTBRACE);
		@Override public ParserRule getRule() { return rule; }
		
		//{Initializer} (expr=AssignmentExpression | SKW_LEFTBRACE list=InitializerList SKW_COMMA? SKW_RIGHTBRACE)
		public Group getGroup() { return cGroup; }
		
		//{Initializer}
		public Action getInitializerAction_0() { return cInitializerAction_0; }
		
		//(expr=AssignmentExpression | SKW_LEFTBRACE list=InitializerList SKW_COMMA? SKW_RIGHTBRACE)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//expr=AssignmentExpression
		public Assignment getExprAssignment_1_0() { return cExprAssignment_1_0; }
		
		//AssignmentExpression
		public RuleCall getExprAssignmentExpressionParserRuleCall_1_0_0() { return cExprAssignmentExpressionParserRuleCall_1_0_0; }
		
		//SKW_LEFTBRACE list=InitializerList SKW_COMMA? SKW_RIGHTBRACE
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//SKW_LEFTBRACE
		public RuleCall getSKW_LEFTBRACETerminalRuleCall_1_1_0() { return cSKW_LEFTBRACETerminalRuleCall_1_1_0; }
		
		//list=InitializerList
		public Assignment getListAssignment_1_1_1() { return cListAssignment_1_1_1; }
		
		//InitializerList
		public RuleCall getListInitializerListParserRuleCall_1_1_1_0() { return cListInitializerListParserRuleCall_1_1_1_0; }
		
		//SKW_COMMA?
		public RuleCall getSKW_COMMATerminalRuleCall_1_1_2() { return cSKW_COMMATerminalRuleCall_1_1_2; }
		
		//SKW_RIGHTBRACE
		public RuleCall getSKW_RIGHTBRACETerminalRuleCall_1_1_3() { return cSKW_RIGHTBRACETerminalRuleCall_1_1_3; }
	}
	public class InitializerListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.InitializerList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInitializerListAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDesignationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDesignationDesignationParserRuleCall_1_0 = (RuleCall)cDesignationAssignment_1.eContents().get(0);
		private final Assignment cInitializerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInitializerInitializerParserRuleCall_2_0 = (RuleCall)cInitializerAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cSKW_COMMATerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cInitializerAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInitializerInitializerParserRuleCall_3_1_0 = (RuleCall)cInitializerAssignment_3_1.eContents().get(0);
		
		//InitializerList:
		//	{InitializerList} designation+=Designation?
		//	initializer+=Initializer (SKW_COMMA
		//	//(designation+=Designation)?
		//	initializer+=Initializer)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{InitializerList} designation+=Designation? initializer+=Initializer (SKW_COMMA //(designation+=Designation)?
		//initializer+=Initializer)*
		public Group getGroup() { return cGroup; }
		
		//{InitializerList}
		public Action getInitializerListAction_0() { return cInitializerListAction_0; }
		
		//designation+=Designation?
		public Assignment getDesignationAssignment_1() { return cDesignationAssignment_1; }
		
		//Designation
		public RuleCall getDesignationDesignationParserRuleCall_1_0() { return cDesignationDesignationParserRuleCall_1_0; }
		
		//initializer+=Initializer
		public Assignment getInitializerAssignment_2() { return cInitializerAssignment_2; }
		
		//Initializer
		public RuleCall getInitializerInitializerParserRuleCall_2_0() { return cInitializerInitializerParserRuleCall_2_0; }
		
		//(SKW_COMMA //(designation+=Designation)?
		//initializer+=Initializer)*
		public Group getGroup_3() { return cGroup_3; }
		
		//SKW_COMMA
		public RuleCall getSKW_COMMATerminalRuleCall_3_0() { return cSKW_COMMATerminalRuleCall_3_0; }
		
		////(designation+=Designation)?
		//initializer+=Initializer
		public Assignment getInitializerAssignment_3_1() { return cInitializerAssignment_3_1; }
		
		//Initializer
		public RuleCall getInitializerInitializerParserRuleCall_3_1_0() { return cInitializerInitializerParserRuleCall_3_1_0; }
	}
	public class BlockListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.BlockList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockListAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cDeclarationAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cDeclarationDeclarationParserRuleCall_1_0_0 = (RuleCall)cDeclarationAssignment_1_0.eContents().get(0);
		private final Assignment cStatementAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_1_1_0 = (RuleCall)cStatementAssignment_1_1.eContents().get(0);
		
		/// *** Statements * / BlockList:
		//	{BlockList} (declaration+=Declaration | statement+=Statement)+;
		@Override public ParserRule getRule() { return rule; }
		
		//{BlockList} (declaration+=Declaration | statement+=Statement)+
		public Group getGroup() { return cGroup; }
		
		//{BlockList}
		public Action getBlockListAction_0() { return cBlockListAction_0; }
		
		//(declaration+=Declaration | statement+=Statement)+
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//declaration+=Declaration
		public Assignment getDeclarationAssignment_1_0() { return cDeclarationAssignment_1_0; }
		
		//Declaration
		public RuleCall getDeclarationDeclarationParserRuleCall_1_0_0() { return cDeclarationDeclarationParserRuleCall_1_0_0; }
		
		//statement+=Statement
		public Assignment getStatementAssignment_1_1() { return cStatementAssignment_1_1; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_1_1_0() { return cStatementStatementParserRuleCall_1_1_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cStmtAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cStmtLabeledStatementParserRuleCall_1_0_0 = (RuleCall)cStmtAssignment_1_0.eContents().get(0);
		private final Assignment cStmtAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cStmtCompoundStatementParserRuleCall_1_1_0 = (RuleCall)cStmtAssignment_1_1.eContents().get(0);
		private final Assignment cStmtAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cStmtExpressionStatementParserRuleCall_1_2_0 = (RuleCall)cStmtAssignment_1_2.eContents().get(0);
		private final Assignment cStmtAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cStmtSelectionStatementParserRuleCall_1_3_0 = (RuleCall)cStmtAssignment_1_3.eContents().get(0);
		private final Assignment cStmtAssignment_1_4 = (Assignment)cAlternatives_1.eContents().get(4);
		private final RuleCall cStmtIterationStatementParserRuleCall_1_4_0 = (RuleCall)cStmtAssignment_1_4.eContents().get(0);
		private final Assignment cStmtAssignment_1_5 = (Assignment)cAlternatives_1.eContents().get(5);
		private final RuleCall cStmtJumpStatementParserRuleCall_1_5_0 = (RuleCall)cStmtAssignment_1_5.eContents().get(0);
		private final Assignment cStmtAssignment_1_6 = (Assignment)cAlternatives_1.eContents().get(6);
		private final RuleCall cStmtAsmStatementParserRuleCall_1_6_0 = (RuleCall)cStmtAssignment_1_6.eContents().get(0);
		
		//Statement initRuleAction { at.jku.weiner.c.parser.utils.Log.error("in statement"); }:
		//	{Statement} (stmt=LabeledStatement
		//	| stmt=CompoundStatement
		//	| stmt=ExpressionStatement
		//	| stmt=SelectionStatement
		//	| stmt=IterationStatement
		//	| stmt=JumpStatement
		//	| stmt=AsmStatement);
		@Override public ParserRule getRule() { return rule; }
		
		//{Statement} (stmt=LabeledStatement | stmt=CompoundStatement | stmt=ExpressionStatement | stmt=SelectionStatement |
		//stmt=IterationStatement | stmt=JumpStatement | stmt=AsmStatement)
		public Group getGroup() { return cGroup; }
		
		//{Statement}
		public Action getStatementAction_0() { return cStatementAction_0; }
		
		//(stmt=LabeledStatement | stmt=CompoundStatement | stmt=ExpressionStatement | stmt=SelectionStatement |
		//stmt=IterationStatement | stmt=JumpStatement | stmt=AsmStatement)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//stmt=LabeledStatement
		public Assignment getStmtAssignment_1_0() { return cStmtAssignment_1_0; }
		
		//LabeledStatement
		public RuleCall getStmtLabeledStatementParserRuleCall_1_0_0() { return cStmtLabeledStatementParserRuleCall_1_0_0; }
		
		//stmt=CompoundStatement
		public Assignment getStmtAssignment_1_1() { return cStmtAssignment_1_1; }
		
		//CompoundStatement
		public RuleCall getStmtCompoundStatementParserRuleCall_1_1_0() { return cStmtCompoundStatementParserRuleCall_1_1_0; }
		
		//stmt=ExpressionStatement
		public Assignment getStmtAssignment_1_2() { return cStmtAssignment_1_2; }
		
		//ExpressionStatement
		public RuleCall getStmtExpressionStatementParserRuleCall_1_2_0() { return cStmtExpressionStatementParserRuleCall_1_2_0; }
		
		//stmt=SelectionStatement
		public Assignment getStmtAssignment_1_3() { return cStmtAssignment_1_3; }
		
		//SelectionStatement
		public RuleCall getStmtSelectionStatementParserRuleCall_1_3_0() { return cStmtSelectionStatementParserRuleCall_1_3_0; }
		
		//stmt=IterationStatement
		public Assignment getStmtAssignment_1_4() { return cStmtAssignment_1_4; }
		
		//IterationStatement
		public RuleCall getStmtIterationStatementParserRuleCall_1_4_0() { return cStmtIterationStatementParserRuleCall_1_4_0; }
		
		//stmt=JumpStatement
		public Assignment getStmtAssignment_1_5() { return cStmtAssignment_1_5; }
		
		//JumpStatement
		public RuleCall getStmtJumpStatementParserRuleCall_1_5_0() { return cStmtJumpStatementParserRuleCall_1_5_0; }
		
		//stmt=AsmStatement
		public Assignment getStmtAssignment_1_6() { return cStmtAssignment_1_6; }
		
		//AsmStatement
		public RuleCall getStmtAsmStatementParserRuleCall_1_6_0() { return cStmtAsmStatementParserRuleCall_1_6_0; }
	}
	public class LabeledStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.LabeledStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLabeledStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cIdAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_1_0_0_0 = (RuleCall)cIdAssignment_1_0_0.eContents().get(0);
		private final RuleCall cSKW_COLONTerminalRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Assignment cLStmtAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cLStmtStatementParserRuleCall_1_0_2_0 = (RuleCall)cLStmtAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cCaseAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cCaseKW_CASETerminalRuleCall_1_1_0_0 = (RuleCall)cCaseAssignment_1_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_1_1_0 = (Group)cAlternatives_1_1_1.eContents().get(0);
		private final Assignment cLowerAssignment_1_1_1_0_0 = (Assignment)cGroup_1_1_1_0.eContents().get(0);
		private final RuleCall cLowerConstant1ParserRuleCall_1_1_1_0_0_0 = (RuleCall)cLowerAssignment_1_1_1_0_0.eContents().get(0);
		private final RuleCall cEllipsisParserRuleCall_1_1_1_0_1 = (RuleCall)cGroup_1_1_1_0.eContents().get(1);
		private final Assignment cHigherAssignment_1_1_1_0_2 = (Assignment)cGroup_1_1_1_0.eContents().get(2);
		private final RuleCall cHigherConstant1ParserRuleCall_1_1_1_0_2_0 = (RuleCall)cHigherAssignment_1_1_1_0_2.eContents().get(0);
		private final Assignment cExprAssignment_1_1_1_1 = (Assignment)cAlternatives_1_1_1.eContents().get(1);
		private final RuleCall cExprConstantExpressionParserRuleCall_1_1_1_1_0 = (RuleCall)cExprAssignment_1_1_1_1.eContents().get(0);
		private final RuleCall cSKW_COLONTerminalRuleCall_1_1_2 = (RuleCall)cGroup_1_1.eContents().get(2);
		private final Assignment cLStmtAssignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final RuleCall cLStmtStatementParserRuleCall_1_1_3_0 = (RuleCall)cLStmtAssignment_1_1_3.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Assignment cMydefaultAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cMydefaultKW_DEFAULTTerminalRuleCall_1_2_0_0 = (RuleCall)cMydefaultAssignment_1_2_0.eContents().get(0);
		private final RuleCall cSKW_COLONTerminalRuleCall_1_2_1 = (RuleCall)cGroup_1_2.eContents().get(1);
		private final Assignment cLStmtAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cLStmtStatementParserRuleCall_1_2_2_0 = (RuleCall)cLStmtAssignment_1_2_2.eContents().get(0);
		
		//LabeledStatement Statement:
		//	{LabeledStatement} (id=ID SKW_COLON lStmt=Statement
		//	| case=KW_CASE (lower=Constant1 Ellipsis higher=Constant1 | expr=ConstantExpression) SKW_COLON lStmt=Statement
		//	| mydefault?=KW_DEFAULT SKW_COLON lStmt=Statement)
		@Override public ParserRule getRule() { return rule; }
		
		//{LabeledStatement} (id=ID SKW_COLON lStmt=Statement | case=KW_CASE (lower=Constant1 Ellipsis higher=Constant1 |
		//expr=ConstantExpression) SKW_COLON lStmt=Statement | mydefault?=KW_DEFAULT SKW_COLON lStmt=Statement)
		public Group getGroup() { return cGroup; }
		
		//{LabeledStatement}
		public Action getLabeledStatementAction_0() { return cLabeledStatementAction_0; }
		
		//(id=ID SKW_COLON lStmt=Statement | case=KW_CASE (lower=Constant1 Ellipsis higher=Constant1 | expr=ConstantExpression)
		//SKW_COLON lStmt=Statement | mydefault?=KW_DEFAULT SKW_COLON lStmt=Statement)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//id=ID SKW_COLON lStmt=Statement
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//id=ID
		public Assignment getIdAssignment_1_0_0() { return cIdAssignment_1_0_0; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0_0_0() { return cIdIDTerminalRuleCall_1_0_0_0; }
		
		//SKW_COLON
		public RuleCall getSKW_COLONTerminalRuleCall_1_0_1() { return cSKW_COLONTerminalRuleCall_1_0_1; }
		
		//lStmt=Statement
		public Assignment getLStmtAssignment_1_0_2() { return cLStmtAssignment_1_0_2; }
		
		//Statement
		public RuleCall getLStmtStatementParserRuleCall_1_0_2_0() { return cLStmtStatementParserRuleCall_1_0_2_0; }
		
		//case=KW_CASE (lower=Constant1 Ellipsis higher=Constant1 | expr=ConstantExpression) SKW_COLON lStmt=Statement
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//case=KW_CASE
		public Assignment getCaseAssignment_1_1_0() { return cCaseAssignment_1_1_0; }
		
		//KW_CASE
		public RuleCall getCaseKW_CASETerminalRuleCall_1_1_0_0() { return cCaseKW_CASETerminalRuleCall_1_1_0_0; }
		
		//(lower=Constant1 Ellipsis higher=Constant1 | expr=ConstantExpression)
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }
		
		//lower=Constant1 Ellipsis higher=Constant1
		public Group getGroup_1_1_1_0() { return cGroup_1_1_1_0; }
		
		//lower=Constant1
		public Assignment getLowerAssignment_1_1_1_0_0() { return cLowerAssignment_1_1_1_0_0; }
		
		//Constant1
		public RuleCall getLowerConstant1ParserRuleCall_1_1_1_0_0_0() { return cLowerConstant1ParserRuleCall_1_1_1_0_0_0; }
		
		//Ellipsis
		public RuleCall getEllipsisParserRuleCall_1_1_1_0_1() { return cEllipsisParserRuleCall_1_1_1_0_1; }
		
		//higher=Constant1
		public Assignment getHigherAssignment_1_1_1_0_2() { return cHigherAssignment_1_1_1_0_2; }
		
		//Constant1
		public RuleCall getHigherConstant1ParserRuleCall_1_1_1_0_2_0() { return cHigherConstant1ParserRuleCall_1_1_1_0_2_0; }
		
		//expr=ConstantExpression
		public Assignment getExprAssignment_1_1_1_1() { return cExprAssignment_1_1_1_1; }
		
		//ConstantExpression
		public RuleCall getExprConstantExpressionParserRuleCall_1_1_1_1_0() { return cExprConstantExpressionParserRuleCall_1_1_1_1_0; }
		
		//SKW_COLON
		public RuleCall getSKW_COLONTerminalRuleCall_1_1_2() { return cSKW_COLONTerminalRuleCall_1_1_2; }
		
		//lStmt=Statement
		public Assignment getLStmtAssignment_1_1_3() { return cLStmtAssignment_1_1_3; }
		
		//Statement
		public RuleCall getLStmtStatementParserRuleCall_1_1_3_0() { return cLStmtStatementParserRuleCall_1_1_3_0; }
		
		//mydefault?=KW_DEFAULT SKW_COLON lStmt=Statement
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//mydefault?=KW_DEFAULT
		public Assignment getMydefaultAssignment_1_2_0() { return cMydefaultAssignment_1_2_0; }
		
		//KW_DEFAULT
		public RuleCall getMydefaultKW_DEFAULTTerminalRuleCall_1_2_0_0() { return cMydefaultKW_DEFAULTTerminalRuleCall_1_2_0_0; }
		
		//SKW_COLON
		public RuleCall getSKW_COLONTerminalRuleCall_1_2_1() { return cSKW_COLONTerminalRuleCall_1_2_1; }
		
		//lStmt=Statement
		public Assignment getLStmtAssignment_1_2_2() { return cLStmtAssignment_1_2_2; }
		
		//Statement
		public RuleCall getLStmtStatementParserRuleCall_1_2_2_0() { return cLStmtStatementParserRuleCall_1_2_2_0; }
	}
	public class CompoundStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.CompoundStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompoundStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cSKW_LEFTBRACETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyBodyStatementParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		private final RuleCall cSKW_RIGHTBRACETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//CompoundStatement Statement initRuleAction { at.jku.weiner.c.parser.utils.Scope.createNewScope("CompoundStatement"); }
		//afterRuleAction { at.jku.weiner.c.parser.utils.Scope.removeScope(); }:
		//	{CompoundStatement} SKW_LEFTBRACE
		//	body=BodyStatement
		//	SKW_RIGHTBRACE
		@Override public ParserRule getRule() { return rule; }
		
		//{CompoundStatement} SKW_LEFTBRACE body=BodyStatement SKW_RIGHTBRACE
		public Group getGroup() { return cGroup; }
		
		//{CompoundStatement}
		public Action getCompoundStatementAction_0() { return cCompoundStatementAction_0; }
		
		//SKW_LEFTBRACE
		public RuleCall getSKW_LEFTBRACETerminalRuleCall_1() { return cSKW_LEFTBRACETerminalRuleCall_1; }
		
		//body=BodyStatement
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//BodyStatement
		public RuleCall getBodyBodyStatementParserRuleCall_2_0() { return cBodyBodyStatementParserRuleCall_2_0; }
		
		//SKW_RIGHTBRACE
		public RuleCall getSKW_RIGHTBRACETerminalRuleCall_3() { return cSKW_RIGHTBRACETerminalRuleCall_3; }
	}
	public class BodyStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.BodyStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBodyStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cBlockListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockListBlockListParserRuleCall_1_0 = (RuleCall)cBlockListAssignment_1.eContents().get(0);
		
		//BodyStatement Statement initRuleAction { at.jku.weiner.c.parser.utils.Log.log("In body statement"); }:
		//	{BodyStatement} blockList+=BlockList?
		@Override public ParserRule getRule() { return rule; }
		
		//{BodyStatement} blockList+=BlockList?
		public Group getGroup() { return cGroup; }
		
		//{BodyStatement}
		public Action getBodyStatementAction_0() { return cBodyStatementAction_0; }
		
		//blockList+=BlockList?
		public Assignment getBlockListAssignment_1() { return cBlockListAssignment_1; }
		
		//BlockList
		public RuleCall getBlockListBlockListParserRuleCall_1_0() { return cBlockListBlockListParserRuleCall_1_0; }
	}
	public class ExpressionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.ExpressionStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Assignment cSemiAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSemiSKW_SEMITerminalRuleCall_2_0 = (RuleCall)cSemiAssignment_2.eContents().get(0);
		
		//ExpressionStatement Statement:
		//	{ExpressionStatement} expression=Expression?
		//	semi=SKW_SEMI
		@Override public ParserRule getRule() { return rule; }
		
		//{ExpressionStatement} expression=Expression? semi=SKW_SEMI
		public Group getGroup() { return cGroup; }
		
		//{ExpressionStatement}
		public Action getExpressionStatementAction_0() { return cExpressionStatementAction_0; }
		
		//expression=Expression?
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
		
		//semi=SKW_SEMI
		public Assignment getSemiAssignment_2() { return cSemiAssignment_2; }
		
		//SKW_SEMI
		public RuleCall getSemiSKW_SEMITerminalRuleCall_2_0() { return cSemiSKW_SEMITerminalRuleCall_2_0; }
	}
	public class SelectionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.SelectionStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSelectionStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cIfAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cIfKW_IFTerminalRuleCall_1_0_0_0 = (RuleCall)cIfAssignment_1_0_0.eContents().get(0);
		private final RuleCall cSKW_LEFTPARENTerminalRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Assignment cExprAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_1_0_2_0 = (RuleCall)cExprAssignment_1_0_2.eContents().get(0);
		private final RuleCall cSKW_RIGHTPARENTerminalRuleCall_1_0_3 = (RuleCall)cGroup_1_0.eContents().get(3);
		private final Assignment cIfStatementAssignment_1_0_4 = (Assignment)cGroup_1_0.eContents().get(4);
		private final RuleCall cIfStatementStatementParserRuleCall_1_0_4_0 = (RuleCall)cIfStatementAssignment_1_0_4.eContents().get(0);
		private final Group cGroup_1_0_5 = (Group)cGroup_1_0.eContents().get(5);
		private final Assignment cElseAssignment_1_0_5_0 = (Assignment)cGroup_1_0_5.eContents().get(0);
		private final RuleCall cElseKW_ELSETerminalRuleCall_1_0_5_0_0 = (RuleCall)cElseAssignment_1_0_5_0.eContents().get(0);
		private final Assignment cElseStatementAssignment_1_0_5_1 = (Assignment)cGroup_1_0_5.eContents().get(1);
		private final RuleCall cElseStatementStatementParserRuleCall_1_0_5_1_0 = (RuleCall)cElseStatementAssignment_1_0_5_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cSwitchAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cSwitchKW_SWITCHTerminalRuleCall_1_1_0_0 = (RuleCall)cSwitchAssignment_1_1_0.eContents().get(0);
		private final RuleCall cSKW_LEFTPARENTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final Assignment cExprAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_1_1_2_0 = (RuleCall)cExprAssignment_1_1_2.eContents().get(0);
		private final RuleCall cSKW_RIGHTPARENTerminalRuleCall_1_1_3 = (RuleCall)cGroup_1_1.eContents().get(3);
		private final Assignment cSwitchStatementAssignment_1_1_4 = (Assignment)cGroup_1_1.eContents().get(4);
		private final RuleCall cSwitchStatementStatementParserRuleCall_1_1_4_0 = (RuleCall)cSwitchStatementAssignment_1_1_4.eContents().get(0);
		
		//SelectionStatement Statement:
		//	{SelectionStatement} (if=KW_IF SKW_LEFTPAREN expr=Expression SKW_RIGHTPAREN ifStatement=Statement (=> else=KW_ELSE
		//	elseStatement=Statement)?
		//	| switch=KW_SWITCH SKW_LEFTPAREN expr=Expression SKW_RIGHTPAREN switchStatement=Statement)
		@Override public ParserRule getRule() { return rule; }
		
		//{SelectionStatement} (if=KW_IF SKW_LEFTPAREN expr=Expression SKW_RIGHTPAREN ifStatement=Statement (=> else=KW_ELSE
		//elseStatement=Statement)? | switch=KW_SWITCH SKW_LEFTPAREN expr=Expression SKW_RIGHTPAREN switchStatement=Statement)
		public Group getGroup() { return cGroup; }
		
		//{SelectionStatement}
		public Action getSelectionStatementAction_0() { return cSelectionStatementAction_0; }
		
		//(if=KW_IF SKW_LEFTPAREN expr=Expression SKW_RIGHTPAREN ifStatement=Statement (=> else=KW_ELSE elseStatement=Statement)?
		//| switch=KW_SWITCH SKW_LEFTPAREN expr=Expression SKW_RIGHTPAREN switchStatement=Statement)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//if=KW_IF SKW_LEFTPAREN expr=Expression SKW_RIGHTPAREN ifStatement=Statement (=> else=KW_ELSE elseStatement=Statement)?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//if=KW_IF
		public Assignment getIfAssignment_1_0_0() { return cIfAssignment_1_0_0; }
		
		//KW_IF
		public RuleCall getIfKW_IFTerminalRuleCall_1_0_0_0() { return cIfKW_IFTerminalRuleCall_1_0_0_0; }
		
		//SKW_LEFTPAREN
		public RuleCall getSKW_LEFTPARENTerminalRuleCall_1_0_1() { return cSKW_LEFTPARENTerminalRuleCall_1_0_1; }
		
		//expr=Expression
		public Assignment getExprAssignment_1_0_2() { return cExprAssignment_1_0_2; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_0_2_0() { return cExprExpressionParserRuleCall_1_0_2_0; }
		
		//SKW_RIGHTPAREN
		public RuleCall getSKW_RIGHTPARENTerminalRuleCall_1_0_3() { return cSKW_RIGHTPARENTerminalRuleCall_1_0_3; }
		
		//ifStatement=Statement
		public Assignment getIfStatementAssignment_1_0_4() { return cIfStatementAssignment_1_0_4; }
		
		//Statement
		public RuleCall getIfStatementStatementParserRuleCall_1_0_4_0() { return cIfStatementStatementParserRuleCall_1_0_4_0; }
		
		//(=> else=KW_ELSE elseStatement=Statement)?
		public Group getGroup_1_0_5() { return cGroup_1_0_5; }
		
		//=> else=KW_ELSE
		public Assignment getElseAssignment_1_0_5_0() { return cElseAssignment_1_0_5_0; }
		
		//KW_ELSE
		public RuleCall getElseKW_ELSETerminalRuleCall_1_0_5_0_0() { return cElseKW_ELSETerminalRuleCall_1_0_5_0_0; }
		
		//elseStatement=Statement
		public Assignment getElseStatementAssignment_1_0_5_1() { return cElseStatementAssignment_1_0_5_1; }
		
		//Statement
		public RuleCall getElseStatementStatementParserRuleCall_1_0_5_1_0() { return cElseStatementStatementParserRuleCall_1_0_5_1_0; }
		
		//switch=KW_SWITCH SKW_LEFTPAREN expr=Expression SKW_RIGHTPAREN switchStatement=Statement
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//switch=KW_SWITCH
		public Assignment getSwitchAssignment_1_1_0() { return cSwitchAssignment_1_1_0; }
		
		//KW_SWITCH
		public RuleCall getSwitchKW_SWITCHTerminalRuleCall_1_1_0_0() { return cSwitchKW_SWITCHTerminalRuleCall_1_1_0_0; }
		
		//SKW_LEFTPAREN
		public RuleCall getSKW_LEFTPARENTerminalRuleCall_1_1_1() { return cSKW_LEFTPARENTerminalRuleCall_1_1_1; }
		
		//expr=Expression
		public Assignment getExprAssignment_1_1_2() { return cExprAssignment_1_1_2; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_1_2_0() { return cExprExpressionParserRuleCall_1_1_2_0; }
		
		//SKW_RIGHTPAREN
		public RuleCall getSKW_RIGHTPARENTerminalRuleCall_1_1_3() { return cSKW_RIGHTPARENTerminalRuleCall_1_1_3; }
		
		//switchStatement=Statement
		public Assignment getSwitchStatementAssignment_1_1_4() { return cSwitchStatementAssignment_1_1_4; }
		
		//Statement
		public RuleCall getSwitchStatementStatementParserRuleCall_1_1_4_0() { return cSwitchStatementStatementParserRuleCall_1_1_4_0; }
	}
	public class IterationStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.IterationStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIterationStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cWhileAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cWhileKW_WHILETerminalRuleCall_1_0_0_0 = (RuleCall)cWhileAssignment_1_0_0.eContents().get(0);
		private final RuleCall cSKW_LEFTPARENTerminalRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Assignment cExprAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_1_0_2_0 = (RuleCall)cExprAssignment_1_0_2.eContents().get(0);
		private final RuleCall cSKW_RIGHTPARENTerminalRuleCall_1_0_3 = (RuleCall)cGroup_1_0.eContents().get(3);
		private final Assignment cStatementAssignment_1_0_4 = (Assignment)cGroup_1_0.eContents().get(4);
		private final RuleCall cStatementStatementParserRuleCall_1_0_4_0 = (RuleCall)cStatementAssignment_1_0_4.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cDoAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cDoKW_DOTerminalRuleCall_1_1_0_0 = (RuleCall)cDoAssignment_1_1_0.eContents().get(0);
		private final Assignment cStatementAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_1_1_1_0 = (RuleCall)cStatementAssignment_1_1_1.eContents().get(0);
		private final RuleCall cKW_WHILETerminalRuleCall_1_1_2 = (RuleCall)cGroup_1_1.eContents().get(2);
		private final RuleCall cSKW_LEFTPARENTerminalRuleCall_1_1_3 = (RuleCall)cGroup_1_1.eContents().get(3);
		private final Assignment cExprAssignment_1_1_4 = (Assignment)cGroup_1_1.eContents().get(4);
		private final RuleCall cExprExpressionParserRuleCall_1_1_4_0 = (RuleCall)cExprAssignment_1_1_4.eContents().get(0);
		private final RuleCall cSKW_RIGHTPARENTerminalRuleCall_1_1_5 = (RuleCall)cGroup_1_1.eContents().get(5);
		private final Assignment cSemiAssignment_1_1_6 = (Assignment)cGroup_1_1.eContents().get(6);
		private final RuleCall cSemiSKW_SEMITerminalRuleCall_1_1_6_0 = (RuleCall)cSemiAssignment_1_1_6.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Assignment cForAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cForKW_FORTerminalRuleCall_1_2_0_0 = (RuleCall)cForAssignment_1_2_0.eContents().get(0);
		private final RuleCall cSKW_LEFTPARENTerminalRuleCall_1_2_1 = (RuleCall)cGroup_1_2.eContents().get(1);
		private final Assignment cInitExprAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cInitExprExpressionParserRuleCall_1_2_2_0 = (RuleCall)cInitExprAssignment_1_2_2.eContents().get(0);
		private final RuleCall cSKW_SEMITerminalRuleCall_1_2_3 = (RuleCall)cGroup_1_2.eContents().get(3);
		private final Assignment cExprAssignment_1_2_4 = (Assignment)cGroup_1_2.eContents().get(4);
		private final RuleCall cExprExpressionParserRuleCall_1_2_4_0 = (RuleCall)cExprAssignment_1_2_4.eContents().get(0);
		private final RuleCall cSKW_SEMITerminalRuleCall_1_2_5 = (RuleCall)cGroup_1_2.eContents().get(5);
		private final Assignment cIncExprAssignment_1_2_6 = (Assignment)cGroup_1_2.eContents().get(6);
		private final RuleCall cIncExprExpressionParserRuleCall_1_2_6_0 = (RuleCall)cIncExprAssignment_1_2_6.eContents().get(0);
		private final RuleCall cSKW_RIGHTPARENTerminalRuleCall_1_2_7 = (RuleCall)cGroup_1_2.eContents().get(7);
		private final Assignment cStatementAssignment_1_2_8 = (Assignment)cGroup_1_2.eContents().get(8);
		private final RuleCall cStatementStatementParserRuleCall_1_2_8_0 = (RuleCall)cStatementAssignment_1_2_8.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Assignment cForAssignment_1_3_0 = (Assignment)cGroup_1_3.eContents().get(0);
		private final RuleCall cForKW_FORTerminalRuleCall_1_3_0_0 = (RuleCall)cForAssignment_1_3_0.eContents().get(0);
		private final RuleCall cSKW_LEFTPARENTerminalRuleCall_1_3_1 = (RuleCall)cGroup_1_3.eContents().get(1);
		private final Assignment cInitDeclAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cInitDeclDeclarationParserRuleCall_1_3_2_0 = (RuleCall)cInitDeclAssignment_1_3_2.eContents().get(0);
		private final Assignment cExprAssignment_1_3_3 = (Assignment)cGroup_1_3.eContents().get(3);
		private final RuleCall cExprExpressionParserRuleCall_1_3_3_0 = (RuleCall)cExprAssignment_1_3_3.eContents().get(0);
		private final RuleCall cSKW_SEMITerminalRuleCall_1_3_4 = (RuleCall)cGroup_1_3.eContents().get(4);
		private final Assignment cIncExprAssignment_1_3_5 = (Assignment)cGroup_1_3.eContents().get(5);
		private final RuleCall cIncExprExpressionParserRuleCall_1_3_5_0 = (RuleCall)cIncExprAssignment_1_3_5.eContents().get(0);
		private final RuleCall cSKW_RIGHTPARENTerminalRuleCall_1_3_6 = (RuleCall)cGroup_1_3.eContents().get(6);
		private final Assignment cStatementAssignment_1_3_7 = (Assignment)cGroup_1_3.eContents().get(7);
		private final RuleCall cStatementStatementParserRuleCall_1_3_7_0 = (RuleCall)cStatementAssignment_1_3_7.eContents().get(0);
		
		//IterationStatement Statement:
		//	{IterationStatement} (while=KW_WHILE SKW_LEFTPAREN expr=Expression SKW_RIGHTPAREN statement=Statement
		//	| do=KW_DO statement=Statement KW_WHILE SKW_LEFTPAREN expr=Expression SKW_RIGHTPAREN semi=SKW_SEMI
		//	| for=KW_FOR SKW_LEFTPAREN initExpr=Expression? SKW_SEMI expr=Expression? SKW_SEMI incExpr=Expression?
		//	SKW_RIGHTPAREN statement=Statement
		//	| for=KW_FOR SKW_LEFTPAREN initDecl=Declaration expr=Expression? SKW_SEMI incExpr=Expression?
		//	SKW_RIGHTPAREN statement=Statement)
		@Override public ParserRule getRule() { return rule; }
		
		//{IterationStatement} (while=KW_WHILE SKW_LEFTPAREN expr=Expression SKW_RIGHTPAREN statement=Statement | do=KW_DO
		//statement=Statement KW_WHILE SKW_LEFTPAREN expr=Expression SKW_RIGHTPAREN semi=SKW_SEMI | for=KW_FOR SKW_LEFTPAREN
		//initExpr=Expression? SKW_SEMI expr=Expression? SKW_SEMI incExpr=Expression? SKW_RIGHTPAREN statement=Statement |
		//for=KW_FOR SKW_LEFTPAREN initDecl=Declaration expr=Expression? SKW_SEMI incExpr=Expression? SKW_RIGHTPAREN
		//statement=Statement)
		public Group getGroup() { return cGroup; }
		
		//{IterationStatement}
		public Action getIterationStatementAction_0() { return cIterationStatementAction_0; }
		
		//(while=KW_WHILE SKW_LEFTPAREN expr=Expression SKW_RIGHTPAREN statement=Statement | do=KW_DO statement=Statement KW_WHILE
		//SKW_LEFTPAREN expr=Expression SKW_RIGHTPAREN semi=SKW_SEMI | for=KW_FOR SKW_LEFTPAREN initExpr=Expression? SKW_SEMI
		//expr=Expression? SKW_SEMI incExpr=Expression? SKW_RIGHTPAREN statement=Statement | for=KW_FOR SKW_LEFTPAREN
		//initDecl=Declaration expr=Expression? SKW_SEMI incExpr=Expression? SKW_RIGHTPAREN statement=Statement)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//while=KW_WHILE SKW_LEFTPAREN expr=Expression SKW_RIGHTPAREN statement=Statement
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//while=KW_WHILE
		public Assignment getWhileAssignment_1_0_0() { return cWhileAssignment_1_0_0; }
		
		//KW_WHILE
		public RuleCall getWhileKW_WHILETerminalRuleCall_1_0_0_0() { return cWhileKW_WHILETerminalRuleCall_1_0_0_0; }
		
		//SKW_LEFTPAREN
		public RuleCall getSKW_LEFTPARENTerminalRuleCall_1_0_1() { return cSKW_LEFTPARENTerminalRuleCall_1_0_1; }
		
		//expr=Expression
		public Assignment getExprAssignment_1_0_2() { return cExprAssignment_1_0_2; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_0_2_0() { return cExprExpressionParserRuleCall_1_0_2_0; }
		
		//SKW_RIGHTPAREN
		public RuleCall getSKW_RIGHTPARENTerminalRuleCall_1_0_3() { return cSKW_RIGHTPARENTerminalRuleCall_1_0_3; }
		
		//statement=Statement
		public Assignment getStatementAssignment_1_0_4() { return cStatementAssignment_1_0_4; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_1_0_4_0() { return cStatementStatementParserRuleCall_1_0_4_0; }
		
		//do=KW_DO statement=Statement KW_WHILE SKW_LEFTPAREN expr=Expression SKW_RIGHTPAREN semi=SKW_SEMI
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//do=KW_DO
		public Assignment getDoAssignment_1_1_0() { return cDoAssignment_1_1_0; }
		
		//KW_DO
		public RuleCall getDoKW_DOTerminalRuleCall_1_1_0_0() { return cDoKW_DOTerminalRuleCall_1_1_0_0; }
		
		//statement=Statement
		public Assignment getStatementAssignment_1_1_1() { return cStatementAssignment_1_1_1; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_1_1_1_0() { return cStatementStatementParserRuleCall_1_1_1_0; }
		
		//KW_WHILE
		public RuleCall getKW_WHILETerminalRuleCall_1_1_2() { return cKW_WHILETerminalRuleCall_1_1_2; }
		
		//SKW_LEFTPAREN
		public RuleCall getSKW_LEFTPARENTerminalRuleCall_1_1_3() { return cSKW_LEFTPARENTerminalRuleCall_1_1_3; }
		
		//expr=Expression
		public Assignment getExprAssignment_1_1_4() { return cExprAssignment_1_1_4; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_1_4_0() { return cExprExpressionParserRuleCall_1_1_4_0; }
		
		//SKW_RIGHTPAREN
		public RuleCall getSKW_RIGHTPARENTerminalRuleCall_1_1_5() { return cSKW_RIGHTPARENTerminalRuleCall_1_1_5; }
		
		//semi=SKW_SEMI
		public Assignment getSemiAssignment_1_1_6() { return cSemiAssignment_1_1_6; }
		
		//SKW_SEMI
		public RuleCall getSemiSKW_SEMITerminalRuleCall_1_1_6_0() { return cSemiSKW_SEMITerminalRuleCall_1_1_6_0; }
		
		//for=KW_FOR SKW_LEFTPAREN initExpr=Expression? SKW_SEMI expr=Expression? SKW_SEMI incExpr=Expression? SKW_RIGHTPAREN
		//statement=Statement
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//for=KW_FOR
		public Assignment getForAssignment_1_2_0() { return cForAssignment_1_2_0; }
		
		//KW_FOR
		public RuleCall getForKW_FORTerminalRuleCall_1_2_0_0() { return cForKW_FORTerminalRuleCall_1_2_0_0; }
		
		//SKW_LEFTPAREN
		public RuleCall getSKW_LEFTPARENTerminalRuleCall_1_2_1() { return cSKW_LEFTPARENTerminalRuleCall_1_2_1; }
		
		//initExpr=Expression?
		public Assignment getInitExprAssignment_1_2_2() { return cInitExprAssignment_1_2_2; }
		
		//Expression
		public RuleCall getInitExprExpressionParserRuleCall_1_2_2_0() { return cInitExprExpressionParserRuleCall_1_2_2_0; }
		
		//SKW_SEMI
		public RuleCall getSKW_SEMITerminalRuleCall_1_2_3() { return cSKW_SEMITerminalRuleCall_1_2_3; }
		
		//expr=Expression?
		public Assignment getExprAssignment_1_2_4() { return cExprAssignment_1_2_4; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_2_4_0() { return cExprExpressionParserRuleCall_1_2_4_0; }
		
		//SKW_SEMI
		public RuleCall getSKW_SEMITerminalRuleCall_1_2_5() { return cSKW_SEMITerminalRuleCall_1_2_5; }
		
		//incExpr=Expression?
		public Assignment getIncExprAssignment_1_2_6() { return cIncExprAssignment_1_2_6; }
		
		//Expression
		public RuleCall getIncExprExpressionParserRuleCall_1_2_6_0() { return cIncExprExpressionParserRuleCall_1_2_6_0; }
		
		//SKW_RIGHTPAREN
		public RuleCall getSKW_RIGHTPARENTerminalRuleCall_1_2_7() { return cSKW_RIGHTPARENTerminalRuleCall_1_2_7; }
		
		//statement=Statement
		public Assignment getStatementAssignment_1_2_8() { return cStatementAssignment_1_2_8; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_1_2_8_0() { return cStatementStatementParserRuleCall_1_2_8_0; }
		
		//for=KW_FOR SKW_LEFTPAREN initDecl=Declaration expr=Expression? SKW_SEMI incExpr=Expression? SKW_RIGHTPAREN
		//statement=Statement
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//for=KW_FOR
		public Assignment getForAssignment_1_3_0() { return cForAssignment_1_3_0; }
		
		//KW_FOR
		public RuleCall getForKW_FORTerminalRuleCall_1_3_0_0() { return cForKW_FORTerminalRuleCall_1_3_0_0; }
		
		//SKW_LEFTPAREN
		public RuleCall getSKW_LEFTPARENTerminalRuleCall_1_3_1() { return cSKW_LEFTPARENTerminalRuleCall_1_3_1; }
		
		//initDecl=Declaration
		public Assignment getInitDeclAssignment_1_3_2() { return cInitDeclAssignment_1_3_2; }
		
		//Declaration
		public RuleCall getInitDeclDeclarationParserRuleCall_1_3_2_0() { return cInitDeclDeclarationParserRuleCall_1_3_2_0; }
		
		//expr=Expression?
		public Assignment getExprAssignment_1_3_3() { return cExprAssignment_1_3_3; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_3_3_0() { return cExprExpressionParserRuleCall_1_3_3_0; }
		
		//SKW_SEMI
		public RuleCall getSKW_SEMITerminalRuleCall_1_3_4() { return cSKW_SEMITerminalRuleCall_1_3_4; }
		
		//incExpr=Expression?
		public Assignment getIncExprAssignment_1_3_5() { return cIncExprAssignment_1_3_5; }
		
		//Expression
		public RuleCall getIncExprExpressionParserRuleCall_1_3_5_0() { return cIncExprExpressionParserRuleCall_1_3_5_0; }
		
		//SKW_RIGHTPAREN
		public RuleCall getSKW_RIGHTPARENTerminalRuleCall_1_3_6() { return cSKW_RIGHTPARENTerminalRuleCall_1_3_6; }
		
		//statement=Statement
		public Assignment getStatementAssignment_1_3_7() { return cStatementAssignment_1_3_7; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_1_3_7_0() { return cStatementStatementParserRuleCall_1_3_7_0; }
	}
	public class JumpStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.JumpStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJumpStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cContinueAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cContinueKW_CONTINUETerminalRuleCall_1_0_0_0 = (RuleCall)cContinueAssignment_1_0_0.eContents().get(0);
		private final Assignment cSemiAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cSemiSKW_SEMITerminalRuleCall_1_0_1_0 = (RuleCall)cSemiAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cBreakAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cBreakKW_BREAKTerminalRuleCall_1_1_0_0 = (RuleCall)cBreakAssignment_1_1_0.eContents().get(0);
		private final Assignment cSemiAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cSemiSKW_SEMITerminalRuleCall_1_1_1_0 = (RuleCall)cSemiAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Assignment cReturnAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cReturnKW_RETURNTerminalRuleCall_1_2_0_0 = (RuleCall)cReturnAssignment_1_2_0.eContents().get(0);
		private final Assignment cExprAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_2_1_0 = (RuleCall)cExprAssignment_1_2_1.eContents().get(0);
		private final Assignment cSemiAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cSemiSKW_SEMITerminalRuleCall_1_2_2_0 = (RuleCall)cSemiAssignment_1_2_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Assignment cGotoAssignment_1_3_0 = (Assignment)cGroup_1_3.eContents().get(0);
		private final RuleCall cGotoKW_GOTOTerminalRuleCall_1_3_0_0 = (RuleCall)cGotoAssignment_1_3_0.eContents().get(0);
		private final Assignment cExprAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cExprUnaryExpressionParserRuleCall_1_3_1_0 = (RuleCall)cExprAssignment_1_3_1.eContents().get(0);
		private final Assignment cSemiAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cSemiSKW_SEMITerminalRuleCall_1_3_2_0 = (RuleCall)cSemiAssignment_1_3_2.eContents().get(0);
		
		//JumpStatement Statement:
		//	{JumpStatement} (continue=KW_CONTINUE semi=SKW_SEMI
		//	| break=KW_BREAK semi=SKW_SEMI
		//	| return=KW_RETURN expr=Expression? semi=SKW_SEMI
		//	| goto=KW_GOTO expr=UnaryExpression semi=SKW_SEMI // GCC extension
		//	//|	KW_GOTO id=ID semi=SEMI //(can be reached over GOTO unaryExpression)
		//)
		@Override public ParserRule getRule() { return rule; }
		
		//{JumpStatement} (continue=KW_CONTINUE semi=SKW_SEMI | break=KW_BREAK semi=SKW_SEMI | return=KW_RETURN expr=Expression?
		//semi=SKW_SEMI | goto=KW_GOTO expr=UnaryExpression semi=SKW_SEMI // GCC extension
		////|	KW_GOTO id=ID semi=SEMI //(can be reached over GOTO unaryExpression)
		//)
		public Group getGroup() { return cGroup; }
		
		//{JumpStatement}
		public Action getJumpStatementAction_0() { return cJumpStatementAction_0; }
		
		//(continue=KW_CONTINUE semi=SKW_SEMI | break=KW_BREAK semi=SKW_SEMI | return=KW_RETURN expr=Expression? semi=SKW_SEMI |
		//goto=KW_GOTO expr=UnaryExpression semi=SKW_SEMI // GCC extension
		////|	KW_GOTO id=ID semi=SEMI //(can be reached over GOTO unaryExpression)
		//)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//continue=KW_CONTINUE semi=SKW_SEMI
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//continue=KW_CONTINUE
		public Assignment getContinueAssignment_1_0_0() { return cContinueAssignment_1_0_0; }
		
		//KW_CONTINUE
		public RuleCall getContinueKW_CONTINUETerminalRuleCall_1_0_0_0() { return cContinueKW_CONTINUETerminalRuleCall_1_0_0_0; }
		
		//semi=SKW_SEMI
		public Assignment getSemiAssignment_1_0_1() { return cSemiAssignment_1_0_1; }
		
		//SKW_SEMI
		public RuleCall getSemiSKW_SEMITerminalRuleCall_1_0_1_0() { return cSemiSKW_SEMITerminalRuleCall_1_0_1_0; }
		
		//break=KW_BREAK semi=SKW_SEMI
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//break=KW_BREAK
		public Assignment getBreakAssignment_1_1_0() { return cBreakAssignment_1_1_0; }
		
		//KW_BREAK
		public RuleCall getBreakKW_BREAKTerminalRuleCall_1_1_0_0() { return cBreakKW_BREAKTerminalRuleCall_1_1_0_0; }
		
		//semi=SKW_SEMI
		public Assignment getSemiAssignment_1_1_1() { return cSemiAssignment_1_1_1; }
		
		//SKW_SEMI
		public RuleCall getSemiSKW_SEMITerminalRuleCall_1_1_1_0() { return cSemiSKW_SEMITerminalRuleCall_1_1_1_0; }
		
		//return=KW_RETURN expr=Expression? semi=SKW_SEMI
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//return=KW_RETURN
		public Assignment getReturnAssignment_1_2_0() { return cReturnAssignment_1_2_0; }
		
		//KW_RETURN
		public RuleCall getReturnKW_RETURNTerminalRuleCall_1_2_0_0() { return cReturnKW_RETURNTerminalRuleCall_1_2_0_0; }
		
		//expr=Expression?
		public Assignment getExprAssignment_1_2_1() { return cExprAssignment_1_2_1; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_2_1_0() { return cExprExpressionParserRuleCall_1_2_1_0; }
		
		//semi=SKW_SEMI
		public Assignment getSemiAssignment_1_2_2() { return cSemiAssignment_1_2_2; }
		
		//SKW_SEMI
		public RuleCall getSemiSKW_SEMITerminalRuleCall_1_2_2_0() { return cSemiSKW_SEMITerminalRuleCall_1_2_2_0; }
		
		//goto=KW_GOTO expr=UnaryExpression semi=SKW_SEMI
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//goto=KW_GOTO
		public Assignment getGotoAssignment_1_3_0() { return cGotoAssignment_1_3_0; }
		
		//KW_GOTO
		public RuleCall getGotoKW_GOTOTerminalRuleCall_1_3_0_0() { return cGotoKW_GOTOTerminalRuleCall_1_3_0_0; }
		
		//expr=UnaryExpression
		public Assignment getExprAssignment_1_3_1() { return cExprAssignment_1_3_1; }
		
		//UnaryExpression
		public RuleCall getExprUnaryExpressionParserRuleCall_1_3_1_0() { return cExprUnaryExpressionParserRuleCall_1_3_1_0; }
		
		//semi=SKW_SEMI
		public Assignment getSemiAssignment_1_3_2() { return cSemiAssignment_1_3_2; }
		
		//SKW_SEMI
		public RuleCall getSemiSKW_SEMITerminalRuleCall_1_3_2_0() { return cSemiSKW_SEMITerminalRuleCall_1_3_2_0; }
	}
	public class AsmStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.AsmStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAsmStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cAsmAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cAsmKW_ASM1TerminalRuleCall_1_0_0 = (RuleCall)cAsmAssignment_1_0.eContents().get(0);
		private final Assignment cAsmAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cAsmKW_ASM2TerminalRuleCall_1_1_0 = (RuleCall)cAsmAssignment_1_1.eContents().get(0);
		private final Assignment cAsmAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cAsmKW_ASM3TerminalRuleCall_1_2_0 = (RuleCall)cAsmAssignment_1_2.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cVolatileAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cVolatileKW_VOLATILETerminalRuleCall_2_0_0 = (RuleCall)cVolatileAssignment_2_0.eContents().get(0);
		private final Assignment cVolatileAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cVolatileKW_VOLATILE2TerminalRuleCall_2_1_0 = (RuleCall)cVolatileAssignment_2_1.eContents().get(0);
		private final RuleCall cSKW_LEFTPARENTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cAsmLine1Assignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cAsmLine1AsmLineWithoutColonParserRuleCall_4_0_0 = (RuleCall)cAsmLine1Assignment_4_0.eContents().get(0);
		private final Assignment cAsmLinesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAsmLinesAsmLineWithColonParserRuleCall_4_1_0 = (RuleCall)cAsmLinesAssignment_4_1.eContents().get(0);
		private final RuleCall cSKW_RIGHTPARENTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cSemiAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSemiSKW_SEMITerminalRuleCall_6_0 = (RuleCall)cSemiAssignment_6.eContents().get(0);
		
		//AsmStatement Statement:
		//	{AsmStatement} (asm=KW_ASM1 | asm=KW_ASM2 | asm=KW_ASM3) (volatile=KW_VOLATILE | volatile=KW_VOLATILE2)?
		//	SKW_LEFTPAREN (asmLine1=AsmLineWithoutColon?
		//	asmLines+=AsmLineWithColon*) SKW_RIGHTPAREN semi=SKW_SEMI
		@Override public ParserRule getRule() { return rule; }
		
		//{AsmStatement} (asm=KW_ASM1 | asm=KW_ASM2 | asm=KW_ASM3) (volatile=KW_VOLATILE | volatile=KW_VOLATILE2)? SKW_LEFTPAREN
		//(asmLine1=AsmLineWithoutColon? asmLines+=AsmLineWithColon*) SKW_RIGHTPAREN semi=SKW_SEMI
		public Group getGroup() { return cGroup; }
		
		//{AsmStatement}
		public Action getAsmStatementAction_0() { return cAsmStatementAction_0; }
		
		//(asm=KW_ASM1 | asm=KW_ASM2 | asm=KW_ASM3)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//asm=KW_ASM1
		public Assignment getAsmAssignment_1_0() { return cAsmAssignment_1_0; }
		
		//KW_ASM1
		public RuleCall getAsmKW_ASM1TerminalRuleCall_1_0_0() { return cAsmKW_ASM1TerminalRuleCall_1_0_0; }
		
		//asm=KW_ASM2
		public Assignment getAsmAssignment_1_1() { return cAsmAssignment_1_1; }
		
		//KW_ASM2
		public RuleCall getAsmKW_ASM2TerminalRuleCall_1_1_0() { return cAsmKW_ASM2TerminalRuleCall_1_1_0; }
		
		//asm=KW_ASM3
		public Assignment getAsmAssignment_1_2() { return cAsmAssignment_1_2; }
		
		//KW_ASM3
		public RuleCall getAsmKW_ASM3TerminalRuleCall_1_2_0() { return cAsmKW_ASM3TerminalRuleCall_1_2_0; }
		
		//(volatile=KW_VOLATILE | volatile=KW_VOLATILE2)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//volatile=KW_VOLATILE
		public Assignment getVolatileAssignment_2_0() { return cVolatileAssignment_2_0; }
		
		//KW_VOLATILE
		public RuleCall getVolatileKW_VOLATILETerminalRuleCall_2_0_0() { return cVolatileKW_VOLATILETerminalRuleCall_2_0_0; }
		
		//volatile=KW_VOLATILE2
		public Assignment getVolatileAssignment_2_1() { return cVolatileAssignment_2_1; }
		
		//KW_VOLATILE2
		public RuleCall getVolatileKW_VOLATILE2TerminalRuleCall_2_1_0() { return cVolatileKW_VOLATILE2TerminalRuleCall_2_1_0; }
		
		//SKW_LEFTPAREN
		public RuleCall getSKW_LEFTPARENTerminalRuleCall_3() { return cSKW_LEFTPARENTerminalRuleCall_3; }
		
		//(asmLine1=AsmLineWithoutColon? asmLines+=AsmLineWithColon*)
		public Group getGroup_4() { return cGroup_4; }
		
		//// (logicalOrExpression (',' logicalOrExpression)*)? 
		//// (':' (logicalOrExpression (',' logicalOrExpression)*)?)*
		//asmLine1=AsmLineWithoutColon?
		public Assignment getAsmLine1Assignment_4_0() { return cAsmLine1Assignment_4_0; }
		
		//AsmLineWithoutColon
		public RuleCall getAsmLine1AsmLineWithoutColonParserRuleCall_4_0_0() { return cAsmLine1AsmLineWithoutColonParserRuleCall_4_0_0; }
		
		//asmLines+=AsmLineWithColon*
		public Assignment getAsmLinesAssignment_4_1() { return cAsmLinesAssignment_4_1; }
		
		//AsmLineWithColon
		public RuleCall getAsmLinesAsmLineWithColonParserRuleCall_4_1_0() { return cAsmLinesAsmLineWithColonParserRuleCall_4_1_0; }
		
		//SKW_RIGHTPAREN
		public RuleCall getSKW_RIGHTPARENTerminalRuleCall_5() { return cSKW_RIGHTPARENTerminalRuleCall_5; }
		
		//semi=SKW_SEMI
		public Assignment getSemiAssignment_6() { return cSemiAssignment_6; }
		
		//SKW_SEMI
		public RuleCall getSemiSKW_SEMITerminalRuleCall_6_0() { return cSemiSKW_SEMITerminalRuleCall_6_0; }
	}
	public class AsmLineWithoutColonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.AsmLineWithoutColon");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAsmLineWithoutColonAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprLogicalOrExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Assignment cAsmLinesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAsmLinesAsmLineParserRuleCall_2_0 = (RuleCall)cAsmLinesAssignment_2.eContents().get(0);
		
		//AsmLineWithoutColon:
		//	{AsmLineWithoutColon} expr=LogicalOrExpression asmLines+=AsmLine*;
		@Override public ParserRule getRule() { return rule; }
		
		//{AsmLineWithoutColon} expr=LogicalOrExpression asmLines+=AsmLine*
		public Group getGroup() { return cGroup; }
		
		//{AsmLineWithoutColon}
		public Action getAsmLineWithoutColonAction_0() { return cAsmLineWithoutColonAction_0; }
		
		//expr=LogicalOrExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//LogicalOrExpression
		public RuleCall getExprLogicalOrExpressionParserRuleCall_1_0() { return cExprLogicalOrExpressionParserRuleCall_1_0; }
		
		//asmLines+=AsmLine*
		public Assignment getAsmLinesAssignment_2() { return cAsmLinesAssignment_2; }
		
		//AsmLine
		public RuleCall getAsmLinesAsmLineParserRuleCall_2_0() { return cAsmLinesAsmLineParserRuleCall_2_0; }
	}
	public class AsmLineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.AsmLine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAsmLineAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommaSKW_COMMATerminalRuleCall_1_0 = (RuleCall)cCommaAssignment_1.eContents().get(0);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprLogicalOrExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		//AsmLine:
		//	{AsmLine} comma?=SKW_COMMA expr=LogicalOrExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{AsmLine} comma?=SKW_COMMA expr=LogicalOrExpression
		public Group getGroup() { return cGroup; }
		
		//{AsmLine}
		public Action getAsmLineAction_0() { return cAsmLineAction_0; }
		
		//comma?=SKW_COMMA
		public Assignment getCommaAssignment_1() { return cCommaAssignment_1; }
		
		//SKW_COMMA
		public RuleCall getCommaSKW_COMMATerminalRuleCall_1_0() { return cCommaSKW_COMMATerminalRuleCall_1_0; }
		
		//expr=LogicalOrExpression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//LogicalOrExpression
		public RuleCall getExprLogicalOrExpressionParserRuleCall_2_0() { return cExprLogicalOrExpressionParserRuleCall_2_0; }
	}
	public class AsmLineWithColonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.AsmLineWithColon");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAsmLineWithColonAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cSKW_COLONTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cAsmLineAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAsmLineAsmLineWithoutColonParserRuleCall_2_0 = (RuleCall)cAsmLineAssignment_2.eContents().get(0);
		
		//AsmLineWithColon:
		//	{AsmLineWithColon} SKW_COLON asmLine=AsmLineWithoutColon?;
		@Override public ParserRule getRule() { return rule; }
		
		//{AsmLineWithColon} SKW_COLON asmLine=AsmLineWithoutColon?
		public Group getGroup() { return cGroup; }
		
		//{AsmLineWithColon}
		public Action getAsmLineWithColonAction_0() { return cAsmLineWithColonAction_0; }
		
		//SKW_COLON
		public RuleCall getSKW_COLONTerminalRuleCall_1() { return cSKW_COLONTerminalRuleCall_1; }
		
		//asmLine=AsmLineWithoutColon?
		public Assignment getAsmLineAssignment_2() { return cAsmLineAssignment_2; }
		
		//AsmLineWithoutColon
		public RuleCall getAsmLineAsmLineWithoutColonParserRuleCall_2_0() { return cAsmLineAsmLineWithoutColonParserRuleCall_2_0; }
	}
	public class DesignationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.Designation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDesignationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cListDesignatorListParserRuleCall_1_0 = (RuleCall)cListAssignment_1.eContents().get(0);
		private final RuleCall cSKW_ASSIGNTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Designation:
		//	{Designation} list=DesignatorList SKW_ASSIGN;
		@Override public ParserRule getRule() { return rule; }
		
		//{Designation} list=DesignatorList SKW_ASSIGN
		public Group getGroup() { return cGroup; }
		
		//{Designation}
		public Action getDesignationAction_0() { return cDesignationAction_0; }
		
		//list=DesignatorList
		public Assignment getListAssignment_1() { return cListAssignment_1; }
		
		//DesignatorList
		public RuleCall getListDesignatorListParserRuleCall_1_0() { return cListDesignatorListParserRuleCall_1_0; }
		
		//SKW_ASSIGN
		public RuleCall getSKW_ASSIGNTerminalRuleCall_2() { return cSKW_ASSIGNTerminalRuleCall_2; }
	}
	public class DesignatorListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.DesignatorList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDesignatorListAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDesignatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDesignatorDesignatorParserRuleCall_1_0 = (RuleCall)cDesignatorAssignment_1.eContents().get(0);
		private final Assignment cDesignatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDesignatorDesignatorParserRuleCall_2_0 = (RuleCall)cDesignatorAssignment_2.eContents().get(0);
		
		//DesignatorList:
		//	{DesignatorList} designator+=Designator designator+=Designator*;
		@Override public ParserRule getRule() { return rule; }
		
		//{DesignatorList} designator+=Designator designator+=Designator*
		public Group getGroup() { return cGroup; }
		
		//{DesignatorList}
		public Action getDesignatorListAction_0() { return cDesignatorListAction_0; }
		
		//designator+=Designator
		public Assignment getDesignatorAssignment_1() { return cDesignatorAssignment_1; }
		
		//Designator
		public RuleCall getDesignatorDesignatorParserRuleCall_1_0() { return cDesignatorDesignatorParserRuleCall_1_0; }
		
		//designator+=Designator*
		public Assignment getDesignatorAssignment_2() { return cDesignatorAssignment_2; }
		
		//Designator
		public RuleCall getDesignatorDesignatorParserRuleCall_2_0() { return cDesignatorDesignatorParserRuleCall_2_0; }
	}
	public class DesignatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.Designator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDesignatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cSKW_LEFTBRACKETTerminalRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Assignment cExprAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cExprConstantExpressionParserRuleCall_1_0_1_0 = (RuleCall)cExprAssignment_1_0_1.eContents().get(0);
		private final RuleCall cSKW_RIGHTBRACKETTerminalRuleCall_1_0_2 = (RuleCall)cGroup_1_0.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cSKW_DOTTerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Assignment cIdAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_1_1_0 = (RuleCall)cIdAssignment_1_1_1.eContents().get(0);
		
		//Designator:
		//	{Designator} (SKW_LEFTBRACKET expr=ConstantExpression SKW_RIGHTBRACKET
		//	| SKW_DOT id=ID);
		@Override public ParserRule getRule() { return rule; }
		
		//{Designator} (SKW_LEFTBRACKET expr=ConstantExpression SKW_RIGHTBRACKET | SKW_DOT id=ID)
		public Group getGroup() { return cGroup; }
		
		//{Designator}
		public Action getDesignatorAction_0() { return cDesignatorAction_0; }
		
		//(SKW_LEFTBRACKET expr=ConstantExpression SKW_RIGHTBRACKET | SKW_DOT id=ID)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//SKW_LEFTBRACKET expr=ConstantExpression SKW_RIGHTBRACKET
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//SKW_LEFTBRACKET
		public RuleCall getSKW_LEFTBRACKETTerminalRuleCall_1_0_0() { return cSKW_LEFTBRACKETTerminalRuleCall_1_0_0; }
		
		//expr=ConstantExpression
		public Assignment getExprAssignment_1_0_1() { return cExprAssignment_1_0_1; }
		
		//ConstantExpression
		public RuleCall getExprConstantExpressionParserRuleCall_1_0_1_0() { return cExprConstantExpressionParserRuleCall_1_0_1_0; }
		
		//SKW_RIGHTBRACKET
		public RuleCall getSKW_RIGHTBRACKETTerminalRuleCall_1_0_2() { return cSKW_RIGHTBRACKETTerminalRuleCall_1_0_2; }
		
		//SKW_DOT id=ID
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//SKW_DOT
		public RuleCall getSKW_DOTTerminalRuleCall_1_1_0() { return cSKW_DOTTerminalRuleCall_1_1_0; }
		
		//id=ID
		public Assignment getIdAssignment_1_1_1() { return cIdAssignment_1_1_1; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_1_1_0() { return cIdIDTerminalRuleCall_1_1_1_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExprExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExprAssignmentExpressionParserRuleCall_1_0 = (RuleCall)cExprExprAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cSKW_COMMATerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cExprExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprExprAssignmentExpressionParserRuleCall_2_1_0 = (RuleCall)cExprExprAssignment_2_1.eContents().get(0);
		
		////staticAssertDeclaration: STATICASSERT LEFTPAREN constantExpression COMMA STRINGLITERAL+ RIGHTPAREN SEMI;
		/// *** Expressions *** / Expression:
		//	{Expression} exprExpr+=AssignmentExpression (SKW_COMMA exprExpr+=AssignmentExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Expression} exprExpr+=AssignmentExpression (SKW_COMMA exprExpr+=AssignmentExpression)*
		public Group getGroup() { return cGroup; }
		
		//{Expression}
		public Action getExpressionAction_0() { return cExpressionAction_0; }
		
		//exprExpr+=AssignmentExpression
		public Assignment getExprExprAssignment_1() { return cExprExprAssignment_1; }
		
		//AssignmentExpression
		public RuleCall getExprExprAssignmentExpressionParserRuleCall_1_0() { return cExprExprAssignmentExpressionParserRuleCall_1_0; }
		
		//(SKW_COMMA exprExpr+=AssignmentExpression)*
		public Group getGroup_2() { return cGroup_2; }
		
		//SKW_COMMA
		public RuleCall getSKW_COMMATerminalRuleCall_2_0() { return cSKW_COMMATerminalRuleCall_2_0; }
		
		//exprExpr+=AssignmentExpression
		public Assignment getExprExprAssignment_2_1() { return cExprExprAssignment_2_1; }
		
		//AssignmentExpression
		public RuleCall getExprExprAssignmentExpressionParserRuleCall_2_1_0() { return cExprExprAssignmentExpressionParserRuleCall_2_1_0; }
	}
	public class AssignmentExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.AssignmentExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAssignmentExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cExprAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cExprLvalueParserRuleCall_1_0_0_0 = (RuleCall)cExprAssignment_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cOpAssignmentOperatorParserRuleCall_1_0_1_0 = (RuleCall)cOpAssignment_1_0_1.eContents().get(0);
		private final Assignment cAssignmentExprAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cAssignmentExprAssignmentExpressionParserRuleCall_1_0_2_0 = (RuleCall)cAssignmentExprAssignment_1_0_2.eContents().get(0);
		private final Assignment cExprAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cExprConditionalExpressionParserRuleCall_1_1_0 = (RuleCall)cExprAssignment_1_1.eContents().get(0);
		
		//AssignmentExpression Expression:
		//	{AssignmentExpression} (expr=Lvalue
		//	op=AssignmentOperator
		//	assignmentExpr=AssignmentExpression
		//	| expr=ConditionalExpression)
		@Override public ParserRule getRule() { return rule; }
		
		//{AssignmentExpression} (expr=Lvalue op=AssignmentOperator assignmentExpr=AssignmentExpression |
		//expr=ConditionalExpression)
		public Group getGroup() { return cGroup; }
		
		//{AssignmentExpression}
		public Action getAssignmentExpressionAction_0() { return cAssignmentExpressionAction_0; }
		
		//(expr=Lvalue op=AssignmentOperator assignmentExpr=AssignmentExpression | expr=ConditionalExpression)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//expr=Lvalue op=AssignmentOperator assignmentExpr=AssignmentExpression
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//expr=Lvalue
		public Assignment getExprAssignment_1_0_0() { return cExprAssignment_1_0_0; }
		
		//Lvalue
		public RuleCall getExprLvalueParserRuleCall_1_0_0_0() { return cExprLvalueParserRuleCall_1_0_0_0; }
		
		//op=AssignmentOperator
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//AssignmentOperator
		public RuleCall getOpAssignmentOperatorParserRuleCall_1_0_1_0() { return cOpAssignmentOperatorParserRuleCall_1_0_1_0; }
		
		//assignmentExpr=AssignmentExpression
		public Assignment getAssignmentExprAssignment_1_0_2() { return cAssignmentExprAssignment_1_0_2; }
		
		//AssignmentExpression
		public RuleCall getAssignmentExprAssignmentExpressionParserRuleCall_1_0_2_0() { return cAssignmentExprAssignmentExpressionParserRuleCall_1_0_2_0; }
		
		//expr=ConditionalExpression
		public Assignment getExprAssignment_1_1() { return cExprAssignment_1_1; }
		
		//ConditionalExpression
		public RuleCall getExprConditionalExpressionParserRuleCall_1_1_0() { return cExprConditionalExpressionParserRuleCall_1_1_0; }
	}
	public class LvalueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.Lvalue");
		private final RuleCall cUnaryExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Lvalue Expression:
		//	UnaryExpression
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall() { return cUnaryExpressionParserRuleCall; }
	}
	public class AssignmentOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.AssignmentOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAssignmentOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cOpSKW_ASSIGNTerminalRuleCall_1_0_0 = (RuleCall)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cOpSTARASSIGNTerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cOpAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cOpDIVASSIGNTerminalRuleCall_1_2_0 = (RuleCall)cOpAssignment_1_2.eContents().get(0);
		private final Assignment cOpAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cOpMODASSIGNTerminalRuleCall_1_3_0 = (RuleCall)cOpAssignment_1_3.eContents().get(0);
		private final Assignment cOpAssignment_1_4 = (Assignment)cAlternatives_1.eContents().get(4);
		private final RuleCall cOpPLUSASSIGNTerminalRuleCall_1_4_0 = (RuleCall)cOpAssignment_1_4.eContents().get(0);
		private final Assignment cOpAssignment_1_5 = (Assignment)cAlternatives_1.eContents().get(5);
		private final RuleCall cOpMINUSASSIGNTerminalRuleCall_1_5_0 = (RuleCall)cOpAssignment_1_5.eContents().get(0);
		private final Assignment cOpAssignment_1_6 = (Assignment)cAlternatives_1.eContents().get(6);
		private final RuleCall cOpLEFTSHIFTASSIGNTerminalRuleCall_1_6_0 = (RuleCall)cOpAssignment_1_6.eContents().get(0);
		private final Assignment cOpAssignment_1_7 = (Assignment)cAlternatives_1.eContents().get(7);
		private final RuleCall cOpRIGHTSHIFTASSIGNTerminalRuleCall_1_7_0 = (RuleCall)cOpAssignment_1_7.eContents().get(0);
		private final Assignment cOpAssignment_1_8 = (Assignment)cAlternatives_1.eContents().get(8);
		private final RuleCall cOpANDASSIGNTerminalRuleCall_1_8_0 = (RuleCall)cOpAssignment_1_8.eContents().get(0);
		private final Assignment cOpAssignment_1_9 = (Assignment)cAlternatives_1.eContents().get(9);
		private final RuleCall cOpXORASSIGNTerminalRuleCall_1_9_0 = (RuleCall)cOpAssignment_1_9.eContents().get(0);
		private final Assignment cOpAssignment_1_10 = (Assignment)cAlternatives_1.eContents().get(10);
		private final RuleCall cOpORASSIGNTerminalRuleCall_1_10_0 = (RuleCall)cOpAssignment_1_10.eContents().get(0);
		
		//AssignmentOperator:
		//	{AssignmentOperator} (op=SKW_ASSIGN
		//	| op=STARASSIGN
		//	| op=DIVASSIGN
		//	| op=MODASSIGN
		//	| op=PLUSASSIGN
		//	| op=MINUSASSIGN
		//	| op=LEFTSHIFTASSIGN
		//	| op=RIGHTSHIFTASSIGN
		//	| op=ANDASSIGN
		//	| op=XORASSIGN
		//	| op=ORASSIGN);
		@Override public ParserRule getRule() { return rule; }
		
		//{AssignmentOperator} (op=SKW_ASSIGN | op=STARASSIGN | op=DIVASSIGN | op=MODASSIGN | op=PLUSASSIGN | op=MINUSASSIGN |
		//op=LEFTSHIFTASSIGN | op=RIGHTSHIFTASSIGN | op=ANDASSIGN | op=XORASSIGN | op=ORASSIGN)
		public Group getGroup() { return cGroup; }
		
		//{AssignmentOperator}
		public Action getAssignmentOperatorAction_0() { return cAssignmentOperatorAction_0; }
		
		//(op=SKW_ASSIGN | op=STARASSIGN | op=DIVASSIGN | op=MODASSIGN | op=PLUSASSIGN | op=MINUSASSIGN | op=LEFTSHIFTASSIGN |
		//op=RIGHTSHIFTASSIGN | op=ANDASSIGN | op=XORASSIGN | op=ORASSIGN)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//op=SKW_ASSIGN
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }
		
		//SKW_ASSIGN
		public RuleCall getOpSKW_ASSIGNTerminalRuleCall_1_0_0() { return cOpSKW_ASSIGNTerminalRuleCall_1_0_0; }
		
		//op=STARASSIGN
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//STARASSIGN
		public RuleCall getOpSTARASSIGNTerminalRuleCall_1_1_0() { return cOpSTARASSIGNTerminalRuleCall_1_1_0; }
		
		//op=DIVASSIGN
		public Assignment getOpAssignment_1_2() { return cOpAssignment_1_2; }
		
		//DIVASSIGN
		public RuleCall getOpDIVASSIGNTerminalRuleCall_1_2_0() { return cOpDIVASSIGNTerminalRuleCall_1_2_0; }
		
		//op=MODASSIGN
		public Assignment getOpAssignment_1_3() { return cOpAssignment_1_3; }
		
		//MODASSIGN
		public RuleCall getOpMODASSIGNTerminalRuleCall_1_3_0() { return cOpMODASSIGNTerminalRuleCall_1_3_0; }
		
		//op=PLUSASSIGN
		public Assignment getOpAssignment_1_4() { return cOpAssignment_1_4; }
		
		//PLUSASSIGN
		public RuleCall getOpPLUSASSIGNTerminalRuleCall_1_4_0() { return cOpPLUSASSIGNTerminalRuleCall_1_4_0; }
		
		//op=MINUSASSIGN
		public Assignment getOpAssignment_1_5() { return cOpAssignment_1_5; }
		
		//MINUSASSIGN
		public RuleCall getOpMINUSASSIGNTerminalRuleCall_1_5_0() { return cOpMINUSASSIGNTerminalRuleCall_1_5_0; }
		
		//op=LEFTSHIFTASSIGN
		public Assignment getOpAssignment_1_6() { return cOpAssignment_1_6; }
		
		//LEFTSHIFTASSIGN
		public RuleCall getOpLEFTSHIFTASSIGNTerminalRuleCall_1_6_0() { return cOpLEFTSHIFTASSIGNTerminalRuleCall_1_6_0; }
		
		//op=RIGHTSHIFTASSIGN
		public Assignment getOpAssignment_1_7() { return cOpAssignment_1_7; }
		
		//RIGHTSHIFTASSIGN
		public RuleCall getOpRIGHTSHIFTASSIGNTerminalRuleCall_1_7_0() { return cOpRIGHTSHIFTASSIGNTerminalRuleCall_1_7_0; }
		
		//op=ANDASSIGN
		public Assignment getOpAssignment_1_8() { return cOpAssignment_1_8; }
		
		//ANDASSIGN
		public RuleCall getOpANDASSIGNTerminalRuleCall_1_8_0() { return cOpANDASSIGNTerminalRuleCall_1_8_0; }
		
		//op=XORASSIGN
		public Assignment getOpAssignment_1_9() { return cOpAssignment_1_9; }
		
		//XORASSIGN
		public RuleCall getOpXORASSIGNTerminalRuleCall_1_9_0() { return cOpXORASSIGNTerminalRuleCall_1_9_0; }
		
		//op=ORASSIGN
		public Assignment getOpAssignment_1_10() { return cOpAssignment_1_10; }
		
		//ORASSIGN
		public RuleCall getOpORASSIGNTerminalRuleCall_1_10_0() { return cOpORASSIGNTerminalRuleCall_1_10_0; }
	}
	public class ConditionalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.ConditionalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConditionalExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprLogicalOrExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cSKW_QUESTIONTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cQExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cQExprExpressionParserRuleCall_2_1_0 = (RuleCall)cQExprAssignment_2_1.eContents().get(0);
		private final RuleCall cSKW_COLONTerminalRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Assignment cCExprAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cCExprConditionalExpressionParserRuleCall_2_3_0 = (RuleCall)cCExprAssignment_2_3.eContents().get(0);
		
		//ConditionalExpression Expression:
		//	{ConditionalExpression} expr=LogicalOrExpression (SKW_QUESTION qExpr=Expression SKW_COLON
		//	cExpr=ConditionalExpression)?
		@Override public ParserRule getRule() { return rule; }
		
		//{ConditionalExpression} expr=LogicalOrExpression (SKW_QUESTION qExpr=Expression SKW_COLON cExpr=ConditionalExpression)?
		public Group getGroup() { return cGroup; }
		
		//{ConditionalExpression}
		public Action getConditionalExpressionAction_0() { return cConditionalExpressionAction_0; }
		
		//expr=LogicalOrExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//LogicalOrExpression
		public RuleCall getExprLogicalOrExpressionParserRuleCall_1_0() { return cExprLogicalOrExpressionParserRuleCall_1_0; }
		
		//(SKW_QUESTION qExpr=Expression SKW_COLON cExpr=ConditionalExpression)?
		public Group getGroup_2() { return cGroup_2; }
		
		//SKW_QUESTION
		public RuleCall getSKW_QUESTIONTerminalRuleCall_2_0() { return cSKW_QUESTIONTerminalRuleCall_2_0; }
		
		//qExpr=Expression
		public Assignment getQExprAssignment_2_1() { return cQExprAssignment_2_1; }
		
		//Expression
		public RuleCall getQExprExpressionParserRuleCall_2_1_0() { return cQExprExpressionParserRuleCall_2_1_0; }
		
		//SKW_COLON
		public RuleCall getSKW_COLONTerminalRuleCall_2_2() { return cSKW_COLONTerminalRuleCall_2_2; }
		
		//cExpr=ConditionalExpression
		public Assignment getCExprAssignment_2_3() { return cCExprAssignment_2_3; }
		
		//ConditionalExpression
		public RuleCall getCExprConditionalExpressionParserRuleCall_2_3_0() { return cCExprConditionalExpressionParserRuleCall_2_3_0; }
	}
	public class LogicalOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.LogicalOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLogicalOrExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprLogicalAndExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cSKW_ORORTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprLogicalAndExpressionParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		
		//LogicalOrExpression Expression:
		//	{LogicalOrExpression} expr+=LogicalAndExpression (SKW_OROR expr+=LogicalAndExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//{LogicalOrExpression} expr+=LogicalAndExpression (SKW_OROR expr+=LogicalAndExpression)*
		public Group getGroup() { return cGroup; }
		
		//{LogicalOrExpression}
		public Action getLogicalOrExpressionAction_0() { return cLogicalOrExpressionAction_0; }
		
		//expr+=LogicalAndExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//LogicalAndExpression
		public RuleCall getExprLogicalAndExpressionParserRuleCall_1_0() { return cExprLogicalAndExpressionParserRuleCall_1_0; }
		
		//(SKW_OROR expr+=LogicalAndExpression)*
		public Group getGroup_2() { return cGroup_2; }
		
		//SKW_OROR
		public RuleCall getSKW_ORORTerminalRuleCall_2_0() { return cSKW_ORORTerminalRuleCall_2_0; }
		
		//expr+=LogicalAndExpression
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }
		
		//LogicalAndExpression
		public RuleCall getExprLogicalAndExpressionParserRuleCall_2_1_0() { return cExprLogicalAndExpressionParserRuleCall_2_1_0; }
	}
	public class LogicalAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.LogicalAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLogicalAndExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprInclusiveOrExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cSKW_ANDANDTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprInclusiveOrExpressionParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		
		//LogicalAndExpression Expression:
		//	{LogicalAndExpression} expr+=InclusiveOrExpression (SKW_ANDAND expr+=InclusiveOrExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//{LogicalAndExpression} expr+=InclusiveOrExpression (SKW_ANDAND expr+=InclusiveOrExpression)*
		public Group getGroup() { return cGroup; }
		
		//{LogicalAndExpression}
		public Action getLogicalAndExpressionAction_0() { return cLogicalAndExpressionAction_0; }
		
		//expr+=InclusiveOrExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//InclusiveOrExpression
		public RuleCall getExprInclusiveOrExpressionParserRuleCall_1_0() { return cExprInclusiveOrExpressionParserRuleCall_1_0; }
		
		//(SKW_ANDAND expr+=InclusiveOrExpression)*
		public Group getGroup_2() { return cGroup_2; }
		
		//SKW_ANDAND
		public RuleCall getSKW_ANDANDTerminalRuleCall_2_0() { return cSKW_ANDANDTerminalRuleCall_2_0; }
		
		//expr+=InclusiveOrExpression
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }
		
		//InclusiveOrExpression
		public RuleCall getExprInclusiveOrExpressionParserRuleCall_2_1_0() { return cExprInclusiveOrExpressionParserRuleCall_2_1_0; }
	}
	public class InclusiveOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.InclusiveOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInclusiveOrExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExclusiveOrExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cSKW_ORTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprExclusiveOrExpressionParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		
		//InclusiveOrExpression Expression:
		//	{InclusiveOrExpression} expr+=ExclusiveOrExpression (SKW_OR expr+=ExclusiveOrExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//{InclusiveOrExpression} expr+=ExclusiveOrExpression (SKW_OR expr+=ExclusiveOrExpression)*
		public Group getGroup() { return cGroup; }
		
		//{InclusiveOrExpression}
		public Action getInclusiveOrExpressionAction_0() { return cInclusiveOrExpressionAction_0; }
		
		//expr+=ExclusiveOrExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//ExclusiveOrExpression
		public RuleCall getExprExclusiveOrExpressionParserRuleCall_1_0() { return cExprExclusiveOrExpressionParserRuleCall_1_0; }
		
		//(SKW_OR expr+=ExclusiveOrExpression)*
		public Group getGroup_2() { return cGroup_2; }
		
		//SKW_OR
		public RuleCall getSKW_ORTerminalRuleCall_2_0() { return cSKW_ORTerminalRuleCall_2_0; }
		
		//expr+=ExclusiveOrExpression
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }
		
		//ExclusiveOrExpression
		public RuleCall getExprExclusiveOrExpressionParserRuleCall_2_1_0() { return cExprExclusiveOrExpressionParserRuleCall_2_1_0; }
	}
	public class ExclusiveOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.ExclusiveOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExclusiveOrExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprAndExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cSKW_CARETTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprAndExpressionParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		
		//ExclusiveOrExpression Expression:
		//	{ExclusiveOrExpression} expr+=AndExpression (SKW_CARET expr+=AndExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//{ExclusiveOrExpression} expr+=AndExpression (SKW_CARET expr+=AndExpression)*
		public Group getGroup() { return cGroup; }
		
		//{ExclusiveOrExpression}
		public Action getExclusiveOrExpressionAction_0() { return cExclusiveOrExpressionAction_0; }
		
		//expr+=AndExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//AndExpression
		public RuleCall getExprAndExpressionParserRuleCall_1_0() { return cExprAndExpressionParserRuleCall_1_0; }
		
		//(SKW_CARET expr+=AndExpression)*
		public Group getGroup_2() { return cGroup_2; }
		
		//SKW_CARET
		public RuleCall getSKW_CARETTerminalRuleCall_2_0() { return cSKW_CARETTerminalRuleCall_2_0; }
		
		//expr+=AndExpression
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }
		
		//AndExpression
		public RuleCall getExprAndExpressionParserRuleCall_2_1_0() { return cExprAndExpressionParserRuleCall_2_1_0; }
	}
	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAndExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprEqualityExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cSKW_ANDTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprEqualityExpressionParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		
		//AndExpression Expression:
		//	{AndExpression} expr+=EqualityExpression (SKW_AND expr+=EqualityExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//{AndExpression} expr+=EqualityExpression (SKW_AND expr+=EqualityExpression)*
		public Group getGroup() { return cGroup; }
		
		//{AndExpression}
		public Action getAndExpressionAction_0() { return cAndExpressionAction_0; }
		
		//expr+=EqualityExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//EqualityExpression
		public RuleCall getExprEqualityExpressionParserRuleCall_1_0() { return cExprEqualityExpressionParserRuleCall_1_0; }
		
		//(SKW_AND expr+=EqualityExpression)*
		public Group getGroup_2() { return cGroup_2; }
		
		//SKW_AND
		public RuleCall getSKW_ANDTerminalRuleCall_2_0() { return cSKW_ANDTerminalRuleCall_2_0; }
		
		//expr+=EqualityExpression
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }
		
		//EqualityExpression
		public RuleCall getExprEqualityExpressionParserRuleCall_2_1_0() { return cExprEqualityExpressionParserRuleCall_2_1_0; }
	}
	public class EqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.EqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEqualityExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprRelationalExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Assignment cOpAssignment_2_0_0 = (Assignment)cAlternatives_2_0.eContents().get(0);
		private final RuleCall cOpSKW_EQUALTerminalRuleCall_2_0_0_0 = (RuleCall)cOpAssignment_2_0_0.eContents().get(0);
		private final Assignment cOpAssignment_2_0_1 = (Assignment)cAlternatives_2_0.eContents().get(1);
		private final RuleCall cOpSKW_NOTEQUALTerminalRuleCall_2_0_1_0 = (RuleCall)cOpAssignment_2_0_1.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprRelationalExpressionParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		
		//EqualityExpression Expression:
		//	{EqualityExpression} expr+=RelationalExpression ((op+=SKW_EQUAL | op+=SKW_NOTEQUAL) expr+=RelationalExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//{EqualityExpression} expr+=RelationalExpression ((op+=SKW_EQUAL | op+=SKW_NOTEQUAL) expr+=RelationalExpression)*
		public Group getGroup() { return cGroup; }
		
		//{EqualityExpression}
		public Action getEqualityExpressionAction_0() { return cEqualityExpressionAction_0; }
		
		//expr+=RelationalExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//RelationalExpression
		public RuleCall getExprRelationalExpressionParserRuleCall_1_0() { return cExprRelationalExpressionParserRuleCall_1_0; }
		
		//((op+=SKW_EQUAL | op+=SKW_NOTEQUAL) expr+=RelationalExpression)*
		public Group getGroup_2() { return cGroup_2; }
		
		//(op+=SKW_EQUAL | op+=SKW_NOTEQUAL)
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//op+=SKW_EQUAL
		public Assignment getOpAssignment_2_0_0() { return cOpAssignment_2_0_0; }
		
		//SKW_EQUAL
		public RuleCall getOpSKW_EQUALTerminalRuleCall_2_0_0_0() { return cOpSKW_EQUALTerminalRuleCall_2_0_0_0; }
		
		//op+=SKW_NOTEQUAL
		public Assignment getOpAssignment_2_0_1() { return cOpAssignment_2_0_1; }
		
		//SKW_NOTEQUAL
		public RuleCall getOpSKW_NOTEQUALTerminalRuleCall_2_0_1_0() { return cOpSKW_NOTEQUALTerminalRuleCall_2_0_1_0; }
		
		//expr+=RelationalExpression
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }
		
		//RelationalExpression
		public RuleCall getExprRelationalExpressionParserRuleCall_2_1_0() { return cExprRelationalExpressionParserRuleCall_2_1_0; }
	}
	public class RelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.RelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRelationalExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprShiftExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Assignment cOpAssignment_2_0_0 = (Assignment)cAlternatives_2_0.eContents().get(0);
		private final RuleCall cOpSKW_LESSTerminalRuleCall_2_0_0_0 = (RuleCall)cOpAssignment_2_0_0.eContents().get(0);
		private final Assignment cOpAssignment_2_0_1 = (Assignment)cAlternatives_2_0.eContents().get(1);
		private final RuleCall cOpSKW_GREATERTerminalRuleCall_2_0_1_0 = (RuleCall)cOpAssignment_2_0_1.eContents().get(0);
		private final Assignment cOpAssignment_2_0_2 = (Assignment)cAlternatives_2_0.eContents().get(2);
		private final RuleCall cOpSKW_LESSEQUALTerminalRuleCall_2_0_2_0 = (RuleCall)cOpAssignment_2_0_2.eContents().get(0);
		private final Assignment cOpAssignment_2_0_3 = (Assignment)cAlternatives_2_0.eContents().get(3);
		private final RuleCall cOpSKW_GREATEREQUALTerminalRuleCall_2_0_3_0 = (RuleCall)cOpAssignment_2_0_3.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprShiftExpressionParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		
		//RelationalExpression Expression:
		//	{RelationalExpression} expr+=ShiftExpression ((op+=SKW_LESS | op+=SKW_GREATER | op+=SKW_LESSEQUAL |
		//	op+=SKW_GREATEREQUAL) expr+=ShiftExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//{RelationalExpression} expr+=ShiftExpression ((op+=SKW_LESS | op+=SKW_GREATER | op+=SKW_LESSEQUAL |
		//op+=SKW_GREATEREQUAL) expr+=ShiftExpression)*
		public Group getGroup() { return cGroup; }
		
		//{RelationalExpression}
		public Action getRelationalExpressionAction_0() { return cRelationalExpressionAction_0; }
		
		//expr+=ShiftExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//ShiftExpression
		public RuleCall getExprShiftExpressionParserRuleCall_1_0() { return cExprShiftExpressionParserRuleCall_1_0; }
		
		//((op+=SKW_LESS | op+=SKW_GREATER | op+=SKW_LESSEQUAL | op+=SKW_GREATEREQUAL) expr+=ShiftExpression)*
		public Group getGroup_2() { return cGroup_2; }
		
		//(op+=SKW_LESS | op+=SKW_GREATER | op+=SKW_LESSEQUAL | op+=SKW_GREATEREQUAL)
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//op+=SKW_LESS
		public Assignment getOpAssignment_2_0_0() { return cOpAssignment_2_0_0; }
		
		//SKW_LESS
		public RuleCall getOpSKW_LESSTerminalRuleCall_2_0_0_0() { return cOpSKW_LESSTerminalRuleCall_2_0_0_0; }
		
		//op+=SKW_GREATER
		public Assignment getOpAssignment_2_0_1() { return cOpAssignment_2_0_1; }
		
		//SKW_GREATER
		public RuleCall getOpSKW_GREATERTerminalRuleCall_2_0_1_0() { return cOpSKW_GREATERTerminalRuleCall_2_0_1_0; }
		
		//op+=SKW_LESSEQUAL
		public Assignment getOpAssignment_2_0_2() { return cOpAssignment_2_0_2; }
		
		//SKW_LESSEQUAL
		public RuleCall getOpSKW_LESSEQUALTerminalRuleCall_2_0_2_0() { return cOpSKW_LESSEQUALTerminalRuleCall_2_0_2_0; }
		
		//op+=SKW_GREATEREQUAL
		public Assignment getOpAssignment_2_0_3() { return cOpAssignment_2_0_3; }
		
		//SKW_GREATEREQUAL
		public RuleCall getOpSKW_GREATEREQUALTerminalRuleCall_2_0_3_0() { return cOpSKW_GREATEREQUALTerminalRuleCall_2_0_3_0; }
		
		//expr+=ShiftExpression
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }
		
		//ShiftExpression
		public RuleCall getExprShiftExpressionParserRuleCall_2_1_0() { return cExprShiftExpressionParserRuleCall_2_1_0; }
	}
	public class ShiftExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.ShiftExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cShiftExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprAdditiveExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Assignment cOpAssignment_2_0_0 = (Assignment)cAlternatives_2_0.eContents().get(0);
		private final RuleCall cOpSKW_LEFTSHIFTTerminalRuleCall_2_0_0_0 = (RuleCall)cOpAssignment_2_0_0.eContents().get(0);
		private final Assignment cOpAssignment_2_0_1 = (Assignment)cAlternatives_2_0.eContents().get(1);
		private final RuleCall cOpSKW_RIGHTSHIFTTerminalRuleCall_2_0_1_0 = (RuleCall)cOpAssignment_2_0_1.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprAdditiveExpressionParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		
		//ShiftExpression Expression:
		//	{ShiftExpression} expr+=AdditiveExpression ((op+=SKW_LEFTSHIFT | op+=SKW_RIGHTSHIFT) expr+=AdditiveExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//{ShiftExpression} expr+=AdditiveExpression ((op+=SKW_LEFTSHIFT | op+=SKW_RIGHTSHIFT) expr+=AdditiveExpression)*
		public Group getGroup() { return cGroup; }
		
		//{ShiftExpression}
		public Action getShiftExpressionAction_0() { return cShiftExpressionAction_0; }
		
		//expr+=AdditiveExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//AdditiveExpression
		public RuleCall getExprAdditiveExpressionParserRuleCall_1_0() { return cExprAdditiveExpressionParserRuleCall_1_0; }
		
		//((op+=SKW_LEFTSHIFT | op+=SKW_RIGHTSHIFT) expr+=AdditiveExpression)*
		public Group getGroup_2() { return cGroup_2; }
		
		//(op+=SKW_LEFTSHIFT | op+=SKW_RIGHTSHIFT)
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//op+=SKW_LEFTSHIFT
		public Assignment getOpAssignment_2_0_0() { return cOpAssignment_2_0_0; }
		
		//SKW_LEFTSHIFT
		public RuleCall getOpSKW_LEFTSHIFTTerminalRuleCall_2_0_0_0() { return cOpSKW_LEFTSHIFTTerminalRuleCall_2_0_0_0; }
		
		//op+=SKW_RIGHTSHIFT
		public Assignment getOpAssignment_2_0_1() { return cOpAssignment_2_0_1; }
		
		//SKW_RIGHTSHIFT
		public RuleCall getOpSKW_RIGHTSHIFTTerminalRuleCall_2_0_1_0() { return cOpSKW_RIGHTSHIFTTerminalRuleCall_2_0_1_0; }
		
		//expr+=AdditiveExpression
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }
		
		//AdditiveExpression
		public RuleCall getExprAdditiveExpressionParserRuleCall_2_1_0() { return cExprAdditiveExpressionParserRuleCall_2_1_0; }
	}
	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAdditiveExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprMultiplicativeExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Assignment cOpAssignment_2_0_0 = (Assignment)cAlternatives_2_0.eContents().get(0);
		private final RuleCall cOpSKW_PLUSTerminalRuleCall_2_0_0_0 = (RuleCall)cOpAssignment_2_0_0.eContents().get(0);
		private final Assignment cOpAssignment_2_0_1 = (Assignment)cAlternatives_2_0.eContents().get(1);
		private final RuleCall cOpSKW_MINUSTerminalRuleCall_2_0_1_0 = (RuleCall)cOpAssignment_2_0_1.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprMultiplicativeExpressionParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		
		//AdditiveExpression Expression:
		//	{AdditiveExpression} expr+=MultiplicativeExpression ((op+=SKW_PLUS | op+=SKW_MINUS) expr+=MultiplicativeExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//{AdditiveExpression} expr+=MultiplicativeExpression ((op+=SKW_PLUS | op+=SKW_MINUS) expr+=MultiplicativeExpression)*
		public Group getGroup() { return cGroup; }
		
		//{AdditiveExpression}
		public Action getAdditiveExpressionAction_0() { return cAdditiveExpressionAction_0; }
		
		//expr+=MultiplicativeExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//MultiplicativeExpression
		public RuleCall getExprMultiplicativeExpressionParserRuleCall_1_0() { return cExprMultiplicativeExpressionParserRuleCall_1_0; }
		
		//((op+=SKW_PLUS | op+=SKW_MINUS) expr+=MultiplicativeExpression)*
		public Group getGroup_2() { return cGroup_2; }
		
		//(op+=SKW_PLUS | op+=SKW_MINUS)
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//op+=SKW_PLUS
		public Assignment getOpAssignment_2_0_0() { return cOpAssignment_2_0_0; }
		
		//SKW_PLUS
		public RuleCall getOpSKW_PLUSTerminalRuleCall_2_0_0_0() { return cOpSKW_PLUSTerminalRuleCall_2_0_0_0; }
		
		//op+=SKW_MINUS
		public Assignment getOpAssignment_2_0_1() { return cOpAssignment_2_0_1; }
		
		//SKW_MINUS
		public RuleCall getOpSKW_MINUSTerminalRuleCall_2_0_1_0() { return cOpSKW_MINUSTerminalRuleCall_2_0_1_0; }
		
		//expr+=MultiplicativeExpression
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }
		
		//MultiplicativeExpression
		public RuleCall getExprMultiplicativeExpressionParserRuleCall_2_1_0() { return cExprMultiplicativeExpressionParserRuleCall_2_1_0; }
	}
	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMultiplicativeExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprCastExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Assignment cOpAssignment_2_0_0 = (Assignment)cAlternatives_2_0.eContents().get(0);
		private final RuleCall cOpSKW_STARTerminalRuleCall_2_0_0_0 = (RuleCall)cOpAssignment_2_0_0.eContents().get(0);
		private final Assignment cOpAssignment_2_0_1 = (Assignment)cAlternatives_2_0.eContents().get(1);
		private final RuleCall cOpSKW_DIVTerminalRuleCall_2_0_1_0 = (RuleCall)cOpAssignment_2_0_1.eContents().get(0);
		private final Assignment cOpAssignment_2_0_2 = (Assignment)cAlternatives_2_0.eContents().get(2);
		private final RuleCall cOpSKW_MODTerminalRuleCall_2_0_2_0 = (RuleCall)cOpAssignment_2_0_2.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprCastExpressionParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		
		//MultiplicativeExpression Expression:
		//	{MultiplicativeExpression} expr+=CastExpression ((op+=SKW_STAR | op+=SKW_DIV | op+=SKW_MOD) expr+=CastExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//{MultiplicativeExpression} expr+=CastExpression ((op+=SKW_STAR | op+=SKW_DIV | op+=SKW_MOD) expr+=CastExpression)*
		public Group getGroup() { return cGroup; }
		
		//{MultiplicativeExpression}
		public Action getMultiplicativeExpressionAction_0() { return cMultiplicativeExpressionAction_0; }
		
		//expr+=CastExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//CastExpression
		public RuleCall getExprCastExpressionParserRuleCall_1_0() { return cExprCastExpressionParserRuleCall_1_0; }
		
		//((op+=SKW_STAR | op+=SKW_DIV | op+=SKW_MOD) expr+=CastExpression)*
		public Group getGroup_2() { return cGroup_2; }
		
		//(op+=SKW_STAR | op+=SKW_DIV | op+=SKW_MOD)
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//op+=SKW_STAR
		public Assignment getOpAssignment_2_0_0() { return cOpAssignment_2_0_0; }
		
		//SKW_STAR
		public RuleCall getOpSKW_STARTerminalRuleCall_2_0_0_0() { return cOpSKW_STARTerminalRuleCall_2_0_0_0; }
		
		//op+=SKW_DIV
		public Assignment getOpAssignment_2_0_1() { return cOpAssignment_2_0_1; }
		
		//SKW_DIV
		public RuleCall getOpSKW_DIVTerminalRuleCall_2_0_1_0() { return cOpSKW_DIVTerminalRuleCall_2_0_1_0; }
		
		//op+=SKW_MOD
		public Assignment getOpAssignment_2_0_2() { return cOpAssignment_2_0_2; }
		
		//SKW_MOD
		public RuleCall getOpSKW_MODTerminalRuleCall_2_0_2_0() { return cOpSKW_MODTerminalRuleCall_2_0_2_0; }
		
		//expr+=CastExpression
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }
		
		//CastExpression
		public RuleCall getExprCastExpressionParserRuleCall_2_1_0() { return cExprCastExpressionParserRuleCall_2_1_0; }
	}
	public class CastExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.CastExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCastExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cSKW_LEFTPARENTerminalRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Assignment cTypeAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cTypeTypeNameParserRuleCall_1_0_1_0 = (RuleCall)cTypeAssignment_1_0_1.eContents().get(0);
		private final RuleCall cSKW_RIGHTPARENTerminalRuleCall_1_0_2 = (RuleCall)cGroup_1_0.eContents().get(2);
		private final Assignment cExprAssignment_1_0_3 = (Assignment)cGroup_1_0.eContents().get(3);
		private final RuleCall cExprCastExpressionParserRuleCall_1_0_3_0 = (RuleCall)cExprAssignment_1_0_3.eContents().get(0);
		private final Assignment cExprAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cExprUnaryExpressionParserRuleCall_1_1_0 = (RuleCall)cExprAssignment_1_1.eContents().get(0);
		
		//CastExpression Expression initRuleAction { at.jku.weiner.c.parser.utils.Log.log("In cast expression"); }:
		//	{CastExpression} (SKW_LEFTPAREN type=TypeName SKW_RIGHTPAREN
		//	expr=CastExpression
		//	| expr=UnaryExpression
		//	//|	'__extension__' SKW_LEFTPAREN type=TypeName SKW_RIGHTPAREN castExpr=CastExpression
		//)
		@Override public ParserRule getRule() { return rule; }
		
		//{CastExpression} (SKW_LEFTPAREN type=TypeName SKW_RIGHTPAREN expr=CastExpression | expr=UnaryExpression //|	'__extension__' SKW_LEFTPAREN type=TypeName SKW_RIGHTPAREN castExpr=CastExpression
		//)
		public Group getGroup() { return cGroup; }
		
		//{CastExpression}
		public Action getCastExpressionAction_0() { return cCastExpressionAction_0; }
		
		//(SKW_LEFTPAREN type=TypeName SKW_RIGHTPAREN expr=CastExpression | expr=UnaryExpression //|	'__extension__' SKW_LEFTPAREN type=TypeName SKW_RIGHTPAREN castExpr=CastExpression
		//)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//SKW_LEFTPAREN type=TypeName SKW_RIGHTPAREN expr=CastExpression
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//SKW_LEFTPAREN
		public RuleCall getSKW_LEFTPARENTerminalRuleCall_1_0_0() { return cSKW_LEFTPARENTerminalRuleCall_1_0_0; }
		
		//type=TypeName
		public Assignment getTypeAssignment_1_0_1() { return cTypeAssignment_1_0_1; }
		
		//TypeName
		public RuleCall getTypeTypeNameParserRuleCall_1_0_1_0() { return cTypeTypeNameParserRuleCall_1_0_1_0; }
		
		//SKW_RIGHTPAREN
		public RuleCall getSKW_RIGHTPARENTerminalRuleCall_1_0_2() { return cSKW_RIGHTPARENTerminalRuleCall_1_0_2; }
		
		//expr=CastExpression
		public Assignment getExprAssignment_1_0_3() { return cExprAssignment_1_0_3; }
		
		//CastExpression
		public RuleCall getExprCastExpressionParserRuleCall_1_0_3_0() { return cExprCastExpressionParserRuleCall_1_0_3_0; }
		
		//expr=UnaryExpression
		public Assignment getExprAssignment_1_1() { return cExprAssignment_1_1; }
		
		//UnaryExpression
		public RuleCall getExprUnaryExpressionParserRuleCall_1_1_0() { return cExprUnaryExpressionParserRuleCall_1_1_0; }
	}
	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.UnaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnaryExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cExprPostfixExpressionParserRuleCall_1_0_0 = (RuleCall)cExprAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cPlusplusAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cPlusplusSKW_PLUSPLUSTerminalRuleCall_1_1_0_0 = (RuleCall)cPlusplusAssignment_1_1_0.eContents().get(0);
		private final Assignment cExprAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cExprUnaryExpressionParserRuleCall_1_1_1_0 = (RuleCall)cExprAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Assignment cMinusminusAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cMinusminusSKW_MINUSMINUSTerminalRuleCall_1_2_0_0 = (RuleCall)cMinusminusAssignment_1_2_0.eContents().get(0);
		private final Assignment cExprAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cExprUnaryExpressionParserRuleCall_1_2_1_0 = (RuleCall)cExprAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Assignment cOpAssignment_1_3_0 = (Assignment)cGroup_1_3.eContents().get(0);
		private final RuleCall cOpUnaryOperatorParserRuleCall_1_3_0_0 = (RuleCall)cOpAssignment_1_3_0.eContents().get(0);
		private final Assignment cExprAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cExprCastExpressionParserRuleCall_1_3_1_0 = (RuleCall)cExprAssignment_1_3_1.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cAlternatives_1.eContents().get(4);
		private final Assignment cSizeOfAssignment_1_4_0 = (Assignment)cGroup_1_4.eContents().get(0);
		private final RuleCall cSizeOfKW_SIZEOFTerminalRuleCall_1_4_0_0 = (RuleCall)cSizeOfAssignment_1_4_0.eContents().get(0);
		private final RuleCall cSKW_LEFTPARENTerminalRuleCall_1_4_1 = (RuleCall)cGroup_1_4.eContents().get(1);
		private final Assignment cTypeNameAssignment_1_4_2 = (Assignment)cGroup_1_4.eContents().get(2);
		private final RuleCall cTypeNameTypeNameParserRuleCall_1_4_2_0 = (RuleCall)cTypeNameAssignment_1_4_2.eContents().get(0);
		private final RuleCall cSKW_RIGHTPARENTerminalRuleCall_1_4_3 = (RuleCall)cGroup_1_4.eContents().get(3);
		private final Group cGroup_1_5 = (Group)cAlternatives_1.eContents().get(5);
		private final Assignment cSizeOfAssignment_1_5_0 = (Assignment)cGroup_1_5.eContents().get(0);
		private final RuleCall cSizeOfKW_SIZEOFTerminalRuleCall_1_5_0_0 = (RuleCall)cSizeOfAssignment_1_5_0.eContents().get(0);
		private final Assignment cExprAssignment_1_5_1 = (Assignment)cGroup_1_5.eContents().get(1);
		private final RuleCall cExprUnaryExpressionParserRuleCall_1_5_1_0 = (RuleCall)cExprAssignment_1_5_1.eContents().get(0);
		private final Group cGroup_1_6 = (Group)cAlternatives_1.eContents().get(6);
		private final Assignment cAlignOfAssignment_1_6_0 = (Assignment)cGroup_1_6.eContents().get(0);
		private final Alternatives cAlignOfAlternatives_1_6_0_0 = (Alternatives)cAlignOfAssignment_1_6_0.eContents().get(0);
		private final RuleCall cAlignOfKW_ALIGNOF1TerminalRuleCall_1_6_0_0_0 = (RuleCall)cAlignOfAlternatives_1_6_0_0.eContents().get(0);
		private final RuleCall cAlignOfKW_ALIGNOF2TerminalRuleCall_1_6_0_0_1 = (RuleCall)cAlignOfAlternatives_1_6_0_0.eContents().get(1);
		private final RuleCall cAlignOfKW_ALIGNOF3TerminalRuleCall_1_6_0_0_2 = (RuleCall)cAlignOfAlternatives_1_6_0_0.eContents().get(2);
		private final RuleCall cSKW_LEFTPARENTerminalRuleCall_1_6_1 = (RuleCall)cGroup_1_6.eContents().get(1);
		private final Assignment cTypeNameAssignment_1_6_2 = (Assignment)cGroup_1_6.eContents().get(2);
		private final RuleCall cTypeNameTypeNameParserRuleCall_1_6_2_0 = (RuleCall)cTypeNameAssignment_1_6_2.eContents().get(0);
		private final RuleCall cSKW_RIGHTPARENTerminalRuleCall_1_6_3 = (RuleCall)cGroup_1_6.eContents().get(3);
		private final Group cGroup_1_7 = (Group)cAlternatives_1.eContents().get(7);
		private final Assignment cAndandAssignment_1_7_0 = (Assignment)cGroup_1_7.eContents().get(0);
		private final RuleCall cAndandSKW_ANDANDTerminalRuleCall_1_7_0_0 = (RuleCall)cAndandAssignment_1_7_0.eContents().get(0);
		private final Assignment cIdAssignment_1_7_1 = (Assignment)cGroup_1_7.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_7_1_0 = (RuleCall)cIdAssignment_1_7_1.eContents().get(0);
		
		//UnaryExpression Expression initRuleAction { at.jku.weiner.c.parser.utils.Log.log("In unary expression"); }:
		//	{UnaryExpression} (expr=PostfixExpression
		//	| plusplus=SKW_PLUSPLUS expr=UnaryExpression
		//	| minusminus=SKW_MINUSMINUS expr=UnaryExpression
		//	| op=UnaryOperator expr=CastExpression
		//	| sizeOf=KW_SIZEOF SKW_LEFTPAREN typeName=TypeName SKW_RIGHTPAREN
		//	| sizeOf=KW_SIZEOF expr=UnaryExpression
		//	| alignOf=(KW_ALIGNOF1 | KW_ALIGNOF2 | KW_ALIGNOF3) SKW_LEFTPAREN typeName=TypeName SKW_RIGHTPAREN
		//	| andand=SKW_ANDAND id=ID // GCC extension address of label
		//)
		@Override public ParserRule getRule() { return rule; }
		
		//{UnaryExpression} (expr=PostfixExpression | plusplus=SKW_PLUSPLUS expr=UnaryExpression | minusminus=SKW_MINUSMINUS
		//expr=UnaryExpression | op=UnaryOperator expr=CastExpression | sizeOf=KW_SIZEOF SKW_LEFTPAREN typeName=TypeName
		//SKW_RIGHTPAREN | sizeOf=KW_SIZEOF expr=UnaryExpression | alignOf=(KW_ALIGNOF1 | KW_ALIGNOF2 | KW_ALIGNOF3)
		//SKW_LEFTPAREN typeName=TypeName SKW_RIGHTPAREN | andand=SKW_ANDAND id=ID // GCC extension address of label
		//)
		public Group getGroup() { return cGroup; }
		
		//{UnaryExpression}
		public Action getUnaryExpressionAction_0() { return cUnaryExpressionAction_0; }
		
		//(expr=PostfixExpression | plusplus=SKW_PLUSPLUS expr=UnaryExpression | minusminus=SKW_MINUSMINUS expr=UnaryExpression |
		//op=UnaryOperator expr=CastExpression | sizeOf=KW_SIZEOF SKW_LEFTPAREN typeName=TypeName SKW_RIGHTPAREN |
		//sizeOf=KW_SIZEOF expr=UnaryExpression | alignOf=(KW_ALIGNOF1 | KW_ALIGNOF2 | KW_ALIGNOF3) SKW_LEFTPAREN
		//typeName=TypeName SKW_RIGHTPAREN | andand=SKW_ANDAND id=ID // GCC extension address of label
		//)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//expr=PostfixExpression
		public Assignment getExprAssignment_1_0() { return cExprAssignment_1_0; }
		
		//PostfixExpression
		public RuleCall getExprPostfixExpressionParserRuleCall_1_0_0() { return cExprPostfixExpressionParserRuleCall_1_0_0; }
		
		//plusplus=SKW_PLUSPLUS expr=UnaryExpression
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//plusplus=SKW_PLUSPLUS
		public Assignment getPlusplusAssignment_1_1_0() { return cPlusplusAssignment_1_1_0; }
		
		//SKW_PLUSPLUS
		public RuleCall getPlusplusSKW_PLUSPLUSTerminalRuleCall_1_1_0_0() { return cPlusplusSKW_PLUSPLUSTerminalRuleCall_1_1_0_0; }
		
		//expr=UnaryExpression
		public Assignment getExprAssignment_1_1_1() { return cExprAssignment_1_1_1; }
		
		//UnaryExpression
		public RuleCall getExprUnaryExpressionParserRuleCall_1_1_1_0() { return cExprUnaryExpressionParserRuleCall_1_1_1_0; }
		
		//minusminus=SKW_MINUSMINUS expr=UnaryExpression
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//minusminus=SKW_MINUSMINUS
		public Assignment getMinusminusAssignment_1_2_0() { return cMinusminusAssignment_1_2_0; }
		
		//SKW_MINUSMINUS
		public RuleCall getMinusminusSKW_MINUSMINUSTerminalRuleCall_1_2_0_0() { return cMinusminusSKW_MINUSMINUSTerminalRuleCall_1_2_0_0; }
		
		//expr=UnaryExpression
		public Assignment getExprAssignment_1_2_1() { return cExprAssignment_1_2_1; }
		
		//UnaryExpression
		public RuleCall getExprUnaryExpressionParserRuleCall_1_2_1_0() { return cExprUnaryExpressionParserRuleCall_1_2_1_0; }
		
		//op=UnaryOperator expr=CastExpression
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//op=UnaryOperator
		public Assignment getOpAssignment_1_3_0() { return cOpAssignment_1_3_0; }
		
		//UnaryOperator
		public RuleCall getOpUnaryOperatorParserRuleCall_1_3_0_0() { return cOpUnaryOperatorParserRuleCall_1_3_0_0; }
		
		//expr=CastExpression
		public Assignment getExprAssignment_1_3_1() { return cExprAssignment_1_3_1; }
		
		//CastExpression
		public RuleCall getExprCastExpressionParserRuleCall_1_3_1_0() { return cExprCastExpressionParserRuleCall_1_3_1_0; }
		
		//sizeOf=KW_SIZEOF SKW_LEFTPAREN typeName=TypeName SKW_RIGHTPAREN
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//sizeOf=KW_SIZEOF
		public Assignment getSizeOfAssignment_1_4_0() { return cSizeOfAssignment_1_4_0; }
		
		//KW_SIZEOF
		public RuleCall getSizeOfKW_SIZEOFTerminalRuleCall_1_4_0_0() { return cSizeOfKW_SIZEOFTerminalRuleCall_1_4_0_0; }
		
		//SKW_LEFTPAREN
		public RuleCall getSKW_LEFTPARENTerminalRuleCall_1_4_1() { return cSKW_LEFTPARENTerminalRuleCall_1_4_1; }
		
		//typeName=TypeName
		public Assignment getTypeNameAssignment_1_4_2() { return cTypeNameAssignment_1_4_2; }
		
		//TypeName
		public RuleCall getTypeNameTypeNameParserRuleCall_1_4_2_0() { return cTypeNameTypeNameParserRuleCall_1_4_2_0; }
		
		//SKW_RIGHTPAREN
		public RuleCall getSKW_RIGHTPARENTerminalRuleCall_1_4_3() { return cSKW_RIGHTPARENTerminalRuleCall_1_4_3; }
		
		//sizeOf=KW_SIZEOF expr=UnaryExpression
		public Group getGroup_1_5() { return cGroup_1_5; }
		
		//sizeOf=KW_SIZEOF
		public Assignment getSizeOfAssignment_1_5_0() { return cSizeOfAssignment_1_5_0; }
		
		//KW_SIZEOF
		public RuleCall getSizeOfKW_SIZEOFTerminalRuleCall_1_5_0_0() { return cSizeOfKW_SIZEOFTerminalRuleCall_1_5_0_0; }
		
		//expr=UnaryExpression
		public Assignment getExprAssignment_1_5_1() { return cExprAssignment_1_5_1; }
		
		//UnaryExpression
		public RuleCall getExprUnaryExpressionParserRuleCall_1_5_1_0() { return cExprUnaryExpressionParserRuleCall_1_5_1_0; }
		
		//alignOf=(KW_ALIGNOF1 | KW_ALIGNOF2 | KW_ALIGNOF3) SKW_LEFTPAREN typeName=TypeName SKW_RIGHTPAREN
		public Group getGroup_1_6() { return cGroup_1_6; }
		
		//alignOf=(KW_ALIGNOF1 | KW_ALIGNOF2 | KW_ALIGNOF3)
		public Assignment getAlignOfAssignment_1_6_0() { return cAlignOfAssignment_1_6_0; }
		
		//(KW_ALIGNOF1 | KW_ALIGNOF2 | KW_ALIGNOF3)
		public Alternatives getAlignOfAlternatives_1_6_0_0() { return cAlignOfAlternatives_1_6_0_0; }
		
		//KW_ALIGNOF1
		public RuleCall getAlignOfKW_ALIGNOF1TerminalRuleCall_1_6_0_0_0() { return cAlignOfKW_ALIGNOF1TerminalRuleCall_1_6_0_0_0; }
		
		//KW_ALIGNOF2
		public RuleCall getAlignOfKW_ALIGNOF2TerminalRuleCall_1_6_0_0_1() { return cAlignOfKW_ALIGNOF2TerminalRuleCall_1_6_0_0_1; }
		
		//KW_ALIGNOF3
		public RuleCall getAlignOfKW_ALIGNOF3TerminalRuleCall_1_6_0_0_2() { return cAlignOfKW_ALIGNOF3TerminalRuleCall_1_6_0_0_2; }
		
		//SKW_LEFTPAREN
		public RuleCall getSKW_LEFTPARENTerminalRuleCall_1_6_1() { return cSKW_LEFTPARENTerminalRuleCall_1_6_1; }
		
		//typeName=TypeName
		public Assignment getTypeNameAssignment_1_6_2() { return cTypeNameAssignment_1_6_2; }
		
		//TypeName
		public RuleCall getTypeNameTypeNameParserRuleCall_1_6_2_0() { return cTypeNameTypeNameParserRuleCall_1_6_2_0; }
		
		//SKW_RIGHTPAREN
		public RuleCall getSKW_RIGHTPARENTerminalRuleCall_1_6_3() { return cSKW_RIGHTPARENTerminalRuleCall_1_6_3; }
		
		//andand=SKW_ANDAND id=ID
		public Group getGroup_1_7() { return cGroup_1_7; }
		
		//andand=SKW_ANDAND
		public Assignment getAndandAssignment_1_7_0() { return cAndandAssignment_1_7_0; }
		
		//SKW_ANDAND
		public RuleCall getAndandSKW_ANDANDTerminalRuleCall_1_7_0_0() { return cAndandSKW_ANDANDTerminalRuleCall_1_7_0_0; }
		
		//id=ID
		public Assignment getIdAssignment_1_7_1() { return cIdAssignment_1_7_1; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_7_1_0() { return cIdIDTerminalRuleCall_1_7_1_0; }
	}
	public class UnaryOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.UnaryOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnaryOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cOpSKW_ANDTerminalRuleCall_1_0_0 = (RuleCall)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cOpSKW_STARTerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cOpAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cOpSKW_PLUSTerminalRuleCall_1_2_0 = (RuleCall)cOpAssignment_1_2.eContents().get(0);
		private final Assignment cOpAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cOpSKW_MINUSTerminalRuleCall_1_3_0 = (RuleCall)cOpAssignment_1_3.eContents().get(0);
		private final Assignment cOpAssignment_1_4 = (Assignment)cAlternatives_1.eContents().get(4);
		private final RuleCall cOpSKW_TILDETerminalRuleCall_1_4_0 = (RuleCall)cOpAssignment_1_4.eContents().get(0);
		private final Assignment cOpAssignment_1_5 = (Assignment)cAlternatives_1.eContents().get(5);
		private final RuleCall cOpSKW_NOTTerminalRuleCall_1_5_0 = (RuleCall)cOpAssignment_1_5.eContents().get(0);
		
		//UnaryOperator:
		//	{UnaryOperator} (op=SKW_AND
		//	| op=SKW_STAR
		//	| op=SKW_PLUS
		//	| op=SKW_MINUS
		//	| op=SKW_TILDE
		//	| op=SKW_NOT);
		@Override public ParserRule getRule() { return rule; }
		
		//{UnaryOperator} (op=SKW_AND | op=SKW_STAR | op=SKW_PLUS | op=SKW_MINUS | op=SKW_TILDE | op=SKW_NOT)
		public Group getGroup() { return cGroup; }
		
		//{UnaryOperator}
		public Action getUnaryOperatorAction_0() { return cUnaryOperatorAction_0; }
		
		//(op=SKW_AND | op=SKW_STAR | op=SKW_PLUS | op=SKW_MINUS | op=SKW_TILDE | op=SKW_NOT)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//op=SKW_AND
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }
		
		//SKW_AND
		public RuleCall getOpSKW_ANDTerminalRuleCall_1_0_0() { return cOpSKW_ANDTerminalRuleCall_1_0_0; }
		
		//op=SKW_STAR
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//SKW_STAR
		public RuleCall getOpSKW_STARTerminalRuleCall_1_1_0() { return cOpSKW_STARTerminalRuleCall_1_1_0; }
		
		//op=SKW_PLUS
		public Assignment getOpAssignment_1_2() { return cOpAssignment_1_2; }
		
		//SKW_PLUS
		public RuleCall getOpSKW_PLUSTerminalRuleCall_1_2_0() { return cOpSKW_PLUSTerminalRuleCall_1_2_0; }
		
		//op=SKW_MINUS
		public Assignment getOpAssignment_1_3() { return cOpAssignment_1_3; }
		
		//SKW_MINUS
		public RuleCall getOpSKW_MINUSTerminalRuleCall_1_3_0() { return cOpSKW_MINUSTerminalRuleCall_1_3_0; }
		
		//op=SKW_TILDE
		public Assignment getOpAssignment_1_4() { return cOpAssignment_1_4; }
		
		//SKW_TILDE
		public RuleCall getOpSKW_TILDETerminalRuleCall_1_4_0() { return cOpSKW_TILDETerminalRuleCall_1_4_0; }
		
		//op=SKW_NOT
		public Assignment getOpAssignment_1_5() { return cOpAssignment_1_5; }
		
		//SKW_NOT
		public RuleCall getOpSKW_NOTTerminalRuleCall_1_5_0() { return cOpSKW_NOTTerminalRuleCall_1_5_0; }
	}
	public class PostfixExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.PostfixExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPostfixExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cExtAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cExtKW_EXTENSIONTerminalRuleCall_1_0_0_0 = (RuleCall)cExtAssignment_1_0_0.eContents().get(0);
		private final RuleCall cSKW_LEFTPARENTerminalRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Assignment cTypeNameAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cTypeNameTypeNameParserRuleCall_1_0_2_0 = (RuleCall)cTypeNameAssignment_1_0_2.eContents().get(0);
		private final RuleCall cSKW_RIGHTPARENTerminalRuleCall_1_0_3 = (RuleCall)cGroup_1_0.eContents().get(3);
		private final RuleCall cSKW_LEFTBRACETerminalRuleCall_1_0_4 = (RuleCall)cGroup_1_0.eContents().get(4);
		private final Assignment cInitializerListAssignment_1_0_5 = (Assignment)cGroup_1_0.eContents().get(5);
		private final RuleCall cInitializerListInitializerListParserRuleCall_1_0_5_0 = (RuleCall)cInitializerListAssignment_1_0_5.eContents().get(0);
		private final Assignment cCommaAssignment_1_0_6 = (Assignment)cGroup_1_0.eContents().get(6);
		private final RuleCall cCommaSKW_COMMATerminalRuleCall_1_0_6_0 = (RuleCall)cCommaAssignment_1_0_6.eContents().get(0);
		private final RuleCall cSKW_RIGHTBRACETerminalRuleCall_1_0_7 = (RuleCall)cGroup_1_0.eContents().get(7);
		private final Assignment cExprAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cExprPrimaryExpressionParserRuleCall_1_1_0 = (RuleCall)cExprAssignment_1_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cSuffixAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cSuffixPostfixExpressionSuffixArrayParserRuleCall_2_0_0 = (RuleCall)cSuffixAssignment_2_0.eContents().get(0);
		private final Assignment cSuffixAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cSuffixPostfixExpressionSuffixArgumentParserRuleCall_2_1_0 = (RuleCall)cSuffixAssignment_2_1.eContents().get(0);
		private final Assignment cSuffixAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cSuffixPostfixExpressionSuffixDotParserRuleCall_2_2_0 = (RuleCall)cSuffixAssignment_2_2.eContents().get(0);
		private final Assignment cSuffixAssignment_2_3 = (Assignment)cAlternatives_2.eContents().get(3);
		private final RuleCall cSuffixPostfixExpressionSuffixArrowParserRuleCall_2_3_0 = (RuleCall)cSuffixAssignment_2_3.eContents().get(0);
		private final Assignment cSuffixAssignment_2_4 = (Assignment)cAlternatives_2.eContents().get(4);
		private final RuleCall cSuffixPostfixExpressionSuffixPlusPlusParserRuleCall_2_4_0 = (RuleCall)cSuffixAssignment_2_4.eContents().get(0);
		private final Assignment cSuffixAssignment_2_5 = (Assignment)cAlternatives_2.eContents().get(5);
		private final RuleCall cSuffixPostfixExpressionSuffixMinusMinusParserRuleCall_2_5_0 = (RuleCall)cSuffixAssignment_2_5.eContents().get(0);
		
		//PostfixExpression Expression initRuleAction { at.jku.weiner.c.parser.utils.Log.log("In postfix expression"); }:
		//	{PostfixExpression} (ext?=KW_EXTENSION? SKW_LEFTPAREN typeName=TypeName SKW_RIGHTPAREN
		//	SKW_LEFTBRACE initializerList=InitializerList
		//	comma?=SKW_COMMA? SKW_RIGHTBRACE | expr+=PrimaryExpression) (suffix+=PostfixExpressionSuffixArray
		//	| suffix+=PostfixExpressionSuffixArgument
		//	| suffix+=PostfixExpressionSuffixDot
		//	| suffix+=PostfixExpressionSuffixArrow
		//	| suffix+=PostfixExpressionSuffixPlusPlus
		//	| suffix+=PostfixExpressionSuffixMinusMinus)*
		@Override public ParserRule getRule() { return rule; }
		
		//{PostfixExpression} (ext?=KW_EXTENSION? SKW_LEFTPAREN typeName=TypeName SKW_RIGHTPAREN SKW_LEFTBRACE
		//initializerList=InitializerList comma?=SKW_COMMA? SKW_RIGHTBRACE | expr+=PrimaryExpression)
		//(suffix+=PostfixExpressionSuffixArray | suffix+=PostfixExpressionSuffixArgument | suffix+=PostfixExpressionSuffixDot |
		//suffix+=PostfixExpressionSuffixArrow | suffix+=PostfixExpressionSuffixPlusPlus |
		//suffix+=PostfixExpressionSuffixMinusMinus)*
		public Group getGroup() { return cGroup; }
		
		//{PostfixExpression}
		public Action getPostfixExpressionAction_0() { return cPostfixExpressionAction_0; }
		
		//(ext?=KW_EXTENSION? SKW_LEFTPAREN typeName=TypeName SKW_RIGHTPAREN SKW_LEFTBRACE initializerList=InitializerList
		//comma?=SKW_COMMA? SKW_RIGHTBRACE | expr+=PrimaryExpression)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//// compound literal
		//ext?=KW_EXTENSION? SKW_LEFTPAREN typeName=TypeName SKW_RIGHTPAREN SKW_LEFTBRACE initializerList=InitializerList
		//comma?=SKW_COMMA? SKW_RIGHTBRACE
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//ext?=KW_EXTENSION?
		public Assignment getExtAssignment_1_0_0() { return cExtAssignment_1_0_0; }
		
		//KW_EXTENSION
		public RuleCall getExtKW_EXTENSIONTerminalRuleCall_1_0_0_0() { return cExtKW_EXTENSIONTerminalRuleCall_1_0_0_0; }
		
		//SKW_LEFTPAREN
		public RuleCall getSKW_LEFTPARENTerminalRuleCall_1_0_1() { return cSKW_LEFTPARENTerminalRuleCall_1_0_1; }
		
		//typeName=TypeName
		public Assignment getTypeNameAssignment_1_0_2() { return cTypeNameAssignment_1_0_2; }
		
		//TypeName
		public RuleCall getTypeNameTypeNameParserRuleCall_1_0_2_0() { return cTypeNameTypeNameParserRuleCall_1_0_2_0; }
		
		//SKW_RIGHTPAREN
		public RuleCall getSKW_RIGHTPARENTerminalRuleCall_1_0_3() { return cSKW_RIGHTPARENTerminalRuleCall_1_0_3; }
		
		//SKW_LEFTBRACE
		public RuleCall getSKW_LEFTBRACETerminalRuleCall_1_0_4() { return cSKW_LEFTBRACETerminalRuleCall_1_0_4; }
		
		//initializerList=InitializerList
		public Assignment getInitializerListAssignment_1_0_5() { return cInitializerListAssignment_1_0_5; }
		
		//InitializerList
		public RuleCall getInitializerListInitializerListParserRuleCall_1_0_5_0() { return cInitializerListInitializerListParserRuleCall_1_0_5_0; }
		
		//comma?=SKW_COMMA?
		public Assignment getCommaAssignment_1_0_6() { return cCommaAssignment_1_0_6; }
		
		//SKW_COMMA
		public RuleCall getCommaSKW_COMMATerminalRuleCall_1_0_6_0() { return cCommaSKW_COMMATerminalRuleCall_1_0_6_0; }
		
		//SKW_RIGHTBRACE
		public RuleCall getSKW_RIGHTBRACETerminalRuleCall_1_0_7() { return cSKW_RIGHTBRACETerminalRuleCall_1_0_7; }
		
		//expr+=PrimaryExpression
		public Assignment getExprAssignment_1_1() { return cExprAssignment_1_1; }
		
		//PrimaryExpression
		public RuleCall getExprPrimaryExpressionParserRuleCall_1_1_0() { return cExprPrimaryExpressionParserRuleCall_1_1_0; }
		
		//(suffix+=PostfixExpressionSuffixArray | suffix+=PostfixExpressionSuffixArgument | suffix+=PostfixExpressionSuffixDot |
		//suffix+=PostfixExpressionSuffixArrow | suffix+=PostfixExpressionSuffixPlusPlus |
		//suffix+=PostfixExpressionSuffixMinusMinus)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//suffix+=PostfixExpressionSuffixArray
		public Assignment getSuffixAssignment_2_0() { return cSuffixAssignment_2_0; }
		
		//PostfixExpressionSuffixArray
		public RuleCall getSuffixPostfixExpressionSuffixArrayParserRuleCall_2_0_0() { return cSuffixPostfixExpressionSuffixArrayParserRuleCall_2_0_0; }
		
		//suffix+=PostfixExpressionSuffixArgument
		public Assignment getSuffixAssignment_2_1() { return cSuffixAssignment_2_1; }
		
		//PostfixExpressionSuffixArgument
		public RuleCall getSuffixPostfixExpressionSuffixArgumentParserRuleCall_2_1_0() { return cSuffixPostfixExpressionSuffixArgumentParserRuleCall_2_1_0; }
		
		//suffix+=PostfixExpressionSuffixDot
		public Assignment getSuffixAssignment_2_2() { return cSuffixAssignment_2_2; }
		
		//PostfixExpressionSuffixDot
		public RuleCall getSuffixPostfixExpressionSuffixDotParserRuleCall_2_2_0() { return cSuffixPostfixExpressionSuffixDotParserRuleCall_2_2_0; }
		
		//suffix+=PostfixExpressionSuffixArrow
		public Assignment getSuffixAssignment_2_3() { return cSuffixAssignment_2_3; }
		
		//PostfixExpressionSuffixArrow
		public RuleCall getSuffixPostfixExpressionSuffixArrowParserRuleCall_2_3_0() { return cSuffixPostfixExpressionSuffixArrowParserRuleCall_2_3_0; }
		
		//suffix+=PostfixExpressionSuffixPlusPlus
		public Assignment getSuffixAssignment_2_4() { return cSuffixAssignment_2_4; }
		
		//PostfixExpressionSuffixPlusPlus
		public RuleCall getSuffixPostfixExpressionSuffixPlusPlusParserRuleCall_2_4_0() { return cSuffixPostfixExpressionSuffixPlusPlusParserRuleCall_2_4_0; }
		
		//suffix+=PostfixExpressionSuffixMinusMinus
		public Assignment getSuffixAssignment_2_5() { return cSuffixAssignment_2_5; }
		
		//PostfixExpressionSuffixMinusMinus
		public RuleCall getSuffixPostfixExpressionSuffixMinusMinusParserRuleCall_2_5_0() { return cSuffixPostfixExpressionSuffixMinusMinusParserRuleCall_2_5_0; }
	}
	public class PostfixExpressionSuffixArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.PostfixExpressionSuffixArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPostfixExpressionSuffixArrayAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cSKW_LEFTBRACKETTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cArrayExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArrayExprExpressionParserRuleCall_2_0 = (RuleCall)cArrayExprAssignment_2.eContents().get(0);
		private final RuleCall cSKW_RIGHTBRACKETTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//PostfixExpressionSuffixArray PostfixExpressionSuffix:
		//	{PostfixExpressionSuffixArray} SKW_LEFTBRACKET arrayExpr=Expression SKW_RIGHTBRACKET
		@Override public ParserRule getRule() { return rule; }
		
		//{PostfixExpressionSuffixArray} SKW_LEFTBRACKET arrayExpr=Expression SKW_RIGHTBRACKET
		public Group getGroup() { return cGroup; }
		
		//{PostfixExpressionSuffixArray}
		public Action getPostfixExpressionSuffixArrayAction_0() { return cPostfixExpressionSuffixArrayAction_0; }
		
		//SKW_LEFTBRACKET
		public RuleCall getSKW_LEFTBRACKETTerminalRuleCall_1() { return cSKW_LEFTBRACKETTerminalRuleCall_1; }
		
		//arrayExpr=Expression
		public Assignment getArrayExprAssignment_2() { return cArrayExprAssignment_2; }
		
		//Expression
		public RuleCall getArrayExprExpressionParserRuleCall_2_0() { return cArrayExprExpressionParserRuleCall_2_0; }
		
		//SKW_RIGHTBRACKET
		public RuleCall getSKW_RIGHTBRACKETTerminalRuleCall_3() { return cSKW_RIGHTBRACKETTerminalRuleCall_3; }
	}
	public class PostfixExpressionSuffixArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.PostfixExpressionSuffixArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPostfixExpressionSuffixArgumentAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cSKW_LEFTPARENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cArgumentExpressionListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentExpressionListArgumentExpressionListParserRuleCall_2_0 = (RuleCall)cArgumentExpressionListAssignment_2.eContents().get(0);
		private final RuleCall cSKW_RIGHTPARENTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//PostfixExpressionSuffixArgument PostfixExpressionSuffix:
		//	{PostfixExpressionSuffixArgument} SKW_LEFTPAREN argumentExpressionList=ArgumentExpressionList? SKW_RIGHTPAREN
		@Override public ParserRule getRule() { return rule; }
		
		//{PostfixExpressionSuffixArgument} SKW_LEFTPAREN argumentExpressionList=ArgumentExpressionList? SKW_RIGHTPAREN
		public Group getGroup() { return cGroup; }
		
		//{PostfixExpressionSuffixArgument}
		public Action getPostfixExpressionSuffixArgumentAction_0() { return cPostfixExpressionSuffixArgumentAction_0; }
		
		//SKW_LEFTPAREN
		public RuleCall getSKW_LEFTPARENTerminalRuleCall_1() { return cSKW_LEFTPARENTerminalRuleCall_1; }
		
		//argumentExpressionList=ArgumentExpressionList?
		public Assignment getArgumentExpressionListAssignment_2() { return cArgumentExpressionListAssignment_2; }
		
		//ArgumentExpressionList
		public RuleCall getArgumentExpressionListArgumentExpressionListParserRuleCall_2_0() { return cArgumentExpressionListArgumentExpressionListParserRuleCall_2_0; }
		
		//SKW_RIGHTPAREN
		public RuleCall getSKW_RIGHTPARENTerminalRuleCall_3() { return cSKW_RIGHTPARENTerminalRuleCall_3; }
	}
	public class PostfixExpressionSuffixDotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.PostfixExpressionSuffixDot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPostfixExpressionSuffixDotAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cSKW_DOTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdIDTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		
		//PostfixExpressionSuffixDot PostfixExpressionSuffix:
		//	{PostfixExpressionSuffixDot} SKW_DOT id=ID
		@Override public ParserRule getRule() { return rule; }
		
		//{PostfixExpressionSuffixDot} SKW_DOT id=ID
		public Group getGroup() { return cGroup; }
		
		//{PostfixExpressionSuffixDot}
		public Action getPostfixExpressionSuffixDotAction_0() { return cPostfixExpressionSuffixDotAction_0; }
		
		//SKW_DOT
		public RuleCall getSKW_DOTTerminalRuleCall_1() { return cSKW_DOTTerminalRuleCall_1; }
		
		//id=ID
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_2_0() { return cIdIDTerminalRuleCall_2_0; }
	}
	public class PostfixExpressionSuffixArrowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.PostfixExpressionSuffixArrow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPostfixExpressionSuffixArrowAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cARROWTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdIDTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		
		//PostfixExpressionSuffixArrow PostfixExpressionSuffix:
		//	{PostfixExpressionSuffixArrow} ARROW id=ID
		@Override public ParserRule getRule() { return rule; }
		
		//{PostfixExpressionSuffixArrow} ARROW id=ID
		public Group getGroup() { return cGroup; }
		
		//{PostfixExpressionSuffixArrow}
		public Action getPostfixExpressionSuffixArrowAction_0() { return cPostfixExpressionSuffixArrowAction_0; }
		
		//ARROW
		public RuleCall getARROWTerminalRuleCall_1() { return cARROWTerminalRuleCall_1; }
		
		//id=ID
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_2_0() { return cIdIDTerminalRuleCall_2_0; }
	}
	public class PostfixExpressionSuffixPlusPlusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.PostfixExpressionSuffixPlusPlus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPostfixExpressionSuffixPlusPlusAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cSKW_PLUSPLUSTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//PostfixExpressionSuffixPlusPlus PostfixExpressionSuffix:
		//	{PostfixExpressionSuffixPlusPlus} SKW_PLUSPLUS
		@Override public ParserRule getRule() { return rule; }
		
		//{PostfixExpressionSuffixPlusPlus} SKW_PLUSPLUS
		public Group getGroup() { return cGroup; }
		
		//{PostfixExpressionSuffixPlusPlus}
		public Action getPostfixExpressionSuffixPlusPlusAction_0() { return cPostfixExpressionSuffixPlusPlusAction_0; }
		
		//SKW_PLUSPLUS
		public RuleCall getSKW_PLUSPLUSTerminalRuleCall_1() { return cSKW_PLUSPLUSTerminalRuleCall_1; }
	}
	public class PostfixExpressionSuffixMinusMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.PostfixExpressionSuffixMinusMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPostfixExpressionSuffixMinusMinusAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cSKW_MINUSMINUSTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//PostfixExpressionSuffixMinusMinus PostfixExpressionSuffix:
		//	{PostfixExpressionSuffixMinusMinus} SKW_MINUSMINUS
		@Override public ParserRule getRule() { return rule; }
		
		//{PostfixExpressionSuffixMinusMinus} SKW_MINUSMINUS
		public Group getGroup() { return cGroup; }
		
		//{PostfixExpressionSuffixMinusMinus}
		public Action getPostfixExpressionSuffixMinusMinusAction_0() { return cPostfixExpressionSuffixMinusMinusAction_0; }
		
		//SKW_MINUSMINUS
		public RuleCall getSKW_MINUSMINUSTerminalRuleCall_1() { return cSKW_MINUSMINUSTerminalRuleCall_1; }
	}
	public class ArgumentExpressionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.ArgumentExpressionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExprAssignmentExpressionParserRuleCall_0_0 = (RuleCall)cExprAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cSKW_COMMATerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExprAssignmentExpressionParserRuleCall_1_1_0 = (RuleCall)cExprAssignment_1_1.eContents().get(0);
		
		//ArgumentExpressionList:
		//	expr+=AssignmentExpression (SKW_COMMA expr+=AssignmentExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//expr+=AssignmentExpression (SKW_COMMA expr+=AssignmentExpression)*
		public Group getGroup() { return cGroup; }
		
		//expr+=AssignmentExpression
		public Assignment getExprAssignment_0() { return cExprAssignment_0; }
		
		//AssignmentExpression
		public RuleCall getExprAssignmentExpressionParserRuleCall_0_0() { return cExprAssignmentExpressionParserRuleCall_0_0; }
		
		//(SKW_COMMA expr+=AssignmentExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//SKW_COMMA
		public RuleCall getSKW_COMMATerminalRuleCall_1_0() { return cSKW_COMMATerminalRuleCall_1_0; }
		
		//expr+=AssignmentExpression
		public Assignment getExprAssignment_1_1() { return cExprAssignment_1_1; }
		
		//AssignmentExpression
		public RuleCall getExprAssignmentExpressionParserRuleCall_1_1_0() { return cExprAssignmentExpressionParserRuleCall_1_1_0; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.PrimaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimaryExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_1_0_0 = (RuleCall)cIdAssignment_1_0.eContents().get(0);
		private final Assignment cConstAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cConstConstant2ParserRuleCall_1_1_0 = (RuleCall)cConstAssignment_1_1.eContents().get(0);
		private final Assignment cStringAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cStringSTRING_LITERALTerminalRuleCall_1_2_0 = (RuleCall)cStringAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final RuleCall cSKW_LEFTPARENTerminalRuleCall_1_3_0 = (RuleCall)cGroup_1_3.eContents().get(0);
		private final Assignment cExprAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_3_1_0 = (RuleCall)cExprAssignment_1_3_1.eContents().get(0);
		private final RuleCall cSKW_RIGHTPARENTerminalRuleCall_1_3_2 = (RuleCall)cGroup_1_3.eContents().get(2);
		private final Group cGroup_1_4 = (Group)cAlternatives_1.eContents().get(4);
		private final Assignment cExtAssignment_1_4_0 = (Assignment)cGroup_1_4.eContents().get(0);
		private final RuleCall cExtKW_EXTENSIONTerminalRuleCall_1_4_0_0 = (RuleCall)cExtAssignment_1_4_0.eContents().get(0);
		private final RuleCall cSKW_LEFTPARENTerminalRuleCall_1_4_1 = (RuleCall)cGroup_1_4.eContents().get(1);
		private final Assignment cCompoundStmtAssignment_1_4_2 = (Assignment)cGroup_1_4.eContents().get(2);
		private final RuleCall cCompoundStmtCompoundStatementParserRuleCall_1_4_2_0 = (RuleCall)cCompoundStmtAssignment_1_4_2.eContents().get(0);
		private final RuleCall cSKW_RIGHTPARENTerminalRuleCall_1_4_3 = (RuleCall)cGroup_1_4.eContents().get(3);
		private final Group cGroup_1_5 = (Group)cAlternatives_1.eContents().get(5);
		private final Assignment cBuiltin_offsetofAssignment_1_5_0 = (Assignment)cGroup_1_5.eContents().get(0);
		private final RuleCall cBuiltin_offsetofKW_BUILTIN_OFFSETOFTerminalRuleCall_1_5_0_0 = (RuleCall)cBuiltin_offsetofAssignment_1_5_0.eContents().get(0);
		private final RuleCall cSKW_LEFTPARENTerminalRuleCall_1_5_1 = (RuleCall)cGroup_1_5.eContents().get(1);
		private final Assignment cTypeNameAssignment_1_5_2 = (Assignment)cGroup_1_5.eContents().get(2);
		private final RuleCall cTypeNameTypeNameParserRuleCall_1_5_2_0 = (RuleCall)cTypeNameAssignment_1_5_2.eContents().get(0);
		private final RuleCall cSKW_COMMATerminalRuleCall_1_5_3 = (RuleCall)cGroup_1_5.eContents().get(3);
		private final Assignment cExprAssignment_1_5_4 = (Assignment)cGroup_1_5.eContents().get(4);
		private final RuleCall cExprUnaryExpressionParserRuleCall_1_5_4_0 = (RuleCall)cExprAssignment_1_5_4.eContents().get(0);
		private final RuleCall cSKW_RIGHTPARENTerminalRuleCall_1_5_5 = (RuleCall)cGroup_1_5.eContents().get(5);
		
		//PrimaryExpression Expression initRuleAction { at.jku.weiner.c.parser.utils.Log.log("In primary expression"); }:
		//	{PrimaryExpression} (id=ID
		//	| const=Constant2
		//	| string+=STRING_LITERAL+
		//	| SKW_LEFTPAREN expr=Expression SKW_RIGHTPAREN
		//	//|	genericSelection=genericSelection
		//	| ext?=KW_EXTENSION? SKW_LEFTPAREN compoundStmt=CompoundStatement SKW_RIGHTPAREN // Blocks (GCC extension)
		//	//|	'__builtin_va_arg' LEFTPAREN expr=unaryExpression COMMA typeName=typeName RIGHTPAREN
		//	| builtin_offsetof?=KW_BUILTIN_OFFSETOF SKW_LEFTPAREN typeName=TypeName SKW_COMMA expr=UnaryExpression SKW_RIGHTPAREN)
		@Override public ParserRule getRule() { return rule; }
		
		//{PrimaryExpression} (id=ID | const=Constant2 | string+=STRING_LITERAL+ | SKW_LEFTPAREN expr=Expression SKW_RIGHTPAREN //|	genericSelection=genericSelection
		//| ext?=KW_EXTENSION? SKW_LEFTPAREN compoundStmt=CompoundStatement SKW_RIGHTPAREN // Blocks (GCC extension)
		////|	'__builtin_va_arg' LEFTPAREN expr=unaryExpression COMMA typeName=typeName RIGHTPAREN
		//| builtin_offsetof?=KW_BUILTIN_OFFSETOF SKW_LEFTPAREN typeName=TypeName SKW_COMMA expr=UnaryExpression SKW_RIGHTPAREN)
		public Group getGroup() { return cGroup; }
		
		//{PrimaryExpression}
		public Action getPrimaryExpressionAction_0() { return cPrimaryExpressionAction_0; }
		
		//(id=ID | const=Constant2 | string+=STRING_LITERAL+ | SKW_LEFTPAREN expr=Expression SKW_RIGHTPAREN //|	genericSelection=genericSelection
		//| ext?=KW_EXTENSION? SKW_LEFTPAREN compoundStmt=CompoundStatement SKW_RIGHTPAREN // Blocks (GCC extension)
		////|	'__builtin_va_arg' LEFTPAREN expr=unaryExpression COMMA typeName=typeName RIGHTPAREN
		//| builtin_offsetof?=KW_BUILTIN_OFFSETOF SKW_LEFTPAREN typeName=TypeName SKW_COMMA expr=UnaryExpression SKW_RIGHTPAREN)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//id=ID
		public Assignment getIdAssignment_1_0() { return cIdAssignment_1_0; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0_0() { return cIdIDTerminalRuleCall_1_0_0; }
		
		//const=Constant2
		public Assignment getConstAssignment_1_1() { return cConstAssignment_1_1; }
		
		//Constant2
		public RuleCall getConstConstant2ParserRuleCall_1_1_0() { return cConstConstant2ParserRuleCall_1_1_0; }
		
		//string+=STRING_LITERAL+
		public Assignment getStringAssignment_1_2() { return cStringAssignment_1_2; }
		
		//STRING_LITERAL
		public RuleCall getStringSTRING_LITERALTerminalRuleCall_1_2_0() { return cStringSTRING_LITERALTerminalRuleCall_1_2_0; }
		
		//SKW_LEFTPAREN expr=Expression SKW_RIGHTPAREN
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//SKW_LEFTPAREN
		public RuleCall getSKW_LEFTPARENTerminalRuleCall_1_3_0() { return cSKW_LEFTPARENTerminalRuleCall_1_3_0; }
		
		//expr=Expression
		public Assignment getExprAssignment_1_3_1() { return cExprAssignment_1_3_1; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_3_1_0() { return cExprExpressionParserRuleCall_1_3_1_0; }
		
		//SKW_RIGHTPAREN
		public RuleCall getSKW_RIGHTPARENTerminalRuleCall_1_3_2() { return cSKW_RIGHTPARENTerminalRuleCall_1_3_2; }
		
		//ext?=KW_EXTENSION? SKW_LEFTPAREN compoundStmt=CompoundStatement SKW_RIGHTPAREN
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//ext?=KW_EXTENSION?
		public Assignment getExtAssignment_1_4_0() { return cExtAssignment_1_4_0; }
		
		//KW_EXTENSION
		public RuleCall getExtKW_EXTENSIONTerminalRuleCall_1_4_0_0() { return cExtKW_EXTENSIONTerminalRuleCall_1_4_0_0; }
		
		//SKW_LEFTPAREN
		public RuleCall getSKW_LEFTPARENTerminalRuleCall_1_4_1() { return cSKW_LEFTPARENTerminalRuleCall_1_4_1; }
		
		//compoundStmt=CompoundStatement
		public Assignment getCompoundStmtAssignment_1_4_2() { return cCompoundStmtAssignment_1_4_2; }
		
		//CompoundStatement
		public RuleCall getCompoundStmtCompoundStatementParserRuleCall_1_4_2_0() { return cCompoundStmtCompoundStatementParserRuleCall_1_4_2_0; }
		
		//SKW_RIGHTPAREN
		public RuleCall getSKW_RIGHTPARENTerminalRuleCall_1_4_3() { return cSKW_RIGHTPARENTerminalRuleCall_1_4_3; }
		
		//builtin_offsetof?=KW_BUILTIN_OFFSETOF SKW_LEFTPAREN typeName=TypeName SKW_COMMA expr=UnaryExpression SKW_RIGHTPAREN
		public Group getGroup_1_5() { return cGroup_1_5; }
		
		//builtin_offsetof?=KW_BUILTIN_OFFSETOF
		public Assignment getBuiltin_offsetofAssignment_1_5_0() { return cBuiltin_offsetofAssignment_1_5_0; }
		
		//KW_BUILTIN_OFFSETOF
		public RuleCall getBuiltin_offsetofKW_BUILTIN_OFFSETOFTerminalRuleCall_1_5_0_0() { return cBuiltin_offsetofKW_BUILTIN_OFFSETOFTerminalRuleCall_1_5_0_0; }
		
		//SKW_LEFTPAREN
		public RuleCall getSKW_LEFTPARENTerminalRuleCall_1_5_1() { return cSKW_LEFTPARENTerminalRuleCall_1_5_1; }
		
		//typeName=TypeName
		public Assignment getTypeNameAssignment_1_5_2() { return cTypeNameAssignment_1_5_2; }
		
		//TypeName
		public RuleCall getTypeNameTypeNameParserRuleCall_1_5_2_0() { return cTypeNameTypeNameParserRuleCall_1_5_2_0; }
		
		//SKW_COMMA
		public RuleCall getSKW_COMMATerminalRuleCall_1_5_3() { return cSKW_COMMATerminalRuleCall_1_5_3; }
		
		//expr=UnaryExpression
		public Assignment getExprAssignment_1_5_4() { return cExprAssignment_1_5_4; }
		
		//UnaryExpression
		public RuleCall getExprUnaryExpressionParserRuleCall_1_5_4_0() { return cExprUnaryExpressionParserRuleCall_1_5_4_0; }
		
		//SKW_RIGHTPAREN
		public RuleCall getSKW_RIGHTPARENTerminalRuleCall_1_5_5() { return cSKW_RIGHTPARENTerminalRuleCall_1_5_5; }
	}
	public class ConstantExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.ConstantExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstantExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprConditionalExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//ConstantExpression Expression:
		//	{ConstantExpression} expr=ConditionalExpression
		@Override public ParserRule getRule() { return rule; }
		
		//{ConstantExpression} expr=ConditionalExpression
		public Group getGroup() { return cGroup; }
		
		//{ConstantExpression}
		public Action getConstantExpressionAction_0() { return cConstantExpressionAction_0; }
		
		//expr=ConditionalExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//ConditionalExpression
		public RuleCall getExprConditionalExpressionParserRuleCall_1_0() { return cExprConditionalExpressionParserRuleCall_1_0; }
	}
	public class ParserKeywordsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.ParserKeywords");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cKW_ATOMICTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cKW_AUTOTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cKW_BOOLTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cKW_CONSTTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cKW_CHARTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cKW_DOUBLETerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cKW_EXTERNTerminalRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cKW_FLOATTerminalRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cKW_INTTerminalRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cKW_LONGTerminalRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cKW_RESTRICTTerminalRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cKW_SHORTTerminalRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cKW_SIGNED1TerminalRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cKW_SIGNED2TerminalRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cKW_SIGNED3TerminalRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cKW_VOIDTerminalRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cKW_UNSIGNEDTerminalRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		
		/// *** UNKNOWN!!! *** / //genericSelection: GENERIC LEFTPAREN assignmentExpression COMMA genericAssocList=genericAssocList RIGHTPAREN;
		////genericAssocList: genericAssociation (COMMA genericAssociation+=genericAssociation)*;
		/// *
		//genericAssociation:
		//	(typeName | DEFAULT) COLON
		//	(assignmentExpression=assignmentExpression)
		//;
		// * / / *** lexer *** / / *** start with keywords ;-) * / ParserKeywords:
		//	KW_ATOMIC | KW_AUTO
		//	| KW_BOOL | KW_CONST
		//	| KW_CHAR | KW_DOUBLE
		//	| KW_EXTERN
		//	| KW_FLOAT
		//	| KW_INT
		//	| KW_LONG
		//	| KW_RESTRICT
		//	| KW_SHORT | KW_SIGNED1 | KW_SIGNED2
		//	| KW_SIGNED3 | KW_VOID | KW_UNSIGNED;
		@Override public ParserRule getRule() { return rule; }
		
		//KW_ATOMIC | KW_AUTO | KW_BOOL | KW_CONST | KW_CHAR | KW_DOUBLE | KW_EXTERN | KW_FLOAT | KW_INT | KW_LONG | KW_RESTRICT |
		//KW_SHORT | KW_SIGNED1 | KW_SIGNED2 | KW_SIGNED3 | KW_VOID | KW_UNSIGNED
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//KW_ATOMIC
		public RuleCall getKW_ATOMICTerminalRuleCall_0() { return cKW_ATOMICTerminalRuleCall_0; }
		
		//KW_AUTO
		public RuleCall getKW_AUTOTerminalRuleCall_1() { return cKW_AUTOTerminalRuleCall_1; }
		
		//KW_BOOL
		public RuleCall getKW_BOOLTerminalRuleCall_2() { return cKW_BOOLTerminalRuleCall_2; }
		
		//KW_CONST
		public RuleCall getKW_CONSTTerminalRuleCall_3() { return cKW_CONSTTerminalRuleCall_3; }
		
		//KW_CHAR
		public RuleCall getKW_CHARTerminalRuleCall_4() { return cKW_CHARTerminalRuleCall_4; }
		
		//KW_DOUBLE
		public RuleCall getKW_DOUBLETerminalRuleCall_5() { return cKW_DOUBLETerminalRuleCall_5; }
		
		//KW_EXTERN
		public RuleCall getKW_EXTERNTerminalRuleCall_6() { return cKW_EXTERNTerminalRuleCall_6; }
		
		//KW_FLOAT
		public RuleCall getKW_FLOATTerminalRuleCall_7() { return cKW_FLOATTerminalRuleCall_7; }
		
		//KW_INT
		public RuleCall getKW_INTTerminalRuleCall_8() { return cKW_INTTerminalRuleCall_8; }
		
		//KW_LONG
		public RuleCall getKW_LONGTerminalRuleCall_9() { return cKW_LONGTerminalRuleCall_9; }
		
		//KW_RESTRICT
		public RuleCall getKW_RESTRICTTerminalRuleCall_10() { return cKW_RESTRICTTerminalRuleCall_10; }
		
		//KW_SHORT
		public RuleCall getKW_SHORTTerminalRuleCall_11() { return cKW_SHORTTerminalRuleCall_11; }
		
		//KW_SIGNED1
		public RuleCall getKW_SIGNED1TerminalRuleCall_12() { return cKW_SIGNED1TerminalRuleCall_12; }
		
		//KW_SIGNED2
		public RuleCall getKW_SIGNED2TerminalRuleCall_13() { return cKW_SIGNED2TerminalRuleCall_13; }
		
		//KW_SIGNED3
		public RuleCall getKW_SIGNED3TerminalRuleCall_14() { return cKW_SIGNED3TerminalRuleCall_14; }
		
		//KW_VOID
		public RuleCall getKW_VOIDTerminalRuleCall_15() { return cKW_VOIDTerminalRuleCall_15; }
		
		//KW_UNSIGNED
		public RuleCall getKW_UNSIGNEDTerminalRuleCall_16() { return cKW_UNSIGNEDTerminalRuleCall_16; }
	}
	
	
	private final ParserElements pParser;
	private final ExternalDeclarationElements pExternalDeclaration;
	private final FunctionDefHeadElements pFunctionDefHead;
	private final FunctionDefinitionElements pFunctionDefinition;
	private final DeclarationElements pDeclaration;
	private final FunctionDeclarationSpecifiersElements pFunctionDeclarationSpecifiers;
	private final DeclarationSpecifiersElements pDeclarationSpecifiers;
	private final InitDeclaratorListElements pInitDeclaratorList;
	private final InitDeclaratorElements pInitDeclarator;
	private final StorageClassSpecifierElements pStorageClassSpecifier;
	private final TypeSpecifierElements pTypeSpecifier;
	private final TypedefNameElements pTypedefName;
	private final StructOrUnionSpecifierElements pStructOrUnionSpecifier;
	private final StructOrUnionElements pStructOrUnion;
	private final StructDeclarationListElements pStructDeclarationList;
	private final StructDeclarationElements pStructDeclaration;
	private final SpecifierQualifierListElements pSpecifierQualifierList;
	private final StructDeclaratorListElements pStructDeclaratorList;
	private final StructDeclaratorElements pStructDeclarator;
	private final EnumSpecifierElements pEnumSpecifier;
	private final EnumeratorListElements pEnumeratorList;
	private final EnumeratorElements pEnumerator;
	private final TypeQualifierElements pTypeQualifier;
	private final FunctionSpecifierElements pFunctionSpecifier;
	private final DeclaratorElements pDeclarator;
	private final DirectDeclaratorElements pDirectDeclarator;
	private final DeclaratorSuffixElements pDeclaratorSuffix;
	private final DirectDeclaratorLastSuffixElements pDirectDeclaratorLastSuffix;
	private final GccDeclaratorExtensionElements pGccDeclaratorExtension;
	private final GccAttributeSpecifierElements pGccAttributeSpecifier;
	private final GccAttributeListElements pGccAttributeList;
	private final GccAttributeElements pGccAttribute;
	private final PointerElements pPointer;
	private final TypeQualifierListElements pTypeQualifierList;
	private final ParameterTypeListElements pParameterTypeList;
	private final ParameterListElements pParameterList;
	private final ParameterDeclarationElements pParameterDeclaration;
	private final IdentifierListElements pIdentifierList;
	private final MyIdentifierElements pMyIdentifier;
	private final TypeNameElements pTypeName;
	private final AbstractDeclaratorElements pAbstractDeclarator;
	private final InitializerElements pInitializer;
	private final InitializerListElements pInitializerList;
	private final BlockListElements pBlockList;
	private final StatementElements pStatement;
	private final LabeledStatementElements pLabeledStatement;
	private final CompoundStatementElements pCompoundStatement;
	private final BodyStatementElements pBodyStatement;
	private final ExpressionStatementElements pExpressionStatement;
	private final SelectionStatementElements pSelectionStatement;
	private final IterationStatementElements pIterationStatement;
	private final JumpStatementElements pJumpStatement;
	private final AsmStatementElements pAsmStatement;
	private final AsmLineWithoutColonElements pAsmLineWithoutColon;
	private final AsmLineElements pAsmLine;
	private final AsmLineWithColonElements pAsmLineWithColon;
	private final DesignationElements pDesignation;
	private final DesignatorListElements pDesignatorList;
	private final DesignatorElements pDesignator;
	private final ExpressionElements pExpression;
	private final AssignmentExpressionElements pAssignmentExpression;
	private final LvalueElements pLvalue;
	private final AssignmentOperatorElements pAssignmentOperator;
	private final ConditionalExpressionElements pConditionalExpression;
	private final LogicalOrExpressionElements pLogicalOrExpression;
	private final LogicalAndExpressionElements pLogicalAndExpression;
	private final InclusiveOrExpressionElements pInclusiveOrExpression;
	private final ExclusiveOrExpressionElements pExclusiveOrExpression;
	private final AndExpressionElements pAndExpression;
	private final EqualityExpressionElements pEqualityExpression;
	private final RelationalExpressionElements pRelationalExpression;
	private final ShiftExpressionElements pShiftExpression;
	private final AdditiveExpressionElements pAdditiveExpression;
	private final MultiplicativeExpressionElements pMultiplicativeExpression;
	private final CastExpressionElements pCastExpression;
	private final UnaryExpressionElements pUnaryExpression;
	private final UnaryOperatorElements pUnaryOperator;
	private final PostfixExpressionElements pPostfixExpression;
	private final PostfixExpressionSuffixArrayElements pPostfixExpressionSuffixArray;
	private final PostfixExpressionSuffixArgumentElements pPostfixExpressionSuffixArgument;
	private final PostfixExpressionSuffixDotElements pPostfixExpressionSuffixDot;
	private final PostfixExpressionSuffixArrowElements pPostfixExpressionSuffixArrow;
	private final PostfixExpressionSuffixPlusPlusElements pPostfixExpressionSuffixPlusPlus;
	private final PostfixExpressionSuffixMinusMinusElements pPostfixExpressionSuffixMinusMinus;
	private final ArgumentExpressionListElements pArgumentExpressionList;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final ConstantExpressionElements pConstantExpression;
	private final ParserKeywordsElements pParserKeywords;
	private final TerminalRule tKW_ATOMIC;
	private final TerminalRule tKW_ATTRIBUTE;
	private final TerminalRule tKW_AUTO;
	private final TerminalRule tKW_ALIGNAS;
	private final TerminalRule tKW_ALIGNOF1;
	private final TerminalRule tKW_ALIGNOF2;
	private final TerminalRule tKW_ALIGNOF3;
	private final TerminalRule tKW_ASM1;
	private final TerminalRule tKW_ASM2;
	private final TerminalRule tKW_ASM3;
	private final TerminalRule tKW_BOOL;
	private final TerminalRule tKW_BREAK;
	private final TerminalRule tKW_BUILTIN_VA_LIST;
	private final TerminalRule tKW_BUILTIN_OFFSETOF;
	private final TerminalRule tKW_CASE;
	private final TerminalRule tKW_CHAR;
	private final TerminalRule tKW_COMPLEX;
	private final TerminalRule tKW_CONST;
	private final TerminalRule tKW_CONTINUE;
	private final TerminalRule tKW_DEFAULT;
	private final TerminalRule tKW_DO;
	private final TerminalRule tKW_DOUBLE;
	private final TerminalRule tKW_ELSE;
	private final TerminalRule tKW_EXTENSION;
	private final TerminalRule tKW_ENUM;
	private final TerminalRule tKW_EXTERN;
	private final TerminalRule tKW_FLOAT;
	private final TerminalRule tKW_FOR;
	private final TerminalRule tKW_GENERIC;
	private final TerminalRule tKW_GOTO;
	private final TerminalRule tKW_IF;
	private final TerminalRule tKW_IMAGINARY;
	private final TerminalRule tKW_INLINE1;
	private final TerminalRule tKW_INLINE2;
	private final TerminalRule tKW_INLINE3;
	private final TerminalRule tKW_INT;
	private final TerminalRule tKW_INT128_3;
	private final TerminalRule tKW_LONG;
	private final TerminalRule tKW_M128;
	private final TerminalRule tKW_M128D;
	private final TerminalRule tKW_M128I;
	private final TerminalRule tKW_NORETURN;
	private final TerminalRule tKW_PRAGMA;
	private final TerminalRule tKW_REGISTER;
	private final TerminalRule tKW_RESTRICT;
	private final TerminalRule tKW_RESTRICT2;
	private final TerminalRule tKW_RESTRICT3;
	private final TerminalRule tKW_RETURN;
	private final TerminalRule tKW_SHORT;
	private final TerminalRule tKW_SIGNED1;
	private final TerminalRule tKW_SIGNED2;
	private final TerminalRule tKW_SIGNED3;
	private final TerminalRule tKW_SIZEOF;
	private final TerminalRule tKW_STATIC;
	private final TerminalRule tKW_STATICASSERT;
	private final TerminalRule tKW_STRUCT;
	private final TerminalRule tKW_SWITCH;
	private final TerminalRule tKW_THREADLOCAL;
	private final TerminalRule tKW_TYPEDEF;
	private final TerminalRule tKW_TYPEOF1;
	private final TerminalRule tKW_TYPEOF3;
	private final TerminalRule tKW_UNION;
	private final TerminalRule tKW_UNSIGNED;
	private final TerminalRule tKW_VOID;
	private final TerminalRule tKW_VOLATILE;
	private final TerminalRule tKW_VOLATILE2;
	private final TerminalRule tKW_WHILE;
	private final TerminalRule tSTARASSIGN;
	private final TerminalRule tDIVASSIGN;
	private final TerminalRule tMODASSIGN;
	private final TerminalRule tPLUSASSIGN;
	private final TerminalRule tMINUSASSIGN;
	private final TerminalRule tLEFTSHIFTASSIGN;
	private final TerminalRule tRIGHTSHIFTASSIGN;
	private final TerminalRule tANDASSIGN;
	private final TerminalRule tXORASSIGN;
	private final TerminalRule tORASSIGN;
	private final TerminalRule tARROW;
	private final TerminalRule tLINEDIRECTIVE;
	private final TerminalRule tWHITESPACE;
	
	private final Grammar grammar;
	
	private final CommonGrammarAccess gaCommon;

	@Inject
	public ParserGrammarAccess(GrammarProvider grammarProvider,
			CommonGrammarAccess gaCommon) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaCommon = gaCommon;
		this.pParser = new ParserElements();
		this.pExternalDeclaration = new ExternalDeclarationElements();
		this.pFunctionDefHead = new FunctionDefHeadElements();
		this.pFunctionDefinition = new FunctionDefinitionElements();
		this.pDeclaration = new DeclarationElements();
		this.pFunctionDeclarationSpecifiers = new FunctionDeclarationSpecifiersElements();
		this.pDeclarationSpecifiers = new DeclarationSpecifiersElements();
		this.pInitDeclaratorList = new InitDeclaratorListElements();
		this.pInitDeclarator = new InitDeclaratorElements();
		this.pStorageClassSpecifier = new StorageClassSpecifierElements();
		this.pTypeSpecifier = new TypeSpecifierElements();
		this.pTypedefName = new TypedefNameElements();
		this.pStructOrUnionSpecifier = new StructOrUnionSpecifierElements();
		this.pStructOrUnion = new StructOrUnionElements();
		this.pStructDeclarationList = new StructDeclarationListElements();
		this.pStructDeclaration = new StructDeclarationElements();
		this.pSpecifierQualifierList = new SpecifierQualifierListElements();
		this.pStructDeclaratorList = new StructDeclaratorListElements();
		this.pStructDeclarator = new StructDeclaratorElements();
		this.pEnumSpecifier = new EnumSpecifierElements();
		this.pEnumeratorList = new EnumeratorListElements();
		this.pEnumerator = new EnumeratorElements();
		this.pTypeQualifier = new TypeQualifierElements();
		this.pFunctionSpecifier = new FunctionSpecifierElements();
		this.pDeclarator = new DeclaratorElements();
		this.pDirectDeclarator = new DirectDeclaratorElements();
		this.pDeclaratorSuffix = new DeclaratorSuffixElements();
		this.pDirectDeclaratorLastSuffix = new DirectDeclaratorLastSuffixElements();
		this.pGccDeclaratorExtension = new GccDeclaratorExtensionElements();
		this.pGccAttributeSpecifier = new GccAttributeSpecifierElements();
		this.pGccAttributeList = new GccAttributeListElements();
		this.pGccAttribute = new GccAttributeElements();
		this.pPointer = new PointerElements();
		this.pTypeQualifierList = new TypeQualifierListElements();
		this.pParameterTypeList = new ParameterTypeListElements();
		this.pParameterList = new ParameterListElements();
		this.pParameterDeclaration = new ParameterDeclarationElements();
		this.pIdentifierList = new IdentifierListElements();
		this.pMyIdentifier = new MyIdentifierElements();
		this.pTypeName = new TypeNameElements();
		this.pAbstractDeclarator = new AbstractDeclaratorElements();
		this.pInitializer = new InitializerElements();
		this.pInitializerList = new InitializerListElements();
		this.pBlockList = new BlockListElements();
		this.pStatement = new StatementElements();
		this.pLabeledStatement = new LabeledStatementElements();
		this.pCompoundStatement = new CompoundStatementElements();
		this.pBodyStatement = new BodyStatementElements();
		this.pExpressionStatement = new ExpressionStatementElements();
		this.pSelectionStatement = new SelectionStatementElements();
		this.pIterationStatement = new IterationStatementElements();
		this.pJumpStatement = new JumpStatementElements();
		this.pAsmStatement = new AsmStatementElements();
		this.pAsmLineWithoutColon = new AsmLineWithoutColonElements();
		this.pAsmLine = new AsmLineElements();
		this.pAsmLineWithColon = new AsmLineWithColonElements();
		this.pDesignation = new DesignationElements();
		this.pDesignatorList = new DesignatorListElements();
		this.pDesignator = new DesignatorElements();
		this.pExpression = new ExpressionElements();
		this.pAssignmentExpression = new AssignmentExpressionElements();
		this.pLvalue = new LvalueElements();
		this.pAssignmentOperator = new AssignmentOperatorElements();
		this.pConditionalExpression = new ConditionalExpressionElements();
		this.pLogicalOrExpression = new LogicalOrExpressionElements();
		this.pLogicalAndExpression = new LogicalAndExpressionElements();
		this.pInclusiveOrExpression = new InclusiveOrExpressionElements();
		this.pExclusiveOrExpression = new ExclusiveOrExpressionElements();
		this.pAndExpression = new AndExpressionElements();
		this.pEqualityExpression = new EqualityExpressionElements();
		this.pRelationalExpression = new RelationalExpressionElements();
		this.pShiftExpression = new ShiftExpressionElements();
		this.pAdditiveExpression = new AdditiveExpressionElements();
		this.pMultiplicativeExpression = new MultiplicativeExpressionElements();
		this.pCastExpression = new CastExpressionElements();
		this.pUnaryExpression = new UnaryExpressionElements();
		this.pUnaryOperator = new UnaryOperatorElements();
		this.pPostfixExpression = new PostfixExpressionElements();
		this.pPostfixExpressionSuffixArray = new PostfixExpressionSuffixArrayElements();
		this.pPostfixExpressionSuffixArgument = new PostfixExpressionSuffixArgumentElements();
		this.pPostfixExpressionSuffixDot = new PostfixExpressionSuffixDotElements();
		this.pPostfixExpressionSuffixArrow = new PostfixExpressionSuffixArrowElements();
		this.pPostfixExpressionSuffixPlusPlus = new PostfixExpressionSuffixPlusPlusElements();
		this.pPostfixExpressionSuffixMinusMinus = new PostfixExpressionSuffixMinusMinusElements();
		this.pArgumentExpressionList = new ArgumentExpressionListElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pConstantExpression = new ConstantExpressionElements();
		this.pParserKeywords = new ParserKeywordsElements();
		this.tKW_ATOMIC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_ATOMIC");
		this.tKW_ATTRIBUTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_ATTRIBUTE");
		this.tKW_AUTO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_AUTO");
		this.tKW_ALIGNAS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_ALIGNAS");
		this.tKW_ALIGNOF1 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_ALIGNOF1");
		this.tKW_ALIGNOF2 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_ALIGNOF2");
		this.tKW_ALIGNOF3 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_ALIGNOF3");
		this.tKW_ASM1 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_ASM1");
		this.tKW_ASM2 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_ASM2");
		this.tKW_ASM3 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_ASM3");
		this.tKW_BOOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_BOOL");
		this.tKW_BREAK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_BREAK");
		this.tKW_BUILTIN_VA_LIST = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_BUILTIN_VA_LIST");
		this.tKW_BUILTIN_OFFSETOF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_BUILTIN_OFFSETOF");
		this.tKW_CASE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_CASE");
		this.tKW_CHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_CHAR");
		this.tKW_COMPLEX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_COMPLEX");
		this.tKW_CONST = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_CONST");
		this.tKW_CONTINUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_CONTINUE");
		this.tKW_DEFAULT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_DEFAULT");
		this.tKW_DO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_DO");
		this.tKW_DOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_DOUBLE");
		this.tKW_ELSE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_ELSE");
		this.tKW_EXTENSION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_EXTENSION");
		this.tKW_ENUM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_ENUM");
		this.tKW_EXTERN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_EXTERN");
		this.tKW_FLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_FLOAT");
		this.tKW_FOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_FOR");
		this.tKW_GENERIC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_GENERIC");
		this.tKW_GOTO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_GOTO");
		this.tKW_IF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_IF");
		this.tKW_IMAGINARY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_IMAGINARY");
		this.tKW_INLINE1 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_INLINE1");
		this.tKW_INLINE2 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_INLINE2");
		this.tKW_INLINE3 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_INLINE3");
		this.tKW_INT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_INT");
		this.tKW_INT128_3 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_INT128_3");
		this.tKW_LONG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_LONG");
		this.tKW_M128 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_M128");
		this.tKW_M128D = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_M128D");
		this.tKW_M128I = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_M128I");
		this.tKW_NORETURN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_NORETURN");
		this.tKW_PRAGMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_PRAGMA");
		this.tKW_REGISTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_REGISTER");
		this.tKW_RESTRICT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_RESTRICT");
		this.tKW_RESTRICT2 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_RESTRICT2");
		this.tKW_RESTRICT3 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_RESTRICT3");
		this.tKW_RETURN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_RETURN");
		this.tKW_SHORT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_SHORT");
		this.tKW_SIGNED1 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_SIGNED1");
		this.tKW_SIGNED2 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_SIGNED2");
		this.tKW_SIGNED3 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_SIGNED3");
		this.tKW_SIZEOF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_SIZEOF");
		this.tKW_STATIC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_STATIC");
		this.tKW_STATICASSERT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_STATICASSERT");
		this.tKW_STRUCT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_STRUCT");
		this.tKW_SWITCH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_SWITCH");
		this.tKW_THREADLOCAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_THREADLOCAL");
		this.tKW_TYPEDEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_TYPEDEF");
		this.tKW_TYPEOF1 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_TYPEOF1");
		this.tKW_TYPEOF3 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_TYPEOF3");
		this.tKW_UNION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_UNION");
		this.tKW_UNSIGNED = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_UNSIGNED");
		this.tKW_VOID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_VOID");
		this.tKW_VOLATILE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_VOLATILE");
		this.tKW_VOLATILE2 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_VOLATILE2");
		this.tKW_WHILE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.KW_WHILE");
		this.tSTARASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.STARASSIGN");
		this.tDIVASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.DIVASSIGN");
		this.tMODASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.MODASSIGN");
		this.tPLUSASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.PLUSASSIGN");
		this.tMINUSASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.MINUSASSIGN");
		this.tLEFTSHIFTASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.LEFTSHIFTASSIGN");
		this.tRIGHTSHIFTASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.RIGHTSHIFTASSIGN");
		this.tANDASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.ANDASSIGN");
		this.tXORASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.XORASSIGN");
		this.tORASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.ORASSIGN");
		this.tARROW = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.ARROW");
		this.tLINEDIRECTIVE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.LINEDIRECTIVE");
		this.tWHITESPACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.parser.Parser.WHITESPACE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("at.jku.weiner.c.parser.Parser".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public CommonGrammarAccess getCommonGrammarAccess() {
		return gaCommon;
	}

	
	/// *** handled by discoverer  *** / //Model returns common::Model: 
	////	{common::Model} 
	////	(units+=TranslationUnit)
	////;
	////
	////TranslationUnit returns common::TranslationUnit:
	////	{common::TranslationUnit}
	////	parser=Parser
	////;
	/// *** parser *** / Parser common::Parser initRuleAction { at.jku.weiner.c.parser.utils.Scope.createFirstScope("Parser"); }
	//afterRuleAction { at.jku.weiner.c.parser.utils.Scope.removeScope(); }:
	//	{Parser} external+=ExternalDeclaration*
	public ParserElements getParserAccess() {
		return pParser;
	}
	
	public ParserRule getParserRule() {
		return getParserAccess().getRule();
	}
	
	//ExternalDeclaration:
	//	{ExternalDeclaration} ((=>
	//	functiondefHead=FunctionDefHead
	//	SKW_LEFTBRACE) functionDefinition=FunctionDefinition
	//	SKW_RIGHTBRACE
	//	| declaration=Declaration
	//	| semi=SKW_SEMI);
	public ExternalDeclarationElements getExternalDeclarationAccess() {
		return pExternalDeclaration;
	}
	
	public ParserRule getExternalDeclarationRule() {
		return getExternalDeclarationAccess().getRule();
	}
	
	//FunctionDefHead:
	//	{FunctionDefHead} funDeclSpecifiers=FunctionDeclarationSpecifiers?
	//	funDeclarator=Declarator
	//	funDeclaration+=Declaration*;
	public FunctionDefHeadElements getFunctionDefHeadAccess() {
		return pFunctionDefHead;
	}
	
	public ParserRule getFunctionDefHeadRule() {
		return getFunctionDefHeadAccess().getRule();
	}
	
	//FunctionDefinition initRuleAction { at.jku.weiner.c.parser.utils.Scope.createNewScope("FunctionDefinition"); }
	//afterRuleAction { at.jku.weiner.c.parser.utils.Scope.removeScope(); }:
	//	{FunctionDefinition} body=BodyStatement;
	public FunctionDefinitionElements getFunctionDefinitionAccess() {
		return pFunctionDefinition;
	}
	
	public ParserRule getFunctionDefinitionRule() {
		return getFunctionDefinitionAccess().getRule();
	}
	
	////
	//// ambiguity:
	//// 1.)declarationSpecifiers->declarationSpecifier->typeSpecifier->typedefName->IDENTIFIER
	//// 2.)initDeclaratorList->initDeclarator->declarator->directDeclarator->IDENTIFIER
	//Declaration initRuleAction { at.jku.weiner.c.parser.utils.Scope.setTypedef(false); }:
	//	{Declaration} (specifiers=DeclarationSpecifiers
	//	initDeclaratorList+=InitDeclaratorList?
	//	semi=SKW_SEMI
	//	//|	staticAssertDeclaration
	//);
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//FunctionDeclarationSpecifiers:
	//	{FunctionDeclarationSpecifiers} (declarationSpecifier+=StorageClassSpecifier
	//	| declarationSpecifier+=TypeSpecifier
	//	| declarationSpecifier+=TypeQualifier
	//	| declarationSpecifier+=FunctionSpecifier
	//	//|	declarationSpecifier+=alignmentSpecifier
	//)+;
	public FunctionDeclarationSpecifiersElements getFunctionDeclarationSpecifiersAccess() {
		return pFunctionDeclarationSpecifiers;
	}
	
	public ParserRule getFunctionDeclarationSpecifiersRule() {
		return getFunctionDeclarationSpecifiersAccess().getRule();
	}
	
	//DeclarationSpecifiers:
	//	{DeclarationSpecifiers} (declarationSpecifier+=StorageClassSpecifier
	//	| declarationSpecifier+=TypeSpecifier
	//	| declarationSpecifier+=TypeQualifier
	//	| declarationSpecifier+=FunctionSpecifier
	//	//|	declarationSpecifier+=alignmentSpecifier
	//)+;
	public DeclarationSpecifiersElements getDeclarationSpecifiersAccess() {
		return pDeclarationSpecifiers;
	}
	
	public ParserRule getDeclarationSpecifiersRule() {
		return getDeclarationSpecifiersAccess().getRule();
	}
	
	//InitDeclaratorList:
	//	{InitDeclaratorList} initDeclarator+=InitDeclarator (SKW_COMMA initDeclarator+=InitDeclarator)*;
	public InitDeclaratorListElements getInitDeclaratorListAccess() {
		return pInitDeclaratorList;
	}
	
	public ParserRule getInitDeclaratorListRule() {
		return getInitDeclaratorListAccess().getRule();
	}
	
	//InitDeclarator:
	//	{InitDeclarator} declarator=Declarator (SKW_ASSIGN initializer=Initializer)?;
	public InitDeclaratorElements getInitDeclaratorAccess() {
		return pInitDeclarator;
	}
	
	public ParserRule getInitDeclaratorRule() {
		return getInitDeclaratorAccess().getRule();
	}
	
	//StorageClassSpecifier:
	//	{StorageClassSpecifier} (name=KW_TYPEDEF
	//	postAction{ { at.jku.weiner.c.parser.utils.Scope.setTypedef(true); } } | name=KW_EXTERN
	//	| name=KW_STATIC
	//	| name=KW_THREADLOCAL
	//	| name=KW_AUTO
	//	| name=KW_REGISTER);
	public StorageClassSpecifierElements getStorageClassSpecifierAccess() {
		return pStorageClassSpecifier;
	}
	
	public ParserRule getStorageClassSpecifierRule() {
		return getStorageClassSpecifierAccess().getRule();
	}
	
	//TypeSpecifier initRuleAction { at.jku.weiner.c.parser.utils.Log.log("In typeSpecifier "); }:
	//	{TypeSpecifier} name=KW_BOOL
	//	| name=KW_BUILTIN_VA_LIST
	//	| name=KW_CHAR
	//	| name=KW_COMPLEX
	//	| name=KW_DOUBLE
	//	| name=KW_FLOAT
	//	| name=KW_INT
	//	| name=KW_INT128_3
	//	| name=KW_LONG
	//	| name=KW_SHORT
	//	| name=KW_M128
	//	| name=KW_M128D
	//	| name=KW_M128I
	//	| name=KW_SIGNED1
	//	| name=KW_SIGNED2
	//	| name=KW_SIGNED3
	//	| name=KW_UNSIGNED
	//	| name=KW_VOID
	//	| name=KW_EXTENSION (SKW_LEFTPAREN (extType=KW_M128 | extType=KW_M128D | extType=KW_M128I) SKW_RIGHTPAREN)?
	//	//  |	specifier=atomicTypeSpecifier
	//	| specifier=StructOrUnionSpecifier
	//	| specifier=EnumSpecifier
	//	| type=TypedefName
	//	| typeOf=(KW_TYPEOF1 | KW_TYPEOF3) SKW_LEFTPAREN (typeName=TypeName | constExpr=ConstantExpression) SKW_RIGHTPAREN // GCC extension
	//;
	public TypeSpecifierElements getTypeSpecifierAccess() {
		return pTypeSpecifier;
	}
	
	public ParserRule getTypeSpecifierRule() {
		return getTypeSpecifierAccess().getRule();
	}
	
	//TypedefName initRuleAction { at.jku.weiner.c.parser.utils.Log.log("In typedefname "); }:
	//	{TypedefName} id=ID
	//	preAction{ { at.jku.weiner.c.parser.utils.Scope.isTypeName(input) } ? };
	public TypedefNameElements getTypedefNameAccess() {
		return pTypedefName;
	}
	
	public ParserRule getTypedefNameRule() {
		return getTypedefNameAccess().getRule();
	}
	
	//StructOrUnionSpecifier DeclarationSpecifier initRuleAction {
	//at.jku.weiner.c.parser.utils.Scope.createNewScope("StructOrUnion"); } afterRuleAction {
	//at.jku.weiner.c.parser.utils.Scope.removeScope(); }:
	//	{StructOrUnionSpecifier} type=StructOrUnion (id=ID? SKW_LEFTBRACE structDeclList=StructDeclarationList SKW_RIGHTBRACE
	//	| id=ID)
	public StructOrUnionSpecifierElements getStructOrUnionSpecifierAccess() {
		return pStructOrUnionSpecifier;
	}
	
	public ParserRule getStructOrUnionSpecifierRule() {
		return getStructOrUnionSpecifierAccess().getRule();
	}
	
	//StructOrUnion:
	//	{StructOrUnion} name=KW_STRUCT
	//	| name=KW_UNION;
	public StructOrUnionElements getStructOrUnionAccess() {
		return pStructOrUnion;
	}
	
	public ParserRule getStructOrUnionRule() {
		return getStructOrUnionAccess().getRule();
	}
	
	//StructDeclarationList:
	//	structDeclaration+=StructDeclaration+;
	public StructDeclarationListElements getStructDeclarationListAccess() {
		return pStructDeclarationList;
	}
	
	public ParserRule getStructDeclarationListRule() {
		return getStructDeclarationListAccess().getRule();
	}
	
	//StructDeclaration:
	//	list=SpecifierQualifierList structDeclarationList=StructDeclaratorList? SKW_SEMI
	//	//|	staticAssertDeclaration
	//;
	public StructDeclarationElements getStructDeclarationAccess() {
		return pStructDeclaration;
	}
	
	public ParserRule getStructDeclarationRule() {
		return getStructDeclarationAccess().getRule();
	}
	
	//SpecifierQualifierList initRuleAction { at.jku.weiner.c.parser.utils.Log.log("In SpecifierQualifierList "); }:
	//	{SpecifierQualifierList} (typeSpecifier+=TypeSpecifier | typeQualifier+=TypeQualifier)+;
	public SpecifierQualifierListElements getSpecifierQualifierListAccess() {
		return pSpecifierQualifierList;
	}
	
	public ParserRule getSpecifierQualifierListRule() {
		return getSpecifierQualifierListAccess().getRule();
	}
	
	//StructDeclaratorList:
	//	structDeclarator+=StructDeclarator (SKW_COMMA structDeclarator+=StructDeclarator)*;
	public StructDeclaratorListElements getStructDeclaratorListAccess() {
		return pStructDeclaratorList;
	}
	
	public ParserRule getStructDeclaratorListRule() {
		return getStructDeclaratorListAccess().getRule();
	}
	
	//StructDeclarator:
	//	declarator=Declarator (SKW_COLON constExpr+=ConstantExpression)?
	//	| SKW_COLON constExpr+=ConstantExpression;
	public StructDeclaratorElements getStructDeclaratorAccess() {
		return pStructDeclarator;
	}
	
	public ParserRule getStructDeclaratorRule() {
		return getStructDeclaratorAccess().getRule();
	}
	
	//EnumSpecifier DeclarationSpecifier:
	//	{EnumSpecifier} (KW_ENUM (SKW_LEFTBRACE enumList=EnumeratorList SKW_RIGHTBRACE
	//	| id=ID (SKW_LEFTBRACE enumList=EnumeratorList SKW_RIGHTBRACE)?))
	public EnumSpecifierElements getEnumSpecifierAccess() {
		return pEnumSpecifier;
	}
	
	public ParserRule getEnumSpecifierRule() {
		return getEnumSpecifierAccess().getRule();
	}
	
	//EnumeratorList:
	//	enumerator+=Enumerator (SKW_COMMA enumerator+=Enumerator)*
	//	lastComma?=SKW_COMMA?;
	public EnumeratorListElements getEnumeratorListAccess() {
		return pEnumeratorList;
	}
	
	public ParserRule getEnumeratorListRule() {
		return getEnumeratorListAccess().getRule();
	}
	
	//Enumerator:
	//	{Enumerator} id=ID (SKW_ASSIGN expr=ConstantExpression)?;
	public EnumeratorElements getEnumeratorAccess() {
		return pEnumerator;
	}
	
	public ParserRule getEnumeratorRule() {
		return getEnumeratorAccess().getRule();
	}
	
	/// *
	//atomicTypeSpecifier returns declarationSpecifier:
	//	ATOMIC LEFTPAREN typeName RIGHTPAREN
	//;
	// * / TypeQualifier:
	//	{TypeQualifier} (type=KW_CONST
	//	| type=KW_RESTRICT
	//	| type=KW_RESTRICT2
	//	| type=KW_RESTRICT3
	//	| type=KW_VOLATILE
	//	| type=KW_ATOMIC);
	public TypeQualifierElements getTypeQualifierAccess() {
		return pTypeQualifier;
	}
	
	public ParserRule getTypeQualifierRule() {
		return getTypeQualifierAccess().getRule();
	}
	
	//FunctionSpecifier:
	//	{FunctionSpecifier} ((name=KW_INLINE1
	//	| name=KW_INLINE2 // GCC extension
	//	| name=KW_INLINE3 // GCC extension?
	//	| name=KW_NORETURN
	//	//|	'__stdcall'
	//) | gccAttributeSpecifier=GccAttributeSpecifier
	//	//|	'__declspec' LEFTPAREN IDENTIFIER RIGHTPAREN
	//);
	public FunctionSpecifierElements getFunctionSpecifierAccess() {
		return pFunctionSpecifier;
	}
	
	public ParserRule getFunctionSpecifierRule() {
		return getFunctionSpecifierAccess().getRule();
	}
	
	/// *
	//alignmentSpecifier: ALIGNAS LEFTPAREN (typeName | constantExpression) RIGHTPAREN;
	// * / Declarator:
	//	{Declarator} pointer=Pointer?
	//	gccDeclExt1+=GccDeclaratorExtension*
	//	declarator=DirectDeclarator gccDeclExt2+=GccDeclaratorExtension*;
	public DeclaratorElements getDeclaratorAccess() {
		return pDeclarator;
	}
	
	public ParserRule getDeclaratorRule() {
		return getDeclaratorAccess().getRule();
	}
	
	//DirectDeclarator:
	//	{DirectDeclarator} (id=ID
	//	preAction{ { at.jku.weiner.c.parser.utils.Scope.setTemp(input);
	//	} } postAction{ { at.jku.weiner.c.parser.utils.Scope.addTypedefIfIsTypedef();
	//	} } | SKW_LEFTPAREN declarator=Declarator SKW_RIGHTPAREN) declaratorSuffix+=DeclaratorSuffix*;
	public DirectDeclaratorElements getDirectDeclaratorAccess() {
		return pDirectDeclarator;
	}
	
	public ParserRule getDirectDeclaratorRule() {
		return getDirectDeclaratorAccess().getRule();
	}
	
	//DeclaratorSuffix:
	//	{DeclaratorSuffix} (SKW_LEFTBRACKET typeQualifierList=TypeQualifierList?
	//	expr=AssignmentExpression? SKW_RIGHTBRACKET
	//	| SKW_LEFTBRACKET static=KW_STATIC typeQualifierList=TypeQualifierList?
	//	expr=AssignmentExpression SKW_RIGHTBRACKET
	//	| SKW_LEFTBRACKET typeQualifierList=TypeQualifierList static=KW_STATIC
	//	expr=AssignmentExpression SKW_RIGHTBRACKET
	//	| SKW_LEFTBRACKET typeQualifierList=TypeQualifierList? star=SKW_STAR SKW_RIGHTBRACKET
	//	| lastSuffix=DirectDeclaratorLastSuffix);
	public DeclaratorSuffixElements getDeclaratorSuffixAccess() {
		return pDeclaratorSuffix;
	}
	
	public ParserRule getDeclaratorSuffixRule() {
		return getDeclaratorSuffixAccess().getRule();
	}
	
	//DirectDeclaratorLastSuffix:
	//	{DirectDeclaratorLastSuffix} SKW_LEFTPAREN (parameterTypeList+=ParameterTypeList | identifierList=IdentifierList?)
	//	SKW_RIGHTPAREN;
	public DirectDeclaratorLastSuffixElements getDirectDeclaratorLastSuffixAccess() {
		return pDirectDeclaratorLastSuffix;
	}
	
	public ParserRule getDirectDeclaratorLastSuffixRule() {
		return getDirectDeclaratorLastSuffixAccess().getRule();
	}
	
	//GccDeclaratorExtension:
	//	{GccDeclaratorExtension} (asm=(KW_ASM1 | KW_ASM2 | KW_ASM3) SKW_LEFTPAREN string+=STRING_LITERAL+ SKW_RIGHTPAREN
	//	| gccAttributeSpecifier=GccAttributeSpecifier);
	public GccDeclaratorExtensionElements getGccDeclaratorExtensionAccess() {
		return pGccDeclaratorExtension;
	}
	
	public ParserRule getGccDeclaratorExtensionRule() {
		return getGccDeclaratorExtensionAccess().getRule();
	}
	
	//GccAttributeSpecifier:
	//	{GccAttributeSpecifier} KW_ATTRIBUTE SKW_LEFTPAREN SKW_LEFTPAREN
	//	list=GccAttributeList?
	//	SKW_RIGHTPAREN SKW_RIGHTPAREN;
	public GccAttributeSpecifierElements getGccAttributeSpecifierAccess() {
		return pGccAttributeSpecifier;
	}
	
	public ParserRule getGccAttributeSpecifierRule() {
		return getGccAttributeSpecifierAccess().getRule();
	}
	
	//GccAttributeList:
	//	gccAttribute+=GccAttribute (SKW_COMMA gccAttribute+=GccAttribute)*;
	public GccAttributeListElements getGccAttributeListAccess() {
		return pGccAttributeList;
	}
	
	public ParserRule getGccAttributeListRule() {
		return getGccAttributeListAccess().getRule();
	}
	
	//GccAttribute:
	//	{GccAttribute} (id=ID
	//	| const=Constant1
	//	| keyword=ParserKeywords) (SKW_LEFTPAREN list=ArgumentExpressionList? SKW_RIGHTPAREN)?;
	public GccAttributeElements getGccAttributeAccess() {
		return pGccAttribute;
	}
	
	public ParserRule getGccAttributeRule() {
		return getGccAttributeAccess().getRule();
	}
	
	//Pointer:
	//	{Pointer} ((star+=SKW_STAR | caret+=SKW_CARET) typeQualifierList+=TypeQualifierList?)*
	//	//|	{pointer} CARET typeQualifierList=typeQualifierList? pointer=pointer?// Blocks language extension
	//;
	public PointerElements getPointerAccess() {
		return pPointer;
	}
	
	public ParserRule getPointerRule() {
		return getPointerAccess().getRule();
	}
	
	//TypeQualifierList:
	//	{TypeQualifierList} typeQualifier+=TypeQualifier+;
	public TypeQualifierListElements getTypeQualifierListAccess() {
		return pTypeQualifierList;
	}
	
	public ParserRule getTypeQualifierListRule() {
		return getTypeQualifierListAccess().getRule();
	}
	
	//ParameterTypeList:
	//	{ParameterTypeList} list=ParameterList (SKW_COMMA ellipsis?=Ellipsis)?;
	public ParameterTypeListElements getParameterTypeListAccess() {
		return pParameterTypeList;
	}
	
	public ParserRule getParameterTypeListRule() {
		return getParameterTypeListAccess().getRule();
	}
	
	//ParameterList:
	//	{ParameterList} parameterDeclaration+=ParameterDeclaration (SKW_COMMA parameterDeclaration+=ParameterDeclaration)*;
	public ParameterListElements getParameterListAccess() {
		return pParameterList;
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}
	
	//ParameterDeclaration:
	//	{ParameterDeclaration} declSpecifiers=DeclarationSpecifiers (declarator=Declarator
	//	| abstractDeclator=AbstractDeclarator?);
	public ParameterDeclarationElements getParameterDeclarationAccess() {
		return pParameterDeclaration;
	}
	
	public ParserRule getParameterDeclarationRule() {
		return getParameterDeclarationAccess().getRule();
	}
	
	//IdentifierList:
	//	{IdentifierList} id+=MyIdentifier (SKW_COMMA id+=MyIdentifier)*;
	public IdentifierListElements getIdentifierListAccess() {
		return pIdentifierList;
	}
	
	public ParserRule getIdentifierListRule() {
		return getIdentifierListAccess().getRule();
	}
	
	//MyIdentifier:
	//	{MyIdentifier} id=ID;
	public MyIdentifierElements getMyIdentifierAccess() {
		return pMyIdentifier;
	}
	
	public ParserRule getMyIdentifierRule() {
		return getMyIdentifierAccess().getRule();
	}
	
	//TypeName initRuleAction { at.jku.weiner.c.parser.utils.Log.log("In type name"); }:
	//	{TypeName} list=SpecifierQualifierList
	//	preAction{ { at.jku.weiner.c.parser.utils.Log.error("In typeName");
	//	} } abstractDeclarator=AbstractDeclarator?;
	public TypeNameElements getTypeNameAccess() {
		return pTypeName;
	}
	
	public ParserRule getTypeNameRule() {
		return getTypeNameAccess().getRule();
	}
	
	//AbstractDeclarator:
	//	{AbstractDeclarator} pointer=Pointer
	//	//(directAbstractDeclarator=DirectAbstractDeclarator)?
	//	//(gccDeclExtAbstract+=gccDeclaratorExtension)*
	//	//| 
	//	//(directAbstractDeclarator=DirectAbstractDeclarator)?
	//	//(gccDeclExtAbstract+=gccDeclaratorExtension)*
	//;
	public AbstractDeclaratorElements getAbstractDeclaratorAccess() {
		return pAbstractDeclarator;
	}
	
	public ParserRule getAbstractDeclaratorRule() {
		return getAbstractDeclaratorAccess().getRule();
	}
	
	////DirectAbstractDeclarator returns AbstractDeclarator:
	////	{DirectAbstractDeclarator}
	////	(SKW_LEFTPAREN declarator=AbstractDeclarator SKW_RIGHTPAREN
	////		//(gccDeclExt+=gccDeclaratorExtension)*
	////	|	abstractDeclaratorSuffix+=AbstractDeclaratorSuffix
	////	)
	////	
	////	//(abstractDeclaratorSuffix+=abstractDeclaratorSuffix)*
	////;
	////AbstractDeclaratorSuffix:
	////	{AbstractDeclaratorSuffix}
	////	(SKW_LEFTBRACKET typeQualifierList=TypeQualifierList? (assignmentExpr+=AssignmentExpression)? SKW_RIGHTBRACKET
	////	|	SKW_LEFTBRACKET KW_STATIC typeQualifierList=TypeQualifierList? (assignmentExpr+=AssignmentExpression) SKW_RIGHTBRACKET
	////	|	SKW_LEFTBRACKET typeQualifierListOrig=TypeQualifierList KW_STATIC assignmentExpr+=AssignmentExpression SKW_RIGHTBRACKET
	////	|	SKW_LEFTBRACKET SKW_STAR SKW_RIGHTBRACKET
	////	//|	SKW_LEFTPAREN parameterTypeList=ParameterTypeList? SKW_RIGHTPAREN (gccDeclExt+=gccDeclaratorExtension)*
	////	)
	////;
	//Initializer:
	//	{Initializer} (expr=AssignmentExpression
	//	| SKW_LEFTBRACE list=InitializerList SKW_COMMA? SKW_RIGHTBRACE);
	public InitializerElements getInitializerAccess() {
		return pInitializer;
	}
	
	public ParserRule getInitializerRule() {
		return getInitializerAccess().getRule();
	}
	
	//InitializerList:
	//	{InitializerList} designation+=Designation?
	//	initializer+=Initializer (SKW_COMMA
	//	//(designation+=Designation)?
	//	initializer+=Initializer)*;
	public InitializerListElements getInitializerListAccess() {
		return pInitializerList;
	}
	
	public ParserRule getInitializerListRule() {
		return getInitializerListAccess().getRule();
	}
	
	/// *** Statements * / BlockList:
	//	{BlockList} (declaration+=Declaration | statement+=Statement)+;
	public BlockListElements getBlockListAccess() {
		return pBlockList;
	}
	
	public ParserRule getBlockListRule() {
		return getBlockListAccess().getRule();
	}
	
	//Statement initRuleAction { at.jku.weiner.c.parser.utils.Log.error("in statement"); }:
	//	{Statement} (stmt=LabeledStatement
	//	| stmt=CompoundStatement
	//	| stmt=ExpressionStatement
	//	| stmt=SelectionStatement
	//	| stmt=IterationStatement
	//	| stmt=JumpStatement
	//	| stmt=AsmStatement);
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//LabeledStatement Statement:
	//	{LabeledStatement} (id=ID SKW_COLON lStmt=Statement
	//	| case=KW_CASE (lower=Constant1 Ellipsis higher=Constant1 | expr=ConstantExpression) SKW_COLON lStmt=Statement
	//	| mydefault?=KW_DEFAULT SKW_COLON lStmt=Statement)
	public LabeledStatementElements getLabeledStatementAccess() {
		return pLabeledStatement;
	}
	
	public ParserRule getLabeledStatementRule() {
		return getLabeledStatementAccess().getRule();
	}
	
	//CompoundStatement Statement initRuleAction { at.jku.weiner.c.parser.utils.Scope.createNewScope("CompoundStatement"); }
	//afterRuleAction { at.jku.weiner.c.parser.utils.Scope.removeScope(); }:
	//	{CompoundStatement} SKW_LEFTBRACE
	//	body=BodyStatement
	//	SKW_RIGHTBRACE
	public CompoundStatementElements getCompoundStatementAccess() {
		return pCompoundStatement;
	}
	
	public ParserRule getCompoundStatementRule() {
		return getCompoundStatementAccess().getRule();
	}
	
	//BodyStatement Statement initRuleAction { at.jku.weiner.c.parser.utils.Log.log("In body statement"); }:
	//	{BodyStatement} blockList+=BlockList?
	public BodyStatementElements getBodyStatementAccess() {
		return pBodyStatement;
	}
	
	public ParserRule getBodyStatementRule() {
		return getBodyStatementAccess().getRule();
	}
	
	//ExpressionStatement Statement:
	//	{ExpressionStatement} expression=Expression?
	//	semi=SKW_SEMI
	public ExpressionStatementElements getExpressionStatementAccess() {
		return pExpressionStatement;
	}
	
	public ParserRule getExpressionStatementRule() {
		return getExpressionStatementAccess().getRule();
	}
	
	//SelectionStatement Statement:
	//	{SelectionStatement} (if=KW_IF SKW_LEFTPAREN expr=Expression SKW_RIGHTPAREN ifStatement=Statement (=> else=KW_ELSE
	//	elseStatement=Statement)?
	//	| switch=KW_SWITCH SKW_LEFTPAREN expr=Expression SKW_RIGHTPAREN switchStatement=Statement)
	public SelectionStatementElements getSelectionStatementAccess() {
		return pSelectionStatement;
	}
	
	public ParserRule getSelectionStatementRule() {
		return getSelectionStatementAccess().getRule();
	}
	
	//IterationStatement Statement:
	//	{IterationStatement} (while=KW_WHILE SKW_LEFTPAREN expr=Expression SKW_RIGHTPAREN statement=Statement
	//	| do=KW_DO statement=Statement KW_WHILE SKW_LEFTPAREN expr=Expression SKW_RIGHTPAREN semi=SKW_SEMI
	//	| for=KW_FOR SKW_LEFTPAREN initExpr=Expression? SKW_SEMI expr=Expression? SKW_SEMI incExpr=Expression?
	//	SKW_RIGHTPAREN statement=Statement
	//	| for=KW_FOR SKW_LEFTPAREN initDecl=Declaration expr=Expression? SKW_SEMI incExpr=Expression?
	//	SKW_RIGHTPAREN statement=Statement)
	public IterationStatementElements getIterationStatementAccess() {
		return pIterationStatement;
	}
	
	public ParserRule getIterationStatementRule() {
		return getIterationStatementAccess().getRule();
	}
	
	//JumpStatement Statement:
	//	{JumpStatement} (continue=KW_CONTINUE semi=SKW_SEMI
	//	| break=KW_BREAK semi=SKW_SEMI
	//	| return=KW_RETURN expr=Expression? semi=SKW_SEMI
	//	| goto=KW_GOTO expr=UnaryExpression semi=SKW_SEMI // GCC extension
	//	//|	KW_GOTO id=ID semi=SEMI //(can be reached over GOTO unaryExpression)
	//)
	public JumpStatementElements getJumpStatementAccess() {
		return pJumpStatement;
	}
	
	public ParserRule getJumpStatementRule() {
		return getJumpStatementAccess().getRule();
	}
	
	//AsmStatement Statement:
	//	{AsmStatement} (asm=KW_ASM1 | asm=KW_ASM2 | asm=KW_ASM3) (volatile=KW_VOLATILE | volatile=KW_VOLATILE2)?
	//	SKW_LEFTPAREN (asmLine1=AsmLineWithoutColon?
	//	asmLines+=AsmLineWithColon*) SKW_RIGHTPAREN semi=SKW_SEMI
	public AsmStatementElements getAsmStatementAccess() {
		return pAsmStatement;
	}
	
	public ParserRule getAsmStatementRule() {
		return getAsmStatementAccess().getRule();
	}
	
	//AsmLineWithoutColon:
	//	{AsmLineWithoutColon} expr=LogicalOrExpression asmLines+=AsmLine*;
	public AsmLineWithoutColonElements getAsmLineWithoutColonAccess() {
		return pAsmLineWithoutColon;
	}
	
	public ParserRule getAsmLineWithoutColonRule() {
		return getAsmLineWithoutColonAccess().getRule();
	}
	
	//AsmLine:
	//	{AsmLine} comma?=SKW_COMMA expr=LogicalOrExpression;
	public AsmLineElements getAsmLineAccess() {
		return pAsmLine;
	}
	
	public ParserRule getAsmLineRule() {
		return getAsmLineAccess().getRule();
	}
	
	//AsmLineWithColon:
	//	{AsmLineWithColon} SKW_COLON asmLine=AsmLineWithoutColon?;
	public AsmLineWithColonElements getAsmLineWithColonAccess() {
		return pAsmLineWithColon;
	}
	
	public ParserRule getAsmLineWithColonRule() {
		return getAsmLineWithColonAccess().getRule();
	}
	
	//Designation:
	//	{Designation} list=DesignatorList SKW_ASSIGN;
	public DesignationElements getDesignationAccess() {
		return pDesignation;
	}
	
	public ParserRule getDesignationRule() {
		return getDesignationAccess().getRule();
	}
	
	//DesignatorList:
	//	{DesignatorList} designator+=Designator designator+=Designator*;
	public DesignatorListElements getDesignatorListAccess() {
		return pDesignatorList;
	}
	
	public ParserRule getDesignatorListRule() {
		return getDesignatorListAccess().getRule();
	}
	
	//Designator:
	//	{Designator} (SKW_LEFTBRACKET expr=ConstantExpression SKW_RIGHTBRACKET
	//	| SKW_DOT id=ID);
	public DesignatorElements getDesignatorAccess() {
		return pDesignator;
	}
	
	public ParserRule getDesignatorRule() {
		return getDesignatorAccess().getRule();
	}
	
	////staticAssertDeclaration: STATICASSERT LEFTPAREN constantExpression COMMA STRINGLITERAL+ RIGHTPAREN SEMI;
	/// *** Expressions *** / Expression:
	//	{Expression} exprExpr+=AssignmentExpression (SKW_COMMA exprExpr+=AssignmentExpression)*;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//AssignmentExpression Expression:
	//	{AssignmentExpression} (expr=Lvalue
	//	op=AssignmentOperator
	//	assignmentExpr=AssignmentExpression
	//	| expr=ConditionalExpression)
	public AssignmentExpressionElements getAssignmentExpressionAccess() {
		return pAssignmentExpression;
	}
	
	public ParserRule getAssignmentExpressionRule() {
		return getAssignmentExpressionAccess().getRule();
	}
	
	//Lvalue Expression:
	//	UnaryExpression
	public LvalueElements getLvalueAccess() {
		return pLvalue;
	}
	
	public ParserRule getLvalueRule() {
		return getLvalueAccess().getRule();
	}
	
	//AssignmentOperator:
	//	{AssignmentOperator} (op=SKW_ASSIGN
	//	| op=STARASSIGN
	//	| op=DIVASSIGN
	//	| op=MODASSIGN
	//	| op=PLUSASSIGN
	//	| op=MINUSASSIGN
	//	| op=LEFTSHIFTASSIGN
	//	| op=RIGHTSHIFTASSIGN
	//	| op=ANDASSIGN
	//	| op=XORASSIGN
	//	| op=ORASSIGN);
	public AssignmentOperatorElements getAssignmentOperatorAccess() {
		return pAssignmentOperator;
	}
	
	public ParserRule getAssignmentOperatorRule() {
		return getAssignmentOperatorAccess().getRule();
	}
	
	//ConditionalExpression Expression:
	//	{ConditionalExpression} expr=LogicalOrExpression (SKW_QUESTION qExpr=Expression SKW_COLON
	//	cExpr=ConditionalExpression)?
	public ConditionalExpressionElements getConditionalExpressionAccess() {
		return pConditionalExpression;
	}
	
	public ParserRule getConditionalExpressionRule() {
		return getConditionalExpressionAccess().getRule();
	}
	
	//LogicalOrExpression Expression:
	//	{LogicalOrExpression} expr+=LogicalAndExpression (SKW_OROR expr+=LogicalAndExpression)*
	public LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return pLogicalOrExpression;
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}
	
	//LogicalAndExpression Expression:
	//	{LogicalAndExpression} expr+=InclusiveOrExpression (SKW_ANDAND expr+=InclusiveOrExpression)*
	public LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return pLogicalAndExpression;
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}
	
	//InclusiveOrExpression Expression:
	//	{InclusiveOrExpression} expr+=ExclusiveOrExpression (SKW_OR expr+=ExclusiveOrExpression)*
	public InclusiveOrExpressionElements getInclusiveOrExpressionAccess() {
		return pInclusiveOrExpression;
	}
	
	public ParserRule getInclusiveOrExpressionRule() {
		return getInclusiveOrExpressionAccess().getRule();
	}
	
	//ExclusiveOrExpression Expression:
	//	{ExclusiveOrExpression} expr+=AndExpression (SKW_CARET expr+=AndExpression)*
	public ExclusiveOrExpressionElements getExclusiveOrExpressionAccess() {
		return pExclusiveOrExpression;
	}
	
	public ParserRule getExclusiveOrExpressionRule() {
		return getExclusiveOrExpressionAccess().getRule();
	}
	
	//AndExpression Expression:
	//	{AndExpression} expr+=EqualityExpression (SKW_AND expr+=EqualityExpression)*
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	//EqualityExpression Expression:
	//	{EqualityExpression} expr+=RelationalExpression ((op+=SKW_EQUAL | op+=SKW_NOTEQUAL) expr+=RelationalExpression)*
	public EqualityExpressionElements getEqualityExpressionAccess() {
		return pEqualityExpression;
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}
	
	//RelationalExpression Expression:
	//	{RelationalExpression} expr+=ShiftExpression ((op+=SKW_LESS | op+=SKW_GREATER | op+=SKW_LESSEQUAL |
	//	op+=SKW_GREATEREQUAL) expr+=ShiftExpression)*
	public RelationalExpressionElements getRelationalExpressionAccess() {
		return pRelationalExpression;
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}
	
	//ShiftExpression Expression:
	//	{ShiftExpression} expr+=AdditiveExpression ((op+=SKW_LEFTSHIFT | op+=SKW_RIGHTSHIFT) expr+=AdditiveExpression)*
	public ShiftExpressionElements getShiftExpressionAccess() {
		return pShiftExpression;
	}
	
	public ParserRule getShiftExpressionRule() {
		return getShiftExpressionAccess().getRule();
	}
	
	//AdditiveExpression Expression:
	//	{AdditiveExpression} expr+=MultiplicativeExpression ((op+=SKW_PLUS | op+=SKW_MINUS) expr+=MultiplicativeExpression)*
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return pAdditiveExpression;
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}
	
	//MultiplicativeExpression Expression:
	//	{MultiplicativeExpression} expr+=CastExpression ((op+=SKW_STAR | op+=SKW_DIV | op+=SKW_MOD) expr+=CastExpression)*
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return pMultiplicativeExpression;
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}
	
	//CastExpression Expression initRuleAction { at.jku.weiner.c.parser.utils.Log.log("In cast expression"); }:
	//	{CastExpression} (SKW_LEFTPAREN type=TypeName SKW_RIGHTPAREN
	//	expr=CastExpression
	//	| expr=UnaryExpression
	//	//|	'__extension__' SKW_LEFTPAREN type=TypeName SKW_RIGHTPAREN castExpr=CastExpression
	//)
	public CastExpressionElements getCastExpressionAccess() {
		return pCastExpression;
	}
	
	public ParserRule getCastExpressionRule() {
		return getCastExpressionAccess().getRule();
	}
	
	//UnaryExpression Expression initRuleAction { at.jku.weiner.c.parser.utils.Log.log("In unary expression"); }:
	//	{UnaryExpression} (expr=PostfixExpression
	//	| plusplus=SKW_PLUSPLUS expr=UnaryExpression
	//	| minusminus=SKW_MINUSMINUS expr=UnaryExpression
	//	| op=UnaryOperator expr=CastExpression
	//	| sizeOf=KW_SIZEOF SKW_LEFTPAREN typeName=TypeName SKW_RIGHTPAREN
	//	| sizeOf=KW_SIZEOF expr=UnaryExpression
	//	| alignOf=(KW_ALIGNOF1 | KW_ALIGNOF2 | KW_ALIGNOF3) SKW_LEFTPAREN typeName=TypeName SKW_RIGHTPAREN
	//	| andand=SKW_ANDAND id=ID // GCC extension address of label
	//)
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return pUnaryExpression;
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}
	
	//UnaryOperator:
	//	{UnaryOperator} (op=SKW_AND
	//	| op=SKW_STAR
	//	| op=SKW_PLUS
	//	| op=SKW_MINUS
	//	| op=SKW_TILDE
	//	| op=SKW_NOT);
	public UnaryOperatorElements getUnaryOperatorAccess() {
		return pUnaryOperator;
	}
	
	public ParserRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}
	
	//PostfixExpression Expression initRuleAction { at.jku.weiner.c.parser.utils.Log.log("In postfix expression"); }:
	//	{PostfixExpression} (ext?=KW_EXTENSION? SKW_LEFTPAREN typeName=TypeName SKW_RIGHTPAREN
	//	SKW_LEFTBRACE initializerList=InitializerList
	//	comma?=SKW_COMMA? SKW_RIGHTBRACE | expr+=PrimaryExpression) (suffix+=PostfixExpressionSuffixArray
	//	| suffix+=PostfixExpressionSuffixArgument
	//	| suffix+=PostfixExpressionSuffixDot
	//	| suffix+=PostfixExpressionSuffixArrow
	//	| suffix+=PostfixExpressionSuffixPlusPlus
	//	| suffix+=PostfixExpressionSuffixMinusMinus)*
	public PostfixExpressionElements getPostfixExpressionAccess() {
		return pPostfixExpression;
	}
	
	public ParserRule getPostfixExpressionRule() {
		return getPostfixExpressionAccess().getRule();
	}
	
	//PostfixExpressionSuffixArray PostfixExpressionSuffix:
	//	{PostfixExpressionSuffixArray} SKW_LEFTBRACKET arrayExpr=Expression SKW_RIGHTBRACKET
	public PostfixExpressionSuffixArrayElements getPostfixExpressionSuffixArrayAccess() {
		return pPostfixExpressionSuffixArray;
	}
	
	public ParserRule getPostfixExpressionSuffixArrayRule() {
		return getPostfixExpressionSuffixArrayAccess().getRule();
	}
	
	//PostfixExpressionSuffixArgument PostfixExpressionSuffix:
	//	{PostfixExpressionSuffixArgument} SKW_LEFTPAREN argumentExpressionList=ArgumentExpressionList? SKW_RIGHTPAREN
	public PostfixExpressionSuffixArgumentElements getPostfixExpressionSuffixArgumentAccess() {
		return pPostfixExpressionSuffixArgument;
	}
	
	public ParserRule getPostfixExpressionSuffixArgumentRule() {
		return getPostfixExpressionSuffixArgumentAccess().getRule();
	}
	
	//PostfixExpressionSuffixDot PostfixExpressionSuffix:
	//	{PostfixExpressionSuffixDot} SKW_DOT id=ID
	public PostfixExpressionSuffixDotElements getPostfixExpressionSuffixDotAccess() {
		return pPostfixExpressionSuffixDot;
	}
	
	public ParserRule getPostfixExpressionSuffixDotRule() {
		return getPostfixExpressionSuffixDotAccess().getRule();
	}
	
	//PostfixExpressionSuffixArrow PostfixExpressionSuffix:
	//	{PostfixExpressionSuffixArrow} ARROW id=ID
	public PostfixExpressionSuffixArrowElements getPostfixExpressionSuffixArrowAccess() {
		return pPostfixExpressionSuffixArrow;
	}
	
	public ParserRule getPostfixExpressionSuffixArrowRule() {
		return getPostfixExpressionSuffixArrowAccess().getRule();
	}
	
	//PostfixExpressionSuffixPlusPlus PostfixExpressionSuffix:
	//	{PostfixExpressionSuffixPlusPlus} SKW_PLUSPLUS
	public PostfixExpressionSuffixPlusPlusElements getPostfixExpressionSuffixPlusPlusAccess() {
		return pPostfixExpressionSuffixPlusPlus;
	}
	
	public ParserRule getPostfixExpressionSuffixPlusPlusRule() {
		return getPostfixExpressionSuffixPlusPlusAccess().getRule();
	}
	
	//PostfixExpressionSuffixMinusMinus PostfixExpressionSuffix:
	//	{PostfixExpressionSuffixMinusMinus} SKW_MINUSMINUS
	public PostfixExpressionSuffixMinusMinusElements getPostfixExpressionSuffixMinusMinusAccess() {
		return pPostfixExpressionSuffixMinusMinus;
	}
	
	public ParserRule getPostfixExpressionSuffixMinusMinusRule() {
		return getPostfixExpressionSuffixMinusMinusAccess().getRule();
	}
	
	//ArgumentExpressionList:
	//	expr+=AssignmentExpression (SKW_COMMA expr+=AssignmentExpression)*;
	public ArgumentExpressionListElements getArgumentExpressionListAccess() {
		return pArgumentExpressionList;
	}
	
	public ParserRule getArgumentExpressionListRule() {
		return getArgumentExpressionListAccess().getRule();
	}
	
	//PrimaryExpression Expression initRuleAction { at.jku.weiner.c.parser.utils.Log.log("In primary expression"); }:
	//	{PrimaryExpression} (id=ID
	//	| const=Constant2
	//	| string+=STRING_LITERAL+
	//	| SKW_LEFTPAREN expr=Expression SKW_RIGHTPAREN
	//	//|	genericSelection=genericSelection
	//	| ext?=KW_EXTENSION? SKW_LEFTPAREN compoundStmt=CompoundStatement SKW_RIGHTPAREN // Blocks (GCC extension)
	//	//|	'__builtin_va_arg' LEFTPAREN expr=unaryExpression COMMA typeName=typeName RIGHTPAREN
	//	| builtin_offsetof?=KW_BUILTIN_OFFSETOF SKW_LEFTPAREN typeName=TypeName SKW_COMMA expr=UnaryExpression SKW_RIGHTPAREN)
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//ConstantExpression Expression:
	//	{ConstantExpression} expr=ConditionalExpression
	public ConstantExpressionElements getConstantExpressionAccess() {
		return pConstantExpression;
	}
	
	public ParserRule getConstantExpressionRule() {
		return getConstantExpressionAccess().getRule();
	}
	
	/// *** UNKNOWN!!! *** / //genericSelection: GENERIC LEFTPAREN assignmentExpression COMMA genericAssocList=genericAssocList RIGHTPAREN;
	////genericAssocList: genericAssociation (COMMA genericAssociation+=genericAssociation)*;
	/// *
	//genericAssociation:
	//	(typeName | DEFAULT) COLON
	//	(assignmentExpression=assignmentExpression)
	//;
	// * / / *** lexer *** / / *** start with keywords ;-) * / ParserKeywords:
	//	KW_ATOMIC | KW_AUTO
	//	| KW_BOOL | KW_CONST
	//	| KW_CHAR | KW_DOUBLE
	//	| KW_EXTERN
	//	| KW_FLOAT
	//	| KW_INT
	//	| KW_LONG
	//	| KW_RESTRICT
	//	| KW_SHORT | KW_SIGNED1 | KW_SIGNED2
	//	| KW_SIGNED3 | KW_VOID | KW_UNSIGNED;
	public ParserKeywordsElements getParserKeywordsAccess() {
		return pParserKeywords;
	}
	
	public ParserRule getParserKeywordsRule() {
		return getParserKeywordsAccess().getRule();
	}
	
	//terminal KW_ATOMIC:
	//	SKW_UNDERSCORE 'Atomic';
	public TerminalRule getKW_ATOMICRule() {
		return tKW_ATOMIC;
	}
	
	//terminal KW_ATTRIBUTE:
	//	SKW_UNDERSCORE SKW_UNDERSCORE 'attribute' SKW_UNDERSCORE SKW_UNDERSCORE;
	public TerminalRule getKW_ATTRIBUTERule() {
		return tKW_ATTRIBUTE;
	}
	
	//terminal KW_AUTO:
	//	'auto';
	public TerminalRule getKW_AUTORule() {
		return tKW_AUTO;
	}
	
	//terminal KW_ALIGNAS:
	//	SKW_UNDERSCORE 'Alignas';
	public TerminalRule getKW_ALIGNASRule() {
		return tKW_ALIGNAS;
	}
	
	//terminal KW_ALIGNOF1:
	//	'alignof';
	public TerminalRule getKW_ALIGNOF1Rule() {
		return tKW_ALIGNOF1;
	}
	
	//terminal KW_ALIGNOF2:
	//	SKW_UNDERSCORE SKW_UNDERSCORE KW_ALIGNOF1;
	public TerminalRule getKW_ALIGNOF2Rule() {
		return tKW_ALIGNOF2;
	}
	
	//terminal KW_ALIGNOF3:
	//	KW_ALIGNOF2 SKW_UNDERSCORE SKW_UNDERSCORE;
	public TerminalRule getKW_ALIGNOF3Rule() {
		return tKW_ALIGNOF3;
	}
	
	//terminal KW_ASM1:
	//	'asm';
	public TerminalRule getKW_ASM1Rule() {
		return tKW_ASM1;
	}
	
	//terminal KW_ASM2:
	//	SKW_UNDERSCORE SKW_UNDERSCORE KW_ASM1;
	public TerminalRule getKW_ASM2Rule() {
		return tKW_ASM2;
	}
	
	//terminal KW_ASM3:
	//	KW_ASM2 SKW_UNDERSCORE SKW_UNDERSCORE;
	public TerminalRule getKW_ASM3Rule() {
		return tKW_ASM3;
	}
	
	//terminal KW_BOOL:
	//	SKW_UNDERSCORE 'Bool';
	public TerminalRule getKW_BOOLRule() {
		return tKW_BOOL;
	}
	
	//terminal KW_BREAK:
	//	'break';
	public TerminalRule getKW_BREAKRule() {
		return tKW_BREAK;
	}
	
	//terminal KW_BUILTIN_VA_LIST:
	//	SKW_UNDERSCORE SKW_UNDERSCORE 'builtin_va_list';
	public TerminalRule getKW_BUILTIN_VA_LISTRule() {
		return tKW_BUILTIN_VA_LIST;
	}
	
	//terminal KW_BUILTIN_OFFSETOF:
	//	SKW_UNDERSCORE SKW_UNDERSCORE 'builtin_offsetof';
	public TerminalRule getKW_BUILTIN_OFFSETOFRule() {
		return tKW_BUILTIN_OFFSETOF;
	}
	
	//terminal KW_CASE:
	//	'case';
	public TerminalRule getKW_CASERule() {
		return tKW_CASE;
	}
	
	//terminal KW_CHAR:
	//	'char';
	public TerminalRule getKW_CHARRule() {
		return tKW_CHAR;
	}
	
	//terminal KW_COMPLEX:
	//	SKW_UNDERSCORE 'Complex';
	public TerminalRule getKW_COMPLEXRule() {
		return tKW_COMPLEX;
	}
	
	//terminal KW_CONST:
	//	'const';
	public TerminalRule getKW_CONSTRule() {
		return tKW_CONST;
	}
	
	//terminal KW_CONTINUE:
	//	'continue';
	public TerminalRule getKW_CONTINUERule() {
		return tKW_CONTINUE;
	}
	
	//terminal KW_DEFAULT:
	//	'default';
	public TerminalRule getKW_DEFAULTRule() {
		return tKW_DEFAULT;
	}
	
	//terminal KW_DO:
	//	'do';
	public TerminalRule getKW_DORule() {
		return tKW_DO;
	}
	
	//terminal KW_DOUBLE:
	//	'double';
	public TerminalRule getKW_DOUBLERule() {
		return tKW_DOUBLE;
	}
	
	//terminal KW_ELSE:
	//	'else';
	public TerminalRule getKW_ELSERule() {
		return tKW_ELSE;
	}
	
	//terminal KW_EXTENSION:
	//	SKW_UNDERSCORE SKW_UNDERSCORE 'extension' SKW_UNDERSCORE SKW_UNDERSCORE;
	public TerminalRule getKW_EXTENSIONRule() {
		return tKW_EXTENSION;
	}
	
	//terminal KW_ENUM:
	//	'enum';
	public TerminalRule getKW_ENUMRule() {
		return tKW_ENUM;
	}
	
	//terminal KW_EXTERN:
	//	'extern';
	public TerminalRule getKW_EXTERNRule() {
		return tKW_EXTERN;
	}
	
	//terminal KW_FLOAT:
	//	'float';
	public TerminalRule getKW_FLOATRule() {
		return tKW_FLOAT;
	}
	
	//terminal KW_FOR:
	//	'for';
	public TerminalRule getKW_FORRule() {
		return tKW_FOR;
	}
	
	//terminal KW_GENERIC:
	//	SKW_UNDERSCORE 'Generic';
	public TerminalRule getKW_GENERICRule() {
		return tKW_GENERIC;
	}
	
	//terminal KW_GOTO:
	//	'goto';
	public TerminalRule getKW_GOTORule() {
		return tKW_GOTO;
	}
	
	//terminal KW_IF:
	//	'if';
	public TerminalRule getKW_IFRule() {
		return tKW_IF;
	}
	
	//terminal KW_IMAGINARY:
	//	SKW_UNDERSCORE 'Imaginary';
	public TerminalRule getKW_IMAGINARYRule() {
		return tKW_IMAGINARY;
	}
	
	//terminal KW_INLINE1:
	//	'inline';
	public TerminalRule getKW_INLINE1Rule() {
		return tKW_INLINE1;
	}
	
	//terminal KW_INLINE2:
	//	SKW_UNDERSCORE SKW_UNDERSCORE KW_INLINE1;
	public TerminalRule getKW_INLINE2Rule() {
		return tKW_INLINE2;
	}
	
	//terminal KW_INLINE3:
	//	KW_INLINE2 SKW_UNDERSCORE SKW_UNDERSCORE;
	public TerminalRule getKW_INLINE3Rule() {
		return tKW_INLINE3;
	}
	
	//terminal KW_INT:
	//	'int';
	public TerminalRule getKW_INTRule() {
		return tKW_INT;
	}
	
	//terminal KW_INT128_3:
	//	'__int128';
	public TerminalRule getKW_INT128_3Rule() {
		return tKW_INT128_3;
	}
	
	//terminal KW_LONG:
	//	'long';
	public TerminalRule getKW_LONGRule() {
		return tKW_LONG;
	}
	
	//terminal KW_M128:
	//	SKW_UNDERSCORE SKW_UNDERSCORE 'm128';
	public TerminalRule getKW_M128Rule() {
		return tKW_M128;
	}
	
	//terminal KW_M128D:
	//	KW_M128 'd';
	public TerminalRule getKW_M128DRule() {
		return tKW_M128D;
	}
	
	//terminal KW_M128I:
	//	KW_M128 'i';
	public TerminalRule getKW_M128IRule() {
		return tKW_M128I;
	}
	
	//terminal KW_NORETURN:
	//	SKW_UNDERSCORE 'Noreturn';
	public TerminalRule getKW_NORETURNRule() {
		return tKW_NORETURN;
	}
	
	//terminal KW_PRAGMA:
	//	'pragma';
	public TerminalRule getKW_PRAGMARule() {
		return tKW_PRAGMA;
	}
	
	//terminal KW_REGISTER:
	//	'register';
	public TerminalRule getKW_REGISTERRule() {
		return tKW_REGISTER;
	}
	
	//terminal KW_RESTRICT:
	//	'restrict';
	public TerminalRule getKW_RESTRICTRule() {
		return tKW_RESTRICT;
	}
	
	//terminal KW_RESTRICT2:
	//	SKW_UNDERSCORE SKW_UNDERSCORE KW_RESTRICT;
	public TerminalRule getKW_RESTRICT2Rule() {
		return tKW_RESTRICT2;
	}
	
	//terminal KW_RESTRICT3:
	//	KW_RESTRICT2 SKW_UNDERSCORE SKW_UNDERSCORE;
	public TerminalRule getKW_RESTRICT3Rule() {
		return tKW_RESTRICT3;
	}
	
	//terminal KW_RETURN:
	//	'return';
	public TerminalRule getKW_RETURNRule() {
		return tKW_RETURN;
	}
	
	//terminal KW_SHORT:
	//	'short';
	public TerminalRule getKW_SHORTRule() {
		return tKW_SHORT;
	}
	
	//terminal KW_SIGNED1:
	//	'signed';
	public TerminalRule getKW_SIGNED1Rule() {
		return tKW_SIGNED1;
	}
	
	//terminal KW_SIGNED2:
	//	SKW_UNDERSCORE SKW_UNDERSCORE KW_SIGNED1;
	public TerminalRule getKW_SIGNED2Rule() {
		return tKW_SIGNED2;
	}
	
	//terminal KW_SIGNED3:
	//	KW_SIGNED2 SKW_UNDERSCORE SKW_UNDERSCORE;
	public TerminalRule getKW_SIGNED3Rule() {
		return tKW_SIGNED3;
	}
	
	//terminal KW_SIZEOF:
	//	'sizeof';
	public TerminalRule getKW_SIZEOFRule() {
		return tKW_SIZEOF;
	}
	
	//terminal KW_STATIC:
	//	'static';
	public TerminalRule getKW_STATICRule() {
		return tKW_STATIC;
	}
	
	//terminal KW_STATICASSERT:
	//	SKW_UNDERSCORE 'Static_assert';
	public TerminalRule getKW_STATICASSERTRule() {
		return tKW_STATICASSERT;
	}
	
	//terminal KW_STRUCT:
	//	'struct';
	public TerminalRule getKW_STRUCTRule() {
		return tKW_STRUCT;
	}
	
	//terminal KW_SWITCH:
	//	'switch';
	public TerminalRule getKW_SWITCHRule() {
		return tKW_SWITCH;
	}
	
	//terminal KW_THREADLOCAL:
	//	SKW_UNDERSCORE 'Thread_local';
	public TerminalRule getKW_THREADLOCALRule() {
		return tKW_THREADLOCAL;
	}
	
	//terminal KW_TYPEDEF:
	//	'typedef';
	public TerminalRule getKW_TYPEDEFRule() {
		return tKW_TYPEDEF;
	}
	
	//terminal KW_TYPEOF1:
	//	'typeof';
	public TerminalRule getKW_TYPEOF1Rule() {
		return tKW_TYPEOF1;
	}
	
	//terminal KW_TYPEOF3:
	//	SKW_UNDERSCORE SKW_UNDERSCORE KW_TYPEOF1 SKW_UNDERSCORE SKW_UNDERSCORE;
	public TerminalRule getKW_TYPEOF3Rule() {
		return tKW_TYPEOF3;
	}
	
	//terminal KW_UNION:
	//	'union';
	public TerminalRule getKW_UNIONRule() {
		return tKW_UNION;
	}
	
	//terminal KW_UNSIGNED:
	//	'unsigned';
	public TerminalRule getKW_UNSIGNEDRule() {
		return tKW_UNSIGNED;
	}
	
	//terminal KW_VOID:
	//	'void';
	public TerminalRule getKW_VOIDRule() {
		return tKW_VOID;
	}
	
	//terminal KW_VOLATILE:
	//	'volatile';
	public TerminalRule getKW_VOLATILERule() {
		return tKW_VOLATILE;
	}
	
	//terminal KW_VOLATILE2:
	//	SKW_UNDERSCORE SKW_UNDERSCORE KW_VOLATILE SKW_UNDERSCORE SKW_UNDERSCORE;
	public TerminalRule getKW_VOLATILE2Rule() {
		return tKW_VOLATILE2;
	}
	
	//terminal KW_WHILE:
	//	'while';
	public TerminalRule getKW_WHILERule() {
		return tKW_WHILE;
	}
	
	//terminal STARASSIGN:
	//	SKW_STAR SKW_ASSIGN;
	public TerminalRule getSTARASSIGNRule() {
		return tSTARASSIGN;
	}
	
	//terminal DIVASSIGN:
	//	SKW_DIV SKW_ASSIGN;
	public TerminalRule getDIVASSIGNRule() {
		return tDIVASSIGN;
	}
	
	//terminal MODASSIGN:
	//	SKW_MOD SKW_ASSIGN;
	public TerminalRule getMODASSIGNRule() {
		return tMODASSIGN;
	}
	
	//terminal PLUSASSIGN:
	//	SKW_PLUS SKW_ASSIGN;
	public TerminalRule getPLUSASSIGNRule() {
		return tPLUSASSIGN;
	}
	
	//terminal MINUSASSIGN:
	//	SKW_MINUS SKW_ASSIGN;
	public TerminalRule getMINUSASSIGNRule() {
		return tMINUSASSIGN;
	}
	
	//terminal LEFTSHIFTASSIGN:
	//	SKW_LEFTSHIFT SKW_ASSIGN;
	public TerminalRule getLEFTSHIFTASSIGNRule() {
		return tLEFTSHIFTASSIGN;
	}
	
	//terminal RIGHTSHIFTASSIGN:
	//	SKW_RIGHTSHIFT SKW_ASSIGN;
	public TerminalRule getRIGHTSHIFTASSIGNRule() {
		return tRIGHTSHIFTASSIGN;
	}
	
	//terminal ANDASSIGN:
	//	SKW_AND SKW_ASSIGN;
	public TerminalRule getANDASSIGNRule() {
		return tANDASSIGN;
	}
	
	//terminal XORASSIGN:
	//	SKW_CARET SKW_ASSIGN;
	public TerminalRule getXORASSIGNRule() {
		return tXORASSIGN;
	}
	
	//terminal ORASSIGN:
	//	SKW_OR SKW_ASSIGN;
	public TerminalRule getORASSIGNRule() {
		return tORASSIGN;
	}
	
	//terminal ARROW:
	//	SKW_MINUS SKW_GREATER;
	public TerminalRule getARROWRule() {
		return tARROW;
	}
	
	//terminal LINEDIRECTIVE:
	//	'#' (!NEWLINE | SKW_BACKSLASH NEWLINE)*;
	public TerminalRule getLINEDIRECTIVERule() {
		return tLINEDIRECTIVE;
	}
	
	//terminal WHITESPACE:
	//	' ' | '\t'+;
	public TerminalRule getWHITESPACERule() {
		return tWHITESPACE;
	}
	
	//Constant1:
	//	HEX_LITERAL
	//	| OCTAL_LITERAL
	//	| DECIMAL_LITERAL
	//	| CHAR_LITERAL
	//	| STRING_LITERAL
	//	| FLOAT_LITERAL
	//	| BIN_LITERAL;
	public CommonGrammarAccess.Constant1Elements getConstant1Access() {
		return gaCommon.getConstant1Access();
	}
	
	public ParserRule getConstant1Rule() {
		return getConstant1Access().getRule();
	}
	
	//Constant2:
	//	{Constant2} (hex=HEX_LITERAL
	//	| oct=OCTAL_LITERAL
	//	| dec=DECIMAL_LITERAL
	//	| ch=CHAR_LITERAL
	//	//|	str=STRING_LITERAL
	//	| float=FLOAT_LITERAL
	//	| bin=BIN_LITERAL);
	public CommonGrammarAccess.Constant2Elements getConstant2Access() {
		return gaCommon.getConstant2Access();
	}
	
	public ParserRule getConstant2Rule() {
		return getConstant2Access().getRule();
	}
	
	//// keywords
	//// special keywords
	//SpecialKeywords:
	//	SKW_AND
	//	| SKW_ANDAND
	//	| SKW_ASSIGN
	//	| SKW_BACKSLASH
	//	| SKW_CARET
	//	| SKW_COMMA
	//	| SKW_COLON
	//	| SKW_DIV
	//	| SKW_DOT
	//	| SKW_DOUBLEQUOTE
	//	| SKW_EQUAL
	//	| SKW_GREATER
	//	| SKW_GREATEREQUAL
	//	| SKW_LEFTBRACE
	//	| SKW_LEFTBRACKET
	//	| SKW_LEFTPAREN
	//	| SKW_LEFTSHIFT
	//	| SKW_LESS
	//	| SKW_LESSEQUAL
	//	| SKW_MINUS
	//	| SKW_MINUSMINUS
	//	| SKW_MOD
	//	| SKW_NOT
	//	| SKW_NOTEQUAL
	//	| SKW_OR
	//	| SKW_OROR
	//	| SKW_PLUS
	//	| SKW_PLUSPLUS
	//	| SKW_QUESTION
	//	| SKW_RIGHTBRACE
	//	| SKW_RIGHTBRACKET
	//	| SKW_RIGHTPAREN
	//	| SKW_RIGHTSHIFT
	//	| SKW_SEMI
	//	| SKW_SINGLEQUOTE
	//	| SKW_STAR
	//	| SKW_TILDE;
	public CommonGrammarAccess.SpecialKeywordsElements getSpecialKeywordsAccess() {
		return gaCommon.getSpecialKeywordsAccess();
	}
	
	public ParserRule getSpecialKeywordsRule() {
		return getSpecialKeywordsAccess().getRule();
	}
	
	//Ellipsis:
	//	SKW_DOT SKW_DOT SKW_DOT;
	public CommonGrammarAccess.EllipsisElements getEllipsisAccess() {
		return gaCommon.getEllipsisAccess();
	}
	
	public ParserRule getEllipsisRule() {
		return getEllipsisAccess().getRule();
	}
	
	//terminal SKW_AND:
	//	'&';
	public TerminalRule getSKW_ANDRule() {
		return gaCommon.getSKW_ANDRule();
	}
	
	//terminal SKW_ANDAND:
	//	SKW_AND SKW_AND;
	public TerminalRule getSKW_ANDANDRule() {
		return gaCommon.getSKW_ANDANDRule();
	}
	
	//terminal SKW_ASSIGN:
	//	'=';
	public TerminalRule getSKW_ASSIGNRule() {
		return gaCommon.getSKW_ASSIGNRule();
	}
	
	//terminal SKW_BACKSLASH:
	//	'\\';
	public TerminalRule getSKW_BACKSLASHRule() {
		return gaCommon.getSKW_BACKSLASHRule();
	}
	
	//terminal SKW_CARET:
	//	'^';
	public TerminalRule getSKW_CARETRule() {
		return gaCommon.getSKW_CARETRule();
	}
	
	//terminal SKW_COMMA:
	//	',';
	public TerminalRule getSKW_COMMARule() {
		return gaCommon.getSKW_COMMARule();
	}
	
	//terminal SKW_COLON:
	//	':';
	public TerminalRule getSKW_COLONRule() {
		return gaCommon.getSKW_COLONRule();
	}
	
	//terminal SKW_DIV:
	//	'/';
	public TerminalRule getSKW_DIVRule() {
		return gaCommon.getSKW_DIVRule();
	}
	
	//terminal fragment SKW_DOLLAR:
	//	'$';
	public TerminalRule getSKW_DOLLARRule() {
		return gaCommon.getSKW_DOLLARRule();
	}
	
	//terminal SKW_DOT:
	//	'.';
	public TerminalRule getSKW_DOTRule() {
		return gaCommon.getSKW_DOTRule();
	}
	
	//terminal SKW_DOUBLEQUOTE:
	//	'"';
	public TerminalRule getSKW_DOUBLEQUOTERule() {
		return gaCommon.getSKW_DOUBLEQUOTERule();
	}
	
	//terminal SKW_EQUAL:
	//	SKW_ASSIGN SKW_ASSIGN;
	public TerminalRule getSKW_EQUALRule() {
		return gaCommon.getSKW_EQUALRule();
	}
	
	//terminal SKW_GREATER:
	//	'>';
	public TerminalRule getSKW_GREATERRule() {
		return gaCommon.getSKW_GREATERRule();
	}
	
	//terminal SKW_GREATEREQUAL:
	//	SKW_GREATER SKW_ASSIGN;
	public TerminalRule getSKW_GREATEREQUALRule() {
		return gaCommon.getSKW_GREATEREQUALRule();
	}
	
	//terminal SKW_LEFTBRACE:
	//	'{';
	public TerminalRule getSKW_LEFTBRACERule() {
		return gaCommon.getSKW_LEFTBRACERule();
	}
	
	//terminal SKW_LEFTBRACKET:
	//	'[';
	public TerminalRule getSKW_LEFTBRACKETRule() {
		return gaCommon.getSKW_LEFTBRACKETRule();
	}
	
	//terminal SKW_LEFTPAREN:
	//	'(';
	public TerminalRule getSKW_LEFTPARENRule() {
		return gaCommon.getSKW_LEFTPARENRule();
	}
	
	//terminal SKW_LEFTSHIFT:
	//	SKW_LESS SKW_LESS;
	public TerminalRule getSKW_LEFTSHIFTRule() {
		return gaCommon.getSKW_LEFTSHIFTRule();
	}
	
	//terminal SKW_LESS:
	//	'<';
	public TerminalRule getSKW_LESSRule() {
		return gaCommon.getSKW_LESSRule();
	}
	
	//terminal SKW_LESSEQUAL:
	//	SKW_LESS SKW_ASSIGN;
	public TerminalRule getSKW_LESSEQUALRule() {
		return gaCommon.getSKW_LESSEQUALRule();
	}
	
	//terminal SKW_MINUS:
	//	'-';
	public TerminalRule getSKW_MINUSRule() {
		return gaCommon.getSKW_MINUSRule();
	}
	
	//terminal SKW_MINUSMINUS:
	//	SKW_MINUS SKW_MINUS;
	public TerminalRule getSKW_MINUSMINUSRule() {
		return gaCommon.getSKW_MINUSMINUSRule();
	}
	
	//terminal SKW_MOD:
	//	'%';
	public TerminalRule getSKW_MODRule() {
		return gaCommon.getSKW_MODRule();
	}
	
	//terminal SKW_NOT:
	//	'!';
	public TerminalRule getSKW_NOTRule() {
		return gaCommon.getSKW_NOTRule();
	}
	
	//terminal SKW_NOTEQUAL:
	//	SKW_NOT SKW_ASSIGN;
	public TerminalRule getSKW_NOTEQUALRule() {
		return gaCommon.getSKW_NOTEQUALRule();
	}
	
	//terminal SKW_OR:
	//	'|';
	public TerminalRule getSKW_ORRule() {
		return gaCommon.getSKW_ORRule();
	}
	
	//terminal SKW_OROR:
	//	SKW_OR SKW_OR;
	public TerminalRule getSKW_ORORRule() {
		return gaCommon.getSKW_ORORRule();
	}
	
	//terminal SKW_PLUS:
	//	'+';
	public TerminalRule getSKW_PLUSRule() {
		return gaCommon.getSKW_PLUSRule();
	}
	
	//terminal SKW_PLUSPLUS:
	//	SKW_PLUS SKW_PLUS;
	public TerminalRule getSKW_PLUSPLUSRule() {
		return gaCommon.getSKW_PLUSPLUSRule();
	}
	
	//terminal SKW_QUESTION:
	//	'?';
	public TerminalRule getSKW_QUESTIONRule() {
		return gaCommon.getSKW_QUESTIONRule();
	}
	
	//terminal SKW_RIGHTBRACE:
	//	'}';
	public TerminalRule getSKW_RIGHTBRACERule() {
		return gaCommon.getSKW_RIGHTBRACERule();
	}
	
	//terminal SKW_RIGHTBRACKET:
	//	']';
	public TerminalRule getSKW_RIGHTBRACKETRule() {
		return gaCommon.getSKW_RIGHTBRACKETRule();
	}
	
	//terminal SKW_RIGHTPAREN:
	//	')';
	public TerminalRule getSKW_RIGHTPARENRule() {
		return gaCommon.getSKW_RIGHTPARENRule();
	}
	
	//terminal SKW_RIGHTSHIFT:
	//	SKW_GREATER SKW_GREATER;
	public TerminalRule getSKW_RIGHTSHIFTRule() {
		return gaCommon.getSKW_RIGHTSHIFTRule();
	}
	
	//terminal SKW_SEMI:
	//	';';
	public TerminalRule getSKW_SEMIRule() {
		return gaCommon.getSKW_SEMIRule();
	}
	
	//terminal SKW_SINGLEQUOTE:
	//	'\'';
	public TerminalRule getSKW_SINGLEQUOTERule() {
		return gaCommon.getSKW_SINGLEQUOTERule();
	}
	
	//terminal SKW_STAR:
	//	'*';
	public TerminalRule getSKW_STARRule() {
		return gaCommon.getSKW_STARRule();
	}
	
	//terminal SKW_TILDE:
	//	'~';
	public TerminalRule getSKW_TILDERule() {
		return gaCommon.getSKW_TILDERule();
	}
	
	//terminal fragment SKW_UNDERSCORE:
	//	'_';
	public TerminalRule getSKW_UNDERSCORERule() {
		return gaCommon.getSKW_UNDERSCORERule();
	}
	
	//terminal ID:
	//	IDENTIFIER;
	public TerminalRule getIDRule() {
		return gaCommon.getIDRule();
	}
	
	//terminal fragment IDENTIFIER:
	//	LETTER (LETTER | '0'..'9')*;
	public TerminalRule getIDENTIFIERRule() {
		return gaCommon.getIDENTIFIERRule();
	}
	
	//terminal fragment LETTER:
	//	SKW_DOLLAR
	//	| 'A'..'Z'
	//	| 'a'..'z'
	//	| SKW_UNDERSCORE;
	public TerminalRule getLETTERRule() {
		return gaCommon.getLETTERRule();
	}
	
	//terminal CHAR_LITERAL:
	//	SKW_SINGLEQUOTE (ESCAPE_SEQUENCE | !(SKW_SINGLEQUOTE | SKW_BACKSLASH)) SKW_SINGLEQUOTE;
	public TerminalRule getCHAR_LITERALRule() {
		return gaCommon.getCHAR_LITERALRule();
	}
	
	//terminal STRING_LITERAL:
	//	SKW_DOUBLEQUOTE (ESCAPE_SEQUENCE | !(SKW_BACKSLASH | SKW_DOUBLEQUOTE))* SKW_DOUBLEQUOTE;
	public TerminalRule getSTRING_LITERALRule() {
		return gaCommon.getSTRING_LITERALRule();
	}
	
	//terminal HEX_LITERAL:
	//	'0' ('x' | 'X') HEX_DIGIT+ INTEGER_TYPE_SUFFIX?;
	public TerminalRule getHEX_LITERALRule() {
		return gaCommon.getHEX_LITERALRule();
	}
	
	//terminal DECIMAL_LITERAL:
	//	('0' | '1'..'9' '0'..'9'*) INTEGER_TYPE_SUFFIX?;
	public TerminalRule getDECIMAL_LITERALRule() {
		return gaCommon.getDECIMAL_LITERALRule();
	}
	
	//terminal OCTAL_LITERAL:
	//	'0' '0'..'7'+ INTEGER_TYPE_SUFFIX?;
	public TerminalRule getOCTAL_LITERALRule() {
		return gaCommon.getOCTAL_LITERALRule();
	}
	
	//terminal BIN_LITERAL:
	//	('0b' | '0B') '0'..'1'+;
	public TerminalRule getBIN_LITERALRule() {
		return gaCommon.getBIN_LITERALRule();
	}
	
	//terminal fragment HEX_DIGIT:
	//	'0'..'9' | 'a'..'f' | 'A'..'F';
	public TerminalRule getHEX_DIGITRule() {
		return gaCommon.getHEX_DIGITRule();
	}
	
	//terminal fragment INTEGER_TYPE_SUFFIX:
	//	UNSIGNED_SUFFIX LONG_SUFFIX?
	//	| UNSIGNED_SUFFIX LONG_LONG_SUFFIX
	//	| LONG_SUFFIX UNSIGNED_SUFFIX?
	//	| LONG_LONG_SUFFIX UNSIGNED_SUFFIX?;
	public TerminalRule getINTEGER_TYPE_SUFFIXRule() {
		return gaCommon.getINTEGER_TYPE_SUFFIXRule();
	}
	
	//terminal fragment UNSIGNED_SUFFIX:
	//	'u' | 'U';
	public TerminalRule getUNSIGNED_SUFFIXRule() {
		return gaCommon.getUNSIGNED_SUFFIXRule();
	}
	
	//terminal fragment LONG_SUFFIX:
	//	'l' | 'L';
	public TerminalRule getLONG_SUFFIXRule() {
		return gaCommon.getLONG_SUFFIXRule();
	}
	
	//terminal fragment LONG_LONG_SUFFIX:
	//	'll' | 'LL';
	public TerminalRule getLONG_LONG_SUFFIXRule() {
		return gaCommon.getLONG_LONG_SUFFIXRule();
	}
	
	//terminal FLOAT_LITERAL:
	//	'0'..'9'+ SKW_DOT '0'..'9'* EXPONENT? FLOAT_TYPE_SUFFIX?
	//	| SKW_DOT '0'..'9'+ EXPONENT? FLOAT_TYPE_SUFFIX?
	//	| '0'..'9'+ EXPONENT FLOAT_TYPE_SUFFIX?
	//	| '0'..'9'+ EXPONENT? FLOAT_TYPE_SUFFIX;
	public TerminalRule getFLOAT_LITERALRule() {
		return gaCommon.getFLOAT_LITERALRule();
	}
	
	//terminal fragment EXPONENT:
	//	('e' | 'E') ('+' | '-')? '0'..'9'+;
	public TerminalRule getEXPONENTRule() {
		return gaCommon.getEXPONENTRule();
	}
	
	//terminal fragment FLOAT_TYPE_SUFFIX:
	//	'f' | 'F' | 'd' | 'D';
	public TerminalRule getFLOAT_TYPE_SUFFIXRule() {
		return gaCommon.getFLOAT_TYPE_SUFFIXRule();
	}
	
	//terminal fragment ESCAPE_SEQUENCE:
	//	SKW_BACKSLASH ('b' | 't' | 'n' | 'f' | 'r' | '\"' | SKW_SINGLEQUOTE | SKW_BACKSLASH) | OCTAL_ESCAPE
	//	| HEX_ESCAPE;
	public TerminalRule getESCAPE_SEQUENCERule() {
		return gaCommon.getESCAPE_SEQUENCERule();
	}
	
	//terminal fragment OCTAL_ESCAPE:
	//	SKW_BACKSLASH '0'..'3' '0'..'7' '0'..'7' | SKW_BACKSLASH '0'..'7' '0'..'7' | SKW_BACKSLASH '0'..'7';
	public TerminalRule getOCTAL_ESCAPERule() {
		return gaCommon.getOCTAL_ESCAPERule();
	}
	
	//terminal fragment HEX_ESCAPE:
	//	SKW_BACKSLASH 'x' HEX_DIGIT+;
	public TerminalRule getHEX_ESCAPERule() {
		return gaCommon.getHEX_ESCAPERule();
	}
	
	//terminal fragment LINEFEED:
	//	'\n';
	public TerminalRule getLINEFEEDRule() {
		return gaCommon.getLINEFEEDRule();
	}
	
	//terminal fragment CARRIAGERETURN:
	//	'\r';
	public TerminalRule getCARRIAGERETURNRule() {
		return gaCommon.getCARRIAGERETURNRule();
	}
	
	//terminal LINE_END:
	//	CARRIAGERETURN | LINEFEED;
	public TerminalRule getLINE_ENDRule() {
		return gaCommon.getLINE_ENDRule();
	}
	
	//terminal LINEBREAK:
	//	SKW_BACKSLASH LINE_END;
	public TerminalRule getLINEBREAKRule() {
		return gaCommon.getLINEBREAKRule();
	}
	
	//terminal NEWLINE:
	//	LINE_END;
	public TerminalRule getNEWLINERule() {
		return gaCommon.getNEWLINERule();
	}
	
	//terminal fragment SPACE:
	//	' ';
	public TerminalRule getSPACERule() {
		return gaCommon.getSPACERule();
	}
	
	//terminal fragment TAB:
	//	'\t';
	public TerminalRule getTABRule() {
		return gaCommon.getTABRule();
	}
	
	//terminal BLOCK_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getBLOCK_COMMENTRule() {
		return gaCommon.getBLOCK_COMMENTRule();
	}
	
	//terminal LINE_COMMENT:
	//	'//' !LINE_END*;
	public TerminalRule getLINE_COMMENTRule() {
		return gaCommon.getLINE_COMMENTRule();
	}
	
	//terminal SPECIAL:
	//	.;
	public TerminalRule getSPECIALRule() {
		return gaCommon.getSPECIALRule();
	}
}
