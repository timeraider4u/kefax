/*
 * generated by Xtext 2.9.0-SNAPSHOT
 */
package at.jku.weiner.c.parser.formatting2

import at.jku.weiner.c.common.formatting2.CommonFormatter
import at.jku.weiner.c.parser.parser.AbstractDeclarator
import at.jku.weiner.c.parser.parser.AbstractDeclaratorSuffix
import at.jku.weiner.c.parser.parser.AdditiveExpression
import at.jku.weiner.c.parser.parser.AndExpression
import at.jku.weiner.c.parser.parser.ArgumentExpressionList
import at.jku.weiner.c.parser.parser.AsmLine
import at.jku.weiner.c.parser.parser.AsmLineWithColon
import at.jku.weiner.c.parser.parser.AsmLineWithoutColon
import at.jku.weiner.c.parser.parser.AsmStatement
import at.jku.weiner.c.parser.parser.AssignmentExpression
import at.jku.weiner.c.parser.parser.BlockList
import at.jku.weiner.c.parser.parser.BodyStatement
import at.jku.weiner.c.parser.parser.CastExpression
import at.jku.weiner.c.parser.parser.CompoundStatement
import at.jku.weiner.c.parser.parser.ConditionalExpression
import at.jku.weiner.c.parser.parser.ConstantExpression
import at.jku.weiner.c.parser.parser.Declaration
import at.jku.weiner.c.parser.parser.DeclarationSpecifiers
import at.jku.weiner.c.parser.parser.Declarator
import at.jku.weiner.c.parser.parser.DeclaratorSuffix
import at.jku.weiner.c.parser.parser.Designation
import at.jku.weiner.c.parser.parser.Designator
import at.jku.weiner.c.parser.parser.DesignatorList
import at.jku.weiner.c.parser.parser.DirectAbstractDeclarator
import at.jku.weiner.c.parser.parser.DirectDeclarator
import at.jku.weiner.c.parser.parser.DirectDeclaratorLastSuffix
import at.jku.weiner.c.parser.parser.EnumSpecifier
import at.jku.weiner.c.parser.parser.Enumerator
import at.jku.weiner.c.parser.parser.EnumeratorList
import at.jku.weiner.c.parser.parser.EqualityExpression
import at.jku.weiner.c.parser.parser.ExclusiveOrExpression
import at.jku.weiner.c.parser.parser.Expression
import at.jku.weiner.c.parser.parser.ExpressionStatement
import at.jku.weiner.c.parser.parser.ExternalDeclaration
import at.jku.weiner.c.parser.parser.FunctionDeclarationSpecifiers
import at.jku.weiner.c.parser.parser.FunctionDefHead
import at.jku.weiner.c.parser.parser.FunctionDefinition
import at.jku.weiner.c.parser.parser.FunctionSpecifier
import at.jku.weiner.c.parser.parser.GccAttribute
import at.jku.weiner.c.parser.parser.GccAttributeList
import at.jku.weiner.c.parser.parser.GccAttributeSpecifier
import at.jku.weiner.c.parser.parser.GccDeclaratorExtension
import at.jku.weiner.c.parser.parser.IdentifierList
import at.jku.weiner.c.parser.parser.InclusiveOrExpression
import at.jku.weiner.c.parser.parser.Init
import at.jku.weiner.c.parser.parser.InitDeclarator
import at.jku.weiner.c.parser.parser.InitDeclaratorList
import at.jku.weiner.c.parser.parser.Initializer
import at.jku.weiner.c.parser.parser.InitializerList
import at.jku.weiner.c.parser.parser.IterationStatement
import at.jku.weiner.c.parser.parser.JumpStatement
import at.jku.weiner.c.parser.parser.LabeledStatement
import at.jku.weiner.c.parser.parser.LogicalAndExpression
import at.jku.weiner.c.parser.parser.LogicalOrExpression
import at.jku.weiner.c.parser.parser.MultiplicativeExpression
import at.jku.weiner.c.parser.parser.MyIdentifier
import at.jku.weiner.c.parser.parser.ParameterDeclaration
import at.jku.weiner.c.parser.parser.ParameterList
import at.jku.weiner.c.parser.parser.ParameterTypeList
import at.jku.weiner.c.parser.parser.Parser
import at.jku.weiner.c.parser.parser.Pointer
import at.jku.weiner.c.parser.parser.PostfixExpression
import at.jku.weiner.c.parser.parser.PostfixExpressionSuffix
import at.jku.weiner.c.parser.parser.PostfixExpressionSuffixArgument
import at.jku.weiner.c.parser.parser.PostfixExpressionSuffixArray
import at.jku.weiner.c.parser.parser.PrimaryExpression
import at.jku.weiner.c.parser.parser.RelationalExpression
import at.jku.weiner.c.parser.parser.SelectionStatement
import at.jku.weiner.c.parser.parser.ShiftExpression
import at.jku.weiner.c.parser.parser.SpecifierQualifierList
import at.jku.weiner.c.parser.parser.Statement
import at.jku.weiner.c.parser.parser.StructDeclaration
import at.jku.weiner.c.parser.parser.StructDeclarationList
import at.jku.weiner.c.parser.parser.StructDeclarator
import at.jku.weiner.c.parser.parser.StructDeclaratorList
import at.jku.weiner.c.parser.parser.StructOrUnionSpecifier
import at.jku.weiner.c.parser.parser.TypeName
import at.jku.weiner.c.parser.parser.TypeQualifier
import at.jku.weiner.c.parser.parser.TypeQualifierList
import at.jku.weiner.c.parser.parser.TypeSpecifier
import at.jku.weiner.c.parser.parser.UnaryExpression
import at.jku.weiner.c.parser.services.ParserGrammarAccess
import com.google.inject.Inject
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.formatting2.IFormattableDocument

class ParserFormatter extends CommonFormatter {
	
	@Inject extension ParserGrammarAccess

	def dispatch void format(Parser parser, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (ExternalDeclaration external : parser.getExternal()) {
			format(external, document);
		}
	}

	def dispatch void format(ExternalDeclaration externalDeclaration, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(externalDeclaration.getFunctiondefHead(), document);
		format(externalDeclaration.getFunctionDefinition(), document);
		format(externalDeclaration.getDeclaration(), document);
	}

	def dispatch void format(FunctionDefHead functionDefHead, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(functionDefHead.getFunDeclSpecifiers(), document);
		format(functionDefHead.getFunDeclarator(), document);
		for (Declaration funDeclaration : functionDefHead.getFunDeclaration()) {
			format(funDeclaration, document);
		}
	}

	def dispatch void format(FunctionDefinition functionDefinition, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(functionDefinition.getBody(), document);
	}

	def dispatch void format(Declaration declaration, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(declaration.getSpecifiers(), document);
		for (InitDeclaratorList initDeclaratorList : declaration.getInitDeclaratorList()) {
			format(initDeclaratorList, document);
		}
	}

	def dispatch void format(FunctionDeclarationSpecifiers functionDeclarationSpecifiers, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (EObject declarationSpecifier : functionDeclarationSpecifiers.getDeclarationSpecifier()) {
			format(declarationSpecifier, document);
		}
	}

	def dispatch void format(DeclarationSpecifiers declarationSpecifiers, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (EObject declarationSpecifier : declarationSpecifiers.getDeclarationSpecifier()) {
			format(declarationSpecifier, document);
		}
	}

	def dispatch void format(InitDeclaratorList initDeclaratorList, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (InitDeclarator initDeclarator : initDeclaratorList.getInitDeclarator()) {
			format(initDeclarator, document);
		}
	}

	def dispatch void format(InitDeclarator initDeclarator, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(initDeclarator.getDeclarator(), document);
		format(initDeclarator.getInitializer(), document);
	}

	def dispatch void format(TypeSpecifier typeSpecifier, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(typeSpecifier.getSpecifier(), document);
		format(typeSpecifier.getType(), document);
		format(typeSpecifier.getTypeName(), document);
		format(typeSpecifier.getConstExpr(), document);
	}

	def dispatch void format(StructOrUnionSpecifier structOrUnionSpecifier, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(structOrUnionSpecifier.getType(), document);
		format(structOrUnionSpecifier.getStructDeclList(), document);
	}

	def dispatch void format(StructDeclarationList structDeclarationList, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (StructDeclaration structDeclaration : structDeclarationList.getStructDeclaration()) {
			format(structDeclaration, document);
		}
	}

	def dispatch void format(StructDeclaration structDeclaration, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(structDeclaration.getList(), document);
		format(structDeclaration.getStructDeclarationList(), document);
	}

	def dispatch void format(SpecifierQualifierList specifierQualifierList, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (TypeSpecifier typeSpecifier : specifierQualifierList.getTypeSpecifier()) {
			format(typeSpecifier, document);
		}
		for (TypeQualifier typeQualifier : specifierQualifierList.getTypeQualifier()) {
			format(typeQualifier, document);
		}
	}

	def dispatch void format(StructDeclaratorList structDeclaratorList, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (StructDeclarator structDeclarator : structDeclaratorList.getStructDeclarator()) {
			format(structDeclarator, document);
		}
	}

	def dispatch void format(StructDeclarator structDeclarator, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(structDeclarator.getDeclarator(), document);
		for (Expression constExpr : structDeclarator.getConstExpr()) {
			format(constExpr, document);
		}
	}

	def dispatch void format(EnumSpecifier enumSpecifier, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(enumSpecifier.getEnumList(), document);
	}

	def dispatch void format(EnumeratorList enumeratorList, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Enumerator enumerator : enumeratorList.getEnumerator()) {
			format(enumerator, document);
		}
	}

	def dispatch void format(Enumerator enumerator, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(enumerator.getExpr(), document);
	}

	def dispatch void format(FunctionSpecifier functionSpecifier, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(functionSpecifier.getGccAttributeSpecifier(), document);
	}

	def dispatch void format(Declarator declarator, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(declarator.getPointer(), document);
		for (GccDeclaratorExtension gccDeclExt1 : declarator.getGccDeclExt1()) {
			format(gccDeclExt1, document);
		}
		format(declarator.getDeclarator(), document);
		for (GccDeclaratorExtension gccDeclExt2 : declarator.getGccDeclExt2()) {
			format(gccDeclExt2, document);
		}
	}

	def dispatch void format(DirectDeclarator directDeclarator, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(directDeclarator.getDeclarator(), document);
		for (DeclaratorSuffix declaratorSuffix : directDeclarator.getDeclaratorSuffix()) {
			format(declaratorSuffix, document);
		}
	}

	def dispatch void format(DeclaratorSuffix declaratorSuffix, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(declaratorSuffix.getExpr(), document);
		format(declaratorSuffix.getLastSuffix(), document);
	}

	def dispatch void format(DirectDeclaratorLastSuffix directDeclaratorLastSuffix, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (ParameterTypeList parameterTypeList : directDeclaratorLastSuffix.getParameterTypeList()) {
			format(parameterTypeList, document);
		}
		format(directDeclaratorLastSuffix.getIdentifierList(), document);
	}

	def dispatch void format(GccDeclaratorExtension gccDeclaratorExtension, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(gccDeclaratorExtension.getGccAttributeSpecifier(), document);
	}

	def dispatch void format(GccAttributeSpecifier gccAttributeSpecifier, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(gccAttributeSpecifier.getList(), document);
	}

	def dispatch void format(GccAttributeList gccAttributeList, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (GccAttribute gccAttribute : gccAttributeList.getGccAttribute()) {
			format(gccAttribute, document);
		}
	}

	def dispatch void format(GccAttribute gccAttribute, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(gccAttribute.getList(), document);
	}

	def dispatch void format(Pointer pointer, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (TypeQualifierList typeQualifierList : pointer.getTypeQualifierList()) {
			format(typeQualifierList, document);
		}
	}

	def dispatch void format(TypeQualifierList typeQualifierList, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (TypeQualifier typeQualifier : typeQualifierList.getTypeQualifier()) {
			format(typeQualifier, document);
		}
	}

	def dispatch void format(ParameterTypeList parameterTypeList, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(parameterTypeList.getList(), document);
	}

	def dispatch void format(ParameterList parameterList, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (ParameterDeclaration parameterDeclaration : parameterList.getParameterDeclaration()) {
			format(parameterDeclaration, document);
		}
	}

	def dispatch void format(ParameterDeclaration parameterDeclaration, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(parameterDeclaration.getDeclSpecifiers(), document);
		format(parameterDeclaration.getDeclarator(), document);
		format(parameterDeclaration.getAbstractDeclator(), document);
	}

	def dispatch void format(IdentifierList identifierList, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (MyIdentifier id : identifierList.getId()) {
			format(id, document);
		}
	}

	def dispatch void format(TypeName typeName, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(typeName.getList(), document);
		format(typeName.getAbstractDeclarator(), document);
	}

	def dispatch void format(AbstractDeclarator abstractDeclarator, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(abstractDeclarator.getPointer(), document);
		format(abstractDeclarator.getDirectAbstractDeclarator(), document);
		for (GccDeclaratorExtension gccDeclExtAbstract : abstractDeclarator.getGccDeclExtAbstract()) {
			format(gccDeclExtAbstract, document);
		}
	}

	def dispatch void format(DirectAbstractDeclarator directAbstractDeclarator, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(directAbstractDeclarator.getDeclarator(), document);
		for (GccDeclaratorExtension gccDeclExt : directAbstractDeclarator.getGccDeclExt()) {
			format(gccDeclExt, document);
		}
		for (AbstractDeclaratorSuffix abstractDeclaratorSuffix : directAbstractDeclarator.getAbstractDeclaratorSuffix()) {
			format(abstractDeclaratorSuffix, document);
		}
	}

	def dispatch void format(AbstractDeclaratorSuffix abstractDeclaratorSuffix, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(abstractDeclaratorSuffix.getTypeQualifierList(), document);
		for (Expression assignmentExpr : abstractDeclaratorSuffix.getAssignmentExpr()) {
			format(assignmentExpr, document);
		}
		format(abstractDeclaratorSuffix.getTypeQualifierListOrig(), document);
		format(abstractDeclaratorSuffix.getParameterTypeList(), document);
		for (GccDeclaratorExtension gccDeclExt : abstractDeclaratorSuffix.getGccDeclExt()) {
			format(gccDeclExt, document);
		}
	}

	def dispatch void format(Initializer initializer, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(initializer.getExpr(), document);
		format(initializer.getList(), document);
	}

	def dispatch void format(InitializerList initializerList, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Init init : initializerList.getInit()) {
			format(init, document);
		}
	}

	def dispatch void format(Init init, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(init.getDesignation(), document);
		format(init.getInitializer(), document);
	}

	def dispatch void format(BlockList blockList, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Declaration declaration : blockList.getDeclaration()) {
			format(declaration, document);
		}
		for (Statement statement : blockList.getStatement()) {
			format(statement, document);
		}
	}

	def dispatch void format(Statement statement, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(statement.getStmt(), document);
	}

	def dispatch void format(LabeledStatement labeledStatement, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(labeledStatement.getLStmt(), document);
		format(labeledStatement.getExpr(), document);
	}

	def dispatch void format(CompoundStatement compoundStatement, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(compoundStatement.getBody(), document);
	}

	def dispatch void format(BodyStatement bodyStatement, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (BlockList blockList : bodyStatement.getBlockList()) {
			format(blockList, document);
		}
	}

	def dispatch void format(ExpressionStatement expressionStatement, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(expressionStatement.getExpression(), document);
	}

	def dispatch void format(SelectionStatement selectionStatement, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(selectionStatement.getExpr(), document);
		format(selectionStatement.getIfStatement(), document);
		format(selectionStatement.getElseStatement(), document);
		format(selectionStatement.getSwitchStatement(), document);
	}

	def dispatch void format(IterationStatement iterationStatement, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(iterationStatement.getExpr(), document);
		format(iterationStatement.getStatement(), document);
		format(iterationStatement.getInitExpr(), document);
		format(iterationStatement.getIncExpr(), document);
		format(iterationStatement.getInitDecl(), document);
	}

	def dispatch void format(JumpStatement jumpStatement, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(jumpStatement.getExpr(), document);
	}

	def dispatch void format(AsmStatement asmStatement, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(asmStatement.getAsmLine1(), document);
		for (AsmLineWithColon asmLines : asmStatement.getAsmLines()) {
			format(asmLines, document);
		}
	}

	def dispatch void format(AsmLine asmLine, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(asmLine.getSym(), document);
		format(asmLine.getExpr(), document);
	}

	def dispatch void format(AsmLineWithColon asmLineWithColon, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(asmLineWithColon.getAsmLine(), document);
	}

	def dispatch void format(AsmLineWithoutColon asmLineWithoutColon, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (AsmLine asmLines : asmLineWithoutColon.getAsmLines()) {
			format(asmLines, document);
		}
	}

	def dispatch void format(Designation designation, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(designation.getList(), document);
	}

	def dispatch void format(DesignatorList designatorList, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Designator designator : designatorList.getDesignator()) {
			format(designator, document);
		}
	}

	def dispatch void format(Designator designator, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(designator.getExpr(), document);
	}

	def dispatch void format(Expression expression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Expression exprExpr : expression.getExprExpr()) {
			format(exprExpr, document);
		}
	}

	def dispatch void format(AssignmentExpression assignmentExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(assignmentExpression.getExpr(), document);
		format(assignmentExpression.getOp(), document);
		format(assignmentExpression.getAssignmentExpr(), document);
	}

	def dispatch void format(ConditionalExpression conditionalExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(conditionalExpression.getExpr(), document);
		format(conditionalExpression.getQExpr(), document);
		format(conditionalExpression.getCExpr(), document);
	}

	def dispatch void format(LogicalOrExpression logicalOrExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Expression expr : logicalOrExpression.getExpr()) {
			format(expr, document);
		}
	}

	def dispatch void format(LogicalAndExpression logicalAndExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Expression expr : logicalAndExpression.getExpr()) {
			format(expr, document);
		}
	}

	def dispatch void format(InclusiveOrExpression inclusiveOrExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Expression expr : inclusiveOrExpression.getExpr()) {
			format(expr, document);
		}
	}

	def dispatch void format(ExclusiveOrExpression exclusiveOrExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Expression expr : exclusiveOrExpression.getExpr()) {
			format(expr, document);
		}
	}

	def dispatch void format(AndExpression andExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Expression expr : andExpression.getExpr()) {
			format(expr, document);
		}
	}

	def dispatch void format(EqualityExpression equalityExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Expression expr : equalityExpression.getExpr()) {
			format(expr, document);
		}
	}

	def dispatch void format(RelationalExpression relationalExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Expression expr : relationalExpression.getExpr()) {
			format(expr, document);
		}
	}

	def dispatch void format(ShiftExpression shiftExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Expression expr : shiftExpression.getExpr()) {
			format(expr, document);
		}
	}

	def dispatch void format(AdditiveExpression additiveExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Expression expr : additiveExpression.getExpr()) {
			format(expr, document);
		}
	}

	def dispatch void format(MultiplicativeExpression multiplicativeExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Expression expr : multiplicativeExpression.getExpr()) {
			format(expr, document);
		}
	}

	def dispatch void format(CastExpression castExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(castExpression.getType(), document);
		format(castExpression.getExpr(), document);
	}

	def dispatch void format(UnaryExpression unaryExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(unaryExpression.getExpr(), document);
		format(unaryExpression.getOp(), document);
		format(unaryExpression.getTypeName(), document);
	}

	def dispatch void format(PostfixExpression postfixExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(postfixExpression.getTypeName(), document);
		format(postfixExpression.getInitializerList(), document);
		for (Expression expr : postfixExpression.getExpr()) {
			format(expr, document);
		}
		for (PostfixExpressionSuffix suffix : postfixExpression.getSuffix()) {
			format(suffix, document);
		}
	}

	def dispatch void format(PostfixExpressionSuffixArray postfixExpressionSuffixArray, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(postfixExpressionSuffixArray.getArrayExpr(), document);
	}

	def dispatch void format(PostfixExpressionSuffixArgument postfixExpressionSuffixArgument, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(postfixExpressionSuffixArgument.getArgumentExpressionList(), document);
	}

	def dispatch void format(ArgumentExpressionList argumentExpressionList, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (at.jku.weiner.c.common.common.Expression expr : argumentExpressionList.getExpr()) {
			format(expr, document);
		}
	}

	def dispatch void format(PrimaryExpression primaryExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(primaryExpression.getConst(), document);
		format(primaryExpression.getExpr(), document);
		format(primaryExpression.getCompoundStmt(), document);
		format(primaryExpression.getTypeName(), document);
	}

	def dispatch void format(ConstantExpression constantExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(constantExpression.getExpr(), document);
	}
}
