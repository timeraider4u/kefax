/**
 * generated by Xtext 2.9.0-SNAPSHOT
 */
package at.jku.weiner.c.parser.formatting2;

import at.jku.weiner.c.common.common.Constant2;
import at.jku.weiner.c.common.formatting2.CommonFormatter;
import at.jku.weiner.c.parser.parser.AbstractDeclarator;
import at.jku.weiner.c.parser.parser.AbstractDeclaratorSuffix;
import at.jku.weiner.c.parser.parser.AdditiveExpression;
import at.jku.weiner.c.parser.parser.AndExpression;
import at.jku.weiner.c.parser.parser.ArgumentExpressionList;
import at.jku.weiner.c.parser.parser.AsmLine;
import at.jku.weiner.c.parser.parser.AsmLineWithColon;
import at.jku.weiner.c.parser.parser.AsmLineWithoutColon;
import at.jku.weiner.c.parser.parser.AsmStatement;
import at.jku.weiner.c.parser.parser.AsmSymbolicName;
import at.jku.weiner.c.parser.parser.AssignmentExpression;
import at.jku.weiner.c.parser.parser.BlockList;
import at.jku.weiner.c.parser.parser.BodyStatement;
import at.jku.weiner.c.parser.parser.CastExpression;
import at.jku.weiner.c.parser.parser.CompoundStatement;
import at.jku.weiner.c.parser.parser.ConditionalExpression;
import at.jku.weiner.c.parser.parser.ConstantExpression;
import at.jku.weiner.c.parser.parser.Declaration;
import at.jku.weiner.c.parser.parser.DeclarationSpecifier;
import at.jku.weiner.c.parser.parser.DeclarationSpecifiers;
import at.jku.weiner.c.parser.parser.Declarator;
import at.jku.weiner.c.parser.parser.DeclaratorSuffix;
import at.jku.weiner.c.parser.parser.Designation;
import at.jku.weiner.c.parser.parser.Designator;
import at.jku.weiner.c.parser.parser.DesignatorList;
import at.jku.weiner.c.parser.parser.DirectAbstractDeclarator;
import at.jku.weiner.c.parser.parser.DirectDeclarator;
import at.jku.weiner.c.parser.parser.DirectDeclaratorLastSuffix;
import at.jku.weiner.c.parser.parser.EnumSpecifier;
import at.jku.weiner.c.parser.parser.Enumerator;
import at.jku.weiner.c.parser.parser.EnumeratorList;
import at.jku.weiner.c.parser.parser.EqualityExpression;
import at.jku.weiner.c.parser.parser.ExclusiveOrExpression;
import at.jku.weiner.c.parser.parser.Expression;
import at.jku.weiner.c.parser.parser.ExpressionStatement;
import at.jku.weiner.c.parser.parser.ExternalDeclaration;
import at.jku.weiner.c.parser.parser.FunctionDeclarationSpecifiers;
import at.jku.weiner.c.parser.parser.FunctionDefHead;
import at.jku.weiner.c.parser.parser.FunctionDefinition;
import at.jku.weiner.c.parser.parser.FunctionSpecifier;
import at.jku.weiner.c.parser.parser.GccAttribute;
import at.jku.weiner.c.parser.parser.GccAttributeList;
import at.jku.weiner.c.parser.parser.GccAttributeSpecifier;
import at.jku.weiner.c.parser.parser.GccDeclaratorExtension;
import at.jku.weiner.c.parser.parser.IdentifierList;
import at.jku.weiner.c.parser.parser.InclusiveOrExpression;
import at.jku.weiner.c.parser.parser.Init;
import at.jku.weiner.c.parser.parser.InitDeclarator;
import at.jku.weiner.c.parser.parser.InitDeclaratorList;
import at.jku.weiner.c.parser.parser.Initializer;
import at.jku.weiner.c.parser.parser.InitializerList;
import at.jku.weiner.c.parser.parser.IterationStatement;
import at.jku.weiner.c.parser.parser.JumpStatement;
import at.jku.weiner.c.parser.parser.LabeledStatement;
import at.jku.weiner.c.parser.parser.LogicalAndExpression;
import at.jku.weiner.c.parser.parser.LogicalOrExpression;
import at.jku.weiner.c.parser.parser.MultiplicativeExpression;
import at.jku.weiner.c.parser.parser.MyIdentifier;
import at.jku.weiner.c.parser.parser.ParameterDeclaration;
import at.jku.weiner.c.parser.parser.ParameterList;
import at.jku.weiner.c.parser.parser.ParameterTypeList;
import at.jku.weiner.c.parser.parser.Parser;
import at.jku.weiner.c.parser.parser.Pointer;
import at.jku.weiner.c.parser.parser.PostfixExpression;
import at.jku.weiner.c.parser.parser.PostfixExpressionSuffix;
import at.jku.weiner.c.parser.parser.PostfixExpressionSuffixArgument;
import at.jku.weiner.c.parser.parser.PostfixExpressionSuffixArray;
import at.jku.weiner.c.parser.parser.PrimaryExpression;
import at.jku.weiner.c.parser.parser.RelationalExpression;
import at.jku.weiner.c.parser.parser.SelectionStatement;
import at.jku.weiner.c.parser.parser.ShiftExpression;
import at.jku.weiner.c.parser.parser.SpecifierQualifierList;
import at.jku.weiner.c.parser.parser.Statement;
import at.jku.weiner.c.parser.parser.StructDeclaration;
import at.jku.weiner.c.parser.parser.StructDeclarationList;
import at.jku.weiner.c.parser.parser.StructDeclarator;
import at.jku.weiner.c.parser.parser.StructDeclaratorList;
import at.jku.weiner.c.parser.parser.StructOrUnion;
import at.jku.weiner.c.parser.parser.StructOrUnionSpecifier;
import at.jku.weiner.c.parser.parser.TypeName;
import at.jku.weiner.c.parser.parser.TypeQualifier;
import at.jku.weiner.c.parser.parser.TypeQualifierList;
import at.jku.weiner.c.parser.parser.TypeSpecifier;
import at.jku.weiner.c.parser.parser.TypedefName;
import at.jku.weiner.c.parser.parser.UnaryExpression;
import at.jku.weiner.c.parser.services.ParserGrammarAccess;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class ParserFormatter extends CommonFormatter {
  @Inject
  @Extension
  private ParserGrammarAccess _parserGrammarAccess;
  
  protected void _format(final Parser parser, @Extension final IFormattableDocument document) {
    EList<ExternalDeclaration> _external = parser.getExternal();
    for (final ExternalDeclaration external : _external) {
      this.format(external, document);
    }
  }
  
  protected void _format(final ExternalDeclaration externalDeclaration, @Extension final IFormattableDocument document) {
    FunctionDefHead _functiondefHead = externalDeclaration.getFunctiondefHead();
    this.format(_functiondefHead, document);
    FunctionDefinition _functionDefinition = externalDeclaration.getFunctionDefinition();
    this.format(_functionDefinition, document);
    Declaration _declaration = externalDeclaration.getDeclaration();
    this.format(_declaration, document);
  }
  
  protected void _format(final FunctionDefHead functionDefHead, @Extension final IFormattableDocument document) {
    FunctionDeclarationSpecifiers _funDeclSpecifiers = functionDefHead.getFunDeclSpecifiers();
    this.format(_funDeclSpecifiers, document);
    Declarator _funDeclarator = functionDefHead.getFunDeclarator();
    this.format(_funDeclarator, document);
    EList<Declaration> _funDeclaration = functionDefHead.getFunDeclaration();
    for (final Declaration funDeclaration : _funDeclaration) {
      this.format(funDeclaration, document);
    }
  }
  
  protected void _format(final FunctionDefinition functionDefinition, @Extension final IFormattableDocument document) {
    Statement _body = functionDefinition.getBody();
    this.format(_body, document);
  }
  
  protected void _format(final Declaration declaration, @Extension final IFormattableDocument document) {
    DeclarationSpecifiers _specifiers = declaration.getSpecifiers();
    this.format(_specifiers, document);
    EList<InitDeclaratorList> _initDeclaratorList = declaration.getInitDeclaratorList();
    for (final InitDeclaratorList initDeclaratorList : _initDeclaratorList) {
      this.format(initDeclaratorList, document);
    }
  }
  
  protected void _format(final FunctionDeclarationSpecifiers functionDeclarationSpecifiers, @Extension final IFormattableDocument document) {
    EList<EObject> _declarationSpecifier = functionDeclarationSpecifiers.getDeclarationSpecifier();
    for (final EObject declarationSpecifier : _declarationSpecifier) {
      this.format(declarationSpecifier, document);
    }
  }
  
  protected void _format(final DeclarationSpecifiers declarationSpecifiers, @Extension final IFormattableDocument document) {
    EList<EObject> _declarationSpecifier = declarationSpecifiers.getDeclarationSpecifier();
    for (final EObject declarationSpecifier : _declarationSpecifier) {
      this.format(declarationSpecifier, document);
    }
  }
  
  protected void _format(final InitDeclaratorList initDeclaratorList, @Extension final IFormattableDocument document) {
    EList<InitDeclarator> _initDeclarator = initDeclaratorList.getInitDeclarator();
    for (final InitDeclarator initDeclarator : _initDeclarator) {
      this.format(initDeclarator, document);
    }
  }
  
  protected void _format(final InitDeclarator initDeclarator, @Extension final IFormattableDocument document) {
    Declarator _declarator = initDeclarator.getDeclarator();
    this.format(_declarator, document);
    Initializer _initializer = initDeclarator.getInitializer();
    this.format(_initializer, document);
  }
  
  protected void _format(final TypeSpecifier typeSpecifier, @Extension final IFormattableDocument document) {
    DeclarationSpecifier _specifier = typeSpecifier.getSpecifier();
    this.format(_specifier, document);
    TypedefName _type = typeSpecifier.getType();
    this.format(_type, document);
    TypeName _typeName = typeSpecifier.getTypeName();
    this.format(_typeName, document);
    Expression _constExpr = typeSpecifier.getConstExpr();
    this.format(_constExpr, document);
    Expression _expr1 = typeSpecifier.getExpr1();
    this.format(_expr1, document);
    Expression _expr2 = typeSpecifier.getExpr2();
    this.format(_expr2, document);
  }
  
  protected void _format(final StructOrUnionSpecifier structOrUnionSpecifier, @Extension final IFormattableDocument document) {
    StructOrUnion _type = structOrUnionSpecifier.getType();
    this.format(_type, document);
    StructDeclarationList _structDeclList = structOrUnionSpecifier.getStructDeclList();
    this.format(_structDeclList, document);
  }
  
  protected void _format(final StructDeclarationList structDeclarationList, @Extension final IFormattableDocument document) {
    EList<StructDeclaration> _structDeclaration = structDeclarationList.getStructDeclaration();
    for (final StructDeclaration structDeclaration : _structDeclaration) {
      this.format(structDeclaration, document);
    }
  }
  
  protected void _format(final StructDeclaration structDeclaration, @Extension final IFormattableDocument document) {
    SpecifierQualifierList _list = structDeclaration.getList();
    this.format(_list, document);
    StructDeclaratorList _structDeclarationList = structDeclaration.getStructDeclarationList();
    this.format(_structDeclarationList, document);
  }
  
  protected void _format(final SpecifierQualifierList specifierQualifierList, @Extension final IFormattableDocument document) {
    EList<TypeSpecifier> _typeSpecifier = specifierQualifierList.getTypeSpecifier();
    for (final TypeSpecifier typeSpecifier : _typeSpecifier) {
      this.format(typeSpecifier, document);
    }
    EList<TypeQualifier> _typeQualifier = specifierQualifierList.getTypeQualifier();
    for (final TypeQualifier typeQualifier : _typeQualifier) {
      this.format(typeQualifier, document);
    }
  }
  
  protected void _format(final StructDeclaratorList structDeclaratorList, @Extension final IFormattableDocument document) {
    EList<StructDeclarator> _structDeclarator = structDeclaratorList.getStructDeclarator();
    for (final StructDeclarator structDeclarator : _structDeclarator) {
      this.format(structDeclarator, document);
    }
  }
  
  protected void _format(final StructDeclarator structDeclarator, @Extension final IFormattableDocument document) {
    Declarator _declarator = structDeclarator.getDeclarator();
    this.format(_declarator, document);
    EList<Expression> _constExpr = structDeclarator.getConstExpr();
    for (final Expression constExpr : _constExpr) {
      this.format(constExpr, document);
    }
  }
  
  protected void _format(final EnumSpecifier enumSpecifier, @Extension final IFormattableDocument document) {
    EnumeratorList _enumList = enumSpecifier.getEnumList();
    this.format(_enumList, document);
  }
  
  protected void _format(final EnumeratorList enumeratorList, @Extension final IFormattableDocument document) {
    EList<Enumerator> _enumerator = enumeratorList.getEnumerator();
    for (final Enumerator enumerator : _enumerator) {
      this.format(enumerator, document);
    }
  }
  
  protected void _format(final Enumerator enumerator, @Extension final IFormattableDocument document) {
    Expression _expr = enumerator.getExpr();
    this.format(_expr, document);
  }
  
  protected void _format(final FunctionSpecifier functionSpecifier, @Extension final IFormattableDocument document) {
    GccAttributeSpecifier _gccAttributeSpecifier = functionSpecifier.getGccAttributeSpecifier();
    this.format(_gccAttributeSpecifier, document);
  }
  
  protected void _format(final Declarator declarator, @Extension final IFormattableDocument document) {
    Pointer _pointer = declarator.getPointer();
    this.format(_pointer, document);
    EList<GccDeclaratorExtension> _gccDeclExt1 = declarator.getGccDeclExt1();
    for (final GccDeclaratorExtension gccDeclExt1 : _gccDeclExt1) {
      this.format(gccDeclExt1, document);
    }
    DirectDeclarator _declarator = declarator.getDeclarator();
    this.format(_declarator, document);
    EList<GccDeclaratorExtension> _gccDeclExt2 = declarator.getGccDeclExt2();
    for (final GccDeclaratorExtension gccDeclExt2 : _gccDeclExt2) {
      this.format(gccDeclExt2, document);
    }
  }
  
  protected void _format(final DirectDeclarator directDeclarator, @Extension final IFormattableDocument document) {
    Declarator _declarator = directDeclarator.getDeclarator();
    this.format(_declarator, document);
    EList<DeclaratorSuffix> _declaratorSuffix = directDeclarator.getDeclaratorSuffix();
    for (final DeclaratorSuffix declaratorSuffix : _declaratorSuffix) {
      this.format(declaratorSuffix, document);
    }
  }
  
  protected void _format(final DeclaratorSuffix declaratorSuffix, @Extension final IFormattableDocument document) {
    Expression _expr = declaratorSuffix.getExpr();
    this.format(_expr, document);
    DirectDeclaratorLastSuffix _lastSuffix = declaratorSuffix.getLastSuffix();
    this.format(_lastSuffix, document);
  }
  
  protected void _format(final DirectDeclaratorLastSuffix directDeclaratorLastSuffix, @Extension final IFormattableDocument document) {
    EList<ParameterTypeList> _parameterTypeList = directDeclaratorLastSuffix.getParameterTypeList();
    for (final ParameterTypeList parameterTypeList : _parameterTypeList) {
      this.format(parameterTypeList, document);
    }
    IdentifierList _identifierList = directDeclaratorLastSuffix.getIdentifierList();
    this.format(_identifierList, document);
  }
  
  protected void _format(final GccDeclaratorExtension gccDeclaratorExtension, @Extension final IFormattableDocument document) {
    GccAttributeSpecifier _gccAttributeSpecifier = gccDeclaratorExtension.getGccAttributeSpecifier();
    this.format(_gccAttributeSpecifier, document);
  }
  
  protected void _format(final GccAttributeSpecifier gccAttributeSpecifier, @Extension final IFormattableDocument document) {
    GccAttributeList _list = gccAttributeSpecifier.getList();
    this.format(_list, document);
  }
  
  protected void _format(final GccAttributeList gccAttributeList, @Extension final IFormattableDocument document) {
    EList<GccAttribute> _gccAttribute = gccAttributeList.getGccAttribute();
    for (final GccAttribute gccAttribute : _gccAttribute) {
      this.format(gccAttribute, document);
    }
  }
  
  protected void _format(final GccAttribute gccAttribute, @Extension final IFormattableDocument document) {
    ArgumentExpressionList _list = gccAttribute.getList();
    this.format(_list, document);
  }
  
  protected void _format(final Pointer pointer, @Extension final IFormattableDocument document) {
    EList<TypeQualifierList> _typeQualifierList = pointer.getTypeQualifierList();
    for (final TypeQualifierList typeQualifierList : _typeQualifierList) {
      this.format(typeQualifierList, document);
    }
  }
  
  protected void _format(final TypeQualifierList typeQualifierList, @Extension final IFormattableDocument document) {
    EList<TypeQualifier> _typeQualifier = typeQualifierList.getTypeQualifier();
    for (final TypeQualifier typeQualifier : _typeQualifier) {
      this.format(typeQualifier, document);
    }
  }
  
  protected void _format(final ParameterTypeList parameterTypeList, @Extension final IFormattableDocument document) {
    ParameterList _list = parameterTypeList.getList();
    this.format(_list, document);
  }
  
  protected void _format(final ParameterList parameterList, @Extension final IFormattableDocument document) {
    EList<ParameterDeclaration> _parameterDeclaration = parameterList.getParameterDeclaration();
    for (final ParameterDeclaration parameterDeclaration : _parameterDeclaration) {
      this.format(parameterDeclaration, document);
    }
  }
  
  protected void _format(final ParameterDeclaration parameterDeclaration, @Extension final IFormattableDocument document) {
    DeclarationSpecifiers _declSpecifiers = parameterDeclaration.getDeclSpecifiers();
    this.format(_declSpecifiers, document);
    Declarator _declarator = parameterDeclaration.getDeclarator();
    this.format(_declarator, document);
    AbstractDeclarator _abstractDeclator = parameterDeclaration.getAbstractDeclator();
    this.format(_abstractDeclator, document);
  }
  
  protected void _format(final IdentifierList identifierList, @Extension final IFormattableDocument document) {
    EList<MyIdentifier> _ident = identifierList.getIdent();
    for (final MyIdentifier ident : _ident) {
      this.format(ident, document);
    }
  }
  
  protected void _format(final TypeName typeName, @Extension final IFormattableDocument document) {
    SpecifierQualifierList _list = typeName.getList();
    this.format(_list, document);
    AbstractDeclarator _abstractDeclarator = typeName.getAbstractDeclarator();
    this.format(_abstractDeclarator, document);
  }
  
  protected void _format(final AbstractDeclarator abstractDeclarator, @Extension final IFormattableDocument document) {
    Pointer _pointer = abstractDeclarator.getPointer();
    this.format(_pointer, document);
    DirectAbstractDeclarator _directAbstractDeclarator = abstractDeclarator.getDirectAbstractDeclarator();
    this.format(_directAbstractDeclarator, document);
    EList<GccDeclaratorExtension> _gccDeclExtAbstract = abstractDeclarator.getGccDeclExtAbstract();
    for (final GccDeclaratorExtension gccDeclExtAbstract : _gccDeclExtAbstract) {
      this.format(gccDeclExtAbstract, document);
    }
  }
  
  protected void _format(final DirectAbstractDeclarator directAbstractDeclarator, @Extension final IFormattableDocument document) {
    AbstractDeclarator _declarator = directAbstractDeclarator.getDeclarator();
    this.format(_declarator, document);
    EList<GccDeclaratorExtension> _gccDeclExt = directAbstractDeclarator.getGccDeclExt();
    for (final GccDeclaratorExtension gccDeclExt : _gccDeclExt) {
      this.format(gccDeclExt, document);
    }
    EList<AbstractDeclaratorSuffix> _abstractDeclaratorSuffix = directAbstractDeclarator.getAbstractDeclaratorSuffix();
    for (final AbstractDeclaratorSuffix abstractDeclaratorSuffix : _abstractDeclaratorSuffix) {
      this.format(abstractDeclaratorSuffix, document);
    }
  }
  
  protected void _format(final AbstractDeclaratorSuffix abstractDeclaratorSuffix, @Extension final IFormattableDocument document) {
    TypeQualifierList _typeQualifierList = abstractDeclaratorSuffix.getTypeQualifierList();
    this.format(_typeQualifierList, document);
    EList<Expression> _assignmentExpr = abstractDeclaratorSuffix.getAssignmentExpr();
    for (final Expression assignmentExpr : _assignmentExpr) {
      this.format(assignmentExpr, document);
    }
    TypeQualifierList _typeQualifierListOrig = abstractDeclaratorSuffix.getTypeQualifierListOrig();
    this.format(_typeQualifierListOrig, document);
    ParameterTypeList _parameterTypeList = abstractDeclaratorSuffix.getParameterTypeList();
    this.format(_parameterTypeList, document);
    EList<GccDeclaratorExtension> _gccDeclExt = abstractDeclaratorSuffix.getGccDeclExt();
    for (final GccDeclaratorExtension gccDeclExt : _gccDeclExt) {
      this.format(gccDeclExt, document);
    }
  }
  
  protected void _format(final Initializer initializer, @Extension final IFormattableDocument document) {
    Expression _expr = initializer.getExpr();
    this.format(_expr, document);
    InitializerList _list = initializer.getList();
    this.format(_list, document);
  }
  
  protected void _format(final InitializerList initializerList, @Extension final IFormattableDocument document) {
    EList<Init> _init = initializerList.getInit();
    for (final Init init : _init) {
      this.format(init, document);
    }
  }
  
  protected void _format(final Init init, @Extension final IFormattableDocument document) {
    Designation _designation = init.getDesignation();
    this.format(_designation, document);
    Initializer _initializer = init.getInitializer();
    this.format(_initializer, document);
  }
  
  protected void _format(final BlockList blockList, @Extension final IFormattableDocument document) {
    EList<Declaration> _declaration = blockList.getDeclaration();
    for (final Declaration declaration : _declaration) {
      this.format(declaration, document);
    }
    EList<Statement> _statement = blockList.getStatement();
    for (final Statement statement : _statement) {
      this.format(statement, document);
    }
  }
  
  protected void _format(final Statement statement, @Extension final IFormattableDocument document) {
    Statement _stmt = statement.getStmt();
    this.format(_stmt, document);
  }
  
  protected void _format(final LabeledStatement labeledStatement, @Extension final IFormattableDocument document) {
    Statement _lStmt = labeledStatement.getLStmt();
    this.format(_lStmt, document);
    Expression _expr = labeledStatement.getExpr();
    this.format(_expr, document);
  }
  
  protected void _format(final CompoundStatement compoundStatement, @Extension final IFormattableDocument document) {
    Statement _body = compoundStatement.getBody();
    this.format(_body, document);
  }
  
  protected void _format(final BodyStatement bodyStatement, @Extension final IFormattableDocument document) {
    EList<BlockList> _blockList = bodyStatement.getBlockList();
    for (final BlockList blockList : _blockList) {
      this.format(blockList, document);
    }
  }
  
  protected void _format(final ExpressionStatement expressionStatement, @Extension final IFormattableDocument document) {
    Expression _expression = expressionStatement.getExpression();
    this.format(_expression, document);
  }
  
  protected void _format(final SelectionStatement selectionStatement, @Extension final IFormattableDocument document) {
    Expression _expr = selectionStatement.getExpr();
    this.format(_expr, document);
    Statement _ifStatement = selectionStatement.getIfStatement();
    this.format(_ifStatement, document);
    Statement _elseStatement = selectionStatement.getElseStatement();
    this.format(_elseStatement, document);
    Statement _switchStatement = selectionStatement.getSwitchStatement();
    this.format(_switchStatement, document);
  }
  
  protected void _format(final IterationStatement iterationStatement, @Extension final IFormattableDocument document) {
    Expression _expr = iterationStatement.getExpr();
    this.format(_expr, document);
    Statement _statement = iterationStatement.getStatement();
    this.format(_statement, document);
    Expression _initExpr = iterationStatement.getInitExpr();
    this.format(_initExpr, document);
    Expression _incExpr = iterationStatement.getIncExpr();
    this.format(_incExpr, document);
    Declaration _initDecl = iterationStatement.getInitDecl();
    this.format(_initDecl, document);
  }
  
  protected void _format(final JumpStatement jumpStatement, @Extension final IFormattableDocument document) {
    Expression _expr = jumpStatement.getExpr();
    this.format(_expr, document);
  }
  
  protected void _format(final AsmStatement asmStatement, @Extension final IFormattableDocument document) {
    AsmLine _asmLine1 = asmStatement.getAsmLine1();
    this.format(_asmLine1, document);
    EList<AsmLineWithColon> _asmLines = asmStatement.getAsmLines();
    for (final AsmLineWithColon asmLines : _asmLines) {
      this.format(asmLines, document);
    }
  }
  
  protected void _format(final AsmLine asmLine, @Extension final IFormattableDocument document) {
    AsmSymbolicName _sym = asmLine.getSym();
    this.format(_sym, document);
    Expression _expr = asmLine.getExpr();
    this.format(_expr, document);
  }
  
  protected void _format(final AsmLineWithColon asmLineWithColon, @Extension final IFormattableDocument document) {
    AsmLineWithoutColon _asmLine = asmLineWithColon.getAsmLine();
    this.format(_asmLine, document);
  }
  
  protected void _format(final AsmLineWithoutColon asmLineWithoutColon, @Extension final IFormattableDocument document) {
    EList<AsmLine> _asmLines = asmLineWithoutColon.getAsmLines();
    for (final AsmLine asmLines : _asmLines) {
      this.format(asmLines, document);
    }
  }
  
  protected void _format(final Designation designation, @Extension final IFormattableDocument document) {
    DesignatorList _list = designation.getList();
    this.format(_list, document);
  }
  
  protected void _format(final DesignatorList designatorList, @Extension final IFormattableDocument document) {
    EList<Designator> _designator = designatorList.getDesignator();
    for (final Designator designator : _designator) {
      this.format(designator, document);
    }
  }
  
  protected void _format(final Designator designator, @Extension final IFormattableDocument document) {
    Expression _expr = designator.getExpr();
    this.format(_expr, document);
    Expression _to = designator.getTo();
    this.format(_to, document);
  }
  
  protected void _format(final Expression expression, @Extension final IFormattableDocument document) {
    Expression _right = expression.getRight();
    this.format(_right, document);
    Expression _left = expression.getLeft();
    this.format(_left, document);
  }
  
  protected void _format(final AssignmentExpression assignmentExpression, @Extension final IFormattableDocument document) {
    Expression _expr = assignmentExpression.getExpr();
    this.format(_expr, document);
    Expression _assignmentExpr = assignmentExpression.getAssignmentExpr();
    this.format(_assignmentExpr, document);
  }
  
  protected void _format(final ConditionalExpression conditionalExpression, @Extension final IFormattableDocument document) {
    Expression _qExpr = conditionalExpression.getQExpr();
    this.format(_qExpr, document);
    Expression _cExpr = conditionalExpression.getCExpr();
    this.format(_cExpr, document);
    Expression _left = conditionalExpression.getLeft();
    this.format(_left, document);
  }
  
  protected void _format(final LogicalOrExpression logicalOrExpression, @Extension final IFormattableDocument document) {
    Expression _right = logicalOrExpression.getRight();
    this.format(_right, document);
    Expression _left = logicalOrExpression.getLeft();
    this.format(_left, document);
  }
  
  protected void _format(final LogicalAndExpression logicalAndExpression, @Extension final IFormattableDocument document) {
    Expression _right = logicalAndExpression.getRight();
    this.format(_right, document);
    Expression _left = logicalAndExpression.getLeft();
    this.format(_left, document);
  }
  
  protected void _format(final InclusiveOrExpression inclusiveOrExpression, @Extension final IFormattableDocument document) {
    Expression _right = inclusiveOrExpression.getRight();
    this.format(_right, document);
    Expression _left = inclusiveOrExpression.getLeft();
    this.format(_left, document);
  }
  
  protected void _format(final ExclusiveOrExpression exclusiveOrExpression, @Extension final IFormattableDocument document) {
    Expression _right = exclusiveOrExpression.getRight();
    this.format(_right, document);
    Expression _left = exclusiveOrExpression.getLeft();
    this.format(_left, document);
  }
  
  protected void _format(final AndExpression andExpression, @Extension final IFormattableDocument document) {
    Expression _right = andExpression.getRight();
    this.format(_right, document);
    Expression _left = andExpression.getLeft();
    this.format(_left, document);
  }
  
  protected void _format(final EqualityExpression equalityExpression, @Extension final IFormattableDocument document) {
    Expression _right = equalityExpression.getRight();
    this.format(_right, document);
    Expression _left = equalityExpression.getLeft();
    this.format(_left, document);
  }
  
  protected void _format(final RelationalExpression relationalExpression, @Extension final IFormattableDocument document) {
    Expression _right = relationalExpression.getRight();
    this.format(_right, document);
    Expression _left = relationalExpression.getLeft();
    this.format(_left, document);
  }
  
  protected void _format(final ShiftExpression shiftExpression, @Extension final IFormattableDocument document) {
    Expression _right = shiftExpression.getRight();
    this.format(_right, document);
    Expression _left = shiftExpression.getLeft();
    this.format(_left, document);
  }
  
  protected void _format(final AdditiveExpression additiveExpression, @Extension final IFormattableDocument document) {
    Expression _right = additiveExpression.getRight();
    this.format(_right, document);
    Expression _left = additiveExpression.getLeft();
    this.format(_left, document);
  }
  
  protected void _format(final MultiplicativeExpression multiplicativeExpression, @Extension final IFormattableDocument document) {
    Expression _right = multiplicativeExpression.getRight();
    this.format(_right, document);
    Expression _left = multiplicativeExpression.getLeft();
    this.format(_left, document);
  }
  
  protected void _format(final CastExpression castExpression, @Extension final IFormattableDocument document) {
    TypeName _type = castExpression.getType();
    this.format(_type, document);
    Expression _expr = castExpression.getExpr();
    this.format(_expr, document);
  }
  
  protected void _format(final UnaryExpression unaryExpression, @Extension final IFormattableDocument document) {
    Expression _expr = unaryExpression.getExpr();
    this.format(_expr, document);
    TypeName _typeName = unaryExpression.getTypeName();
    this.format(_typeName, document);
  }
  
  protected void _format(final PostfixExpression postfixExpression, @Extension final IFormattableDocument document) {
    TypeName _typeName = postfixExpression.getTypeName();
    this.format(_typeName, document);
    InitializerList _initializerList = postfixExpression.getInitializerList();
    this.format(_initializerList, document);
    PostfixExpressionSuffix _suffix = postfixExpression.getSuffix();
    this.format(_suffix, document);
    Expression _expr = postfixExpression.getExpr();
    this.format(_expr, document);
  }
  
  protected void _format(final PostfixExpressionSuffixArray postfixExpressionSuffixArray, @Extension final IFormattableDocument document) {
    Expression _arrayExpr = postfixExpressionSuffixArray.getArrayExpr();
    this.format(_arrayExpr, document);
  }
  
  protected void _format(final PostfixExpressionSuffixArgument postfixExpressionSuffixArgument, @Extension final IFormattableDocument document) {
    ArgumentExpressionList _argumentExpressionList = postfixExpressionSuffixArgument.getArgumentExpressionList();
    this.format(_argumentExpressionList, document);
  }
  
  protected void _format(final ArgumentExpressionList argumentExpressionList, @Extension final IFormattableDocument document) {
    EList<at.jku.weiner.c.common.common.Expression> _expr = argumentExpressionList.getExpr();
    for (final at.jku.weiner.c.common.common.Expression expr : _expr) {
      this.format(expr, document);
    }
  }
  
  protected void _format(final PrimaryExpression primaryExpression, @Extension final IFormattableDocument document) {
    Constant2 _const = primaryExpression.getConst();
    this.format(_const, document);
    Expression _expr = primaryExpression.getExpr();
    this.format(_expr, document);
    Statement _compoundStmt = primaryExpression.getCompoundStmt();
    this.format(_compoundStmt, document);
    TypeName _typeName = primaryExpression.getTypeName();
    this.format(_typeName, document);
    TypeName _typeName2 = primaryExpression.getTypeName2();
    this.format(_typeName2, document);
  }
  
  protected void _format(final ConstantExpression constantExpression, @Extension final IFormattableDocument document) {
    Expression _expr = constantExpression.getExpr();
    this.format(_expr, document);
  }
  
  public void format(final Object additiveExpression, final IFormattableDocument document) {
    if (additiveExpression instanceof AdditiveExpression) {
      _format((AdditiveExpression)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof AndExpression) {
      _format((AndExpression)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof AssignmentExpression) {
      _format((AssignmentExpression)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof CastExpression) {
      _format((CastExpression)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof ConditionalExpression) {
      _format((ConditionalExpression)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof ConstantExpression) {
      _format((ConstantExpression)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof EqualityExpression) {
      _format((EqualityExpression)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof ExclusiveOrExpression) {
      _format((ExclusiveOrExpression)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof InclusiveOrExpression) {
      _format((InclusiveOrExpression)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof LogicalAndExpression) {
      _format((LogicalAndExpression)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof LogicalOrExpression) {
      _format((LogicalOrExpression)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof MultiplicativeExpression) {
      _format((MultiplicativeExpression)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof PostfixExpression) {
      _format((PostfixExpression)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof PostfixExpressionSuffixArgument) {
      _format((PostfixExpressionSuffixArgument)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof PostfixExpressionSuffixArray) {
      _format((PostfixExpressionSuffixArray)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof PrimaryExpression) {
      _format((PrimaryExpression)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof RelationalExpression) {
      _format((RelationalExpression)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof ShiftExpression) {
      _format((ShiftExpression)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof UnaryExpression) {
      _format((UnaryExpression)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof ArgumentExpressionList) {
      _format((ArgumentExpressionList)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof AsmStatement) {
      _format((AsmStatement)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof BodyStatement) {
      _format((BodyStatement)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof CompoundStatement) {
      _format((CompoundStatement)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof EnumSpecifier) {
      _format((EnumSpecifier)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof Expression) {
      _format((Expression)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof ExpressionStatement) {
      _format((ExpressionStatement)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof IterationStatement) {
      _format((IterationStatement)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof JumpStatement) {
      _format((JumpStatement)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof LabeledStatement) {
      _format((LabeledStatement)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof Parser) {
      _format((Parser)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof SelectionStatement) {
      _format((SelectionStatement)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof StructOrUnionSpecifier) {
      _format((StructOrUnionSpecifier)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof XtextResource) {
      _format((XtextResource)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof AbstractDeclarator) {
      _format((AbstractDeclarator)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof AbstractDeclaratorSuffix) {
      _format((AbstractDeclaratorSuffix)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof AsmLine) {
      _format((AsmLine)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof AsmLineWithColon) {
      _format((AsmLineWithColon)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof AsmLineWithoutColon) {
      _format((AsmLineWithoutColon)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof BlockList) {
      _format((BlockList)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof Declaration) {
      _format((Declaration)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof DeclarationSpecifiers) {
      _format((DeclarationSpecifiers)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof Declarator) {
      _format((Declarator)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof DeclaratorSuffix) {
      _format((DeclaratorSuffix)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof Designation) {
      _format((Designation)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof Designator) {
      _format((Designator)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof DesignatorList) {
      _format((DesignatorList)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof DirectAbstractDeclarator) {
      _format((DirectAbstractDeclarator)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof DirectDeclarator) {
      _format((DirectDeclarator)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof DirectDeclaratorLastSuffix) {
      _format((DirectDeclaratorLastSuffix)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof Enumerator) {
      _format((Enumerator)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof EnumeratorList) {
      _format((EnumeratorList)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof ExternalDeclaration) {
      _format((ExternalDeclaration)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof FunctionDeclarationSpecifiers) {
      _format((FunctionDeclarationSpecifiers)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof FunctionDefHead) {
      _format((FunctionDefHead)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof FunctionDefinition) {
      _format((FunctionDefinition)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof FunctionSpecifier) {
      _format((FunctionSpecifier)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof GccAttribute) {
      _format((GccAttribute)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof GccAttributeList) {
      _format((GccAttributeList)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof GccAttributeSpecifier) {
      _format((GccAttributeSpecifier)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof GccDeclaratorExtension) {
      _format((GccDeclaratorExtension)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof IdentifierList) {
      _format((IdentifierList)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof Init) {
      _format((Init)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof InitDeclarator) {
      _format((InitDeclarator)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof InitDeclaratorList) {
      _format((InitDeclaratorList)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof Initializer) {
      _format((Initializer)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof InitializerList) {
      _format((InitializerList)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof ParameterDeclaration) {
      _format((ParameterDeclaration)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof ParameterList) {
      _format((ParameterList)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof ParameterTypeList) {
      _format((ParameterTypeList)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof Pointer) {
      _format((Pointer)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof SpecifierQualifierList) {
      _format((SpecifierQualifierList)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof Statement) {
      _format((Statement)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof StructDeclaration) {
      _format((StructDeclaration)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof StructDeclarationList) {
      _format((StructDeclarationList)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof StructDeclarator) {
      _format((StructDeclarator)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof StructDeclaratorList) {
      _format((StructDeclaratorList)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof TypeName) {
      _format((TypeName)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof TypeQualifierList) {
      _format((TypeQualifierList)additiveExpression, document);
      return;
    } else if (additiveExpression instanceof TypeSpecifier) {
      _format((TypeSpecifier)additiveExpression, document);
      return;
    } else if (additiveExpression == null) {
      _format((Void)null, document);
      return;
    } else if (additiveExpression != null) {
      _format(additiveExpression, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(additiveExpression, document).toString());
    }
  }
}
