/**
 * generated by Xtext 2.9.0-SNAPSHOT
 */
package at.jku.weiner.c.parser.generator;

import at.jku.weiner.c.common.common.Constant2;
import at.jku.weiner.c.parser.parser.AbstractDeclarator;
import at.jku.weiner.c.parser.parser.AbstractDeclaratorSuffix;
import at.jku.weiner.c.parser.parser.AdditiveExpression;
import at.jku.weiner.c.parser.parser.AndExpression;
import at.jku.weiner.c.parser.parser.ArgumentExpressionList;
import at.jku.weiner.c.parser.parser.AsmLine;
import at.jku.weiner.c.parser.parser.AsmLineWithColon;
import at.jku.weiner.c.parser.parser.AsmLineWithoutColon;
import at.jku.weiner.c.parser.parser.AsmStatement;
import at.jku.weiner.c.parser.parser.AsmSymbolicName;
import at.jku.weiner.c.parser.parser.AssignmentExpression;
import at.jku.weiner.c.parser.parser.BlockList;
import at.jku.weiner.c.parser.parser.BodyStatement;
import at.jku.weiner.c.parser.parser.CastExpression;
import at.jku.weiner.c.parser.parser.CompoundStatement;
import at.jku.weiner.c.parser.parser.ConditionalExpression;
import at.jku.weiner.c.parser.parser.ConstantExpression;
import at.jku.weiner.c.parser.parser.Declaration;
import at.jku.weiner.c.parser.parser.DeclarationSpecifier;
import at.jku.weiner.c.parser.parser.DeclarationSpecifiers;
import at.jku.weiner.c.parser.parser.Declarator;
import at.jku.weiner.c.parser.parser.DeclaratorSuffix;
import at.jku.weiner.c.parser.parser.Designation;
import at.jku.weiner.c.parser.parser.Designator;
import at.jku.weiner.c.parser.parser.DesignatorList;
import at.jku.weiner.c.parser.parser.DirectAbstractDeclarator;
import at.jku.weiner.c.parser.parser.DirectDeclarator;
import at.jku.weiner.c.parser.parser.DirectDeclaratorLastSuffix;
import at.jku.weiner.c.parser.parser.EnumSpecifier;
import at.jku.weiner.c.parser.parser.Enumerator;
import at.jku.weiner.c.parser.parser.EnumeratorList;
import at.jku.weiner.c.parser.parser.EqualityExpression;
import at.jku.weiner.c.parser.parser.ExclusiveOrExpression;
import at.jku.weiner.c.parser.parser.Expression;
import at.jku.weiner.c.parser.parser.ExpressionStatement;
import at.jku.weiner.c.parser.parser.ExternalDeclaration;
import at.jku.weiner.c.parser.parser.FunctionDeclarationSpecifiers;
import at.jku.weiner.c.parser.parser.FunctionDefHead;
import at.jku.weiner.c.parser.parser.FunctionDefinition;
import at.jku.weiner.c.parser.parser.FunctionSpecifier;
import at.jku.weiner.c.parser.parser.GccAsmBasic;
import at.jku.weiner.c.parser.parser.GccAttribute;
import at.jku.weiner.c.parser.parser.GccAttributeList;
import at.jku.weiner.c.parser.parser.GccAttributeSpecifier;
import at.jku.weiner.c.parser.parser.GccDeclaratorExtension;
import at.jku.weiner.c.parser.parser.IdentifierList;
import at.jku.weiner.c.parser.parser.InclusiveOrExpression;
import at.jku.weiner.c.parser.parser.Init;
import at.jku.weiner.c.parser.parser.InitDeclarator;
import at.jku.weiner.c.parser.parser.InitDeclaratorList;
import at.jku.weiner.c.parser.parser.Initializer;
import at.jku.weiner.c.parser.parser.InitializerList;
import at.jku.weiner.c.parser.parser.IterationStatement;
import at.jku.weiner.c.parser.parser.JumpStatement;
import at.jku.weiner.c.parser.parser.LabeledStatement;
import at.jku.weiner.c.parser.parser.LogicalAndExpression;
import at.jku.weiner.c.parser.parser.LogicalOrExpression;
import at.jku.weiner.c.parser.parser.MultiplicativeExpression;
import at.jku.weiner.c.parser.parser.MyIdentifier;
import at.jku.weiner.c.parser.parser.ParameterDeclaration;
import at.jku.weiner.c.parser.parser.ParameterList;
import at.jku.weiner.c.parser.parser.ParameterTypeList;
import at.jku.weiner.c.parser.parser.Parser;
import at.jku.weiner.c.parser.parser.Pointer;
import at.jku.weiner.c.parser.parser.PostfixExpression;
import at.jku.weiner.c.parser.parser.PostfixExpressionSuffix;
import at.jku.weiner.c.parser.parser.PostfixExpressionSuffixArgument;
import at.jku.weiner.c.parser.parser.PostfixExpressionSuffixArray;
import at.jku.weiner.c.parser.parser.PostfixExpressionSuffixArrow;
import at.jku.weiner.c.parser.parser.PostfixExpressionSuffixDot;
import at.jku.weiner.c.parser.parser.PostfixExpressionSuffixMinusMinus;
import at.jku.weiner.c.parser.parser.PostfixExpressionSuffixPlusPlus;
import at.jku.weiner.c.parser.parser.PrimaryExpression;
import at.jku.weiner.c.parser.parser.RelationalExpression;
import at.jku.weiner.c.parser.parser.SelectionStatement;
import at.jku.weiner.c.parser.parser.ShiftExpression;
import at.jku.weiner.c.parser.parser.SpecifierQualifierList;
import at.jku.weiner.c.parser.parser.Statement;
import at.jku.weiner.c.parser.parser.StorageClassSpecifier;
import at.jku.weiner.c.parser.parser.StructDeclaration;
import at.jku.weiner.c.parser.parser.StructDeclarationList;
import at.jku.weiner.c.parser.parser.StructDeclarator;
import at.jku.weiner.c.parser.parser.StructDeclaratorList;
import at.jku.weiner.c.parser.parser.StructOrUnion;
import at.jku.weiner.c.parser.parser.StructOrUnionSpecifier;
import at.jku.weiner.c.parser.parser.TypeName;
import at.jku.weiner.c.parser.parser.TypeQualifier;
import at.jku.weiner.c.parser.parser.TypeQualifierList;
import at.jku.weiner.c.parser.parser.TypeSpecifier;
import at.jku.weiner.c.parser.parser.TypedefName;
import at.jku.weiner.c.parser.parser.UnaryExpression;
import com.google.common.base.Objects;
import com.google.common.collect.Iterators;
import java.util.Iterator;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend.lib.annotations.Accessors;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.ExclusiveRange;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.Pure;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class ParserGenerator implements IGenerator {
  @Accessors
  private String fileName = "hello_world.cdt.c";
  
  @Override
  public void doGenerate(final Resource input, final IFileSystemAccess fsa) {
    TreeIterator<EObject> _allContents = input.getAllContents();
    Iterator<Parser> _filter = Iterators.<Parser>filter(_allContents, Parser.class);
    final Parser parser = IteratorExtensions.<Parser>head(_filter);
    final String output = this.outputFor(parser);
    fsa.generateFile(this.fileName, output);
  }
  
  public String outputFor(final Parser parser) {
    final StringBuffer result = new StringBuffer("");
    EList<ExternalDeclaration> _external = parser.getExternal();
    for (final ExternalDeclaration e : _external) {
      String _outputFor = this.outputFor(e);
      result.append(_outputFor);
    }
    return result.toString();
  }
  
  public String outputFor(final ExternalDeclaration dec) {
    StringConcatenation _builder = new StringConcatenation();
    {
      FunctionDefHead _functiondefHead = dec.getFunctiondefHead();
      boolean _notEquals = (!Objects.equal(_functiondefHead, null));
      if (_notEquals) {
        FunctionDefHead _functiondefHead_1 = dec.getFunctiondefHead();
        String _outputFor = this.outputFor(_functiondefHead_1);
        _builder.append(_outputFor, "");
        _builder.append(" {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        FunctionDefinition _functionDefinition = dec.getFunctionDefinition();
        String _outputFor_1 = this.outputFor(_functionDefinition);
        _builder.append(_outputFor_1, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
      }
    }
    Declaration _declaration = dec.getDeclaration();
    String _outputFor_2 = this.outputFor(_declaration);
    _builder.append(_outputFor_2, "");
    _builder.newLineIfNotEmpty();
    {
      String _semi = dec.getSemi();
      boolean _notEquals_1 = (!Objects.equal(_semi, null));
      if (_notEquals_1) {
        String _semi_1 = dec.getSemi();
        _builder.append(_semi_1, "");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      GccAsmBasic _gccAsmBasic = dec.getGccAsmBasic();
      boolean _notEquals_2 = (!Objects.equal(_gccAsmBasic, null));
      if (_notEquals_2) {
        GccAsmBasic _gccAsmBasic_1 = dec.getGccAsmBasic();
        String _outputFor_3 = this.outputFor(_gccAsmBasic_1);
        _builder.append(_outputFor_3, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  public String outputFor(final FunctionDefHead dec) {
    StringConcatenation _builder = new StringConcatenation();
    {
      FunctionDeclarationSpecifiers _funDeclSpecifiers = dec.getFunDeclSpecifiers();
      boolean _notEquals = (!Objects.equal(_funDeclSpecifiers, null));
      if (_notEquals) {
        FunctionDeclarationSpecifiers _funDeclSpecifiers_1 = dec.getFunDeclSpecifiers();
        String _outputFor = this.outputFor(_funDeclSpecifiers_1);
        _builder.append(_outputFor, "");
        _builder.newLineIfNotEmpty();
      }
    }
    Declarator _funDeclarator = dec.getFunDeclarator();
    String _outputFor_1 = this.outputFor(_funDeclarator);
    _builder.append(_outputFor_1, "");
    _builder.newLineIfNotEmpty();
    {
      EList<Declaration> _funDeclaration = dec.getFunDeclaration();
      for(final Declaration f : _funDeclaration) {
        String _outputFor_2 = this.outputFor(f);
        _builder.append(_outputFor_2, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  public String outputFor(final FunctionDeclarationSpecifiers spec) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<EObject> _declarationSpecifier = spec.getDeclarationSpecifier();
      for(final EObject s : _declarationSpecifier) {
        {
          if ((s instanceof StorageClassSpecifier)) {
            String _outputFor = this.outputFor(((StorageClassSpecifier)s));
            _builder.append(_outputFor, "");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          if ((s instanceof TypeSpecifier)) {
            String _outputFor_1 = this.outputFor(((TypeSpecifier)s));
            _builder.append(_outputFor_1, "");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          if ((s instanceof TypeQualifier)) {
            String _outputFor_2 = this.outputFor(((TypeQualifier)s));
            _builder.append(_outputFor_2, "");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          if ((s instanceof FunctionSpecifier)) {
            String _outputFor_3 = this.outputFor(((FunctionSpecifier)s));
            _builder.append(_outputFor_3, "");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder.toString();
  }
  
  public String outputFor(final FunctionDefinition obj) {
    StringConcatenation _builder = new StringConcatenation();
    Statement _body = obj.getBody();
    String _outputFor = this.outputFor(_body);
    _builder.append(_outputFor, "");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputFor(final Declaration dec) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _notEquals = (!Objects.equal(dec, null));
      if (_notEquals) {
        DeclarationSpecifiers _specifiers = dec.getSpecifiers();
        String _outputFor = this.outputFor(_specifiers);
        _builder.append(_outputFor, "");
        _builder.newLineIfNotEmpty();
        {
          EList<InitDeclaratorList> _initDeclaratorList = dec.getInitDeclaratorList();
          for(final InitDeclaratorList list : _initDeclaratorList) {
            String _outputFor_1 = this.outputFor(list);
            _builder.append(_outputFor_1, "");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append(";");
        _builder.newLine();
      }
    }
    return _builder.toString();
  }
  
  public String outputFor(final DeclarationSpecifiers spec) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<EObject> _declarationSpecifier = spec.getDeclarationSpecifier();
      for(final EObject s : _declarationSpecifier) {
        {
          if ((s instanceof StorageClassSpecifier)) {
            String _outputFor = this.outputFor(((StorageClassSpecifier)s));
            _builder.append(_outputFor, "");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          if ((s instanceof TypeSpecifier)) {
            String _outputFor_1 = this.outputFor(((TypeSpecifier)s));
            _builder.append(_outputFor_1, "");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          if ((s instanceof TypeQualifier)) {
            String _outputFor_2 = this.outputFor(((TypeQualifier)s));
            _builder.append(_outputFor_2, "");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          if ((s instanceof FunctionSpecifier)) {
            String _outputFor_3 = this.outputFor(((FunctionSpecifier)s));
            _builder.append(_outputFor_3, "");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          if ((s instanceof StructOrUnionSpecifier)) {
            String _outputFor_4 = this.outputFor(((StructOrUnionSpecifier)s));
            _builder.append(_outputFor_4, "");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder.toString();
  }
  
  public String outputFor(final StorageClassSpecifier spec) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = spec.getName();
    _builder.append(_name, "");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputFor(final TypeQualifier spec) {
    StringConcatenation _builder = new StringConcatenation();
    String _type = spec.getType();
    _builder.append(_type, "");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputFor(final FunctionSpecifier spec) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _name = spec.getName();
      boolean _notEquals = (!Objects.equal(_name, null));
      if (_notEquals) {
        String _name_1 = spec.getName();
        _builder.append(_name_1, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      GccAttributeSpecifier _gccAttributeSpecifier = spec.getGccAttributeSpecifier();
      boolean _notEquals_1 = (!Objects.equal(_gccAttributeSpecifier, null));
      if (_notEquals_1) {
        GccAttributeSpecifier _gccAttributeSpecifier_1 = spec.getGccAttributeSpecifier();
        String _outputFor = this.outputFor(_gccAttributeSpecifier_1);
        _builder.append(_outputFor, "");
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputFor(final TypeSpecifier spec) {
    StringConcatenation _builder = new StringConcatenation();
    {
      DeclarationSpecifier _specifier = spec.getSpecifier();
      boolean _notEquals = (!Objects.equal(_specifier, null));
      if (_notEquals) {
        {
          DeclarationSpecifier _specifier_1 = spec.getSpecifier();
          if ((_specifier_1 instanceof EnumSpecifier)) {
            DeclarationSpecifier _specifier_2 = spec.getSpecifier();
            String _outputFor = this.outputFor(((EnumSpecifier) _specifier_2));
            _builder.append(_outputFor, "");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          DeclarationSpecifier _specifier_3 = spec.getSpecifier();
          if ((_specifier_3 instanceof StructOrUnionSpecifier)) {
            DeclarationSpecifier _specifier_4 = spec.getSpecifier();
            String _outputFor_1 = this.outputFor(((StructOrUnionSpecifier) _specifier_4));
            _builder.append(_outputFor_1, "");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      TypedefName _type = spec.getType();
      boolean _notEquals_1 = (!Objects.equal(_type, null));
      if (_notEquals_1) {
        TypedefName _type_1 = spec.getType();
        String _ident = _type_1.getIdent();
        _builder.append(_ident, "");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _name = spec.getName();
      boolean _notEquals_2 = (!Objects.equal(_name, null));
      if (_notEquals_2) {
        String _name_1 = spec.getName();
        _builder.append(_name_1, "");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _typeOf = spec.getTypeOf();
      boolean _notEquals_3 = (!Objects.equal(_typeOf, null));
      if (_notEquals_3) {
        String _typeOf_1 = spec.getTypeOf();
        _builder.append(_typeOf_1, "");
        _builder.append("(");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        {
          Expression _constExpr = spec.getConstExpr();
          boolean _notEquals_4 = (!Objects.equal(_constExpr, null));
          if (_notEquals_4) {
            Expression _constExpr_1 = spec.getConstExpr();
            String _outputFor_2 = this.outputFor(_constExpr_1);
            _builder.append(_outputFor_2, "\t");
          }
        }
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        {
          TypeName _typeName = spec.getTypeName();
          boolean _notEquals_5 = (!Objects.equal(_typeName, null));
          if (_notEquals_5) {
            TypeName _typeName_1 = spec.getTypeName();
            String _outputFor_3 = this.outputFor(_typeName_1);
            _builder.append(_outputFor_3, "\t");
          }
        }
        _builder.newLineIfNotEmpty();
        _builder.append(")");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      boolean _isBuiltinChooseExpr = spec.isBuiltinChooseExpr();
      if (_isBuiltinChooseExpr) {
        _builder.append("__builtin_choose_expr(");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        Expression _constExpr_2 = spec.getConstExpr();
        String _outputFor_4 = this.outputFor(_constExpr_2);
        _builder.append(_outputFor_4, "\t");
        _builder.append(", ");
        Expression _expr1 = spec.getExpr1();
        String _outputFor_5 = this.outputFor(_expr1);
        _builder.append(_outputFor_5, "\t");
        _builder.append(", ");
        Expression _expr2 = spec.getExpr2();
        String _outputFor_6 = this.outputFor(_expr2);
        _builder.append(_outputFor_6, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append(")");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      GccAttributeSpecifier _gccAttributeSpecifier = spec.getGccAttributeSpecifier();
      boolean _notEquals_6 = (!Objects.equal(_gccAttributeSpecifier, null));
      if (_notEquals_6) {
        GccAttributeSpecifier _gccAttributeSpecifier_1 = spec.getGccAttributeSpecifier();
        String _outputFor_7 = this.outputFor(_gccAttributeSpecifier_1);
        _builder.append(_outputFor_7, "");
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputFor(final StructOrUnionSpecifier obj) {
    StringConcatenation _builder = new StringConcatenation();
    StructOrUnion _type = obj.getType();
    String _name = _type.getName();
    _builder.append(_name, "");
    _builder.append(" ");
    {
      String _ident = obj.getIdent();
      boolean _notEquals = (!Objects.equal(_ident, null));
      if (_notEquals) {
        String _ident_1 = obj.getIdent();
        _builder.append(_ident_1, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      boolean _isBraces = obj.isBraces();
      if (_isBraces) {
        _builder.append("{");
        {
          StructDeclarationList _structDeclList = obj.getStructDeclList();
          boolean _notEquals_1 = (!Objects.equal(_structDeclList, null));
          if (_notEquals_1) {
            StructDeclarationList _structDeclList_1 = obj.getStructDeclList();
            String _outputFor = this.outputFor(_structDeclList_1);
            _builder.append(_outputFor, "");
          }
        }
        _builder.append("}");
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputFor(final StructDeclarationList obj) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<StructDeclaration> _structDeclaration = obj.getStructDeclaration();
      for(final StructDeclaration s : _structDeclaration) {
        String _outputFor = this.outputFor(s);
        _builder.append(_outputFor, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  public String outputFor(final StructDeclaration obj) {
    StringConcatenation _builder = new StringConcatenation();
    {
      SpecifierQualifierList _list = obj.getList();
      boolean _notEquals = (!Objects.equal(_list, null));
      if (_notEquals) {
        SpecifierQualifierList _list_1 = obj.getList();
        String _outputFor = this.outputFor(_list_1);
        _builder.append(_outputFor, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      StructDeclaratorList _structDeclarationList = obj.getStructDeclarationList();
      boolean _notEquals_1 = (!Objects.equal(_structDeclarationList, null));
      if (_notEquals_1) {
        StructDeclaratorList _structDeclarationList_1 = obj.getStructDeclarationList();
        String _outputFor_1 = this.outputFor(_structDeclarationList_1);
        _builder.append(_outputFor_1, "");
      }
    }
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputFor(final StructDeclaratorList obj) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<StructDeclarator> _structDeclarator = obj.getStructDeclarator();
      for(final StructDeclarator p : _structDeclarator) {
        {
          EList<StructDeclarator> _structDeclarator_1 = obj.getStructDeclarator();
          int _indexOf = _structDeclarator_1.indexOf(p);
          boolean _greaterThan = (_indexOf > 0);
          if (_greaterThan) {
            _builder.append(", ");
          }
        }
        _builder.newLineIfNotEmpty();
        String _outputFor = this.outputFor(p);
        _builder.append(_outputFor, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  public String outputFor(final StructDeclarator obj) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Declarator _declarator = obj.getDeclarator();
      boolean _notEquals = (!Objects.equal(_declarator, null));
      if (_notEquals) {
        Declarator _declarator_1 = obj.getDeclarator();
        String _outputFor = this.outputFor(_declarator_1);
        _builder.append(_outputFor, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      boolean _and = false;
      EList<Expression> _constExpr = obj.getConstExpr();
      boolean _notEquals_1 = (!Objects.equal(_constExpr, null));
      if (!_notEquals_1) {
        _and = false;
      } else {
        EList<Expression> _constExpr_1 = obj.getConstExpr();
        int _size = _constExpr_1.size();
        boolean _greaterThan = (_size > 0);
        _and = _greaterThan;
      }
      if (_and) {
        _builder.append(":");
        _builder.newLineIfNotEmpty();
        {
          EList<Expression> _constExpr_2 = obj.getConstExpr();
          for(final Expression e : _constExpr_2) {
            String _outputFor_1 = this.outputFor(e);
            _builder.append(_outputFor_1, "");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder.toString();
  }
  
  public String outputFor(final EnumSpecifier obj) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("enum ");
    {
      String _ident = obj.getIdent();
      boolean _notEquals = (!Objects.equal(_ident, null));
      if (_notEquals) {
        String _ident_1 = obj.getIdent();
        _builder.append(_ident_1, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      EnumeratorList _enumList = obj.getEnumList();
      boolean _notEquals_1 = (!Objects.equal(_enumList, null));
      if (_notEquals_1) {
        _builder.append("{");
        _builder.newLine();
        _builder.append("\t");
        EnumeratorList _enumList_1 = obj.getEnumList();
        String _outputFor = this.outputFor(_enumList_1);
        _builder.append(_outputFor, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
      }
    }
    return _builder.toString();
  }
  
  public String outputFor(final EnumeratorList obj) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Enumerator> _enumerator = obj.getEnumerator();
      for(final Enumerator e : _enumerator) {
        {
          EList<Enumerator> _enumerator_1 = obj.getEnumerator();
          int _indexOf = _enumerator_1.indexOf(e);
          boolean _greaterThan = (_indexOf > 0);
          if (_greaterThan) {
            _builder.append(", ");
          }
        }
        _builder.newLineIfNotEmpty();
        String _outputFor = this.outputFor(e);
        _builder.append(_outputFor, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  public String outputFor(final Enumerator obj) {
    StringConcatenation _builder = new StringConcatenation();
    String _ident = obj.getIdent();
    _builder.append(_ident, "");
    _builder.newLineIfNotEmpty();
    {
      Expression _expr = obj.getExpr();
      boolean _notEquals = (!Objects.equal(_expr, null));
      if (_notEquals) {
        _builder.append("=");
        _builder.newLine();
        Expression _expr_1 = obj.getExpr();
        String _outputFor = this.outputFor(_expr_1);
        _builder.append(_outputFor, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  public String outputFor(final InitDeclaratorList list) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<InitDeclarator> _initDeclarator = list.getInitDeclarator();
      for(final InitDeclarator initDeclarator : _initDeclarator) {
        {
          EList<InitDeclarator> _initDeclarator_1 = list.getInitDeclarator();
          int _indexOf = _initDeclarator_1.indexOf(initDeclarator);
          boolean _greaterThan = (_indexOf > 0);
          if (_greaterThan) {
            _builder.append(", ");
          }
        }
        _builder.newLineIfNotEmpty();
        String _outputFor = this.outputFor(initDeclarator);
        _builder.append(_outputFor, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  public String outputFor(final InitDeclarator decl) {
    StringConcatenation _builder = new StringConcatenation();
    Declarator _declarator = decl.getDeclarator();
    String _outputFor = this.outputFor(_declarator);
    _builder.append(_outputFor, "");
    _builder.newLineIfNotEmpty();
    {
      Initializer _initializer = decl.getInitializer();
      boolean _notEquals = (!Objects.equal(_initializer, null));
      if (_notEquals) {
        _builder.append("= ");
        Initializer _initializer_1 = decl.getInitializer();
        String _outputFor_1 = this.outputFor(_initializer_1);
        _builder.append(_outputFor_1, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  public String outputFor(final Declarator decl) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Pointer _pointer = decl.getPointer();
      boolean _notEquals = (!Objects.equal(_pointer, null));
      if (_notEquals) {
        Pointer _pointer_1 = decl.getPointer();
        String _outputFor = this.outputFor(_pointer_1);
        _builder.append(_outputFor, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      EList<GccDeclaratorExtension> _gccDeclExt1 = decl.getGccDeclExt1();
      boolean _notEquals_1 = (!Objects.equal(_gccDeclExt1, null));
      if (_notEquals_1) {
        EList<GccDeclaratorExtension> _gccDeclExt1_1 = decl.getGccDeclExt1();
        String _outputFor_1 = this.outputFor(_gccDeclExt1_1);
        _builder.append(_outputFor_1, "");
      }
    }
    _builder.newLineIfNotEmpty();
    DirectDeclarator _declarator = decl.getDeclarator();
    String _outputFor_2 = this.outputFor(_declarator);
    _builder.append(_outputFor_2, "");
    _builder.newLineIfNotEmpty();
    {
      EList<GccDeclaratorExtension> _gccDeclExt2 = decl.getGccDeclExt2();
      boolean _notEquals_2 = (!Objects.equal(_gccDeclExt2, null));
      if (_notEquals_2) {
        EList<GccDeclaratorExtension> _gccDeclExt2_1 = decl.getGccDeclExt2();
        String _outputFor_3 = this.outputFor(_gccDeclExt2_1);
        _builder.append(_outputFor_3, "");
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputFor(final DirectDeclarator decl) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _ident = decl.getIdent();
      boolean _notEquals = (!Objects.equal(_ident, null));
      if (_notEquals) {
        String _ident_1 = decl.getIdent();
        _builder.append(_ident_1, "");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("(");
        Declarator _declarator = decl.getDeclarator();
        String _outputFor = this.outputFor(_declarator);
        _builder.append(_outputFor, "");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<DeclaratorSuffix> _declaratorSuffix = decl.getDeclaratorSuffix();
      for(final DeclaratorSuffix d : _declaratorSuffix) {
        String _outputFor_1 = this.outputFor(d);
        _builder.append(_outputFor_1, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  public String outputFor(final DeclaratorSuffix obj) {
    StringConcatenation _builder = new StringConcatenation();
    {
      DirectDeclaratorLastSuffix _lastSuffix = obj.getLastSuffix();
      boolean _notEquals = (!Objects.equal(_lastSuffix, null));
      if (_notEquals) {
        DirectDeclaratorLastSuffix _lastSuffix_1 = obj.getLastSuffix();
        String _outputFor = this.outputFor(_lastSuffix_1);
        _builder.append(_outputFor, "");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("[");
        _builder.newLine();
        {
          Expression _expr = obj.getExpr();
          boolean _notEquals_1 = (!Objects.equal(_expr, null));
          if (_notEquals_1) {
            Expression _expr_1 = obj.getExpr();
            String _outputFor_1 = this.outputFor(_expr_1);
            _builder.append(_outputFor_1, "");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("]");
        _builder.newLine();
      }
    }
    return _builder.toString();
  }
  
  public String outputFor(final DirectDeclaratorLastSuffix obj) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    _builder.newLine();
    {
      EList<ParameterTypeList> _parameterTypeList = obj.getParameterTypeList();
      boolean _notEquals = (!Objects.equal(_parameterTypeList, null));
      if (_notEquals) {
        {
          EList<ParameterTypeList> _parameterTypeList_1 = obj.getParameterTypeList();
          for(final ParameterTypeList l : _parameterTypeList_1) {
            String _outputFor = this.outputFor(l);
            _builder.append(_outputFor, "");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      IdentifierList _identifierList = obj.getIdentifierList();
      boolean _notEquals_1 = (!Objects.equal(_identifierList, null));
      if (_notEquals_1) {
        IdentifierList _identifierList_1 = obj.getIdentifierList();
        String _outputFor_1 = this.outputFor(_identifierList_1);
        _builder.append(_outputFor_1, "");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append(")");
    _builder.newLine();
    return _builder.toString();
  }
  
  public String outputFor(final Pointer obj) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<String> _star = obj.getStar();
      for(final String s : _star) {
        _builder.append(s, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      EList<String> _caret = obj.getCaret();
      for(final String c : _caret) {
        _builder.append(c, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      EList<TypeQualifierList> _typeQualifierList = obj.getTypeQualifierList();
      for(final TypeQualifierList t : _typeQualifierList) {
        String _outputFor = this.outputFor(t);
        _builder.append(_outputFor, "");
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputFor(final TypeQualifierList l) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<TypeQualifier> _typeQualifier = l.getTypeQualifier();
      for(final TypeQualifier t : _typeQualifier) {
        String _outputFor = this.outputFor(t);
        _builder.append(_outputFor, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  public String outputFor(final ParameterTypeList obj) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _notEquals = (!Objects.equal(obj, null));
      if (_notEquals) {
        ParameterList _list = obj.getList();
        String _outputFor = this.outputFor(_list);
        _builder.append(_outputFor, "");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      boolean _isEllipsis = obj.isEllipsis();
      if (_isEllipsis) {
        _builder.append(",...");
        _builder.newLine();
      }
    }
    return _builder.toString();
  }
  
  public String outputFor(final ParameterList obj) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<ParameterDeclaration> _parameterDeclaration = obj.getParameterDeclaration();
      for(final ParameterDeclaration p : _parameterDeclaration) {
        {
          EList<ParameterDeclaration> _parameterDeclaration_1 = obj.getParameterDeclaration();
          int _indexOf = _parameterDeclaration_1.indexOf(p);
          boolean _greaterThan = (_indexOf > 0);
          if (_greaterThan) {
            _builder.append(", ");
          }
        }
        _builder.newLineIfNotEmpty();
        String _outputFor = this.outputFor(p);
        _builder.append(_outputFor, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  public String outputFor(final ParameterDeclaration obj) {
    StringConcatenation _builder = new StringConcatenation();
    DeclarationSpecifiers _declSpecifiers = obj.getDeclSpecifiers();
    String _outputFor = this.outputFor(_declSpecifiers);
    _builder.append(_outputFor, "");
    _builder.newLineIfNotEmpty();
    {
      Declarator _declarator = obj.getDeclarator();
      boolean _notEquals = (!Objects.equal(_declarator, null));
      if (_notEquals) {
        Declarator _declarator_1 = obj.getDeclarator();
        String _outputFor_1 = this.outputFor(_declarator_1);
        _builder.append(_outputFor_1, "");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      AbstractDeclarator _abstractDeclator = obj.getAbstractDeclator();
      boolean _notEquals_1 = (!Objects.equal(_abstractDeclator, null));
      if (_notEquals_1) {
        AbstractDeclarator _abstractDeclator_1 = obj.getAbstractDeclator();
        String _outputFor_2 = this.outputFor(_abstractDeclator_1);
        _builder.append(_outputFor_2, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  public String outputFor(final IdentifierList obj) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<MyIdentifier> _ident = obj.getIdent();
      for(final MyIdentifier i : _ident) {
        {
          EList<MyIdentifier> _ident_1 = obj.getIdent();
          int _indexOf = _ident_1.indexOf(i);
          boolean _greaterThan = (_indexOf > 0);
          if (_greaterThan) {
            _builder.append(", ");
          }
        }
        _builder.newLineIfNotEmpty();
        String _ident_2 = i.getIdent();
        _builder.append(_ident_2, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  public String outputFor(final Initializer obj) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Expression _expr = obj.getExpr();
      boolean _notEquals = (!Objects.equal(_expr, null));
      if (_notEquals) {
        Expression _expr_1 = obj.getExpr();
        String _outputFor = this.outputFor(_expr_1);
        _builder.append(_outputFor, "");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("{");
        {
          InitializerList _list = obj.getList();
          boolean _notEquals_1 = (!Objects.equal(_list, null));
          if (_notEquals_1) {
            InitializerList _list_1 = obj.getList();
            String _outputFor_1 = this.outputFor(_list_1);
            _builder.append(_outputFor_1, "");
            _builder.append(" ");
          }
        }
        _builder.append("}");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  public String outputFor(final InitializerList obj) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Init> _init = obj.getInit();
      for(final Init i : _init) {
        {
          EList<Init> _init_1 = obj.getInit();
          int _indexOf = _init_1.indexOf(i);
          boolean _greaterThan = (_indexOf > 0);
          if (_greaterThan) {
            _builder.append(", ");
          }
        }
        _builder.newLineIfNotEmpty();
        String _outputFor = this.outputFor(i);
        _builder.append(_outputFor, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  public String outputFor(final Init obj) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Designation _designation = obj.getDesignation();
      boolean _notEquals = (!Objects.equal(_designation, null));
      if (_notEquals) {
        Designation _designation_1 = obj.getDesignation();
        String _outputFor = this.outputFor(_designation_1);
        _builder.append(_outputFor, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      Initializer _initializer = obj.getInitializer();
      boolean _notEquals_1 = (!Objects.equal(_initializer, null));
      if (_notEquals_1) {
        Initializer _initializer_1 = obj.getInitializer();
        String _outputFor_1 = this.outputFor(_initializer_1);
        _builder.append(_outputFor_1, "");
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputFor(final Designation obj) {
    StringConcatenation _builder = new StringConcatenation();
    DesignatorList _list = obj.getList();
    String _outputFor = this.outputFor(_list);
    _builder.append(_outputFor, "");
    _builder.append("=");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputFor(final DesignatorList obj) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Designator> _designator = obj.getDesignator();
      for(final Designator d : _designator) {
        String _outputFor = this.outputFor(d);
        _builder.append(_outputFor, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  public String outputFor(final Designator obj) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Expression _expr = obj.getExpr();
      boolean _notEquals = (!Objects.equal(_expr, null));
      if (_notEquals) {
        _builder.append("[");
        Expression _expr_1 = obj.getExpr();
        String _outputFor = this.outputFor(_expr_1);
        _builder.append(_outputFor, "");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        {
          Expression _to = obj.getTo();
          boolean _notEquals_1 = (!Objects.equal(_to, null));
          if (_notEquals_1) {
            _builder.append("...");
            Expression _to_1 = obj.getTo();
            String _outputFor_1 = this.outputFor(_to_1);
            _builder.append(_outputFor_1, "\t");
          }
        }
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("]");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      String _ident = obj.getIdent();
      boolean _notEquals_2 = (!Objects.equal(_ident, null));
      if (_notEquals_2) {
        _builder.append(".");
        String _ident_1 = obj.getIdent();
        _builder.append(_ident_1, "");
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputFor(final GccAsmBasic obj) {
    StringConcatenation _builder = new StringConcatenation();
    String _asm = obj.getAsm();
    _builder.append(_asm, "");
    _builder.append("(");
    EList<String> _string = obj.getString();
    String _outputForString = this.outputForString(_string);
    _builder.append(_outputForString, "");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputFor(final EList<GccDeclaratorExtension> obj) {
    final StringBuffer result = new StringBuffer("");
    for (int i = 0; (i < obj.size()); i++) {
      {
        final GccDeclaratorExtension ext = obj.get(i);
        String _outputFor = this.outputFor(ext);
        result.append(_outputFor);
      }
    }
    return result.toString();
  }
  
  public String outputFor(final GccDeclaratorExtension obj) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _asm = obj.getAsm();
      boolean _notEquals = (!Objects.equal(_asm, null));
      if (_notEquals) {
        String _asm_1 = obj.getAsm();
        _builder.append(_asm_1, "");
        _builder.append("(");
        EList<String> _string = obj.getString();
        String _outputFor = this.outputFor(_string, false);
        _builder.append(_outputFor, "");
        _builder.append(")");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      GccAttributeSpecifier _gccAttributeSpecifier = obj.getGccAttributeSpecifier();
      boolean _notEquals_1 = (!Objects.equal(_gccAttributeSpecifier, null));
      if (_notEquals_1) {
        GccAttributeSpecifier _gccAttributeSpecifier_1 = obj.getGccAttributeSpecifier();
        String _outputFor_1 = this.outputFor(_gccAttributeSpecifier_1);
        _builder.append(_outputFor_1, "");
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputFor(final EList<String> obj, final boolean addCommas) {
    final StringBuffer result = new StringBuffer("");
    boolean isFirst = true;
    for (int i = 0; (i < obj.size()); i++) {
      {
        boolean _and = false;
        if (!(!isFirst)) {
          _and = false;
        } else {
          _and = addCommas;
        }
        if (_and) {
          result.append(",");
        }
        final String str = obj.get(i);
        result.append(str);
        isFirst = false;
      }
    }
    return result.toString();
  }
  
  public String outputFor(final GccAttributeSpecifier obj) {
    StringConcatenation _builder = new StringConcatenation();
    String _attribute = obj.getAttribute();
    _builder.append(_attribute, "");
    _builder.append("((");
    {
      GccAttributeList _list = obj.getList();
      boolean _notEquals = (!Objects.equal(_list, null));
      if (_notEquals) {
        GccAttributeList _list_1 = obj.getList();
        String _outputFor = this.outputFor(_list_1);
        _builder.append(_outputFor, "");
      }
    }
    _builder.append("))");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputFor(final GccAttributeList obj) {
    final StringBuffer result = new StringBuffer("");
    boolean isFirst = true;
    for (int i = 0; (i < obj.getGccAttribute().size()); i++) {
      {
        if ((!isFirst)) {
          result.append(",");
        }
        EList<GccAttribute> _gccAttribute = obj.getGccAttribute();
        final GccAttribute attr = _gccAttribute.get(i);
        String _outputFor = this.outputFor(attr);
        result.append(_outputFor);
        isFirst = false;
      }
    }
    return result.toString();
  }
  
  public String outputFor(final GccAttribute attr) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _ident = attr.getIdent();
      boolean _notEquals = (!Objects.equal(_ident, null));
      if (_notEquals) {
        String _ident_1 = attr.getIdent();
        _builder.append(_ident_1, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      String _const = attr.getConst();
      boolean _notEquals_1 = (!Objects.equal(_const, null));
      if (_notEquals_1) {
        String _const_1 = attr.getConst();
        _builder.append(_const_1, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      String _keyword = attr.getKeyword();
      boolean _notEquals_2 = (!Objects.equal(_keyword, null));
      if (_notEquals_2) {
        String _keyword_1 = attr.getKeyword();
        _builder.append(_keyword_1, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      ArgumentExpressionList _list = attr.getList();
      boolean _notEquals_3 = (!Objects.equal(_list, null));
      if (_notEquals_3) {
        _builder.append("(");
        ArgumentExpressionList _list_1 = attr.getList();
        String _outputFor = this.outputFor(_list_1);
        _builder.append(_outputFor, "");
        _builder.append(")");
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputFor(final Statement obj) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Statement _stmt = obj.getStmt();
      boolean _notEquals = (!Objects.equal(_stmt, null));
      if (_notEquals) {
        Statement _stmt_1 = obj.getStmt();
        String _outputFor = this.outputFor(_stmt_1);
        _builder.append(_outputFor, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      if ((obj instanceof LabeledStatement)) {
        String _outputForLabeledStatement = this.outputForLabeledStatement(((LabeledStatement)obj));
        _builder.append(_outputForLabeledStatement, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      if ((obj instanceof CompoundStatement)) {
        String _outputForCompoundStatement = this.outputForCompoundStatement(((CompoundStatement)obj));
        _builder.append(_outputForCompoundStatement, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      if ((obj instanceof BodyStatement)) {
        String _outputForBodyStatement = this.outputForBodyStatement(((BodyStatement)obj));
        _builder.append(_outputForBodyStatement, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      if ((obj instanceof ExpressionStatement)) {
        String _outputForExpressionStatement = this.outputForExpressionStatement(((ExpressionStatement)obj));
        _builder.append(_outputForExpressionStatement, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      if ((obj instanceof SelectionStatement)) {
        String _outputForSelectionStatement = this.outputForSelectionStatement(((SelectionStatement)obj));
        _builder.append(_outputForSelectionStatement, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      if ((obj instanceof IterationStatement)) {
        String _outputForIterationStatement = this.outputForIterationStatement(((IterationStatement)obj));
        _builder.append(_outputForIterationStatement, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      if ((obj instanceof JumpStatement)) {
        String _outputForJumpStatement = this.outputForJumpStatement(((JumpStatement)obj));
        _builder.append(_outputForJumpStatement, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      if ((obj instanceof AsmStatement)) {
        String _outputForAsmStatement = this.outputForAsmStatement(((AsmStatement)obj));
        _builder.append(_outputForAsmStatement, "");
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputForLabeledStatement(final LabeledStatement obj) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _ident = obj.getIdent();
      boolean _notEquals = (!Objects.equal(_ident, null));
      if (_notEquals) {
        String _ident_1 = obj.getIdent();
        _builder.append(_ident_1, "");
        _builder.append(":");
        Statement _lStmt = obj.getLStmt();
        String _outputFor = this.outputFor(_lStmt);
        _builder.append(_outputFor, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      String _case = obj.getCase();
      boolean _notEquals_1 = (!Objects.equal(_case, null));
      if (_notEquals_1) {
        _builder.append("case ");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        {
          Expression _expr = obj.getExpr();
          boolean _notEquals_2 = (!Objects.equal(_expr, null));
          if (_notEquals_2) {
            Expression _expr_1 = obj.getExpr();
            String _outputFor_1 = this.outputFor(_expr_1);
            _builder.append(_outputFor_1, "\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            {
              Expression _higher = obj.getHigher();
              boolean _notEquals_3 = (!Objects.equal(_higher, null));
              if (_notEquals_3) {
                _builder.append("...");
                Expression _higher_1 = obj.getHigher();
                String _outputFor_2 = this.outputFor(_higher_1);
                _builder.append(_outputFor_2, "\t\t");
              }
            }
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append(":");
        Statement _lStmt_1 = obj.getLStmt();
        String _outputFor_3 = this.outputFor(_lStmt_1);
        _builder.append(_outputFor_3, "\t");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      boolean _isMydefault = obj.isMydefault();
      if (_isMydefault) {
        _builder.append("default: ");
        Statement _lStmt_2 = obj.getLStmt();
        String _outputFor_4 = this.outputFor(_lStmt_2);
        _builder.append(_outputFor_4, "");
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputForCompoundStatement(final CompoundStatement obj) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    Statement _body = obj.getBody();
    String _outputFor = this.outputFor(_body);
    _builder.append(_outputFor, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  public String outputForBodyStatement(final BodyStatement obj) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<BlockList> _blockList = obj.getBlockList();
      for(final BlockList l : _blockList) {
        String _outputFor = this.outputFor(l);
        _builder.append(_outputFor, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  public String outputFor(final BlockList obj) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Declaration> _declaration = obj.getDeclaration();
      for(final Declaration d : _declaration) {
        String _outputFor = this.outputFor(d);
        _builder.append(_outputFor, "");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<Statement> _statement = obj.getStatement();
      for(final Statement s : _statement) {
        String _outputFor_1 = this.outputFor(s);
        _builder.append(_outputFor_1, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  public String outputForExpressionStatement(final ExpressionStatement obj) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Expression _expression = obj.getExpression();
      boolean _notEquals = (!Objects.equal(_expression, null));
      if (_notEquals) {
        Expression _expression_1 = obj.getExpression();
        String _outputFor = this.outputFor(_expression_1);
        _builder.append(_outputFor, "");
      }
    }
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputForSelectionStatement(final SelectionStatement obj) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _if = obj.getIf();
      boolean _notEquals = (!Objects.equal(_if, null));
      if (_notEquals) {
        _builder.append("if (");
        Expression _expr = obj.getExpr();
        String _outputFor = this.outputFor(_expr);
        _builder.append(_outputFor, "");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        Statement _ifStatement = obj.getIfStatement();
        String _outputFor_1 = this.outputFor(_ifStatement);
        _builder.append(_outputFor_1, "");
        _builder.newLineIfNotEmpty();
        {
          String _else = obj.getElse();
          boolean _notEquals_1 = (!Objects.equal(_else, null));
          if (_notEquals_1) {
            _builder.append("else ");
            Statement _elseStatement = obj.getElseStatement();
            String _outputFor_2 = this.outputFor(_elseStatement);
            _builder.append(_outputFor_2, "");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      String _switch = obj.getSwitch();
      boolean _notEquals_2 = (!Objects.equal(_switch, null));
      if (_notEquals_2) {
        _builder.append("switch (");
        Expression _expr_1 = obj.getExpr();
        String _outputFor_3 = this.outputFor(_expr_1);
        _builder.append(_outputFor_3, "");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        Statement _switchStatement = obj.getSwitchStatement();
        String _outputFor_4 = this.outputFor(_switchStatement);
        _builder.append(_outputFor_4, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  public String outputForIterationStatement(final IterationStatement obj) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _while = obj.getWhile();
      boolean _notEquals = (!Objects.equal(_while, null));
      if (_notEquals) {
        _builder.append("while (");
        Expression _expr = obj.getExpr();
        String _outputFor = this.outputFor(_expr);
        _builder.append(_outputFor, "");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        Statement _statement = obj.getStatement();
        String _outputFor_1 = this.outputFor(_statement);
        _builder.append(_outputFor_1, "");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _do = obj.getDo();
      boolean _notEquals_1 = (!Objects.equal(_do, null));
      if (_notEquals_1) {
        _builder.append("do");
        _builder.newLine();
        _builder.append("\t");
        Statement _statement_1 = obj.getStatement();
        String _outputFor_2 = this.outputFor(_statement_1);
        _builder.append(_outputFor_2, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("while (");
        Expression _expr_1 = obj.getExpr();
        String _outputFor_3 = this.outputFor(_expr_1);
        _builder.append(_outputFor_3, "");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _for = obj.getFor();
      boolean _notEquals_2 = (!Objects.equal(_for, null));
      if (_notEquals_2) {
        _builder.append("for (");
        _builder.newLine();
        {
          Expression _initExpr = obj.getInitExpr();
          boolean _notEquals_3 = (!Objects.equal(_initExpr, null));
          if (_notEquals_3) {
            _builder.append("\t");
            Expression _initExpr_1 = obj.getInitExpr();
            String _outputFor_4 = this.outputFor(_initExpr_1);
            _builder.append(_outputFor_4, "\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append(";");
            _builder.newLine();
          }
        }
        {
          Declaration _initDecl = obj.getInitDecl();
          boolean _notEquals_4 = (!Objects.equal(_initDecl, null));
          if (_notEquals_4) {
            _builder.append("\t");
            Declaration _initDecl_1 = obj.getInitDecl();
            String _outputFor_5 = this.outputFor(_initDecl_1);
            _builder.append(_outputFor_5, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          Expression _expr_2 = obj.getExpr();
          boolean _notEquals_5 = (!Objects.equal(_expr_2, null));
          if (_notEquals_5) {
            _builder.append("\t");
            Expression _expr_3 = obj.getExpr();
            String _outputFor_6 = this.outputFor(_expr_3);
            _builder.append(_outputFor_6, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append(";");
        _builder.newLine();
        {
          Expression _incExpr = obj.getIncExpr();
          boolean _notEquals_6 = (!Objects.equal(_incExpr, null));
          if (_notEquals_6) {
            _builder.append("\t");
            Expression _incExpr_1 = obj.getIncExpr();
            String _outputFor_7 = this.outputFor(_incExpr_1);
            _builder.append(_outputFor_7, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append(")");
        _builder.newLine();
        Statement _statement_2 = obj.getStatement();
        String _outputFor_8 = this.outputFor(_statement_2);
        _builder.append(_outputFor_8, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  public String outputForJumpStatement(final JumpStatement obj) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _continue = obj.getContinue();
      boolean _notEquals = (!Objects.equal(_continue, null));
      if (_notEquals) {
        _builder.append("continue;");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      String _break = obj.getBreak();
      boolean _notEquals_1 = (!Objects.equal(_break, null));
      if (_notEquals_1) {
        _builder.append("break;");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      String _return = obj.getReturn();
      boolean _notEquals_2 = (!Objects.equal(_return, null));
      if (_notEquals_2) {
        _builder.append("return ");
        {
          Expression _expr = obj.getExpr();
          boolean _notEquals_3 = (!Objects.equal(_expr, null));
          if (_notEquals_3) {
            Expression _expr_1 = obj.getExpr();
            String _outputFor = this.outputFor(_expr_1);
            _builder.append(_outputFor, "");
          }
        }
        _builder.append(" ;");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      String _goto = obj.getGoto();
      boolean _notEquals_4 = (!Objects.equal(_goto, null));
      if (_notEquals_4) {
        _builder.append("goto ");
        Expression _expr_2 = obj.getExpr();
        String _outputFor_1 = this.outputFor(_expr_2);
        _builder.append(_outputFor_1, "");
        _builder.append(";");
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputForAsmStatement(final AsmStatement obj) {
    StringConcatenation _builder = new StringConcatenation();
    String _asm = obj.getAsm();
    _builder.append(_asm, "");
    _builder.append(" ");
    _builder.newLineIfNotEmpty();
    {
      String _goto = obj.getGoto();
      boolean _notEquals = (!Objects.equal(_goto, null));
      if (_notEquals) {
        String _goto_1 = obj.getGoto();
        _builder.append(_goto_1, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      String _volatile = obj.getVolatile();
      boolean _notEquals_1 = (!Objects.equal(_volatile, null));
      if (_notEquals_1) {
        String _volatile_1 = obj.getVolatile();
        _builder.append(_volatile_1, "");
        _builder.append(" ");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("(");
    _builder.newLine();
    {
      AsmLine _asmLine1 = obj.getAsmLine1();
      boolean _notEquals_2 = (!Objects.equal(_asmLine1, null));
      if (_notEquals_2) {
        _builder.append("\t");
        AsmLine _asmLine1_1 = obj.getAsmLine1();
        String _outputFor = this.outputFor(_asmLine1_1);
        _builder.append(_outputFor, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<AsmLineWithColon> _asmLines = obj.getAsmLines();
      int _size = _asmLines.size();
      ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, _size, true);
      for(final Integer i : _doubleDotLessThan) {
        _builder.append("\t");
        EList<AsmLineWithColon> _asmLines_1 = obj.getAsmLines();
        AsmLineWithColon _get = _asmLines_1.get((i).intValue());
        String _outputFor_1 = this.outputFor(_get);
        _builder.append(_outputFor_1, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    {
      boolean _isLastComma = obj.isLastComma();
      if (_isLastComma) {
        _builder.append(",");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append(");");
    _builder.newLine();
    return _builder.toString();
  }
  
  public String outputFor(final AsmLine obj) {
    StringConcatenation _builder = new StringConcatenation();
    {
      AsmSymbolicName _sym = obj.getSym();
      boolean _notEquals = (!Objects.equal(_sym, null));
      if (_notEquals) {
        AsmSymbolicName _sym_1 = obj.getSym();
        String _outputFor = this.outputFor(_sym_1);
        _builder.append(_outputFor, "");
      }
    }
    _builder.newLineIfNotEmpty();
    Expression _expr = obj.getExpr();
    String _outputFor_1 = this.outputFor(_expr);
    _builder.append(_outputFor_1, "");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputFor(final AsmSymbolicName obj) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("[");
    String _ident = obj.getIdent();
    _builder.append(_ident, "");
    _builder.append("]");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputFor(final AsmLineWithColon obj) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(": ");
    {
      AsmLineWithoutColon _asmLine = obj.getAsmLine();
      boolean _notEquals = (!Objects.equal(_asmLine, null));
      if (_notEquals) {
        AsmLineWithoutColon _asmLine_1 = obj.getAsmLine();
        String _outputFor = this.outputFor(_asmLine_1);
        _builder.append(_outputFor, "");
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputFor(final AsmLineWithoutColon obj) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<AsmLine> _asmLines = obj.getAsmLines();
      int _size = _asmLines.size();
      ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, _size, true);
      for(final Integer i : _doubleDotLessThan) {
        {
          if (((i).intValue() > 0)) {
            _builder.append(",");
          }
        }
        _builder.newLineIfNotEmpty();
        EList<AsmLine> _asmLines_1 = obj.getAsmLines();
        AsmLine _get = _asmLines_1.get((i).intValue());
        String _outputFor = this.outputFor(_get);
        _builder.append(_outputFor, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  public String outputFor(final Expression obj) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((obj instanceof ConstantExpression)) {
        String _outputForConstantExpression = this.outputForConstantExpression(((ConstantExpression) obj));
        _builder.append(_outputForConstantExpression, "");
      } else {
        _builder.newLineIfNotEmpty();
        {
          if ((obj instanceof AssignmentExpression)) {
            String _outputForAssignmentExpression = this.outputForAssignmentExpression(((AssignmentExpression) obj));
            _builder.append(_outputForAssignmentExpression, "");
          } else {
            _builder.newLineIfNotEmpty();
            {
              if ((obj instanceof ConditionalExpression)) {
                String _outputForConditionalExpression = this.outputForConditionalExpression(((ConditionalExpression) obj));
                _builder.append(_outputForConditionalExpression, "");
              } else {
                _builder.newLineIfNotEmpty();
                {
                  if ((obj instanceof LogicalOrExpression)) {
                    String _outputForLogicalOrExpression = this.outputForLogicalOrExpression(((LogicalOrExpression) obj));
                    _builder.append(_outputForLogicalOrExpression, "");
                  } else {
                    _builder.newLineIfNotEmpty();
                    {
                      if ((obj instanceof LogicalAndExpression)) {
                        String _outputForLogicalAndExpression = this.outputForLogicalAndExpression(((LogicalAndExpression) obj));
                        _builder.append(_outputForLogicalAndExpression, "");
                      } else {
                        _builder.newLineIfNotEmpty();
                        {
                          if ((obj instanceof InclusiveOrExpression)) {
                            String _outputForInclusiveOrExpression = this.outputForInclusiveOrExpression(((InclusiveOrExpression) obj));
                            _builder.append(_outputForInclusiveOrExpression, "");
                          } else {
                            _builder.newLineIfNotEmpty();
                            {
                              if ((obj instanceof ExclusiveOrExpression)) {
                                String _outputForExclusiveOrExpression = this.outputForExclusiveOrExpression(((ExclusiveOrExpression) obj));
                                _builder.append(_outputForExclusiveOrExpression, "");
                              } else {
                                _builder.newLineIfNotEmpty();
                                {
                                  if ((obj instanceof AndExpression)) {
                                    String _outputForAndExpression = this.outputForAndExpression(((AndExpression) obj));
                                    _builder.append(_outputForAndExpression, "");
                                  } else {
                                    _builder.newLineIfNotEmpty();
                                    {
                                      if ((obj instanceof EqualityExpression)) {
                                        String _outputForEqualityExpression = this.outputForEqualityExpression(((EqualityExpression) obj));
                                        _builder.append(_outputForEqualityExpression, "");
                                      } else {
                                        _builder.newLineIfNotEmpty();
                                        {
                                          if ((obj instanceof RelationalExpression)) {
                                            String _outputForRelationalExpression = this.outputForRelationalExpression(((RelationalExpression) obj));
                                            _builder.append(_outputForRelationalExpression, "");
                                          } else {
                                            _builder.newLineIfNotEmpty();
                                            {
                                              if ((obj instanceof ShiftExpression)) {
                                                String _outputForShiftExpression = this.outputForShiftExpression(((ShiftExpression) obj));
                                                _builder.append(_outputForShiftExpression, "");
                                              } else {
                                                _builder.newLineIfNotEmpty();
                                                {
                                                  if ((obj instanceof AdditiveExpression)) {
                                                    String _outputForAdditiveExpression = this.outputForAdditiveExpression(((AdditiveExpression) obj));
                                                    _builder.append(_outputForAdditiveExpression, "");
                                                  } else {
                                                    _builder.newLineIfNotEmpty();
                                                    {
                                                      if ((obj instanceof MultiplicativeExpression)) {
                                                        String _outputForMultiplicativeExpression = this.outputForMultiplicativeExpression(((MultiplicativeExpression) obj));
                                                        _builder.append(_outputForMultiplicativeExpression, "");
                                                      } else {
                                                        _builder.newLineIfNotEmpty();
                                                        {
                                                          if ((obj instanceof CastExpression)) {
                                                            String _outputForCastExpression = this.outputForCastExpression(((CastExpression) obj));
                                                            _builder.append(_outputForCastExpression, "");
                                                          } else {
                                                            _builder.newLineIfNotEmpty();
                                                            {
                                                              if ((obj instanceof UnaryExpression)) {
                                                                String _outputForUnaryExpression = this.outputForUnaryExpression(((UnaryExpression) obj));
                                                                _builder.append(_outputForUnaryExpression, "");
                                                              } else {
                                                                _builder.newLineIfNotEmpty();
                                                                {
                                                                  if ((obj instanceof PostfixExpression)) {
                                                                    String _outputForPostfixExpression = this.outputForPostfixExpression(((PostfixExpression) obj));
                                                                    _builder.append(_outputForPostfixExpression, "");
                                                                  } else {
                                                                    _builder.newLineIfNotEmpty();
                                                                    {
                                                                      if ((obj instanceof PrimaryExpression)) {
                                                                        String _outputForPrimaryExpression = this.outputForPrimaryExpression(((PrimaryExpression) obj));
                                                                        _builder.append(_outputForPrimaryExpression, "");
                                                                      } else {
                                                                        _builder.newLineIfNotEmpty();
                                                                        String _outputForRoot = this.outputForRoot(obj);
                                                                        _builder.append(_outputForRoot, "");
                                                                        _builder.newLineIfNotEmpty();
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder.toString();
  }
  
  public String outputForRoot(final Expression obj) {
    StringConcatenation _builder = new StringConcatenation();
    Expression _left = obj.getLeft();
    String _outputFor = this.outputFor(_left);
    _builder.append(_outputFor, "");
    {
      Expression _right = obj.getRight();
      boolean _notEquals = (!Objects.equal(_right, null));
      if (_notEquals) {
        _builder.append(",");
        Expression _right_1 = obj.getRight();
        String _outputFor_1 = this.outputFor(_right_1);
        _builder.append(_outputFor_1, "");
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputForConstantExpression(final ConstantExpression obj) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _restrict = obj.getRestrict();
      boolean _notEquals = (!Objects.equal(_restrict, null));
      if (_notEquals) {
        String _restrict_1 = obj.getRestrict();
        _builder.append(_restrict_1, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      Expression _expr = obj.getExpr();
      boolean _notEquals_1 = (!Objects.equal(_expr, null));
      if (_notEquals_1) {
        Expression _expr_1 = obj.getExpr();
        String _outputFor = this.outputFor(_expr_1);
        _builder.append(_outputFor, "");
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputForAssignmentExpression(final AssignmentExpression obj) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _op = obj.getOp();
      boolean _notEquals = (!Objects.equal(_op, null));
      if (_notEquals) {
        Expression _expr = obj.getExpr();
        String _outputFor = this.outputFor(_expr);
        _builder.append(_outputFor, "");
        _builder.newLineIfNotEmpty();
        String _op_1 = obj.getOp();
        _builder.append(_op_1, "");
        _builder.newLineIfNotEmpty();
        Expression _assignmentExpr = obj.getAssignmentExpr();
        String _outputFor_1 = this.outputFor(_assignmentExpr);
        _builder.append(_outputFor_1, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  public String outputForConditionalExpression(final ConditionalExpression obj) {
    StringConcatenation _builder = new StringConcatenation();
    Expression _left = obj.getLeft();
    String _outputFor = this.outputFor(_left);
    _builder.append(_outputFor, "");
    _builder.newLineIfNotEmpty();
    _builder.append("?");
    {
      Expression _qExpr = obj.getQExpr();
      boolean _notEquals = (!Objects.equal(_qExpr, null));
      if (_notEquals) {
        Expression _qExpr_1 = obj.getQExpr();
        String _outputFor_1 = this.outputFor(_qExpr_1);
        _builder.append(_outputFor_1, "");
      }
    }
    _builder.append(":");
    _builder.newLineIfNotEmpty();
    Expression _cExpr = obj.getCExpr();
    String _outputFor_2 = this.outputFor(_cExpr);
    _builder.append(_outputFor_2, "");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputForLogicalOrExpression(final LogicalOrExpression obj) {
    StringConcatenation _builder = new StringConcatenation();
    Expression _left = obj.getLeft();
    String _outputFor = this.outputFor(_left);
    _builder.append(_outputFor, "");
    _builder.newLineIfNotEmpty();
    _builder.append("||");
    _builder.newLine();
    Expression _right = obj.getRight();
    String _outputFor_1 = this.outputFor(_right);
    _builder.append(_outputFor_1, "");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputForLogicalAndExpression(final LogicalAndExpression obj) {
    StringConcatenation _builder = new StringConcatenation();
    Expression _left = obj.getLeft();
    String _outputFor = this.outputFor(_left);
    _builder.append(_outputFor, "");
    _builder.newLineIfNotEmpty();
    _builder.append("&&");
    _builder.newLine();
    Expression _right = obj.getRight();
    String _outputFor_1 = this.outputFor(_right);
    _builder.append(_outputFor_1, "");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputForInclusiveOrExpression(final InclusiveOrExpression obj) {
    StringConcatenation _builder = new StringConcatenation();
    Expression _left = obj.getLeft();
    String _outputFor = this.outputFor(_left);
    _builder.append(_outputFor, "");
    _builder.newLineIfNotEmpty();
    _builder.append("|");
    _builder.newLine();
    Expression _right = obj.getRight();
    String _outputFor_1 = this.outputFor(_right);
    _builder.append(_outputFor_1, "");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputForExclusiveOrExpression(final ExclusiveOrExpression obj) {
    StringConcatenation _builder = new StringConcatenation();
    Expression _left = obj.getLeft();
    String _outputFor = this.outputFor(_left);
    _builder.append(_outputFor, "");
    _builder.newLineIfNotEmpty();
    _builder.append("^");
    _builder.newLine();
    Expression _right = obj.getRight();
    String _outputFor_1 = this.outputFor(_right);
    _builder.append(_outputFor_1, "");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputForAndExpression(final AndExpression obj) {
    StringConcatenation _builder = new StringConcatenation();
    Expression _left = obj.getLeft();
    String _outputFor = this.outputFor(_left);
    _builder.append(_outputFor, "");
    _builder.newLineIfNotEmpty();
    _builder.append("&");
    _builder.newLine();
    Expression _right = obj.getRight();
    String _outputFor_1 = this.outputFor(_right);
    _builder.append(_outputFor_1, "");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputForEqualityExpression(final EqualityExpression obj) {
    StringConcatenation _builder = new StringConcatenation();
    Expression _left = obj.getLeft();
    String _outputFor = this.outputFor(_left);
    _builder.append(_outputFor, "");
    _builder.newLineIfNotEmpty();
    String _op = obj.getOp();
    _builder.append(_op, "");
    _builder.newLineIfNotEmpty();
    Expression _right = obj.getRight();
    String _outputFor_1 = this.outputFor(_right);
    _builder.append(_outputFor_1, "");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputForRelationalExpression(final RelationalExpression obj) {
    StringConcatenation _builder = new StringConcatenation();
    Expression _left = obj.getLeft();
    String _outputFor = this.outputFor(_left);
    _builder.append(_outputFor, "");
    _builder.newLineIfNotEmpty();
    String _op = obj.getOp();
    _builder.append(_op, "");
    _builder.newLineIfNotEmpty();
    Expression _right = obj.getRight();
    String _outputFor_1 = this.outputFor(_right);
    _builder.append(_outputFor_1, "");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputForShiftExpression(final ShiftExpression obj) {
    StringConcatenation _builder = new StringConcatenation();
    Expression _left = obj.getLeft();
    String _outputFor = this.outputFor(_left);
    _builder.append(_outputFor, "");
    _builder.newLineIfNotEmpty();
    String _op = obj.getOp();
    _builder.append(_op, "");
    _builder.newLineIfNotEmpty();
    Expression _right = obj.getRight();
    String _outputFor_1 = this.outputFor(_right);
    _builder.append(_outputFor_1, "");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputForAdditiveExpression(final AdditiveExpression obj) {
    StringConcatenation _builder = new StringConcatenation();
    Expression _left = obj.getLeft();
    String _outputFor = this.outputFor(_left);
    _builder.append(_outputFor, "");
    _builder.newLineIfNotEmpty();
    String _op = obj.getOp();
    _builder.append(_op, "");
    _builder.newLineIfNotEmpty();
    Expression _right = obj.getRight();
    String _outputFor_1 = this.outputFor(_right);
    _builder.append(_outputFor_1, "");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputForMultiplicativeExpression(final MultiplicativeExpression obj) {
    StringConcatenation _builder = new StringConcatenation();
    Expression _left = obj.getLeft();
    String _outputFor = this.outputFor(_left);
    _builder.append(_outputFor, "");
    _builder.newLineIfNotEmpty();
    String _op = obj.getOp();
    _builder.append(_op, "");
    _builder.newLineIfNotEmpty();
    Expression _right = obj.getRight();
    String _outputFor_1 = this.outputFor(_right);
    _builder.append(_outputFor_1, "");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputForCastExpression(final CastExpression obj) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _isExtension = obj.isExtension();
      if (_isExtension) {
        _builder.append("__extension__");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("(");
    TypeName _type = obj.getType();
    String _outputFor = this.outputFor(_type);
    _builder.append(_outputFor, "");
    _builder.append(")");
    _builder.newLineIfNotEmpty();
    Expression _expr = obj.getExpr();
    String _outputFor_1 = this.outputFor(_expr);
    _builder.append(_outputFor_1, "");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputFor(final TypeName obj) {
    StringConcatenation _builder = new StringConcatenation();
    SpecifierQualifierList _list = obj.getList();
    String _outputFor = this.outputFor(_list);
    _builder.append(_outputFor, "");
    _builder.newLineIfNotEmpty();
    {
      AbstractDeclarator _abstractDeclarator = obj.getAbstractDeclarator();
      boolean _notEquals = (!Objects.equal(_abstractDeclarator, null));
      if (_notEquals) {
        AbstractDeclarator _abstractDeclarator_1 = obj.getAbstractDeclarator();
        String _outputFor_1 = this.outputFor(_abstractDeclarator_1);
        _builder.append(_outputFor_1, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  public String outputFor(final SpecifierQualifierList obj) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<TypeQualifier> _typeQualifier = obj.getTypeQualifier();
      for(final TypeQualifier x : _typeQualifier) {
        String _outputFor = this.outputFor(((TypeQualifier) x));
        _builder.append(_outputFor, "");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<TypeSpecifier> _typeSpecifier = obj.getTypeSpecifier();
      for(final TypeSpecifier x_1 : _typeSpecifier) {
        String _outputFor_1 = this.outputFor(((TypeSpecifier) x_1));
        _builder.append(_outputFor_1, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  public String outputFor(final AbstractDeclarator obj) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Pointer _pointer = obj.getPointer();
      boolean _notEquals = (!Objects.equal(_pointer, null));
      if (_notEquals) {
        Pointer _pointer_1 = obj.getPointer();
        String _outputFor = this.outputFor(_pointer_1);
        _builder.append(_outputFor, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      DirectAbstractDeclarator _directAbstractDeclarator = obj.getDirectAbstractDeclarator();
      boolean _notEquals_1 = (!Objects.equal(_directAbstractDeclarator, null));
      if (_notEquals_1) {
        DirectAbstractDeclarator _directAbstractDeclarator_1 = obj.getDirectAbstractDeclarator();
        String _outputFor_1 = this.outputFor(_directAbstractDeclarator_1);
        _builder.append(_outputFor_1, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      EList<GccDeclaratorExtension> _gccDeclExtAbstract = obj.getGccDeclExtAbstract();
      boolean _notEquals_2 = (!Objects.equal(_gccDeclExtAbstract, null));
      if (_notEquals_2) {
        EList<GccDeclaratorExtension> _gccDeclExtAbstract_1 = obj.getGccDeclExtAbstract();
        String _outputFor_2 = this.outputFor(_gccDeclExtAbstract_1);
        _builder.append(_outputFor_2, "");
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputFor(final DirectAbstractDeclarator obj) {
    StringConcatenation _builder = new StringConcatenation();
    {
      AbstractDeclarator _declarator = obj.getDeclarator();
      boolean _notEquals = (!Objects.equal(_declarator, null));
      if (_notEquals) {
        _builder.append("(");
        AbstractDeclarator _declarator_1 = obj.getDeclarator();
        String _outputFor = this.outputFor(_declarator_1);
        _builder.append(_outputFor, "");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        {
          EList<GccDeclaratorExtension> _gccDeclExt = obj.getGccDeclExt();
          boolean _notEquals_1 = (!Objects.equal(_gccDeclExt, null));
          if (_notEquals_1) {
            EList<GccDeclaratorExtension> _gccDeclExt_1 = obj.getGccDeclExt();
            String _outputFor_1 = this.outputFor(_gccDeclExt_1);
            _builder.append(_outputFor_1, "\t");
          }
        }
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<AbstractDeclaratorSuffix> _abstractDeclaratorSuffix = obj.getAbstractDeclaratorSuffix();
      boolean _notEquals_2 = (!Objects.equal(_abstractDeclaratorSuffix, null));
      if (_notEquals_2) {
        EList<AbstractDeclaratorSuffix> _abstractDeclaratorSuffix_1 = obj.getAbstractDeclaratorSuffix();
        String _outputForAbstractDeclSuff = this.outputForAbstractDeclSuff(_abstractDeclaratorSuffix_1);
        _builder.append(_outputForAbstractDeclSuff, "");
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputForAbstractDeclSuff(final EList<AbstractDeclaratorSuffix> obj) {
    final StringBuffer result = new StringBuffer("");
    for (int i = 0; (i < obj.size()); i++) {
      AbstractDeclaratorSuffix _get = obj.get(i);
      String _outputFor = this.outputFor(_get);
      result.append(_outputFor);
    }
    return result.toString();
  }
  
  public String outputFor(final AbstractDeclaratorSuffix obj) {
    StringConcatenation _builder = new StringConcatenation();
    {
      ParameterTypeList _parameterTypeList = obj.getParameterTypeList();
      boolean _notEquals = (!Objects.equal(_parameterTypeList, null));
      if (_notEquals) {
        _builder.append("(");
        ParameterTypeList _parameterTypeList_1 = obj.getParameterTypeList();
        String _outputFor = this.outputFor(_parameterTypeList_1);
        _builder.append(_outputFor, "");
        _builder.append(")");
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputForUnaryExpression(final UnaryExpression obj) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _plusplus = obj.getPlusplus();
      boolean _notEquals = (!Objects.equal(_plusplus, null));
      if (_notEquals) {
        String _plusplus_1 = obj.getPlusplus();
        _builder.append(_plusplus_1, "");
        Expression _expr = obj.getExpr();
        String _outputFor = this.outputFor(_expr);
        _builder.append(_outputFor, "");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _minusminus = obj.getMinusminus();
      boolean _notEquals_1 = (!Objects.equal(_minusminus, null));
      if (_notEquals_1) {
        String _minusminus_1 = obj.getMinusminus();
        _builder.append(_minusminus_1, "");
        Expression _expr_1 = obj.getExpr();
        String _outputFor_1 = this.outputFor(_expr_1);
        _builder.append(_outputFor_1, "");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _sizeOf = obj.getSizeOf();
      boolean _notEquals_2 = (!Objects.equal(_sizeOf, null));
      if (_notEquals_2) {
        String _sizeOf_1 = obj.getSizeOf();
        _builder.append(_sizeOf_1, "");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        {
          TypeName _typeName = obj.getTypeName();
          boolean _notEquals_3 = (!Objects.equal(_typeName, null));
          if (_notEquals_3) {
            _builder.append("(");
            TypeName _typeName_1 = obj.getTypeName();
            String _outputFor_2 = this.outputFor(_typeName_1);
            _builder.append(_outputFor_2, "\t");
            _builder.append(")");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
          } else {
            Expression _expr_2 = obj.getExpr();
            String _outputFor_3 = this.outputFor(_expr_2);
            _builder.append(_outputFor_3, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      String _op = obj.getOp();
      boolean _notEquals_4 = (!Objects.equal(_op, null));
      if (_notEquals_4) {
        String _op_1 = obj.getOp();
        _builder.append(_op_1, "");
        Expression _expr_3 = obj.getExpr();
        String _outputFor_4 = this.outputFor(_expr_3);
        _builder.append(_outputFor_4, "");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _andand = obj.getAndand();
      boolean _notEquals_5 = (!Objects.equal(_andand, null));
      if (_notEquals_5) {
        String _andand_1 = obj.getAndand();
        _builder.append(_andand_1, "");
        String _ident = obj.getIdent();
        _builder.append(_ident, "");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _alignOf = obj.getAlignOf();
      boolean _notEquals_6 = (!Objects.equal(_alignOf, null));
      if (_notEquals_6) {
        String _alignOf_1 = obj.getAlignOf();
        _builder.append(_alignOf_1, "");
        _builder.append("(");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        {
          TypeName _typeName_2 = obj.getTypeName();
          boolean _notEquals_7 = (!Objects.equal(_typeName_2, null));
          if (_notEquals_7) {
            TypeName _typeName_3 = obj.getTypeName();
            String _outputFor_5 = this.outputFor(_typeName_3);
            _builder.append(_outputFor_5, "\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
          } else {
            Expression _expr_4 = obj.getExpr();
            String _outputFor_6 = this.outputFor(_expr_4);
            _builder.append(_outputFor_6, "\t");
          }
        }
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append(")");
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputForPostfixExpression(final PostfixExpression obj) {
    StringConcatenation _builder = new StringConcatenation();
    {
      TypeName _typeName = obj.getTypeName();
      boolean _notEquals = (!Objects.equal(_typeName, null));
      if (_notEquals) {
        {
          boolean _isExt = obj.isExt();
          if (_isExt) {
            _builder.append("__extension__");
          }
        }
        _builder.newLineIfNotEmpty();
        _builder.append("(");
        TypeName _typeName_1 = obj.getTypeName();
        String _outputFor = this.outputFor(_typeName_1);
        _builder.append(_outputFor, "");
        _builder.append("){");
        _builder.newLineIfNotEmpty();
        InitializerList _initializerList = obj.getInitializerList();
        String _outputFor_1 = this.outputFor(_initializerList);
        _builder.append(_outputFor_1, "");
        _builder.newLineIfNotEmpty();
        {
          boolean _isComma = obj.isComma();
          if (_isComma) {
            _builder.append(",");
          }
        }
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      Expression _expr = obj.getExpr();
      boolean _notEquals_1 = (!Objects.equal(_expr, null));
      if (_notEquals_1) {
        Expression _expr_1 = obj.getExpr();
        String _outputFor_2 = this.outputFor(_expr_1);
        _builder.append(_outputFor_2, "");
      }
    }
    _builder.newLineIfNotEmpty();
    PostfixExpressionSuffix _suffix = obj.getSuffix();
    String _outputForPostfixExpressionSuffix = this.outputForPostfixExpressionSuffix(_suffix);
    _builder.append(_outputForPostfixExpressionSuffix, "");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputForPostfixExpressionSuffix(final PostfixExpressionSuffix s) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((s instanceof PostfixExpressionSuffixArray)) {
        String _outputFor = this.outputFor(((PostfixExpressionSuffixArray) s));
        _builder.append(_outputFor, "");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((s instanceof PostfixExpressionSuffixArgument)) {
        String _outputFor_1 = this.outputFor(((PostfixExpressionSuffixArgument) s));
        _builder.append(_outputFor_1, "");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((s instanceof PostfixExpressionSuffixDot)) {
        String _outputFor_2 = this.outputFor(((PostfixExpressionSuffixDot) s));
        _builder.append(_outputFor_2, "");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((s instanceof PostfixExpressionSuffixArrow)) {
        String _outputFor_3 = this.outputFor(((PostfixExpressionSuffixArrow) s));
        _builder.append(_outputFor_3, "");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((s instanceof PostfixExpressionSuffixPlusPlus)) {
        String _outputFor_4 = this.outputFor(((PostfixExpressionSuffixPlusPlus) s));
        _builder.append(_outputFor_4, "");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((s instanceof PostfixExpressionSuffixMinusMinus)) {
        String _outputFor_5 = this.outputFor(((PostfixExpressionSuffixMinusMinus) s));
        _builder.append(_outputFor_5, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  public String outputFor(final PostfixExpressionSuffixArray obj) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("[");
    Expression _arrayExpr = obj.getArrayExpr();
    String _outputFor = this.outputFor(_arrayExpr);
    _builder.append(_outputFor, "");
    _builder.append("]");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputFor(final PostfixExpressionSuffixArgument obj) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    ArgumentExpressionList _argumentExpressionList = obj.getArgumentExpressionList();
    String _outputFor = this.outputFor(_argumentExpressionList);
    _builder.append(_outputFor, "");
    _builder.append(")");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputFor(final PostfixExpressionSuffixDot obj) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(".");
    String _ident = obj.getIdent();
    _builder.append(_ident, "");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputFor(final PostfixExpressionSuffixArrow obj) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("->");
    String _ident = obj.getIdent();
    _builder.append(_ident, "");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputFor(final PostfixExpressionSuffixPlusPlus obj) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("++");
    _builder.newLine();
    return _builder.toString();
  }
  
  public String outputFor(final PostfixExpressionSuffixMinusMinus obj) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("--");
    _builder.newLine();
    return _builder.toString();
  }
  
  public String outputFor(final ArgumentExpressionList obj) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<at.jku.weiner.c.common.common.Expression> _expr = obj.getExpr();
      for(final at.jku.weiner.c.common.common.Expression e : _expr) {
        {
          EList<at.jku.weiner.c.common.common.Expression> _expr_1 = obj.getExpr();
          int _indexOf = _expr_1.indexOf(e);
          boolean _greaterThan = (_indexOf > 0);
          if (_greaterThan) {
            _builder.append(",");
          }
        }
        _builder.newLineIfNotEmpty();
        String _outputFor = this.outputFor(((Expression) e));
        _builder.append(_outputFor, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  public String outputForPrimaryExpression(final PrimaryExpression obj) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _ident = obj.getIdent();
      boolean _notEquals = (!Objects.equal(_ident, null));
      if (_notEquals) {
        String _ident_1 = obj.getIdent();
        _builder.append(_ident_1, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      Constant2 _const = obj.getConst();
      boolean _notEquals_1 = (!Objects.equal(_const, null));
      if (_notEquals_1) {
        Constant2 _const_1 = obj.getConst();
        String _outputFor = this.outputFor(_const_1);
        _builder.append(_outputFor, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      EList<String> _string = obj.getString();
      boolean _notEquals_2 = (!Objects.equal(_string, null));
      if (_notEquals_2) {
        EList<String> _string_1 = obj.getString();
        String _outputForString = this.outputForString(_string_1);
        _builder.append(_outputForString, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      boolean _isParentheses = obj.isParentheses();
      if (_isParentheses) {
        _builder.append("(");
        Expression _expr = obj.getExpr();
        String _outputFor_1 = this.outputFor(_expr);
        _builder.append(_outputFor_1, "");
        _builder.append(")");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      boolean _isBuiltin_offsetof = obj.isBuiltin_offsetof();
      if (_isBuiltin_offsetof) {
        _builder.append("__builtin_offsetof(");
        TypeName _typeName = obj.getTypeName();
        String _outputFor_2 = this.outputFor(_typeName);
        _builder.append(_outputFor_2, "");
        _builder.append(",");
        Expression _expr_1 = obj.getExpr();
        String _outputFor_3 = this.outputFor(_expr_1);
        _builder.append(_outputFor_3, "");
        _builder.append(")");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      Statement _compoundStmt = obj.getCompoundStmt();
      boolean _notEquals_3 = (!Objects.equal(_compoundStmt, null));
      if (_notEquals_3) {
        {
          boolean _isExt = obj.isExt();
          if (_isExt) {
            _builder.append("__extension__");
          }
        }
        _builder.append("(");
        Statement _compoundStmt_1 = obj.getCompoundStmt();
        String _outputFor_4 = this.outputFor(_compoundStmt_1);
        _builder.append(_outputFor_4, "");
        _builder.append(")");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      boolean _isBuiltin_typescompatiblep = obj.isBuiltin_typescompatiblep();
      if (_isBuiltin_typescompatiblep) {
        _builder.append("__builtin_types_compatible_p(");
        TypeName _typeName_1 = obj.getTypeName();
        String _outputFor_5 = this.outputFor(_typeName_1);
        _builder.append(_outputFor_5, "");
        _builder.append(", ");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        TypeName _typeName2 = obj.getTypeName2();
        String _outputFor_6 = this.outputFor(_typeName2);
        _builder.append(_outputFor_6, "\t");
        _builder.append(")");
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputForString(final EList<String> obj) {
    StringConcatenation _builder = new StringConcatenation();
    {
      int _size = obj.size();
      ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, _size, true);
      for(final Integer i : _doubleDotLessThan) {
        String _get = obj.get((i).intValue());
        _builder.append(_get, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  public String outputFor(final Constant2 obj) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _hex = obj.getHex();
      boolean _notEquals = (!Objects.equal(_hex, null));
      if (_notEquals) {
        String _hex_1 = obj.getHex();
        _builder.append(_hex_1, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      String _oct = obj.getOct();
      boolean _notEquals_1 = (!Objects.equal(_oct, null));
      if (_notEquals_1) {
        String _oct_1 = obj.getOct();
        _builder.append(_oct_1, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      String _dec = obj.getDec();
      boolean _notEquals_2 = (!Objects.equal(_dec, null));
      if (_notEquals_2) {
        String _dec_1 = obj.getDec();
        _builder.append(_dec_1, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      String _ch = obj.getCh();
      boolean _notEquals_3 = (!Objects.equal(_ch, null));
      if (_notEquals_3) {
        String _ch_1 = obj.getCh();
        _builder.append(_ch_1, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      String _str = obj.getStr();
      boolean _notEquals_4 = (!Objects.equal(_str, null));
      if (_notEquals_4) {
        String _str_1 = obj.getStr();
        _builder.append(_str_1, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      String _float = obj.getFloat();
      boolean _notEquals_5 = (!Objects.equal(_float, null));
      if (_notEquals_5) {
        String _float_1 = obj.getFloat();
        _builder.append(_float_1, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      String _bin = obj.getBin();
      boolean _notEquals_6 = (!Objects.equal(_bin, null));
      if (_notEquals_6) {
        String _bin_1 = obj.getBin();
        _builder.append(_bin_1, "");
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  @Pure
  public String getFileName() {
    return this.fileName;
  }
  
  public void setFileName(final String fileName) {
    this.fileName = fileName;
  }
}
