//----------------------------------------------------------------------
//----------------------------------------------------------------------
package at.jku.weiner.c.preprocess
language preprocess
imports at.jku.weiner.c.common.common
//----------------------------------------------------------------------
split-lexer=false
source file="res/Test0024_FunctionMacroTwoArguments.c"
//----------------------------------------------------------------------
lexer-tokens
	HASH DEFINE WHITESPACE ID SKW_LEFTPAREN ID SKW_COMMA WHITESPACE ID SKW_RIGHTPAREN WHITESPACE
		SKW_LEFTPAREN SKW_LEFTPAREN ID SKW_RIGHTPAREN WHITESPACE SKW_LESS WHITESPACE
		SKW_LEFTPAREN ID SKW_RIGHTPAREN WHITESPACE SKW_QUESTION WHITESPACE
		SKW_LEFTPAREN ID SKW_RIGHTPAREN WHITESPACE SKW_COLON WHITESPACE
		SKW_LEFTPAREN ID SKW_RIGHTPAREN SKW_RIGHTPAREN 
		NEWLINE
	// a
	ID WHITESPACE ID WHITESPACE SKW_ASSIGN WHITESPACE ID SKW_LEFTPAREN DECIMAL_LITERAL SKW_COMMA DECIMAL_LITERAL SKW_RIGHTPAREN SKW_SEMI NEWLINE
	// b
	ID WHITESPACE ID WHITESPACE SKW_ASSIGN WHITESPACE ID SKW_LEFTPAREN DECIMAL_LITERAL SKW_COMMA WHITESPACE DECIMAL_LITERAL SKW_RIGHTPAREN SKW_SEMI NEWLINE
	// c
	ID WHITESPACE ID WHITESPACE SKW_ASSIGN WHITESPACE ID SKW_LEFTPAREN SKW_LEFTPAREN DECIMAL_LITERAL SKW_RIGHTPAREN SKW_COMMA WHITESPACE DECIMAL_LITERAL SKW_RIGHTPAREN SKW_SEMI NEWLINE
	// d
	ID WHITESPACE ID WHITESPACE SKW_ASSIGN WHITESPACE ID SKW_LEFTPAREN ID WHITESPACE SKW_PLUS WHITESPACE DECIMAL_LITERAL SKW_COMMA WHITESPACE
		DECIMAL_LITERAL SKW_RIGHTPAREN SKW_SEMI NEWLINE
	// e
	ID WHITESPACE ID WHITESPACE SKW_ASSIGN WHITESPACE ID SKW_LEFTPAREN DECIMAL_LITERAL SKW_COMMA WHITESPACE 
		SKW_LEFTPAREN ID SKW_STAR DECIMAL_LITERAL WHITESPACE SKW_PLUS WHITESPACE
		SKW_LEFTPAREN SKW_STAR ID SKW_RIGHTPAREN 
		SKW_RIGHTPAREN SKW_RIGHTPAREN SKW_SEMI NEWLINE
//----------------------------------------------------------------------
(common::Model
	units+=
	(common::TranslationUnit
	preprocess=(Preprocess
		group=
		(GroupOpt
			lines+=
			(PreprocessorDirectives
				directive=
				(DefineFunctionLikeMacro
					id++"MIN",
					list=
					(IdentifierList
						id+*"[X, Y]"
					),
					string++"((X) < (Y) ? (X) : (Y))"
				)
			),
			(Code
				code++"int a = MIN(5,8);"
			),
			(Code
				code++"int b = MIN(8, 5);"
			),
			(Code
				code++"int c = MIN((5), 5);"
			),
			(Code
				code++"int d = MIN(a + 1, 18);"
			),
			(Code
				code++"int e = MIN(18, (b*2 + (*c)));"
			)
		)
	)
)
)
//----------------------------------------------------------------------
output file="bin/Test0024_FunctionMacroTwoArguments.c.i"
expected file="expected/Test0024_FunctionMacroTwoArguments.c"
//replacePatterns file="res/Patterns.txt"
//----------------------------------------------------------------------
//----------------------------------------------------------------------
