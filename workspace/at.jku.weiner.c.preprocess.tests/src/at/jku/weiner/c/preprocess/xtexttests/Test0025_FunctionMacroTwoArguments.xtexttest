//----------------------------------------------------------------------
//----------------------------------------------------------------------
package at.jku.weiner.c.preprocess
language preprocess
imports at.jku.weiner.c.common.common
//----------------------------------------------------------------------
split-lexer=false
source file="res/Test0025_FunctionMacroTwoArguments.c"
//----------------------------------------------------------------------
lexer-tokens
	HASH DEFINE WHITESPACE ID SKW_LEFTPAREN ID SKW_COMMA WHITESPACE ID SKW_RIGHTPAREN WHITESPACE
		SKW_LEFTPAREN SKW_LEFTPAREN ID SKW_RIGHTPAREN WHITESPACE SKW_LESS WHITESPACE
		SKW_LEFTPAREN ID SKW_RIGHTPAREN WHITESPACE SKW_QUESTION WHITESPACE
		SKW_LEFTPAREN ID SKW_RIGHTPAREN WHITESPACE SKW_COLON WHITESPACE
		SKW_LEFTPAREN ID SKW_RIGHTPAREN SKW_RIGHTPAREN 
		NEWLINE
	// a
	ID WHITESPACE ID WHITESPACE SKW_ASSIGN WHITESPACE ID SKW_LEFTPAREN SKW_COMMA WHITESPACE DECIMAL_LITERAL SKW_RIGHTPAREN 
		WHITESPACE SKW_PLUS WHITESPACE ID SKW_LEFTPAREN WHITESPACE DECIMAL_LITERAL WHITESPACE SKW_COMMA WHITESPACE DECIMAL_LITERAL WHITESPACE SKW_RIGHTPAREN 
		SKW_SEMI NEWLINE
	// b
	ID WHITESPACE ID WHITESPACE SKW_ASSIGN WHITESPACE ID SKW_LEFTPAREN ID SKW_COMMA WHITESPACE SKW_RIGHTPAREN SKW_SEMI NEWLINE
	// c
	ID WHITESPACE ID WHITESPACE SKW_ASSIGN WHITESPACE ID SKW_LEFTPAREN SKW_COMMA SKW_RIGHTPAREN SKW_SEMI NEWLINE
	// d
	ID WHITESPACE ID WHITESPACE SKW_ASSIGN WHITESPACE ID SKW_LEFTPAREN SKW_LEFTPAREN SKW_COMMA SKW_RIGHTPAREN SKW_COMMA SKW_RIGHTPAREN SKW_SEMI NEWLINE
	// e
	ID WHITESPACE ID WHITESPACE SKW_ASSIGN WHITESPACE ID WHITESPACE SKW_LEFTPAREN ID WHITESPACE SKW_LEFTPAREN ID SKW_COMMA WHITESPACE ID SKW_RIGHTPAREN 
		SKW_COMMA WHITESPACE ID SKW_RIGHTPAREN SKW_SEMI NEWLINE
//----------------------------------------------------------------------
//(common::Model
	//units+=
	//(common::TranslationUnit
	(Preprocess
		group=
		(GroupOpt
			lines+=
			(PreprocessorDirectives
				directive=
				(DefineFunctionLikeMacro
					id++"MIN",
					list=
					(IdentifierList
						id+*"[X, Y]"
					),
//					replacement+=
//					(ReplaceLine
						string++"((X) < (Y) ? (X) : (Y))"
//					)
				)
			),
			(Code
				code++"int a = MIN(, 5) + MIN( 1 , 2 );"
			),
			(Code
				code++"int b = MIN(a, );"
			),
			(Code
				code++"int c = MIN(,);"
			),
			(Code
				code++"int d = MIN((,),);"
			),
			(Code
				code++"int e = MIN (MIN (a, b), c);"
			)
		)
	)
//)
//)
//----------------------------------------------------------------------
output file="bin/Test0025_FunctionMacroTwoArguments.c.i"
expected file="expected/Test0025_FunctionMacroTwoArguments.c"
//replacePatterns file="res/Patterns.txt"
//----------------------------------------------------------------------
//----------------------------------------------------------------------
