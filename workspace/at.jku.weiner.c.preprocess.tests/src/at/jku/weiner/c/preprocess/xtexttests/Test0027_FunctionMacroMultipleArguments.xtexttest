//----------------------------------------------------------------------
//----------------------------------------------------------------------
package at.jku.weiner.c.preprocess
language preprocess
//----------------------------------------------------------------------
split-lexer=true
source file="res/Test0027_FunctionMacroMultipleArguments.c"
//----------------------------------------------------------------------
lexer-tokens
	HASH DEFINE WS ID SKW_LEFTPAREN WS SKW_RIGHTPAREN WS WS WS
		ID NEWLINE
	HASH DEFINE WS ID SKW_LEFTPAREN ID SKW_RIGHTPAREN WS WS WS
		SKW_LEFTBRACE ID SKW_RIGHTBRACE NEWLINE
	HASH DEFINE WS ID SKW_LEFTPAREN ID SKW_COMMA WS ID SKW_RIGHTPAREN WS WS
		ID WS SKW_PLUS WS ID NEWLINE
	HASH DEFINE WS ID SKW_LEFTPAREN ID SKW_COMMA WS ID SKW_COMMA ID SKW_RIGHTPAREN WS WS
		ID WS SKW_STAR WS ID WS SKW_MINUS WS ID NEWLINE
	HASH UNDEF WS ID NEWLINE
	HASH DEFINE WS ID SKW_LEFTPAREN WS SKW_RIGHTPAREN WS WS WS
		ID NEWLINE
	NEWLINE
	// z
	ID WS ID WS SKW_ASSIGN WS
		ID WS SKW_LEFTPAREN WS SKW_RIGHTPAREN
		SKW_SEMI NEWLINE
	// a
	ID WS ID WS SKW_ASSIGN WS
		ID SKW_LEFTPAREN ID SKW_RIGHTPAREN SKW_SEMI
		NEWLINE
	// b
	ID WS ID WS SKW_ASSIGN WS
		ID SKW_LEFTPAREN DECIMAL_LITERAL SKW_COMMA ID WS SKW_RIGHTPAREN
		SKW_SEMI NEWLINE
	// c
	ID WS ID WS SKW_ASSIGN WS
		ID WS SKW_LEFTPAREN SKW_LEFTPAREN SKW_LEFTPAREN ID SKW_RIGHTPAREN SKW_RIGHTPAREN SKW_RIGHTPAREN
		SKW_SEMI NEWLINE
	// d
	ID WS ID WS SKW_ASSIGN WS
		ID SKW_LEFTPAREN SKW_LEFTPAREN DECIMAL_LITERAL SKW_RIGHTPAREN WS SKW_COMMA WS SKW_LEFTPAREN ID SKW_RIGHTPAREN SKW_RIGHTPAREN
		SKW_SEMI NEWLINE
	// e
	ID WS ID WS SKW_ASSIGN WS
		ID SKW_LEFTPAREN DECIMAL_LITERAL SKW_COMMA ID SKW_RIGHTPAREN WS SKW_LEFTPAREN SKW_STAR WS SKW_LEFTPAREN DECIMAL_LITERAL
		SKW_RIGHTPAREN SKW_RIGHTPAREN
		SKW_SEMI NEWLINE
	// f
	ID WS ID WS SKW_ASSIGN WS
		ID SKW_LEFTPAREN DECIMAL_LITERAL SKW_RIGHTPAREN SKW_LEFTPAREN DECIMAL_LITERAL SKW_RIGHTPAREN
		SKW_SEMI NEWLINE
	// g
	ID WS ID WS SKW_ASSIGN WS
		ID SKW_LEFTPAREN WS SKW_LEFTPAREN ID SKW_COMMA SKW_LEFTPAREN ID SKW_RIGHTPAREN SKW_RIGHTPAREN SKW_RIGHTPAREN 
		SKW_SEMI NEWLINE
	// h
	ID WS ID WS SKW_ASSIGN WS
		ID SKW_LEFTPAREN WS SKW_LEFTPAREN DECIMAL_LITERAL SKW_COMMA ID SKW_RIGHTPAREN SKW_COMMA ID SKW_RIGHTPAREN 
		SKW_SEMI NEWLINE
	// i
	ID WS ID WS SKW_ASSIGN WS
		ID SKW_LEFTPAREN DECIMAL_LITERAL SKW_COMMA WS SKW_LEFTPAREN ID SKW_COMMA ID SKW_RIGHTPAREN SKW_RIGHTPAREN
		SKW_SEMI NEWLINE
	// j
	ID WS ID WS SKW_ASSIGN WS
		ID SKW_LEFTPAREN DECIMAL_LITERAL SKW_COMMA SKW_LEFTPAREN DECIMAL_LITERAL SKW_RIGHTPAREN SKW_COMMA 
		SKW_LEFTPAREN DECIMAL_LITERAL SKW_COMMA DECIMAL_LITERAL SKW_RIGHTPAREN SKW_RIGHTPAREN
		SKW_SEMI NEWLINE
	// k
	ID WS ID WS SKW_ASSIGN WS
		ID SKW_LEFTPAREN SKW_RIGHTPAREN WS SKW_PLUS WS
		SKW_LEFTPAREN ID SKW_LEFTPAREN ID SKW_RIGHTPAREN SKW_RIGHTPAREN WS SKW_MINUS WS
		ID SKW_LEFTPAREN ID SKW_COMMA WS ID SKW_RIGHTPAREN WS SKW_STAR WS
		ID SKW_LEFTPAREN ID SKW_COMMA WS ID SKW_COMMA WS ID SKW_RIGHTPAREN 
		SKW_SEMI NEWLINE
//----------------------------------------------------------------------
(Model
	units+=
	(TranslationUnit
		group=
		(GroupOpt
			lines+=
			(PreprocessorDirectives
				directive=
				(DefineFunctionLikeMacro
					id++"foo0",
					list isNull,
					string++"bar_foo"
				)
			),
			(PreprocessorDirectives
				directive=
				(DefineFunctionLikeMacro
					id++"foo1",
					list=
					(IdentifierList
						id+*"[X]"
					),
					string++"{X}"
				)
			),
			(PreprocessorDirectives
				directive=
				(DefineFunctionLikeMacro
					id++"foo2",
					list=
					(IdentifierList
						id+*"[X, Y]"
					),
					string++"X + Y"
				)
			),
			(PreprocessorDirectives
				directive=
				(DefineFunctionLikeMacro
					id++"foo3",
					list=
					(IdentifierList
						id+*"[X, Y, Z]"
					),
					string++"X * Y - Z"
				)
			),
			(PreprocessorDirectives
				directive=
				(UnDefineDirective
					id++"foo0"
				)
			),
			(PreprocessorDirectives
				directive=
				(DefineFunctionLikeMacro
					id++"foo0",
					list isNull,
					string++"foo_bar"
				)
			),
			(NewLineLine),
			(Code
				code++"int z = foo0 ( );"
			),
			(Code
				code++"int a = foo1(bar);"
			),
			(Code
				code++"int b = foo2(0,bar );"
			),
			(Code
				code++"int c = foo1 (((bar)));"
			),
			(Code
				code++"int d = foo2((0) , (bar));"
			),
			(Code
				code++"int e = foo2(0,bar) (* (1));"
			),
			(Code
				code++"int f = foo1(0)(1);"
			),
			(Code
				code++"int g = foo1( (a,(b)));"
			),
			(Code
				code++"int h = foo2( (0,b),bar);"
			),
			(Code
				code++"int i = foo2(1, (bar,b));"
			),
			(Code
				code++"int j = foo3(1,(1),(1,1));"
			),
			(Code
				code++"int k = foo0() + (foo1(a)) - foo2(foo, bar) * foo3(foo, bar, baaar);"
			)
		)
	)
)
//----------------------------------------------------------------------
output file="bin/Test0027_FunctionMacroMultipleArguments.c.i"
expected file="expected/Test0027_FunctionMacroMultipleArguments.c"
//replacePatterns file="res/Patterns.txt"
//----------------------------------------------------------------------
//----------------------------------------------------------------------
