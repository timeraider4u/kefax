//----------------------------------------------------------------------
//----------------------------------------------------------------------
package at.jku.weiner.c.preprocess
language preprocess
imports at.jku.weiner.c.common.common
//----------------------------------------------------------------------
split-lexer=false
source file="res/Test0047_IfDefined.c"
//----------------------------------------------------------------------
lexer-tokens
	HASH DEFINE WS ID WS DECIMAL_LITERAL NEWLINE
	HASH IF WS DEFINED WS ID WS SKW_ANDAND WS ID WS SKW_GREATEREQUAL WS DECIMAL_LITERAL NEWLINE
		WS ID WS ID SKW_LEFTPAREN SKW_RIGHTPAREN SKW_SEMI NEWLINE
	HASH ENDIF NEWLINE
//----------------------------------------------------------------------
(Model
	units+=
	(TranslationUnit
		group=
		(GroupOpt
			lines+=
			(PreprocessorDirectives
				directive=
				(DefineDirective
					id++"FOO",
					string++"32"
				)
			),
			(PreprocessorDirectives
				directive=
				(ConditionalDirective
					conditional=
					(IfConditional
						expression=
						(common::ConstantExpression
							expr=
							(common::ConditionalExpression
								expr=
								(common::LogicalOrExpression
									expr+=
									(common::LogicalAndExpression
										expr+=
										(common::InclusiveOrExpression
											expr+=
											(common::ExclusiveOrExpression
												expr+=
												(common::AndExpression
													expr+=
													(common::EqualityExpression
														expr+=
														(common::RelationalExpression
															expr+=
															(common::ShiftExpression
																expr+=
																(common::AdditiveExpression
																	expr+=
																	(common::MultiplicativeExpression
																		expr+=
																		(common::CastExpression
																			expr=
																			(common::UnaryExpression
																				expr=
																				(common::PostfixExpression
																					expr=
																					(PrimaryExpression
																						defined?=true,
																						id++"FOO"
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										),
										(common::InclusiveOrExpression
											expr+=
											(common::ExclusiveOrExpression
												expr+=
												(common::AndExpression
													expr+=
													(common::EqualityExpression
														expr+=
														(common::RelationalExpression
															op+*"[>=]",
															expr+=
															(common::ShiftExpression
																expr+=
																(common::AdditiveExpression
																	expr+=
																	(common::MultiplicativeExpression
																		expr+=
																		(common::CastExpression
																			expr=
																			(common::UnaryExpression
																				expr=
																				(common::PostfixExpression
																					expr=
																					(PrimaryExpression
																						id++"FOO"
																					)
																				)
																			)
																		)
																	)
																)
															),
															(common::ShiftExpression
																expr+=
																(common::AdditiveExpression
																	expr+=
																	(common::MultiplicativeExpression
																		expr+=
																		(common::CastExpression
																			expr=
																			(common::UnaryExpression
																				expr=
																				(common::PostfixExpression
																					expr=
																					(PrimaryExpression
																						const++"64"
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										)
									)
								)
							)
						),
						group=
						(GroupOpt
							lines+=
							(Code
								code++"	void size_64();"
							)
						)
					)
				)
			)
		)
	)
)
//----------------------------------------------------------------------
output file="bin/Test0047_IfDefined.c.i"
expected file="expected/Test0047_IfDefined.c"
//replacePatterns file="res/Patterns.txt"
//----------------------------------------------------------------------
//----------------------------------------------------------------------
