//----------------------------------------------------------------------
//----------------------------------------------------------------------
package at.jku.weiner.c.preprocess
language preprocess
imports at.jku.weiner.c.common.common
//----------------------------------------------------------------------
split-lexer=false
source file="res/Test0062_IfElseNested.c"
//----------------------------------------------------------------------
lexer-tokens
	IGNORED NEWLINE
	//HASH DEFINE WHITESPACE ID WHITESPACE DECIMAL_LITERAL NEWLINE
	IGNORED NEWLINE
	//HASH DEFINE WHITESPACE ID WHITESPACE DECIMAL_LITERAL NEWLINE
	/// if defined FOO
	HASH IF WHITESPACE DEFINED WHITESPACE ID NEWLINE
		WHITESPACE ID WHITESPACE ID SKW_LEFTPAREN SKW_RIGHTPAREN SKW_SEMI NEWLINE
		// if defined bar
		WHITESPACE HASH IF WHITESPACE DEFINED WHITESPACE ID NEWLINE
			WHITESPACE WHITESPACE ID WHITESPACE ID SKW_LEFTPAREN SKW_RIGHTPAREN SKW_SEMI NEWLINE
		WHITESPACE HASH ELSE NEWLINE
			WHITESPACE WHITESPACE ID WHITESPACE ID SKW_LEFTPAREN SKW_RIGHTPAREN SKW_SEMI NEWLINE
			// if foo >= 64
			WHITESPACE WHITESPACE HASH IF WHITESPACE ID WHITESPACE SKW_GREATEREQUAL WHITESPACE DECIMAL_LITERAL NEWLINE
				WHITESPACE WHITESPACE WHITESPACE ID WHITESPACE ID SKW_LEFTPAREN SKW_RIGHTPAREN SKW_SEMI NEWLINE
			WHITESPACE WHITESPACE HASH ELSE NEWLINE
				WHITESPACE WHITESPACE WHITESPACE ID WHITESPACE ID SKW_LEFTPAREN SKW_RIGHTPAREN SKW_SEMI NEWLINE
			WHITESPACE WHITESPACE HASH ENDIF WHITESPACE IGNORED NEWLINE
		WHITESPACE HASH ENDIF WHITESPACE IGNORED NEWLINE
	HASH ELSE NEWLINE
		WHITESPACE ID WHITESPACE ID SKW_LEFTPAREN SKW_RIGHTPAREN SKW_SEMI NEWLINE
	HASH ENDIF NEWLINE
//----------------------------------------------------------------------
//(common::Model
	//units+=
	//(common::TranslationUnit
	(Preprocess
		group=
		(GroupOpt
			lines+=
			(NewLineLine),
			//(PreprocessorDirectives
			//	directive=
			//	(DefineObjectMacro
			//		ident++"FOO",
			//		string++"50"
			//	)
			//),
			(NewLineLine),
			//(PreprocessorDirectives
			//	directive=
			//	(DefineObjectMacro
			//		ident++"BAR",
			//		string++"0"
			//	)
			//),
			(PreprocessorDirectives
				directive=
				(ConditionalDirective
					conditional=
					(IfConditional
						expression=
						(PrimaryExpression
							defined?=true,
							ident++"FOO"
						),
						group=
						(GroupOpt
							lines+=
							(Code
								code++"	void foo();"
							),
							(PreprocessorDirectives
								directive=
								(ConditionalDirective
									conditional=
									(IfConditional
										expression=
										(PrimaryExpression
											defined?=true,
											ident++"BAR"
										),
										group=
										(GroupOpt
											lines+=
											(Code
												code++"		void bar();"
											)
										)
									), // end if conditional
									else=
									(ElseConditional
										group=
										(GroupOpt
											lines+=
											(Code
												code++"		void no_bar();"
											),
											(PreprocessorDirectives
												directive=
												(ConditionalDirective
													conditional=
													(IfConditional
														expression=
														(common::RelationalExpression
															op++">=",
															left=
															(PrimaryExpression
																ident++"FOO"
															),
															right=
															(PrimaryExpression
																const++"64"
															)
														),
														group=
														(GroupOpt
															lines+=
															(Code
																code++"			void foo_64();"
															)
														)
													), // end if conditional
													else=
													(ElseConditional
														group=
														(GroupOpt
															lines+=
															(Code
																code++"			void foo_and_no_bar();"
															)
														)
													)
												)
											)
										)
									)
								) // end conditional directive
							)
						)
					), // end if conditional
					else=
					(ElseConditional
						group=
						(GroupOpt
							lines+=
							(Code
								code++"	void no_foo_and_no_bar();"
							)
						)
					)
				) // end conditional directive
			)
		)
	)
//)
//)
//----------------------------------------------------------------------
output file="bin/Test0062_IfElseNested.c.i"
expected file="expected/Test0062_IfElseNested.c"
//replacePatterns file="res/Patterns.txt"
//----------------------------------------------------------------------
//----------------------------------------------------------------------
