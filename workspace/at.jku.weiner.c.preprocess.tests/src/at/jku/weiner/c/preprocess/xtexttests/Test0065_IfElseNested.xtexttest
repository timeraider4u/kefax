//----------------------------------------------------------------------
//----------------------------------------------------------------------
package at.jku.weiner.c.preprocess
language preprocess
imports at.jku.weiner.c.common.common
//----------------------------------------------------------------------
split-lexer=false
source file="res/Test0065_IfElseNested.c"
//----------------------------------------------------------------------
lexer-tokens
	//WHITESPACE NEWLINE
	HASH DEFINE WHITESPACE ID WHITESPACE DECIMAL_LITERAL NEWLINE
	//WHITESPACE NEWLINE
	HASH DEFINE WHITESPACE ID WHITESPACE DECIMAL_LITERAL NEWLINE
	/// if defined FOO
	HASH IF WHITESPACE DEFINED WHITESPACE ID NEWLINE
		WHITESPACE ID WHITESPACE ID SKW_LEFTPAREN SKW_RIGHTPAREN SKW_SEMI NEWLINE
		// if defined bar
		WHITESPACE HASH IF WHITESPACE DEFINED WHITESPACE ID NEWLINE
			WHITESPACE WHITESPACE ID WHITESPACE ID SKW_LEFTPAREN SKW_RIGHTPAREN SKW_SEMI NEWLINE
		WHITESPACE HASH ELSE NEWLINE
			WHITESPACE WHITESPACE ID WHITESPACE ID SKW_LEFTPAREN SKW_RIGHTPAREN SKW_SEMI NEWLINE
			// if foo >= 64
			WHITESPACE WHITESPACE HASH IF WHITESPACE ID WHITESPACE SKW_GREATEREQUAL WHITESPACE DECIMAL_LITERAL NEWLINE
				WHITESPACE WHITESPACE WHITESPACE ID WHITESPACE ID SKW_LEFTPAREN SKW_RIGHTPAREN SKW_SEMI NEWLINE
			WHITESPACE WHITESPACE HASH ELSE NEWLINE
				WHITESPACE WHITESPACE WHITESPACE ID WHITESPACE ID SKW_LEFTPAREN SKW_RIGHTPAREN SKW_SEMI NEWLINE
			WHITESPACE WHITESPACE HASH ENDIF WHITESPACE BLOCK_COMMENT NEWLINE
		WHITESPACE HASH ENDIF WHITESPACE BLOCK_COMMENT NEWLINE
	HASH ELSE NEWLINE
		WHITESPACE ID WHITESPACE ID SKW_LEFTPAREN SKW_RIGHTPAREN SKW_SEMI NEWLINE
	HASH ENDIF NEWLINE
//----------------------------------------------------------------------
//(common::Model
	//units+=
	//(common::TranslationUnit
	(Preprocess
		group=
		(GroupOpt
			lines+=
//			(Code
//				code++"//#define FOO 50"
//			),
			(PreprocessorDirectives
				directive=
				(DefineDirective
					id++"FOO",
					string++"64"
				)
			),
//			(Code
//				code++"//#define BAR 0"
//			),
			(PreprocessorDirectives
				directive=
				(DefineDirective
					id++"BAR",
					string++"0"
				)
			),
			(PreprocessorDirectives
				directive=
				(ConditionalDirective
					conditional=
					(IfConditional
						expression=
						(common::ConstantExpression
							expr=
							(common::ConditionalExpression
								expr=
								(common::LogicalOrExpression
									expr+=
									(common::LogicalAndExpression
										expr+=
										(common::InclusiveOrExpression
											expr+=
											(common::ExclusiveOrExpression
												expr+=
												(common::AndExpression
													expr+=
													(common::EqualityExpression
														expr+=
														(common::RelationalExpression
															expr+=
															(common::ShiftExpression
																expr+=
																(common::AdditiveExpression
																	expr+=
																	(common::MultiplicativeExpression
																		expr+=
																		(common::CastExpression
																			expr=
																			(common::UnaryExpression
																				expr=
																				(common::PostfixExpression
																					expr=
																					(PrimaryExpression
																						defined?=true,
																						id++"FOO"
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										)
									)
								)
							)
						),
						group=
						(GroupOpt
							lines+=
							(Code
								code++"	void foo();"
							),
							(PreprocessorDirectives
								directive=
								(ConditionalDirective
									conditional=
									(IfConditional
										expression=
										(common::ConstantExpression
											expr=
											(common::ConditionalExpression
												expr=
												(common::LogicalOrExpression
													expr+=
													(common::LogicalAndExpression
														expr+=
														(common::InclusiveOrExpression
															expr+=
															(common::ExclusiveOrExpression
																expr+=
																(common::AndExpression
																	expr+=
																	(common::EqualityExpression
																		expr+=
																		(common::RelationalExpression
																			expr+=
																			(common::ShiftExpression
																				expr+=
																				(common::AdditiveExpression
																					expr+=
																					(common::MultiplicativeExpression
																						expr+=
																						(common::CastExpression
																							expr=
																							(common::UnaryExpression
																								expr=
																								(common::PostfixExpression
																									expr=
																									(PrimaryExpression
																										defined?=true,
																										id++"BAR"
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										),
										group=
										(GroupOpt
											lines+=
											(Code
												code++"		void bar();"
											)
										)
									), // end if conditional
									else=
									(ElseConditional
										group=
										(GroupOpt
											lines+=
											(Code
												code++"		void no_bar();"
											),
											(PreprocessorDirectives
												directive=
												(ConditionalDirective
													conditional=
													(IfConditional
														expression=
														(common::ConstantExpression
															expr=
															(common::ConditionalExpression
																expr=
																(common::LogicalOrExpression
																	expr+=
																	(common::LogicalAndExpression
																		expr+=
																		(common::InclusiveOrExpression
																			expr+=
																			(common::ExclusiveOrExpression
																				expr+=
																				(common::AndExpression
																					expr+=
																					(common::EqualityExpression
																						expr+=
																						(common::RelationalExpression
																							op+*"[>=]",
																							expr+=
																							(common::ShiftExpression
																								expr+=
																								(common::AdditiveExpression
																									expr+=
																									(common::MultiplicativeExpression
																										expr+=
																										(common::CastExpression
																											expr=
																											(common::UnaryExpression
																												expr=
																												(common::PostfixExpression
																													expr=
																													(PrimaryExpression
																														id++"FOO"
																													)
																												)
																											)
																										)
																									)
																								)
																							),
																							(common::ShiftExpression
																								expr+=
																								(common::AdditiveExpression
																									expr+=
																									(common::MultiplicativeExpression
																										expr+=
																										(common::CastExpression
																											expr=
																											(common::UnaryExpression
																												expr=
																												(common::PostfixExpression
																													expr=
																													(PrimaryExpression
																														const++"64"
																													)
																												)
																											)
																										)
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														),
														group=
														(GroupOpt
															lines+=
															(Code
																code++"			void foo_64();"
															)
														)
													), // end if conditional
													else=
													(ElseConditional
														group=
														(GroupOpt
															lines+=
															(Code
																code++"			void foo_and_no_bar();"
															)
														)
													)
												)
											)
										)
									)
								) // end conditional directive
							)
						)
					), // end if conditional
					else=
					(ElseConditional
						group=
						(GroupOpt
							lines+=
							(Code
								code++"	void no_foo_and_no_bar();"
							)
						)
					)
				) // end conditional directive
			)
		)
	)
//)
//)
//----------------------------------------------------------------------
output file="bin/Test0065_IfElseNested.c.i"
expected file="expected/Test0065_IfElseNested.c"
//replacePatterns file="res/Patterns.txt"
//----------------------------------------------------------------------
//----------------------------------------------------------------------
