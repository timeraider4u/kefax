//----------------------------------------------------------------------
//----------------------------------------------------------------------
package at.jku.weiner.c.preprocess
language preprocess
imports at.jku.weiner.c.common.common
//----------------------------------------------------------------------
split-lexer=false
source file="res/Test0072_IfMin.c"
//----------------------------------------------------------------------
lexer-tokens
	HASH DEFINE WS ID SKW_LEFTPAREN ID SKW_COMMA WS ID SKW_RIGHTPAREN WS
		SKW_LEFTPAREN SKW_LEFTPAREN ID SKW_RIGHTPAREN WS SKW_LESS WS
		SKW_LEFTPAREN ID SKW_RIGHTPAREN WS SKW_QUESTION WS
		SKW_LEFTPAREN ID SKW_RIGHTPAREN WS SKW_COLON WS
		SKW_LEFTPAREN ID SKW_RIGHTPAREN SKW_RIGHTPAREN 
		NEWLINE
	HASH IF WS ID SKW_LEFTPAREN DECIMAL_LITERAL SKW_COMMA DECIMAL_LITERAL
		 	SKW_RIGHTPAREN 
			WS SKW_GREATEREQUAL WS DECIMAL_LITERAL NEWLINE
		WS ID WS ID SKW_LEFTPAREN SKW_RIGHTPAREN SKW_SEMI NEWLINE
	HASH ENDIF NEWLINE
//----------------------------------------------------------------------
(Model
	units+=
	(TranslationUnit
		group=
		(GroupOpt
			lines+=
			(PreprocessorDirectives
				directive=
				(DefineFunctionLikeMacro
					id++"MIN",
					list=
					(IdentifierList
						id+*"[X, Y]"
					),
					string++"((X) < (Y) ? (X) : (Y))"
				)
			),
			(PreprocessorDirectives
				directive=
				(ConditionalDirective
					conditional=
					(IfConditional
						expression=
						(common::ConstantExpression
							expr=
							(common::ConditionalExpression
								expr=
								(common::LogicalOrExpression
									expr+=
									(common::LogicalAndExpression
										expr+=
										(common::InclusiveOrExpression
											expr+=
											(common::ExclusiveOrExpression
												expr+=
												(common::AndExpression
													expr+=
													(common::EqualityExpression
														expr+=
														(common::RelationalExpression
															op+*"[>=]",
															expr+=
															(common::ShiftExpression
																expr+=
																(common::AdditiveExpression
																	expr+=
																	(common::MultiplicativeExpression
																		expr+=
																		(common::CastExpression
																			expr=
																			(common::UnaryExpression
																				expr=
																				(common::PostfixExpression
																					expr=
																					(PrimaryExpression
																						id++"MIN"
																					),
																					suffix+=
																					(common::PostfixExpressionSuffixArgument
																						argumentExpressionList=
																						(common::ArgumentExpressionList
																							expr+=
																							// 1. argument of min
																							(common::ConditionalExpression
																								expr=
																								(common::LogicalOrExpression
																									expr+=
																									(common::LogicalAndExpression
																										expr+=
																										(common::InclusiveOrExpression
																											expr+=
																											(common::ExclusiveOrExpression
																												expr+=
																												(common::AndExpression
																													expr+=
																													(common::EqualityExpression
																														expr+=
																														(common::RelationalExpression
																															expr+=
																															(common::ShiftExpression
																																expr+=
																																(common::AdditiveExpression
																																	expr+=
																																	(common::MultiplicativeExpression
																																		expr+=
																																		(common::CastExpression
																																			expr=
																																			(common::UnaryExpression
																																				expr=
																																				(common::PostfixExpression
																																					expr=
																																					(PrimaryExpression
																																						const++"0"
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										)
																									)
																								)
																							), // end 1. argument of min
																							// 2. argument of min
																							(common::ConditionalExpression
																								expr=
																								(common::LogicalOrExpression
																									expr+=
																									(common::LogicalAndExpression
																										expr+=
																										(common::InclusiveOrExpression
																											expr+=
																											(common::ExclusiveOrExpression
																												expr+=
																												(common::AndExpression
																													expr+=
																													(common::EqualityExpression
																														expr+=
																														(common::RelationalExpression
																															expr+=
																															(common::ShiftExpression
																																expr+=
																																(common::AdditiveExpression
																																	expr+=
																																	(common::MultiplicativeExpression
																																		expr+=
																																		(common::CastExpression
																																			expr=
																																			(common::UnaryExpression
																																				expr=
																																				(common::PostfixExpression
																																					expr=
																																					(PrimaryExpression
																																						const++"6"
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										)
																									)
																								)
																							) // end 2. argument of min
																						)
																					)
																				)
																			)
																		)
																	)
																)
															),
															(common::ShiftExpression
																expr+=
																(common::AdditiveExpression
																	expr+=
																	(common::MultiplicativeExpression
																		expr+=
																		(common::CastExpression
																			expr=
																			(common::UnaryExpression
																				expr=
																				(common::PostfixExpression
																					expr=
																					(PrimaryExpression
																						const++"5"
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										)
									)
								)
							)
						),
						group=
						(GroupOpt
							lines+=
							(Code
								code++"	void greaterEqualFive();"
							)
						)
					)
				)
			)
		)
	)
)
//----------------------------------------------------------------------
output file="bin/Test0072_IfMin.c.i"
expected file="expected/Test0072_IfMin.c"
//replacePatterns file="res/Patterns.txt"
//----------------------------------------------------------------------
//----------------------------------------------------------------------
