//----------------------------------------------------------------------
//----------------------------------------------------------------------
package at.jku.weiner.c.preprocess
language preprocess
imports at.jku.weiner.c.common.common
//----------------------------------------------------------------------
split-lexer=false
source file="res/Test0072_IfMin.c"
//----------------------------------------------------------------------
lexer-tokens
	HASH DEFINE WHITESPACE ID SKW_LEFTPAREN ID SKW_COMMA WHITESPACE ID SKW_RIGHTPAREN WHITESPACE
		SKW_LEFTPAREN SKW_LEFTPAREN ID SKW_RIGHTPAREN WHITESPACE SKW_LESS WHITESPACE
		SKW_LEFTPAREN ID SKW_RIGHTPAREN WHITESPACE SKW_QUESTION WHITESPACE
		SKW_LEFTPAREN ID SKW_RIGHTPAREN WHITESPACE SKW_COLON WHITESPACE
		SKW_LEFTPAREN ID SKW_RIGHTPAREN SKW_RIGHTPAREN 
		NEWLINE
	HASH IF WHITESPACE ID SKW_LEFTPAREN DECIMAL_LITERAL SKW_COMMA DECIMAL_LITERAL
		 	SKW_RIGHTPAREN 
			WHITESPACE SKW_GREATEREQUAL WHITESPACE DECIMAL_LITERAL NEWLINE
		WHITESPACE ID WHITESPACE ID SKW_LEFTPAREN SKW_RIGHTPAREN SKW_SEMI NEWLINE
	HASH ENDIF NEWLINE
//----------------------------------------------------------------------
//(common::Model
	//units+=
	//(common::TranslationUnit
	(Preprocess
		group=
		(GroupOpt
			lines+=
			(PreprocessorDirectives
				directive=
				(DefineFunctionLikeMacro
					ident++"MIN",
					list=
					(IdentifierList
						ident+*"[X, Y]"
					),
//					replacement+=
//					(ReplaceLine
						string++"((X) < (Y) ? (X) : (Y))"
//					)
				)
			),
			(PreprocessorDirectives
				directive=
				(ConditionalDirective
					conditional=
					(IfConditional
						expression=
						(common::RelationalExpression
							op++">=",
							left=
							(common::PostfixExpression
								expr=
								(PrimaryExpression
									ident++"MIN"
								),
								suffix=
								(common::PostfixExpressionSuffixArgument
									argumentExpressionList=
									(common::ArgumentExpressionList
										expr+=
										// 1. argument of min
										(PrimaryExpression
											const++"0"
										), // end 1. argument of min
										// 2. argument of min
										(PrimaryExpression
											const++"6"
										) // end 2. argument of min
									)
								)
							),
							right=
							(PrimaryExpression
								const++"5"
							)
						),
						group=
						(GroupOpt
							lines+=
							(Code
								code++"	void greaterEqualFive();"
							)
						)
					)
				)
			)
		)
	)
//)
//)
//----------------------------------------------------------------------
output file="bin/Test0072_IfMin.c.i"
expected file="expected/Test0072_IfMin.c"
//replacePatterns file="res/Patterns.txt"
//----------------------------------------------------------------------
//----------------------------------------------------------------------
