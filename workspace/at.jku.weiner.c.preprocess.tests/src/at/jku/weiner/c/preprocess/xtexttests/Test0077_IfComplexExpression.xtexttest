//----------------------------------------------------------------------
//----------------------------------------------------------------------
package at.jku.weiner.c.preprocess
language preprocess
imports at.jku.weiner.c.common.common
//----------------------------------------------------------------------
split-lexer=false
source file="res/Test0077_IfComplexExpression.c"
//----------------------------------------------------------------------
lexer-tokens
	HASH DEFINE WHITESPACE ID WHITESPACE DECIMAL_LITERAL NEWLINE
	HASH DEFINE WHITESPACE ID WHITESPACE DECIMAL_LITERAL NEWLINE
	NEWLINE
	HASH DEFINE WHITESPACE ID WHITESPACE DECIMAL_LITERAL NEWLINE
	HASH DEFINE WHITESPACE ID WHITESPACE DECIMAL_LITERAL NEWLINE
	NEWLINE
	HASH DEFINE WHITESPACE ID SKW_LEFTPAREN ID SKW_COMMA WHITESPACE ID SKW_RIGHTPAREN
		WHITESPACE SKW_LEFTPAREN +*2 ID WHITESPACE SKW_LEFTSHIFT WHITESPACE DECIMAL_LITERAL SKW_RIGHTPAREN
		WHITESPACE SKW_PLUS WHITESPACE ID WHITESPACE SKW_GREATEREQUAL WHITESPACE 
		SKW_LEFTPAREN +*2 ID SKW_RIGHTPAREN WHITESPACE SKW_LEFTSHIFT WHITESPACE DECIMAL_LITERAL SKW_RIGHTPAREN 
		WHITESPACE SKW_PLUS WHITESPACE SKW_LEFTPAREN ID SKW_RIGHTPAREN +*2 NEWLINE 
	NEWLINE
	HASH IF WHITESPACE ID SKW_LEFTPAREN ID SKW_COMMA ID SKW_RIGHTPAREN NEWLINE 
		WHITESPACE ID WHITESPACE ID SKW_LEFTPAREN SKW_RIGHTPAREN SKW_SEMI NEWLINE
	HASH ENDIF NEWLINE
//----------------------------------------------------------------------
//(common::Model
	//units+=
	//(common::TranslationUnit
	(Preprocess
		group=
		(GroupOpt
			lines+=
			(PreprocessorDirectives
				directive=
				(DefineObjectMacro
					ident++"REQ_MAJOR",
					string++"3"
				)
			),
			(PreprocessorDirectives
				directive=
				(DefineObjectMacro
					ident++"REQ_MINOR",
					string++"2"
				)
			),
			(NewLineLine),
			(PreprocessorDirectives
				directive=
				(DefineObjectMacro
					ident++"MAJOR",
					string++"4"
				)
			),
			(PreprocessorDirectives
				directive=
				(DefineObjectMacro
					ident++"MINOR",
					string++"1"
				)
			),
			(NewLineLine),
			(PreprocessorDirectives
				directive=
				(DefineFunctionLikeMacro
					ident++"REQ",
					list=
					(IdentifierList
						ident+*"[major, minor]"
					),
//					replacement+=
//					(ReplaceLine
						string++"((major << 32) + minor >= ((REQ_MAJOR) << 32) + (REQ_MINOR))"
//					)
				)
			),
			(NewLineLine),
			(PreprocessorDirectives
				directive=
				(ConditionalDirective
					conditional=
					(IfConditional
						expression=
						(common::PostfixExpression
							expr=
							(PrimaryExpression
								ident++"REQ"
							),
							suffix=
							(common::PostfixExpressionSuffixArgument
								argumentExpressionList=
								(common::ArgumentExpressionList
									expr+=
									
									(PrimaryExpression
										ident++"MAJOR"
																							
									), // end
									(PrimaryExpression
										ident++"MINOR"
									)
								) // end argument expression list
							) // end post-fix expression suffix argument
						),
						group=
						(GroupOpt
							lines+=
							(Code
								code++"	void foo_bar();"
							)
						)
					)
				)
			)
		)
	)
//)
//)
//----------------------------------------------------------------------
output file="bin/Test0077_IfComplexExpression.c.i"
expected file="expected/Test0077_IfComplexExpression.c"
//replacePatterns file="res/Patterns.txt"
//----------------------------------------------------------------------
//----------------------------------------------------------------------
