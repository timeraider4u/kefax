/*
 * generated by Xtext 2.9.0-SNAPSHOT
 */
grammar InternalPreprocess;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
	
}

@lexer::header {
package at.jku.weiner.c.preprocess.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package at.jku.weiner.c.preprocess.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import at.jku.weiner.c.preprocess.services.PreprocessGrammarAccess;

}

@parser::members {
 
 	private PreprocessGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(PreprocessGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}





// Entry rule entryRulePreprocess
entryRulePreprocess 
:
{ before(grammarAccess.getPreprocessRule()); }
	 rulePreprocess
{ after(grammarAccess.getPreprocessRule()); } 
	 EOF 
;

// Rule Preprocess
rulePreprocess
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getPreprocessAccess().getGroup()); }
(rule__Preprocess__Group__0)
{ after(grammarAccess.getPreprocessAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleGroupOpt
entryRuleGroupOpt 
:
{ before(grammarAccess.getGroupOptRule()); }
	 ruleGroupOpt
{ after(grammarAccess.getGroupOptRule()); } 
	 EOF 
;

// Rule GroupOpt
ruleGroupOpt
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getGroupOptAccess().getGroup()); }
(rule__GroupOpt__Group__0)
{ after(grammarAccess.getGroupOptAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleGroupOpt2
entryRuleGroupOpt2 
:
{ before(grammarAccess.getGroupOpt2Rule()); }
	 ruleGroupOpt2
{ after(grammarAccess.getGroupOpt2Rule()); } 
	 EOF 
;

// Rule GroupOpt2
ruleGroupOpt2
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getGroupOpt2Access().getGroup()); }
(rule__GroupOpt2__Group__0)
{ after(grammarAccess.getGroupOpt2Access().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleGroupOptTemp1
entryRuleGroupOptTemp1 
:
{ before(grammarAccess.getGroupOptTemp1Rule()); }
	 ruleGroupOptTemp1
{ after(grammarAccess.getGroupOptTemp1Rule()); } 
	 EOF 
;

// Rule GroupOptTemp1
ruleGroupOptTemp1
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getGroupOptTemp1Access().getAlternatives()); }
(rule__GroupOptTemp1__Alternatives)
{ after(grammarAccess.getGroupOptTemp1Access().getAlternatives()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleGroupOptTemp2
entryRuleGroupOptTemp2 
:
{ before(grammarAccess.getGroupOptTemp2Rule()); }
	 ruleGroupOptTemp2
{ after(grammarAccess.getGroupOptTemp2Rule()); } 
	 EOF 
;

// Rule GroupOptTemp2
ruleGroupOptTemp2
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getGroupOptTemp2Access().getAlternatives()); }
(rule__GroupOptTemp2__Alternatives)
{ after(grammarAccess.getGroupOptTemp2Access().getAlternatives()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRulePreprocessorDirectives
entryRulePreprocessorDirectives 
:
{ before(grammarAccess.getPreprocessorDirectivesRule()); }
	 rulePreprocessorDirectives
{ after(grammarAccess.getPreprocessorDirectivesRule()); } 
	 EOF 
;

// Rule PreprocessorDirectives
rulePreprocessorDirectives
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getPreprocessorDirectivesAccess().getGroup()); }
(rule__PreprocessorDirectives__Group__0)
{ after(grammarAccess.getPreprocessorDirectivesAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleIncludeDirective
entryRuleIncludeDirective 
:
{ before(grammarAccess.getIncludeDirectiveRule()); }
	 ruleIncludeDirective
{ after(grammarAccess.getIncludeDirectiveRule()); } 
	 EOF 
;

// Rule IncludeDirective
ruleIncludeDirective
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getIncludeDirectiveAccess().getGroup()); }
(rule__IncludeDirective__Group__0)
{ after(grammarAccess.getIncludeDirectiveAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleDefineDirective
entryRuleDefineDirective 
:
{ before(grammarAccess.getDefineDirectiveRule()); }
	 ruleDefineDirective
{ after(grammarAccess.getDefineDirectiveRule()); } 
	 EOF 
;

// Rule DefineDirective
ruleDefineDirective
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getDefineDirectiveAccess().getAlternatives()); }
(rule__DefineDirective__Alternatives)
{ after(grammarAccess.getDefineDirectiveAccess().getAlternatives()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleDefineObjectMacro
entryRuleDefineObjectMacro 
:
{ before(grammarAccess.getDefineObjectMacroRule()); }
	 ruleDefineObjectMacro
{ after(grammarAccess.getDefineObjectMacroRule()); } 
	 EOF 
;

// Rule DefineObjectMacro
ruleDefineObjectMacro
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getDefineObjectMacroAccess().getGroup()); }
(rule__DefineObjectMacro__Group__0)
{ after(grammarAccess.getDefineObjectMacroAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleDefineFunctionLikeMacro
entryRuleDefineFunctionLikeMacro 
:
{ before(grammarAccess.getDefineFunctionLikeMacroRule()); }
	 ruleDefineFunctionLikeMacro
{ after(grammarAccess.getDefineFunctionLikeMacroRule()); } 
	 EOF 
;

// Rule DefineFunctionLikeMacro
ruleDefineFunctionLikeMacro
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getDefineFunctionLikeMacroAccess().getGroup()); }
(rule__DefineFunctionLikeMacro__Group__0)
{ after(grammarAccess.getDefineFunctionLikeMacroAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleIdentifierList
entryRuleIdentifierList 
:
{ before(grammarAccess.getIdentifierListRule()); }
	 ruleIdentifierList
{ after(grammarAccess.getIdentifierListRule()); } 
	 EOF 
;

// Rule IdentifierList
ruleIdentifierList
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getIdentifierListAccess().getGroup()); }
(rule__IdentifierList__Group__0)
{ after(grammarAccess.getIdentifierListAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleLineDirective
entryRuleLineDirective 
:
{ before(grammarAccess.getLineDirectiveRule()); }
	 ruleLineDirective
{ after(grammarAccess.getLineDirectiveRule()); } 
	 EOF 
;

// Rule LineDirective
ruleLineDirective
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getLineDirectiveAccess().getGroup()); }
(rule__LineDirective__Group__0)
{ after(grammarAccess.getLineDirectiveAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleErrorDirective
entryRuleErrorDirective 
:
{ before(grammarAccess.getErrorDirectiveRule()); }
	 ruleErrorDirective
{ after(grammarAccess.getErrorDirectiveRule()); } 
	 EOF 
;

// Rule ErrorDirective
ruleErrorDirective
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getErrorDirectiveAccess().getGroup()); }
(rule__ErrorDirective__Group__0)
{ after(grammarAccess.getErrorDirectiveAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleWarningDirective
entryRuleWarningDirective 
:
{ before(grammarAccess.getWarningDirectiveRule()); }
	 ruleWarningDirective
{ after(grammarAccess.getWarningDirectiveRule()); } 
	 EOF 
;

// Rule WarningDirective
ruleWarningDirective
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getWarningDirectiveAccess().getGroup()); }
(rule__WarningDirective__Group__0)
{ after(grammarAccess.getWarningDirectiveAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleUnDefineDirective
entryRuleUnDefineDirective 
:
{ before(grammarAccess.getUnDefineDirectiveRule()); }
	 ruleUnDefineDirective
{ after(grammarAccess.getUnDefineDirectiveRule()); } 
	 EOF 
;

// Rule UnDefineDirective
ruleUnDefineDirective
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getUnDefineDirectiveAccess().getGroup()); }
(rule__UnDefineDirective__Group__0)
{ after(grammarAccess.getUnDefineDirectiveAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleConditionalDirective
entryRuleConditionalDirective 
:
{ before(grammarAccess.getConditionalDirectiveRule()); }
	 ruleConditionalDirective
{ after(grammarAccess.getConditionalDirectiveRule()); } 
	 EOF 
;

// Rule ConditionalDirective
ruleConditionalDirective
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getConditionalDirectiveAccess().getGroup()); }
(rule__ConditionalDirective__Group__0)
{ after(grammarAccess.getConditionalDirectiveAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleIfConditional
entryRuleIfConditional 
:
{ before(grammarAccess.getIfConditionalRule()); }
	 ruleIfConditional
{ after(grammarAccess.getIfConditionalRule()); } 
	 EOF 
;

// Rule IfConditional
ruleIfConditional
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getIfConditionalAccess().getGroup()); }
(rule__IfConditional__Group__0)
{ after(grammarAccess.getIfConditionalAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleIfDefConditional
entryRuleIfDefConditional 
:
{ before(grammarAccess.getIfDefConditionalRule()); }
	 ruleIfDefConditional
{ after(grammarAccess.getIfDefConditionalRule()); } 
	 EOF 
;

// Rule IfDefConditional
ruleIfDefConditional
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getIfDefConditionalAccess().getGroup()); }
(rule__IfDefConditional__Group__0)
{ after(grammarAccess.getIfDefConditionalAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleIfNotDefConditional
entryRuleIfNotDefConditional 
:
{ before(grammarAccess.getIfNotDefConditionalRule()); }
	 ruleIfNotDefConditional
{ after(grammarAccess.getIfNotDefConditionalRule()); } 
	 EOF 
;

// Rule IfNotDefConditional
ruleIfNotDefConditional
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getIfNotDefConditionalAccess().getGroup()); }
(rule__IfNotDefConditional__Group__0)
{ after(grammarAccess.getIfNotDefConditionalAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleElIfConditional
entryRuleElIfConditional 
:
{ before(grammarAccess.getElIfConditionalRule()); }
	 ruleElIfConditional
{ after(grammarAccess.getElIfConditionalRule()); } 
	 EOF 
;

// Rule ElIfConditional
ruleElIfConditional
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getElIfConditionalAccess().getGroup()); }
(rule__ElIfConditional__Group__0)
{ after(grammarAccess.getElIfConditionalAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleElseConditional
entryRuleElseConditional 
:
{ before(grammarAccess.getElseConditionalRule()); }
	 ruleElseConditional
{ after(grammarAccess.getElseConditionalRule()); } 
	 EOF 
;

// Rule ElseConditional
ruleElseConditional
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getElseConditionalAccess().getGroup()); }
(rule__ElseConditional__Group__0)
{ after(grammarAccess.getElseConditionalAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRulePragmaDirective
entryRulePragmaDirective 
:
{ before(grammarAccess.getPragmaDirectiveRule()); }
	 rulePragmaDirective
{ after(grammarAccess.getPragmaDirectiveRule()); } 
	 EOF 
;

// Rule PragmaDirective
rulePragmaDirective
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getPragmaDirectiveAccess().getGroup()); }
(rule__PragmaDirective__Group__0)
{ after(grammarAccess.getPragmaDirectiveAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleNullDirective
entryRuleNullDirective 
:
{ before(grammarAccess.getNullDirectiveRule()); }
	 ruleNullDirective
{ after(grammarAccess.getNullDirectiveRule()); } 
	 EOF 
;

// Rule NullDirective
ruleNullDirective
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getNullDirectiveAccess().getNullDirectiveAction()); }
(

)
{ after(grammarAccess.getNullDirectiveAccess().getNullDirectiveAction()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleNewLineLine
entryRuleNewLineLine 
:
{ before(grammarAccess.getNewLineLineRule()); }
	 ruleNewLineLine
{ after(grammarAccess.getNewLineLineRule()); } 
	 EOF 
;

// Rule NewLineLine
ruleNewLineLine
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getNewLineLineAccess().getNewLineLineAction()); }
(

)
{ after(grammarAccess.getNewLineLineAccess().getNewLineLineAction()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleCode
entryRuleCode 
:
{ before(grammarAccess.getCodeRule()); }
	 ruleCode
{ after(grammarAccess.getCodeRule()); } 
	 EOF 
;

// Rule Code
ruleCode
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getCodeAccess().getGroup()); }
(rule__Code__Group__0)
{ after(grammarAccess.getCodeAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleMyCode
entryRuleMyCode 
:
{ before(grammarAccess.getMyCodeRule()); }
	 ruleMyCode
{ after(grammarAccess.getMyCodeRule()); } 
	 EOF 
;

// Rule MyCode
ruleMyCode
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getMyCodeAccess().getAlternatives()); }
(rule__MyCode__Alternatives)
{ after(grammarAccess.getMyCodeAccess().getAlternatives()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleMyDefineLineFunction
entryRuleMyDefineLineFunction 
:
{ before(grammarAccess.getMyDefineLineFunctionRule()); }
	 ruleMyDefineLineFunction
{ after(grammarAccess.getMyDefineLineFunctionRule()); } 
	 EOF 
;

// Rule MyDefineLineFunction
ruleMyDefineLineFunction
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
(
{ before(grammarAccess.getMyDefineLineFunctionAccess().getAlternatives()); }
(rule__MyDefineLineFunction__Alternatives)
{ after(grammarAccess.getMyDefineLineFunctionAccess().getAlternatives()); }
)
(
{ before(grammarAccess.getMyDefineLineFunctionAccess().getAlternatives()); }
(rule__MyDefineLineFunction__Alternatives)*
{ after(grammarAccess.getMyDefineLineFunctionAccess().getAlternatives()); }
)
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleMyDefineLineObject
entryRuleMyDefineLineObject 
:
{ before(grammarAccess.getMyDefineLineObjectRule()); }
	 ruleMyDefineLineObject
{ after(grammarAccess.getMyDefineLineObjectRule()); } 
	 EOF 
;

// Rule MyDefineLineObject
ruleMyDefineLineObject
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
(
{ before(grammarAccess.getMyDefineLineObjectAccess().getAlternatives()); }
(rule__MyDefineLineObject__Alternatives)
{ after(grammarAccess.getMyDefineLineObjectAccess().getAlternatives()); }
)
(
{ before(grammarAccess.getMyDefineLineObjectAccess().getAlternatives()); }
(rule__MyDefineLineObject__Alternatives)*
{ after(grammarAccess.getMyDefineLineObjectAccess().getAlternatives()); }
)
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleMyCodeLine
entryRuleMyCodeLine 
:
{ before(grammarAccess.getMyCodeLineRule()); }
	 ruleMyCodeLine
{ after(grammarAccess.getMyCodeLineRule()); } 
	 EOF 
;

// Rule MyCodeLine
ruleMyCodeLine
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
(
{ before(grammarAccess.getMyCodeLineAccess().getAlternatives()); }
(rule__MyCodeLine__Alternatives)
{ after(grammarAccess.getMyCodeLineAccess().getAlternatives()); }
)
(
{ before(grammarAccess.getMyCodeLineAccess().getAlternatives()); }
(rule__MyCodeLine__Alternatives)*
{ after(grammarAccess.getMyCodeLineAccess().getAlternatives()); }
)
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleMyCodeLineExtended
entryRuleMyCodeLineExtended 
:
{ before(grammarAccess.getMyCodeLineExtendedRule()); }
	 ruleMyCodeLineExtended
{ after(grammarAccess.getMyCodeLineExtendedRule()); } 
	 EOF 
;

// Rule MyCodeLineExtended
ruleMyCodeLineExtended
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getMyCodeLineExtendedAccess().getAlternatives()); }
(rule__MyCodeLineExtended__Alternatives)
{ after(grammarAccess.getMyCodeLineExtendedAccess().getAlternatives()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleMyCodeLineExtendedWSOnly
entryRuleMyCodeLineExtendedWSOnly 
:
{ before(grammarAccess.getMyCodeLineExtendedWSOnlyRule()); }
	 ruleMyCodeLineExtendedWSOnly
{ after(grammarAccess.getMyCodeLineExtendedWSOnlyRule()); } 
	 EOF 
;

// Rule MyCodeLineExtendedWSOnly
ruleMyCodeLineExtendedWSOnly
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
(
{ before(grammarAccess.getMyCodeLineExtendedWSOnlyAccess().getWHITESPACETerminalRuleCall()); }
(	RULE_WHITESPACE)
{ after(grammarAccess.getMyCodeLineExtendedWSOnlyAccess().getWHITESPACETerminalRuleCall()); }
)
(
{ before(grammarAccess.getMyCodeLineExtendedWSOnlyAccess().getWHITESPACETerminalRuleCall()); }
(	RULE_WHITESPACE)*
{ after(grammarAccess.getMyCodeLineExtendedWSOnlyAccess().getWHITESPACETerminalRuleCall()); }
)
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleMyCodeLineExtendedNormal
entryRuleMyCodeLineExtendedNormal 
:
{ before(grammarAccess.getMyCodeLineExtendedNormalRule()); }
	 ruleMyCodeLineExtendedNormal
{ after(grammarAccess.getMyCodeLineExtendedNormalRule()); } 
	 EOF 
;

// Rule MyCodeLineExtendedNormal
ruleMyCodeLineExtendedNormal
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getMyCodeLineExtendedNormalAccess().getGroup()); }
(rule__MyCodeLineExtendedNormal__Group__0)
{ after(grammarAccess.getMyCodeLineExtendedNormalAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression 
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getPrimaryExpressionAccess().getGroup()); }
(rule__PrimaryExpression__Group__0)
{ after(grammarAccess.getPrimaryExpressionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleExpression
entryRuleExpression 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WHITESPACE", "RULE_BLOCK_COMMENT", "RULE_LINE_COMMENT", "RULE_LINEBREAK");
}
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Expression
ruleExpression
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WHITESPACE", "RULE_BLOCK_COMMENT", "RULE_LINE_COMMENT", "RULE_LINEBREAK");
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getExpressionAccess().getConditionalExpressionParserRuleCall()); }
	ruleConditionalExpression
{ after(grammarAccess.getExpressionAccess().getConditionalExpressionParserRuleCall()); }
)



;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}







// Entry rule entryRuleConditionalExpression
entryRuleConditionalExpression 
:
{ before(grammarAccess.getConditionalExpressionRule()); }
	 ruleConditionalExpression
{ after(grammarAccess.getConditionalExpressionRule()); } 
	 EOF 
;

// Rule ConditionalExpression
ruleConditionalExpression
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getConditionalExpressionAccess().getGroup()); }
(rule__ConditionalExpression__Group__0)
{ after(grammarAccess.getConditionalExpressionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleLogicalOrExpression
entryRuleLogicalOrExpression 
:
{ before(grammarAccess.getLogicalOrExpressionRule()); }
	 ruleLogicalOrExpression
{ after(grammarAccess.getLogicalOrExpressionRule()); } 
	 EOF 
;

// Rule LogicalOrExpression
ruleLogicalOrExpression
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getLogicalOrExpressionAccess().getGroup()); }
(rule__LogicalOrExpression__Group__0)
{ after(grammarAccess.getLogicalOrExpressionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleLogicalAndExpression
entryRuleLogicalAndExpression 
:
{ before(grammarAccess.getLogicalAndExpressionRule()); }
	 ruleLogicalAndExpression
{ after(grammarAccess.getLogicalAndExpressionRule()); } 
	 EOF 
;

// Rule LogicalAndExpression
ruleLogicalAndExpression
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getLogicalAndExpressionAccess().getGroup()); }
(rule__LogicalAndExpression__Group__0)
{ after(grammarAccess.getLogicalAndExpressionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleInclusiveOrExpression
entryRuleInclusiveOrExpression 
:
{ before(grammarAccess.getInclusiveOrExpressionRule()); }
	 ruleInclusiveOrExpression
{ after(grammarAccess.getInclusiveOrExpressionRule()); } 
	 EOF 
;

// Rule InclusiveOrExpression
ruleInclusiveOrExpression
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getInclusiveOrExpressionAccess().getGroup()); }
(rule__InclusiveOrExpression__Group__0)
{ after(grammarAccess.getInclusiveOrExpressionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleExclusiveOrExpression
entryRuleExclusiveOrExpression 
:
{ before(grammarAccess.getExclusiveOrExpressionRule()); }
	 ruleExclusiveOrExpression
{ after(grammarAccess.getExclusiveOrExpressionRule()); } 
	 EOF 
;

// Rule ExclusiveOrExpression
ruleExclusiveOrExpression
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getExclusiveOrExpressionAccess().getGroup()); }
(rule__ExclusiveOrExpression__Group__0)
{ after(grammarAccess.getExclusiveOrExpressionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleAndExpression
entryRuleAndExpression 
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
(rule__AndExpression__Group__0)
{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression 
:
{ before(grammarAccess.getEqualityExpressionRule()); }
	 ruleEqualityExpression
{ after(grammarAccess.getEqualityExpressionRule()); } 
	 EOF 
;

// Rule EqualityExpression
ruleEqualityExpression
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getEqualityExpressionAccess().getGroup()); }
(rule__EqualityExpression__Group__0)
{ after(grammarAccess.getEqualityExpressionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression 
:
{ before(grammarAccess.getRelationalExpressionRule()); }
	 ruleRelationalExpression
{ after(grammarAccess.getRelationalExpressionRule()); } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup()); }
(rule__RelationalExpression__Group__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleShiftExpression
entryRuleShiftExpression 
:
{ before(grammarAccess.getShiftExpressionRule()); }
	 ruleShiftExpression
{ after(grammarAccess.getShiftExpressionRule()); } 
	 EOF 
;

// Rule ShiftExpression
ruleShiftExpression
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getShiftExpressionAccess().getGroup()); }
(rule__ShiftExpression__Group__0)
{ after(grammarAccess.getShiftExpressionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression 
:
{ before(grammarAccess.getAdditiveExpressionRule()); }
	 ruleAdditiveExpression
{ after(grammarAccess.getAdditiveExpressionRule()); } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
(rule__AdditiveExpression__Group__0)
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression 
:
{ before(grammarAccess.getMultiplicativeExpressionRule()); }
	 ruleMultiplicativeExpression
{ after(grammarAccess.getMultiplicativeExpressionRule()); } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
(rule__MultiplicativeExpression__Group__0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleCastExpression
entryRuleCastExpression 
:
{ before(grammarAccess.getCastExpressionRule()); }
	 ruleCastExpression
{ after(grammarAccess.getCastExpressionRule()); } 
	 EOF 
;

// Rule CastExpression
ruleCastExpression
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getCastExpressionAccess().getUnaryExpressionParserRuleCall()); }
	ruleUnaryExpression
{ after(grammarAccess.getCastExpressionAccess().getUnaryExpressionParserRuleCall()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression 
:
{ before(grammarAccess.getUnaryExpressionRule()); }
	 ruleUnaryExpression
{ after(grammarAccess.getUnaryExpressionRule()); } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getUnaryExpressionAccess().getAlternatives()); }
(rule__UnaryExpression__Alternatives)
{ after(grammarAccess.getUnaryExpressionAccess().getAlternatives()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleUnaryOperator
entryRuleUnaryOperator 
:
{ before(grammarAccess.getUnaryOperatorRule()); }
	 ruleUnaryOperator
{ after(grammarAccess.getUnaryOperatorRule()); } 
	 EOF 
;

// Rule UnaryOperator
ruleUnaryOperator
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getUnaryOperatorAccess().getAlternatives()); }
(rule__UnaryOperator__Alternatives)
{ after(grammarAccess.getUnaryOperatorAccess().getAlternatives()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRulePostfixExpression
entryRulePostfixExpression 
:
{ before(grammarAccess.getPostfixExpressionRule()); }
	 rulePostfixExpression
{ after(grammarAccess.getPostfixExpressionRule()); } 
	 EOF 
;

// Rule PostfixExpression
rulePostfixExpression
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getPostfixExpressionAccess().getGroup()); }
(rule__PostfixExpression__Group__0)
{ after(grammarAccess.getPostfixExpressionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRulePostfixExpressionSuffixArgument
entryRulePostfixExpressionSuffixArgument 
:
{ before(grammarAccess.getPostfixExpressionSuffixArgumentRule()); }
	 rulePostfixExpressionSuffixArgument
{ after(grammarAccess.getPostfixExpressionSuffixArgumentRule()); } 
	 EOF 
;

// Rule PostfixExpressionSuffixArgument
rulePostfixExpressionSuffixArgument
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getPostfixExpressionSuffixArgumentAccess().getGroup()); }
(rule__PostfixExpressionSuffixArgument__Group__0)
{ after(grammarAccess.getPostfixExpressionSuffixArgumentAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleArgumentExpressionList
entryRuleArgumentExpressionList 
:
{ before(grammarAccess.getArgumentExpressionListRule()); }
	 ruleArgumentExpressionList
{ after(grammarAccess.getArgumentExpressionListRule()); } 
	 EOF 
;

// Rule ArgumentExpressionList
ruleArgumentExpressionList
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getArgumentExpressionListAccess().getGroup()); }
(rule__ArgumentExpressionList__Group__0)
{ after(grammarAccess.getArgumentExpressionListAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleConstant1
entryRuleConstant1 
:
{ before(grammarAccess.getConstant1Rule()); }
	 ruleConstant1
{ after(grammarAccess.getConstant1Rule()); } 
	 EOF 
;

// Rule Constant1
ruleConstant1
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getConstant1Access().getAlternatives()); }
(rule__Constant1__Alternatives)
{ after(grammarAccess.getConstant1Access().getAlternatives()); }
)



;
finally {
	restoreStackSize(stackSize);
}







// Entry rule entryRuleSpecialKeywords
entryRuleSpecialKeywords 
:
{ before(grammarAccess.getSpecialKeywordsRule()); }
	 ruleSpecialKeywords
{ after(grammarAccess.getSpecialKeywordsRule()); } 
	 EOF 
;

// Rule SpecialKeywords
ruleSpecialKeywords
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getSpecialKeywordsAccess().getAlternatives()); }
(rule__SpecialKeywords__Alternatives)
{ after(grammarAccess.getSpecialKeywordsAccess().getAlternatives()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleEllipsis
entryRuleEllipsis 
:
{ before(grammarAccess.getEllipsisRule()); }
	 ruleEllipsis
{ after(grammarAccess.getEllipsisRule()); } 
	 EOF 
;

// Rule Ellipsis
ruleEllipsis
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getEllipsisAccess().getGroup()); }
(rule__Ellipsis__Group__0)
{ after(grammarAccess.getEllipsisAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleHexLiteral
entryRuleHexLiteral 
:
{ before(grammarAccess.getHexLiteralRule()); }
	 ruleHexLiteral
{ after(grammarAccess.getHexLiteralRule()); } 
	 EOF 
;

// Rule HexLiteral
ruleHexLiteral
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getHexLiteralAccess().getHEX_LITERALTerminalRuleCall()); }
	RULE_HEX_LITERAL
{ after(grammarAccess.getHexLiteralAccess().getHEX_LITERALTerminalRuleCall()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleOctalLiteral
entryRuleOctalLiteral 
:
{ before(grammarAccess.getOctalLiteralRule()); }
	 ruleOctalLiteral
{ after(grammarAccess.getOctalLiteralRule()); } 
	 EOF 
;

// Rule OctalLiteral
ruleOctalLiteral
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getOctalLiteralAccess().getOCTAL_LITERALTerminalRuleCall()); }
	RULE_OCTAL_LITERAL
{ after(grammarAccess.getOctalLiteralAccess().getOCTAL_LITERALTerminalRuleCall()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleDecimalLiteral
entryRuleDecimalLiteral 
:
{ before(grammarAccess.getDecimalLiteralRule()); }
	 ruleDecimalLiteral
{ after(grammarAccess.getDecimalLiteralRule()); } 
	 EOF 
;

// Rule DecimalLiteral
ruleDecimalLiteral
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getDecimalLiteralAccess().getDECIMAL_LITERALTerminalRuleCall()); }
	RULE_DECIMAL_LITERAL
{ after(grammarAccess.getDecimalLiteralAccess().getDECIMAL_LITERALTerminalRuleCall()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleCharLiteral
entryRuleCharLiteral 
:
{ before(grammarAccess.getCharLiteralRule()); }
	 ruleCharLiteral
{ after(grammarAccess.getCharLiteralRule()); } 
	 EOF 
;

// Rule CharLiteral
ruleCharLiteral
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getCharLiteralAccess().getCHAR_LITERALTerminalRuleCall()); }
	RULE_CHAR_LITERAL
{ after(grammarAccess.getCharLiteralAccess().getCHAR_LITERALTerminalRuleCall()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleStringLiteral
entryRuleStringLiteral 
:
{ before(grammarAccess.getStringLiteralRule()); }
	 ruleStringLiteral
{ after(grammarAccess.getStringLiteralRule()); } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getStringLiteralAccess().getSTRING_LITERALTerminalRuleCall()); }
	RULE_STRING_LITERAL
{ after(grammarAccess.getStringLiteralAccess().getSTRING_LITERALTerminalRuleCall()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleFloatLiteral
entryRuleFloatLiteral 
:
{ before(grammarAccess.getFloatLiteralRule()); }
	 ruleFloatLiteral
{ after(grammarAccess.getFloatLiteralRule()); } 
	 EOF 
;

// Rule FloatLiteral
ruleFloatLiteral
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getFloatLiteralAccess().getFLOAT_LITERALTerminalRuleCall()); }
	RULE_FLOAT_LITERAL
{ after(grammarAccess.getFloatLiteralAccess().getFLOAT_LITERALTerminalRuleCall()); }
)



;
finally {
	restoreStackSize(stackSize);
}




// Entry rule entryRuleBinLiteral
entryRuleBinLiteral 
:
{ before(grammarAccess.getBinLiteralRule()); }
	 ruleBinLiteral
{ after(grammarAccess.getBinLiteralRule()); } 
	 EOF 
;

// Rule BinLiteral
ruleBinLiteral
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getBinLiteralAccess().getBIN_LITERALTerminalRuleCall()); }
	RULE_BIN_LITERAL
{ after(grammarAccess.getBinLiteralAccess().getBIN_LITERALTerminalRuleCall()); }
)



;
finally {
	restoreStackSize(stackSize);
}




rule__GroupOptTemp1__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getGroupOptTemp1Access().getPreprocessorDirectivesParserRuleCall_0()); }
	rulePreprocessorDirectives
{ after(grammarAccess.getGroupOptTemp1Access().getPreprocessorDirectivesParserRuleCall_0()); }
)



    |
(
{ before(grammarAccess.getGroupOptTemp1Access().getNewLineLineParserRuleCall_1()); }
	ruleNewLineLine
{ after(grammarAccess.getGroupOptTemp1Access().getNewLineLineParserRuleCall_1()); }
)



    |
(
{ before(grammarAccess.getGroupOptTemp1Access().getCodeParserRuleCall_2()); }
	ruleCode
{ after(grammarAccess.getGroupOptTemp1Access().getCodeParserRuleCall_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__GroupOptTemp2__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getGroupOptTemp2Access().getPreprocessorDirectivesParserRuleCall_0()); }
	rulePreprocessorDirectives
{ after(grammarAccess.getGroupOptTemp2Access().getPreprocessorDirectivesParserRuleCall_0()); }
)



    |
(
{ before(grammarAccess.getGroupOptTemp2Access().getCodeParserRuleCall_1()); }
	ruleCode
{ after(grammarAccess.getGroupOptTemp2Access().getCodeParserRuleCall_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__PreprocessorDirectives__Alternatives_4
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveAssignment_4_0()); }
(rule__PreprocessorDirectives__DirectiveAssignment_4_0)
{ after(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveAssignment_4_0()); }
)



    |
(
{ before(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveAssignment_4_1()); }
(rule__PreprocessorDirectives__DirectiveAssignment_4_1)
{ after(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveAssignment_4_1()); }
)



    |
(
{ before(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveAssignment_4_2()); }
(rule__PreprocessorDirectives__DirectiveAssignment_4_2)
{ after(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveAssignment_4_2()); }
)



    |
(
{ before(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveAssignment_4_3()); }
(rule__PreprocessorDirectives__DirectiveAssignment_4_3)
{ after(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveAssignment_4_3()); }
)



    |
(
{ before(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveAssignment_4_4()); }
(rule__PreprocessorDirectives__DirectiveAssignment_4_4)
{ after(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveAssignment_4_4()); }
)



    |
(
{ before(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveAssignment_4_5()); }
(rule__PreprocessorDirectives__DirectiveAssignment_4_5)
{ after(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveAssignment_4_5()); }
)



    |
(
{ before(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveAssignment_4_6()); }
(rule__PreprocessorDirectives__DirectiveAssignment_4_6)
{ after(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveAssignment_4_6()); }
)



    |
(
{ before(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveAssignment_4_7()); }
(rule__PreprocessorDirectives__DirectiveAssignment_4_7)
{ after(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveAssignment_4_7()); }
)



    |
(
{ before(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveAssignment_4_8()); }
(rule__PreprocessorDirectives__DirectiveAssignment_4_8)
{ after(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveAssignment_4_8()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__IncludeDirective__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIncludeDirectiveAccess().getINCLUDETerminalRuleCall_1_0()); }
	RULE_INCLUDE
{ after(grammarAccess.getIncludeDirectiveAccess().getINCLUDETerminalRuleCall_1_0()); }
)



    |
(
{ before(grammarAccess.getIncludeDirectiveAccess().getNextAssignment_1_1()); }
(rule__IncludeDirective__NextAssignment_1_1)
{ after(grammarAccess.getIncludeDirectiveAccess().getNextAssignment_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__DefineDirective__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDefineDirectiveAccess().getDefineObjectMacroParserRuleCall_0()); }
	ruleDefineObjectMacro
{ after(grammarAccess.getDefineDirectiveAccess().getDefineObjectMacroParserRuleCall_0()); }
)



    |
(
{ before(grammarAccess.getDefineDirectiveAccess().getDefineFunctionLikeMacroParserRuleCall_1()); }
	ruleDefineFunctionLikeMacro
{ after(grammarAccess.getDefineDirectiveAccess().getDefineFunctionLikeMacroParserRuleCall_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIdentifierListAccess().getGroup_1_0()); }
(rule__IdentifierList__Group_1_0__0)
{ after(grammarAccess.getIdentifierListAccess().getGroup_1_0()); }
)



    |
(
{ before(grammarAccess.getIdentifierListAccess().getGroup_1_1()); }
(rule__IdentifierList__Group_1_1__0)
{ after(grammarAccess.getIdentifierListAccess().getGroup_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__Alternatives_1_0_3_2
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIdentifierListAccess().getVariadicAssignment_1_0_3_2_0()); }
(rule__IdentifierList__VariadicAssignment_1_0_3_2_0)
{ after(grammarAccess.getIdentifierListAccess().getVariadicAssignment_1_0_3_2_0()); }
)



    |
(
{ before(grammarAccess.getIdentifierListAccess().getGroup_1_0_3_2_1()); }
(rule__IdentifierList__Group_1_0_3_2_1__0)
{ after(grammarAccess.getIdentifierListAccess().getGroup_1_0_3_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDirective__ConditionalAlternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getConditionalDirectiveAccess().getConditionalIfConditionalParserRuleCall_1_0_0()); }
	ruleIfConditional
{ after(grammarAccess.getConditionalDirectiveAccess().getConditionalIfConditionalParserRuleCall_1_0_0()); }
)



    |
(
{ before(grammarAccess.getConditionalDirectiveAccess().getConditionalIfDefConditionalParserRuleCall_1_0_1()); }
	ruleIfDefConditional
{ after(grammarAccess.getConditionalDirectiveAccess().getConditionalIfDefConditionalParserRuleCall_1_0_1()); }
)



    |
(
{ before(grammarAccess.getConditionalDirectiveAccess().getConditionalIfNotDefConditionalParserRuleCall_1_0_2()); }
	ruleIfNotDefConditional
{ after(grammarAccess.getConditionalDirectiveAccess().getConditionalIfNotDefConditionalParserRuleCall_1_0_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__MyCode__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getMyCodeAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getMyCodeAccess().getIDTerminalRuleCall_0()); }
)



    |
(
{ before(grammarAccess.getMyCodeAccess().getSPECIALTerminalRuleCall_1()); }
	RULE_SPECIAL
{ after(grammarAccess.getMyCodeAccess().getSPECIALTerminalRuleCall_1()); }
)



    |
(
{ before(grammarAccess.getMyCodeAccess().getINCLUDETerminalRuleCall_2()); }
	RULE_INCLUDE
{ after(grammarAccess.getMyCodeAccess().getINCLUDETerminalRuleCall_2()); }
)



    |
(
{ before(grammarAccess.getMyCodeAccess().getDEFINETerminalRuleCall_3()); }
	RULE_DEFINE
{ after(grammarAccess.getMyCodeAccess().getDEFINETerminalRuleCall_3()); }
)



    |
(
{ before(grammarAccess.getMyCodeAccess().getERRORTerminalRuleCall_4()); }
	RULE_ERROR
{ after(grammarAccess.getMyCodeAccess().getERRORTerminalRuleCall_4()); }
)



    |
(
{ before(grammarAccess.getMyCodeAccess().getPRAGMATerminalRuleCall_5()); }
	RULE_PRAGMA
{ after(grammarAccess.getMyCodeAccess().getPRAGMATerminalRuleCall_5()); }
)



    |
(
{ before(grammarAccess.getMyCodeAccess().getIFDEFTerminalRuleCall_6()); }
	RULE_IFDEF
{ after(grammarAccess.getMyCodeAccess().getIFDEFTerminalRuleCall_6()); }
)



    |
(
{ before(grammarAccess.getMyCodeAccess().getENDIFTerminalRuleCall_7()); }
	RULE_ENDIF
{ after(grammarAccess.getMyCodeAccess().getENDIFTerminalRuleCall_7()); }
)



    |
(
{ before(grammarAccess.getMyCodeAccess().getIFNOTDEFTerminalRuleCall_8()); }
	RULE_IFNOTDEF
{ after(grammarAccess.getMyCodeAccess().getIFNOTDEFTerminalRuleCall_8()); }
)



    |
(
{ before(grammarAccess.getMyCodeAccess().getIFTerminalRuleCall_9()); }
	RULE_IF
{ after(grammarAccess.getMyCodeAccess().getIFTerminalRuleCall_9()); }
)



    |
(
{ before(grammarAccess.getMyCodeAccess().getDEFINEDTerminalRuleCall_10()); }
	RULE_DEFINED
{ after(grammarAccess.getMyCodeAccess().getDEFINEDTerminalRuleCall_10()); }
)



    |
(
{ before(grammarAccess.getMyCodeAccess().getELIFTerminalRuleCall_11()); }
	RULE_ELIF
{ after(grammarAccess.getMyCodeAccess().getELIFTerminalRuleCall_11()); }
)



    |
(
{ before(grammarAccess.getMyCodeAccess().getELSETerminalRuleCall_12()); }
	RULE_ELSE
{ after(grammarAccess.getMyCodeAccess().getELSETerminalRuleCall_12()); }
)



    |
(
{ before(grammarAccess.getMyCodeAccess().getWARNINGTerminalRuleCall_13()); }
	RULE_WARNING
{ after(grammarAccess.getMyCodeAccess().getWARNINGTerminalRuleCall_13()); }
)



    |
(
{ before(grammarAccess.getMyCodeAccess().getUNDEFTerminalRuleCall_14()); }
	RULE_UNDEF
{ after(grammarAccess.getMyCodeAccess().getUNDEFTerminalRuleCall_14()); }
)



    |
(
{ before(grammarAccess.getMyCodeAccess().getLINETerminalRuleCall_15()); }
	RULE_LINE
{ after(grammarAccess.getMyCodeAccess().getLINETerminalRuleCall_15()); }
)



    |
(
{ before(grammarAccess.getMyCodeAccess().getSpecialKeywordsParserRuleCall_16()); }
	ruleSpecialKeywords
{ after(grammarAccess.getMyCodeAccess().getSpecialKeywordsParserRuleCall_16()); }
)



    |
(
{ before(grammarAccess.getMyCodeAccess().getConstant1ParserRuleCall_17()); }
	ruleConstant1
{ after(grammarAccess.getMyCodeAccess().getConstant1ParserRuleCall_17()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__MyDefineLineFunction__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getMyDefineLineFunctionAccess().getMyDefineLineObjectParserRuleCall_0()); }
	ruleMyDefineLineObject
{ after(grammarAccess.getMyDefineLineFunctionAccess().getMyDefineLineObjectParserRuleCall_0()); }
)



    |
(
{ before(grammarAccess.getMyDefineLineFunctionAccess().getHASHTerminalRuleCall_1()); }
	RULE_HASH
{ after(grammarAccess.getMyDefineLineFunctionAccess().getHASHTerminalRuleCall_1()); }
)



    |
(
{ before(grammarAccess.getMyDefineLineFunctionAccess().getVA_ARGSTerminalRuleCall_2()); }
	RULE_VA_ARGS
{ after(grammarAccess.getMyDefineLineFunctionAccess().getVA_ARGSTerminalRuleCall_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__MyDefineLineObject__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getMyDefineLineObjectAccess().getMyCodeParserRuleCall_0()); }
	ruleMyCode
{ after(grammarAccess.getMyDefineLineObjectAccess().getMyCodeParserRuleCall_0()); }
)



    |
(
{ before(grammarAccess.getMyDefineLineObjectAccess().getWHITESPACETerminalRuleCall_1()); }
	RULE_WHITESPACE
{ after(grammarAccess.getMyDefineLineObjectAccess().getWHITESPACETerminalRuleCall_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__MyCodeLine__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getMyCodeLineAccess().getMyCodeParserRuleCall_0()); }
	ruleMyCode
{ after(grammarAccess.getMyCodeLineAccess().getMyCodeParserRuleCall_0()); }
)



    |
(
{ before(grammarAccess.getMyCodeLineAccess().getWHITESPACETerminalRuleCall_1()); }
	RULE_WHITESPACE
{ after(grammarAccess.getMyCodeLineAccess().getWHITESPACETerminalRuleCall_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__MyCodeLineExtended__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getMyCodeLineExtendedAccess().getMyCodeLineExtendedWSOnlyParserRuleCall_0()); }
	ruleMyCodeLineExtendedWSOnly
{ after(grammarAccess.getMyCodeLineExtendedAccess().getMyCodeLineExtendedWSOnlyParserRuleCall_0()); }
)



    |
(
{ before(grammarAccess.getMyCodeLineExtendedAccess().getMyCodeLineExtendedNormalParserRuleCall_1()); }
	ruleMyCodeLineExtendedNormal
{ after(grammarAccess.getMyCodeLineExtendedAccess().getMyCodeLineExtendedNormalParserRuleCall_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__MyCodeLineExtendedNormal__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getMyCodeLineExtendedNormalAccess().getMyCodeLineParserRuleCall_2_0()); }
	ruleMyCodeLine
{ after(grammarAccess.getMyCodeLineExtendedNormalAccess().getMyCodeLineParserRuleCall_2_0()); }
)



    |
(
{ before(grammarAccess.getMyCodeLineExtendedNormalAccess().getHASHTerminalRuleCall_2_1()); }
	RULE_HASH
{ after(grammarAccess.getMyCodeLineExtendedNormalAccess().getHASHTerminalRuleCall_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_1_0()); }
(rule__PrimaryExpression__Group_1_0__0)
{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_1_0()); }
)



    |
(
{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_1_1()); }
(rule__PrimaryExpression__Group_1_1__0)
{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_1_1()); }
)



    |
(
{ before(grammarAccess.getPrimaryExpressionAccess().getConstAssignment_1_2()); }
(rule__PrimaryExpression__ConstAssignment_1_2)
{ after(grammarAccess.getPrimaryExpressionAccess().getConstAssignment_1_2()); }
)



    |
(
{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_1_3()); }
(rule__PrimaryExpression__Group_1_3__0)
{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_1_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Alternatives_1_1
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getEqualityExpressionAccess().getOpAssignment_1_1_0()); }
(rule__EqualityExpression__OpAssignment_1_1_0)
{ after(grammarAccess.getEqualityExpressionAccess().getOpAssignment_1_1_0()); }
)



    |
(
{ before(grammarAccess.getEqualityExpressionAccess().getOpAssignment_1_1_1()); }
(rule__EqualityExpression__OpAssignment_1_1_1)
{ after(grammarAccess.getEqualityExpressionAccess().getOpAssignment_1_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Alternatives_1_1
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_1_0()); }
(rule__RelationalExpression__OpAssignment_1_1_0)
{ after(grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_1_0()); }
)



    |
(
{ before(grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_1_1()); }
(rule__RelationalExpression__OpAssignment_1_1_1)
{ after(grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_1_1()); }
)



    |
(
{ before(grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_1_2()); }
(rule__RelationalExpression__OpAssignment_1_1_2)
{ after(grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_1_2()); }
)



    |
(
{ before(grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_1_3()); }
(rule__RelationalExpression__OpAssignment_1_1_3)
{ after(grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_1_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Alternatives_1_1
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getShiftExpressionAccess().getOpAssignment_1_1_0()); }
(rule__ShiftExpression__OpAssignment_1_1_0)
{ after(grammarAccess.getShiftExpressionAccess().getOpAssignment_1_1_0()); }
)



    |
(
{ before(grammarAccess.getShiftExpressionAccess().getOpAssignment_1_1_1()); }
(rule__ShiftExpression__OpAssignment_1_1_1)
{ after(grammarAccess.getShiftExpressionAccess().getOpAssignment_1_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Alternatives_1_1
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAdditiveExpressionAccess().getOpAssignment_1_1_0()); }
(rule__AdditiveExpression__OpAssignment_1_1_0)
{ after(grammarAccess.getAdditiveExpressionAccess().getOpAssignment_1_1_0()); }
)



    |
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOpAssignment_1_1_1()); }
(rule__AdditiveExpression__OpAssignment_1_1_1)
{ after(grammarAccess.getAdditiveExpressionAccess().getOpAssignment_1_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Alternatives_1_1
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_1_1_0()); }
(rule__MultiplicativeExpression__OpAssignment_1_1_0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_1_1_0()); }
)



    |
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_1_1_1()); }
(rule__MultiplicativeExpression__OpAssignment_1_1_1)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_1_1_1()); }
)



    |
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_1_1_2()); }
(rule__MultiplicativeExpression__OpAssignment_1_1_2)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_1_1_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getUnaryExpressionAccess().getPostfixExpressionParserRuleCall_0()); }
	rulePostfixExpression
{ after(grammarAccess.getUnaryExpressionAccess().getPostfixExpressionParserRuleCall_0()); }
)



    |
(
{ before(grammarAccess.getUnaryExpressionAccess().getGroup_1()); }
(rule__UnaryExpression__Group_1__0)
{ after(grammarAccess.getUnaryExpressionAccess().getGroup_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getUnaryOperatorAccess().getSKW_ANDTerminalRuleCall_0()); }
	RULE_SKW_AND
{ after(grammarAccess.getUnaryOperatorAccess().getSKW_ANDTerminalRuleCall_0()); }
)



    |
(
{ before(grammarAccess.getUnaryOperatorAccess().getSKW_STARTerminalRuleCall_1()); }
	RULE_SKW_STAR
{ after(grammarAccess.getUnaryOperatorAccess().getSKW_STARTerminalRuleCall_1()); }
)



    |
(
{ before(grammarAccess.getUnaryOperatorAccess().getSKW_PLUSTerminalRuleCall_2()); }
	RULE_SKW_PLUS
{ after(grammarAccess.getUnaryOperatorAccess().getSKW_PLUSTerminalRuleCall_2()); }
)



    |
(
{ before(grammarAccess.getUnaryOperatorAccess().getSKW_MINUSTerminalRuleCall_3()); }
	RULE_SKW_MINUS
{ after(grammarAccess.getUnaryOperatorAccess().getSKW_MINUSTerminalRuleCall_3()); }
)



    |
(
{ before(grammarAccess.getUnaryOperatorAccess().getSKW_TILDETerminalRuleCall_4()); }
	RULE_SKW_TILDE
{ after(grammarAccess.getUnaryOperatorAccess().getSKW_TILDETerminalRuleCall_4()); }
)



    |
(
{ before(grammarAccess.getUnaryOperatorAccess().getSKW_NOTTerminalRuleCall_5()); }
	RULE_SKW_NOT
{ after(grammarAccess.getUnaryOperatorAccess().getSKW_NOTTerminalRuleCall_5()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__Constant1__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getConstant1Access().getHexLiteralParserRuleCall_0()); }
	ruleHexLiteral
{ after(grammarAccess.getConstant1Access().getHexLiteralParserRuleCall_0()); }
)



    |
(
{ before(grammarAccess.getConstant1Access().getOctalLiteralParserRuleCall_1()); }
	ruleOctalLiteral
{ after(grammarAccess.getConstant1Access().getOctalLiteralParserRuleCall_1()); }
)



    |
(
{ before(grammarAccess.getConstant1Access().getDecimalLiteralParserRuleCall_2()); }
	ruleDecimalLiteral
{ after(grammarAccess.getConstant1Access().getDecimalLiteralParserRuleCall_2()); }
)



    |
(
{ before(grammarAccess.getConstant1Access().getCharLiteralParserRuleCall_3()); }
	ruleCharLiteral
{ after(grammarAccess.getConstant1Access().getCharLiteralParserRuleCall_3()); }
)



    |
(
{ before(grammarAccess.getConstant1Access().getStringLiteralParserRuleCall_4()); }
	ruleStringLiteral
{ after(grammarAccess.getConstant1Access().getStringLiteralParserRuleCall_4()); }
)



    |
(
{ before(grammarAccess.getConstant1Access().getFloatLiteralParserRuleCall_5()); }
	ruleFloatLiteral
{ after(grammarAccess.getConstant1Access().getFloatLiteralParserRuleCall_5()); }
)



    |
(
{ before(grammarAccess.getConstant1Access().getBinLiteralParserRuleCall_6()); }
	ruleBinLiteral
{ after(grammarAccess.getConstant1Access().getBinLiteralParserRuleCall_6()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__SpecialKeywords__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getSpecialKeywordsAccess().getSKW_ANDTerminalRuleCall_0()); }
	RULE_SKW_AND
{ after(grammarAccess.getSpecialKeywordsAccess().getSKW_ANDTerminalRuleCall_0()); }
)



    |
(
{ before(grammarAccess.getSpecialKeywordsAccess().getSKW_ANDANDTerminalRuleCall_1()); }
	RULE_SKW_ANDAND
{ after(grammarAccess.getSpecialKeywordsAccess().getSKW_ANDANDTerminalRuleCall_1()); }
)



    |
(
{ before(grammarAccess.getSpecialKeywordsAccess().getSKW_ASSIGNTerminalRuleCall_2()); }
	RULE_SKW_ASSIGN
{ after(grammarAccess.getSpecialKeywordsAccess().getSKW_ASSIGNTerminalRuleCall_2()); }
)



    |
(
{ before(grammarAccess.getSpecialKeywordsAccess().getSKW_BACKSLASHTerminalRuleCall_3()); }
	RULE_SKW_BACKSLASH
{ after(grammarAccess.getSpecialKeywordsAccess().getSKW_BACKSLASHTerminalRuleCall_3()); }
)



    |
(
{ before(grammarAccess.getSpecialKeywordsAccess().getSKW_CARETTerminalRuleCall_4()); }
	RULE_SKW_CARET
{ after(grammarAccess.getSpecialKeywordsAccess().getSKW_CARETTerminalRuleCall_4()); }
)



    |
(
{ before(grammarAccess.getSpecialKeywordsAccess().getSKW_COMMATerminalRuleCall_5()); }
	RULE_SKW_COMMA
{ after(grammarAccess.getSpecialKeywordsAccess().getSKW_COMMATerminalRuleCall_5()); }
)



    |
(
{ before(grammarAccess.getSpecialKeywordsAccess().getSKW_COLONTerminalRuleCall_6()); }
	RULE_SKW_COLON
{ after(grammarAccess.getSpecialKeywordsAccess().getSKW_COLONTerminalRuleCall_6()); }
)



    |
(
{ before(grammarAccess.getSpecialKeywordsAccess().getSKW_DIVTerminalRuleCall_7()); }
	RULE_SKW_DIV
{ after(grammarAccess.getSpecialKeywordsAccess().getSKW_DIVTerminalRuleCall_7()); }
)



    |
(
{ before(grammarAccess.getSpecialKeywordsAccess().getSKW_DOTTerminalRuleCall_8()); }
	RULE_SKW_DOT
{ after(grammarAccess.getSpecialKeywordsAccess().getSKW_DOTTerminalRuleCall_8()); }
)



    |
(
{ before(grammarAccess.getSpecialKeywordsAccess().getSKW_DOUBLEQUOTETerminalRuleCall_9()); }
	RULE_SKW_DOUBLEQUOTE
{ after(grammarAccess.getSpecialKeywordsAccess().getSKW_DOUBLEQUOTETerminalRuleCall_9()); }
)



    |
(
{ before(grammarAccess.getSpecialKeywordsAccess().getSKW_EQUALTerminalRuleCall_10()); }
	RULE_SKW_EQUAL
{ after(grammarAccess.getSpecialKeywordsAccess().getSKW_EQUALTerminalRuleCall_10()); }
)



    |
(
{ before(grammarAccess.getSpecialKeywordsAccess().getSKW_GREATERTerminalRuleCall_11()); }
	RULE_SKW_GREATER
{ after(grammarAccess.getSpecialKeywordsAccess().getSKW_GREATERTerminalRuleCall_11()); }
)



    |
(
{ before(grammarAccess.getSpecialKeywordsAccess().getSKW_GREATEREQUALTerminalRuleCall_12()); }
	RULE_SKW_GREATEREQUAL
{ after(grammarAccess.getSpecialKeywordsAccess().getSKW_GREATEREQUALTerminalRuleCall_12()); }
)



    |
(
{ before(grammarAccess.getSpecialKeywordsAccess().getSKW_LEFTBRACETerminalRuleCall_13()); }
	RULE_SKW_LEFTBRACE
{ after(grammarAccess.getSpecialKeywordsAccess().getSKW_LEFTBRACETerminalRuleCall_13()); }
)



    |
(
{ before(grammarAccess.getSpecialKeywordsAccess().getSKW_LEFTBRACKETTerminalRuleCall_14()); }
	RULE_SKW_LEFTBRACKET
{ after(grammarAccess.getSpecialKeywordsAccess().getSKW_LEFTBRACKETTerminalRuleCall_14()); }
)



    |
(
{ before(grammarAccess.getSpecialKeywordsAccess().getSKW_LEFTPARENTerminalRuleCall_15()); }
	RULE_SKW_LEFTPAREN
{ after(grammarAccess.getSpecialKeywordsAccess().getSKW_LEFTPARENTerminalRuleCall_15()); }
)



    |
(
{ before(grammarAccess.getSpecialKeywordsAccess().getSKW_LEFTSHIFTTerminalRuleCall_16()); }
	RULE_SKW_LEFTSHIFT
{ after(grammarAccess.getSpecialKeywordsAccess().getSKW_LEFTSHIFTTerminalRuleCall_16()); }
)



    |
(
{ before(grammarAccess.getSpecialKeywordsAccess().getSKW_LESSTerminalRuleCall_17()); }
	RULE_SKW_LESS
{ after(grammarAccess.getSpecialKeywordsAccess().getSKW_LESSTerminalRuleCall_17()); }
)



    |
(
{ before(grammarAccess.getSpecialKeywordsAccess().getSKW_LESSEQUALTerminalRuleCall_18()); }
	RULE_SKW_LESSEQUAL
{ after(grammarAccess.getSpecialKeywordsAccess().getSKW_LESSEQUALTerminalRuleCall_18()); }
)



    |
(
{ before(grammarAccess.getSpecialKeywordsAccess().getSKW_MINUSTerminalRuleCall_19()); }
	RULE_SKW_MINUS
{ after(grammarAccess.getSpecialKeywordsAccess().getSKW_MINUSTerminalRuleCall_19()); }
)



    |
(
{ before(grammarAccess.getSpecialKeywordsAccess().getSKW_MINUSMINUSTerminalRuleCall_20()); }
	RULE_SKW_MINUSMINUS
{ after(grammarAccess.getSpecialKeywordsAccess().getSKW_MINUSMINUSTerminalRuleCall_20()); }
)



    |
(
{ before(grammarAccess.getSpecialKeywordsAccess().getSKW_MODTerminalRuleCall_21()); }
	RULE_SKW_MOD
{ after(grammarAccess.getSpecialKeywordsAccess().getSKW_MODTerminalRuleCall_21()); }
)



    |
(
{ before(grammarAccess.getSpecialKeywordsAccess().getSKW_NOTTerminalRuleCall_22()); }
	RULE_SKW_NOT
{ after(grammarAccess.getSpecialKeywordsAccess().getSKW_NOTTerminalRuleCall_22()); }
)



    |
(
{ before(grammarAccess.getSpecialKeywordsAccess().getSKW_NOTEQUALTerminalRuleCall_23()); }
	RULE_SKW_NOTEQUAL
{ after(grammarAccess.getSpecialKeywordsAccess().getSKW_NOTEQUALTerminalRuleCall_23()); }
)



    |
(
{ before(grammarAccess.getSpecialKeywordsAccess().getSKW_ORTerminalRuleCall_24()); }
	RULE_SKW_OR
{ after(grammarAccess.getSpecialKeywordsAccess().getSKW_ORTerminalRuleCall_24()); }
)



    |
(
{ before(grammarAccess.getSpecialKeywordsAccess().getSKW_ORORTerminalRuleCall_25()); }
	RULE_SKW_OROR
{ after(grammarAccess.getSpecialKeywordsAccess().getSKW_ORORTerminalRuleCall_25()); }
)



    |
(
{ before(grammarAccess.getSpecialKeywordsAccess().getSKW_PLUSTerminalRuleCall_26()); }
	RULE_SKW_PLUS
{ after(grammarAccess.getSpecialKeywordsAccess().getSKW_PLUSTerminalRuleCall_26()); }
)



    |
(
{ before(grammarAccess.getSpecialKeywordsAccess().getSKW_PLUSPLUSTerminalRuleCall_27()); }
	RULE_SKW_PLUSPLUS
{ after(grammarAccess.getSpecialKeywordsAccess().getSKW_PLUSPLUSTerminalRuleCall_27()); }
)



    |
(
{ before(grammarAccess.getSpecialKeywordsAccess().getSKW_QUESTIONTerminalRuleCall_28()); }
	RULE_SKW_QUESTION
{ after(grammarAccess.getSpecialKeywordsAccess().getSKW_QUESTIONTerminalRuleCall_28()); }
)



    |
(
{ before(grammarAccess.getSpecialKeywordsAccess().getSKW_RIGHTBRACETerminalRuleCall_29()); }
	RULE_SKW_RIGHTBRACE
{ after(grammarAccess.getSpecialKeywordsAccess().getSKW_RIGHTBRACETerminalRuleCall_29()); }
)



    |
(
{ before(grammarAccess.getSpecialKeywordsAccess().getSKW_RIGHTBRACKETTerminalRuleCall_30()); }
	RULE_SKW_RIGHTBRACKET
{ after(grammarAccess.getSpecialKeywordsAccess().getSKW_RIGHTBRACKETTerminalRuleCall_30()); }
)



    |
(
{ before(grammarAccess.getSpecialKeywordsAccess().getSKW_RIGHTPARENTerminalRuleCall_31()); }
	RULE_SKW_RIGHTPAREN
{ after(grammarAccess.getSpecialKeywordsAccess().getSKW_RIGHTPARENTerminalRuleCall_31()); }
)



    |
(
{ before(grammarAccess.getSpecialKeywordsAccess().getSKW_RIGHTSHIFTTerminalRuleCall_32()); }
	RULE_SKW_RIGHTSHIFT
{ after(grammarAccess.getSpecialKeywordsAccess().getSKW_RIGHTSHIFTTerminalRuleCall_32()); }
)



    |
(
{ before(grammarAccess.getSpecialKeywordsAccess().getSKW_SEMITerminalRuleCall_33()); }
	RULE_SKW_SEMI
{ after(grammarAccess.getSpecialKeywordsAccess().getSKW_SEMITerminalRuleCall_33()); }
)



    |
(
{ before(grammarAccess.getSpecialKeywordsAccess().getSKW_SINGLEQUOTETerminalRuleCall_34()); }
	RULE_SKW_SINGLEQUOTE
{ after(grammarAccess.getSpecialKeywordsAccess().getSKW_SINGLEQUOTETerminalRuleCall_34()); }
)



    |
(
{ before(grammarAccess.getSpecialKeywordsAccess().getSKW_STARTerminalRuleCall_35()); }
	RULE_SKW_STAR
{ after(grammarAccess.getSpecialKeywordsAccess().getSKW_STARTerminalRuleCall_35()); }
)



    |
(
{ before(grammarAccess.getSpecialKeywordsAccess().getSKW_TILDETerminalRuleCall_36()); }
	RULE_SKW_TILDE
{ after(grammarAccess.getSpecialKeywordsAccess().getSKW_TILDETerminalRuleCall_36()); }
)



;
finally {
	restoreStackSize(stackSize);
}



rule__Preprocess__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Preprocess__Group__0__Impl
	rule__Preprocess__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Preprocess__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPreprocessAccess().getPreprocessAction_0()); }
(

)
{ after(grammarAccess.getPreprocessAccess().getPreprocessAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Preprocess__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Preprocess__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Preprocess__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPreprocessAccess().getGroupAssignment_1()); }
(rule__Preprocess__GroupAssignment_1)
{ after(grammarAccess.getPreprocessAccess().getGroupAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__GroupOpt__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupOpt__Group__0__Impl
	rule__GroupOpt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupOpt__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getGroupOptAccess().getGroupOptAction_0()); }
(

)
{ after(grammarAccess.getGroupOptAccess().getGroupOptAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__GroupOpt__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupOpt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupOpt__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getGroupOptAccess().getGroup_1()); }
(rule__GroupOpt__Group_1__0)*
{ after(grammarAccess.getGroupOptAccess().getGroup_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__GroupOpt__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupOpt__Group_1__0__Impl
	rule__GroupOpt__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupOpt__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getGroupOptAccess().getLinesAssignment_1_0()); }
(rule__GroupOpt__LinesAssignment_1_0)
{ after(grammarAccess.getGroupOptAccess().getLinesAssignment_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__GroupOpt__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupOpt__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupOpt__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getGroupOptAccess().getNEWLINETerminalRuleCall_1_1()); }
	RULE_NEWLINE
{ after(grammarAccess.getGroupOptAccess().getNEWLINETerminalRuleCall_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__GroupOpt2__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupOpt2__Group__0__Impl
	rule__GroupOpt2__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupOpt2__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getGroupOpt2Access().getGroupOpt2Action_0()); }
(

)
{ after(grammarAccess.getGroupOpt2Access().getGroupOpt2Action_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__GroupOpt2__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupOpt2__Group__1__Impl
	rule__GroupOpt2__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupOpt2__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getGroupOpt2Access().getGroup_1()); }
(rule__GroupOpt2__Group_1__0)*
{ after(grammarAccess.getGroupOpt2Access().getGroup_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__GroupOpt2__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupOpt2__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupOpt2__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getGroupOpt2Access().getLinesAssignment_2()); }
(rule__GroupOpt2__LinesAssignment_2)?
{ after(grammarAccess.getGroupOpt2Access().getLinesAssignment_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__GroupOpt2__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupOpt2__Group_1__0__Impl
	rule__GroupOpt2__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupOpt2__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getGroupOpt2Access().getLinesAssignment_1_0()); }
(rule__GroupOpt2__LinesAssignment_1_0)
{ after(grammarAccess.getGroupOpt2Access().getLinesAssignment_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__GroupOpt2__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupOpt2__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupOpt2__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getGroupOpt2Access().getNEWLINETerminalRuleCall_1_1()); }
	RULE_NEWLINE
{ after(grammarAccess.getGroupOpt2Access().getNEWLINETerminalRuleCall_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__PreprocessorDirectives__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PreprocessorDirectives__Group__0__Impl
	rule__PreprocessorDirectives__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PreprocessorDirectives__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPreprocessorDirectivesAccess().getPreprocessorDirectivesAction_0()); }
(

)
{ after(grammarAccess.getPreprocessorDirectivesAccess().getPreprocessorDirectivesAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__PreprocessorDirectives__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PreprocessorDirectives__Group__1__Impl
	rule__PreprocessorDirectives__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PreprocessorDirectives__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPreprocessorDirectivesAccess().getWHITESPACETerminalRuleCall_1()); }
(	RULE_WHITESPACE)*
{ after(grammarAccess.getPreprocessorDirectivesAccess().getWHITESPACETerminalRuleCall_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__PreprocessorDirectives__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PreprocessorDirectives__Group__2__Impl
	rule__PreprocessorDirectives__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PreprocessorDirectives__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPreprocessorDirectivesAccess().getHASHTerminalRuleCall_2()); }
	RULE_HASH
{ after(grammarAccess.getPreprocessorDirectivesAccess().getHASHTerminalRuleCall_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__PreprocessorDirectives__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PreprocessorDirectives__Group__3__Impl
	rule__PreprocessorDirectives__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PreprocessorDirectives__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPreprocessorDirectivesAccess().getWHITESPACETerminalRuleCall_3()); }
(	RULE_WHITESPACE)*
{ after(grammarAccess.getPreprocessorDirectivesAccess().getWHITESPACETerminalRuleCall_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__PreprocessorDirectives__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PreprocessorDirectives__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PreprocessorDirectives__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPreprocessorDirectivesAccess().getAlternatives_4()); }
(rule__PreprocessorDirectives__Alternatives_4)
{ after(grammarAccess.getPreprocessorDirectivesAccess().getAlternatives_4()); }
)



;
finally {
	restoreStackSize(stackSize);
}












rule__IncludeDirective__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IncludeDirective__Group__0__Impl
	rule__IncludeDirective__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IncludeDirective__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIncludeDirectiveAccess().getIncludeDirectiveAction_0()); }
(

)
{ after(grammarAccess.getIncludeDirectiveAccess().getIncludeDirectiveAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IncludeDirective__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IncludeDirective__Group__1__Impl
	rule__IncludeDirective__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IncludeDirective__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIncludeDirectiveAccess().getAlternatives_1()); }
(rule__IncludeDirective__Alternatives_1)
{ after(grammarAccess.getIncludeDirectiveAccess().getAlternatives_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IncludeDirective__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IncludeDirective__Group__2__Impl
	rule__IncludeDirective__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IncludeDirective__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
(
{ before(grammarAccess.getIncludeDirectiveAccess().getWHITESPACETerminalRuleCall_2()); }
(	RULE_WHITESPACE)
{ after(grammarAccess.getIncludeDirectiveAccess().getWHITESPACETerminalRuleCall_2()); }
)
(
{ before(grammarAccess.getIncludeDirectiveAccess().getWHITESPACETerminalRuleCall_2()); }
(	RULE_WHITESPACE)*
{ after(grammarAccess.getIncludeDirectiveAccess().getWHITESPACETerminalRuleCall_2()); }
)
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IncludeDirective__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IncludeDirective__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IncludeDirective__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIncludeDirectiveAccess().getStringAssignment_3()); }
(rule__IncludeDirective__StringAssignment_3)
{ after(grammarAccess.getIncludeDirectiveAccess().getStringAssignment_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}










rule__DefineObjectMacro__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefineObjectMacro__Group__0__Impl
	rule__DefineObjectMacro__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineObjectMacro__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDefineObjectMacroAccess().getDefineObjectMacroAction_0()); }
(

)
{ after(grammarAccess.getDefineObjectMacroAccess().getDefineObjectMacroAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DefineObjectMacro__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefineObjectMacro__Group__1__Impl
	rule__DefineObjectMacro__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineObjectMacro__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDefineObjectMacroAccess().getDEFINETerminalRuleCall_1()); }
	RULE_DEFINE
{ after(grammarAccess.getDefineObjectMacroAccess().getDEFINETerminalRuleCall_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DefineObjectMacro__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefineObjectMacro__Group__2__Impl
	rule__DefineObjectMacro__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineObjectMacro__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
(
{ before(grammarAccess.getDefineObjectMacroAccess().getWHITESPACETerminalRuleCall_2()); }
(	RULE_WHITESPACE)
{ after(grammarAccess.getDefineObjectMacroAccess().getWHITESPACETerminalRuleCall_2()); }
)
(
{ before(grammarAccess.getDefineObjectMacroAccess().getWHITESPACETerminalRuleCall_2()); }
(	RULE_WHITESPACE)*
{ after(grammarAccess.getDefineObjectMacroAccess().getWHITESPACETerminalRuleCall_2()); }
)
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DefineObjectMacro__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefineObjectMacro__Group__3__Impl
	rule__DefineObjectMacro__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineObjectMacro__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDefineObjectMacroAccess().getIdAssignment_3()); }
(rule__DefineObjectMacro__IdAssignment_3)
{ after(grammarAccess.getDefineObjectMacroAccess().getIdAssignment_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DefineObjectMacro__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefineObjectMacro__Group__4__Impl
	rule__DefineObjectMacro__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineObjectMacro__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDefineObjectMacroAccess().getGroup_4()); }
(rule__DefineObjectMacro__Group_4__0)?
{ after(grammarAccess.getDefineObjectMacroAccess().getGroup_4()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DefineObjectMacro__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefineObjectMacro__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineObjectMacro__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDefineObjectMacroAccess().getWHITESPACETerminalRuleCall_5()); }
(	RULE_WHITESPACE)*
{ after(grammarAccess.getDefineObjectMacroAccess().getWHITESPACETerminalRuleCall_5()); }
)



;
finally {
	restoreStackSize(stackSize);
}














rule__DefineObjectMacro__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefineObjectMacro__Group_4__0__Impl
	rule__DefineObjectMacro__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineObjectMacro__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
(
{ before(grammarAccess.getDefineObjectMacroAccess().getWHITESPACETerminalRuleCall_4_0()); }
(	RULE_WHITESPACE)
{ after(grammarAccess.getDefineObjectMacroAccess().getWHITESPACETerminalRuleCall_4_0()); }
)
(
{ before(grammarAccess.getDefineObjectMacroAccess().getWHITESPACETerminalRuleCall_4_0()); }
(	RULE_WHITESPACE)*
{ after(grammarAccess.getDefineObjectMacroAccess().getWHITESPACETerminalRuleCall_4_0()); }
)
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DefineObjectMacro__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefineObjectMacro__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineObjectMacro__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDefineObjectMacroAccess().getStringAssignment_4_1()); }
(rule__DefineObjectMacro__StringAssignment_4_1)
{ after(grammarAccess.getDefineObjectMacroAccess().getStringAssignment_4_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__DefineFunctionLikeMacro__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefineFunctionLikeMacro__Group__0__Impl
	rule__DefineFunctionLikeMacro__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineFunctionLikeMacro__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDefineFunctionLikeMacroAccess().getDefineFunctionLikeMacroAction_0()); }
(

)
{ after(grammarAccess.getDefineFunctionLikeMacroAccess().getDefineFunctionLikeMacroAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DefineFunctionLikeMacro__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefineFunctionLikeMacro__Group__1__Impl
	rule__DefineFunctionLikeMacro__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineFunctionLikeMacro__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDefineFunctionLikeMacroAccess().getDEFINETerminalRuleCall_1()); }
	RULE_DEFINE
{ after(grammarAccess.getDefineFunctionLikeMacroAccess().getDEFINETerminalRuleCall_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DefineFunctionLikeMacro__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefineFunctionLikeMacro__Group__2__Impl
	rule__DefineFunctionLikeMacro__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineFunctionLikeMacro__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
(
{ before(grammarAccess.getDefineFunctionLikeMacroAccess().getWHITESPACETerminalRuleCall_2()); }
(	RULE_WHITESPACE)
{ after(grammarAccess.getDefineFunctionLikeMacroAccess().getWHITESPACETerminalRuleCall_2()); }
)
(
{ before(grammarAccess.getDefineFunctionLikeMacroAccess().getWHITESPACETerminalRuleCall_2()); }
(	RULE_WHITESPACE)*
{ after(grammarAccess.getDefineFunctionLikeMacroAccess().getWHITESPACETerminalRuleCall_2()); }
)
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DefineFunctionLikeMacro__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefineFunctionLikeMacro__Group__3__Impl
	rule__DefineFunctionLikeMacro__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineFunctionLikeMacro__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDefineFunctionLikeMacroAccess().getIdAssignment_3()); }
(rule__DefineFunctionLikeMacro__IdAssignment_3)
{ after(grammarAccess.getDefineFunctionLikeMacroAccess().getIdAssignment_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DefineFunctionLikeMacro__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefineFunctionLikeMacro__Group__4__Impl
	rule__DefineFunctionLikeMacro__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineFunctionLikeMacro__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDefineFunctionLikeMacroAccess().getSKW_LEFTPARENTerminalRuleCall_4()); }
	RULE_SKW_LEFTPAREN
{ after(grammarAccess.getDefineFunctionLikeMacroAccess().getSKW_LEFTPARENTerminalRuleCall_4()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DefineFunctionLikeMacro__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefineFunctionLikeMacro__Group__5__Impl
	rule__DefineFunctionLikeMacro__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineFunctionLikeMacro__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDefineFunctionLikeMacroAccess().getWHITESPACETerminalRuleCall_5()); }
(	RULE_WHITESPACE)*
{ after(grammarAccess.getDefineFunctionLikeMacroAccess().getWHITESPACETerminalRuleCall_5()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DefineFunctionLikeMacro__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefineFunctionLikeMacro__Group__6__Impl
	rule__DefineFunctionLikeMacro__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineFunctionLikeMacro__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDefineFunctionLikeMacroAccess().getListAssignment_6()); }
(rule__DefineFunctionLikeMacro__ListAssignment_6)?
{ after(grammarAccess.getDefineFunctionLikeMacroAccess().getListAssignment_6()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DefineFunctionLikeMacro__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefineFunctionLikeMacro__Group__7__Impl
	rule__DefineFunctionLikeMacro__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineFunctionLikeMacro__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDefineFunctionLikeMacroAccess().getSKW_RIGHTPARENTerminalRuleCall_7()); }
	RULE_SKW_RIGHTPAREN
{ after(grammarAccess.getDefineFunctionLikeMacroAccess().getSKW_RIGHTPARENTerminalRuleCall_7()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DefineFunctionLikeMacro__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefineFunctionLikeMacro__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineFunctionLikeMacro__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDefineFunctionLikeMacroAccess().getStringAssignment_8()); }
(rule__DefineFunctionLikeMacro__StringAssignment_8)?
{ after(grammarAccess.getDefineFunctionLikeMacroAccess().getStringAssignment_8()); }
)



;
finally {
	restoreStackSize(stackSize);
}




















rule__IdentifierList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IdentifierList__Group__0__Impl
	rule__IdentifierList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIdentifierListAccess().getIdentifierListAction_0()); }
(

)
{ after(grammarAccess.getIdentifierListAccess().getIdentifierListAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IdentifierList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IdentifierList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIdentifierListAccess().getAlternatives_1()); }
(rule__IdentifierList__Alternatives_1)
{ after(grammarAccess.getIdentifierListAccess().getAlternatives_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__IdentifierList__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IdentifierList__Group_1_0__0__Impl
	rule__IdentifierList__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIdentifierListAccess().getIdAssignment_1_0_0()); }
(rule__IdentifierList__IdAssignment_1_0_0)
{ after(grammarAccess.getIdentifierListAccess().getIdAssignment_1_0_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IdentifierList__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IdentifierList__Group_1_0__1__Impl
	rule__IdentifierList__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIdentifierListAccess().getGroup_1_0_1()); }
(rule__IdentifierList__Group_1_0_1__0)*
{ after(grammarAccess.getIdentifierListAccess().getGroup_1_0_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IdentifierList__Group_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IdentifierList__Group_1_0__2__Impl
	rule__IdentifierList__Group_1_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__Group_1_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIdentifierListAccess().getWHITESPACETerminalRuleCall_1_0_2()); }
(	RULE_WHITESPACE)*
{ after(grammarAccess.getIdentifierListAccess().getWHITESPACETerminalRuleCall_1_0_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IdentifierList__Group_1_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IdentifierList__Group_1_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__Group_1_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIdentifierListAccess().getGroup_1_0_3()); }
(rule__IdentifierList__Group_1_0_3__0)?
{ after(grammarAccess.getIdentifierListAccess().getGroup_1_0_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}










rule__IdentifierList__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IdentifierList__Group_1_0_1__0__Impl
	rule__IdentifierList__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__Group_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIdentifierListAccess().getWHITESPACETerminalRuleCall_1_0_1_0()); }
(	RULE_WHITESPACE)*
{ after(grammarAccess.getIdentifierListAccess().getWHITESPACETerminalRuleCall_1_0_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IdentifierList__Group_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IdentifierList__Group_1_0_1__1__Impl
	rule__IdentifierList__Group_1_0_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__Group_1_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIdentifierListAccess().getSKW_COMMATerminalRuleCall_1_0_1_1()); }
	RULE_SKW_COMMA
{ after(grammarAccess.getIdentifierListAccess().getSKW_COMMATerminalRuleCall_1_0_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IdentifierList__Group_1_0_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IdentifierList__Group_1_0_1__2__Impl
	rule__IdentifierList__Group_1_0_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__Group_1_0_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIdentifierListAccess().getWHITESPACETerminalRuleCall_1_0_1_2()); }
(	RULE_WHITESPACE)*
{ after(grammarAccess.getIdentifierListAccess().getWHITESPACETerminalRuleCall_1_0_1_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IdentifierList__Group_1_0_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IdentifierList__Group_1_0_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__Group_1_0_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIdentifierListAccess().getIdAssignment_1_0_1_3()); }
(rule__IdentifierList__IdAssignment_1_0_1_3)
{ after(grammarAccess.getIdentifierListAccess().getIdAssignment_1_0_1_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}










rule__IdentifierList__Group_1_0_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IdentifierList__Group_1_0_3__0__Impl
	rule__IdentifierList__Group_1_0_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__Group_1_0_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIdentifierListAccess().getSKW_COMMATerminalRuleCall_1_0_3_0()); }
	RULE_SKW_COMMA
{ after(grammarAccess.getIdentifierListAccess().getSKW_COMMATerminalRuleCall_1_0_3_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IdentifierList__Group_1_0_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IdentifierList__Group_1_0_3__1__Impl
	rule__IdentifierList__Group_1_0_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__Group_1_0_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIdentifierListAccess().getWHITESPACETerminalRuleCall_1_0_3_1()); }
(	RULE_WHITESPACE)*
{ after(grammarAccess.getIdentifierListAccess().getWHITESPACETerminalRuleCall_1_0_3_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IdentifierList__Group_1_0_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IdentifierList__Group_1_0_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__Group_1_0_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIdentifierListAccess().getAlternatives_1_0_3_2()); }
(rule__IdentifierList__Alternatives_1_0_3_2)
{ after(grammarAccess.getIdentifierListAccess().getAlternatives_1_0_3_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__IdentifierList__Group_1_0_3_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IdentifierList__Group_1_0_3_2_1__0__Impl
	rule__IdentifierList__Group_1_0_3_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__Group_1_0_3_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIdentifierListAccess().getVarIDAssignment_1_0_3_2_1_0()); }
(rule__IdentifierList__VarIDAssignment_1_0_3_2_1_0)
{ after(grammarAccess.getIdentifierListAccess().getVarIDAssignment_1_0_3_2_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IdentifierList__Group_1_0_3_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IdentifierList__Group_1_0_3_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__Group_1_0_3_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIdentifierListAccess().getVariadicAssignment_1_0_3_2_1_1()); }
(rule__IdentifierList__VariadicAssignment_1_0_3_2_1_1)
{ after(grammarAccess.getIdentifierListAccess().getVariadicAssignment_1_0_3_2_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__IdentifierList__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IdentifierList__Group_1_1__0__Impl
	rule__IdentifierList__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIdentifierListAccess().getVarIDAssignment_1_1_0()); }
(rule__IdentifierList__VarIDAssignment_1_1_0)?
{ after(grammarAccess.getIdentifierListAccess().getVarIDAssignment_1_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IdentifierList__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IdentifierList__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIdentifierListAccess().getVariadicAssignment_1_1_1()); }
(rule__IdentifierList__VariadicAssignment_1_1_1)
{ after(grammarAccess.getIdentifierListAccess().getVariadicAssignment_1_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__LineDirective__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LineDirective__Group__0__Impl
	rule__LineDirective__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LineDirective__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLineDirectiveAccess().getLineDirectiveAction_0()); }
(

)
{ after(grammarAccess.getLineDirectiveAccess().getLineDirectiveAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__LineDirective__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LineDirective__Group__1__Impl
	rule__LineDirective__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LineDirective__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLineDirectiveAccess().getLINETerminalRuleCall_1()); }
	RULE_LINE
{ after(grammarAccess.getLineDirectiveAccess().getLINETerminalRuleCall_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__LineDirective__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LineDirective__Group__2__Impl
	rule__LineDirective__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LineDirective__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLineDirectiveAccess().getWHITESPACETerminalRuleCall_2()); }
(	RULE_WHITESPACE)*
{ after(grammarAccess.getLineDirectiveAccess().getWHITESPACETerminalRuleCall_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__LineDirective__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LineDirective__Group__3__Impl
	rule__LineDirective__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LineDirective__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLineDirectiveAccess().getLineAssignment_3()); }
(rule__LineDirective__LineAssignment_3)
{ after(grammarAccess.getLineDirectiveAccess().getLineAssignment_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__LineDirective__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LineDirective__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LineDirective__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLineDirectiveAccess().getGroup_4()); }
(rule__LineDirective__Group_4__0)?
{ after(grammarAccess.getLineDirectiveAccess().getGroup_4()); }
)



;
finally {
	restoreStackSize(stackSize);
}












rule__LineDirective__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LineDirective__Group_4__0__Impl
	rule__LineDirective__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LineDirective__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
(
{ before(grammarAccess.getLineDirectiveAccess().getWHITESPACETerminalRuleCall_4_0()); }
(	RULE_WHITESPACE)
{ after(grammarAccess.getLineDirectiveAccess().getWHITESPACETerminalRuleCall_4_0()); }
)
(
{ before(grammarAccess.getLineDirectiveAccess().getWHITESPACETerminalRuleCall_4_0()); }
(	RULE_WHITESPACE)*
{ after(grammarAccess.getLineDirectiveAccess().getWHITESPACETerminalRuleCall_4_0()); }
)
)



;
finally {
	restoreStackSize(stackSize);
}


rule__LineDirective__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LineDirective__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LineDirective__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLineDirectiveAccess().getPathAssignment_4_1()); }
(rule__LineDirective__PathAssignment_4_1)
{ after(grammarAccess.getLineDirectiveAccess().getPathAssignment_4_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__ErrorDirective__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ErrorDirective__Group__0__Impl
	rule__ErrorDirective__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorDirective__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getErrorDirectiveAccess().getErrorDirectiveAction_0()); }
(

)
{ after(grammarAccess.getErrorDirectiveAccess().getErrorDirectiveAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ErrorDirective__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ErrorDirective__Group__1__Impl
	rule__ErrorDirective__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorDirective__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getErrorDirectiveAccess().getERRORTerminalRuleCall_1()); }
	RULE_ERROR
{ after(grammarAccess.getErrorDirectiveAccess().getERRORTerminalRuleCall_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ErrorDirective__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ErrorDirective__Group__2__Impl
	rule__ErrorDirective__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorDirective__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getErrorDirectiveAccess().getWHITESPACETerminalRuleCall_2()); }
(	RULE_WHITESPACE)*
{ after(grammarAccess.getErrorDirectiveAccess().getWHITESPACETerminalRuleCall_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ErrorDirective__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ErrorDirective__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorDirective__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getErrorDirectiveAccess().getMsgAssignment_3()); }
(rule__ErrorDirective__MsgAssignment_3)?
{ after(grammarAccess.getErrorDirectiveAccess().getMsgAssignment_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}










rule__WarningDirective__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WarningDirective__Group__0__Impl
	rule__WarningDirective__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WarningDirective__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getWarningDirectiveAccess().getWarningDirectiveAction_0()); }
(

)
{ after(grammarAccess.getWarningDirectiveAccess().getWarningDirectiveAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__WarningDirective__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WarningDirective__Group__1__Impl
	rule__WarningDirective__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WarningDirective__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getWarningDirectiveAccess().getWARNINGTerminalRuleCall_1()); }
	RULE_WARNING
{ after(grammarAccess.getWarningDirectiveAccess().getWARNINGTerminalRuleCall_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__WarningDirective__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WarningDirective__Group__2__Impl
	rule__WarningDirective__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__WarningDirective__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getWarningDirectiveAccess().getWHITESPACETerminalRuleCall_2()); }
(	RULE_WHITESPACE)*
{ after(grammarAccess.getWarningDirectiveAccess().getWHITESPACETerminalRuleCall_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__WarningDirective__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WarningDirective__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WarningDirective__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getWarningDirectiveAccess().getMsgAssignment_3()); }
(rule__WarningDirective__MsgAssignment_3)?
{ after(grammarAccess.getWarningDirectiveAccess().getMsgAssignment_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}










rule__UnDefineDirective__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnDefineDirective__Group__0__Impl
	rule__UnDefineDirective__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnDefineDirective__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getUnDefineDirectiveAccess().getUnDefineDirectiveAction_0()); }
(

)
{ after(grammarAccess.getUnDefineDirectiveAccess().getUnDefineDirectiveAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__UnDefineDirective__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnDefineDirective__Group__1__Impl
	rule__UnDefineDirective__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnDefineDirective__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getUnDefineDirectiveAccess().getUNDEFTerminalRuleCall_1()); }
	RULE_UNDEF
{ after(grammarAccess.getUnDefineDirectiveAccess().getUNDEFTerminalRuleCall_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__UnDefineDirective__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnDefineDirective__Group__2__Impl
	rule__UnDefineDirective__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__UnDefineDirective__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
(
{ before(grammarAccess.getUnDefineDirectiveAccess().getWHITESPACETerminalRuleCall_2()); }
(	RULE_WHITESPACE)
{ after(grammarAccess.getUnDefineDirectiveAccess().getWHITESPACETerminalRuleCall_2()); }
)
(
{ before(grammarAccess.getUnDefineDirectiveAccess().getWHITESPACETerminalRuleCall_2()); }
(	RULE_WHITESPACE)*
{ after(grammarAccess.getUnDefineDirectiveAccess().getWHITESPACETerminalRuleCall_2()); }
)
)



;
finally {
	restoreStackSize(stackSize);
}


rule__UnDefineDirective__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnDefineDirective__Group__3__Impl
	rule__UnDefineDirective__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__UnDefineDirective__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getUnDefineDirectiveAccess().getIdAssignment_3()); }
(rule__UnDefineDirective__IdAssignment_3)
{ after(grammarAccess.getUnDefineDirectiveAccess().getIdAssignment_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__UnDefineDirective__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnDefineDirective__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnDefineDirective__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getUnDefineDirectiveAccess().getWHITESPACETerminalRuleCall_4()); }
(	RULE_WHITESPACE)*
{ after(grammarAccess.getUnDefineDirectiveAccess().getWHITESPACETerminalRuleCall_4()); }
)



;
finally {
	restoreStackSize(stackSize);
}












rule__ConditionalDirective__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalDirective__Group__0__Impl
	rule__ConditionalDirective__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDirective__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getConditionalDirectiveAccess().getConditionalDirectiveAction_0()); }
(

)
{ after(grammarAccess.getConditionalDirectiveAccess().getConditionalDirectiveAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalDirective__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalDirective__Group__1__Impl
	rule__ConditionalDirective__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDirective__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getConditionalDirectiveAccess().getConditionalAssignment_1()); }
(rule__ConditionalDirective__ConditionalAssignment_1)
{ after(grammarAccess.getConditionalDirectiveAccess().getConditionalAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalDirective__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalDirective__Group__2__Impl
	rule__ConditionalDirective__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDirective__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getConditionalDirectiveAccess().getElifsAssignment_2()); }
(rule__ConditionalDirective__ElifsAssignment_2)*
{ after(grammarAccess.getConditionalDirectiveAccess().getElifsAssignment_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalDirective__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalDirective__Group__3__Impl
	rule__ConditionalDirective__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDirective__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getConditionalDirectiveAccess().getElseAssignment_3()); }
(rule__ConditionalDirective__ElseAssignment_3)?
{ after(grammarAccess.getConditionalDirectiveAccess().getElseAssignment_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalDirective__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalDirective__Group__4__Impl
	rule__ConditionalDirective__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDirective__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getConditionalDirectiveAccess().getWHITESPACETerminalRuleCall_4()); }
(	RULE_WHITESPACE)*
{ after(grammarAccess.getConditionalDirectiveAccess().getWHITESPACETerminalRuleCall_4()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalDirective__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalDirective__Group__5__Impl
	rule__ConditionalDirective__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDirective__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getConditionalDirectiveAccess().getHASHTerminalRuleCall_5()); }
	RULE_HASH
{ after(grammarAccess.getConditionalDirectiveAccess().getHASHTerminalRuleCall_5()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalDirective__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalDirective__Group__6__Impl
	rule__ConditionalDirective__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDirective__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getConditionalDirectiveAccess().getWHITESPACETerminalRuleCall_6()); }
(	RULE_WHITESPACE)*
{ after(grammarAccess.getConditionalDirectiveAccess().getWHITESPACETerminalRuleCall_6()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalDirective__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalDirective__Group__7__Impl
	rule__ConditionalDirective__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDirective__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getConditionalDirectiveAccess().getENDIFTerminalRuleCall_7()); }
	RULE_ENDIF
{ after(grammarAccess.getConditionalDirectiveAccess().getENDIFTerminalRuleCall_7()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalDirective__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalDirective__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDirective__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getConditionalDirectiveAccess().getWHITESPACETerminalRuleCall_8()); }
(	RULE_WHITESPACE)*
{ after(grammarAccess.getConditionalDirectiveAccess().getWHITESPACETerminalRuleCall_8()); }
)



;
finally {
	restoreStackSize(stackSize);
}




















rule__IfConditional__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfConditional__Group__0__Impl
	rule__IfConditional__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfConditional__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIfConditionalAccess().getIfConditionalAction_0()); }
(

)
{ after(grammarAccess.getIfConditionalAccess().getIfConditionalAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IfConditional__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfConditional__Group__1__Impl
	rule__IfConditional__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfConditional__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIfConditionalAccess().getIFTerminalRuleCall_1()); }
	RULE_IF
{ after(grammarAccess.getIfConditionalAccess().getIFTerminalRuleCall_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IfConditional__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfConditional__Group__2__Impl
	rule__IfConditional__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfConditional__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
(
{ before(grammarAccess.getIfConditionalAccess().getWHITESPACETerminalRuleCall_2()); }
(	RULE_WHITESPACE)
{ after(grammarAccess.getIfConditionalAccess().getWHITESPACETerminalRuleCall_2()); }
)
(
{ before(grammarAccess.getIfConditionalAccess().getWHITESPACETerminalRuleCall_2()); }
(	RULE_WHITESPACE)*
{ after(grammarAccess.getIfConditionalAccess().getWHITESPACETerminalRuleCall_2()); }
)
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IfConditional__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfConditional__Group__3__Impl
	rule__IfConditional__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfConditional__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIfConditionalAccess().getExpressionAssignment_3()); }
(rule__IfConditional__ExpressionAssignment_3)
{ after(grammarAccess.getIfConditionalAccess().getExpressionAssignment_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IfConditional__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfConditional__Group__4__Impl
	rule__IfConditional__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfConditional__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIfConditionalAccess().getWHITESPACETerminalRuleCall_4()); }
(	RULE_WHITESPACE)*
{ after(grammarAccess.getIfConditionalAccess().getWHITESPACETerminalRuleCall_4()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IfConditional__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfConditional__Group__5__Impl
	rule__IfConditional__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__IfConditional__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIfConditionalAccess().getNEWLINETerminalRuleCall_5()); }
	RULE_NEWLINE
{ after(grammarAccess.getIfConditionalAccess().getNEWLINETerminalRuleCall_5()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IfConditional__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfConditional__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfConditional__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIfConditionalAccess().getGroupAssignment_6()); }
(rule__IfConditional__GroupAssignment_6)
{ after(grammarAccess.getIfConditionalAccess().getGroupAssignment_6()); }
)



;
finally {
	restoreStackSize(stackSize);
}
















rule__IfDefConditional__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfDefConditional__Group__0__Impl
	rule__IfDefConditional__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfDefConditional__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIfDefConditionalAccess().getIfDefConditionalAction_0()); }
(

)
{ after(grammarAccess.getIfDefConditionalAccess().getIfDefConditionalAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IfDefConditional__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfDefConditional__Group__1__Impl
	rule__IfDefConditional__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfDefConditional__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIfDefConditionalAccess().getIFDEFTerminalRuleCall_1()); }
	RULE_IFDEF
{ after(grammarAccess.getIfDefConditionalAccess().getIFDEFTerminalRuleCall_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IfDefConditional__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfDefConditional__Group__2__Impl
	rule__IfDefConditional__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfDefConditional__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
(
{ before(grammarAccess.getIfDefConditionalAccess().getWHITESPACETerminalRuleCall_2()); }
(	RULE_WHITESPACE)
{ after(grammarAccess.getIfDefConditionalAccess().getWHITESPACETerminalRuleCall_2()); }
)
(
{ before(grammarAccess.getIfDefConditionalAccess().getWHITESPACETerminalRuleCall_2()); }
(	RULE_WHITESPACE)*
{ after(grammarAccess.getIfDefConditionalAccess().getWHITESPACETerminalRuleCall_2()); }
)
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IfDefConditional__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfDefConditional__Group__3__Impl
	rule__IfDefConditional__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfDefConditional__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIfDefConditionalAccess().getIdAssignment_3()); }
(rule__IfDefConditional__IdAssignment_3)
{ after(grammarAccess.getIfDefConditionalAccess().getIdAssignment_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IfDefConditional__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfDefConditional__Group__4__Impl
	rule__IfDefConditional__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfDefConditional__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIfDefConditionalAccess().getWHITESPACETerminalRuleCall_4()); }
(	RULE_WHITESPACE)*
{ after(grammarAccess.getIfDefConditionalAccess().getWHITESPACETerminalRuleCall_4()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IfDefConditional__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfDefConditional__Group__5__Impl
	rule__IfDefConditional__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__IfDefConditional__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIfDefConditionalAccess().getNEWLINETerminalRuleCall_5()); }
	RULE_NEWLINE
{ after(grammarAccess.getIfDefConditionalAccess().getNEWLINETerminalRuleCall_5()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IfDefConditional__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfDefConditional__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfDefConditional__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIfDefConditionalAccess().getGroupAssignment_6()); }
(rule__IfDefConditional__GroupAssignment_6)
{ after(grammarAccess.getIfDefConditionalAccess().getGroupAssignment_6()); }
)



;
finally {
	restoreStackSize(stackSize);
}
















rule__IfNotDefConditional__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfNotDefConditional__Group__0__Impl
	rule__IfNotDefConditional__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfNotDefConditional__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIfNotDefConditionalAccess().getIfNotDefConditionalAction_0()); }
(

)
{ after(grammarAccess.getIfNotDefConditionalAccess().getIfNotDefConditionalAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IfNotDefConditional__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfNotDefConditional__Group__1__Impl
	rule__IfNotDefConditional__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfNotDefConditional__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIfNotDefConditionalAccess().getIFNOTDEFTerminalRuleCall_1()); }
	RULE_IFNOTDEF
{ after(grammarAccess.getIfNotDefConditionalAccess().getIFNOTDEFTerminalRuleCall_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IfNotDefConditional__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfNotDefConditional__Group__2__Impl
	rule__IfNotDefConditional__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfNotDefConditional__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
(
{ before(grammarAccess.getIfNotDefConditionalAccess().getWHITESPACETerminalRuleCall_2()); }
(	RULE_WHITESPACE)
{ after(grammarAccess.getIfNotDefConditionalAccess().getWHITESPACETerminalRuleCall_2()); }
)
(
{ before(grammarAccess.getIfNotDefConditionalAccess().getWHITESPACETerminalRuleCall_2()); }
(	RULE_WHITESPACE)*
{ after(grammarAccess.getIfNotDefConditionalAccess().getWHITESPACETerminalRuleCall_2()); }
)
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IfNotDefConditional__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfNotDefConditional__Group__3__Impl
	rule__IfNotDefConditional__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfNotDefConditional__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIfNotDefConditionalAccess().getIdAssignment_3()); }
(rule__IfNotDefConditional__IdAssignment_3)
{ after(grammarAccess.getIfNotDefConditionalAccess().getIdAssignment_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IfNotDefConditional__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfNotDefConditional__Group__4__Impl
	rule__IfNotDefConditional__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfNotDefConditional__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIfNotDefConditionalAccess().getWHITESPACETerminalRuleCall_4()); }
(	RULE_WHITESPACE)*
{ after(grammarAccess.getIfNotDefConditionalAccess().getWHITESPACETerminalRuleCall_4()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IfNotDefConditional__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfNotDefConditional__Group__5__Impl
	rule__IfNotDefConditional__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__IfNotDefConditional__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIfNotDefConditionalAccess().getNEWLINETerminalRuleCall_5()); }
	RULE_NEWLINE
{ after(grammarAccess.getIfNotDefConditionalAccess().getNEWLINETerminalRuleCall_5()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IfNotDefConditional__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfNotDefConditional__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfNotDefConditional__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIfNotDefConditionalAccess().getGroupAssignment_6()); }
(rule__IfNotDefConditional__GroupAssignment_6)
{ after(grammarAccess.getIfNotDefConditionalAccess().getGroupAssignment_6()); }
)



;
finally {
	restoreStackSize(stackSize);
}
















rule__ElIfConditional__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElIfConditional__Group__0__Impl
	rule__ElIfConditional__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElIfConditional__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getElIfConditionalAccess().getElIfConditionalAction_0()); }
(

)
{ after(grammarAccess.getElIfConditionalAccess().getElIfConditionalAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ElIfConditional__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElIfConditional__Group__1__Impl
	rule__ElIfConditional__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ElIfConditional__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getElIfConditionalAccess().getGroup_1()); }
(rule__ElIfConditional__Group_1__0)
{ after(grammarAccess.getElIfConditionalAccess().getGroup_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ElIfConditional__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElIfConditional__Group__2__Impl
	rule__ElIfConditional__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ElIfConditional__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
(
{ before(grammarAccess.getElIfConditionalAccess().getWHITESPACETerminalRuleCall_2()); }
(	RULE_WHITESPACE)
{ after(grammarAccess.getElIfConditionalAccess().getWHITESPACETerminalRuleCall_2()); }
)
(
{ before(grammarAccess.getElIfConditionalAccess().getWHITESPACETerminalRuleCall_2()); }
(	RULE_WHITESPACE)*
{ after(grammarAccess.getElIfConditionalAccess().getWHITESPACETerminalRuleCall_2()); }
)
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ElIfConditional__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElIfConditional__Group__3__Impl
	rule__ElIfConditional__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ElIfConditional__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getElIfConditionalAccess().getExpressionAssignment_3()); }
(rule__ElIfConditional__ExpressionAssignment_3)
{ after(grammarAccess.getElIfConditionalAccess().getExpressionAssignment_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ElIfConditional__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElIfConditional__Group__4__Impl
	rule__ElIfConditional__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ElIfConditional__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getElIfConditionalAccess().getWHITESPACETerminalRuleCall_4()); }
(	RULE_WHITESPACE)*
{ after(grammarAccess.getElIfConditionalAccess().getWHITESPACETerminalRuleCall_4()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ElIfConditional__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElIfConditional__Group__5__Impl
	rule__ElIfConditional__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ElIfConditional__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getElIfConditionalAccess().getNEWLINETerminalRuleCall_5()); }
	RULE_NEWLINE
{ after(grammarAccess.getElIfConditionalAccess().getNEWLINETerminalRuleCall_5()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ElIfConditional__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElIfConditional__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElIfConditional__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getElIfConditionalAccess().getGroupAssignment_6()); }
(rule__ElIfConditional__GroupAssignment_6)
{ after(grammarAccess.getElIfConditionalAccess().getGroupAssignment_6()); }
)



;
finally {
	restoreStackSize(stackSize);
}
















rule__ElIfConditional__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElIfConditional__Group_1__0__Impl
	rule__ElIfConditional__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElIfConditional__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getElIfConditionalAccess().getWHITESPACETerminalRuleCall_1_0()); }
(	RULE_WHITESPACE)*
{ after(grammarAccess.getElIfConditionalAccess().getWHITESPACETerminalRuleCall_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ElIfConditional__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElIfConditional__Group_1__1__Impl
	rule__ElIfConditional__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ElIfConditional__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getElIfConditionalAccess().getHASHTerminalRuleCall_1_1()); }
	RULE_HASH
{ after(grammarAccess.getElIfConditionalAccess().getHASHTerminalRuleCall_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ElIfConditional__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElIfConditional__Group_1__2__Impl
	rule__ElIfConditional__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ElIfConditional__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getElIfConditionalAccess().getWHITESPACETerminalRuleCall_1_2()); }
(	RULE_WHITESPACE)*
{ after(grammarAccess.getElIfConditionalAccess().getWHITESPACETerminalRuleCall_1_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ElIfConditional__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElIfConditional__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElIfConditional__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getElIfConditionalAccess().getELIFTerminalRuleCall_1_3()); }
	RULE_ELIF
{ after(grammarAccess.getElIfConditionalAccess().getELIFTerminalRuleCall_1_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}










rule__ElseConditional__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElseConditional__Group__0__Impl
	rule__ElseConditional__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseConditional__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getElseConditionalAccess().getElseConditionalAction_0()); }
(

)
{ after(grammarAccess.getElseConditionalAccess().getElseConditionalAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ElseConditional__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElseConditional__Group__1__Impl
	rule__ElseConditional__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseConditional__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getElseConditionalAccess().getWHITESPACETerminalRuleCall_1()); }
(	RULE_WHITESPACE)*
{ after(grammarAccess.getElseConditionalAccess().getWHITESPACETerminalRuleCall_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ElseConditional__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElseConditional__Group__2__Impl
	rule__ElseConditional__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseConditional__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getElseConditionalAccess().getHASHTerminalRuleCall_2()); }
	RULE_HASH
{ after(grammarAccess.getElseConditionalAccess().getHASHTerminalRuleCall_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ElseConditional__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElseConditional__Group__3__Impl
	rule__ElseConditional__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseConditional__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getElseConditionalAccess().getWHITESPACETerminalRuleCall_3()); }
(	RULE_WHITESPACE)*
{ after(grammarAccess.getElseConditionalAccess().getWHITESPACETerminalRuleCall_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ElseConditional__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElseConditional__Group__4__Impl
	rule__ElseConditional__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseConditional__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getElseConditionalAccess().getELSETerminalRuleCall_4()); }
	RULE_ELSE
{ after(grammarAccess.getElseConditionalAccess().getELSETerminalRuleCall_4()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ElseConditional__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElseConditional__Group__5__Impl
	rule__ElseConditional__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseConditional__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getElseConditionalAccess().getWHITESPACETerminalRuleCall_5()); }
(	RULE_WHITESPACE)*
{ after(grammarAccess.getElseConditionalAccess().getWHITESPACETerminalRuleCall_5()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ElseConditional__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElseConditional__Group__6__Impl
	rule__ElseConditional__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseConditional__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getElseConditionalAccess().getNEWLINETerminalRuleCall_6()); }
	RULE_NEWLINE
{ after(grammarAccess.getElseConditionalAccess().getNEWLINETerminalRuleCall_6()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ElseConditional__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElseConditional__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseConditional__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getElseConditionalAccess().getGroupAssignment_7()); }
(rule__ElseConditional__GroupAssignment_7)
{ after(grammarAccess.getElseConditionalAccess().getGroupAssignment_7()); }
)



;
finally {
	restoreStackSize(stackSize);
}


















rule__PragmaDirective__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PragmaDirective__Group__0__Impl
	rule__PragmaDirective__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaDirective__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPragmaDirectiveAccess().getPragmaDirectiveAction_0()); }
(

)
{ after(grammarAccess.getPragmaDirectiveAccess().getPragmaDirectiveAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__PragmaDirective__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PragmaDirective__Group__1__Impl
	rule__PragmaDirective__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaDirective__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPragmaDirectiveAccess().getPRAGMATerminalRuleCall_1()); }
	RULE_PRAGMA
{ after(grammarAccess.getPragmaDirectiveAccess().getPRAGMATerminalRuleCall_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__PragmaDirective__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PragmaDirective__Group__2__Impl
	rule__PragmaDirective__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaDirective__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPragmaDirectiveAccess().getWHITESPACETerminalRuleCall_2()); }
(	RULE_WHITESPACE)*
{ after(grammarAccess.getPragmaDirectiveAccess().getWHITESPACETerminalRuleCall_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__PragmaDirective__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PragmaDirective__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaDirective__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPragmaDirectiveAccess().getPragmaAssignment_3()); }
(rule__PragmaDirective__PragmaAssignment_3)?
{ after(grammarAccess.getPragmaDirectiveAccess().getPragmaAssignment_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}










rule__Code__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Code__Group__0__Impl
	rule__Code__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Code__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getCodeAccess().getCodeAction_0()); }
(

)
{ after(grammarAccess.getCodeAccess().getCodeAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Code__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Code__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Code__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getCodeAccess().getCodeAssignment_1()); }
(rule__Code__CodeAssignment_1)
{ after(grammarAccess.getCodeAccess().getCodeAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__MyCodeLineExtendedNormal__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyCodeLineExtendedNormal__Group__0__Impl
	rule__MyCodeLineExtendedNormal__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MyCodeLineExtendedNormal__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getMyCodeLineExtendedNormalAccess().getWHITESPACETerminalRuleCall_0()); }
(	RULE_WHITESPACE)*
{ after(grammarAccess.getMyCodeLineExtendedNormalAccess().getWHITESPACETerminalRuleCall_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__MyCodeLineExtendedNormal__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyCodeLineExtendedNormal__Group__1__Impl
	rule__MyCodeLineExtendedNormal__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MyCodeLineExtendedNormal__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
(
{ before(grammarAccess.getMyCodeLineExtendedNormalAccess().getMyCodeParserRuleCall_1()); }
(	ruleMyCode)
{ after(grammarAccess.getMyCodeLineExtendedNormalAccess().getMyCodeParserRuleCall_1()); }
)
(
{ before(grammarAccess.getMyCodeLineExtendedNormalAccess().getMyCodeParserRuleCall_1()); }
(	ruleMyCode)*
{ after(grammarAccess.getMyCodeLineExtendedNormalAccess().getMyCodeParserRuleCall_1()); }
)
)



;
finally {
	restoreStackSize(stackSize);
}


rule__MyCodeLineExtendedNormal__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyCodeLineExtendedNormal__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MyCodeLineExtendedNormal__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getMyCodeLineExtendedNormalAccess().getAlternatives_2()); }
(rule__MyCodeLineExtendedNormal__Alternatives_2)*
{ after(grammarAccess.getMyCodeLineExtendedNormalAccess().getAlternatives_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__PrimaryExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group__0__Impl
	rule__PrimaryExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPrimaryExpressionAccess().getPrimaryExpressionAction_0()); }
(

)
{ after(grammarAccess.getPrimaryExpressionAccess().getPrimaryExpressionAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives_1()); }
(rule__PrimaryExpression__Alternatives_1)
{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__PrimaryExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_1_0__0__Impl
	rule__PrimaryExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPrimaryExpressionAccess().getDefinedAssignment_1_0_0()); }
(rule__PrimaryExpression__DefinedAssignment_1_0_0)?
{ after(grammarAccess.getPrimaryExpressionAccess().getDefinedAssignment_1_0_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPrimaryExpressionAccess().getIdAssignment_1_0_1()); }
(rule__PrimaryExpression__IdAssignment_1_0_1)
{ after(grammarAccess.getPrimaryExpressionAccess().getIdAssignment_1_0_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__PrimaryExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_1_1__0__Impl
	rule__PrimaryExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPrimaryExpressionAccess().getDefinedAssignment_1_1_0()); }
(rule__PrimaryExpression__DefinedAssignment_1_1_0)?
{ after(grammarAccess.getPrimaryExpressionAccess().getDefinedAssignment_1_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_1_1__1__Impl
	rule__PrimaryExpression__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPrimaryExpressionAccess().getSKW_LEFTPARENTerminalRuleCall_1_1_1()); }
	RULE_SKW_LEFTPAREN
{ after(grammarAccess.getPrimaryExpressionAccess().getSKW_LEFTPARENTerminalRuleCall_1_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_1_1__2__Impl
	rule__PrimaryExpression__Group_1_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPrimaryExpressionAccess().getIdAssignment_1_1_2()); }
(rule__PrimaryExpression__IdAssignment_1_1_2)
{ after(grammarAccess.getPrimaryExpressionAccess().getIdAssignment_1_1_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_1_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_1_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPrimaryExpressionAccess().getSKW_RIGHTPARENTerminalRuleCall_1_1_3()); }
	RULE_SKW_RIGHTPAREN
{ after(grammarAccess.getPrimaryExpressionAccess().getSKW_RIGHTPARENTerminalRuleCall_1_1_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}










rule__PrimaryExpression__Group_1_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_1_3__0__Impl
	rule__PrimaryExpression__Group_1_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPrimaryExpressionAccess().getParenthesesAssignment_1_3_0()); }
(rule__PrimaryExpression__ParenthesesAssignment_1_3_0)
{ after(grammarAccess.getPrimaryExpressionAccess().getParenthesesAssignment_1_3_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_1_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_1_3__1__Impl
	rule__PrimaryExpression__Group_1_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPrimaryExpressionAccess().getExprAssignment_1_3_1()); }
(rule__PrimaryExpression__ExprAssignment_1_3_1)
{ after(grammarAccess.getPrimaryExpressionAccess().getExprAssignment_1_3_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_1_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_1_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPrimaryExpressionAccess().getSKW_RIGHTPARENTerminalRuleCall_1_3_2()); }
	RULE_SKW_RIGHTPAREN
{ after(grammarAccess.getPrimaryExpressionAccess().getSKW_RIGHTPARENTerminalRuleCall_1_3_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__ConditionalExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group__0__Impl
	rule__ConditionalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getConditionalExpressionAccess().getLogicalOrExpressionParserRuleCall_0()); }
	ruleLogicalOrExpression
{ after(grammarAccess.getConditionalExpressionAccess().getLogicalOrExpressionParserRuleCall_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getConditionalExpressionAccess().getGroup_1()); }
(rule__ConditionalExpression__Group_1__0)?
{ after(grammarAccess.getConditionalExpressionAccess().getGroup_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__ConditionalExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group_1__0__Impl
	rule__ConditionalExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getConditionalExpressionAccess().getConditionalExpressionExprAction_1_0()); }
(

)
{ after(grammarAccess.getConditionalExpressionAccess().getConditionalExpressionExprAction_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group_1__1__Impl
	rule__ConditionalExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getConditionalExpressionAccess().getSKW_QUESTIONTerminalRuleCall_1_1()); }
	RULE_SKW_QUESTION
{ after(grammarAccess.getConditionalExpressionAccess().getSKW_QUESTIONTerminalRuleCall_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group_1__2__Impl
	rule__ConditionalExpression__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getConditionalExpressionAccess().getQExprAssignment_1_2()); }
(rule__ConditionalExpression__QExprAssignment_1_2)
{ after(grammarAccess.getConditionalExpressionAccess().getQExprAssignment_1_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group_1__3__Impl
	rule__ConditionalExpression__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getConditionalExpressionAccess().getSKW_COLONTerminalRuleCall_1_3()); }
	RULE_SKW_COLON
{ after(grammarAccess.getConditionalExpressionAccess().getSKW_COLONTerminalRuleCall_1_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getConditionalExpressionAccess().getCExprAssignment_1_4()); }
(rule__ConditionalExpression__CExprAssignment_1_4)
{ after(grammarAccess.getConditionalExpressionAccess().getCExprAssignment_1_4()); }
)



;
finally {
	restoreStackSize(stackSize);
}












rule__LogicalOrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group__0__Impl
	rule__LogicalOrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLogicalOrExpressionAccess().getLogicalAndExpressionParserRuleCall_0()); }
	ruleLogicalAndExpression
{ after(grammarAccess.getLogicalOrExpressionAccess().getLogicalAndExpressionParserRuleCall_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalOrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLogicalOrExpressionAccess().getGroup_1()); }
(rule__LogicalOrExpression__Group_1__0)*
{ after(grammarAccess.getLogicalOrExpressionAccess().getGroup_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalOrExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group_1__0__Impl
	rule__LogicalOrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLogicalOrExpressionAccess().getLogicalOrExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getLogicalOrExpressionAccess().getLogicalOrExpressionLeftAction_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalOrExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group_1__1__Impl
	rule__LogicalOrExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLogicalOrExpressionAccess().getSKW_ORORTerminalRuleCall_1_1()); }
	RULE_SKW_OROR
{ after(grammarAccess.getLogicalOrExpressionAccess().getSKW_ORORTerminalRuleCall_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalOrExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLogicalOrExpressionAccess().getRightAssignment_1_2()); }
(rule__LogicalOrExpression__RightAssignment_1_2)
{ after(grammarAccess.getLogicalOrExpressionAccess().getRightAssignment_1_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__LogicalAndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group__0__Impl
	rule__LogicalAndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLogicalAndExpressionAccess().getInclusiveOrExpressionParserRuleCall_0()); }
	ruleInclusiveOrExpression
{ after(grammarAccess.getLogicalAndExpressionAccess().getInclusiveOrExpressionParserRuleCall_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalAndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLogicalAndExpressionAccess().getGroup_1()); }
(rule__LogicalAndExpression__Group_1__0)*
{ after(grammarAccess.getLogicalAndExpressionAccess().getGroup_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalAndExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group_1__0__Impl
	rule__LogicalAndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLogicalAndExpressionAccess().getLogicalAndExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getLogicalAndExpressionAccess().getLogicalAndExpressionLeftAction_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalAndExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group_1__1__Impl
	rule__LogicalAndExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLogicalAndExpressionAccess().getSKW_ANDANDTerminalRuleCall_1_1()); }
	RULE_SKW_ANDAND
{ after(grammarAccess.getLogicalAndExpressionAccess().getSKW_ANDANDTerminalRuleCall_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalAndExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLogicalAndExpressionAccess().getRightAssignment_1_2()); }
(rule__LogicalAndExpression__RightAssignment_1_2)
{ after(grammarAccess.getLogicalAndExpressionAccess().getRightAssignment_1_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__InclusiveOrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InclusiveOrExpression__Group__0__Impl
	rule__InclusiveOrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InclusiveOrExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInclusiveOrExpressionAccess().getExclusiveOrExpressionParserRuleCall_0()); }
	ruleExclusiveOrExpression
{ after(grammarAccess.getInclusiveOrExpressionAccess().getExclusiveOrExpressionParserRuleCall_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__InclusiveOrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InclusiveOrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InclusiveOrExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInclusiveOrExpressionAccess().getGroup_1()); }
(rule__InclusiveOrExpression__Group_1__0)*
{ after(grammarAccess.getInclusiveOrExpressionAccess().getGroup_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__InclusiveOrExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InclusiveOrExpression__Group_1__0__Impl
	rule__InclusiveOrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InclusiveOrExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInclusiveOrExpressionAccess().getInclusiveOrExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getInclusiveOrExpressionAccess().getInclusiveOrExpressionLeftAction_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__InclusiveOrExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InclusiveOrExpression__Group_1__1__Impl
	rule__InclusiveOrExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InclusiveOrExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInclusiveOrExpressionAccess().getSKW_ORTerminalRuleCall_1_1()); }
	RULE_SKW_OR
{ after(grammarAccess.getInclusiveOrExpressionAccess().getSKW_ORTerminalRuleCall_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__InclusiveOrExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InclusiveOrExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InclusiveOrExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInclusiveOrExpressionAccess().getRightAssignment_1_2()); }
(rule__InclusiveOrExpression__RightAssignment_1_2)
{ after(grammarAccess.getInclusiveOrExpressionAccess().getRightAssignment_1_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__ExclusiveOrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExclusiveOrExpression__Group__0__Impl
	rule__ExclusiveOrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExclusiveOrExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getExclusiveOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
	ruleAndExpression
{ after(grammarAccess.getExclusiveOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ExclusiveOrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExclusiveOrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExclusiveOrExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getExclusiveOrExpressionAccess().getGroup_1()); }
(rule__ExclusiveOrExpression__Group_1__0)*
{ after(grammarAccess.getExclusiveOrExpressionAccess().getGroup_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__ExclusiveOrExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExclusiveOrExpression__Group_1__0__Impl
	rule__ExclusiveOrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExclusiveOrExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getExclusiveOrExpressionAccess().getExclusiveOrExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getExclusiveOrExpressionAccess().getExclusiveOrExpressionLeftAction_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ExclusiveOrExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExclusiveOrExpression__Group_1__1__Impl
	rule__ExclusiveOrExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExclusiveOrExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getExclusiveOrExpressionAccess().getSKW_CARETTerminalRuleCall_1_1()); }
	RULE_SKW_CARET
{ after(grammarAccess.getExclusiveOrExpressionAccess().getSKW_CARETTerminalRuleCall_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ExclusiveOrExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExclusiveOrExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExclusiveOrExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getExclusiveOrExpressionAccess().getRightAssignment_1_2()); }
(rule__ExclusiveOrExpression__RightAssignment_1_2)
{ after(grammarAccess.getExclusiveOrExpressionAccess().getRightAssignment_1_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__AndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAndExpressionAccess().getEqualityExpressionParserRuleCall_0()); }
	ruleEqualityExpression
{ after(grammarAccess.getAndExpressionAccess().getEqualityExpressionParserRuleCall_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAndExpressionAccess().getGroup_1()); }
(rule__AndExpression__Group_1__0)*
{ after(grammarAccess.getAndExpressionAccess().getGroup_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__0__Impl
	rule__AndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__1__Impl
	rule__AndExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAndExpressionAccess().getSKW_ANDTerminalRuleCall_1_1()); }
	RULE_SKW_AND
{ after(grammarAccess.getAndExpressionAccess().getSKW_ANDTerminalRuleCall_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2()); }
(rule__AndExpression__RightAssignment_1_2)
{ after(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__EqualityExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group__0__Impl
	rule__EqualityExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); }
	ruleRelationalExpression
{ after(grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getEqualityExpressionAccess().getGroup_1()); }
(rule__EqualityExpression__Group_1__0)*
{ after(grammarAccess.getEqualityExpressionAccess().getGroup_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__EqualityExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group_1__0__Impl
	rule__EqualityExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLeftAction_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group_1__1__Impl
	rule__EqualityExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getEqualityExpressionAccess().getAlternatives_1_1()); }
(rule__EqualityExpression__Alternatives_1_1)
{ after(grammarAccess.getEqualityExpressionAccess().getAlternatives_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getEqualityExpressionAccess().getRightAssignment_1_2()); }
(rule__EqualityExpression__RightAssignment_1_2)
{ after(grammarAccess.getEqualityExpressionAccess().getRightAssignment_1_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__RelationalExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group__0__Impl
	rule__RelationalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0()); }
	ruleShiftExpression
{ after(grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup_1()); }
(rule__RelationalExpression__Group_1__0)*
{ after(grammarAccess.getRelationalExpressionAccess().getGroup_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1__0__Impl
	rule__RelationalExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLeftAction_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1__1__Impl
	rule__RelationalExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getRelationalExpressionAccess().getAlternatives_1_1()); }
(rule__RelationalExpression__Alternatives_1_1)
{ after(grammarAccess.getRelationalExpressionAccess().getAlternatives_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getRelationalExpressionAccess().getRightAssignment_1_2()); }
(rule__RelationalExpression__RightAssignment_1_2)
{ after(grammarAccess.getRelationalExpressionAccess().getRightAssignment_1_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__ShiftExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftExpression__Group__0__Impl
	rule__ShiftExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getShiftExpressionAccess().getAdditiveExpressionParserRuleCall_0()); }
	ruleAdditiveExpression
{ after(grammarAccess.getShiftExpressionAccess().getAdditiveExpressionParserRuleCall_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ShiftExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getShiftExpressionAccess().getGroup_1()); }
(rule__ShiftExpression__Group_1__0)*
{ after(grammarAccess.getShiftExpressionAccess().getGroup_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__ShiftExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftExpression__Group_1__0__Impl
	rule__ShiftExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getShiftExpressionAccess().getShiftExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getShiftExpressionAccess().getShiftExpressionLeftAction_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ShiftExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftExpression__Group_1__1__Impl
	rule__ShiftExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getShiftExpressionAccess().getAlternatives_1_1()); }
(rule__ShiftExpression__Alternatives_1_1)
{ after(grammarAccess.getShiftExpressionAccess().getAlternatives_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ShiftExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getShiftExpressionAccess().getRightAssignment_1_2()); }
(rule__ShiftExpression__RightAssignment_1_2)
{ after(grammarAccess.getShiftExpressionAccess().getRightAssignment_1_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__AdditiveExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group__0__Impl
	rule__AdditiveExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); }
	ruleMultiplicativeExpression
{ after(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup_1()); }
(rule__AdditiveExpression__Group_1__0)*
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1__0__Impl
	rule__AdditiveExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftAction_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1__1__Impl
	rule__AdditiveExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAdditiveExpressionAccess().getAlternatives_1_1()); }
(rule__AdditiveExpression__Alternatives_1_1)
{ after(grammarAccess.getAdditiveExpressionAccess().getAlternatives_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAdditiveExpressionAccess().getRightAssignment_1_2()); }
(rule__AdditiveExpression__RightAssignment_1_2)
{ after(grammarAccess.getAdditiveExpressionAccess().getRightAssignment_1_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__MultiplicativeExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group__0__Impl
	rule__MultiplicativeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getCastExpressionParserRuleCall_0()); }
	ruleCastExpression
{ after(grammarAccess.getMultiplicativeExpressionAccess().getCastExpressionParserRuleCall_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1()); }
(rule__MultiplicativeExpression__Group_1__0)*
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicativeExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1__0__Impl
	rule__MultiplicativeExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftAction_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1__1__Impl
	rule__MultiplicativeExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getAlternatives_1_1()); }
(rule__MultiplicativeExpression__Alternatives_1_1)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getAlternatives_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getRightAssignment_1_2()); }
(rule__MultiplicativeExpression__RightAssignment_1_2)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getRightAssignment_1_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__UnaryExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_1__0__Impl
	rule__UnaryExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getUnaryExpressionAccess().getUnaryExpressionAction_1_0()); }
(

)
{ after(grammarAccess.getUnaryExpressionAccess().getUnaryExpressionAction_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_1__1__Impl
	rule__UnaryExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getUnaryExpressionAccess().getOpAssignment_1_1()); }
(rule__UnaryExpression__OpAssignment_1_1)
{ after(grammarAccess.getUnaryExpressionAccess().getOpAssignment_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getUnaryExpressionAccess().getExprAssignment_1_2()); }
(rule__UnaryExpression__ExprAssignment_1_2)
{ after(grammarAccess.getUnaryExpressionAccess().getExprAssignment_1_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__PostfixExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixExpression__Group__0__Impl
	rule__PostfixExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPostfixExpressionAccess().getPrimaryExpressionParserRuleCall_0()); }
	rulePrimaryExpression
{ after(grammarAccess.getPostfixExpressionAccess().getPrimaryExpressionParserRuleCall_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__PostfixExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPostfixExpressionAccess().getGroup_1()); }
(rule__PostfixExpression__Group_1__0)*
{ after(grammarAccess.getPostfixExpressionAccess().getGroup_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__PostfixExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixExpression__Group_1__0__Impl
	rule__PostfixExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPostfixExpressionAccess().getPostfixExpressionExprAction_1_0()); }
(

)
{ after(grammarAccess.getPostfixExpressionAccess().getPostfixExpressionExprAction_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__PostfixExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPostfixExpressionAccess().getSuffixAssignment_1_1()); }
(rule__PostfixExpression__SuffixAssignment_1_1)
{ after(grammarAccess.getPostfixExpressionAccess().getSuffixAssignment_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__PostfixExpressionSuffixArgument__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixExpressionSuffixArgument__Group__0__Impl
	rule__PostfixExpressionSuffixArgument__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpressionSuffixArgument__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPostfixExpressionSuffixArgumentAccess().getPostfixExpressionSuffixArgumentAction_0()); }
(

)
{ after(grammarAccess.getPostfixExpressionSuffixArgumentAccess().getPostfixExpressionSuffixArgumentAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__PostfixExpressionSuffixArgument__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixExpressionSuffixArgument__Group__1__Impl
	rule__PostfixExpressionSuffixArgument__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpressionSuffixArgument__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPostfixExpressionSuffixArgumentAccess().getSKW_LEFTPARENTerminalRuleCall_1()); }
	RULE_SKW_LEFTPAREN
{ after(grammarAccess.getPostfixExpressionSuffixArgumentAccess().getSKW_LEFTPARENTerminalRuleCall_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__PostfixExpressionSuffixArgument__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixExpressionSuffixArgument__Group__2__Impl
	rule__PostfixExpressionSuffixArgument__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpressionSuffixArgument__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPostfixExpressionSuffixArgumentAccess().getArgumentExpressionListAssignment_2()); }
(rule__PostfixExpressionSuffixArgument__ArgumentExpressionListAssignment_2)?
{ after(grammarAccess.getPostfixExpressionSuffixArgumentAccess().getArgumentExpressionListAssignment_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__PostfixExpressionSuffixArgument__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixExpressionSuffixArgument__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpressionSuffixArgument__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPostfixExpressionSuffixArgumentAccess().getSKW_RIGHTPARENTerminalRuleCall_3()); }
	RULE_SKW_RIGHTPAREN
{ after(grammarAccess.getPostfixExpressionSuffixArgumentAccess().getSKW_RIGHTPARENTerminalRuleCall_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}










rule__ArgumentExpressionList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArgumentExpressionList__Group__0__Impl
	rule__ArgumentExpressionList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentExpressionList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getArgumentExpressionListAccess().getExprAssignment_0()); }
(rule__ArgumentExpressionList__ExprAssignment_0)
{ after(grammarAccess.getArgumentExpressionListAccess().getExprAssignment_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ArgumentExpressionList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArgumentExpressionList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentExpressionList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getArgumentExpressionListAccess().getGroup_1()); }
(rule__ArgumentExpressionList__Group_1__0)*
{ after(grammarAccess.getArgumentExpressionListAccess().getGroup_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__ArgumentExpressionList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArgumentExpressionList__Group_1__0__Impl
	rule__ArgumentExpressionList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentExpressionList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getArgumentExpressionListAccess().getSKW_COMMATerminalRuleCall_1_0()); }
	RULE_SKW_COMMA
{ after(grammarAccess.getArgumentExpressionListAccess().getSKW_COMMATerminalRuleCall_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ArgumentExpressionList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArgumentExpressionList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentExpressionList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getArgumentExpressionListAccess().getExprAssignment_1_1()); }
(rule__ArgumentExpressionList__ExprAssignment_1_1)
{ after(grammarAccess.getArgumentExpressionListAccess().getExprAssignment_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}







rule__Ellipsis__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ellipsis__Group__0__Impl
	rule__Ellipsis__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Ellipsis__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getEllipsisAccess().getSKW_DOTTerminalRuleCall_0()); }
	RULE_SKW_DOT
{ after(grammarAccess.getEllipsisAccess().getSKW_DOTTerminalRuleCall_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Ellipsis__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ellipsis__Group__1__Impl
	rule__Ellipsis__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Ellipsis__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getEllipsisAccess().getSKW_DOTTerminalRuleCall_1()); }
	RULE_SKW_DOT
{ after(grammarAccess.getEllipsisAccess().getSKW_DOTTerminalRuleCall_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Ellipsis__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ellipsis__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Ellipsis__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getEllipsisAccess().getSKW_DOTTerminalRuleCall_2()); }
	RULE_SKW_DOT
{ after(grammarAccess.getEllipsisAccess().getSKW_DOTTerminalRuleCall_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}









rule__Preprocess__GroupAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreprocessAccess().getGroupGroupOpt2ParserRuleCall_1_0()); }
	ruleGroupOpt2{ after(grammarAccess.getPreprocessAccess().getGroupGroupOpt2ParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroupOpt__LinesAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupOptAccess().getLinesGroupOptTemp1ParserRuleCall_1_0_0()); }
	ruleGroupOptTemp1{ after(grammarAccess.getGroupOptAccess().getLinesGroupOptTemp1ParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroupOpt2__LinesAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupOpt2Access().getLinesGroupOptTemp1ParserRuleCall_1_0_0()); }
	ruleGroupOptTemp1{ after(grammarAccess.getGroupOpt2Access().getLinesGroupOptTemp1ParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroupOpt2__LinesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupOpt2Access().getLinesGroupOptTemp2ParserRuleCall_2_0()); }
	ruleGroupOptTemp2{ after(grammarAccess.getGroupOpt2Access().getLinesGroupOptTemp2ParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PreprocessorDirectives__DirectiveAssignment_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveIncludeDirectiveParserRuleCall_4_0_0()); }
	ruleIncludeDirective{ after(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveIncludeDirectiveParserRuleCall_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PreprocessorDirectives__DirectiveAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveDefineDirectiveParserRuleCall_4_1_0()); }
	ruleDefineDirective{ after(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveDefineDirectiveParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PreprocessorDirectives__DirectiveAssignment_4_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveLineDirectiveParserRuleCall_4_2_0()); }
	ruleLineDirective{ after(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveLineDirectiveParserRuleCall_4_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PreprocessorDirectives__DirectiveAssignment_4_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveErrorDirectiveParserRuleCall_4_3_0()); }
	ruleErrorDirective{ after(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveErrorDirectiveParserRuleCall_4_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PreprocessorDirectives__DirectiveAssignment_4_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveWarningDirectiveParserRuleCall_4_4_0()); }
	ruleWarningDirective{ after(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveWarningDirectiveParserRuleCall_4_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PreprocessorDirectives__DirectiveAssignment_4_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveUnDefineDirectiveParserRuleCall_4_5_0()); }
	ruleUnDefineDirective{ after(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveUnDefineDirectiveParserRuleCall_4_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PreprocessorDirectives__DirectiveAssignment_4_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveConditionalDirectiveParserRuleCall_4_6_0()); }
	ruleConditionalDirective{ after(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveConditionalDirectiveParserRuleCall_4_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PreprocessorDirectives__DirectiveAssignment_4_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreprocessorDirectivesAccess().getDirectivePragmaDirectiveParserRuleCall_4_7_0()); }
	rulePragmaDirective{ after(grammarAccess.getPreprocessorDirectivesAccess().getDirectivePragmaDirectiveParserRuleCall_4_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PreprocessorDirectives__DirectiveAssignment_4_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveNullDirectiveParserRuleCall_4_8_0()); }
	ruleNullDirective{ after(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveNullDirectiveParserRuleCall_4_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IncludeDirective__NextAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeDirectiveAccess().getNextINCLUDE_NEXTTerminalRuleCall_1_1_0()); }
	RULE_INCLUDE_NEXT{ after(grammarAccess.getIncludeDirectiveAccess().getNextINCLUDE_NEXTTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IncludeDirective__StringAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeDirectiveAccess().getStringMyCodeLineParserRuleCall_3_0()); }
	ruleMyCodeLine{ after(grammarAccess.getIncludeDirectiveAccess().getStringMyCodeLineParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DefineObjectMacro__IdAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefineObjectMacroAccess().getIdMyCodeParserRuleCall_3_0()); }
	ruleMyCode{ after(grammarAccess.getDefineObjectMacroAccess().getIdMyCodeParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DefineObjectMacro__StringAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefineObjectMacroAccess().getStringMyDefineLineObjectParserRuleCall_4_1_0()); }
	ruleMyDefineLineObject{ after(grammarAccess.getDefineObjectMacroAccess().getStringMyDefineLineObjectParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DefineFunctionLikeMacro__IdAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefineFunctionLikeMacroAccess().getIdMyCodeParserRuleCall_3_0()); }
	ruleMyCode{ after(grammarAccess.getDefineFunctionLikeMacroAccess().getIdMyCodeParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DefineFunctionLikeMacro__ListAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefineFunctionLikeMacroAccess().getListIdentifierListParserRuleCall_6_0()); }
	ruleIdentifierList{ after(grammarAccess.getDefineFunctionLikeMacroAccess().getListIdentifierListParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DefineFunctionLikeMacro__StringAssignment_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefineFunctionLikeMacroAccess().getStringMyDefineLineFunctionParserRuleCall_8_0()); }
	ruleMyDefineLineFunction{ after(grammarAccess.getDefineFunctionLikeMacroAccess().getStringMyDefineLineFunctionParserRuleCall_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__IdAssignment_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentifierListAccess().getIdIDTerminalRuleCall_1_0_0_0()); }
	RULE_ID{ after(grammarAccess.getIdentifierListAccess().getIdIDTerminalRuleCall_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__IdAssignment_1_0_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentifierListAccess().getIdIDTerminalRuleCall_1_0_1_3_0()); }
	RULE_ID{ after(grammarAccess.getIdentifierListAccess().getIdIDTerminalRuleCall_1_0_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__VariadicAssignment_1_0_3_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentifierListAccess().getVariadicEllipsisParserRuleCall_1_0_3_2_0_0()); }
	ruleEllipsis{ after(grammarAccess.getIdentifierListAccess().getVariadicEllipsisParserRuleCall_1_0_3_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__VarIDAssignment_1_0_3_2_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentifierListAccess().getVarIDIDTerminalRuleCall_1_0_3_2_1_0_0()); }
	RULE_ID{ after(grammarAccess.getIdentifierListAccess().getVarIDIDTerminalRuleCall_1_0_3_2_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__VariadicAssignment_1_0_3_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentifierListAccess().getVariadicEllipsisParserRuleCall_1_0_3_2_1_1_0()); }
	ruleEllipsis{ after(grammarAccess.getIdentifierListAccess().getVariadicEllipsisParserRuleCall_1_0_3_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__VarIDAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentifierListAccess().getVarIDIDTerminalRuleCall_1_1_0_0()); }
	RULE_ID{ after(grammarAccess.getIdentifierListAccess().getVarIDIDTerminalRuleCall_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__VariadicAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentifierListAccess().getVariadicEllipsisParserRuleCall_1_1_1_0()); }
	ruleEllipsis{ after(grammarAccess.getIdentifierListAccess().getVariadicEllipsisParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LineDirective__LineAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLineDirectiveAccess().getLineMyCodeParserRuleCall_3_0()); }
	ruleMyCode{ after(grammarAccess.getLineDirectiveAccess().getLineMyCodeParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LineDirective__PathAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLineDirectiveAccess().getPathMyDefineLineObjectParserRuleCall_4_1_0()); }
	ruleMyDefineLineObject{ after(grammarAccess.getLineDirectiveAccess().getPathMyDefineLineObjectParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorDirective__MsgAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getErrorDirectiveAccess().getMsgMyCodeLineParserRuleCall_3_0()); }
	ruleMyCodeLine{ after(grammarAccess.getErrorDirectiveAccess().getMsgMyCodeLineParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WarningDirective__MsgAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWarningDirectiveAccess().getMsgMyCodeLineParserRuleCall_3_0()); }
	ruleMyCodeLine{ after(grammarAccess.getWarningDirectiveAccess().getMsgMyCodeLineParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnDefineDirective__IdAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnDefineDirectiveAccess().getIdIDTerminalRuleCall_3_0()); }
	RULE_ID{ after(grammarAccess.getUnDefineDirectiveAccess().getIdIDTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDirective__ConditionalAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalDirectiveAccess().getConditionalAlternatives_1_0()); }
(rule__ConditionalDirective__ConditionalAlternatives_1_0)
{ after(grammarAccess.getConditionalDirectiveAccess().getConditionalAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDirective__ElifsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalDirectiveAccess().getElifsElIfConditionalParserRuleCall_2_0()); }
	ruleElIfConditional{ after(grammarAccess.getConditionalDirectiveAccess().getElifsElIfConditionalParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDirective__ElseAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalDirectiveAccess().getElseElseConditionalParserRuleCall_3_0()); }
	ruleElseConditional{ after(grammarAccess.getConditionalDirectiveAccess().getElseElseConditionalParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfConditional__ExpressionAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfConditionalAccess().getExpressionExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getIfConditionalAccess().getExpressionExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfConditional__GroupAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfConditionalAccess().getGroupGroupOptParserRuleCall_6_0()); }
	ruleGroupOpt{ after(grammarAccess.getIfConditionalAccess().getGroupGroupOptParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfDefConditional__IdAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfDefConditionalAccess().getIdIDTerminalRuleCall_3_0()); }
	RULE_ID{ after(grammarAccess.getIfDefConditionalAccess().getIdIDTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfDefConditional__GroupAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfDefConditionalAccess().getGroupGroupOptParserRuleCall_6_0()); }
	ruleGroupOpt{ after(grammarAccess.getIfDefConditionalAccess().getGroupGroupOptParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfNotDefConditional__IdAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfNotDefConditionalAccess().getIdIDTerminalRuleCall_3_0()); }
	RULE_ID{ after(grammarAccess.getIfNotDefConditionalAccess().getIdIDTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfNotDefConditional__GroupAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfNotDefConditionalAccess().getGroupGroupOptParserRuleCall_6_0()); }
	ruleGroupOpt{ after(grammarAccess.getIfNotDefConditionalAccess().getGroupGroupOptParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ElIfConditional__ExpressionAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElIfConditionalAccess().getExpressionExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getElIfConditionalAccess().getExpressionExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ElIfConditional__GroupAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElIfConditionalAccess().getGroupGroupOptParserRuleCall_6_0()); }
	ruleGroupOpt{ after(grammarAccess.getElIfConditionalAccess().getGroupGroupOptParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ElseConditional__GroupAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElseConditionalAccess().getGroupGroupOptParserRuleCall_7_0()); }
	ruleGroupOpt{ after(grammarAccess.getElseConditionalAccess().getGroupGroupOptParserRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaDirective__PragmaAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPragmaDirectiveAccess().getPragmaMyCodeLineParserRuleCall_3_0()); }
	ruleMyCodeLine{ after(grammarAccess.getPragmaDirectiveAccess().getPragmaMyCodeLineParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Code__CodeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCodeAccess().getCodeMyCodeLineExtendedParserRuleCall_1_0()); }
	ruleMyCodeLineExtended{ after(grammarAccess.getCodeAccess().getCodeMyCodeLineExtendedParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__DefinedAssignment_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getDefinedDEFINEDTerminalRuleCall_1_0_0_0()); }
	RULE_DEFINED{ after(grammarAccess.getPrimaryExpressionAccess().getDefinedDEFINEDTerminalRuleCall_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__IdAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getIdIDTerminalRuleCall_1_0_1_0()); }
	RULE_ID{ after(grammarAccess.getPrimaryExpressionAccess().getIdIDTerminalRuleCall_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__DefinedAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getDefinedDEFINEDTerminalRuleCall_1_1_0_0()); }
	RULE_DEFINED{ after(grammarAccess.getPrimaryExpressionAccess().getDefinedDEFINEDTerminalRuleCall_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__IdAssignment_1_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getIdIDTerminalRuleCall_1_1_2_0()); }
	RULE_ID{ after(grammarAccess.getPrimaryExpressionAccess().getIdIDTerminalRuleCall_1_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__ConstAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getConstConstant1ParserRuleCall_1_2_0()); }
	ruleConstant1{ after(grammarAccess.getPrimaryExpressionAccess().getConstConstant1ParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__ParenthesesAssignment_1_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getParenthesesSKW_LEFTPARENTerminalRuleCall_1_3_0_0()); }
	RULE_SKW_LEFTPAREN{ after(grammarAccess.getPrimaryExpressionAccess().getParenthesesSKW_LEFTPARENTerminalRuleCall_1_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__ExprAssignment_1_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getExprExpressionParserRuleCall_1_3_1_0()); }
	ruleExpression{ after(grammarAccess.getPrimaryExpressionAccess().getExprExpressionParserRuleCall_1_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__QExprAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getQExprExpressionParserRuleCall_1_2_0()); }
	ruleExpression{ after(grammarAccess.getConditionalExpressionAccess().getQExprExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__CExprAssignment_1_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getCExprConditionalExpressionParserRuleCall_1_4_0()); }
	ruleConditionalExpression{ after(grammarAccess.getConditionalExpressionAccess().getCExprConditionalExpressionParserRuleCall_1_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getRightLogicalAndExpressionParserRuleCall_1_2_0()); }
	ruleLogicalAndExpression{ after(grammarAccess.getLogicalOrExpressionAccess().getRightLogicalAndExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getRightInclusiveOrExpressionParserRuleCall_1_2_0()); }
	ruleInclusiveOrExpression{ after(grammarAccess.getLogicalAndExpressionAccess().getRightInclusiveOrExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InclusiveOrExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInclusiveOrExpressionAccess().getRightExclusiveOrExpressionParserRuleCall_1_2_0()); }
	ruleExclusiveOrExpression{ after(grammarAccess.getInclusiveOrExpressionAccess().getRightExclusiveOrExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExclusiveOrExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExclusiveOrExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); }
	ruleAndExpression{ after(grammarAccess.getExclusiveOrExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getRightEqualityExpressionParserRuleCall_1_2_0()); }
	ruleEqualityExpression{ after(grammarAccess.getAndExpressionAccess().getRightEqualityExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__OpAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getOpSKW_EQUALTerminalRuleCall_1_1_0_0()); }
	RULE_SKW_EQUAL{ after(grammarAccess.getEqualityExpressionAccess().getOpSKW_EQUALTerminalRuleCall_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__OpAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getOpSKW_NOTEQUALTerminalRuleCall_1_1_1_0()); }
	RULE_SKW_NOTEQUAL{ after(grammarAccess.getEqualityExpressionAccess().getOpSKW_NOTEQUALTerminalRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getRightRelationalExpressionParserRuleCall_1_2_0()); }
	ruleRelationalExpression{ after(grammarAccess.getEqualityExpressionAccess().getRightRelationalExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__OpAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOpSKW_LESSTerminalRuleCall_1_1_0_0()); }
	RULE_SKW_LESS{ after(grammarAccess.getRelationalExpressionAccess().getOpSKW_LESSTerminalRuleCall_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__OpAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOpSKW_GREATERTerminalRuleCall_1_1_1_0()); }
	RULE_SKW_GREATER{ after(grammarAccess.getRelationalExpressionAccess().getOpSKW_GREATERTerminalRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__OpAssignment_1_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOpSKW_LESSEQUALTerminalRuleCall_1_1_2_0()); }
	RULE_SKW_LESSEQUAL{ after(grammarAccess.getRelationalExpressionAccess().getOpSKW_LESSEQUALTerminalRuleCall_1_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__OpAssignment_1_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOpSKW_GREATEREQUALTerminalRuleCall_1_1_3_0()); }
	RULE_SKW_GREATEREQUAL{ after(grammarAccess.getRelationalExpressionAccess().getOpSKW_GREATEREQUALTerminalRuleCall_1_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRightShiftExpressionParserRuleCall_1_2_0()); }
	ruleShiftExpression{ after(grammarAccess.getRelationalExpressionAccess().getRightShiftExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__OpAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftExpressionAccess().getOpSKW_LEFTSHIFTTerminalRuleCall_1_1_0_0()); }
	RULE_SKW_LEFTSHIFT{ after(grammarAccess.getShiftExpressionAccess().getOpSKW_LEFTSHIFTTerminalRuleCall_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__OpAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftExpressionAccess().getOpSKW_RIGHTSHIFTTerminalRuleCall_1_1_1_0()); }
	RULE_SKW_RIGHTSHIFT{ after(grammarAccess.getShiftExpressionAccess().getOpSKW_RIGHTSHIFTTerminalRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftExpressionAccess().getRightAdditiveExpressionParserRuleCall_1_2_0()); }
	ruleAdditiveExpression{ after(grammarAccess.getShiftExpressionAccess().getRightAdditiveExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__OpAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOpSKW_PLUSTerminalRuleCall_1_1_0_0()); }
	RULE_SKW_PLUS{ after(grammarAccess.getAdditiveExpressionAccess().getOpSKW_PLUSTerminalRuleCall_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__OpAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOpSKW_MINUSTerminalRuleCall_1_1_1_0()); }
	RULE_SKW_MINUS{ after(grammarAccess.getAdditiveExpressionAccess().getOpSKW_MINUSTerminalRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getRightMultiplicativeExpressionParserRuleCall_1_2_0()); }
	ruleMultiplicativeExpression{ after(grammarAccess.getAdditiveExpressionAccess().getRightMultiplicativeExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__OpAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpSKW_STARTerminalRuleCall_1_1_0_0()); }
	RULE_SKW_STAR{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpSKW_STARTerminalRuleCall_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__OpAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpSKW_DIVTerminalRuleCall_1_1_1_0()); }
	RULE_SKW_DIV{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpSKW_DIVTerminalRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__OpAssignment_1_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpSKW_MODTerminalRuleCall_1_1_2_0()); }
	RULE_SKW_MOD{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpSKW_MODTerminalRuleCall_1_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getRightCastExpressionParserRuleCall_1_2_0()); }
	ruleCastExpression{ after(grammarAccess.getMultiplicativeExpressionAccess().getRightCastExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getOpUnaryOperatorParserRuleCall_1_1_0()); }
	ruleUnaryOperator{ after(grammarAccess.getUnaryExpressionAccess().getOpUnaryOperatorParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__ExprAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getExprCastExpressionParserRuleCall_1_2_0()); }
	ruleCastExpression{ after(grammarAccess.getUnaryExpressionAccess().getExprCastExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpression__SuffixAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixExpressionAccess().getSuffixPostfixExpressionSuffixArgumentParserRuleCall_1_1_0()); }
	rulePostfixExpressionSuffixArgument{ after(grammarAccess.getPostfixExpressionAccess().getSuffixPostfixExpressionSuffixArgumentParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpressionSuffixArgument__ArgumentExpressionListAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixExpressionSuffixArgumentAccess().getArgumentExpressionListArgumentExpressionListParserRuleCall_2_0()); }
	ruleArgumentExpressionList{ after(grammarAccess.getPostfixExpressionSuffixArgumentAccess().getArgumentExpressionListArgumentExpressionListParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentExpressionList__ExprAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentExpressionListAccess().getExprConditionalExpressionParserRuleCall_0_0()); }
	ruleConditionalExpression{ after(grammarAccess.getArgumentExpressionListAccess().getExprConditionalExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentExpressionList__ExprAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentExpressionListAccess().getExprConditionalExpressionParserRuleCall_1_1_0()); }
	ruleConditionalExpression{ after(grammarAccess.getArgumentExpressionListAccess().getExprConditionalExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}








RULE_HASH : '#';

RULE_INCLUDE : 'include';

RULE_INCLUDE_NEXT : RULE_INCLUDE RULE_SKW_UNDERSCORE 'next';

RULE_DEFINE : 'define';

RULE_LINE : 'line';

RULE_ERROR : 'error';

RULE_WARNING : 'warning';

RULE_UNDEF : 'undef';

RULE_IF : 'if';

RULE_DEFINED : 'defined';

RULE_IFDEF : 'ifdef';

RULE_IFNOTDEF : 'ifndef';

RULE_ELIF : 'elif';

RULE_ELSE : 'else';

RULE_ENDIF : 'endif';

RULE_PRAGMA : 'pragma';

RULE_VA_ARGS : RULE_SKW_UNDERSCORE RULE_SKW_UNDERSCORE 'VA_ARGS' RULE_SKW_UNDERSCORE RULE_SKW_UNDERSCORE;

RULE_NEWLINE : SUPER_NEWLINE;

RULE_SKW_AND : '&';

RULE_SKW_ANDAND : RULE_SKW_AND RULE_SKW_AND;

RULE_SKW_ASSIGN : '=';

RULE_SKW_BACKSLASH : '\\';

RULE_SKW_CARET : '^';

RULE_SKW_COMMA : ',';

RULE_SKW_COLON : ':';

RULE_SKW_DIV : '/';

fragment RULE_SKW_DOLLAR : '$';

RULE_SKW_DOT : '.';

RULE_SKW_DOUBLEQUOTE : '"';

RULE_SKW_EQUAL : RULE_SKW_ASSIGN RULE_SKW_ASSIGN;

RULE_SKW_GREATER : '>';

RULE_SKW_GREATEREQUAL : RULE_SKW_GREATER RULE_SKW_ASSIGN;

RULE_SKW_LEFTBRACE : '{';

RULE_SKW_LEFTBRACKET : '[';

RULE_SKW_LEFTPAREN : '(';

RULE_SKW_LEFTSHIFT : RULE_SKW_LESS RULE_SKW_LESS;

RULE_SKW_LESS : '<';

RULE_SKW_LESSEQUAL : RULE_SKW_LESS RULE_SKW_ASSIGN;

RULE_SKW_MINUS : '-';

RULE_SKW_MINUSMINUS : RULE_SKW_MINUS RULE_SKW_MINUS;

RULE_SKW_MOD : '%';

RULE_SKW_NOT : '!';

RULE_SKW_NOTEQUAL : RULE_SKW_NOT RULE_SKW_ASSIGN;

RULE_SKW_OR : '|';

RULE_SKW_OROR : RULE_SKW_OR RULE_SKW_OR;

RULE_SKW_PLUS : '+';

RULE_SKW_PLUSPLUS : RULE_SKW_PLUS RULE_SKW_PLUS;

RULE_SKW_QUESTION : '?';

RULE_SKW_RIGHTBRACE : '}';

RULE_SKW_RIGHTBRACKET : ']';

RULE_SKW_RIGHTPAREN : ')';

RULE_SKW_RIGHTSHIFT : RULE_SKW_GREATER RULE_SKW_GREATER;

RULE_SKW_SEMI : ';';

RULE_SKW_SINGLEQUOTE : '\'';

RULE_SKW_STAR : '*';

RULE_SKW_TILDE : '~';

fragment RULE_SKW_UNDERSCORE : '_';

RULE_ID : RULE_IDENTIFIER;

fragment RULE_IDENTIFIER : RULE_LETTER (RULE_LETTER|'0'..'9')*;

fragment RULE_LETTER : (RULE_SKW_DOLLAR|'A'..'Z'|'a'..'z'|RULE_SKW_UNDERSCORE);

RULE_CHAR_LITERAL : 'L'? RULE_SKW_SINGLEQUOTE (RULE_ESCAPE_SEQUENCE|~((RULE_SKW_SINGLEQUOTE|RULE_SKW_BACKSLASH))) RULE_SKW_SINGLEQUOTE;

RULE_STRING_LITERAL : RULE_SKW_DOUBLEQUOTE (RULE_ESCAPE_SEQUENCE|~((RULE_SKW_BACKSLASH|RULE_SKW_DOUBLEQUOTE)))* RULE_SKW_DOUBLEQUOTE;

RULE_HEX_LITERAL : '0' ('x'|'X') RULE_HEX_DIGIT+ RULE_INTEGER_TYPE_SUFFIX?;

RULE_DECIMAL_LITERAL : ('0'|'1'..'9' ('0'..'9')*) RULE_INTEGER_TYPE_SUFFIX?;

RULE_OCTAL_LITERAL : '0' ('0'..'7')+ RULE_INTEGER_TYPE_SUFFIX?;

RULE_BIN_LITERAL : ('0b'|'0B') ('0'..'1')+;

fragment RULE_HEX_DIGIT : ('0'..'9'|'a'..'f'|'A'..'F');

fragment RULE_INTEGER_TYPE_SUFFIX : (RULE_UNSIGNED_SUFFIX RULE_LONG_SUFFIX?|RULE_UNSIGNED_SUFFIX RULE_LONG_LONG_SUFFIX|RULE_LONG_SUFFIX RULE_UNSIGNED_SUFFIX?|RULE_LONG_LONG_SUFFIX RULE_UNSIGNED_SUFFIX?);

fragment RULE_UNSIGNED_SUFFIX : ('u'|'U');

fragment RULE_LONG_SUFFIX : ('l'|'L');

fragment RULE_LONG_LONG_SUFFIX : ('ll'|'LL');

RULE_FLOAT_LITERAL : (('0'..'9')+ RULE_SKW_DOT ('0'..'9')* RULE_EXPONENT? RULE_FLOAT_TYPE_SUFFIX?|RULE_SKW_DOT ('0'..'9')+ RULE_EXPONENT? RULE_FLOAT_TYPE_SUFFIX?|('0'..'9')+ RULE_EXPONENT RULE_FLOAT_TYPE_SUFFIX?|('0'..'9')+ RULE_EXPONENT? RULE_FLOAT_TYPE_SUFFIX);

fragment RULE_EXPONENT : ('e'|'E') ('+'|'-')? ('0'..'9')+;

fragment RULE_FLOAT_TYPE_SUFFIX : ('f'|'F'|'d'|'D');

fragment RULE_ESCAPE_SEQUENCE : (RULE_SKW_BACKSLASH ('b'|'t'|'n'|'f'|'r'|'"'|RULE_SKW_SINGLEQUOTE|RULE_SKW_BACKSLASH)|RULE_OCTAL_ESCAPE|RULE_HEX_ESCAPE);

fragment RULE_OCTAL_ESCAPE : (RULE_SKW_BACKSLASH '0'..'3' '0'..'7' '0'..'7'|RULE_SKW_BACKSLASH '0'..'7' '0'..'7'|RULE_SKW_BACKSLASH '0'..'7');

fragment RULE_HEX_ESCAPE : RULE_SKW_BACKSLASH 'x' RULE_HEX_DIGIT+;

fragment RULE_LINEFEED : '\n';

fragment RULE_CARRIAGERETURN : '\r';

fragment RULE_LINE_END : (RULE_CARRIAGERETURN|RULE_LINEFEED);

RULE_LINEBREAK : RULE_SKW_BACKSLASH RULE_LINE_END;

fragment SUPER_NEWLINE : RULE_LINE_END;

fragment RULE_SPACE : ' ';

fragment RULE_TAB : '\t';

RULE_WHITESPACE : (RULE_SPACE|RULE_TAB);

RULE_BLOCK_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_LINE_COMMENT : '//' ~(RULE_LINE_END)*;

RULE_SPECIAL : .;


