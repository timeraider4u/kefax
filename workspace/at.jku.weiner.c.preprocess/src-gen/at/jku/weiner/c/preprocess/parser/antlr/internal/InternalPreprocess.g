/*
 * generated by Xtext 2.9.0-SNAPSHOT
 */
grammar InternalPreprocess;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
	
}

@lexer::header {
package at.jku.weiner.c.preprocess.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package at.jku.weiner.c.preprocess.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import at.jku.weiner.c.preprocess.services.PreprocessGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private PreprocessGrammarAccess grammarAccess;
 	
    public InternalPreprocessParser(TokenStream input, PreprocessGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Preprocess";	
   	}
   	
   	@Override
   	protected PreprocessGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRulePreprocess
entryRulePreprocess returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPreprocessRule()); }
	 iv_rulePreprocess=rulePreprocess 
	 { $current=$iv_rulePreprocess.current; } 
	 EOF 
;

// Rule Preprocess
rulePreprocess returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getPreprocessAccess().getPreprocessAction_0(),
            $current);
    }
)


(
(
		{ 
	        newCompositeNode(grammarAccess.getPreprocessAccess().getGroupGroupOpt2ParserRuleCall_1_0()); 
	    }
		lv_group_1_0=ruleGroupOpt2		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPreprocessRule());
	        }
       		set(
       			$current, 
       			"group",
        		lv_group_1_0, 
        		"at.jku.weiner.c.preprocess.Preprocess.GroupOpt2");
	        afterParserOrEnumRuleCall();
	    }

)
)

)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleGroupOpt
entryRuleGroupOpt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGroupOptRule()); }
	 iv_ruleGroupOpt=ruleGroupOpt 
	 { $current=$iv_ruleGroupOpt.current; } 
	 EOF 
;

// Rule GroupOpt
ruleGroupOpt returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getGroupOptAccess().getGroupOptAction_0(),
            $current);
    }
)


(
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupOptAccess().getLinesGroupOptTemp1ParserRuleCall_1_0_0()); 
	    }
		lv_lines_1_0=ruleGroupOptTemp1		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupOptRule());
	        }
       		add(
       			$current, 
       			"lines",
        		lv_lines_1_0, 
        		"at.jku.weiner.c.preprocess.Preprocess.GroupOptTemp1");
	        afterParserOrEnumRuleCall();
	    }

)
)


this_NEWLINE_2=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_2, grammarAccess.getGroupOptAccess().getNEWLINETerminalRuleCall_1_1()); 
    }


)*

)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleGroupOpt2
entryRuleGroupOpt2 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGroupOpt2Rule()); }
	 iv_ruleGroupOpt2=ruleGroupOpt2 
	 { $current=$iv_ruleGroupOpt2.current; } 
	 EOF 
;

// Rule GroupOpt2
ruleGroupOpt2 returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getGroupOpt2Access().getGroupOpt2Action_0(),
            $current);
    }
)


(
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupOpt2Access().getLinesGroupOptTemp1ParserRuleCall_1_0_0()); 
	    }
		lv_lines_1_0=ruleGroupOptTemp1		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupOpt2Rule());
	        }
       		add(
       			$current, 
       			"lines",
        		lv_lines_1_0, 
        		"at.jku.weiner.c.preprocess.Preprocess.GroupOptTemp1");
	        afterParserOrEnumRuleCall();
	    }

)
)


this_NEWLINE_2=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_2, grammarAccess.getGroupOpt2Access().getNEWLINETerminalRuleCall_1_1()); 
    }


)*


(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupOpt2Access().getLinesGroupOptTemp2ParserRuleCall_2_0()); 
	    }
		lv_lines_3_0=ruleGroupOptTemp2		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupOpt2Rule());
	        }
       		add(
       			$current, 
       			"lines",
        		lv_lines_3_0, 
        		"at.jku.weiner.c.preprocess.Preprocess.GroupOptTemp2");
	        afterParserOrEnumRuleCall();
	    }

)
)?

)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleGroupOptTemp1
entryRuleGroupOptTemp1 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGroupOptTemp1Rule()); }
	 iv_ruleGroupOptTemp1=ruleGroupOptTemp1 
	 { $current=$iv_ruleGroupOptTemp1.current; } 
	 EOF 
;

// Rule GroupOptTemp1
ruleGroupOptTemp1 returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getGroupOptTemp1Access().getPreprocessorDirectivesParserRuleCall_0()); 
    }
    this_PreprocessorDirectives_0=rulePreprocessorDirectives
    { 
        $current = $this_PreprocessorDirectives_0.current; 
        afterParserOrEnumRuleCall();
    }



    |

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getGroupOptTemp1Access().getNewLineLineParserRuleCall_1()); 
    }
    this_NewLineLine_1=ruleNewLineLine
    { 
        $current = $this_NewLineLine_1.current; 
        afterParserOrEnumRuleCall();
    }



    |

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getGroupOptTemp1Access().getCodeParserRuleCall_2()); 
    }
    this_Code_2=ruleCode
    { 
        $current = $this_Code_2.current; 
        afterParserOrEnumRuleCall();
    }


)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleGroupOptTemp2
entryRuleGroupOptTemp2 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGroupOptTemp2Rule()); }
	 iv_ruleGroupOptTemp2=ruleGroupOptTemp2 
	 { $current=$iv_ruleGroupOptTemp2.current; } 
	 EOF 
;

// Rule GroupOptTemp2
ruleGroupOptTemp2 returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getGroupOptTemp2Access().getPreprocessorDirectivesParserRuleCall_0()); 
    }
    this_PreprocessorDirectives_0=rulePreprocessorDirectives
    { 
        $current = $this_PreprocessorDirectives_0.current; 
        afterParserOrEnumRuleCall();
    }



    |

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getGroupOptTemp2Access().getCodeParserRuleCall_1()); 
    }
    this_Code_1=ruleCode
    { 
        $current = $this_Code_1.current; 
        afterParserOrEnumRuleCall();
    }


)


;
finally {

	/*no after found*/

}





// Entry rule entryRulePreprocessorDirectives
entryRulePreprocessorDirectives returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPreprocessorDirectivesRule()); }
	 iv_rulePreprocessorDirectives=rulePreprocessorDirectives 
	 { $current=$iv_rulePreprocessorDirectives.current; } 
	 EOF 
;

// Rule PreprocessorDirectives
rulePreprocessorDirectives returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getPreprocessorDirectivesAccess().getPreprocessorDirectivesAction_0(),
            $current);
    }
)


(this_WHITESPACE_1=RULE_WHITESPACE
    { 
    newLeafNode(this_WHITESPACE_1, grammarAccess.getPreprocessorDirectivesAccess().getWHITESPACETerminalRuleCall_1()); 
    }
)*


this_HASH_2=RULE_HASH
    { 
    newLeafNode(this_HASH_2, grammarAccess.getPreprocessorDirectivesAccess().getHASHTerminalRuleCall_2()); 
    }



(this_WHITESPACE_3=RULE_WHITESPACE
    { 
    newLeafNode(this_WHITESPACE_3, grammarAccess.getPreprocessorDirectivesAccess().getWHITESPACETerminalRuleCall_3()); 
    }
)*


(
(
(
		{ 
	        newCompositeNode(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveIncludeDirectiveParserRuleCall_4_0_0()); 
	    }
		lv_directive_4_0=ruleIncludeDirective		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPreprocessorDirectivesRule());
	        }
       		set(
       			$current, 
       			"directive",
        		lv_directive_4_0, 
        		"at.jku.weiner.c.preprocess.Preprocess.IncludeDirective");
	        afterParserOrEnumRuleCall();
	    }

)
)


    |
(
(
		{ 
	        newCompositeNode(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveDefineDirectiveParserRuleCall_4_1_0()); 
	    }
		lv_directive_5_0=ruleDefineDirective		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPreprocessorDirectivesRule());
	        }
       		set(
       			$current, 
       			"directive",
        		lv_directive_5_0, 
        		"at.jku.weiner.c.preprocess.Preprocess.DefineDirective");
	        afterParserOrEnumRuleCall();
	    }

)
)


    |
(
(
		{ 
	        newCompositeNode(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveLineDirectiveParserRuleCall_4_2_0()); 
	    }
		lv_directive_6_0=ruleLineDirective		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPreprocessorDirectivesRule());
	        }
       		set(
       			$current, 
       			"directive",
        		lv_directive_6_0, 
        		"at.jku.weiner.c.preprocess.Preprocess.LineDirective");
	        afterParserOrEnumRuleCall();
	    }

)
)


    |
(
(
		{ 
	        newCompositeNode(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveErrorDirectiveParserRuleCall_4_3_0()); 
	    }
		lv_directive_7_0=ruleErrorDirective		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPreprocessorDirectivesRule());
	        }
       		set(
       			$current, 
       			"directive",
        		lv_directive_7_0, 
        		"at.jku.weiner.c.preprocess.Preprocess.ErrorDirective");
	        afterParserOrEnumRuleCall();
	    }

)
)


    |
(
(
		{ 
	        newCompositeNode(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveWarningDirectiveParserRuleCall_4_4_0()); 
	    }
		lv_directive_8_0=ruleWarningDirective		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPreprocessorDirectivesRule());
	        }
       		set(
       			$current, 
       			"directive",
        		lv_directive_8_0, 
        		"at.jku.weiner.c.preprocess.Preprocess.WarningDirective");
	        afterParserOrEnumRuleCall();
	    }

)
)


    |
(
(
		{ 
	        newCompositeNode(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveUnDefineDirectiveParserRuleCall_4_5_0()); 
	    }
		lv_directive_9_0=ruleUnDefineDirective		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPreprocessorDirectivesRule());
	        }
       		set(
       			$current, 
       			"directive",
        		lv_directive_9_0, 
        		"at.jku.weiner.c.preprocess.Preprocess.UnDefineDirective");
	        afterParserOrEnumRuleCall();
	    }

)
)


    |
(
(
		{ 
	        newCompositeNode(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveConditionalDirectiveParserRuleCall_4_6_0()); 
	    }
		lv_directive_10_0=ruleConditionalDirective		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPreprocessorDirectivesRule());
	        }
       		set(
       			$current, 
       			"directive",
        		lv_directive_10_0, 
        		"at.jku.weiner.c.preprocess.Preprocess.ConditionalDirective");
	        afterParserOrEnumRuleCall();
	    }

)
)


    |
(
(
		{ 
	        newCompositeNode(grammarAccess.getPreprocessorDirectivesAccess().getDirectivePragmaDirectiveParserRuleCall_4_7_0()); 
	    }
		lv_directive_11_0=rulePragmaDirective		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPreprocessorDirectivesRule());
	        }
       		set(
       			$current, 
       			"directive",
        		lv_directive_11_0, 
        		"at.jku.weiner.c.preprocess.Preprocess.PragmaDirective");
	        afterParserOrEnumRuleCall();
	    }

)
)


    |
(
(
		{ 
	        newCompositeNode(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveNullDirectiveParserRuleCall_4_8_0()); 
	    }
		lv_directive_12_0=ruleNullDirective		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPreprocessorDirectivesRule());
	        }
       		set(
       			$current, 
       			"directive",
        		lv_directive_12_0, 
        		"at.jku.weiner.c.preprocess.Preprocess.NullDirective");
	        afterParserOrEnumRuleCall();
	    }

)
)

)

)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleIncludeDirective
entryRuleIncludeDirective returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIncludeDirectiveRule()); }
	 iv_ruleIncludeDirective=ruleIncludeDirective 
	 { $current=$iv_ruleIncludeDirective.current; } 
	 EOF 
;

// Rule IncludeDirective
ruleIncludeDirective returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getIncludeDirectiveAccess().getIncludeDirectiveAction_0(),
            $current);
    }
)


(
this_INCLUDE_1=RULE_INCLUDE
    { 
    newLeafNode(this_INCLUDE_1, grammarAccess.getIncludeDirectiveAccess().getINCLUDETerminalRuleCall_1_0()); 
    }



    |
(
(
		lv_next_2_0=RULE_INCLUDE_NEXT
		{
			newLeafNode(lv_next_2_0, grammarAccess.getIncludeDirectiveAccess().getNextINCLUDE_NEXTTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIncludeDirectiveRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"next",
        		true, 
        		"at.jku.weiner.c.preprocess.Preprocess.INCLUDE_NEXT");
	    }

)
)

)


(this_WHITESPACE_3=RULE_WHITESPACE
    { 
    newLeafNode(this_WHITESPACE_3, grammarAccess.getIncludeDirectiveAccess().getWHITESPACETerminalRuleCall_2()); 
    }
)+


(
(
		{ 
	        newCompositeNode(grammarAccess.getIncludeDirectiveAccess().getStringMyCodeLineParserRuleCall_3_0()); 
	    }
		lv_string_4_0=ruleMyCodeLine		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIncludeDirectiveRule());
	        }
       		set(
       			$current, 
       			"string",
        		lv_string_4_0, 
        		"at.jku.weiner.c.preprocess.Preprocess.MyCodeLine");
	        afterParserOrEnumRuleCall();
	    }

)
)

)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleDefineDirective
entryRuleDefineDirective returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefineDirectiveRule()); }
	 iv_ruleDefineDirective=ruleDefineDirective 
	 { $current=$iv_ruleDefineDirective.current; } 
	 EOF 
;

// Rule DefineDirective
ruleDefineDirective returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDefineDirectiveAccess().getDefineObjectMacroParserRuleCall_0()); 
    }
    this_DefineObjectMacro_0=ruleDefineObjectMacro
    { 
        $current = $this_DefineObjectMacro_0.current; 
        afterParserOrEnumRuleCall();
    }



    |

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDefineDirectiveAccess().getDefineFunctionLikeMacroParserRuleCall_1()); 
    }
    this_DefineFunctionLikeMacro_1=ruleDefineFunctionLikeMacro
    { 
        $current = $this_DefineFunctionLikeMacro_1.current; 
        afterParserOrEnumRuleCall();
    }


)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleDefineObjectMacro
entryRuleDefineObjectMacro returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefineObjectMacroRule()); }
	 iv_ruleDefineObjectMacro=ruleDefineObjectMacro 
	 { $current=$iv_ruleDefineObjectMacro.current; } 
	 EOF 
;

// Rule DefineObjectMacro
ruleDefineObjectMacro returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getDefineObjectMacroAccess().getDefineObjectMacroAction_0(),
            $current);
    }
)


this_DEFINE_1=RULE_DEFINE
    { 
    newLeafNode(this_DEFINE_1, grammarAccess.getDefineObjectMacroAccess().getDEFINETerminalRuleCall_1()); 
    }



(this_WHITESPACE_2=RULE_WHITESPACE
    { 
    newLeafNode(this_WHITESPACE_2, grammarAccess.getDefineObjectMacroAccess().getWHITESPACETerminalRuleCall_2()); 
    }
)+


(
(
		{ 
	        newCompositeNode(grammarAccess.getDefineObjectMacroAccess().getIdentMyCodeParserRuleCall_3_0()); 
	    }
		lv_ident_3_0=ruleMyCode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefineObjectMacroRule());
	        }
       		set(
       			$current, 
       			"ident",
        		lv_ident_3_0, 
        		"at.jku.weiner.c.preprocess.Preprocess.MyCode");
	        afterParserOrEnumRuleCall();
	    }

)
)


(
(this_WHITESPACE_4=RULE_WHITESPACE
    { 
    newLeafNode(this_WHITESPACE_4, grammarAccess.getDefineObjectMacroAccess().getWHITESPACETerminalRuleCall_4_0()); 
    }
)+


(
(
		{ 
	        newCompositeNode(grammarAccess.getDefineObjectMacroAccess().getStringMyDefineLineObjectParserRuleCall_4_1_0()); 
	    }
		lv_string_5_0=ruleMyDefineLineObject		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefineObjectMacroRule());
	        }
       		set(
       			$current, 
       			"string",
        		lv_string_5_0, 
        		"at.jku.weiner.c.preprocess.Preprocess.MyDefineLineObject");
	        afterParserOrEnumRuleCall();
	    }

)
)

)?


(this_WHITESPACE_6=RULE_WHITESPACE
    { 
    newLeafNode(this_WHITESPACE_6, grammarAccess.getDefineObjectMacroAccess().getWHITESPACETerminalRuleCall_5()); 
    }
)*

)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleDefineFunctionLikeMacro
entryRuleDefineFunctionLikeMacro returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefineFunctionLikeMacroRule()); }
	 iv_ruleDefineFunctionLikeMacro=ruleDefineFunctionLikeMacro 
	 { $current=$iv_ruleDefineFunctionLikeMacro.current; } 
	 EOF 
;

// Rule DefineFunctionLikeMacro
ruleDefineFunctionLikeMacro returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getDefineFunctionLikeMacroAccess().getDefineFunctionLikeMacroAction_0(),
            $current);
    }
)


this_DEFINE_1=RULE_DEFINE
    { 
    newLeafNode(this_DEFINE_1, grammarAccess.getDefineFunctionLikeMacroAccess().getDEFINETerminalRuleCall_1()); 
    }



(this_WHITESPACE_2=RULE_WHITESPACE
    { 
    newLeafNode(this_WHITESPACE_2, grammarAccess.getDefineFunctionLikeMacroAccess().getWHITESPACETerminalRuleCall_2()); 
    }
)+


(
(
		{ 
	        newCompositeNode(grammarAccess.getDefineFunctionLikeMacroAccess().getIdentMyCodeParserRuleCall_3_0()); 
	    }
		lv_ident_3_0=ruleMyCode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefineFunctionLikeMacroRule());
	        }
       		set(
       			$current, 
       			"ident",
        		lv_ident_3_0, 
        		"at.jku.weiner.c.preprocess.Preprocess.MyCode");
	        afterParserOrEnumRuleCall();
	    }

)
)


this_SKW_LEFTPAREN_4=RULE_SKW_LEFTPAREN
    { 
    newLeafNode(this_SKW_LEFTPAREN_4, grammarAccess.getDefineFunctionLikeMacroAccess().getSKW_LEFTPARENTerminalRuleCall_4()); 
    }



(this_WHITESPACE_5=RULE_WHITESPACE
    { 
    newLeafNode(this_WHITESPACE_5, grammarAccess.getDefineFunctionLikeMacroAccess().getWHITESPACETerminalRuleCall_5()); 
    }
)*


(
(
		{ 
	        newCompositeNode(grammarAccess.getDefineFunctionLikeMacroAccess().getListIdentifierListParserRuleCall_6_0()); 
	    }
		lv_list_6_0=ruleIdentifierList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefineFunctionLikeMacroRule());
	        }
       		set(
       			$current, 
       			"list",
        		lv_list_6_0, 
        		"at.jku.weiner.c.preprocess.Preprocess.IdentifierList");
	        afterParserOrEnumRuleCall();
	    }

)
)?


this_SKW_RIGHTPAREN_7=RULE_SKW_RIGHTPAREN
    { 
    newLeafNode(this_SKW_RIGHTPAREN_7, grammarAccess.getDefineFunctionLikeMacroAccess().getSKW_RIGHTPARENTerminalRuleCall_7()); 
    }



(
(
		{ 
	        newCompositeNode(grammarAccess.getDefineFunctionLikeMacroAccess().getStringMyDefineLineFunctionParserRuleCall_8_0()); 
	    }
		lv_string_8_0=ruleMyDefineLineFunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefineFunctionLikeMacroRule());
	        }
       		set(
       			$current, 
       			"string",
        		lv_string_8_0, 
        		"at.jku.weiner.c.preprocess.Preprocess.MyDefineLineFunction");
	        afterParserOrEnumRuleCall();
	    }

)
)?

)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleIdentifierList
entryRuleIdentifierList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdentifierListRule()); }
	 iv_ruleIdentifierList=ruleIdentifierList 
	 { $current=$iv_ruleIdentifierList.current; } 
	 EOF 
;

// Rule IdentifierList
ruleIdentifierList returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getIdentifierListAccess().getIdentifierListAction_0(),
            $current);
    }
)


(
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getIdentifierListAccess().getIdentPP_IDParserRuleCall_1_0_0_0()); 
	    }
		lv_ident_1_0=rulePP_ID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIdentifierListRule());
	        }
       		add(
       			$current, 
       			"ident",
        		lv_ident_1_0, 
        		"at.jku.weiner.c.preprocess.Preprocess.PP_ID");
	        afterParserOrEnumRuleCall();
	    }

)
)


(
(this_WHITESPACE_2=RULE_WHITESPACE
    { 
    newLeafNode(this_WHITESPACE_2, grammarAccess.getIdentifierListAccess().getWHITESPACETerminalRuleCall_1_0_1_0()); 
    }
)*


this_SKW_COMMA_3=RULE_SKW_COMMA
    { 
    newLeafNode(this_SKW_COMMA_3, grammarAccess.getIdentifierListAccess().getSKW_COMMATerminalRuleCall_1_0_1_1()); 
    }



(this_WHITESPACE_4=RULE_WHITESPACE
    { 
    newLeafNode(this_WHITESPACE_4, grammarAccess.getIdentifierListAccess().getWHITESPACETerminalRuleCall_1_0_1_2()); 
    }
)*


(
(
		{ 
	        newCompositeNode(grammarAccess.getIdentifierListAccess().getIdentPP_IDParserRuleCall_1_0_1_3_0()); 
	    }
		lv_ident_5_0=rulePP_ID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIdentifierListRule());
	        }
       		add(
       			$current, 
       			"ident",
        		lv_ident_5_0, 
        		"at.jku.weiner.c.preprocess.Preprocess.PP_ID");
	        afterParserOrEnumRuleCall();
	    }

)
)

)*


(this_WHITESPACE_6=RULE_WHITESPACE
    { 
    newLeafNode(this_WHITESPACE_6, grammarAccess.getIdentifierListAccess().getWHITESPACETerminalRuleCall_1_0_2()); 
    }
)*


(
this_SKW_COMMA_7=RULE_SKW_COMMA
    { 
    newLeafNode(this_SKW_COMMA_7, grammarAccess.getIdentifierListAccess().getSKW_COMMATerminalRuleCall_1_0_3_0()); 
    }



(this_WHITESPACE_8=RULE_WHITESPACE
    { 
    newLeafNode(this_WHITESPACE_8, grammarAccess.getIdentifierListAccess().getWHITESPACETerminalRuleCall_1_0_3_1()); 
    }
)*


(
(
(
		{ 
	        newCompositeNode(grammarAccess.getIdentifierListAccess().getVariadicEllipsisParserRuleCall_1_0_3_2_0_0()); 
	    }
		lv_variadic_9_0=ruleEllipsis		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIdentifierListRule());
	        }
       		set(
       			$current, 
       			"variadic",
        		true, 
        		"at.jku.weiner.c.common.Common.Ellipsis");
	        afterParserOrEnumRuleCall();
	    }

)
)


    |
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getIdentifierListAccess().getVarIDPP_IDParserRuleCall_1_0_3_2_1_0_0()); 
	    }
		lv_varID_10_0=rulePP_ID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIdentifierListRule());
	        }
       		set(
       			$current, 
       			"varID",
        		lv_varID_10_0, 
        		"at.jku.weiner.c.preprocess.Preprocess.PP_ID");
	        afterParserOrEnumRuleCall();
	    }

)
)


(
(
		{ 
	        newCompositeNode(grammarAccess.getIdentifierListAccess().getVariadicEllipsisParserRuleCall_1_0_3_2_1_1_0()); 
	    }
		lv_variadic_11_0=ruleEllipsis		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIdentifierListRule());
	        }
       		set(
       			$current, 
       			"variadic",
        		true, 
        		"at.jku.weiner.c.common.Common.Ellipsis");
	        afterParserOrEnumRuleCall();
	    }

)
)

)

)

)?

)


    |
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getIdentifierListAccess().getVarIDPP_IDParserRuleCall_1_1_0_0()); 
	    }
		lv_varID_12_0=rulePP_ID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIdentifierListRule());
	        }
       		set(
       			$current, 
       			"varID",
        		lv_varID_12_0, 
        		"at.jku.weiner.c.preprocess.Preprocess.PP_ID");
	        afterParserOrEnumRuleCall();
	    }

)
)?


(
(
		{ 
	        newCompositeNode(grammarAccess.getIdentifierListAccess().getVariadicEllipsisParserRuleCall_1_1_1_0()); 
	    }
		lv_variadic_13_0=ruleEllipsis		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIdentifierListRule());
	        }
       		set(
       			$current, 
       			"variadic",
        		true, 
        		"at.jku.weiner.c.common.Common.Ellipsis");
	        afterParserOrEnumRuleCall();
	    }

)
)

)

)

)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleLineDirective
entryRuleLineDirective returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLineDirectiveRule()); }
	 iv_ruleLineDirective=ruleLineDirective 
	 { $current=$iv_ruleLineDirective.current; } 
	 EOF 
;

// Rule LineDirective
ruleLineDirective returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getLineDirectiveAccess().getLineDirectiveAction_0(),
            $current);
    }
)


this_LINE_1=RULE_LINE
    { 
    newLeafNode(this_LINE_1, grammarAccess.getLineDirectiveAccess().getLINETerminalRuleCall_1()); 
    }



(this_WHITESPACE_2=RULE_WHITESPACE
    { 
    newLeafNode(this_WHITESPACE_2, grammarAccess.getLineDirectiveAccess().getWHITESPACETerminalRuleCall_2()); 
    }
)*


(
(
		{ 
	        newCompositeNode(grammarAccess.getLineDirectiveAccess().getLineMyCodeParserRuleCall_3_0()); 
	    }
		lv_line_3_0=ruleMyCode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLineDirectiveRule());
	        }
       		set(
       			$current, 
       			"line",
        		lv_line_3_0, 
        		"at.jku.weiner.c.preprocess.Preprocess.MyCode");
	        afterParserOrEnumRuleCall();
	    }

)
)


(
(this_WHITESPACE_4=RULE_WHITESPACE
    { 
    newLeafNode(this_WHITESPACE_4, grammarAccess.getLineDirectiveAccess().getWHITESPACETerminalRuleCall_4_0()); 
    }
)+


(
(
		{ 
	        newCompositeNode(grammarAccess.getLineDirectiveAccess().getPathMyCodeParserRuleCall_4_1_0()); 
	    }
		lv_path_5_0=ruleMyCode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLineDirectiveRule());
	        }
       		set(
       			$current, 
       			"path",
        		lv_path_5_0, 
        		"at.jku.weiner.c.preprocess.Preprocess.MyCode");
	        afterParserOrEnumRuleCall();
	    }

)
)

)?

)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleErrorDirective
entryRuleErrorDirective returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getErrorDirectiveRule()); }
	 iv_ruleErrorDirective=ruleErrorDirective 
	 { $current=$iv_ruleErrorDirective.current; } 
	 EOF 
;

// Rule ErrorDirective
ruleErrorDirective returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getErrorDirectiveAccess().getErrorDirectiveAction_0(),
            $current);
    }
)


this_ERROR_1=RULE_ERROR
    { 
    newLeafNode(this_ERROR_1, grammarAccess.getErrorDirectiveAccess().getERRORTerminalRuleCall_1()); 
    }



(this_WHITESPACE_2=RULE_WHITESPACE
    { 
    newLeafNode(this_WHITESPACE_2, grammarAccess.getErrorDirectiveAccess().getWHITESPACETerminalRuleCall_2()); 
    }
)*


(
(
		{ 
	        newCompositeNode(grammarAccess.getErrorDirectiveAccess().getMsgMyCodeLineParserRuleCall_3_0()); 
	    }
		lv_msg_3_0=ruleMyCodeLine		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getErrorDirectiveRule());
	        }
       		set(
       			$current, 
       			"msg",
        		lv_msg_3_0, 
        		"at.jku.weiner.c.preprocess.Preprocess.MyCodeLine");
	        afterParserOrEnumRuleCall();
	    }

)
)?

)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleWarningDirective
entryRuleWarningDirective returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWarningDirectiveRule()); }
	 iv_ruleWarningDirective=ruleWarningDirective 
	 { $current=$iv_ruleWarningDirective.current; } 
	 EOF 
;

// Rule WarningDirective
ruleWarningDirective returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getWarningDirectiveAccess().getWarningDirectiveAction_0(),
            $current);
    }
)


this_WARNING_1=RULE_WARNING
    { 
    newLeafNode(this_WARNING_1, grammarAccess.getWarningDirectiveAccess().getWARNINGTerminalRuleCall_1()); 
    }



(this_WHITESPACE_2=RULE_WHITESPACE
    { 
    newLeafNode(this_WHITESPACE_2, grammarAccess.getWarningDirectiveAccess().getWHITESPACETerminalRuleCall_2()); 
    }
)*


(
(
		{ 
	        newCompositeNode(grammarAccess.getWarningDirectiveAccess().getMsgMyCodeLineParserRuleCall_3_0()); 
	    }
		lv_msg_3_0=ruleMyCodeLine		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWarningDirectiveRule());
	        }
       		set(
       			$current, 
       			"msg",
        		lv_msg_3_0, 
        		"at.jku.weiner.c.preprocess.Preprocess.MyCodeLine");
	        afterParserOrEnumRuleCall();
	    }

)
)?

)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleUnDefineDirective
entryRuleUnDefineDirective returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnDefineDirectiveRule()); }
	 iv_ruleUnDefineDirective=ruleUnDefineDirective 
	 { $current=$iv_ruleUnDefineDirective.current; } 
	 EOF 
;

// Rule UnDefineDirective
ruleUnDefineDirective returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnDefineDirectiveAccess().getUnDefineDirectiveAction_0(),
            $current);
    }
)


this_UNDEF_1=RULE_UNDEF
    { 
    newLeafNode(this_UNDEF_1, grammarAccess.getUnDefineDirectiveAccess().getUNDEFTerminalRuleCall_1()); 
    }



(this_WHITESPACE_2=RULE_WHITESPACE
    { 
    newLeafNode(this_WHITESPACE_2, grammarAccess.getUnDefineDirectiveAccess().getWHITESPACETerminalRuleCall_2()); 
    }
)+


(
(
		{ 
	        newCompositeNode(grammarAccess.getUnDefineDirectiveAccess().getIdentPP_IDParserRuleCall_3_0()); 
	    }
		lv_ident_3_0=rulePP_ID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnDefineDirectiveRule());
	        }
       		set(
       			$current, 
       			"ident",
        		lv_ident_3_0, 
        		"at.jku.weiner.c.preprocess.Preprocess.PP_ID");
	        afterParserOrEnumRuleCall();
	    }

)
)


(this_WHITESPACE_4=RULE_WHITESPACE
    { 
    newLeafNode(this_WHITESPACE_4, grammarAccess.getUnDefineDirectiveAccess().getWHITESPACETerminalRuleCall_4()); 
    }
)*

)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleConditionalDirective
entryRuleConditionalDirective returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionalDirectiveRule()); }
	 iv_ruleConditionalDirective=ruleConditionalDirective 
	 { $current=$iv_ruleConditionalDirective.current; } 
	 EOF 
;

// Rule ConditionalDirective
ruleConditionalDirective returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getConditionalDirectiveAccess().getConditionalDirectiveAction_0(),
            $current);
    }
)


(
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalDirectiveAccess().getConditionalIfConditionalParserRuleCall_1_0_0()); 
	    }
		lv_conditional_1_1=ruleIfConditional		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalDirectiveRule());
	        }
       		set(
       			$current, 
       			"conditional",
        		lv_conditional_1_1, 
        		"at.jku.weiner.c.preprocess.Preprocess.IfConditional");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getConditionalDirectiveAccess().getConditionalIfDefConditionalParserRuleCall_1_0_1()); 
	    }
		lv_conditional_1_2=ruleIfDefConditional		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalDirectiveRule());
	        }
       		set(
       			$current, 
       			"conditional",
        		lv_conditional_1_2, 
        		"at.jku.weiner.c.preprocess.Preprocess.IfDefConditional");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getConditionalDirectiveAccess().getConditionalIfNotDefConditionalParserRuleCall_1_0_2()); 
	    }
		lv_conditional_1_3=ruleIfNotDefConditional		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalDirectiveRule());
	        }
       		set(
       			$current, 
       			"conditional",
        		lv_conditional_1_3, 
        		"at.jku.weiner.c.preprocess.Preprocess.IfNotDefConditional");
	        afterParserOrEnumRuleCall();
	    }

)

)
)


(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalDirectiveAccess().getElifsElIfConditionalParserRuleCall_2_0()); 
	    }
		lv_elifs_2_0=ruleElIfConditional		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalDirectiveRule());
	        }
       		add(
       			$current, 
       			"elifs",
        		lv_elifs_2_0, 
        		"at.jku.weiner.c.preprocess.Preprocess.ElIfConditional");
	        afterParserOrEnumRuleCall();
	    }

)
)*


(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalDirectiveAccess().getElseElseConditionalParserRuleCall_3_0()); 
	    }
		lv_else_3_0=ruleElseConditional		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalDirectiveRule());
	        }
       		set(
       			$current, 
       			"else",
        		lv_else_3_0, 
        		"at.jku.weiner.c.preprocess.Preprocess.ElseConditional");
	        afterParserOrEnumRuleCall();
	    }

)
)?


(this_WHITESPACE_4=RULE_WHITESPACE
    { 
    newLeafNode(this_WHITESPACE_4, grammarAccess.getConditionalDirectiveAccess().getWHITESPACETerminalRuleCall_4()); 
    }
)*


this_HASH_5=RULE_HASH
    { 
    newLeafNode(this_HASH_5, grammarAccess.getConditionalDirectiveAccess().getHASHTerminalRuleCall_5()); 
    }



(this_WHITESPACE_6=RULE_WHITESPACE
    { 
    newLeafNode(this_WHITESPACE_6, grammarAccess.getConditionalDirectiveAccess().getWHITESPACETerminalRuleCall_6()); 
    }
)*


this_ENDIF_7=RULE_ENDIF
    { 
    newLeafNode(this_ENDIF_7, grammarAccess.getConditionalDirectiveAccess().getENDIFTerminalRuleCall_7()); 
    }



(this_WHITESPACE_8=RULE_WHITESPACE
    { 
    newLeafNode(this_WHITESPACE_8, grammarAccess.getConditionalDirectiveAccess().getWHITESPACETerminalRuleCall_8()); 
    }
)*

)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleIfConditional
entryRuleIfConditional returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfConditionalRule()); }
	 iv_ruleIfConditional=ruleIfConditional 
	 { $current=$iv_ruleIfConditional.current; } 
	 EOF 
;

// Rule IfConditional
ruleIfConditional returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getIfConditionalAccess().getIfConditionalAction_0(),
            $current);
    }
)


this_IF_1=RULE_IF
    { 
    newLeafNode(this_IF_1, grammarAccess.getIfConditionalAccess().getIFTerminalRuleCall_1()); 
    }



(this_WHITESPACE_2=RULE_WHITESPACE
    { 
    newLeafNode(this_WHITESPACE_2, grammarAccess.getIfConditionalAccess().getWHITESPACETerminalRuleCall_2()); 
    }
)+


(
(
		{ 
	        newCompositeNode(grammarAccess.getIfConditionalAccess().getExpressionExpressionParserRuleCall_3_0()); 
	    }
		lv_expression_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfConditionalRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"at.jku.weiner.c.common.Common.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)


(this_WHITESPACE_4=RULE_WHITESPACE
    { 
    newLeafNode(this_WHITESPACE_4, grammarAccess.getIfConditionalAccess().getWHITESPACETerminalRuleCall_4()); 
    }
)*


this_NEWLINE_5=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_5, grammarAccess.getIfConditionalAccess().getNEWLINETerminalRuleCall_5()); 
    }



(
(
		{ 
	        newCompositeNode(grammarAccess.getIfConditionalAccess().getGroupGroupOptParserRuleCall_6_0()); 
	    }
		lv_group_6_0=ruleGroupOpt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfConditionalRule());
	        }
       		set(
       			$current, 
       			"group",
        		lv_group_6_0, 
        		"at.jku.weiner.c.preprocess.Preprocess.GroupOpt");
	        afterParserOrEnumRuleCall();
	    }

)
)

)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleIfDefConditional
entryRuleIfDefConditional returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfDefConditionalRule()); }
	 iv_ruleIfDefConditional=ruleIfDefConditional 
	 { $current=$iv_ruleIfDefConditional.current; } 
	 EOF 
;

// Rule IfDefConditional
ruleIfDefConditional returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getIfDefConditionalAccess().getIfDefConditionalAction_0(),
            $current);
    }
)


this_IFDEF_1=RULE_IFDEF
    { 
    newLeafNode(this_IFDEF_1, grammarAccess.getIfDefConditionalAccess().getIFDEFTerminalRuleCall_1()); 
    }



(this_WHITESPACE_2=RULE_WHITESPACE
    { 
    newLeafNode(this_WHITESPACE_2, grammarAccess.getIfDefConditionalAccess().getWHITESPACETerminalRuleCall_2()); 
    }
)+


(
(
		{ 
	        newCompositeNode(grammarAccess.getIfDefConditionalAccess().getIdentPP_IDParserRuleCall_3_0()); 
	    }
		lv_ident_3_0=rulePP_ID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfDefConditionalRule());
	        }
       		set(
       			$current, 
       			"ident",
        		lv_ident_3_0, 
        		"at.jku.weiner.c.preprocess.Preprocess.PP_ID");
	        afterParserOrEnumRuleCall();
	    }

)
)


(this_WHITESPACE_4=RULE_WHITESPACE
    { 
    newLeafNode(this_WHITESPACE_4, grammarAccess.getIfDefConditionalAccess().getWHITESPACETerminalRuleCall_4()); 
    }
)*


this_NEWLINE_5=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_5, grammarAccess.getIfDefConditionalAccess().getNEWLINETerminalRuleCall_5()); 
    }



(
(
		{ 
	        newCompositeNode(grammarAccess.getIfDefConditionalAccess().getGroupGroupOptParserRuleCall_6_0()); 
	    }
		lv_group_6_0=ruleGroupOpt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfDefConditionalRule());
	        }
       		set(
       			$current, 
       			"group",
        		lv_group_6_0, 
        		"at.jku.weiner.c.preprocess.Preprocess.GroupOpt");
	        afterParserOrEnumRuleCall();
	    }

)
)

)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleIfNotDefConditional
entryRuleIfNotDefConditional returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfNotDefConditionalRule()); }
	 iv_ruleIfNotDefConditional=ruleIfNotDefConditional 
	 { $current=$iv_ruleIfNotDefConditional.current; } 
	 EOF 
;

// Rule IfNotDefConditional
ruleIfNotDefConditional returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getIfNotDefConditionalAccess().getIfNotDefConditionalAction_0(),
            $current);
    }
)


this_IFNOTDEF_1=RULE_IFNOTDEF
    { 
    newLeafNode(this_IFNOTDEF_1, grammarAccess.getIfNotDefConditionalAccess().getIFNOTDEFTerminalRuleCall_1()); 
    }



(this_WHITESPACE_2=RULE_WHITESPACE
    { 
    newLeafNode(this_WHITESPACE_2, grammarAccess.getIfNotDefConditionalAccess().getWHITESPACETerminalRuleCall_2()); 
    }
)+


(
(
		{ 
	        newCompositeNode(grammarAccess.getIfNotDefConditionalAccess().getIdentPP_IDParserRuleCall_3_0()); 
	    }
		lv_ident_3_0=rulePP_ID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfNotDefConditionalRule());
	        }
       		set(
       			$current, 
       			"ident",
        		lv_ident_3_0, 
        		"at.jku.weiner.c.preprocess.Preprocess.PP_ID");
	        afterParserOrEnumRuleCall();
	    }

)
)


(this_WHITESPACE_4=RULE_WHITESPACE
    { 
    newLeafNode(this_WHITESPACE_4, grammarAccess.getIfNotDefConditionalAccess().getWHITESPACETerminalRuleCall_4()); 
    }
)*


this_NEWLINE_5=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_5, grammarAccess.getIfNotDefConditionalAccess().getNEWLINETerminalRuleCall_5()); 
    }



(
(
		{ 
	        newCompositeNode(grammarAccess.getIfNotDefConditionalAccess().getGroupGroupOptParserRuleCall_6_0()); 
	    }
		lv_group_6_0=ruleGroupOpt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfNotDefConditionalRule());
	        }
       		set(
       			$current, 
       			"group",
        		lv_group_6_0, 
        		"at.jku.weiner.c.preprocess.Preprocess.GroupOpt");
	        afterParserOrEnumRuleCall();
	    }

)
)

)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleElIfConditional
entryRuleElIfConditional returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElIfConditionalRule()); }
	 iv_ruleElIfConditional=ruleElIfConditional 
	 { $current=$iv_ruleElIfConditional.current; } 
	 EOF 
;

// Rule ElIfConditional
ruleElIfConditional returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getElIfConditionalAccess().getElIfConditionalAction_0(),
            $current);
    }
)


(
(this_WHITESPACE_1=RULE_WHITESPACE
    { 
    newLeafNode(this_WHITESPACE_1, grammarAccess.getElIfConditionalAccess().getWHITESPACETerminalRuleCall_1_0()); 
    }
)*


this_HASH_2=RULE_HASH
    { 
    newLeafNode(this_HASH_2, grammarAccess.getElIfConditionalAccess().getHASHTerminalRuleCall_1_1()); 
    }



(this_WHITESPACE_3=RULE_WHITESPACE
    { 
    newLeafNode(this_WHITESPACE_3, grammarAccess.getElIfConditionalAccess().getWHITESPACETerminalRuleCall_1_2()); 
    }
)*


this_ELIF_4=RULE_ELIF
    { 
    newLeafNode(this_ELIF_4, grammarAccess.getElIfConditionalAccess().getELIFTerminalRuleCall_1_3()); 
    }


)


(this_WHITESPACE_5=RULE_WHITESPACE
    { 
    newLeafNode(this_WHITESPACE_5, grammarAccess.getElIfConditionalAccess().getWHITESPACETerminalRuleCall_2()); 
    }
)+


(
(
		{ 
	        newCompositeNode(grammarAccess.getElIfConditionalAccess().getExpressionExpressionParserRuleCall_3_0()); 
	    }
		lv_expression_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElIfConditionalRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_6_0, 
        		"at.jku.weiner.c.common.Common.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)


(this_WHITESPACE_7=RULE_WHITESPACE
    { 
    newLeafNode(this_WHITESPACE_7, grammarAccess.getElIfConditionalAccess().getWHITESPACETerminalRuleCall_4()); 
    }
)*


this_NEWLINE_8=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_8, grammarAccess.getElIfConditionalAccess().getNEWLINETerminalRuleCall_5()); 
    }



(
(
		{ 
	        newCompositeNode(grammarAccess.getElIfConditionalAccess().getGroupGroupOptParserRuleCall_6_0()); 
	    }
		lv_group_9_0=ruleGroupOpt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElIfConditionalRule());
	        }
       		set(
       			$current, 
       			"group",
        		lv_group_9_0, 
        		"at.jku.weiner.c.preprocess.Preprocess.GroupOpt");
	        afterParserOrEnumRuleCall();
	    }

)
)

)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleElseConditional
entryRuleElseConditional returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElseConditionalRule()); }
	 iv_ruleElseConditional=ruleElseConditional 
	 { $current=$iv_ruleElseConditional.current; } 
	 EOF 
;

// Rule ElseConditional
ruleElseConditional returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getElseConditionalAccess().getElseConditionalAction_0(),
            $current);
    }
)


(this_WHITESPACE_1=RULE_WHITESPACE
    { 
    newLeafNode(this_WHITESPACE_1, grammarAccess.getElseConditionalAccess().getWHITESPACETerminalRuleCall_1()); 
    }
)*


this_HASH_2=RULE_HASH
    { 
    newLeafNode(this_HASH_2, grammarAccess.getElseConditionalAccess().getHASHTerminalRuleCall_2()); 
    }



(this_WHITESPACE_3=RULE_WHITESPACE
    { 
    newLeafNode(this_WHITESPACE_3, grammarAccess.getElseConditionalAccess().getWHITESPACETerminalRuleCall_3()); 
    }
)*


this_ELSE_4=RULE_ELSE
    { 
    newLeafNode(this_ELSE_4, grammarAccess.getElseConditionalAccess().getELSETerminalRuleCall_4()); 
    }



(this_WHITESPACE_5=RULE_WHITESPACE
    { 
    newLeafNode(this_WHITESPACE_5, grammarAccess.getElseConditionalAccess().getWHITESPACETerminalRuleCall_5()); 
    }
)*


this_NEWLINE_6=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_6, grammarAccess.getElseConditionalAccess().getNEWLINETerminalRuleCall_6()); 
    }



(
(
		{ 
	        newCompositeNode(grammarAccess.getElseConditionalAccess().getGroupGroupOptParserRuleCall_7_0()); 
	    }
		lv_group_7_0=ruleGroupOpt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElseConditionalRule());
	        }
       		set(
       			$current, 
       			"group",
        		lv_group_7_0, 
        		"at.jku.weiner.c.preprocess.Preprocess.GroupOpt");
	        afterParserOrEnumRuleCall();
	    }

)
)

)


;
finally {

	/*no after found*/

}





// Entry rule entryRulePragmaDirective
entryRulePragmaDirective returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPragmaDirectiveRule()); }
	 iv_rulePragmaDirective=rulePragmaDirective 
	 { $current=$iv_rulePragmaDirective.current; } 
	 EOF 
;

// Rule PragmaDirective
rulePragmaDirective returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getPragmaDirectiveAccess().getPragmaDirectiveAction_0(),
            $current);
    }
)


this_PRAGMA_1=RULE_PRAGMA
    { 
    newLeafNode(this_PRAGMA_1, grammarAccess.getPragmaDirectiveAccess().getPRAGMATerminalRuleCall_1()); 
    }



(this_WHITESPACE_2=RULE_WHITESPACE
    { 
    newLeafNode(this_WHITESPACE_2, grammarAccess.getPragmaDirectiveAccess().getWHITESPACETerminalRuleCall_2()); 
    }
)*


(
(
		{ 
	        newCompositeNode(grammarAccess.getPragmaDirectiveAccess().getPragmaMyCodeLineParserRuleCall_3_0()); 
	    }
		lv_pragma_3_0=ruleMyCodeLine		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPragmaDirectiveRule());
	        }
       		set(
       			$current, 
       			"pragma",
        		lv_pragma_3_0, 
        		"at.jku.weiner.c.preprocess.Preprocess.MyCodeLine");
	        afterParserOrEnumRuleCall();
	    }

)
)?

)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleNullDirective
entryRuleNullDirective returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNullDirectiveRule()); }
	 iv_ruleNullDirective=ruleNullDirective 
	 { $current=$iv_ruleNullDirective.current; } 
	 EOF 
;

// Rule NullDirective
ruleNullDirective returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getNullDirectiveAccess().getNullDirectiveAction(),
            $current);
    }
)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleNewLineLine
entryRuleNewLineLine returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNewLineLineRule()); }
	 iv_ruleNewLineLine=ruleNewLineLine 
	 { $current=$iv_ruleNewLineLine.current; } 
	 EOF 
;

// Rule NewLineLine
ruleNewLineLine returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getNewLineLineAccess().getNewLineLineAction(),
            $current);
    }
)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleCode
entryRuleCode returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCodeRule()); }
	 iv_ruleCode=ruleCode 
	 { $current=$iv_ruleCode.current; } 
	 EOF 
;

// Rule Code
ruleCode returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getCodeAccess().getCodeAction_0(),
            $current);
    }
)


(
(
		{ 
	        newCompositeNode(grammarAccess.getCodeAccess().getCodeMyCodeLineExtendedParserRuleCall_1_0()); 
	    }
		lv_code_1_0=ruleMyCodeLineExtended		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCodeRule());
	        }
       		set(
       			$current, 
       			"code",
        		lv_code_1_0, 
        		"at.jku.weiner.c.preprocess.Preprocess.MyCodeLineExtended");
	        afterParserOrEnumRuleCall();
	    }

)
)

)


;
finally {

	/*no after found*/

}





// Entry rule entryRulePP_ID
entryRulePP_ID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPP_IDRule()); } 
	 iv_rulePP_ID=rulePP_ID 
	 { $current=$iv_rulePP_ID.current.getText(); }  
	 EOF 
;

// Rule PP_ID
rulePP_ID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getPP_IDAccess().getIDTerminalRuleCall_0()); 
    }

    |    this_LINE_1=RULE_LINE    {
		$current.merge(this_LINE_1);
    }

    { 
    newLeafNode(this_LINE_1, grammarAccess.getPP_IDAccess().getLINETerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleMyCode
entryRuleMyCode returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMyCodeRule()); } 
	 iv_ruleMyCode=ruleMyCode 
	 { $current=$iv_ruleMyCode.current.getText(); }  
	 EOF 
;

// Rule MyCode
ruleMyCode returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMyCodeAccess().getPP_IDParserRuleCall_0()); 
    }
    this_PP_ID_0=rulePP_ID    {
		$current.merge(this_PP_ID_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_SPECIAL_1=RULE_SPECIAL    {
		$current.merge(this_SPECIAL_1);
    }

    { 
    newLeafNode(this_SPECIAL_1, grammarAccess.getMyCodeAccess().getSPECIALTerminalRuleCall_1()); 
    }

    |    this_INCLUDE_2=RULE_INCLUDE    {
		$current.merge(this_INCLUDE_2);
    }

    { 
    newLeafNode(this_INCLUDE_2, grammarAccess.getMyCodeAccess().getINCLUDETerminalRuleCall_2()); 
    }

    |    this_DEFINE_3=RULE_DEFINE    {
		$current.merge(this_DEFINE_3);
    }

    { 
    newLeafNode(this_DEFINE_3, grammarAccess.getMyCodeAccess().getDEFINETerminalRuleCall_3()); 
    }

    |    this_ERROR_4=RULE_ERROR    {
		$current.merge(this_ERROR_4);
    }

    { 
    newLeafNode(this_ERROR_4, grammarAccess.getMyCodeAccess().getERRORTerminalRuleCall_4()); 
    }

    |    this_PRAGMA_5=RULE_PRAGMA    {
		$current.merge(this_PRAGMA_5);
    }

    { 
    newLeafNode(this_PRAGMA_5, grammarAccess.getMyCodeAccess().getPRAGMATerminalRuleCall_5()); 
    }

    |    this_IFDEF_6=RULE_IFDEF    {
		$current.merge(this_IFDEF_6);
    }

    { 
    newLeafNode(this_IFDEF_6, grammarAccess.getMyCodeAccess().getIFDEFTerminalRuleCall_6()); 
    }

    |    this_ENDIF_7=RULE_ENDIF    {
		$current.merge(this_ENDIF_7);
    }

    { 
    newLeafNode(this_ENDIF_7, grammarAccess.getMyCodeAccess().getENDIFTerminalRuleCall_7()); 
    }

    |    this_IFNOTDEF_8=RULE_IFNOTDEF    {
		$current.merge(this_IFNOTDEF_8);
    }

    { 
    newLeafNode(this_IFNOTDEF_8, grammarAccess.getMyCodeAccess().getIFNOTDEFTerminalRuleCall_8()); 
    }

    |    this_IF_9=RULE_IF    {
		$current.merge(this_IF_9);
    }

    { 
    newLeafNode(this_IF_9, grammarAccess.getMyCodeAccess().getIFTerminalRuleCall_9()); 
    }

    |    this_DEFINED_10=RULE_DEFINED    {
		$current.merge(this_DEFINED_10);
    }

    { 
    newLeafNode(this_DEFINED_10, grammarAccess.getMyCodeAccess().getDEFINEDTerminalRuleCall_10()); 
    }

    |    this_ELIF_11=RULE_ELIF    {
		$current.merge(this_ELIF_11);
    }

    { 
    newLeafNode(this_ELIF_11, grammarAccess.getMyCodeAccess().getELIFTerminalRuleCall_11()); 
    }

    |    this_ELSE_12=RULE_ELSE    {
		$current.merge(this_ELSE_12);
    }

    { 
    newLeafNode(this_ELSE_12, grammarAccess.getMyCodeAccess().getELSETerminalRuleCall_12()); 
    }

    |    this_WARNING_13=RULE_WARNING    {
		$current.merge(this_WARNING_13);
    }

    { 
    newLeafNode(this_WARNING_13, grammarAccess.getMyCodeAccess().getWARNINGTerminalRuleCall_13()); 
    }

    |    this_UNDEF_14=RULE_UNDEF    {
		$current.merge(this_UNDEF_14);
    }

    { 
    newLeafNode(this_UNDEF_14, grammarAccess.getMyCodeAccess().getUNDEFTerminalRuleCall_14()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getMyCodeAccess().getSpecialKeywordsParserRuleCall_15()); 
    }
    this_SpecialKeywords_15=ruleSpecialKeywords    {
		$current.merge(this_SpecialKeywords_15);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMyCodeAccess().getConstant1ParserRuleCall_16()); 
    }
    this_Constant1_16=ruleConstant1    {
		$current.merge(this_Constant1_16);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleMyDefineLineFunction
entryRuleMyDefineLineFunction returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMyDefineLineFunctionRule()); } 
	 iv_ruleMyDefineLineFunction=ruleMyDefineLineFunction 
	 { $current=$iv_ruleMyDefineLineFunction.current.getText(); }  
	 EOF 
;

// Rule MyDefineLineFunction
ruleMyDefineLineFunction returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMyDefineLineFunctionAccess().getMyDefineLineObjectParserRuleCall_0()); 
    }
    this_MyDefineLineObject_0=ruleMyDefineLineObject    {
		$current.merge(this_MyDefineLineObject_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_HASH_1=RULE_HASH    {
		$current.merge(this_HASH_1);
    }

    { 
    newLeafNode(this_HASH_1, grammarAccess.getMyDefineLineFunctionAccess().getHASHTerminalRuleCall_1()); 
    }

    |    this_VA_ARGS_2=RULE_VA_ARGS    {
		$current.merge(this_VA_ARGS_2);
    }

    { 
    newLeafNode(this_VA_ARGS_2, grammarAccess.getMyDefineLineFunctionAccess().getVA_ARGSTerminalRuleCall_2()); 
    }
)+
    ;





// Entry rule entryRuleMyDefineLineObject
entryRuleMyDefineLineObject returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMyDefineLineObjectRule()); } 
	 iv_ruleMyDefineLineObject=ruleMyDefineLineObject 
	 { $current=$iv_ruleMyDefineLineObject.current.getText(); }  
	 EOF 
;

// Rule MyDefineLineObject
ruleMyDefineLineObject returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMyDefineLineObjectAccess().getMyCodeParserRuleCall_0()); 
    }
    this_MyCode_0=ruleMyCode    {
		$current.merge(this_MyCode_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_WHITESPACE_1=RULE_WHITESPACE    {
		$current.merge(this_WHITESPACE_1);
    }

    { 
    newLeafNode(this_WHITESPACE_1, grammarAccess.getMyDefineLineObjectAccess().getWHITESPACETerminalRuleCall_1()); 
    }
)+
    ;





// Entry rule entryRuleMyCodeLine
entryRuleMyCodeLine returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMyCodeLineRule()); } 
	 iv_ruleMyCodeLine=ruleMyCodeLine 
	 { $current=$iv_ruleMyCodeLine.current.getText(); }  
	 EOF 
;

// Rule MyCodeLine
ruleMyCodeLine returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMyCodeLineAccess().getMyCodeParserRuleCall_0()); 
    }
    this_MyCode_0=ruleMyCode    {
		$current.merge(this_MyCode_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_WHITESPACE_1=RULE_WHITESPACE    {
		$current.merge(this_WHITESPACE_1);
    }

    { 
    newLeafNode(this_WHITESPACE_1, grammarAccess.getMyCodeLineAccess().getWHITESPACETerminalRuleCall_1()); 
    }
)+
    ;





// Entry rule entryRuleMyCodeLineExtended
entryRuleMyCodeLineExtended returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMyCodeLineExtendedRule()); } 
	 iv_ruleMyCodeLineExtended=ruleMyCodeLineExtended 
	 { $current=$iv_ruleMyCodeLineExtended.current.getText(); }  
	 EOF 
;

// Rule MyCodeLineExtended
ruleMyCodeLineExtended returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMyCodeLineExtendedAccess().getMyCodeLineExtendedWSOnlyParserRuleCall_0()); 
    }
    this_MyCodeLineExtendedWSOnly_0=ruleMyCodeLineExtendedWSOnly    {
		$current.merge(this_MyCodeLineExtendedWSOnly_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMyCodeLineExtendedAccess().getMyCodeLineExtendedNormalParserRuleCall_1()); 
    }
    this_MyCodeLineExtendedNormal_1=ruleMyCodeLineExtendedNormal    {
		$current.merge(this_MyCodeLineExtendedNormal_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleMyCodeLineExtendedWSOnly
entryRuleMyCodeLineExtendedWSOnly returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMyCodeLineExtendedWSOnlyRule()); } 
	 iv_ruleMyCodeLineExtendedWSOnly=ruleMyCodeLineExtendedWSOnly 
	 { $current=$iv_ruleMyCodeLineExtendedWSOnly.current.getText(); }  
	 EOF 
;

// Rule MyCodeLineExtendedWSOnly
ruleMyCodeLineExtendedWSOnly returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_WHITESPACE_0=RULE_WHITESPACE    {
		$current.merge(this_WHITESPACE_0);
    }

    { 
    newLeafNode(this_WHITESPACE_0, grammarAccess.getMyCodeLineExtendedWSOnlyAccess().getWHITESPACETerminalRuleCall()); 
    }
)+
    ;





// Entry rule entryRuleMyCodeLineExtendedNormal
entryRuleMyCodeLineExtendedNormal returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMyCodeLineExtendedNormalRule()); } 
	 iv_ruleMyCodeLineExtendedNormal=ruleMyCodeLineExtendedNormal 
	 { $current=$iv_ruleMyCodeLineExtendedNormal.current.getText(); }  
	 EOF 
;

// Rule MyCodeLineExtendedNormal
ruleMyCodeLineExtendedNormal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((    this_WHITESPACE_0=RULE_WHITESPACE    {
		$current.merge(this_WHITESPACE_0);
    }

    { 
    newLeafNode(this_WHITESPACE_0, grammarAccess.getMyCodeLineExtendedNormalAccess().getWHITESPACETerminalRuleCall_0()); 
    }
)*(
    { 
        newCompositeNode(grammarAccess.getMyCodeLineExtendedNormalAccess().getMyCodeParserRuleCall_1()); 
    }
    this_MyCode_1=ruleMyCode    {
		$current.merge(this_MyCode_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+(
    { 
        newCompositeNode(grammarAccess.getMyCodeLineExtendedNormalAccess().getMyCodeLineParserRuleCall_2_0()); 
    }
    this_MyCodeLine_2=ruleMyCodeLine    {
		$current.merge(this_MyCodeLine_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_HASH_3=RULE_HASH    {
		$current.merge(this_HASH_3);
    }

    { 
    newLeafNode(this_HASH_3, grammarAccess.getMyCodeLineExtendedNormalAccess().getHASHTerminalRuleCall_2_1()); 
    }
)*)
    ;





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryExpressionAccess().getPrimaryExpressionAction_0(),
            $current);
    }
)


(
(
(
(
		lv_defined_1_0=RULE_DEFINED
		{
			newLeafNode(lv_defined_1_0, grammarAccess.getPrimaryExpressionAccess().getDefinedDEFINEDTerminalRuleCall_1_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"defined",
        		true, 
        		"at.jku.weiner.c.preprocess.Preprocess.DEFINED");
	    }

)
)?


(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getIdentPP_IDParserRuleCall_1_0_1_0()); 
	    }
		lv_ident_2_0=rulePP_ID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"ident",
        		lv_ident_2_0, 
        		"at.jku.weiner.c.preprocess.Preprocess.PP_ID");
	        afterParserOrEnumRuleCall();
	    }

)
)

)


    |
(
(
(
		lv_defined_3_0=RULE_DEFINED
		{
			newLeafNode(lv_defined_3_0, grammarAccess.getPrimaryExpressionAccess().getDefinedDEFINEDTerminalRuleCall_1_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"defined",
        		true, 
        		"at.jku.weiner.c.preprocess.Preprocess.DEFINED");
	    }

)
)?


this_SKW_LEFTPAREN_4=RULE_SKW_LEFTPAREN
    { 
    newLeafNode(this_SKW_LEFTPAREN_4, grammarAccess.getPrimaryExpressionAccess().getSKW_LEFTPARENTerminalRuleCall_1_1_1()); 
    }



(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getIdentPP_IDParserRuleCall_1_1_2_0()); 
	    }
		lv_ident_5_0=rulePP_ID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"ident",
        		lv_ident_5_0, 
        		"at.jku.weiner.c.preprocess.Preprocess.PP_ID");
	        afterParserOrEnumRuleCall();
	    }

)
)


this_SKW_RIGHTPAREN_6=RULE_SKW_RIGHTPAREN
    { 
    newLeafNode(this_SKW_RIGHTPAREN_6, grammarAccess.getPrimaryExpressionAccess().getSKW_RIGHTPARENTerminalRuleCall_1_1_3()); 
    }


)


    |
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getConstConstant1ParserRuleCall_1_2_0()); 
	    }
		lv_const_7_0=ruleConstant1		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"const",
        		lv_const_7_0, 
        		"at.jku.weiner.c.common.Common.Constant1");
	        afterParserOrEnumRuleCall();
	    }

)
)


    |
(
(
(
		lv_parentheses_8_0=RULE_SKW_LEFTPAREN
		{
			newLeafNode(lv_parentheses_8_0, grammarAccess.getPrimaryExpressionAccess().getParenthesesSKW_LEFTPARENTerminalRuleCall_1_3_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"parentheses",
        		true, 
        		"at.jku.weiner.c.common.Common.SKW_LEFTPAREN");
	    }

)
)


(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getExprExpressionParserRuleCall_1_3_1_0()); 
	    }
		lv_expr_9_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_9_0, 
        		"at.jku.weiner.c.common.Common.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)


this_SKW_RIGHTPAREN_10=RULE_SKW_RIGHTPAREN
    { 
    newLeafNode(this_SKW_RIGHTPAREN_10, grammarAccess.getPrimaryExpressionAccess().getSKW_RIGHTPARENTerminalRuleCall_1_3_2()); 
    }


)

)

)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WHITESPACE", "RULE_IGNORED");
	}
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WHITESPACE", "RULE_IGNORED");
    }
    @after { leaveRule();
    		
     }:


	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getConditionalExpressionParserRuleCall()); 
    }
    this_ConditionalExpression_0=ruleConditionalExpression
    { 
        $current = $this_ConditionalExpression_0.current; 
        afterParserOrEnumRuleCall();
    }



;
finally {
	myHiddenTokenState.restore();

	/*no after found*/

}







// Entry rule entryRuleConditionalExpression
entryRuleConditionalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionalExpressionRule()); }
	 iv_ruleConditionalExpression=ruleConditionalExpression 
	 { $current=$iv_ruleConditionalExpression.current; } 
	 EOF 
;

// Rule ConditionalExpression
ruleConditionalExpression returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConditionalExpressionAccess().getLogicalOrExpressionParserRuleCall_0()); 
    }
    this_LogicalOrExpression_0=ruleLogicalOrExpression
    { 
        $current = $this_LogicalOrExpression_0.current; 
        afterParserOrEnumRuleCall();
    }



(
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getConditionalExpressionAccess().getConditionalExpressionExprAction_1_0(),
            $current);
    }
)


this_SKW_QUESTION_2=RULE_SKW_QUESTION
    { 
    newLeafNode(this_SKW_QUESTION_2, grammarAccess.getConditionalExpressionAccess().getSKW_QUESTIONTerminalRuleCall_1_1()); 
    }



(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalExpressionAccess().getQExprExpressionParserRuleCall_1_2_0()); 
	    }
		lv_qExpr_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
	        }
       		set(
       			$current, 
       			"qExpr",
        		lv_qExpr_3_0, 
        		"at.jku.weiner.c.common.Common.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)


this_SKW_COLON_4=RULE_SKW_COLON
    { 
    newLeafNode(this_SKW_COLON_4, grammarAccess.getConditionalExpressionAccess().getSKW_COLONTerminalRuleCall_1_3()); 
    }



(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalExpressionAccess().getCExprConditionalExpressionParserRuleCall_1_4_0()); 
	    }
		lv_cExpr_5_0=ruleConditionalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
	        }
       		set(
       			$current, 
       			"cExpr",
        		lv_cExpr_5_0, 
        		"at.jku.weiner.c.common.Common.ConditionalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)

)?

)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleLogicalOrExpression
entryRuleLogicalOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalOrExpressionRule()); }
	 iv_ruleLogicalOrExpression=ruleLogicalOrExpression 
	 { $current=$iv_ruleLogicalOrExpression.current; } 
	 EOF 
;

// Rule LogicalOrExpression
ruleLogicalOrExpression returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getLogicalAndExpressionParserRuleCall_0()); 
    }
    this_LogicalAndExpression_0=ruleLogicalAndExpression
    { 
        $current = $this_LogicalAndExpression_0.current; 
        afterParserOrEnumRuleCall();
    }



(
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getLogicalOrExpressionAccess().getLogicalOrExpressionLeftAction_1_0(),
            $current);
    }
)


this_SKW_OROR_2=RULE_SKW_OROR
    { 
    newLeafNode(this_SKW_OROR_2, grammarAccess.getLogicalOrExpressionAccess().getSKW_ORORTerminalRuleCall_1_1()); 
    }



(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getRightLogicalAndExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleLogicalAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalOrExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"at.jku.weiner.c.common.Common.LogicalAndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)

)*

)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleLogicalAndExpression
entryRuleLogicalAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalAndExpressionRule()); }
	 iv_ruleLogicalAndExpression=ruleLogicalAndExpression 
	 { $current=$iv_ruleLogicalAndExpression.current; } 
	 EOF 
;

// Rule LogicalAndExpression
ruleLogicalAndExpression returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getInclusiveOrExpressionParserRuleCall_0()); 
    }
    this_InclusiveOrExpression_0=ruleInclusiveOrExpression
    { 
        $current = $this_InclusiveOrExpression_0.current; 
        afterParserOrEnumRuleCall();
    }



(
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getLogicalAndExpressionAccess().getLogicalAndExpressionLeftAction_1_0(),
            $current);
    }
)


this_SKW_ANDAND_2=RULE_SKW_ANDAND
    { 
    newLeafNode(this_SKW_ANDAND_2, grammarAccess.getLogicalAndExpressionAccess().getSKW_ANDANDTerminalRuleCall_1_1()); 
    }



(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getRightInclusiveOrExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleInclusiveOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalAndExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"at.jku.weiner.c.common.Common.InclusiveOrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)

)*

)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleInclusiveOrExpression
entryRuleInclusiveOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInclusiveOrExpressionRule()); }
	 iv_ruleInclusiveOrExpression=ruleInclusiveOrExpression 
	 { $current=$iv_ruleInclusiveOrExpression.current; } 
	 EOF 
;

// Rule InclusiveOrExpression
ruleInclusiveOrExpression returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getInclusiveOrExpressionAccess().getExclusiveOrExpressionParserRuleCall_0()); 
    }
    this_ExclusiveOrExpression_0=ruleExclusiveOrExpression
    { 
        $current = $this_ExclusiveOrExpression_0.current; 
        afterParserOrEnumRuleCall();
    }



(
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getInclusiveOrExpressionAccess().getInclusiveOrExpressionLeftAction_1_0(),
            $current);
    }
)


this_SKW_OR_2=RULE_SKW_OR
    { 
    newLeafNode(this_SKW_OR_2, grammarAccess.getInclusiveOrExpressionAccess().getSKW_ORTerminalRuleCall_1_1()); 
    }



(
(
		{ 
	        newCompositeNode(grammarAccess.getInclusiveOrExpressionAccess().getRightExclusiveOrExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleExclusiveOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInclusiveOrExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"at.jku.weiner.c.common.Common.ExclusiveOrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)

)*

)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleExclusiveOrExpression
entryRuleExclusiveOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExclusiveOrExpressionRule()); }
	 iv_ruleExclusiveOrExpression=ruleExclusiveOrExpression 
	 { $current=$iv_ruleExclusiveOrExpression.current; } 
	 EOF 
;

// Rule ExclusiveOrExpression
ruleExclusiveOrExpression returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExclusiveOrExpressionAccess().getAndExpressionParserRuleCall_0()); 
    }
    this_AndExpression_0=ruleAndExpression
    { 
        $current = $this_AndExpression_0.current; 
        afterParserOrEnumRuleCall();
    }



(
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExclusiveOrExpressionAccess().getExclusiveOrExpressionLeftAction_1_0(),
            $current);
    }
)


this_SKW_CARET_2=RULE_SKW_CARET
    { 
    newLeafNode(this_SKW_CARET_2, grammarAccess.getExclusiveOrExpressionAccess().getSKW_CARETTerminalRuleCall_1_1()); 
    }



(
(
		{ 
	        newCompositeNode(grammarAccess.getExclusiveOrExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExclusiveOrExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"at.jku.weiner.c.common.Common.AndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)

)*

)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	 iv_ruleAndExpression=ruleAndExpression 
	 { $current=$iv_ruleAndExpression.current; } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAndExpressionAccess().getEqualityExpressionParserRuleCall_0()); 
    }
    this_EqualityExpression_0=ruleEqualityExpression
    { 
        $current = $this_EqualityExpression_0.current; 
        afterParserOrEnumRuleCall();
    }



(
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0(),
            $current);
    }
)


this_SKW_AND_2=RULE_SKW_AND
    { 
    newLeafNode(this_SKW_AND_2, grammarAccess.getAndExpressionAccess().getSKW_ANDTerminalRuleCall_1_1()); 
    }



(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExpressionAccess().getRightEqualityExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleEqualityExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"at.jku.weiner.c.common.Common.EqualityExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)

)*

)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEqualityExpressionRule()); }
	 iv_ruleEqualityExpression=ruleEqualityExpression 
	 { $current=$iv_ruleEqualityExpression.current; } 
	 EOF 
;

// Rule EqualityExpression
ruleEqualityExpression returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
    }
    this_RelationalExpression_0=ruleRelationalExpression
    { 
        $current = $this_RelationalExpression_0.current; 
        afterParserOrEnumRuleCall();
    }



(
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLeftAction_1_0(),
            $current);
    }
)


(
(
(
		lv_op_2_0=RULE_SKW_EQUAL
		{
			newLeafNode(lv_op_2_0, grammarAccess.getEqualityExpressionAccess().getOpSKW_EQUALTerminalRuleCall_1_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEqualityExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"at.jku.weiner.c.common.Common.SKW_EQUAL");
	    }

)
)


    |
(
(
		lv_op_3_0=RULE_SKW_NOTEQUAL
		{
			newLeafNode(lv_op_3_0, grammarAccess.getEqualityExpressionAccess().getOpSKW_NOTEQUALTerminalRuleCall_1_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEqualityExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_3_0, 
        		"at.jku.weiner.c.common.Common.SKW_NOTEQUAL");
	    }

)
)

)


(
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRightRelationalExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_4_0=ruleRelationalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_4_0, 
        		"at.jku.weiner.c.common.Common.RelationalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)

)*

)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationalExpressionRule()); }
	 iv_ruleRelationalExpression=ruleRelationalExpression 
	 { $current=$iv_ruleRelationalExpression.current; } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0()); 
    }
    this_ShiftExpression_0=ruleShiftExpression
    { 
        $current = $this_ShiftExpression_0.current; 
        afterParserOrEnumRuleCall();
    }



(
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLeftAction_1_0(),
            $current);
    }
)


(
(
(
		lv_op_2_0=RULE_SKW_LESS
		{
			newLeafNode(lv_op_2_0, grammarAccess.getRelationalExpressionAccess().getOpSKW_LESSTerminalRuleCall_1_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"at.jku.weiner.c.common.Common.SKW_LESS");
	    }

)
)


    |
(
(
		lv_op_3_0=RULE_SKW_GREATER
		{
			newLeafNode(lv_op_3_0, grammarAccess.getRelationalExpressionAccess().getOpSKW_GREATERTerminalRuleCall_1_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_3_0, 
        		"at.jku.weiner.c.common.Common.SKW_GREATER");
	    }

)
)


    |
(
(
		lv_op_4_0=RULE_SKW_LESSEQUAL
		{
			newLeafNode(lv_op_4_0, grammarAccess.getRelationalExpressionAccess().getOpSKW_LESSEQUALTerminalRuleCall_1_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_4_0, 
        		"at.jku.weiner.c.common.Common.SKW_LESSEQUAL");
	    }

)
)


    |
(
(
		lv_op_5_0=RULE_SKW_GREATEREQUAL
		{
			newLeafNode(lv_op_5_0, grammarAccess.getRelationalExpressionAccess().getOpSKW_GREATEREQUALTerminalRuleCall_1_1_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_5_0, 
        		"at.jku.weiner.c.common.Common.SKW_GREATEREQUAL");
	    }

)
)

)


(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRightShiftExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_6_0=ruleShiftExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_6_0, 
        		"at.jku.weiner.c.common.Common.ShiftExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)

)*

)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleShiftExpression
entryRuleShiftExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getShiftExpressionRule()); }
	 iv_ruleShiftExpression=ruleShiftExpression 
	 { $current=$iv_ruleShiftExpression.current; } 
	 EOF 
;

// Rule ShiftExpression
ruleShiftExpression returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getShiftExpressionAccess().getAdditiveExpressionParserRuleCall_0()); 
    }
    this_AdditiveExpression_0=ruleAdditiveExpression
    { 
        $current = $this_AdditiveExpression_0.current; 
        afterParserOrEnumRuleCall();
    }



(
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getShiftExpressionAccess().getShiftExpressionLeftAction_1_0(),
            $current);
    }
)


(
(
(
		lv_op_2_0=RULE_SKW_LEFTSHIFT
		{
			newLeafNode(lv_op_2_0, grammarAccess.getShiftExpressionAccess().getOpSKW_LEFTSHIFTTerminalRuleCall_1_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getShiftExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"at.jku.weiner.c.common.Common.SKW_LEFTSHIFT");
	    }

)
)


    |
(
(
		lv_op_3_0=RULE_SKW_RIGHTSHIFT
		{
			newLeafNode(lv_op_3_0, grammarAccess.getShiftExpressionAccess().getOpSKW_RIGHTSHIFTTerminalRuleCall_1_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getShiftExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_3_0, 
        		"at.jku.weiner.c.common.Common.SKW_RIGHTSHIFT");
	    }

)
)

)


(
(
		{ 
	        newCompositeNode(grammarAccess.getShiftExpressionAccess().getRightAdditiveExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_4_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShiftExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_4_0, 
        		"at.jku.weiner.c.common.Common.AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)

)*

)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditiveExpressionRule()); }
	 iv_ruleAdditiveExpression=ruleAdditiveExpression 
	 { $current=$iv_ruleAdditiveExpression.current; } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); 
    }
    this_MultiplicativeExpression_0=ruleMultiplicativeExpression
    { 
        $current = $this_MultiplicativeExpression_0.current; 
        afterParserOrEnumRuleCall();
    }



(
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftAction_1_0(),
            $current);
    }
)


(
(
(
		lv_op_2_0=RULE_SKW_PLUS
		{
			newLeafNode(lv_op_2_0, grammarAccess.getAdditiveExpressionAccess().getOpSKW_PLUSTerminalRuleCall_1_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAdditiveExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"at.jku.weiner.c.common.Common.SKW_PLUS");
	    }

)
)


    |
(
(
		lv_op_3_0=RULE_SKW_MINUS
		{
			newLeafNode(lv_op_3_0, grammarAccess.getAdditiveExpressionAccess().getOpSKW_MINUSTerminalRuleCall_1_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAdditiveExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_3_0, 
        		"at.jku.weiner.c.common.Common.SKW_MINUS");
	    }

)
)

)


(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getRightMultiplicativeExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_4_0=ruleMultiplicativeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_4_0, 
        		"at.jku.weiner.c.common.Common.MultiplicativeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)

)*

)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicativeExpressionRule()); }
	 iv_ruleMultiplicativeExpression=ruleMultiplicativeExpression 
	 { $current=$iv_ruleMultiplicativeExpression.current; } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getCastExpressionParserRuleCall_0()); 
    }
    this_CastExpression_0=ruleCastExpression
    { 
        $current = $this_CastExpression_0.current; 
        afterParserOrEnumRuleCall();
    }



(
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftAction_1_0(),
            $current);
    }
)


(
(
(
		lv_op_2_0=RULE_SKW_STAR
		{
			newLeafNode(lv_op_2_0, grammarAccess.getMultiplicativeExpressionAccess().getOpSKW_STARTerminalRuleCall_1_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"at.jku.weiner.c.common.Common.SKW_STAR");
	    }

)
)


    |
(
(
		lv_op_3_0=RULE_SKW_DIV
		{
			newLeafNode(lv_op_3_0, grammarAccess.getMultiplicativeExpressionAccess().getOpSKW_DIVTerminalRuleCall_1_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_3_0, 
        		"at.jku.weiner.c.common.Common.SKW_DIV");
	    }

)
)


    |
(
(
		lv_op_4_0=RULE_SKW_MOD
		{
			newLeafNode(lv_op_4_0, grammarAccess.getMultiplicativeExpressionAccess().getOpSKW_MODTerminalRuleCall_1_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_4_0, 
        		"at.jku.weiner.c.common.Common.SKW_MOD");
	    }

)
)

)


(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getRightCastExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_5_0=ruleCastExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_5_0, 
        		"at.jku.weiner.c.common.Common.CastExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)

)*

)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleCastExpression
entryRuleCastExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCastExpressionRule()); }
	 iv_ruleCastExpression=ruleCastExpression 
	 { $current=$iv_ruleCastExpression.current; } 
	 EOF 
;

// Rule CastExpression
ruleCastExpression returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:


	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCastExpressionAccess().getUnaryExpressionParserRuleCall()); 
    }
    this_UnaryExpression_0=ruleUnaryExpression
    { 
        $current = $this_UnaryExpression_0.current; 
        afterParserOrEnumRuleCall();
    }



;
finally {

	/*no after found*/

}





// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryExpressionRule()); }
	 iv_ruleUnaryExpression=ruleUnaryExpression 
	 { $current=$iv_ruleUnaryExpression.current; } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getPostfixExpressionParserRuleCall_0()); 
    }
    this_PostfixExpression_0=rulePostfixExpression
    { 
        $current = $this_PostfixExpression_0.current; 
        afterParserOrEnumRuleCall();
    }



    |
(
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnaryExpressionAccess().getUnaryExpressionAction_1_0(),
            $current);
    }
)


(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getOpUnaryOperatorParserRuleCall_1_1_0()); 
	    }
		lv_op_2_0=ruleUnaryOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"at.jku.weiner.c.common.Common.UnaryOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)


(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getExprCastExpressionParserRuleCall_1_2_0()); 
	    }
		lv_expr_3_0=ruleCastExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_3_0, 
        		"at.jku.weiner.c.common.Common.CastExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)

)

)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleUnaryOperator
entryRuleUnaryOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryOperatorRule()); } 
	 iv_ruleUnaryOperator=ruleUnaryOperator 
	 { $current=$iv_ruleUnaryOperator.current.getText(); }  
	 EOF 
;

// Rule UnaryOperator
ruleUnaryOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_SKW_AND_0=RULE_SKW_AND    {
		$current.merge(this_SKW_AND_0);
    }

    { 
    newLeafNode(this_SKW_AND_0, grammarAccess.getUnaryOperatorAccess().getSKW_ANDTerminalRuleCall_0()); 
    }

    |    this_SKW_STAR_1=RULE_SKW_STAR    {
		$current.merge(this_SKW_STAR_1);
    }

    { 
    newLeafNode(this_SKW_STAR_1, grammarAccess.getUnaryOperatorAccess().getSKW_STARTerminalRuleCall_1()); 
    }

    |    this_SKW_PLUS_2=RULE_SKW_PLUS    {
		$current.merge(this_SKW_PLUS_2);
    }

    { 
    newLeafNode(this_SKW_PLUS_2, grammarAccess.getUnaryOperatorAccess().getSKW_PLUSTerminalRuleCall_2()); 
    }

    |    this_SKW_MINUS_3=RULE_SKW_MINUS    {
		$current.merge(this_SKW_MINUS_3);
    }

    { 
    newLeafNode(this_SKW_MINUS_3, grammarAccess.getUnaryOperatorAccess().getSKW_MINUSTerminalRuleCall_3()); 
    }

    |    this_SKW_TILDE_4=RULE_SKW_TILDE    {
		$current.merge(this_SKW_TILDE_4);
    }

    { 
    newLeafNode(this_SKW_TILDE_4, grammarAccess.getUnaryOperatorAccess().getSKW_TILDETerminalRuleCall_4()); 
    }

    |    this_SKW_NOT_5=RULE_SKW_NOT    {
		$current.merge(this_SKW_NOT_5);
    }

    { 
    newLeafNode(this_SKW_NOT_5, grammarAccess.getUnaryOperatorAccess().getSKW_NOTTerminalRuleCall_5()); 
    }
)
    ;





// Entry rule entryRulePostfixExpression
entryRulePostfixExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPostfixExpressionRule()); }
	 iv_rulePostfixExpression=rulePostfixExpression 
	 { $current=$iv_rulePostfixExpression.current; } 
	 EOF 
;

// Rule PostfixExpression
rulePostfixExpression returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPostfixExpressionAccess().getPrimaryExpressionParserRuleCall_0()); 
    }
    this_PrimaryExpression_0=rulePrimaryExpression
    { 
        $current = $this_PrimaryExpression_0.current; 
        afterParserOrEnumRuleCall();
    }



(
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPostfixExpressionAccess().getPostfixExpressionExprAction_1_0(),
            $current);
    }
)


(
(
		{ 
	        newCompositeNode(grammarAccess.getPostfixExpressionAccess().getSuffixPostfixExpressionSuffixArgumentParserRuleCall_1_1_0()); 
	    }
		lv_suffix_2_0=rulePostfixExpressionSuffixArgument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPostfixExpressionRule());
	        }
       		set(
       			$current, 
       			"suffix",
        		lv_suffix_2_0, 
        		"at.jku.weiner.c.common.Common.PostfixExpressionSuffixArgument");
	        afterParserOrEnumRuleCall();
	    }

)
)

)*

)


;
finally {

	/*no after found*/

}





// Entry rule entryRulePostfixExpressionSuffixArgument
entryRulePostfixExpressionSuffixArgument returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPostfixExpressionSuffixArgumentRule()); }
	 iv_rulePostfixExpressionSuffixArgument=rulePostfixExpressionSuffixArgument 
	 { $current=$iv_rulePostfixExpressionSuffixArgument.current; } 
	 EOF 
;

// Rule PostfixExpressionSuffixArgument
rulePostfixExpressionSuffixArgument returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getPostfixExpressionSuffixArgumentAccess().getPostfixExpressionSuffixArgumentAction_0(),
            $current);
    }
)


this_SKW_LEFTPAREN_1=RULE_SKW_LEFTPAREN
    { 
    newLeafNode(this_SKW_LEFTPAREN_1, grammarAccess.getPostfixExpressionSuffixArgumentAccess().getSKW_LEFTPARENTerminalRuleCall_1()); 
    }



(
(
		{ 
	        newCompositeNode(grammarAccess.getPostfixExpressionSuffixArgumentAccess().getArgumentExpressionListArgumentExpressionListParserRuleCall_2_0()); 
	    }
		lv_argumentExpressionList_2_0=ruleArgumentExpressionList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPostfixExpressionSuffixArgumentRule());
	        }
       		set(
       			$current, 
       			"argumentExpressionList",
        		lv_argumentExpressionList_2_0, 
        		"at.jku.weiner.c.common.Common.ArgumentExpressionList");
	        afterParserOrEnumRuleCall();
	    }

)
)?


this_SKW_RIGHTPAREN_3=RULE_SKW_RIGHTPAREN
    { 
    newLeafNode(this_SKW_RIGHTPAREN_3, grammarAccess.getPostfixExpressionSuffixArgumentAccess().getSKW_RIGHTPARENTerminalRuleCall_3()); 
    }


)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleArgumentExpressionList
entryRuleArgumentExpressionList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgumentExpressionListRule()); }
	 iv_ruleArgumentExpressionList=ruleArgumentExpressionList 
	 { $current=$iv_ruleArgumentExpressionList.current; } 
	 EOF 
;

// Rule ArgumentExpressionList
ruleArgumentExpressionList returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		
     }:

(
(
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentExpressionListAccess().getExprConditionalExpressionParserRuleCall_0_0()); 
	    }
		lv_expr_0_0=ruleConditionalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentExpressionListRule());
	        }
       		add(
       			$current, 
       			"expr",
        		lv_expr_0_0, 
        		"at.jku.weiner.c.common.Common.ConditionalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)


(
this_SKW_COMMA_1=RULE_SKW_COMMA
    { 
    newLeafNode(this_SKW_COMMA_1, grammarAccess.getArgumentExpressionListAccess().getSKW_COMMATerminalRuleCall_1_0()); 
    }



(
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentExpressionListAccess().getExprConditionalExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expr_2_0=ruleConditionalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentExpressionListRule());
	        }
       		add(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"at.jku.weiner.c.common.Common.ConditionalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)

)*

)


;
finally {

	/*no after found*/

}





// Entry rule entryRuleConstant1
entryRuleConstant1 returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstant1Rule()); } 
	 iv_ruleConstant1=ruleConstant1 
	 { $current=$iv_ruleConstant1.current.getText(); }  
	 EOF 
;

// Rule Constant1
ruleConstant1 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getConstant1Access().getHexLiteralParserRuleCall_0()); 
    }
    this_HexLiteral_0=ruleHexLiteral    {
		$current.merge(this_HexLiteral_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConstant1Access().getOctalLiteralParserRuleCall_1()); 
    }
    this_OctalLiteral_1=ruleOctalLiteral    {
		$current.merge(this_OctalLiteral_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConstant1Access().getDecimalLiteralParserRuleCall_2()); 
    }
    this_DecimalLiteral_2=ruleDecimalLiteral    {
		$current.merge(this_DecimalLiteral_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConstant1Access().getCharLiteralParserRuleCall_3()); 
    }
    this_CharLiteral_3=ruleCharLiteral    {
		$current.merge(this_CharLiteral_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConstant1Access().getStringLiteralParserRuleCall_4()); 
    }
    this_StringLiteral_4=ruleStringLiteral    {
		$current.merge(this_StringLiteral_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConstant1Access().getFloatLiteralParserRuleCall_5()); 
    }
    this_FloatLiteral_5=ruleFloatLiteral    {
		$current.merge(this_FloatLiteral_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConstant1Access().getBinLiteralParserRuleCall_6()); 
    }
    this_BinLiteral_6=ruleBinLiteral    {
		$current.merge(this_BinLiteral_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;







// Entry rule entryRuleSpecialKeywords
entryRuleSpecialKeywords returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSpecialKeywordsRule()); } 
	 iv_ruleSpecialKeywords=ruleSpecialKeywords 
	 { $current=$iv_ruleSpecialKeywords.current.getText(); }  
	 EOF 
;

// Rule SpecialKeywords
ruleSpecialKeywords returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_SKW_AND_0=RULE_SKW_AND    {
		$current.merge(this_SKW_AND_0);
    }

    { 
    newLeafNode(this_SKW_AND_0, grammarAccess.getSpecialKeywordsAccess().getSKW_ANDTerminalRuleCall_0()); 
    }

    |    this_SKW_ANDAND_1=RULE_SKW_ANDAND    {
		$current.merge(this_SKW_ANDAND_1);
    }

    { 
    newLeafNode(this_SKW_ANDAND_1, grammarAccess.getSpecialKeywordsAccess().getSKW_ANDANDTerminalRuleCall_1()); 
    }

    |    this_SKW_ASSIGN_2=RULE_SKW_ASSIGN    {
		$current.merge(this_SKW_ASSIGN_2);
    }

    { 
    newLeafNode(this_SKW_ASSIGN_2, grammarAccess.getSpecialKeywordsAccess().getSKW_ASSIGNTerminalRuleCall_2()); 
    }

    |    this_SKW_BACKSLASH_3=RULE_SKW_BACKSLASH    {
		$current.merge(this_SKW_BACKSLASH_3);
    }

    { 
    newLeafNode(this_SKW_BACKSLASH_3, grammarAccess.getSpecialKeywordsAccess().getSKW_BACKSLASHTerminalRuleCall_3()); 
    }

    |    this_SKW_CARET_4=RULE_SKW_CARET    {
		$current.merge(this_SKW_CARET_4);
    }

    { 
    newLeafNode(this_SKW_CARET_4, grammarAccess.getSpecialKeywordsAccess().getSKW_CARETTerminalRuleCall_4()); 
    }

    |    this_SKW_COMMA_5=RULE_SKW_COMMA    {
		$current.merge(this_SKW_COMMA_5);
    }

    { 
    newLeafNode(this_SKW_COMMA_5, grammarAccess.getSpecialKeywordsAccess().getSKW_COMMATerminalRuleCall_5()); 
    }

    |    this_SKW_COLON_6=RULE_SKW_COLON    {
		$current.merge(this_SKW_COLON_6);
    }

    { 
    newLeafNode(this_SKW_COLON_6, grammarAccess.getSpecialKeywordsAccess().getSKW_COLONTerminalRuleCall_6()); 
    }

    |    this_SKW_DIV_7=RULE_SKW_DIV    {
		$current.merge(this_SKW_DIV_7);
    }

    { 
    newLeafNode(this_SKW_DIV_7, grammarAccess.getSpecialKeywordsAccess().getSKW_DIVTerminalRuleCall_7()); 
    }

    |    this_SKW_DOT_8=RULE_SKW_DOT    {
		$current.merge(this_SKW_DOT_8);
    }

    { 
    newLeafNode(this_SKW_DOT_8, grammarAccess.getSpecialKeywordsAccess().getSKW_DOTTerminalRuleCall_8()); 
    }

    |    this_SKW_DOUBLEQUOTE_9=RULE_SKW_DOUBLEQUOTE    {
		$current.merge(this_SKW_DOUBLEQUOTE_9);
    }

    { 
    newLeafNode(this_SKW_DOUBLEQUOTE_9, grammarAccess.getSpecialKeywordsAccess().getSKW_DOUBLEQUOTETerminalRuleCall_9()); 
    }

    |    this_SKW_EQUAL_10=RULE_SKW_EQUAL    {
		$current.merge(this_SKW_EQUAL_10);
    }

    { 
    newLeafNode(this_SKW_EQUAL_10, grammarAccess.getSpecialKeywordsAccess().getSKW_EQUALTerminalRuleCall_10()); 
    }

    |    this_SKW_GREATER_11=RULE_SKW_GREATER    {
		$current.merge(this_SKW_GREATER_11);
    }

    { 
    newLeafNode(this_SKW_GREATER_11, grammarAccess.getSpecialKeywordsAccess().getSKW_GREATERTerminalRuleCall_11()); 
    }

    |    this_SKW_GREATEREQUAL_12=RULE_SKW_GREATEREQUAL    {
		$current.merge(this_SKW_GREATEREQUAL_12);
    }

    { 
    newLeafNode(this_SKW_GREATEREQUAL_12, grammarAccess.getSpecialKeywordsAccess().getSKW_GREATEREQUALTerminalRuleCall_12()); 
    }

    |    this_SKW_LEFTBRACE_13=RULE_SKW_LEFTBRACE    {
		$current.merge(this_SKW_LEFTBRACE_13);
    }

    { 
    newLeafNode(this_SKW_LEFTBRACE_13, grammarAccess.getSpecialKeywordsAccess().getSKW_LEFTBRACETerminalRuleCall_13()); 
    }

    |    this_SKW_LEFTBRACKET_14=RULE_SKW_LEFTBRACKET    {
		$current.merge(this_SKW_LEFTBRACKET_14);
    }

    { 
    newLeafNode(this_SKW_LEFTBRACKET_14, grammarAccess.getSpecialKeywordsAccess().getSKW_LEFTBRACKETTerminalRuleCall_14()); 
    }

    |    this_SKW_LEFTPAREN_15=RULE_SKW_LEFTPAREN    {
		$current.merge(this_SKW_LEFTPAREN_15);
    }

    { 
    newLeafNode(this_SKW_LEFTPAREN_15, grammarAccess.getSpecialKeywordsAccess().getSKW_LEFTPARENTerminalRuleCall_15()); 
    }

    |    this_SKW_LEFTSHIFT_16=RULE_SKW_LEFTSHIFT    {
		$current.merge(this_SKW_LEFTSHIFT_16);
    }

    { 
    newLeafNode(this_SKW_LEFTSHIFT_16, grammarAccess.getSpecialKeywordsAccess().getSKW_LEFTSHIFTTerminalRuleCall_16()); 
    }

    |    this_SKW_LESS_17=RULE_SKW_LESS    {
		$current.merge(this_SKW_LESS_17);
    }

    { 
    newLeafNode(this_SKW_LESS_17, grammarAccess.getSpecialKeywordsAccess().getSKW_LESSTerminalRuleCall_17()); 
    }

    |    this_SKW_LESSEQUAL_18=RULE_SKW_LESSEQUAL    {
		$current.merge(this_SKW_LESSEQUAL_18);
    }

    { 
    newLeafNode(this_SKW_LESSEQUAL_18, grammarAccess.getSpecialKeywordsAccess().getSKW_LESSEQUALTerminalRuleCall_18()); 
    }

    |    this_SKW_MINUS_19=RULE_SKW_MINUS    {
		$current.merge(this_SKW_MINUS_19);
    }

    { 
    newLeafNode(this_SKW_MINUS_19, grammarAccess.getSpecialKeywordsAccess().getSKW_MINUSTerminalRuleCall_19()); 
    }

    |    this_SKW_MINUSMINUS_20=RULE_SKW_MINUSMINUS    {
		$current.merge(this_SKW_MINUSMINUS_20);
    }

    { 
    newLeafNode(this_SKW_MINUSMINUS_20, grammarAccess.getSpecialKeywordsAccess().getSKW_MINUSMINUSTerminalRuleCall_20()); 
    }

    |    this_SKW_MOD_21=RULE_SKW_MOD    {
		$current.merge(this_SKW_MOD_21);
    }

    { 
    newLeafNode(this_SKW_MOD_21, grammarAccess.getSpecialKeywordsAccess().getSKW_MODTerminalRuleCall_21()); 
    }

    |    this_SKW_NOT_22=RULE_SKW_NOT    {
		$current.merge(this_SKW_NOT_22);
    }

    { 
    newLeafNode(this_SKW_NOT_22, grammarAccess.getSpecialKeywordsAccess().getSKW_NOTTerminalRuleCall_22()); 
    }

    |    this_SKW_NOTEQUAL_23=RULE_SKW_NOTEQUAL    {
		$current.merge(this_SKW_NOTEQUAL_23);
    }

    { 
    newLeafNode(this_SKW_NOTEQUAL_23, grammarAccess.getSpecialKeywordsAccess().getSKW_NOTEQUALTerminalRuleCall_23()); 
    }

    |    this_SKW_OR_24=RULE_SKW_OR    {
		$current.merge(this_SKW_OR_24);
    }

    { 
    newLeafNode(this_SKW_OR_24, grammarAccess.getSpecialKeywordsAccess().getSKW_ORTerminalRuleCall_24()); 
    }

    |    this_SKW_OROR_25=RULE_SKW_OROR    {
		$current.merge(this_SKW_OROR_25);
    }

    { 
    newLeafNode(this_SKW_OROR_25, grammarAccess.getSpecialKeywordsAccess().getSKW_ORORTerminalRuleCall_25()); 
    }

    |    this_SKW_PLUS_26=RULE_SKW_PLUS    {
		$current.merge(this_SKW_PLUS_26);
    }

    { 
    newLeafNode(this_SKW_PLUS_26, grammarAccess.getSpecialKeywordsAccess().getSKW_PLUSTerminalRuleCall_26()); 
    }

    |    this_SKW_PLUSPLUS_27=RULE_SKW_PLUSPLUS    {
		$current.merge(this_SKW_PLUSPLUS_27);
    }

    { 
    newLeafNode(this_SKW_PLUSPLUS_27, grammarAccess.getSpecialKeywordsAccess().getSKW_PLUSPLUSTerminalRuleCall_27()); 
    }

    |    this_SKW_QUESTION_28=RULE_SKW_QUESTION    {
		$current.merge(this_SKW_QUESTION_28);
    }

    { 
    newLeafNode(this_SKW_QUESTION_28, grammarAccess.getSpecialKeywordsAccess().getSKW_QUESTIONTerminalRuleCall_28()); 
    }

    |    this_SKW_RIGHTBRACE_29=RULE_SKW_RIGHTBRACE    {
		$current.merge(this_SKW_RIGHTBRACE_29);
    }

    { 
    newLeafNode(this_SKW_RIGHTBRACE_29, grammarAccess.getSpecialKeywordsAccess().getSKW_RIGHTBRACETerminalRuleCall_29()); 
    }

    |    this_SKW_RIGHTBRACKET_30=RULE_SKW_RIGHTBRACKET    {
		$current.merge(this_SKW_RIGHTBRACKET_30);
    }

    { 
    newLeafNode(this_SKW_RIGHTBRACKET_30, grammarAccess.getSpecialKeywordsAccess().getSKW_RIGHTBRACKETTerminalRuleCall_30()); 
    }

    |    this_SKW_RIGHTPAREN_31=RULE_SKW_RIGHTPAREN    {
		$current.merge(this_SKW_RIGHTPAREN_31);
    }

    { 
    newLeafNode(this_SKW_RIGHTPAREN_31, grammarAccess.getSpecialKeywordsAccess().getSKW_RIGHTPARENTerminalRuleCall_31()); 
    }

    |    this_SKW_RIGHTSHIFT_32=RULE_SKW_RIGHTSHIFT    {
		$current.merge(this_SKW_RIGHTSHIFT_32);
    }

    { 
    newLeafNode(this_SKW_RIGHTSHIFT_32, grammarAccess.getSpecialKeywordsAccess().getSKW_RIGHTSHIFTTerminalRuleCall_32()); 
    }

    |    this_SKW_SEMI_33=RULE_SKW_SEMI    {
		$current.merge(this_SKW_SEMI_33);
    }

    { 
    newLeafNode(this_SKW_SEMI_33, grammarAccess.getSpecialKeywordsAccess().getSKW_SEMITerminalRuleCall_33()); 
    }

    |    this_SKW_SINGLEQUOTE_34=RULE_SKW_SINGLEQUOTE    {
		$current.merge(this_SKW_SINGLEQUOTE_34);
    }

    { 
    newLeafNode(this_SKW_SINGLEQUOTE_34, grammarAccess.getSpecialKeywordsAccess().getSKW_SINGLEQUOTETerminalRuleCall_34()); 
    }

    |    this_SKW_STAR_35=RULE_SKW_STAR    {
		$current.merge(this_SKW_STAR_35);
    }

    { 
    newLeafNode(this_SKW_STAR_35, grammarAccess.getSpecialKeywordsAccess().getSKW_STARTerminalRuleCall_35()); 
    }

    |    this_SKW_TILDE_36=RULE_SKW_TILDE    {
		$current.merge(this_SKW_TILDE_36);
    }

    { 
    newLeafNode(this_SKW_TILDE_36, grammarAccess.getSpecialKeywordsAccess().getSKW_TILDETerminalRuleCall_36()); 
    }
)
    ;





// Entry rule entryRuleEllipsis
entryRuleEllipsis returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEllipsisRule()); } 
	 iv_ruleEllipsis=ruleEllipsis 
	 { $current=$iv_ruleEllipsis.current.getText(); }  
	 EOF 
;

// Rule Ellipsis
ruleEllipsis returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_SKW_DOT_0=RULE_SKW_DOT    {
		$current.merge(this_SKW_DOT_0);
    }

    { 
    newLeafNode(this_SKW_DOT_0, grammarAccess.getEllipsisAccess().getSKW_DOTTerminalRuleCall_0()); 
    }
    this_SKW_DOT_1=RULE_SKW_DOT    {
		$current.merge(this_SKW_DOT_1);
    }

    { 
    newLeafNode(this_SKW_DOT_1, grammarAccess.getEllipsisAccess().getSKW_DOTTerminalRuleCall_1()); 
    }
    this_SKW_DOT_2=RULE_SKW_DOT    {
		$current.merge(this_SKW_DOT_2);
    }

    { 
    newLeafNode(this_SKW_DOT_2, grammarAccess.getEllipsisAccess().getSKW_DOTTerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRuleHexLiteral
entryRuleHexLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getHexLiteralRule()); } 
	 iv_ruleHexLiteral=ruleHexLiteral 
	 { $current=$iv_ruleHexLiteral.current.getText(); }  
	 EOF 
;

// Rule HexLiteral
ruleHexLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_HEX_LITERAL_0=RULE_HEX_LITERAL    {
		$current.merge(this_HEX_LITERAL_0);
    }

    { 
    newLeafNode(this_HEX_LITERAL_0, grammarAccess.getHexLiteralAccess().getHEX_LITERALTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleOctalLiteral
entryRuleOctalLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOctalLiteralRule()); } 
	 iv_ruleOctalLiteral=ruleOctalLiteral 
	 { $current=$iv_ruleOctalLiteral.current.getText(); }  
	 EOF 
;

// Rule OctalLiteral
ruleOctalLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_OCTAL_LITERAL_0=RULE_OCTAL_LITERAL    {
		$current.merge(this_OCTAL_LITERAL_0);
    }

    { 
    newLeafNode(this_OCTAL_LITERAL_0, grammarAccess.getOctalLiteralAccess().getOCTAL_LITERALTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleDecimalLiteral
entryRuleDecimalLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDecimalLiteralRule()); } 
	 iv_ruleDecimalLiteral=ruleDecimalLiteral 
	 { $current=$iv_ruleDecimalLiteral.current.getText(); }  
	 EOF 
;

// Rule DecimalLiteral
ruleDecimalLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_DECIMAL_LITERAL_0=RULE_DECIMAL_LITERAL    {
		$current.merge(this_DECIMAL_LITERAL_0);
    }

    { 
    newLeafNode(this_DECIMAL_LITERAL_0, grammarAccess.getDecimalLiteralAccess().getDECIMAL_LITERALTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleCharLiteral
entryRuleCharLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCharLiteralRule()); } 
	 iv_ruleCharLiteral=ruleCharLiteral 
	 { $current=$iv_ruleCharLiteral.current.getText(); }  
	 EOF 
;

// Rule CharLiteral
ruleCharLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_CHAR_LITERAL_0=RULE_CHAR_LITERAL    {
		$current.merge(this_CHAR_LITERAL_0);
    }

    { 
    newLeafNode(this_CHAR_LITERAL_0, grammarAccess.getCharLiteralAccess().getCHAR_LITERALTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); } 
	 iv_ruleStringLiteral=ruleStringLiteral 
	 { $current=$iv_ruleStringLiteral.current.getText(); }  
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_STRING_LITERAL_0=RULE_STRING_LITERAL    {
		$current.merge(this_STRING_LITERAL_0);
    }

    { 
    newLeafNode(this_STRING_LITERAL_0, grammarAccess.getStringLiteralAccess().getSTRING_LITERALTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleFloatLiteral
entryRuleFloatLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFloatLiteralRule()); } 
	 iv_ruleFloatLiteral=ruleFloatLiteral 
	 { $current=$iv_ruleFloatLiteral.current.getText(); }  
	 EOF 
;

// Rule FloatLiteral
ruleFloatLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_FLOAT_LITERAL_0=RULE_FLOAT_LITERAL    {
		$current.merge(this_FLOAT_LITERAL_0);
    }

    { 
    newLeafNode(this_FLOAT_LITERAL_0, grammarAccess.getFloatLiteralAccess().getFLOAT_LITERALTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleBinLiteral
entryRuleBinLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBinLiteralRule()); } 
	 iv_ruleBinLiteral=ruleBinLiteral 
	 { $current=$iv_ruleBinLiteral.current.getText(); }  
	 EOF 
;

// Rule BinLiteral
ruleBinLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_BIN_LITERAL_0=RULE_BIN_LITERAL    {
		$current.merge(this_BIN_LITERAL_0);
    }

    { 
    newLeafNode(this_BIN_LITERAL_0, grammarAccess.getBinLiteralAccess().getBIN_LITERALTerminalRuleCall()); 
    }

    ;





RULE_HASH : '#';

RULE_INCLUDE : 'include';

RULE_INCLUDE_NEXT : RULE_INCLUDE RULE_SKW_UNDERSCORE 'next';

RULE_DEFINE : 'define';

RULE_LINE : 'line';

RULE_ERROR : 'error';

RULE_WARNING : 'warning';

RULE_UNDEF : 'undef';

RULE_IF : 'if';

RULE_DEFINED : 'defined';

RULE_IFDEF : 'ifdef';

RULE_IFNOTDEF : 'ifndef';

RULE_ELIF : 'elif';

RULE_ELSE : 'else';

RULE_ENDIF : 'endif';

RULE_PRAGMA : 'pragma';

RULE_VA_ARGS : RULE_SKW_UNDERSCORE RULE_SKW_UNDERSCORE 'VA_ARGS' RULE_SKW_UNDERSCORE RULE_SKW_UNDERSCORE;

RULE_HEX_LITERAL : (RULE_HEX_PREFIX (RULE_HEX_DIGIT+ RULE_INTEGER_TYPE_SUFFIX?)?|RULE_PP_NUMBER+);

fragment RULE_PP_NUMBER : ('0' '8'..'9' ('0'..'9')*|('0'..'9')+ ('a'..'z'|'A'..'Z') ('0'..'9'|'a'..'z'|'A'..'Z')*);

RULE_NEWLINE : SUPER_NEWLINE;

RULE_SKW_AND : '&';

RULE_SKW_ANDAND : RULE_SKW_AND RULE_SKW_AND;

RULE_SKW_ASSIGN : '=';

RULE_SKW_BACKSLASH : '\\';

RULE_SKW_CARET : '^';

RULE_SKW_COMMA : ',';

RULE_SKW_COLON : ':';

RULE_SKW_DIV : '/';

fragment RULE_SKW_DOLLAR : '$';

RULE_SKW_DOT : '.';

RULE_SKW_DOUBLEQUOTE : '"';

RULE_SKW_EQUAL : RULE_SKW_ASSIGN RULE_SKW_ASSIGN;

RULE_SKW_GREATER : '>';

RULE_SKW_GREATEREQUAL : RULE_SKW_GREATER RULE_SKW_ASSIGN;

RULE_SKW_LEFTBRACE : '{';

RULE_SKW_LEFTBRACKET : '[';

RULE_SKW_LEFTPAREN : '(';

RULE_SKW_LEFTSHIFT : RULE_SKW_LESS RULE_SKW_LESS;

RULE_SKW_LESS : '<';

RULE_SKW_LESSEQUAL : RULE_SKW_LESS RULE_SKW_ASSIGN;

RULE_SKW_MINUS : '-';

RULE_SKW_MINUSMINUS : RULE_SKW_MINUS RULE_SKW_MINUS;

RULE_SKW_MOD : '%';

RULE_SKW_NOT : '!';

RULE_SKW_NOTEQUAL : RULE_SKW_NOT RULE_SKW_ASSIGN;

RULE_SKW_OR : '|';

RULE_SKW_OROR : RULE_SKW_OR RULE_SKW_OR;

RULE_SKW_PLUS : '+';

RULE_SKW_PLUSPLUS : RULE_SKW_PLUS RULE_SKW_PLUS;

RULE_SKW_QUESTION : '?';

RULE_SKW_RIGHTBRACE : '}';

RULE_SKW_RIGHTBRACKET : ']';

RULE_SKW_RIGHTPAREN : ')';

RULE_SKW_RIGHTSHIFT : RULE_SKW_GREATER RULE_SKW_GREATER;

RULE_SKW_SEMI : ';';

RULE_SKW_SINGLEQUOTE : '\'';

RULE_SKW_STAR : '*';

RULE_SKW_TILDE : '~';

fragment RULE_SKW_UNDERSCORE : '_';

RULE_ID : RULE_IDENTIFIER;

fragment RULE_IDENTIFIER : RULE_LETTER (RULE_LETTER|'0'..'9')*;

fragment RULE_LETTER : (RULE_SKW_DOLLAR|'A'..'Z'|'a'..'z'|RULE_SKW_UNDERSCORE);

RULE_CHAR_LITERAL : 'L'? RULE_SKW_SINGLEQUOTE (RULE_ESCAPE_SEQUENCE|~((RULE_SKW_SINGLEQUOTE|RULE_SKW_BACKSLASH))|RULE_LINEBREAK) RULE_SKW_SINGLEQUOTE;

RULE_STRING_LITERAL : RULE_SKW_DOUBLEQUOTE (RULE_ESCAPE_SEQUENCE|~((RULE_SKW_BACKSLASH|RULE_SKW_DOUBLEQUOTE))|RULE_LINEBREAK)* RULE_SKW_DOUBLEQUOTE;

fragment RULE_HEX_PREFIX : '0' ('x'|'X');

RULE_DECIMAL_LITERAL : ('0'|'1'..'9' ('0'..'9')*) RULE_INTEGER_TYPE_SUFFIX?;

RULE_OCTAL_LITERAL : '0' ('0'..'7')+ RULE_INTEGER_TYPE_SUFFIX?;

RULE_BIN_LITERAL : ('0b'|'0B') ('0'..'1')+;

fragment RULE_HEX_DIGIT : ('0'..'9'|'a'..'f'|'A'..'F');

fragment RULE_INTEGER_TYPE_SUFFIX : (RULE_UNSIGNED_SUFFIX RULE_LONG_SUFFIX?|RULE_UNSIGNED_SUFFIX RULE_LONG_LONG_SUFFIX|RULE_LONG_SUFFIX RULE_UNSIGNED_SUFFIX?|RULE_LONG_LONG_SUFFIX RULE_UNSIGNED_SUFFIX?);

fragment RULE_UNSIGNED_SUFFIX : ('u'|'U');

fragment RULE_LONG_SUFFIX : ('l'|'L');

fragment RULE_LONG_LONG_SUFFIX : ('ll'|'LL');

RULE_FLOAT_LITERAL : (('0'..'9')+ RULE_SKW_DOT ('0'..'9')* RULE_EXPONENT? RULE_FLOAT_TYPE_SUFFIX?|RULE_SKW_DOT ('0'..'9')+ RULE_EXPONENT? RULE_FLOAT_TYPE_SUFFIX?|('0'..'9')+ RULE_EXPONENT RULE_FLOAT_TYPE_SUFFIX?|('0'..'9')+ RULE_EXPONENT? RULE_FLOAT_TYPE_SUFFIX);

fragment RULE_EXPONENT : ('e'|'E') ('+'|'-')? ('0'..'9')+;

fragment RULE_FLOAT_TYPE_SUFFIX : ('f'|'F'|'d'|'D');

fragment RULE_ESCAPE_SEQUENCE : (RULE_SKW_BACKSLASH ('b'|'t'|'n'|'f'|'r'|'"'|RULE_SKW_SINGLEQUOTE|RULE_SKW_BACKSLASH)|RULE_OCTAL_ESCAPE|RULE_HEX_ESCAPE);

fragment RULE_OCTAL_ESCAPE : (RULE_SKW_BACKSLASH '0'..'3' '0'..'7' '0'..'7'|RULE_SKW_BACKSLASH '0'..'7' '0'..'7'|RULE_SKW_BACKSLASH '0'..'7');

fragment RULE_HEX_ESCAPE : RULE_SKW_BACKSLASH 'x' RULE_HEX_DIGIT+;

fragment RULE_LINEFEED : '\n';

fragment RULE_CARRIAGERETURN : '\r';

fragment RULE_LINE_END : (RULE_CARRIAGERETURN|RULE_LINEFEED);

fragment RULE_LINEBREAK : RULE_SKW_BACKSLASH RULE_LINE_END;

fragment SUPER_NEWLINE : RULE_LINE_END;

fragment RULE_SPACE : ' ';

fragment RULE_TAB : '\t';

RULE_WHITESPACE : (RULE_SPACE|RULE_TAB);

fragment RULE_BLOCK_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

fragment RULE_LINE_COMMENT : '//' ~(RULE_LINE_END)*;

fragment RULE_FORM_FEED : '\f';

RULE_IGNORED : (RULE_LINEBREAK|RULE_BLOCK_COMMENT|RULE_LINE_COMMENT|RULE_FORM_FEED);

RULE_SPECIAL : .;


