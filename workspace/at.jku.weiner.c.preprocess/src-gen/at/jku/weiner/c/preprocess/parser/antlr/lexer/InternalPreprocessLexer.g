
/*
 * generated by Xtext 2.9.0-SNAPSHOT
 */
lexer grammar InternalPreprocessLexer;

options {
	backtrack=true;
	memoize=true;
}

tokens {
	SKW_AND;
	SKW_NOT;
	SKW_PLUS;
	SKW_STAR;
	SKW_MINUS;
	SKW_TILDE;
	RULE_HASH;
	RULE_INCLUDE;
	RULE_DEFINE;
	RULE_ERROR;
	RULE_UNDEF;
	RULE_IF;
	RULE_DEFINED;
	RULE_IFDEF;
	RULE_IFNOTDEF;
	RULE_ENDIF;
	RULE_PRAGMA;
	RULE_LINEFEED;
	RULE_CARRIAGERETURN;
	RULE_NEWLINE;
	RULE_LINEBREAK;
	RULE_SPACE;
	RULE_TAB;
	RULE_WS;
	RULE_ID;
	RULE_IDENTIFIER;
	RULE_LETTER;
	RULE_CHAR_LITERAL;
	RULE_STRING_LITERAL;
	RULE_HEX_LITERAL;
	RULE_DECIMAL_LITERAL;
	RULE_OCTAL_LITERAL;
	RULE_BIN_LITERAL;
	RULE_HEX_DIGIT;
	RULE_INTEGER_TYPE_SUFFIX;
	RULE_FLOAT_LITERAL;
	RULE_EXPONENT;
	RULE_FLOAT_TYPE_SUFFIX;
	RULE_ESCAPE_SEQUENCE;
	RULE_OCTAL_ESCAPE;
	RULE_BLOCK_COMMENT;
	RULE_LINE_COMMENT;
	RULE_SKW_AND;
	RULE_SKW_ANDAND;
	RULE_SKW_ASSIGN;
	RULE_SKW_BACKSLASH;
	RULE_SKW_CARET;
	RULE_SKW_COMMA;
	RULE_SKW_COLON;
	RULE_SKW_DIV;
	RULE_SKW_DOLLAR;
	RULE_SKW_DOT;
	RULE_SKW_DOUBLEQUOTE;
	RULE_SKW_EQUAL;
	RULE_SKW_GREATER;
	RULE_SKW_GREATEREQUAL;
	RULE_SKW_LEFTBRACE;
	RULE_SKW_LEFTBRACKET;
	RULE_SKW_LEFTPAREN;
	RULE_SKW_LEFTSHIFT;
	RULE_SKW_LESS;
	RULE_SKW_LESSEQUAL;
	RULE_SKW_MINUS;
	RULE_SKW_MINUSMINUS;
	RULE_SKW_MOD;
	RULE_SKW_NOT;
	RULE_SKW_NOTEQUAL;
	RULE_SKW_OR;
	RULE_SKW_OROR;
	RULE_SKW_PLUS;
	RULE_SKW_PLUSPLUS;
	RULE_SKW_QUESTION;
	RULE_SKW_RIGHTBRACE;
	RULE_SKW_RIGHTBRACKET;
	RULE_SKW_RIGHTPAREN;
	RULE_SKW_RIGHTSHIFT;
	RULE_SKW_SEMI;
	RULE_SKW_SINGLEQUOTE;
	RULE_SKW_STAR;
	RULE_SKW_TILDE;
	RULE_SKW_UNDERSCORE;
	RULE_SPECIAL;
}

@header {
package at.jku.weiner.c.preprocess.parser.antlr.lexer;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}



SYNTHETIC_ALL_KEYWORDS :
	(FRAGMENT_SKW_AND)=> FRAGMENT_SKW_AND {$type = SKW_AND; } |
	(FRAGMENT_SKW_NOT)=> FRAGMENT_SKW_NOT {$type = SKW_NOT; } |
	(FRAGMENT_SKW_PLUS)=> FRAGMENT_SKW_PLUS {$type = SKW_PLUS; } |
	(FRAGMENT_SKW_STAR)=> FRAGMENT_SKW_STAR {$type = SKW_STAR; } |
	(FRAGMENT_SKW_MINUS)=> FRAGMENT_SKW_MINUS {$type = SKW_MINUS; } |
	(FRAGMENT_SKW_TILDE)=> FRAGMENT_SKW_TILDE {$type = SKW_TILDE; } |
	(FRAGMENT_RULE_HASH)=> FRAGMENT_RULE_HASH {$type = RULE_HASH; } |
	(FRAGMENT_RULE_INCLUDE)=> FRAGMENT_RULE_INCLUDE {$type = RULE_INCLUDE; } |
	(FRAGMENT_RULE_DEFINE)=> FRAGMENT_RULE_DEFINE {$type = RULE_DEFINE; } |
	(FRAGMENT_RULE_ERROR)=> FRAGMENT_RULE_ERROR {$type = RULE_ERROR; } |
	(FRAGMENT_RULE_UNDEF)=> FRAGMENT_RULE_UNDEF {$type = RULE_UNDEF; } |
	(FRAGMENT_RULE_IF)=> FRAGMENT_RULE_IF {$type = RULE_IF; } |
	(FRAGMENT_RULE_DEFINED)=> FRAGMENT_RULE_DEFINED {$type = RULE_DEFINED; } |
	(FRAGMENT_RULE_IFDEF)=> FRAGMENT_RULE_IFDEF {$type = RULE_IFDEF; } |
	(FRAGMENT_RULE_IFNOTDEF)=> FRAGMENT_RULE_IFNOTDEF {$type = RULE_IFNOTDEF; } |
	(FRAGMENT_RULE_ENDIF)=> FRAGMENT_RULE_ENDIF {$type = RULE_ENDIF; } |
	(FRAGMENT_RULE_PRAGMA)=> FRAGMENT_RULE_PRAGMA {$type = RULE_PRAGMA; } |
	(FRAGMENT_RULE_NEWLINE)=> FRAGMENT_RULE_NEWLINE {$type = RULE_NEWLINE; } |
	(FRAGMENT_RULE_WS)=> FRAGMENT_RULE_WS {$type = RULE_WS; } |
	(FRAGMENT_RULE_ID)=> FRAGMENT_RULE_ID {$type = RULE_ID; } |
	(FRAGMENT_RULE_CHAR_LITERAL)=> FRAGMENT_RULE_CHAR_LITERAL {$type = RULE_CHAR_LITERAL; } |
	(FRAGMENT_RULE_STRING_LITERAL)=> FRAGMENT_RULE_STRING_LITERAL {$type = RULE_STRING_LITERAL; } |
	(FRAGMENT_RULE_HEX_LITERAL)=> FRAGMENT_RULE_HEX_LITERAL {$type = RULE_HEX_LITERAL; } |
	(FRAGMENT_RULE_DECIMAL_LITERAL)=> FRAGMENT_RULE_DECIMAL_LITERAL {$type = RULE_DECIMAL_LITERAL; } |
	(FRAGMENT_RULE_OCTAL_LITERAL)=> FRAGMENT_RULE_OCTAL_LITERAL {$type = RULE_OCTAL_LITERAL; } |
	(FRAGMENT_RULE_BIN_LITERAL)=> FRAGMENT_RULE_BIN_LITERAL {$type = RULE_BIN_LITERAL; } |
	(FRAGMENT_RULE_FLOAT_LITERAL)=> FRAGMENT_RULE_FLOAT_LITERAL {$type = RULE_FLOAT_LITERAL; } |
	(FRAGMENT_RULE_SKW_AND)=> FRAGMENT_RULE_SKW_AND {$type = RULE_SKW_AND; } |
	(FRAGMENT_RULE_SKW_ANDAND)=> FRAGMENT_RULE_SKW_ANDAND {$type = RULE_SKW_ANDAND; } |
	(FRAGMENT_RULE_SKW_ASSIGN)=> FRAGMENT_RULE_SKW_ASSIGN {$type = RULE_SKW_ASSIGN; } |
	(FRAGMENT_RULE_SKW_BACKSLASH)=> FRAGMENT_RULE_SKW_BACKSLASH {$type = RULE_SKW_BACKSLASH; } |
	(FRAGMENT_RULE_SKW_CARET)=> FRAGMENT_RULE_SKW_CARET {$type = RULE_SKW_CARET; } |
	(FRAGMENT_RULE_SKW_COMMA)=> FRAGMENT_RULE_SKW_COMMA {$type = RULE_SKW_COMMA; } |
	(FRAGMENT_RULE_SKW_COLON)=> FRAGMENT_RULE_SKW_COLON {$type = RULE_SKW_COLON; } |
	(FRAGMENT_RULE_SKW_DIV)=> FRAGMENT_RULE_SKW_DIV {$type = RULE_SKW_DIV; } |
	(FRAGMENT_RULE_SKW_DOT)=> FRAGMENT_RULE_SKW_DOT {$type = RULE_SKW_DOT; } |
	(FRAGMENT_RULE_SKW_DOUBLEQUOTE)=> FRAGMENT_RULE_SKW_DOUBLEQUOTE {$type = RULE_SKW_DOUBLEQUOTE; } |
	(FRAGMENT_RULE_SKW_EQUAL)=> FRAGMENT_RULE_SKW_EQUAL {$type = RULE_SKW_EQUAL; } |
	(FRAGMENT_RULE_SKW_GREATER)=> FRAGMENT_RULE_SKW_GREATER {$type = RULE_SKW_GREATER; } |
	(FRAGMENT_RULE_SKW_GREATEREQUAL)=> FRAGMENT_RULE_SKW_GREATEREQUAL {$type = RULE_SKW_GREATEREQUAL; } |
	(FRAGMENT_RULE_SKW_LEFTBRACE)=> FRAGMENT_RULE_SKW_LEFTBRACE {$type = RULE_SKW_LEFTBRACE; } |
	(FRAGMENT_RULE_SKW_LEFTBRACKET)=> FRAGMENT_RULE_SKW_LEFTBRACKET {$type = RULE_SKW_LEFTBRACKET; } |
	(FRAGMENT_RULE_SKW_LEFTPAREN)=> FRAGMENT_RULE_SKW_LEFTPAREN {$type = RULE_SKW_LEFTPAREN; } |
	(FRAGMENT_RULE_SKW_LEFTSHIFT)=> FRAGMENT_RULE_SKW_LEFTSHIFT {$type = RULE_SKW_LEFTSHIFT; } |
	(FRAGMENT_RULE_SKW_LESS)=> FRAGMENT_RULE_SKW_LESS {$type = RULE_SKW_LESS; } |
	(FRAGMENT_RULE_SKW_LESSEQUAL)=> FRAGMENT_RULE_SKW_LESSEQUAL {$type = RULE_SKW_LESSEQUAL; } |
	(FRAGMENT_RULE_SKW_MINUS)=> FRAGMENT_RULE_SKW_MINUS {$type = RULE_SKW_MINUS; } |
	(FRAGMENT_RULE_SKW_MINUSMINUS)=> FRAGMENT_RULE_SKW_MINUSMINUS {$type = RULE_SKW_MINUSMINUS; } |
	(FRAGMENT_RULE_SKW_MOD)=> FRAGMENT_RULE_SKW_MOD {$type = RULE_SKW_MOD; } |
	(FRAGMENT_RULE_SKW_NOT)=> FRAGMENT_RULE_SKW_NOT {$type = RULE_SKW_NOT; } |
	(FRAGMENT_RULE_SKW_NOTEQUAL)=> FRAGMENT_RULE_SKW_NOTEQUAL {$type = RULE_SKW_NOTEQUAL; } |
	(FRAGMENT_RULE_SKW_OR)=> FRAGMENT_RULE_SKW_OR {$type = RULE_SKW_OR; } |
	(FRAGMENT_RULE_SKW_OROR)=> FRAGMENT_RULE_SKW_OROR {$type = RULE_SKW_OROR; } |
	(FRAGMENT_RULE_SKW_PLUS)=> FRAGMENT_RULE_SKW_PLUS {$type = RULE_SKW_PLUS; } |
	(FRAGMENT_RULE_SKW_PLUSPLUS)=> FRAGMENT_RULE_SKW_PLUSPLUS {$type = RULE_SKW_PLUSPLUS; } |
	(FRAGMENT_RULE_SKW_QUESTION)=> FRAGMENT_RULE_SKW_QUESTION {$type = RULE_SKW_QUESTION; } |
	(FRAGMENT_RULE_SKW_RIGHTBRACE)=> FRAGMENT_RULE_SKW_RIGHTBRACE {$type = RULE_SKW_RIGHTBRACE; } |
	(FRAGMENT_RULE_SKW_RIGHTBRACKET)=> FRAGMENT_RULE_SKW_RIGHTBRACKET {$type = RULE_SKW_RIGHTBRACKET; } |
	(FRAGMENT_RULE_SKW_RIGHTPAREN)=> FRAGMENT_RULE_SKW_RIGHTPAREN {$type = RULE_SKW_RIGHTPAREN; } |
	(FRAGMENT_RULE_SKW_RIGHTSHIFT)=> FRAGMENT_RULE_SKW_RIGHTSHIFT {$type = RULE_SKW_RIGHTSHIFT; } |
	(FRAGMENT_RULE_SKW_SEMI)=> FRAGMENT_RULE_SKW_SEMI {$type = RULE_SKW_SEMI; } |
	(FRAGMENT_RULE_SKW_SINGLEQUOTE)=> FRAGMENT_RULE_SKW_SINGLEQUOTE {$type = RULE_SKW_SINGLEQUOTE; } |
	(FRAGMENT_RULE_SKW_STAR)=> FRAGMENT_RULE_SKW_STAR {$type = RULE_SKW_STAR; } |
	(FRAGMENT_RULE_SKW_TILDE)=> FRAGMENT_RULE_SKW_TILDE {$type = RULE_SKW_TILDE; } |
	(FRAGMENT_RULE_SPECIAL)=> FRAGMENT_RULE_SPECIAL {$type = RULE_SPECIAL; } ;

fragment FRAGMENT_SKW_AND : 'SKW_AND';

fragment FRAGMENT_SKW_NOT : 'SKW_NOT';

fragment FRAGMENT_SKW_PLUS : 'SKW_PLUS';

fragment FRAGMENT_SKW_STAR : 'SKW_STAR';

fragment FRAGMENT_SKW_MINUS : 'SKW_MINUS';

fragment FRAGMENT_SKW_TILDE : 'SKW_TILDE';


// Rules duplicated to allow inter-rule references

fragment RULE_HASH : FRAGMENT_RULE_HASH;
fragment FRAGMENT_RULE_HASH : '#';

fragment RULE_INCLUDE : FRAGMENT_RULE_INCLUDE;
fragment FRAGMENT_RULE_INCLUDE : 'include';

fragment RULE_DEFINE : FRAGMENT_RULE_DEFINE;
fragment FRAGMENT_RULE_DEFINE : 'define';

fragment RULE_ERROR : FRAGMENT_RULE_ERROR;
fragment FRAGMENT_RULE_ERROR : 'error';

fragment RULE_UNDEF : FRAGMENT_RULE_UNDEF;
fragment FRAGMENT_RULE_UNDEF : 'undef';

fragment RULE_IF : FRAGMENT_RULE_IF;
fragment FRAGMENT_RULE_IF : 'if';

fragment RULE_DEFINED : FRAGMENT_RULE_DEFINED;
fragment FRAGMENT_RULE_DEFINED : 'defined';

fragment RULE_IFDEF : FRAGMENT_RULE_IFDEF;
fragment FRAGMENT_RULE_IFDEF : 'ifdef';

fragment RULE_IFNOTDEF : FRAGMENT_RULE_IFNOTDEF;
fragment FRAGMENT_RULE_IFNOTDEF : 'ifndef';

fragment RULE_ENDIF : FRAGMENT_RULE_ENDIF;
fragment FRAGMENT_RULE_ENDIF : 'endif';

fragment RULE_PRAGMA : FRAGMENT_RULE_PRAGMA;
fragment FRAGMENT_RULE_PRAGMA : 'pragma';

fragment RULE_LINEFEED : '\n';

fragment RULE_CARRIAGERETURN : '\r';

fragment RULE_NEWLINE : FRAGMENT_RULE_NEWLINE;
fragment FRAGMENT_RULE_NEWLINE : (RULE_CARRIAGERETURN|RULE_LINEFEED);

fragment RULE_LINEBREAK : RULE_SKW_BACKSLASH RULE_NEWLINE;

fragment RULE_SPACE : ' ';

fragment RULE_TAB : '\t';

fragment RULE_WS : FRAGMENT_RULE_WS;
fragment FRAGMENT_RULE_WS : (RULE_SPACE|RULE_TAB|RULE_LINE_COMMENT|RULE_BLOCK_COMMENT|RULE_LINEBREAK);

fragment RULE_ID : FRAGMENT_RULE_ID;
fragment FRAGMENT_RULE_ID : RULE_IDENTIFIER;

fragment RULE_IDENTIFIER : RULE_LETTER (RULE_LETTER|'0'..'9')*;

fragment RULE_LETTER : (RULE_SKW_DOLLAR|'A'..'Z'|'a'..'z'|RULE_SKW_UNDERSCORE);

fragment RULE_CHAR_LITERAL : FRAGMENT_RULE_CHAR_LITERAL;
fragment FRAGMENT_RULE_CHAR_LITERAL : RULE_SKW_SINGLEQUOTE (RULE_ESCAPE_SEQUENCE|~((RULE_SKW_SINGLEQUOTE|RULE_SKW_BACKSLASH))) RULE_SKW_SINGLEQUOTE;

fragment RULE_STRING_LITERAL : FRAGMENT_RULE_STRING_LITERAL;
fragment FRAGMENT_RULE_STRING_LITERAL : RULE_SKW_DOUBLEQUOTE (RULE_ESCAPE_SEQUENCE|~((RULE_SKW_BACKSLASH|RULE_SKW_DOUBLEQUOTE)))* RULE_SKW_DOUBLEQUOTE;

fragment RULE_HEX_LITERAL : FRAGMENT_RULE_HEX_LITERAL;
fragment FRAGMENT_RULE_HEX_LITERAL : '0' ('x'|'X') RULE_HEX_DIGIT+ RULE_INTEGER_TYPE_SUFFIX?;

fragment RULE_DECIMAL_LITERAL : FRAGMENT_RULE_DECIMAL_LITERAL;
fragment FRAGMENT_RULE_DECIMAL_LITERAL : ('0'|'1'..'9' ('0'..'9')*) RULE_INTEGER_TYPE_SUFFIX?;

fragment RULE_OCTAL_LITERAL : FRAGMENT_RULE_OCTAL_LITERAL;
fragment FRAGMENT_RULE_OCTAL_LITERAL : '0' ('0'..'7')+ RULE_INTEGER_TYPE_SUFFIX?;

fragment RULE_BIN_LITERAL : FRAGMENT_RULE_BIN_LITERAL;
fragment FRAGMENT_RULE_BIN_LITERAL : ('0b'|'0B') ('0'..'1')+;

fragment RULE_HEX_DIGIT : ('0'..'9'|'a'..'f'|'A'..'F');

fragment RULE_INTEGER_TYPE_SUFFIX : (('u'|'U')? ('l'|'L')|('u'|'U') ('l'|'L')?);

fragment RULE_FLOAT_LITERAL : FRAGMENT_RULE_FLOAT_LITERAL;
fragment FRAGMENT_RULE_FLOAT_LITERAL : (('0'..'9')+ RULE_SKW_DOT ('0'..'9')* RULE_EXPONENT? RULE_FLOAT_TYPE_SUFFIX?|RULE_SKW_DOT ('0'..'9')+ RULE_EXPONENT? RULE_FLOAT_TYPE_SUFFIX?|('0'..'9')+ RULE_EXPONENT RULE_FLOAT_TYPE_SUFFIX?|('0'..'9')+ RULE_EXPONENT? RULE_FLOAT_TYPE_SUFFIX);

fragment RULE_EXPONENT : ('e'|'E') ('+'|'-')? ('0'..'9')+;

fragment RULE_FLOAT_TYPE_SUFFIX : ('f'|'F'|'d'|'D');

fragment RULE_ESCAPE_SEQUENCE : (RULE_SKW_BACKSLASH ('b'|'t'|'n'|'f'|'r'|'"'|RULE_SKW_SINGLEQUOTE|RULE_SKW_BACKSLASH)|RULE_OCTAL_ESCAPE);

fragment RULE_OCTAL_ESCAPE : (RULE_SKW_BACKSLASH '0'..'3' '0'..'7' '0'..'7'|RULE_SKW_BACKSLASH '0'..'7' '0'..'7'|RULE_SKW_BACKSLASH '0'..'7');

fragment RULE_BLOCK_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

fragment RULE_LINE_COMMENT : '//' ~(RULE_NEWLINE)*;

fragment RULE_SKW_AND : FRAGMENT_RULE_SKW_AND;
fragment FRAGMENT_RULE_SKW_AND : '&';

fragment RULE_SKW_ANDAND : FRAGMENT_RULE_SKW_ANDAND;
fragment FRAGMENT_RULE_SKW_ANDAND : RULE_SKW_AND RULE_SKW_AND;

fragment RULE_SKW_ASSIGN : FRAGMENT_RULE_SKW_ASSIGN;
fragment FRAGMENT_RULE_SKW_ASSIGN : '=';

fragment RULE_SKW_BACKSLASH : FRAGMENT_RULE_SKW_BACKSLASH;
fragment FRAGMENT_RULE_SKW_BACKSLASH : '\\';

fragment RULE_SKW_CARET : FRAGMENT_RULE_SKW_CARET;
fragment FRAGMENT_RULE_SKW_CARET : '^';

fragment RULE_SKW_COMMA : FRAGMENT_RULE_SKW_COMMA;
fragment FRAGMENT_RULE_SKW_COMMA : ',';

fragment RULE_SKW_COLON : FRAGMENT_RULE_SKW_COLON;
fragment FRAGMENT_RULE_SKW_COLON : ':';

fragment RULE_SKW_DIV : FRAGMENT_RULE_SKW_DIV;
fragment FRAGMENT_RULE_SKW_DIV : '/';

fragment RULE_SKW_DOLLAR : '$';

fragment RULE_SKW_DOT : FRAGMENT_RULE_SKW_DOT;
fragment FRAGMENT_RULE_SKW_DOT : '.';

fragment RULE_SKW_DOUBLEQUOTE : FRAGMENT_RULE_SKW_DOUBLEQUOTE;
fragment FRAGMENT_RULE_SKW_DOUBLEQUOTE : '"';

fragment RULE_SKW_EQUAL : FRAGMENT_RULE_SKW_EQUAL;
fragment FRAGMENT_RULE_SKW_EQUAL : RULE_SKW_ASSIGN RULE_SKW_ASSIGN;

fragment RULE_SKW_GREATER : FRAGMENT_RULE_SKW_GREATER;
fragment FRAGMENT_RULE_SKW_GREATER : '>';

fragment RULE_SKW_GREATEREQUAL : FRAGMENT_RULE_SKW_GREATEREQUAL;
fragment FRAGMENT_RULE_SKW_GREATEREQUAL : RULE_SKW_GREATER RULE_SKW_ASSIGN;

fragment RULE_SKW_LEFTBRACE : FRAGMENT_RULE_SKW_LEFTBRACE;
fragment FRAGMENT_RULE_SKW_LEFTBRACE : '{';

fragment RULE_SKW_LEFTBRACKET : FRAGMENT_RULE_SKW_LEFTBRACKET;
fragment FRAGMENT_RULE_SKW_LEFTBRACKET : '[';

fragment RULE_SKW_LEFTPAREN : FRAGMENT_RULE_SKW_LEFTPAREN;
fragment FRAGMENT_RULE_SKW_LEFTPAREN : '(';

fragment RULE_SKW_LEFTSHIFT : FRAGMENT_RULE_SKW_LEFTSHIFT;
fragment FRAGMENT_RULE_SKW_LEFTSHIFT : RULE_SKW_LESS RULE_SKW_LESS;

fragment RULE_SKW_LESS : FRAGMENT_RULE_SKW_LESS;
fragment FRAGMENT_RULE_SKW_LESS : '<';

fragment RULE_SKW_LESSEQUAL : FRAGMENT_RULE_SKW_LESSEQUAL;
fragment FRAGMENT_RULE_SKW_LESSEQUAL : RULE_SKW_LESS RULE_SKW_ASSIGN;

fragment RULE_SKW_MINUS : FRAGMENT_RULE_SKW_MINUS;
fragment FRAGMENT_RULE_SKW_MINUS : '-';

fragment RULE_SKW_MINUSMINUS : FRAGMENT_RULE_SKW_MINUSMINUS;
fragment FRAGMENT_RULE_SKW_MINUSMINUS : RULE_SKW_MINUS RULE_SKW_MINUS;

fragment RULE_SKW_MOD : FRAGMENT_RULE_SKW_MOD;
fragment FRAGMENT_RULE_SKW_MOD : '%';

fragment RULE_SKW_NOT : FRAGMENT_RULE_SKW_NOT;
fragment FRAGMENT_RULE_SKW_NOT : '!';

fragment RULE_SKW_NOTEQUAL : FRAGMENT_RULE_SKW_NOTEQUAL;
fragment FRAGMENT_RULE_SKW_NOTEQUAL : RULE_SKW_NOT RULE_SKW_ASSIGN;

fragment RULE_SKW_OR : FRAGMENT_RULE_SKW_OR;
fragment FRAGMENT_RULE_SKW_OR : '|';

fragment RULE_SKW_OROR : FRAGMENT_RULE_SKW_OROR;
fragment FRAGMENT_RULE_SKW_OROR : RULE_SKW_OR RULE_SKW_OR;

fragment RULE_SKW_PLUS : FRAGMENT_RULE_SKW_PLUS;
fragment FRAGMENT_RULE_SKW_PLUS : '+';

fragment RULE_SKW_PLUSPLUS : FRAGMENT_RULE_SKW_PLUSPLUS;
fragment FRAGMENT_RULE_SKW_PLUSPLUS : RULE_SKW_PLUS RULE_SKW_PLUS;

fragment RULE_SKW_QUESTION : FRAGMENT_RULE_SKW_QUESTION;
fragment FRAGMENT_RULE_SKW_QUESTION : '?';

fragment RULE_SKW_RIGHTBRACE : FRAGMENT_RULE_SKW_RIGHTBRACE;
fragment FRAGMENT_RULE_SKW_RIGHTBRACE : '}';

fragment RULE_SKW_RIGHTBRACKET : FRAGMENT_RULE_SKW_RIGHTBRACKET;
fragment FRAGMENT_RULE_SKW_RIGHTBRACKET : ']';

fragment RULE_SKW_RIGHTPAREN : FRAGMENT_RULE_SKW_RIGHTPAREN;
fragment FRAGMENT_RULE_SKW_RIGHTPAREN : ')';

fragment RULE_SKW_RIGHTSHIFT : FRAGMENT_RULE_SKW_RIGHTSHIFT;
fragment FRAGMENT_RULE_SKW_RIGHTSHIFT : RULE_SKW_GREATER RULE_SKW_GREATER;

fragment RULE_SKW_SEMI : FRAGMENT_RULE_SKW_SEMI;
fragment FRAGMENT_RULE_SKW_SEMI : ';';

fragment RULE_SKW_SINGLEQUOTE : FRAGMENT_RULE_SKW_SINGLEQUOTE;
fragment FRAGMENT_RULE_SKW_SINGLEQUOTE : '\'';

fragment RULE_SKW_STAR : FRAGMENT_RULE_SKW_STAR;
fragment FRAGMENT_RULE_SKW_STAR : '*';

fragment RULE_SKW_TILDE : FRAGMENT_RULE_SKW_TILDE;
fragment FRAGMENT_RULE_SKW_TILDE : '~';

fragment RULE_SKW_UNDERSCORE : '_';

fragment RULE_SPECIAL : FRAGMENT_RULE_SPECIAL;
fragment FRAGMENT_RULE_SPECIAL : .;



