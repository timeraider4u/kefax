/*
 * generated by Xtext 2.9.0-SNAPSHOT
 */
package at.jku.weiner.c.preprocess.services;

import at.jku.weiner.c.common.services.CommonGrammarAccess;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractParserRuleElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class PreprocessGrammarAccess extends AbstractGrammarElementFinder {
	
	public class PreprocessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.Preprocess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPreprocessAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cGroupAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGroupGroupOpt2ParserRuleCall_1_0 = (RuleCall)cGroupAssignment_1.eContents().get(0);
		
		////generate preprocess "http://www.jku.at/weiner/c/preprocess/Preprocess"
		////Model returns common::Model:
		////	{common::Model}
		////	units+=TranslationUnit
		////;
		////
		////TranslationUnit returns common::TranslationUnit:
		////	{common::TranslationUnit}
		////	preprocess=Preprocess
		////;
		//Preprocess common::Preprocess:
		//	{Preprocess} group=GroupOpt2
		@Override public ParserRule getRule() { return rule; }
		
		//{Preprocess} group=GroupOpt2
		public Group getGroup() { return cGroup; }
		
		//{Preprocess}
		public Action getPreprocessAction_0() { return cPreprocessAction_0; }
		
		//group=GroupOpt2
		public Assignment getGroupAssignment_1() { return cGroupAssignment_1; }
		
		//GroupOpt2
		public RuleCall getGroupGroupOpt2ParserRuleCall_1_0() { return cGroupGroupOpt2ParserRuleCall_1_0; }
	}
	public class GroupOptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.GroupOpt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGroupOptAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cLinesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cLinesGroupOptTemp1ParserRuleCall_1_0_0 = (RuleCall)cLinesAssignment_1_0.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//GroupOpt:
		//	{GroupOpt} (lines+=GroupOptTemp1
		//	NEWLINE)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{GroupOpt} (lines+=GroupOptTemp1 NEWLINE)*
		public Group getGroup() { return cGroup; }
		
		//{GroupOpt}
		public Action getGroupOptAction_0() { return cGroupOptAction_0; }
		
		//(lines+=GroupOptTemp1 NEWLINE)*
		public Group getGroup_1() { return cGroup_1; }
		
		//lines+=GroupOptTemp1
		public Assignment getLinesAssignment_1_0() { return cLinesAssignment_1_0; }
		
		//GroupOptTemp1
		public RuleCall getLinesGroupOptTemp1ParserRuleCall_1_0_0() { return cLinesGroupOptTemp1ParserRuleCall_1_0_0; }
		
		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_1_1() { return cNEWLINETerminalRuleCall_1_1; }
	}
	public class GroupOpt2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.GroupOpt2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGroupOpt2Action_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cLinesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cLinesGroupOptTemp1ParserRuleCall_1_0_0 = (RuleCall)cLinesAssignment_1_0.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cLinesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLinesGroupOptTemp2ParserRuleCall_2_0 = (RuleCall)cLinesAssignment_2.eContents().get(0);
		
		//GroupOpt2 GroupOpt:
		//	{GroupOpt2} (lines+=GroupOptTemp1
		//	NEWLINE)*
		//	lines+=GroupOptTemp2?
		@Override public ParserRule getRule() { return rule; }
		
		//{GroupOpt2} (lines+=GroupOptTemp1 NEWLINE)* lines+=GroupOptTemp2?
		public Group getGroup() { return cGroup; }
		
		//{GroupOpt2}
		public Action getGroupOpt2Action_0() { return cGroupOpt2Action_0; }
		
		//(lines+=GroupOptTemp1 NEWLINE)*
		public Group getGroup_1() { return cGroup_1; }
		
		//lines+=GroupOptTemp1
		public Assignment getLinesAssignment_1_0() { return cLinesAssignment_1_0; }
		
		//GroupOptTemp1
		public RuleCall getLinesGroupOptTemp1ParserRuleCall_1_0_0() { return cLinesGroupOptTemp1ParserRuleCall_1_0_0; }
		
		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_1_1() { return cNEWLINETerminalRuleCall_1_1; }
		
		//lines+=GroupOptTemp2?
		public Assignment getLinesAssignment_2() { return cLinesAssignment_2; }
		
		//GroupOptTemp2
		public RuleCall getLinesGroupOptTemp2ParserRuleCall_2_0() { return cLinesGroupOptTemp2ParserRuleCall_2_0; }
	}
	public class GroupOptTemp1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.GroupOptTemp1");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPreprocessorDirectivesParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNewLineLineParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCodeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//GroupOptTemp1 SourceCodeLine:
		//	PreprocessorDirectives
		//	| NewLineLine
		//	| Code
		@Override public ParserRule getRule() { return rule; }
		
		//PreprocessorDirectives | NewLineLine | Code
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PreprocessorDirectives
		public RuleCall getPreprocessorDirectivesParserRuleCall_0() { return cPreprocessorDirectivesParserRuleCall_0; }
		
		//NewLineLine
		public RuleCall getNewLineLineParserRuleCall_1() { return cNewLineLineParserRuleCall_1; }
		
		//Code
		public RuleCall getCodeParserRuleCall_2() { return cCodeParserRuleCall_2; }
	}
	public class GroupOptTemp2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.GroupOptTemp2");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPreprocessorDirectivesParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCodeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//GroupOptTemp2 SourceCodeLine:
		//	PreprocessorDirectives
		//	| Code
		@Override public ParserRule getRule() { return rule; }
		
		//PreprocessorDirectives | Code
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PreprocessorDirectives
		public RuleCall getPreprocessorDirectivesParserRuleCall_0() { return cPreprocessorDirectivesParserRuleCall_0; }
		
		//Code
		public RuleCall getCodeParserRuleCall_1() { return cCodeParserRuleCall_1; }
	}
	public class PreprocessorDirectivesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.PreprocessorDirectives");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPreprocessorDirectivesAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cWHITESPACETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cHASHTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cWHITESPACETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cDirectiveAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cDirectiveIncludeDirectiveParserRuleCall_4_0_0 = (RuleCall)cDirectiveAssignment_4_0.eContents().get(0);
		private final Assignment cDirectiveAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cDirectiveDefineDirectiveParserRuleCall_4_1_0 = (RuleCall)cDirectiveAssignment_4_1.eContents().get(0);
		private final Assignment cDirectiveAssignment_4_2 = (Assignment)cAlternatives_4.eContents().get(2);
		private final RuleCall cDirectiveErrorDirectiveParserRuleCall_4_2_0 = (RuleCall)cDirectiveAssignment_4_2.eContents().get(0);
		private final Assignment cDirectiveAssignment_4_3 = (Assignment)cAlternatives_4.eContents().get(3);
		private final RuleCall cDirectiveWarningDirectiveParserRuleCall_4_3_0 = (RuleCall)cDirectiveAssignment_4_3.eContents().get(0);
		private final Assignment cDirectiveAssignment_4_4 = (Assignment)cAlternatives_4.eContents().get(4);
		private final RuleCall cDirectiveUnDefineDirectiveParserRuleCall_4_4_0 = (RuleCall)cDirectiveAssignment_4_4.eContents().get(0);
		private final Assignment cDirectiveAssignment_4_5 = (Assignment)cAlternatives_4.eContents().get(5);
		private final RuleCall cDirectiveConditionalDirectiveParserRuleCall_4_5_0 = (RuleCall)cDirectiveAssignment_4_5.eContents().get(0);
		private final Assignment cDirectiveAssignment_4_6 = (Assignment)cAlternatives_4.eContents().get(6);
		private final RuleCall cDirectivePragmaDirectiveParserRuleCall_4_6_0 = (RuleCall)cDirectiveAssignment_4_6.eContents().get(0);
		private final Assignment cDirectiveAssignment_4_7 = (Assignment)cAlternatives_4.eContents().get(7);
		private final RuleCall cDirectiveNullDirectiveParserRuleCall_4_7_0 = (RuleCall)cDirectiveAssignment_4_7.eContents().get(0);
		
		//PreprocessorDirectives SourceCodeLine:
		//	{PreprocessorDirectives} WHITESPACE* HASH WHITESPACE* (directive=IncludeDirective
		//	| directive=DefineDirective
		//	| directive=ErrorDirective
		//	| directive=WarningDirective
		//	| directive=UnDefineDirective
		//	| directive=ConditionalDirective
		//	| directive=PragmaDirective
		//	| directive=NullDirective)
		@Override public ParserRule getRule() { return rule; }
		
		//{PreprocessorDirectives} WHITESPACE* HASH WHITESPACE* (directive=IncludeDirective | directive=DefineDirective |
		//directive=ErrorDirective | directive=WarningDirective | directive=UnDefineDirective | directive=ConditionalDirective |
		//directive=PragmaDirective | directive=NullDirective)
		public Group getGroup() { return cGroup; }
		
		//{PreprocessorDirectives}
		public Action getPreprocessorDirectivesAction_0() { return cPreprocessorDirectivesAction_0; }
		
		//WHITESPACE*
		public RuleCall getWHITESPACETerminalRuleCall_1() { return cWHITESPACETerminalRuleCall_1; }
		
		//HASH
		public RuleCall getHASHTerminalRuleCall_2() { return cHASHTerminalRuleCall_2; }
		
		//WHITESPACE*
		public RuleCall getWHITESPACETerminalRuleCall_3() { return cWHITESPACETerminalRuleCall_3; }
		
		//(directive=IncludeDirective | directive=DefineDirective | directive=ErrorDirective | directive=WarningDirective |
		//directive=UnDefineDirective | directive=ConditionalDirective | directive=PragmaDirective | directive=NullDirective)
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//directive=IncludeDirective
		public Assignment getDirectiveAssignment_4_0() { return cDirectiveAssignment_4_0; }
		
		//IncludeDirective
		public RuleCall getDirectiveIncludeDirectiveParserRuleCall_4_0_0() { return cDirectiveIncludeDirectiveParserRuleCall_4_0_0; }
		
		//directive=DefineDirective
		public Assignment getDirectiveAssignment_4_1() { return cDirectiveAssignment_4_1; }
		
		//DefineDirective
		public RuleCall getDirectiveDefineDirectiveParserRuleCall_4_1_0() { return cDirectiveDefineDirectiveParserRuleCall_4_1_0; }
		
		//directive=ErrorDirective
		public Assignment getDirectiveAssignment_4_2() { return cDirectiveAssignment_4_2; }
		
		//ErrorDirective
		public RuleCall getDirectiveErrorDirectiveParserRuleCall_4_2_0() { return cDirectiveErrorDirectiveParserRuleCall_4_2_0; }
		
		//directive=WarningDirective
		public Assignment getDirectiveAssignment_4_3() { return cDirectiveAssignment_4_3; }
		
		//WarningDirective
		public RuleCall getDirectiveWarningDirectiveParserRuleCall_4_3_0() { return cDirectiveWarningDirectiveParserRuleCall_4_3_0; }
		
		//directive=UnDefineDirective
		public Assignment getDirectiveAssignment_4_4() { return cDirectiveAssignment_4_4; }
		
		//UnDefineDirective
		public RuleCall getDirectiveUnDefineDirectiveParserRuleCall_4_4_0() { return cDirectiveUnDefineDirectiveParserRuleCall_4_4_0; }
		
		//directive=ConditionalDirective
		public Assignment getDirectiveAssignment_4_5() { return cDirectiveAssignment_4_5; }
		
		//ConditionalDirective
		public RuleCall getDirectiveConditionalDirectiveParserRuleCall_4_5_0() { return cDirectiveConditionalDirectiveParserRuleCall_4_5_0; }
		
		//directive=PragmaDirective
		public Assignment getDirectiveAssignment_4_6() { return cDirectiveAssignment_4_6; }
		
		//PragmaDirective
		public RuleCall getDirectivePragmaDirectiveParserRuleCall_4_6_0() { return cDirectivePragmaDirectiveParserRuleCall_4_6_0; }
		
		//directive=NullDirective
		public Assignment getDirectiveAssignment_4_7() { return cDirectiveAssignment_4_7; }
		
		//NullDirective
		public RuleCall getDirectiveNullDirectiveParserRuleCall_4_7_0() { return cDirectiveNullDirectiveParserRuleCall_4_7_0; }
	}
	public class IncludeDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.IncludeDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIncludeDirectiveAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cINCLUDETerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Assignment cNextAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cNextINCLUDE_NEXTTerminalRuleCall_1_1_0 = (RuleCall)cNextAssignment_1_1.eContents().get(0);
		private final RuleCall cWHITESPACETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cStringAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStringMyCodeLineParserRuleCall_3_0 = (RuleCall)cStringAssignment_3.eContents().get(0);
		
		//IncludeDirective:
		//	{IncludeDirective} (INCLUDE | next?=INCLUDE_NEXT) WHITESPACE+ string=MyCodeLine;
		@Override public ParserRule getRule() { return rule; }
		
		//{IncludeDirective} (INCLUDE | next?=INCLUDE_NEXT) WHITESPACE+ string=MyCodeLine
		public Group getGroup() { return cGroup; }
		
		//{IncludeDirective}
		public Action getIncludeDirectiveAction_0() { return cIncludeDirectiveAction_0; }
		
		//(INCLUDE | next?=INCLUDE_NEXT)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//INCLUDE
		public RuleCall getINCLUDETerminalRuleCall_1_0() { return cINCLUDETerminalRuleCall_1_0; }
		
		//next?=INCLUDE_NEXT
		public Assignment getNextAssignment_1_1() { return cNextAssignment_1_1; }
		
		//INCLUDE_NEXT
		public RuleCall getNextINCLUDE_NEXTTerminalRuleCall_1_1_0() { return cNextINCLUDE_NEXTTerminalRuleCall_1_1_0; }
		
		//WHITESPACE+
		public RuleCall getWHITESPACETerminalRuleCall_2() { return cWHITESPACETerminalRuleCall_2; }
		
		//string=MyCodeLine
		public Assignment getStringAssignment_3() { return cStringAssignment_3; }
		
		//MyCodeLine
		public RuleCall getStringMyCodeLineParserRuleCall_3_0() { return cStringMyCodeLineParserRuleCall_3_0; }
	}
	public class DefineDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.DefineDirective");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDefineObjectMacroParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDefineFunctionLikeMacroParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DefineDirective:
		//	DefineObjectMacro
		//	| DefineFunctionLikeMacro;
		@Override public ParserRule getRule() { return rule; }
		
		//DefineObjectMacro | DefineFunctionLikeMacro
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DefineObjectMacro
		public RuleCall getDefineObjectMacroParserRuleCall_0() { return cDefineObjectMacroParserRuleCall_0; }
		
		//DefineFunctionLikeMacro
		public RuleCall getDefineFunctionLikeMacroParserRuleCall_1() { return cDefineFunctionLikeMacroParserRuleCall_1; }
	}
	public class DefineObjectMacroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.DefineObjectMacro");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDefineObjectMacroAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cDEFINETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cWHITESPACETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cIdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdMyCodeParserRuleCall_3_0 = (RuleCall)cIdAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cWHITESPACETerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Assignment cStringAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cStringMyDefineLineObjectParserRuleCall_4_1_0 = (RuleCall)cStringAssignment_4_1.eContents().get(0);
		private final RuleCall cWHITESPACETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//DefineObjectMacro DefineDirective:
		//	{DefineObjectMacro} DEFINE WHITESPACE+ id=MyCode (WHITESPACE+ string=MyDefineLineObject)?
		//	WHITESPACE*
		@Override public ParserRule getRule() { return rule; }
		
		//{DefineObjectMacro} DEFINE WHITESPACE+ id=MyCode (WHITESPACE+ string=MyDefineLineObject)? WHITESPACE*
		public Group getGroup() { return cGroup; }
		
		//{DefineObjectMacro}
		public Action getDefineObjectMacroAction_0() { return cDefineObjectMacroAction_0; }
		
		//DEFINE
		public RuleCall getDEFINETerminalRuleCall_1() { return cDEFINETerminalRuleCall_1; }
		
		//WHITESPACE+
		public RuleCall getWHITESPACETerminalRuleCall_2() { return cWHITESPACETerminalRuleCall_2; }
		
		//id=MyCode
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }
		
		//MyCode
		public RuleCall getIdMyCodeParserRuleCall_3_0() { return cIdMyCodeParserRuleCall_3_0; }
		
		//(WHITESPACE+ string=MyDefineLineObject)?
		public Group getGroup_4() { return cGroup_4; }
		
		//WHITESPACE+
		public RuleCall getWHITESPACETerminalRuleCall_4_0() { return cWHITESPACETerminalRuleCall_4_0; }
		
		//string=MyDefineLineObject
		public Assignment getStringAssignment_4_1() { return cStringAssignment_4_1; }
		
		//MyDefineLineObject
		public RuleCall getStringMyDefineLineObjectParserRuleCall_4_1_0() { return cStringMyDefineLineObjectParserRuleCall_4_1_0; }
		
		//WHITESPACE*
		public RuleCall getWHITESPACETerminalRuleCall_5() { return cWHITESPACETerminalRuleCall_5; }
	}
	public class DefineFunctionLikeMacroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.DefineFunctionLikeMacro");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDefineFunctionLikeMacroAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cDEFINETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cWHITESPACETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cIdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdMyCodeParserRuleCall_3_0 = (RuleCall)cIdAssignment_3.eContents().get(0);
		private final RuleCall cSKW_LEFTPARENTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cWHITESPACETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cListAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cListIdentifierListParserRuleCall_6_0 = (RuleCall)cListAssignment_6.eContents().get(0);
		private final RuleCall cSKW_RIGHTPARENTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Assignment cStringAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cStringMyDefineLineFunctionParserRuleCall_8_0 = (RuleCall)cStringAssignment_8.eContents().get(0);
		
		//DefineFunctionLikeMacro DefineDirective:
		//	{DefineFunctionLikeMacro} DEFINE WHITESPACE+ id=MyCode
		//	SKW_LEFTPAREN WHITESPACE*
		//	list=IdentifierList?
		//	SKW_RIGHTPAREN
		//	string=MyDefineLineFunction
		//	//(replacement+=ReplaceLine)*
		//?
		@Override public ParserRule getRule() { return rule; }
		
		//{DefineFunctionLikeMacro} DEFINE WHITESPACE+ id=MyCode SKW_LEFTPAREN WHITESPACE* list=IdentifierList? SKW_RIGHTPAREN
		//string=MyDefineLineFunction //(replacement+=ReplaceLine)*
		//?
		public Group getGroup() { return cGroup; }
		
		//{DefineFunctionLikeMacro}
		public Action getDefineFunctionLikeMacroAction_0() { return cDefineFunctionLikeMacroAction_0; }
		
		//DEFINE
		public RuleCall getDEFINETerminalRuleCall_1() { return cDEFINETerminalRuleCall_1; }
		
		//WHITESPACE+
		public RuleCall getWHITESPACETerminalRuleCall_2() { return cWHITESPACETerminalRuleCall_2; }
		
		//id=MyCode
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }
		
		//MyCode
		public RuleCall getIdMyCodeParserRuleCall_3_0() { return cIdMyCodeParserRuleCall_3_0; }
		
		//SKW_LEFTPAREN
		public RuleCall getSKW_LEFTPARENTerminalRuleCall_4() { return cSKW_LEFTPARENTerminalRuleCall_4; }
		
		//WHITESPACE*
		public RuleCall getWHITESPACETerminalRuleCall_5() { return cWHITESPACETerminalRuleCall_5; }
		
		//list=IdentifierList?
		public Assignment getListAssignment_6() { return cListAssignment_6; }
		
		//IdentifierList
		public RuleCall getListIdentifierListParserRuleCall_6_0() { return cListIdentifierListParserRuleCall_6_0; }
		
		//SKW_RIGHTPAREN
		public RuleCall getSKW_RIGHTPARENTerminalRuleCall_7() { return cSKW_RIGHTPARENTerminalRuleCall_7; }
		
		//string=MyDefineLineFunction //(replacement+=ReplaceLine)*
		//?
		public Assignment getStringAssignment_8() { return cStringAssignment_8; }
		
		//MyDefineLineFunction
		public RuleCall getStringMyDefineLineFunctionParserRuleCall_8_0() { return cStringMyDefineLineFunctionParserRuleCall_8_0; }
	}
	public class IdentifierListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.IdentifierList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIdentifierListAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cIdAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_1_0_0_0 = (RuleCall)cIdAssignment_1_0_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final RuleCall cWHITESPACETerminalRuleCall_1_0_1_0 = (RuleCall)cGroup_1_0_1.eContents().get(0);
		private final RuleCall cSKW_COMMATerminalRuleCall_1_0_1_1 = (RuleCall)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cWHITESPACETerminalRuleCall_1_0_1_2 = (RuleCall)cGroup_1_0_1.eContents().get(2);
		private final Assignment cIdAssignment_1_0_1_3 = (Assignment)cGroup_1_0_1.eContents().get(3);
		private final RuleCall cIdIDTerminalRuleCall_1_0_1_3_0 = (RuleCall)cIdAssignment_1_0_1_3.eContents().get(0);
		private final RuleCall cWHITESPACETerminalRuleCall_1_0_2 = (RuleCall)cGroup_1_0.eContents().get(2);
		private final Group cGroup_1_0_3 = (Group)cGroup_1_0.eContents().get(3);
		private final RuleCall cSKW_COMMATerminalRuleCall_1_0_3_0 = (RuleCall)cGroup_1_0_3.eContents().get(0);
		private final RuleCall cWHITESPACETerminalRuleCall_1_0_3_1 = (RuleCall)cGroup_1_0_3.eContents().get(1);
		private final Alternatives cAlternatives_1_0_3_2 = (Alternatives)cGroup_1_0_3.eContents().get(2);
		private final Assignment cVariadicAssignment_1_0_3_2_0 = (Assignment)cAlternatives_1_0_3_2.eContents().get(0);
		private final RuleCall cVariadicEllipsisParserRuleCall_1_0_3_2_0_0 = (RuleCall)cVariadicAssignment_1_0_3_2_0.eContents().get(0);
		private final Group cGroup_1_0_3_2_1 = (Group)cAlternatives_1_0_3_2.eContents().get(1);
		private final Assignment cVarIDAssignment_1_0_3_2_1_0 = (Assignment)cGroup_1_0_3_2_1.eContents().get(0);
		private final RuleCall cVarIDIDTerminalRuleCall_1_0_3_2_1_0_0 = (RuleCall)cVarIDAssignment_1_0_3_2_1_0.eContents().get(0);
		private final Assignment cVariadicAssignment_1_0_3_2_1_1 = (Assignment)cGroup_1_0_3_2_1.eContents().get(1);
		private final RuleCall cVariadicEllipsisParserRuleCall_1_0_3_2_1_1_0 = (RuleCall)cVariadicAssignment_1_0_3_2_1_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cVarIDAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cVarIDIDTerminalRuleCall_1_1_0_0 = (RuleCall)cVarIDAssignment_1_1_0.eContents().get(0);
		private final Assignment cVariadicAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cVariadicEllipsisParserRuleCall_1_1_1_0 = (RuleCall)cVariadicAssignment_1_1_1.eContents().get(0);
		
		//IdentifierList:
		//	{IdentifierList} (id+=ID (WHITESPACE* SKW_COMMA WHITESPACE* id+=ID)*
		//	WHITESPACE* (SKW_COMMA WHITESPACE* (variadic?=Ellipsis
		//	| varID=ID variadic?=Ellipsis))?
		//	| varID=ID? variadic?=Ellipsis);
		@Override public ParserRule getRule() { return rule; }
		
		//{IdentifierList} (id+=ID (WHITESPACE* SKW_COMMA WHITESPACE* id+=ID)* WHITESPACE* (SKW_COMMA WHITESPACE*
		//(variadic?=Ellipsis | varID=ID variadic?=Ellipsis))? | varID=ID? variadic?=Ellipsis)
		public Group getGroup() { return cGroup; }
		
		//{IdentifierList}
		public Action getIdentifierListAction_0() { return cIdentifierListAction_0; }
		
		//(id+=ID (WHITESPACE* SKW_COMMA WHITESPACE* id+=ID)* WHITESPACE* (SKW_COMMA WHITESPACE* (variadic?=Ellipsis | varID=ID
		//variadic?=Ellipsis))? | varID=ID? variadic?=Ellipsis)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//id+=ID (WHITESPACE* SKW_COMMA WHITESPACE* id+=ID)* WHITESPACE* (SKW_COMMA WHITESPACE* (variadic?=Ellipsis | varID=ID
		//variadic?=Ellipsis))?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//id+=ID
		public Assignment getIdAssignment_1_0_0() { return cIdAssignment_1_0_0; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0_0_0() { return cIdIDTerminalRuleCall_1_0_0_0; }
		
		//(WHITESPACE* SKW_COMMA WHITESPACE* id+=ID)*
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//WHITESPACE*
		public RuleCall getWHITESPACETerminalRuleCall_1_0_1_0() { return cWHITESPACETerminalRuleCall_1_0_1_0; }
		
		//SKW_COMMA
		public RuleCall getSKW_COMMATerminalRuleCall_1_0_1_1() { return cSKW_COMMATerminalRuleCall_1_0_1_1; }
		
		//WHITESPACE*
		public RuleCall getWHITESPACETerminalRuleCall_1_0_1_2() { return cWHITESPACETerminalRuleCall_1_0_1_2; }
		
		//id+=ID
		public Assignment getIdAssignment_1_0_1_3() { return cIdAssignment_1_0_1_3; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0_1_3_0() { return cIdIDTerminalRuleCall_1_0_1_3_0; }
		
		//WHITESPACE*
		public RuleCall getWHITESPACETerminalRuleCall_1_0_2() { return cWHITESPACETerminalRuleCall_1_0_2; }
		
		//(SKW_COMMA WHITESPACE* (variadic?=Ellipsis | varID=ID variadic?=Ellipsis))?
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }
		
		//SKW_COMMA
		public RuleCall getSKW_COMMATerminalRuleCall_1_0_3_0() { return cSKW_COMMATerminalRuleCall_1_0_3_0; }
		
		//WHITESPACE*
		public RuleCall getWHITESPACETerminalRuleCall_1_0_3_1() { return cWHITESPACETerminalRuleCall_1_0_3_1; }
		
		//(variadic?=Ellipsis | varID=ID variadic?=Ellipsis)
		public Alternatives getAlternatives_1_0_3_2() { return cAlternatives_1_0_3_2; }
		
		//variadic?=Ellipsis
		public Assignment getVariadicAssignment_1_0_3_2_0() { return cVariadicAssignment_1_0_3_2_0; }
		
		//Ellipsis
		public RuleCall getVariadicEllipsisParserRuleCall_1_0_3_2_0_0() { return cVariadicEllipsisParserRuleCall_1_0_3_2_0_0; }
		
		//varID=ID variadic?=Ellipsis
		public Group getGroup_1_0_3_2_1() { return cGroup_1_0_3_2_1; }
		
		//varID=ID
		public Assignment getVarIDAssignment_1_0_3_2_1_0() { return cVarIDAssignment_1_0_3_2_1_0; }
		
		//ID
		public RuleCall getVarIDIDTerminalRuleCall_1_0_3_2_1_0_0() { return cVarIDIDTerminalRuleCall_1_0_3_2_1_0_0; }
		
		//variadic?=Ellipsis
		public Assignment getVariadicAssignment_1_0_3_2_1_1() { return cVariadicAssignment_1_0_3_2_1_1; }
		
		//Ellipsis
		public RuleCall getVariadicEllipsisParserRuleCall_1_0_3_2_1_1_0() { return cVariadicEllipsisParserRuleCall_1_0_3_2_1_1_0; }
		
		//varID=ID? variadic?=Ellipsis
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//varID=ID?
		public Assignment getVarIDAssignment_1_1_0() { return cVarIDAssignment_1_1_0; }
		
		//ID
		public RuleCall getVarIDIDTerminalRuleCall_1_1_0_0() { return cVarIDIDTerminalRuleCall_1_1_0_0; }
		
		//variadic?=Ellipsis
		public Assignment getVariadicAssignment_1_1_1() { return cVariadicAssignment_1_1_1; }
		
		//Ellipsis
		public RuleCall getVariadicEllipsisParserRuleCall_1_1_1_0() { return cVariadicEllipsisParserRuleCall_1_1_1_0; }
	}
	public class ErrorDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.ErrorDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cErrorDirectiveAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cERRORTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cWHITESPACETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cMsgAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMsgMyCodeLineParserRuleCall_3_0 = (RuleCall)cMsgAssignment_3.eContents().get(0);
		
		//ErrorDirective:
		//	{ErrorDirective} ERROR WHITESPACE* msg=MyCodeLine?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ErrorDirective} ERROR WHITESPACE* msg=MyCodeLine?
		public Group getGroup() { return cGroup; }
		
		//{ErrorDirective}
		public Action getErrorDirectiveAction_0() { return cErrorDirectiveAction_0; }
		
		//ERROR
		public RuleCall getERRORTerminalRuleCall_1() { return cERRORTerminalRuleCall_1; }
		
		//WHITESPACE*
		public RuleCall getWHITESPACETerminalRuleCall_2() { return cWHITESPACETerminalRuleCall_2; }
		
		//msg=MyCodeLine?
		public Assignment getMsgAssignment_3() { return cMsgAssignment_3; }
		
		//MyCodeLine
		public RuleCall getMsgMyCodeLineParserRuleCall_3_0() { return cMsgMyCodeLineParserRuleCall_3_0; }
	}
	public class WarningDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.WarningDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWarningDirectiveAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cWARNINGTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cWHITESPACETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cMsgAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMsgMyCodeLineParserRuleCall_3_0 = (RuleCall)cMsgAssignment_3.eContents().get(0);
		
		//WarningDirective:
		//	{WarningDirective} WARNING WHITESPACE* msg=MyCodeLine?;
		@Override public ParserRule getRule() { return rule; }
		
		//{WarningDirective} WARNING WHITESPACE* msg=MyCodeLine?
		public Group getGroup() { return cGroup; }
		
		//{WarningDirective}
		public Action getWarningDirectiveAction_0() { return cWarningDirectiveAction_0; }
		
		//WARNING
		public RuleCall getWARNINGTerminalRuleCall_1() { return cWARNINGTerminalRuleCall_1; }
		
		//WHITESPACE*
		public RuleCall getWHITESPACETerminalRuleCall_2() { return cWHITESPACETerminalRuleCall_2; }
		
		//msg=MyCodeLine?
		public Assignment getMsgAssignment_3() { return cMsgAssignment_3; }
		
		//MyCodeLine
		public RuleCall getMsgMyCodeLineParserRuleCall_3_0() { return cMsgMyCodeLineParserRuleCall_3_0; }
	}
	public class UnDefineDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.UnDefineDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnDefineDirectiveAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cUNDEFTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cWHITESPACETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cIdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdIDTerminalRuleCall_3_0 = (RuleCall)cIdAssignment_3.eContents().get(0);
		private final RuleCall cWHITESPACETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//UnDefineDirective:
		//	{UnDefineDirective} UNDEF WHITESPACE+ id=ID WHITESPACE*;
		@Override public ParserRule getRule() { return rule; }
		
		//{UnDefineDirective} UNDEF WHITESPACE+ id=ID WHITESPACE*
		public Group getGroup() { return cGroup; }
		
		//{UnDefineDirective}
		public Action getUnDefineDirectiveAction_0() { return cUnDefineDirectiveAction_0; }
		
		//UNDEF
		public RuleCall getUNDEFTerminalRuleCall_1() { return cUNDEFTerminalRuleCall_1; }
		
		//WHITESPACE+
		public RuleCall getWHITESPACETerminalRuleCall_2() { return cWHITESPACETerminalRuleCall_2; }
		
		//id=ID
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_3_0() { return cIdIDTerminalRuleCall_3_0; }
		
		//WHITESPACE*
		public RuleCall getWHITESPACETerminalRuleCall_4() { return cWHITESPACETerminalRuleCall_4; }
	}
	public class ConditionalDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.ConditionalDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConditionalDirectiveAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cConditionalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cConditionalAlternatives_1_0 = (Alternatives)cConditionalAssignment_1.eContents().get(0);
		private final RuleCall cConditionalIfConditionalParserRuleCall_1_0_0 = (RuleCall)cConditionalAlternatives_1_0.eContents().get(0);
		private final RuleCall cConditionalIfDefConditionalParserRuleCall_1_0_1 = (RuleCall)cConditionalAlternatives_1_0.eContents().get(1);
		private final RuleCall cConditionalIfNotDefConditionalParserRuleCall_1_0_2 = (RuleCall)cConditionalAlternatives_1_0.eContents().get(2);
		private final Assignment cElifsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElifsElIfConditionalParserRuleCall_2_0 = (RuleCall)cElifsAssignment_2.eContents().get(0);
		private final Assignment cElseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElseElseConditionalParserRuleCall_3_0 = (RuleCall)cElseAssignment_3.eContents().get(0);
		private final RuleCall cWHITESPACETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cHASHTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cWHITESPACETerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final RuleCall cENDIFTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final RuleCall cWHITESPACETerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		//ConditionalDirective:
		//	{ConditionalDirective} conditional=(IfConditional
		//	| IfDefConditional
		//	| IfNotDefConditional) elifs+=ElIfConditional*
		//	else=ElseConditional?
		//	WHITESPACE* HASH WHITESPACE* ENDIF WHITESPACE*;
		@Override public ParserRule getRule() { return rule; }
		
		//{ConditionalDirective} conditional=(IfConditional | IfDefConditional | IfNotDefConditional) elifs+=ElIfConditional*
		//else=ElseConditional? WHITESPACE* HASH WHITESPACE* ENDIF WHITESPACE*
		public Group getGroup() { return cGroup; }
		
		//{ConditionalDirective}
		public Action getConditionalDirectiveAction_0() { return cConditionalDirectiveAction_0; }
		
		//conditional=(IfConditional | IfDefConditional | IfNotDefConditional)
		public Assignment getConditionalAssignment_1() { return cConditionalAssignment_1; }
		
		//(IfConditional | IfDefConditional | IfNotDefConditional)
		public Alternatives getConditionalAlternatives_1_0() { return cConditionalAlternatives_1_0; }
		
		//IfConditional
		public RuleCall getConditionalIfConditionalParserRuleCall_1_0_0() { return cConditionalIfConditionalParserRuleCall_1_0_0; }
		
		//IfDefConditional
		public RuleCall getConditionalIfDefConditionalParserRuleCall_1_0_1() { return cConditionalIfDefConditionalParserRuleCall_1_0_1; }
		
		//IfNotDefConditional
		public RuleCall getConditionalIfNotDefConditionalParserRuleCall_1_0_2() { return cConditionalIfNotDefConditionalParserRuleCall_1_0_2; }
		
		//elifs+=ElIfConditional*
		public Assignment getElifsAssignment_2() { return cElifsAssignment_2; }
		
		//ElIfConditional
		public RuleCall getElifsElIfConditionalParserRuleCall_2_0() { return cElifsElIfConditionalParserRuleCall_2_0; }
		
		//else=ElseConditional?
		public Assignment getElseAssignment_3() { return cElseAssignment_3; }
		
		//ElseConditional
		public RuleCall getElseElseConditionalParserRuleCall_3_0() { return cElseElseConditionalParserRuleCall_3_0; }
		
		//WHITESPACE*
		public RuleCall getWHITESPACETerminalRuleCall_4() { return cWHITESPACETerminalRuleCall_4; }
		
		//HASH
		public RuleCall getHASHTerminalRuleCall_5() { return cHASHTerminalRuleCall_5; }
		
		//WHITESPACE*
		public RuleCall getWHITESPACETerminalRuleCall_6() { return cWHITESPACETerminalRuleCall_6; }
		
		//ENDIF
		public RuleCall getENDIFTerminalRuleCall_7() { return cENDIFTerminalRuleCall_7; }
		
		//WHITESPACE*
		public RuleCall getWHITESPACETerminalRuleCall_8() { return cWHITESPACETerminalRuleCall_8; }
	}
	public class IfConditionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.IfConditional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIfConditionalAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cIFTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cWHITESPACETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final RuleCall cWHITESPACETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cNEWLINETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cGroupAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cGroupGroupOptParserRuleCall_6_0 = (RuleCall)cGroupAssignment_6.eContents().get(0);
		
		//IfConditional:
		//	{IfConditional} IF WHITESPACE+ expression=Common::Expression WHITESPACE* NEWLINE
		//	group=GroupOpt;
		@Override public ParserRule getRule() { return rule; }
		
		//{IfConditional} IF WHITESPACE+ expression=Common::Expression WHITESPACE* NEWLINE group=GroupOpt
		public Group getGroup() { return cGroup; }
		
		//{IfConditional}
		public Action getIfConditionalAction_0() { return cIfConditionalAction_0; }
		
		//IF
		public RuleCall getIFTerminalRuleCall_1() { return cIFTerminalRuleCall_1; }
		
		//WHITESPACE+
		public RuleCall getWHITESPACETerminalRuleCall_2() { return cWHITESPACETerminalRuleCall_2; }
		
		//expression=Common::Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//Common::Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }
		
		//WHITESPACE*
		public RuleCall getWHITESPACETerminalRuleCall_4() { return cWHITESPACETerminalRuleCall_4; }
		
		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_5() { return cNEWLINETerminalRuleCall_5; }
		
		//group=GroupOpt
		public Assignment getGroupAssignment_6() { return cGroupAssignment_6; }
		
		//GroupOpt
		public RuleCall getGroupGroupOptParserRuleCall_6_0() { return cGroupGroupOptParserRuleCall_6_0; }
	}
	public class IfDefConditionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.IfDefConditional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIfDefConditionalAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cIFDEFTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cWHITESPACETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cIdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdIDTerminalRuleCall_3_0 = (RuleCall)cIdAssignment_3.eContents().get(0);
		private final RuleCall cWHITESPACETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cNEWLINETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cGroupAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cGroupGroupOptParserRuleCall_6_0 = (RuleCall)cGroupAssignment_6.eContents().get(0);
		
		//IfDefConditional:
		//	{IfDefConditional} IFDEF WHITESPACE+ id=ID WHITESPACE* NEWLINE
		//	group=GroupOpt;
		@Override public ParserRule getRule() { return rule; }
		
		//{IfDefConditional} IFDEF WHITESPACE+ id=ID WHITESPACE* NEWLINE group=GroupOpt
		public Group getGroup() { return cGroup; }
		
		//{IfDefConditional}
		public Action getIfDefConditionalAction_0() { return cIfDefConditionalAction_0; }
		
		//IFDEF
		public RuleCall getIFDEFTerminalRuleCall_1() { return cIFDEFTerminalRuleCall_1; }
		
		//WHITESPACE+
		public RuleCall getWHITESPACETerminalRuleCall_2() { return cWHITESPACETerminalRuleCall_2; }
		
		//id=ID
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_3_0() { return cIdIDTerminalRuleCall_3_0; }
		
		//WHITESPACE*
		public RuleCall getWHITESPACETerminalRuleCall_4() { return cWHITESPACETerminalRuleCall_4; }
		
		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_5() { return cNEWLINETerminalRuleCall_5; }
		
		//group=GroupOpt
		public Assignment getGroupAssignment_6() { return cGroupAssignment_6; }
		
		//GroupOpt
		public RuleCall getGroupGroupOptParserRuleCall_6_0() { return cGroupGroupOptParserRuleCall_6_0; }
	}
	public class IfNotDefConditionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.IfNotDefConditional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIfNotDefConditionalAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cIFNOTDEFTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cWHITESPACETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cIdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdIDTerminalRuleCall_3_0 = (RuleCall)cIdAssignment_3.eContents().get(0);
		private final RuleCall cWHITESPACETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cNEWLINETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cGroupAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cGroupGroupOptParserRuleCall_6_0 = (RuleCall)cGroupAssignment_6.eContents().get(0);
		
		//IfNotDefConditional:
		//	{IfNotDefConditional} IFNOTDEF WHITESPACE+ id=ID WHITESPACE* NEWLINE
		//	group=GroupOpt;
		@Override public ParserRule getRule() { return rule; }
		
		//{IfNotDefConditional} IFNOTDEF WHITESPACE+ id=ID WHITESPACE* NEWLINE group=GroupOpt
		public Group getGroup() { return cGroup; }
		
		//{IfNotDefConditional}
		public Action getIfNotDefConditionalAction_0() { return cIfNotDefConditionalAction_0; }
		
		//IFNOTDEF
		public RuleCall getIFNOTDEFTerminalRuleCall_1() { return cIFNOTDEFTerminalRuleCall_1; }
		
		//WHITESPACE+
		public RuleCall getWHITESPACETerminalRuleCall_2() { return cWHITESPACETerminalRuleCall_2; }
		
		//id=ID
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_3_0() { return cIdIDTerminalRuleCall_3_0; }
		
		//WHITESPACE*
		public RuleCall getWHITESPACETerminalRuleCall_4() { return cWHITESPACETerminalRuleCall_4; }
		
		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_5() { return cNEWLINETerminalRuleCall_5; }
		
		//group=GroupOpt
		public Assignment getGroupAssignment_6() { return cGroupAssignment_6; }
		
		//GroupOpt
		public RuleCall getGroupGroupOptParserRuleCall_6_0() { return cGroupGroupOptParserRuleCall_6_0; }
	}
	public class ElIfConditionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.ElIfConditional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cElIfConditionalAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cWHITESPACETerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cHASHTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cWHITESPACETerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cELIFTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final RuleCall cWHITESPACETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final RuleCall cWHITESPACETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cNEWLINETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cGroupAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cGroupGroupOptParserRuleCall_6_0 = (RuleCall)cGroupAssignment_6.eContents().get(0);
		
		//ElIfConditional:
		//	{ElIfConditional} (WHITESPACE* HASH WHITESPACE* ELIF) WHITESPACE+ expression=Common::Expression WHITESPACE* NEWLINE
		//	group=GroupOpt;
		@Override public ParserRule getRule() { return rule; }
		
		//{ElIfConditional} (WHITESPACE* HASH WHITESPACE* ELIF) WHITESPACE+ expression=Common::Expression WHITESPACE* NEWLINE
		//group=GroupOpt
		public Group getGroup() { return cGroup; }
		
		//{ElIfConditional}
		public Action getElIfConditionalAction_0() { return cElIfConditionalAction_0; }
		
		//(WHITESPACE* HASH WHITESPACE* ELIF)
		public Group getGroup_1() { return cGroup_1; }
		
		//WHITESPACE*
		public RuleCall getWHITESPACETerminalRuleCall_1_0() { return cWHITESPACETerminalRuleCall_1_0; }
		
		//HASH
		public RuleCall getHASHTerminalRuleCall_1_1() { return cHASHTerminalRuleCall_1_1; }
		
		//WHITESPACE*
		public RuleCall getWHITESPACETerminalRuleCall_1_2() { return cWHITESPACETerminalRuleCall_1_2; }
		
		//ELIF
		public RuleCall getELIFTerminalRuleCall_1_3() { return cELIFTerminalRuleCall_1_3; }
		
		//WHITESPACE+
		public RuleCall getWHITESPACETerminalRuleCall_2() { return cWHITESPACETerminalRuleCall_2; }
		
		//expression=Common::Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//Common::Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }
		
		//WHITESPACE*
		public RuleCall getWHITESPACETerminalRuleCall_4() { return cWHITESPACETerminalRuleCall_4; }
		
		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_5() { return cNEWLINETerminalRuleCall_5; }
		
		//group=GroupOpt
		public Assignment getGroupAssignment_6() { return cGroupAssignment_6; }
		
		//GroupOpt
		public RuleCall getGroupGroupOptParserRuleCall_6_0() { return cGroupGroupOptParserRuleCall_6_0; }
	}
	public class ElseConditionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.ElseConditional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cElseConditionalAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cWHITESPACETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cHASHTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cWHITESPACETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cELSETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cWHITESPACETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cNEWLINETerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Assignment cGroupAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cGroupGroupOptParserRuleCall_7_0 = (RuleCall)cGroupAssignment_7.eContents().get(0);
		
		//ElseConditional:
		//	{ElseConditional} WHITESPACE* HASH WHITESPACE* ELSE WHITESPACE* NEWLINE
		//	group=GroupOpt;
		@Override public ParserRule getRule() { return rule; }
		
		//{ElseConditional} WHITESPACE* HASH WHITESPACE* ELSE WHITESPACE* NEWLINE group=GroupOpt
		public Group getGroup() { return cGroup; }
		
		//{ElseConditional}
		public Action getElseConditionalAction_0() { return cElseConditionalAction_0; }
		
		//WHITESPACE*
		public RuleCall getWHITESPACETerminalRuleCall_1() { return cWHITESPACETerminalRuleCall_1; }
		
		//HASH
		public RuleCall getHASHTerminalRuleCall_2() { return cHASHTerminalRuleCall_2; }
		
		//WHITESPACE*
		public RuleCall getWHITESPACETerminalRuleCall_3() { return cWHITESPACETerminalRuleCall_3; }
		
		//ELSE
		public RuleCall getELSETerminalRuleCall_4() { return cELSETerminalRuleCall_4; }
		
		//WHITESPACE*
		public RuleCall getWHITESPACETerminalRuleCall_5() { return cWHITESPACETerminalRuleCall_5; }
		
		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_6() { return cNEWLINETerminalRuleCall_6; }
		
		//group=GroupOpt
		public Assignment getGroupAssignment_7() { return cGroupAssignment_7; }
		
		//GroupOpt
		public RuleCall getGroupGroupOptParserRuleCall_7_0() { return cGroupGroupOptParserRuleCall_7_0; }
	}
	public class PragmaDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.PragmaDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPragmaDirectiveAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cPRAGMATerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cWHITESPACETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cPragmaAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPragmaMyCodeLineParserRuleCall_3_0 = (RuleCall)cPragmaAssignment_3.eContents().get(0);
		
		//PragmaDirective:
		//	{PragmaDirective} PRAGMA
		//	WHITESPACE* pragma=MyCodeLine?;
		@Override public ParserRule getRule() { return rule; }
		
		//{PragmaDirective} PRAGMA WHITESPACE* pragma=MyCodeLine?
		public Group getGroup() { return cGroup; }
		
		//{PragmaDirective}
		public Action getPragmaDirectiveAction_0() { return cPragmaDirectiveAction_0; }
		
		//PRAGMA
		public RuleCall getPRAGMATerminalRuleCall_1() { return cPRAGMATerminalRuleCall_1; }
		
		//WHITESPACE*
		public RuleCall getWHITESPACETerminalRuleCall_2() { return cWHITESPACETerminalRuleCall_2; }
		
		//pragma=MyCodeLine?
		public Assignment getPragmaAssignment_3() { return cPragmaAssignment_3; }
		
		//MyCodeLine
		public RuleCall getPragmaMyCodeLineParserRuleCall_3_0() { return cPragmaMyCodeLineParserRuleCall_3_0; }
	}
	public class NullDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.NullDirective");
		private final Action cNullDirectiveAction = (Action)rule.eContents().get(1);
		
		//NullDirective:
		//	{NullDirective};
		@Override public ParserRule getRule() { return rule; }
		
		//{NullDirective}
		public Action getNullDirectiveAction() { return cNullDirectiveAction; }
	}
	public class NewLineLineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.NewLineLine");
		private final Action cNewLineLineAction = (Action)rule.eContents().get(1);
		
		//NewLineLine SourceCodeLine:
		//	{NewLineLine}
		@Override public ParserRule getRule() { return rule; }
		
		//{NewLineLine}
		public Action getNewLineLineAction() { return cNewLineLineAction; }
	}
	public class CodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.Code");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCodeMyCodeLineExtendedParserRuleCall_1_0 = (RuleCall)cCodeAssignment_1.eContents().get(0);
		
		//Code SourceCodeLine:
		//	{Code} code=MyCodeLineExtended
		@Override public ParserRule getRule() { return rule; }
		
		//{Code} code=MyCodeLineExtended
		public Group getGroup() { return cGroup; }
		
		//{Code}
		public Action getCodeAction_0() { return cCodeAction_0; }
		
		//code=MyCodeLineExtended
		public Assignment getCodeAssignment_1() { return cCodeAssignment_1; }
		
		//MyCodeLineExtended
		public RuleCall getCodeMyCodeLineExtendedParserRuleCall_1_0() { return cCodeMyCodeLineExtendedParserRuleCall_1_0; }
	}
	public class MyCodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.MyCode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSPECIALTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cINCLUDETerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDEFINETerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cERRORTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cPRAGMATerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cIFDEFTerminalRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cENDIFTerminalRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cIFNOTDEFTerminalRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cIFTerminalRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cDEFINEDTerminalRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cELIFTerminalRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cELSETerminalRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cWARNINGTerminalRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cUNDEFTerminalRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cSpecialKeywordsParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cConstant1ParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		
		//MyCode ecore::EString:
		//	ID | SPECIAL | INCLUDE | DEFINE | ERROR | PRAGMA
		//	| IFDEF | ENDIF | IFNOTDEF | IF | DEFINED
		//	| ELIF | ELSE | WARNING | UNDEF
		//	| SpecialKeywords | Constant1
		@Override public ParserRule getRule() { return rule; }
		
		//ID | SPECIAL | INCLUDE | DEFINE | ERROR | PRAGMA | IFDEF | ENDIF | IFNOTDEF | IF | DEFINED | ELIF | ELSE | WARNING |
		//UNDEF | SpecialKeywords | Constant1
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//SPECIAL
		public RuleCall getSPECIALTerminalRuleCall_1() { return cSPECIALTerminalRuleCall_1; }
		
		//INCLUDE
		public RuleCall getINCLUDETerminalRuleCall_2() { return cINCLUDETerminalRuleCall_2; }
		
		//DEFINE
		public RuleCall getDEFINETerminalRuleCall_3() { return cDEFINETerminalRuleCall_3; }
		
		//ERROR
		public RuleCall getERRORTerminalRuleCall_4() { return cERRORTerminalRuleCall_4; }
		
		//PRAGMA
		public RuleCall getPRAGMATerminalRuleCall_5() { return cPRAGMATerminalRuleCall_5; }
		
		//IFDEF
		public RuleCall getIFDEFTerminalRuleCall_6() { return cIFDEFTerminalRuleCall_6; }
		
		//ENDIF
		public RuleCall getENDIFTerminalRuleCall_7() { return cENDIFTerminalRuleCall_7; }
		
		//IFNOTDEF
		public RuleCall getIFNOTDEFTerminalRuleCall_8() { return cIFNOTDEFTerminalRuleCall_8; }
		
		//IF
		public RuleCall getIFTerminalRuleCall_9() { return cIFTerminalRuleCall_9; }
		
		//DEFINED
		public RuleCall getDEFINEDTerminalRuleCall_10() { return cDEFINEDTerminalRuleCall_10; }
		
		//ELIF
		public RuleCall getELIFTerminalRuleCall_11() { return cELIFTerminalRuleCall_11; }
		
		//ELSE
		public RuleCall getELSETerminalRuleCall_12() { return cELSETerminalRuleCall_12; }
		
		//WARNING
		public RuleCall getWARNINGTerminalRuleCall_13() { return cWARNINGTerminalRuleCall_13; }
		
		//UNDEF
		public RuleCall getUNDEFTerminalRuleCall_14() { return cUNDEFTerminalRuleCall_14; }
		
		//SpecialKeywords
		public RuleCall getSpecialKeywordsParserRuleCall_15() { return cSpecialKeywordsParserRuleCall_15; }
		
		//Constant1
		public RuleCall getConstant1ParserRuleCall_16() { return cConstant1ParserRuleCall_16; }
	}
	public class MyDefineLineFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.MyDefineLineFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMyDefineLineObjectParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHASHTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVA_ARGSTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//MyDefineLineFunction ecore::EString:
		//	MyDefineLineObject | HASH | VA_ARGS+
		@Override public ParserRule getRule() { return rule; }
		
		//MyDefineLineObject | HASH | VA_ARGS+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MyDefineLineObject
		public RuleCall getMyDefineLineObjectParserRuleCall_0() { return cMyDefineLineObjectParserRuleCall_0; }
		
		//HASH
		public RuleCall getHASHTerminalRuleCall_1() { return cHASHTerminalRuleCall_1; }
		
		//VA_ARGS
		public RuleCall getVA_ARGSTerminalRuleCall_2() { return cVA_ARGSTerminalRuleCall_2; }
	}
	public class MyDefineLineObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.MyDefineLineObject");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMyCodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWHITESPACETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MyDefineLineObject ecore::EString:
		//	MyCode | WHITESPACE+
		@Override public ParserRule getRule() { return rule; }
		
		//MyCode | WHITESPACE+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MyCode
		public RuleCall getMyCodeParserRuleCall_0() { return cMyCodeParserRuleCall_0; }
		
		//WHITESPACE
		public RuleCall getWHITESPACETerminalRuleCall_1() { return cWHITESPACETerminalRuleCall_1; }
	}
	public class MyCodeLineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.MyCodeLine");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMyCodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWHITESPACETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MyCodeLine ecore::EString:
		//	MyCode | WHITESPACE+
		@Override public ParserRule getRule() { return rule; }
		
		//MyCode | WHITESPACE+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MyCode
		public RuleCall getMyCodeParserRuleCall_0() { return cMyCodeParserRuleCall_0; }
		
		//WHITESPACE
		public RuleCall getWHITESPACETerminalRuleCall_1() { return cWHITESPACETerminalRuleCall_1; }
	}
	public class MyCodeLineExtendedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.MyCodeLineExtended");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMyCodeLineExtendedWSOnlyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMyCodeLineExtendedNormalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MyCodeLineExtended ecore::EString:
		//	MyCodeLineExtendedWSOnly
		//	| MyCodeLineExtendedNormal
		@Override public ParserRule getRule() { return rule; }
		
		//MyCodeLineExtendedWSOnly | MyCodeLineExtendedNormal
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MyCodeLineExtendedWSOnly
		public RuleCall getMyCodeLineExtendedWSOnlyParserRuleCall_0() { return cMyCodeLineExtendedWSOnlyParserRuleCall_0; }
		
		//MyCodeLineExtendedNormal
		public RuleCall getMyCodeLineExtendedNormalParserRuleCall_1() { return cMyCodeLineExtendedNormalParserRuleCall_1; }
	}
	public class MyCodeLineExtendedWSOnlyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.MyCodeLineExtendedWSOnly");
		private final RuleCall cWHITESPACETerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//MyCodeLineExtendedWSOnly ecore::EString:
		//	WHITESPACE+
		@Override public ParserRule getRule() { return rule; }
		
		//WHITESPACE+
		public RuleCall getWHITESPACETerminalRuleCall() { return cWHITESPACETerminalRuleCall; }
	}
	public class MyCodeLineExtendedNormalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.MyCodeLineExtendedNormal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWHITESPACETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cMyCodeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cMyCodeLineParserRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cHASHTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		
		//MyCodeLineExtendedNormal ecore::EString:
		//	WHITESPACE* MyCode+ (MyCodeLine | HASH)*
		@Override public ParserRule getRule() { return rule; }
		
		//WHITESPACE* MyCode+ (MyCodeLine | HASH)*
		public Group getGroup() { return cGroup; }
		
		//WHITESPACE*
		public RuleCall getWHITESPACETerminalRuleCall_0() { return cWHITESPACETerminalRuleCall_0; }
		
		//MyCode+
		public RuleCall getMyCodeParserRuleCall_1() { return cMyCodeParserRuleCall_1; }
		
		//(MyCodeLine | HASH)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//MyCodeLine
		public RuleCall getMyCodeLineParserRuleCall_2_0() { return cMyCodeLineParserRuleCall_2_0; }
		
		//HASH
		public RuleCall getHASHTerminalRuleCall_2_1() { return cHASHTerminalRuleCall_2_1; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.PrimaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimaryExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cDefinedAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cDefinedDEFINEDTerminalRuleCall_1_0_0_0 = (RuleCall)cDefinedAssignment_1_0_0.eContents().get(0);
		private final Assignment cIdAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0_1_0 = (RuleCall)cIdAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cDefinedAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cDefinedDEFINEDTerminalRuleCall_1_1_0_0 = (RuleCall)cDefinedAssignment_1_1_0.eContents().get(0);
		private final RuleCall cSKW_LEFTPARENTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final Assignment cIdAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cIdIDTerminalRuleCall_1_1_2_0 = (RuleCall)cIdAssignment_1_1_2.eContents().get(0);
		private final RuleCall cSKW_RIGHTPARENTerminalRuleCall_1_1_3 = (RuleCall)cGroup_1_1.eContents().get(3);
		private final Assignment cConstAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cConstConstant1ParserRuleCall_1_2_0 = (RuleCall)cConstAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Assignment cParenthesesAssignment_1_3_0 = (Assignment)cGroup_1_3.eContents().get(0);
		private final RuleCall cParenthesesSKW_LEFTPARENTerminalRuleCall_1_3_0_0 = (RuleCall)cParenthesesAssignment_1_3_0.eContents().get(0);
		private final Assignment cExprAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_3_1_0 = (RuleCall)cExprAssignment_1_3_1.eContents().get(0);
		private final RuleCall cSKW_RIGHTPARENTerminalRuleCall_1_3_2 = (RuleCall)cGroup_1_3.eContents().get(2);
		
		//// expressions
		//PrimaryExpression Expression:
		//	{PrimaryExpression} (defined?=DEFINED? id=ID
		//	| defined?=DEFINED? SKW_LEFTPAREN id=ID SKW_RIGHTPAREN
		//	| const=Constant1
		//	//|	string+=STRING_LITERAL+ // reachable over Constant!
		//	| parentheses?=SKW_LEFTPAREN expr=Expression SKW_RIGHTPAREN)
		@Override public ParserRule getRule() { return rule; }
		
		//{PrimaryExpression} (defined?=DEFINED? id=ID | defined?=DEFINED? SKW_LEFTPAREN id=ID SKW_RIGHTPAREN | const=Constant1 //|	string+=STRING_LITERAL+ // reachable over Constant!
		//| parentheses?=SKW_LEFTPAREN expr=Expression SKW_RIGHTPAREN)
		public Group getGroup() { return cGroup; }
		
		//{PrimaryExpression}
		public Action getPrimaryExpressionAction_0() { return cPrimaryExpressionAction_0; }
		
		//(defined?=DEFINED? id=ID | defined?=DEFINED? SKW_LEFTPAREN id=ID SKW_RIGHTPAREN | const=Constant1 //|	string+=STRING_LITERAL+ // reachable over Constant!
		//| parentheses?=SKW_LEFTPAREN expr=Expression SKW_RIGHTPAREN)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//defined?=DEFINED? id=ID
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//defined?=DEFINED?
		public Assignment getDefinedAssignment_1_0_0() { return cDefinedAssignment_1_0_0; }
		
		//DEFINED
		public RuleCall getDefinedDEFINEDTerminalRuleCall_1_0_0_0() { return cDefinedDEFINEDTerminalRuleCall_1_0_0_0; }
		
		//id=ID
		public Assignment getIdAssignment_1_0_1() { return cIdAssignment_1_0_1; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0_1_0() { return cIdIDTerminalRuleCall_1_0_1_0; }
		
		//defined?=DEFINED? SKW_LEFTPAREN id=ID SKW_RIGHTPAREN
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//defined?=DEFINED?
		public Assignment getDefinedAssignment_1_1_0() { return cDefinedAssignment_1_1_0; }
		
		//DEFINED
		public RuleCall getDefinedDEFINEDTerminalRuleCall_1_1_0_0() { return cDefinedDEFINEDTerminalRuleCall_1_1_0_0; }
		
		//SKW_LEFTPAREN
		public RuleCall getSKW_LEFTPARENTerminalRuleCall_1_1_1() { return cSKW_LEFTPARENTerminalRuleCall_1_1_1; }
		
		//id=ID
		public Assignment getIdAssignment_1_1_2() { return cIdAssignment_1_1_2; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_1_2_0() { return cIdIDTerminalRuleCall_1_1_2_0; }
		
		//SKW_RIGHTPAREN
		public RuleCall getSKW_RIGHTPARENTerminalRuleCall_1_1_3() { return cSKW_RIGHTPARENTerminalRuleCall_1_1_3; }
		
		//const=Constant1
		public Assignment getConstAssignment_1_2() { return cConstAssignment_1_2; }
		
		//Constant1
		public RuleCall getConstConstant1ParserRuleCall_1_2_0() { return cConstConstant1ParserRuleCall_1_2_0; }
		
		//parentheses?=SKW_LEFTPAREN expr=Expression SKW_RIGHTPAREN
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//parentheses?=SKW_LEFTPAREN
		public Assignment getParenthesesAssignment_1_3_0() { return cParenthesesAssignment_1_3_0; }
		
		//SKW_LEFTPAREN
		public RuleCall getParenthesesSKW_LEFTPARENTerminalRuleCall_1_3_0_0() { return cParenthesesSKW_LEFTPARENTerminalRuleCall_1_3_0_0; }
		
		//expr=Expression
		public Assignment getExprAssignment_1_3_1() { return cExprAssignment_1_3_1; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_3_1_0() { return cExprExpressionParserRuleCall_1_3_1_0; }
		
		//SKW_RIGHTPAREN
		public RuleCall getSKW_RIGHTPARENTerminalRuleCall_1_3_2() { return cSKW_RIGHTPARENTerminalRuleCall_1_3_2; }
	}
	
	
	private final PreprocessElements pPreprocess;
	private final GroupOptElements pGroupOpt;
	private final GroupOpt2Elements pGroupOpt2;
	private final GroupOptTemp1Elements pGroupOptTemp1;
	private final GroupOptTemp2Elements pGroupOptTemp2;
	private final PreprocessorDirectivesElements pPreprocessorDirectives;
	private final IncludeDirectiveElements pIncludeDirective;
	private final DefineDirectiveElements pDefineDirective;
	private final DefineObjectMacroElements pDefineObjectMacro;
	private final DefineFunctionLikeMacroElements pDefineFunctionLikeMacro;
	private final IdentifierListElements pIdentifierList;
	private final ErrorDirectiveElements pErrorDirective;
	private final WarningDirectiveElements pWarningDirective;
	private final UnDefineDirectiveElements pUnDefineDirective;
	private final ConditionalDirectiveElements pConditionalDirective;
	private final IfConditionalElements pIfConditional;
	private final IfDefConditionalElements pIfDefConditional;
	private final IfNotDefConditionalElements pIfNotDefConditional;
	private final ElIfConditionalElements pElIfConditional;
	private final ElseConditionalElements pElseConditional;
	private final PragmaDirectiveElements pPragmaDirective;
	private final NullDirectiveElements pNullDirective;
	private final NewLineLineElements pNewLineLine;
	private final CodeElements pCode;
	private final MyCodeElements pMyCode;
	private final MyDefineLineFunctionElements pMyDefineLineFunction;
	private final MyDefineLineObjectElements pMyDefineLineObject;
	private final MyCodeLineElements pMyCodeLine;
	private final MyCodeLineExtendedElements pMyCodeLineExtended;
	private final MyCodeLineExtendedWSOnlyElements pMyCodeLineExtendedWSOnly;
	private final MyCodeLineExtendedNormalElements pMyCodeLineExtendedNormal;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final TerminalRule tHASH;
	private final TerminalRule tINCLUDE;
	private final TerminalRule tINCLUDE_NEXT;
	private final TerminalRule tDEFINE;
	private final TerminalRule tERROR;
	private final TerminalRule tWARNING;
	private final TerminalRule tUNDEF;
	private final TerminalRule tIF;
	private final TerminalRule tDEFINED;
	private final TerminalRule tIFDEF;
	private final TerminalRule tIFNOTDEF;
	private final TerminalRule tELIF;
	private final TerminalRule tELSE;
	private final TerminalRule tENDIF;
	private final TerminalRule tPRAGMA;
	private final TerminalRule tVA_ARGS;
	private final TerminalRule tNEWLINE;
	
	private final Grammar grammar;
	
	private final CommonGrammarAccess gaCommon;

	@Inject
	public PreprocessGrammarAccess(GrammarProvider grammarProvider,
			CommonGrammarAccess gaCommon) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaCommon = gaCommon;
		this.pPreprocess = new PreprocessElements();
		this.pGroupOpt = new GroupOptElements();
		this.pGroupOpt2 = new GroupOpt2Elements();
		this.pGroupOptTemp1 = new GroupOptTemp1Elements();
		this.pGroupOptTemp2 = new GroupOptTemp2Elements();
		this.pPreprocessorDirectives = new PreprocessorDirectivesElements();
		this.pIncludeDirective = new IncludeDirectiveElements();
		this.pDefineDirective = new DefineDirectiveElements();
		this.pDefineObjectMacro = new DefineObjectMacroElements();
		this.pDefineFunctionLikeMacro = new DefineFunctionLikeMacroElements();
		this.pIdentifierList = new IdentifierListElements();
		this.pErrorDirective = new ErrorDirectiveElements();
		this.pWarningDirective = new WarningDirectiveElements();
		this.pUnDefineDirective = new UnDefineDirectiveElements();
		this.pConditionalDirective = new ConditionalDirectiveElements();
		this.pIfConditional = new IfConditionalElements();
		this.pIfDefConditional = new IfDefConditionalElements();
		this.pIfNotDefConditional = new IfNotDefConditionalElements();
		this.pElIfConditional = new ElIfConditionalElements();
		this.pElseConditional = new ElseConditionalElements();
		this.pPragmaDirective = new PragmaDirectiveElements();
		this.pNullDirective = new NullDirectiveElements();
		this.pNewLineLine = new NewLineLineElements();
		this.pCode = new CodeElements();
		this.pMyCode = new MyCodeElements();
		this.pMyDefineLineFunction = new MyDefineLineFunctionElements();
		this.pMyDefineLineObject = new MyDefineLineObjectElements();
		this.pMyCodeLine = new MyCodeLineElements();
		this.pMyCodeLineExtended = new MyCodeLineExtendedElements();
		this.pMyCodeLineExtendedWSOnly = new MyCodeLineExtendedWSOnlyElements();
		this.pMyCodeLineExtendedNormal = new MyCodeLineExtendedNormalElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.tHASH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.HASH");
		this.tINCLUDE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.INCLUDE");
		this.tINCLUDE_NEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.INCLUDE_NEXT");
		this.tDEFINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.DEFINE");
		this.tERROR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.ERROR");
		this.tWARNING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.WARNING");
		this.tUNDEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.UNDEF");
		this.tIF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.IF");
		this.tDEFINED = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.DEFINED");
		this.tIFDEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.IFDEF");
		this.tIFNOTDEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.IFNOTDEF");
		this.tELIF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.ELIF");
		this.tELSE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.ELSE");
		this.tENDIF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.ENDIF");
		this.tPRAGMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.PRAGMA");
		this.tVA_ARGS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.VA_ARGS");
		this.tNEWLINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.NEWLINE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("at.jku.weiner.c.preprocess.Preprocess".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public CommonGrammarAccess getCommonGrammarAccess() {
		return gaCommon;
	}

	
	////generate preprocess "http://www.jku.at/weiner/c/preprocess/Preprocess"
	////Model returns common::Model:
	////	{common::Model}
	////	units+=TranslationUnit
	////;
	////
	////TranslationUnit returns common::TranslationUnit:
	////	{common::TranslationUnit}
	////	preprocess=Preprocess
	////;
	//Preprocess common::Preprocess:
	//	{Preprocess} group=GroupOpt2
	public PreprocessElements getPreprocessAccess() {
		return pPreprocess;
	}
	
	public ParserRule getPreprocessRule() {
		return getPreprocessAccess().getRule();
	}
	
	//GroupOpt:
	//	{GroupOpt} (lines+=GroupOptTemp1
	//	NEWLINE)*;
	public GroupOptElements getGroupOptAccess() {
		return pGroupOpt;
	}
	
	public ParserRule getGroupOptRule() {
		return getGroupOptAccess().getRule();
	}
	
	//GroupOpt2 GroupOpt:
	//	{GroupOpt2} (lines+=GroupOptTemp1
	//	NEWLINE)*
	//	lines+=GroupOptTemp2?
	public GroupOpt2Elements getGroupOpt2Access() {
		return pGroupOpt2;
	}
	
	public ParserRule getGroupOpt2Rule() {
		return getGroupOpt2Access().getRule();
	}
	
	//GroupOptTemp1 SourceCodeLine:
	//	PreprocessorDirectives
	//	| NewLineLine
	//	| Code
	public GroupOptTemp1Elements getGroupOptTemp1Access() {
		return pGroupOptTemp1;
	}
	
	public ParserRule getGroupOptTemp1Rule() {
		return getGroupOptTemp1Access().getRule();
	}
	
	//GroupOptTemp2 SourceCodeLine:
	//	PreprocessorDirectives
	//	| Code
	public GroupOptTemp2Elements getGroupOptTemp2Access() {
		return pGroupOptTemp2;
	}
	
	public ParserRule getGroupOptTemp2Rule() {
		return getGroupOptTemp2Access().getRule();
	}
	
	//PreprocessorDirectives SourceCodeLine:
	//	{PreprocessorDirectives} WHITESPACE* HASH WHITESPACE* (directive=IncludeDirective
	//	| directive=DefineDirective
	//	| directive=ErrorDirective
	//	| directive=WarningDirective
	//	| directive=UnDefineDirective
	//	| directive=ConditionalDirective
	//	| directive=PragmaDirective
	//	| directive=NullDirective)
	public PreprocessorDirectivesElements getPreprocessorDirectivesAccess() {
		return pPreprocessorDirectives;
	}
	
	public ParserRule getPreprocessorDirectivesRule() {
		return getPreprocessorDirectivesAccess().getRule();
	}
	
	//IncludeDirective:
	//	{IncludeDirective} (INCLUDE | next?=INCLUDE_NEXT) WHITESPACE+ string=MyCodeLine;
	public IncludeDirectiveElements getIncludeDirectiveAccess() {
		return pIncludeDirective;
	}
	
	public ParserRule getIncludeDirectiveRule() {
		return getIncludeDirectiveAccess().getRule();
	}
	
	//DefineDirective:
	//	DefineObjectMacro
	//	| DefineFunctionLikeMacro;
	public DefineDirectiveElements getDefineDirectiveAccess() {
		return pDefineDirective;
	}
	
	public ParserRule getDefineDirectiveRule() {
		return getDefineDirectiveAccess().getRule();
	}
	
	//DefineObjectMacro DefineDirective:
	//	{DefineObjectMacro} DEFINE WHITESPACE+ id=MyCode (WHITESPACE+ string=MyDefineLineObject)?
	//	WHITESPACE*
	public DefineObjectMacroElements getDefineObjectMacroAccess() {
		return pDefineObjectMacro;
	}
	
	public ParserRule getDefineObjectMacroRule() {
		return getDefineObjectMacroAccess().getRule();
	}
	
	//DefineFunctionLikeMacro DefineDirective:
	//	{DefineFunctionLikeMacro} DEFINE WHITESPACE+ id=MyCode
	//	SKW_LEFTPAREN WHITESPACE*
	//	list=IdentifierList?
	//	SKW_RIGHTPAREN
	//	string=MyDefineLineFunction
	//	//(replacement+=ReplaceLine)*
	//?
	public DefineFunctionLikeMacroElements getDefineFunctionLikeMacroAccess() {
		return pDefineFunctionLikeMacro;
	}
	
	public ParserRule getDefineFunctionLikeMacroRule() {
		return getDefineFunctionLikeMacroAccess().getRule();
	}
	
	//IdentifierList:
	//	{IdentifierList} (id+=ID (WHITESPACE* SKW_COMMA WHITESPACE* id+=ID)*
	//	WHITESPACE* (SKW_COMMA WHITESPACE* (variadic?=Ellipsis
	//	| varID=ID variadic?=Ellipsis))?
	//	| varID=ID? variadic?=Ellipsis);
	public IdentifierListElements getIdentifierListAccess() {
		return pIdentifierList;
	}
	
	public ParserRule getIdentifierListRule() {
		return getIdentifierListAccess().getRule();
	}
	
	//ErrorDirective:
	//	{ErrorDirective} ERROR WHITESPACE* msg=MyCodeLine?;
	public ErrorDirectiveElements getErrorDirectiveAccess() {
		return pErrorDirective;
	}
	
	public ParserRule getErrorDirectiveRule() {
		return getErrorDirectiveAccess().getRule();
	}
	
	//WarningDirective:
	//	{WarningDirective} WARNING WHITESPACE* msg=MyCodeLine?;
	public WarningDirectiveElements getWarningDirectiveAccess() {
		return pWarningDirective;
	}
	
	public ParserRule getWarningDirectiveRule() {
		return getWarningDirectiveAccess().getRule();
	}
	
	//UnDefineDirective:
	//	{UnDefineDirective} UNDEF WHITESPACE+ id=ID WHITESPACE*;
	public UnDefineDirectiveElements getUnDefineDirectiveAccess() {
		return pUnDefineDirective;
	}
	
	public ParserRule getUnDefineDirectiveRule() {
		return getUnDefineDirectiveAccess().getRule();
	}
	
	//ConditionalDirective:
	//	{ConditionalDirective} conditional=(IfConditional
	//	| IfDefConditional
	//	| IfNotDefConditional) elifs+=ElIfConditional*
	//	else=ElseConditional?
	//	WHITESPACE* HASH WHITESPACE* ENDIF WHITESPACE*;
	public ConditionalDirectiveElements getConditionalDirectiveAccess() {
		return pConditionalDirective;
	}
	
	public ParserRule getConditionalDirectiveRule() {
		return getConditionalDirectiveAccess().getRule();
	}
	
	//IfConditional:
	//	{IfConditional} IF WHITESPACE+ expression=Common::Expression WHITESPACE* NEWLINE
	//	group=GroupOpt;
	public IfConditionalElements getIfConditionalAccess() {
		return pIfConditional;
	}
	
	public ParserRule getIfConditionalRule() {
		return getIfConditionalAccess().getRule();
	}
	
	//IfDefConditional:
	//	{IfDefConditional} IFDEF WHITESPACE+ id=ID WHITESPACE* NEWLINE
	//	group=GroupOpt;
	public IfDefConditionalElements getIfDefConditionalAccess() {
		return pIfDefConditional;
	}
	
	public ParserRule getIfDefConditionalRule() {
		return getIfDefConditionalAccess().getRule();
	}
	
	//IfNotDefConditional:
	//	{IfNotDefConditional} IFNOTDEF WHITESPACE+ id=ID WHITESPACE* NEWLINE
	//	group=GroupOpt;
	public IfNotDefConditionalElements getIfNotDefConditionalAccess() {
		return pIfNotDefConditional;
	}
	
	public ParserRule getIfNotDefConditionalRule() {
		return getIfNotDefConditionalAccess().getRule();
	}
	
	//ElIfConditional:
	//	{ElIfConditional} (WHITESPACE* HASH WHITESPACE* ELIF) WHITESPACE+ expression=Common::Expression WHITESPACE* NEWLINE
	//	group=GroupOpt;
	public ElIfConditionalElements getElIfConditionalAccess() {
		return pElIfConditional;
	}
	
	public ParserRule getElIfConditionalRule() {
		return getElIfConditionalAccess().getRule();
	}
	
	//ElseConditional:
	//	{ElseConditional} WHITESPACE* HASH WHITESPACE* ELSE WHITESPACE* NEWLINE
	//	group=GroupOpt;
	public ElseConditionalElements getElseConditionalAccess() {
		return pElseConditional;
	}
	
	public ParserRule getElseConditionalRule() {
		return getElseConditionalAccess().getRule();
	}
	
	//PragmaDirective:
	//	{PragmaDirective} PRAGMA
	//	WHITESPACE* pragma=MyCodeLine?;
	public PragmaDirectiveElements getPragmaDirectiveAccess() {
		return pPragmaDirective;
	}
	
	public ParserRule getPragmaDirectiveRule() {
		return getPragmaDirectiveAccess().getRule();
	}
	
	//NullDirective:
	//	{NullDirective};
	public NullDirectiveElements getNullDirectiveAccess() {
		return pNullDirective;
	}
	
	public ParserRule getNullDirectiveRule() {
		return getNullDirectiveAccess().getRule();
	}
	
	//NewLineLine SourceCodeLine:
	//	{NewLineLine}
	public NewLineLineElements getNewLineLineAccess() {
		return pNewLineLine;
	}
	
	public ParserRule getNewLineLineRule() {
		return getNewLineLineAccess().getRule();
	}
	
	//Code SourceCodeLine:
	//	{Code} code=MyCodeLineExtended
	public CodeElements getCodeAccess() {
		return pCode;
	}
	
	public ParserRule getCodeRule() {
		return getCodeAccess().getRule();
	}
	
	//MyCode ecore::EString:
	//	ID | SPECIAL | INCLUDE | DEFINE | ERROR | PRAGMA
	//	| IFDEF | ENDIF | IFNOTDEF | IF | DEFINED
	//	| ELIF | ELSE | WARNING | UNDEF
	//	| SpecialKeywords | Constant1
	public MyCodeElements getMyCodeAccess() {
		return pMyCode;
	}
	
	public ParserRule getMyCodeRule() {
		return getMyCodeAccess().getRule();
	}
	
	//MyDefineLineFunction ecore::EString:
	//	MyDefineLineObject | HASH | VA_ARGS+
	public MyDefineLineFunctionElements getMyDefineLineFunctionAccess() {
		return pMyDefineLineFunction;
	}
	
	public ParserRule getMyDefineLineFunctionRule() {
		return getMyDefineLineFunctionAccess().getRule();
	}
	
	//MyDefineLineObject ecore::EString:
	//	MyCode | WHITESPACE+
	public MyDefineLineObjectElements getMyDefineLineObjectAccess() {
		return pMyDefineLineObject;
	}
	
	public ParserRule getMyDefineLineObjectRule() {
		return getMyDefineLineObjectAccess().getRule();
	}
	
	//MyCodeLine ecore::EString:
	//	MyCode | WHITESPACE+
	public MyCodeLineElements getMyCodeLineAccess() {
		return pMyCodeLine;
	}
	
	public ParserRule getMyCodeLineRule() {
		return getMyCodeLineAccess().getRule();
	}
	
	//MyCodeLineExtended ecore::EString:
	//	MyCodeLineExtendedWSOnly
	//	| MyCodeLineExtendedNormal
	public MyCodeLineExtendedElements getMyCodeLineExtendedAccess() {
		return pMyCodeLineExtended;
	}
	
	public ParserRule getMyCodeLineExtendedRule() {
		return getMyCodeLineExtendedAccess().getRule();
	}
	
	//MyCodeLineExtendedWSOnly ecore::EString:
	//	WHITESPACE+
	public MyCodeLineExtendedWSOnlyElements getMyCodeLineExtendedWSOnlyAccess() {
		return pMyCodeLineExtendedWSOnly;
	}
	
	public ParserRule getMyCodeLineExtendedWSOnlyRule() {
		return getMyCodeLineExtendedWSOnlyAccess().getRule();
	}
	
	//MyCodeLineExtendedNormal ecore::EString:
	//	WHITESPACE* MyCode+ (MyCodeLine | HASH)*
	public MyCodeLineExtendedNormalElements getMyCodeLineExtendedNormalAccess() {
		return pMyCodeLineExtendedNormal;
	}
	
	public ParserRule getMyCodeLineExtendedNormalRule() {
		return getMyCodeLineExtendedNormalAccess().getRule();
	}
	
	//// expressions
	//PrimaryExpression Expression:
	//	{PrimaryExpression} (defined?=DEFINED? id=ID
	//	| defined?=DEFINED? SKW_LEFTPAREN id=ID SKW_RIGHTPAREN
	//	| const=Constant1
	//	//|	string+=STRING_LITERAL+ // reachable over Constant!
	//	| parentheses?=SKW_LEFTPAREN expr=Expression SKW_RIGHTPAREN)
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//terminal HASH returns ecore::EString:
	//	'#';
	public TerminalRule getHASHRule() {
		return tHASH;
	}
	
	//terminal INCLUDE returns ecore::EString:
	//	'include';
	public TerminalRule getINCLUDERule() {
		return tINCLUDE;
	}
	
	//terminal INCLUDE_NEXT returns ecore::EString:
	//	INCLUDE SKW_UNDERSCORE 'next';
	public TerminalRule getINCLUDE_NEXTRule() {
		return tINCLUDE_NEXT;
	}
	
	//terminal DEFINE returns ecore::EString:
	//	'define';
	public TerminalRule getDEFINERule() {
		return tDEFINE;
	}
	
	//terminal ERROR returns ecore::EString:
	//	'error';
	public TerminalRule getERRORRule() {
		return tERROR;
	}
	
	//terminal WARNING returns ecore::EString:
	//	'warning';
	public TerminalRule getWARNINGRule() {
		return tWARNING;
	}
	
	//terminal UNDEF returns ecore::EString:
	//	'undef';
	public TerminalRule getUNDEFRule() {
		return tUNDEF;
	}
	
	//terminal IF returns ecore::EString:
	//	'if';
	public TerminalRule getIFRule() {
		return tIF;
	}
	
	//terminal DEFINED returns ecore::EString:
	//	'defined';
	public TerminalRule getDEFINEDRule() {
		return tDEFINED;
	}
	
	//terminal IFDEF returns ecore::EString:
	//	'ifdef';
	public TerminalRule getIFDEFRule() {
		return tIFDEF;
	}
	
	//terminal IFNOTDEF returns ecore::EString:
	//	'ifndef';
	public TerminalRule getIFNOTDEFRule() {
		return tIFNOTDEF;
	}
	
	//terminal ELIF returns ecore::EString:
	//	'elif';
	public TerminalRule getELIFRule() {
		return tELIF;
	}
	
	//terminal ELSE returns ecore::EString:
	//	'else';
	public TerminalRule getELSERule() {
		return tELSE;
	}
	
	//terminal ENDIF returns ecore::EString:
	//	'endif';
	public TerminalRule getENDIFRule() {
		return tENDIF;
	}
	
	//terminal PRAGMA returns ecore::EString:
	//	'pragma';
	public TerminalRule getPRAGMARule() {
		return tPRAGMA;
	}
	
	//terminal VA_ARGS returns ecore::EString:
	//	SKW_UNDERSCORE SKW_UNDERSCORE 'VA_ARGS' SKW_UNDERSCORE SKW_UNDERSCORE;
	public TerminalRule getVA_ARGSRule() {
		return tVA_ARGS;
	}
	
	//terminal NEWLINE returns ecore::EString:
	//	Common::NEWLINE;
	public TerminalRule getNEWLINERule() {
		return tNEWLINE;
	}
	
	////generate common "http://www.jku.at/weiner/c/common/Common"
	/// *** expressions *** / Expression hidden(WHITESPACE, BLOCK_COMMENT, LINE_COMMENT, LINEBREAK):
	//	ConditionalExpression;
	public CommonGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaCommon.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//ConstantExpression Expression hidden(WHITESPACE, BLOCK_COMMENT, LINE_COMMENT, LINEBREAK):
	//	ConditionalExpression
	public CommonGrammarAccess.ConstantExpressionElements getConstantExpressionAccess() {
		return gaCommon.getConstantExpressionAccess();
	}
	
	public ParserRule getConstantExpressionRule() {
		return getConstantExpressionAccess().getRule();
	}
	
	//ConditionalExpression Expression:
	//	LogicalOrExpression ({ConditionalExpression.expr=current} SKW_QUESTION qExpr=Expression SKW_COLON
	//	cExpr=ConditionalExpression)?
	public CommonGrammarAccess.ConditionalExpressionElements getConditionalExpressionAccess() {
		return gaCommon.getConditionalExpressionAccess();
	}
	
	public ParserRule getConditionalExpressionRule() {
		return getConditionalExpressionAccess().getRule();
	}
	
	//LogicalOrExpression Expression:
	//	LogicalAndExpression ({LogicalOrExpression.left=current} SKW_OROR right=LogicalAndExpression)*
	public CommonGrammarAccess.LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return gaCommon.getLogicalOrExpressionAccess();
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}
	
	//LogicalAndExpression Expression:
	//	InclusiveOrExpression ({LogicalAndExpression.left=current} SKW_ANDAND right=InclusiveOrExpression)*
	public CommonGrammarAccess.LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return gaCommon.getLogicalAndExpressionAccess();
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}
	
	//InclusiveOrExpression Expression:
	//	ExclusiveOrExpression ({InclusiveOrExpression.left=current} SKW_OR right=ExclusiveOrExpression)*
	public CommonGrammarAccess.InclusiveOrExpressionElements getInclusiveOrExpressionAccess() {
		return gaCommon.getInclusiveOrExpressionAccess();
	}
	
	public ParserRule getInclusiveOrExpressionRule() {
		return getInclusiveOrExpressionAccess().getRule();
	}
	
	//ExclusiveOrExpression Expression:
	//	AndExpression ({ExclusiveOrExpression.left=current} SKW_CARET right=AndExpression)*
	public CommonGrammarAccess.ExclusiveOrExpressionElements getExclusiveOrExpressionAccess() {
		return gaCommon.getExclusiveOrExpressionAccess();
	}
	
	public ParserRule getExclusiveOrExpressionRule() {
		return getExclusiveOrExpressionAccess().getRule();
	}
	
	//AndExpression Expression:
	//	EqualityExpression ({AndExpression.left=current} SKW_AND right=EqualityExpression)*
	public CommonGrammarAccess.AndExpressionElements getAndExpressionAccess() {
		return gaCommon.getAndExpressionAccess();
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	//EqualityExpression Expression:
	//	RelationalExpression ({EqualityExpression.left=current} (op=SKW_EQUAL
	//	| op=SKW_NOTEQUAL) right=RelationalExpression)*
	public CommonGrammarAccess.EqualityExpressionElements getEqualityExpressionAccess() {
		return gaCommon.getEqualityExpressionAccess();
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}
	
	//RelationalExpression Expression:
	//	ShiftExpression ({RelationalExpression.left=current} (op=SKW_LESS
	//	| op=SKW_GREATER
	//	| op=SKW_LESSEQUAL
	//	| op=SKW_GREATEREQUAL) right=ShiftExpression)*
	public CommonGrammarAccess.RelationalExpressionElements getRelationalExpressionAccess() {
		return gaCommon.getRelationalExpressionAccess();
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}
	
	//ShiftExpression Expression:
	//	AdditiveExpression ({ShiftExpression.left=current} (op=SKW_LEFTSHIFT
	//	| op=SKW_RIGHTSHIFT) right=AdditiveExpression)*
	public CommonGrammarAccess.ShiftExpressionElements getShiftExpressionAccess() {
		return gaCommon.getShiftExpressionAccess();
	}
	
	public ParserRule getShiftExpressionRule() {
		return getShiftExpressionAccess().getRule();
	}
	
	//AdditiveExpression Expression:
	//	MultiplicativeExpression ({AdditiveExpression.left=current} (op=SKW_PLUS
	//	| op=SKW_MINUS) right=MultiplicativeExpression)*
	public CommonGrammarAccess.AdditiveExpressionElements getAdditiveExpressionAccess() {
		return gaCommon.getAdditiveExpressionAccess();
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}
	
	//MultiplicativeExpression Expression:
	//	CastExpression ({MultiplicativeExpression.left=current} (op=SKW_STAR
	//	| op=SKW_DIV
	//	| op=SKW_MOD) right=CastExpression)*
	public CommonGrammarAccess.MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return gaCommon.getMultiplicativeExpressionAccess();
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}
	
	//CastExpression Expression:
	//	UnaryExpression
	public CommonGrammarAccess.CastExpressionElements getCastExpressionAccess() {
		return gaCommon.getCastExpressionAccess();
	}
	
	public ParserRule getCastExpressionRule() {
		return getCastExpressionAccess().getRule();
	}
	
	//UnaryExpression Expression:
	//	PostfixExpression
	//	| {UnaryExpression} op=UnaryOperator expr=CastExpression
	public CommonGrammarAccess.UnaryExpressionElements getUnaryExpressionAccess() {
		return gaCommon.getUnaryExpressionAccess();
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}
	
	//UnaryOperator ecore::EString:
	//	SKW_AND
	//	| SKW_STAR
	//	| SKW_PLUS
	//	| SKW_MINUS
	//	| SKW_TILDE
	//	| SKW_NOT
	public CommonGrammarAccess.UnaryOperatorElements getUnaryOperatorAccess() {
		return gaCommon.getUnaryOperatorAccess();
	}
	
	public ParserRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}
	
	//PostfixExpression Expression:
	//	super::PrimaryExpression ({PostfixExpression.expr=current} suffix=PostfixExpressionSuffixArgument)*
	public CommonGrammarAccess.PostfixExpressionElements getPostfixExpressionAccess() {
		return gaCommon.getPostfixExpressionAccess();
	}
	
	public ParserRule getPostfixExpressionRule() {
		return getPostfixExpressionAccess().getRule();
	}
	
	//PostfixExpressionSuffixArgument PostfixExpressionSuffix:
	//	{PostfixExpressionSuffixArgument} SKW_LEFTPAREN argumentExpressionList=ArgumentExpressionList? SKW_RIGHTPAREN
	public CommonGrammarAccess.PostfixExpressionSuffixArgumentElements getPostfixExpressionSuffixArgumentAccess() {
		return gaCommon.getPostfixExpressionSuffixArgumentAccess();
	}
	
	public ParserRule getPostfixExpressionSuffixArgumentRule() {
		return getPostfixExpressionSuffixArgumentAccess().getRule();
	}
	
	//ArgumentExpressionList:
	//	expr+=ConditionalExpression (SKW_COMMA expr+=ConditionalExpression)*;
	public CommonGrammarAccess.ArgumentExpressionListElements getArgumentExpressionListAccess() {
		return gaCommon.getArgumentExpressionListAccess();
	}
	
	public ParserRule getArgumentExpressionListRule() {
		return getArgumentExpressionListAccess().getRule();
	}
	
	//Constant1 ecore::EString:
	//	HEX_LITERAL
	//	| OCTAL_LITERAL
	//	| DECIMAL_LITERAL
	//	| CHAR_LITERAL
	//	| STRING_LITERAL
	//	| FLOAT_LITERAL
	//	| BIN_LITERAL
	public CommonGrammarAccess.Constant1Elements getConstant1Access() {
		return gaCommon.getConstant1Access();
	}
	
	public ParserRule getConstant1Rule() {
		return getConstant1Access().getRule();
	}
	
	//Constant2:
	//	{Constant2} (hex=HEX_LITERAL
	//	| oct=OCTAL_LITERAL
	//	| dec=DECIMAL_LITERAL
	//	| ch=CHAR_LITERAL
	//	//|	str=STRING_LITERAL
	//	| float=FLOAT_LITERAL
	//	| bin=BIN_LITERAL);
	public CommonGrammarAccess.Constant2Elements getConstant2Access() {
		return gaCommon.getConstant2Access();
	}
	
	public ParserRule getConstant2Rule() {
		return getConstant2Access().getRule();
	}
	
	//// keywords
	//// special keywords
	//SpecialKeywords ecore::EString:
	//	SKW_AND
	//	| SKW_ANDAND
	//	| SKW_ASSIGN
	//	| SKW_BACKSLASH
	//	| SKW_CARET
	//	| SKW_COMMA
	//	| SKW_COLON
	//	| SKW_DIV
	//	| SKW_DOT
	//	| SKW_DOUBLEQUOTE
	//	| SKW_EQUAL
	//	| SKW_GREATER
	//	| SKW_GREATEREQUAL
	//	| SKW_LEFTBRACE
	//	| SKW_LEFTBRACKET
	//	| SKW_LEFTPAREN
	//	| SKW_LEFTSHIFT
	//	| SKW_LESS
	//	| SKW_LESSEQUAL
	//	| SKW_MINUS
	//	| SKW_MINUSMINUS
	//	| SKW_MOD
	//	| SKW_NOT
	//	| SKW_NOTEQUAL
	//	| SKW_OR
	//	| SKW_OROR
	//	| SKW_PLUS
	//	| SKW_PLUSPLUS
	//	| SKW_QUESTION
	//	| SKW_RIGHTBRACE
	//	| SKW_RIGHTBRACKET
	//	| SKW_RIGHTPAREN
	//	| SKW_RIGHTSHIFT
	//	| SKW_SEMI
	//	| SKW_SINGLEQUOTE
	//	| SKW_STAR
	//	| SKW_TILDE
	public CommonGrammarAccess.SpecialKeywordsElements getSpecialKeywordsAccess() {
		return gaCommon.getSpecialKeywordsAccess();
	}
	
	public ParserRule getSpecialKeywordsRule() {
		return getSpecialKeywordsAccess().getRule();
	}
	
	//Ellipsis ecore::EString:
	//	SKW_DOT SKW_DOT SKW_DOT
	public CommonGrammarAccess.EllipsisElements getEllipsisAccess() {
		return gaCommon.getEllipsisAccess();
	}
	
	public ParserRule getEllipsisRule() {
		return getEllipsisAccess().getRule();
	}
	
	//terminal SKW_AND returns ecore::EString:
	//	'&';
	public TerminalRule getSKW_ANDRule() {
		return gaCommon.getSKW_ANDRule();
	}
	
	//terminal SKW_ANDAND returns ecore::EString:
	//	SKW_AND SKW_AND;
	public TerminalRule getSKW_ANDANDRule() {
		return gaCommon.getSKW_ANDANDRule();
	}
	
	//terminal SKW_ASSIGN returns ecore::EString:
	//	'=';
	public TerminalRule getSKW_ASSIGNRule() {
		return gaCommon.getSKW_ASSIGNRule();
	}
	
	//terminal SKW_BACKSLASH returns ecore::EString:
	//	'\\';
	public TerminalRule getSKW_BACKSLASHRule() {
		return gaCommon.getSKW_BACKSLASHRule();
	}
	
	//terminal SKW_CARET returns ecore::EString:
	//	'^';
	public TerminalRule getSKW_CARETRule() {
		return gaCommon.getSKW_CARETRule();
	}
	
	//terminal SKW_COMMA returns ecore::EString:
	//	',';
	public TerminalRule getSKW_COMMARule() {
		return gaCommon.getSKW_COMMARule();
	}
	
	//terminal SKW_COLON returns ecore::EString:
	//	':';
	public TerminalRule getSKW_COLONRule() {
		return gaCommon.getSKW_COLONRule();
	}
	
	//terminal SKW_DIV returns ecore::EString:
	//	'/';
	public TerminalRule getSKW_DIVRule() {
		return gaCommon.getSKW_DIVRule();
	}
	
	//java.lang.RuntimeException: Could not serialize EObject via backtracking.
	//Constraint: null (fragment?='fragment' name=ValidID | name=ValidID type=TypeRef?) (preAntlrAction=ActionCall isSemanticPredicate?='?'?)? alternatives=TerminalAlternatives postAntlrAction=ActionCall? null
	//Values: name(1), type(1), alternatives(1), fragment(1), isSemanticPredicate(0-1)
	//Semantic Object: Grammar'at.jku.weiner.c.common.Common'.rules[32]->TerminalRule'SKW_DOLLAR'
	//URI: file:/home/adalgrim/weiner/Private/xtext-predicates/workspace/at.jku.weiner.c.common/bin/at/jku/weiner/c/common/Common.xtext
	//Context: AbstractRule
	public TerminalRule getSKW_DOLLARRule() {
		return gaCommon.getSKW_DOLLARRule();
	}
	
	//terminal SKW_DOT returns ecore::EString:
	//	'.';
	public TerminalRule getSKW_DOTRule() {
		return gaCommon.getSKW_DOTRule();
	}
	
	//terminal SKW_DOUBLEQUOTE returns ecore::EString:
	//	'"';
	public TerminalRule getSKW_DOUBLEQUOTERule() {
		return gaCommon.getSKW_DOUBLEQUOTERule();
	}
	
	//terminal SKW_EQUAL returns ecore::EString:
	//	SKW_ASSIGN SKW_ASSIGN;
	public TerminalRule getSKW_EQUALRule() {
		return gaCommon.getSKW_EQUALRule();
	}
	
	//terminal SKW_GREATER returns ecore::EString:
	//	'>';
	public TerminalRule getSKW_GREATERRule() {
		return gaCommon.getSKW_GREATERRule();
	}
	
	//terminal SKW_GREATEREQUAL returns ecore::EString:
	//	SKW_GREATER SKW_ASSIGN;
	public TerminalRule getSKW_GREATEREQUALRule() {
		return gaCommon.getSKW_GREATEREQUALRule();
	}
	
	//terminal SKW_LEFTBRACE returns ecore::EString:
	//	'{';
	public TerminalRule getSKW_LEFTBRACERule() {
		return gaCommon.getSKW_LEFTBRACERule();
	}
	
	//terminal SKW_LEFTBRACKET returns ecore::EString:
	//	'[';
	public TerminalRule getSKW_LEFTBRACKETRule() {
		return gaCommon.getSKW_LEFTBRACKETRule();
	}
	
	//terminal SKW_LEFTPAREN returns ecore::EString:
	//	'(';
	public TerminalRule getSKW_LEFTPARENRule() {
		return gaCommon.getSKW_LEFTPARENRule();
	}
	
	//terminal SKW_LEFTSHIFT returns ecore::EString:
	//	SKW_LESS SKW_LESS;
	public TerminalRule getSKW_LEFTSHIFTRule() {
		return gaCommon.getSKW_LEFTSHIFTRule();
	}
	
	//terminal SKW_LESS returns ecore::EString:
	//	'<';
	public TerminalRule getSKW_LESSRule() {
		return gaCommon.getSKW_LESSRule();
	}
	
	//terminal SKW_LESSEQUAL returns ecore::EString:
	//	SKW_LESS SKW_ASSIGN;
	public TerminalRule getSKW_LESSEQUALRule() {
		return gaCommon.getSKW_LESSEQUALRule();
	}
	
	//terminal SKW_MINUS returns ecore::EString:
	//	'-';
	public TerminalRule getSKW_MINUSRule() {
		return gaCommon.getSKW_MINUSRule();
	}
	
	//terminal SKW_MINUSMINUS returns ecore::EString:
	//	SKW_MINUS SKW_MINUS;
	public TerminalRule getSKW_MINUSMINUSRule() {
		return gaCommon.getSKW_MINUSMINUSRule();
	}
	
	//terminal SKW_MOD returns ecore::EString:
	//	'%';
	public TerminalRule getSKW_MODRule() {
		return gaCommon.getSKW_MODRule();
	}
	
	//terminal SKW_NOT returns ecore::EString:
	//	'!';
	public TerminalRule getSKW_NOTRule() {
		return gaCommon.getSKW_NOTRule();
	}
	
	//terminal SKW_NOTEQUAL returns ecore::EString:
	//	SKW_NOT SKW_ASSIGN;
	public TerminalRule getSKW_NOTEQUALRule() {
		return gaCommon.getSKW_NOTEQUALRule();
	}
	
	//terminal SKW_OR returns ecore::EString:
	//	'|';
	public TerminalRule getSKW_ORRule() {
		return gaCommon.getSKW_ORRule();
	}
	
	//terminal SKW_OROR returns ecore::EString:
	//	SKW_OR SKW_OR;
	public TerminalRule getSKW_ORORRule() {
		return gaCommon.getSKW_ORORRule();
	}
	
	//terminal SKW_PLUS returns ecore::EString:
	//	'+';
	public TerminalRule getSKW_PLUSRule() {
		return gaCommon.getSKW_PLUSRule();
	}
	
	//terminal SKW_PLUSPLUS returns ecore::EString:
	//	SKW_PLUS SKW_PLUS;
	public TerminalRule getSKW_PLUSPLUSRule() {
		return gaCommon.getSKW_PLUSPLUSRule();
	}
	
	//terminal SKW_QUESTION returns ecore::EString:
	//	'?';
	public TerminalRule getSKW_QUESTIONRule() {
		return gaCommon.getSKW_QUESTIONRule();
	}
	
	//terminal SKW_RIGHTBRACE returns ecore::EString:
	//	'}';
	public TerminalRule getSKW_RIGHTBRACERule() {
		return gaCommon.getSKW_RIGHTBRACERule();
	}
	
	//terminal SKW_RIGHTBRACKET returns ecore::EString:
	//	']';
	public TerminalRule getSKW_RIGHTBRACKETRule() {
		return gaCommon.getSKW_RIGHTBRACKETRule();
	}
	
	//terminal SKW_RIGHTPAREN returns ecore::EString:
	//	')';
	public TerminalRule getSKW_RIGHTPARENRule() {
		return gaCommon.getSKW_RIGHTPARENRule();
	}
	
	//terminal SKW_RIGHTSHIFT returns ecore::EString:
	//	SKW_GREATER SKW_GREATER;
	public TerminalRule getSKW_RIGHTSHIFTRule() {
		return gaCommon.getSKW_RIGHTSHIFTRule();
	}
	
	//terminal SKW_SEMI returns ecore::EString:
	//	';';
	public TerminalRule getSKW_SEMIRule() {
		return gaCommon.getSKW_SEMIRule();
	}
	
	//terminal SKW_SINGLEQUOTE returns ecore::EString:
	//	'\'';
	public TerminalRule getSKW_SINGLEQUOTERule() {
		return gaCommon.getSKW_SINGLEQUOTERule();
	}
	
	//terminal SKW_STAR returns ecore::EString:
	//	'*';
	public TerminalRule getSKW_STARRule() {
		return gaCommon.getSKW_STARRule();
	}
	
	//terminal SKW_TILDE returns ecore::EString:
	//	'~';
	public TerminalRule getSKW_TILDERule() {
		return gaCommon.getSKW_TILDERule();
	}
	
	//java.lang.RuntimeException: Could not serialize EObject via backtracking.
	//Constraint: null (fragment?='fragment' name=ValidID | name=ValidID type=TypeRef?) (preAntlrAction=ActionCall isSemanticPredicate?='?'?)? alternatives=TerminalAlternatives postAntlrAction=ActionCall? null
	//Values: name(1), type(1), alternatives(1), fragment(1), isSemanticPredicate(0-1)
	//Semantic Object: Grammar'at.jku.weiner.c.common.Common'.rules[62]->TerminalRule'SKW_UNDERSCORE'
	//URI: file:/home/adalgrim/weiner/Private/xtext-predicates/workspace/at.jku.weiner.c.common/bin/at/jku/weiner/c/common/Common.xtext
	//Context: AbstractRule
	public TerminalRule getSKW_UNDERSCORERule() {
		return gaCommon.getSKW_UNDERSCORERule();
	}
	
	//terminal ID returns ecore::EString:
	//	IDENTIFIER;
	public TerminalRule getIDRule() {
		return gaCommon.getIDRule();
	}
	
	//java.lang.RuntimeException: Could not serialize EObject via backtracking.
	//Constraint: null (fragment?='fragment' name=ValidID | name=ValidID type=TypeRef?) (preAntlrAction=ActionCall isSemanticPredicate?='?'?)? alternatives=TerminalAlternatives postAntlrAction=ActionCall? null
	//Values: name(1), type(1), alternatives(1), fragment(1), isSemanticPredicate(0-1)
	//Semantic Object: Grammar'at.jku.weiner.c.common.Common'.rules[64]->TerminalRule'IDENTIFIER'
	//URI: file:/home/adalgrim/weiner/Private/xtext-predicates/workspace/at.jku.weiner.c.common/bin/at/jku/weiner/c/common/Common.xtext
	//Context: AbstractRule
	public TerminalRule getIDENTIFIERRule() {
		return gaCommon.getIDENTIFIERRule();
	}
	
	//java.lang.RuntimeException: Could not serialize EObject via backtracking.
	//Constraint: null (fragment?='fragment' name=ValidID | name=ValidID type=TypeRef?) (preAntlrAction=ActionCall isSemanticPredicate?='?'?)? alternatives=TerminalAlternatives postAntlrAction=ActionCall? null
	//Values: name(1), type(1), alternatives(1), fragment(1), isSemanticPredicate(0-1)
	//Semantic Object: Grammar'at.jku.weiner.c.common.Common'.rules[65]->TerminalRule'LETTER'
	//URI: file:/home/adalgrim/weiner/Private/xtext-predicates/workspace/at.jku.weiner.c.common/bin/at/jku/weiner/c/common/Common.xtext
	//Context: AbstractRule
	public TerminalRule getLETTERRule() {
		return gaCommon.getLETTERRule();
	}
	
	//terminal CHAR_LITERAL returns ecore::EString:
	//	'L'? SKW_SINGLEQUOTE (ESCAPE_SEQUENCE | !(SKW_SINGLEQUOTE | SKW_BACKSLASH)) SKW_SINGLEQUOTE;
	public TerminalRule getCHAR_LITERALRule() {
		return gaCommon.getCHAR_LITERALRule();
	}
	
	//terminal STRING_LITERAL returns ecore::EString:
	//	SKW_DOUBLEQUOTE (ESCAPE_SEQUENCE | !(SKW_BACKSLASH | SKW_DOUBLEQUOTE))* SKW_DOUBLEQUOTE;
	public TerminalRule getSTRING_LITERALRule() {
		return gaCommon.getSTRING_LITERALRule();
	}
	
	//terminal HEX_LITERAL returns ecore::EString:
	//	'0' ('x' | 'X') HEX_DIGIT+ INTEGER_TYPE_SUFFIX?;
	public TerminalRule getHEX_LITERALRule() {
		return gaCommon.getHEX_LITERALRule();
	}
	
	//terminal DECIMAL_LITERAL returns ecore::EString:
	//	('0' | '1'..'9' '0'..'9'*) INTEGER_TYPE_SUFFIX?;
	public TerminalRule getDECIMAL_LITERALRule() {
		return gaCommon.getDECIMAL_LITERALRule();
	}
	
	//terminal OCTAL_LITERAL returns ecore::EString:
	//	'0' '0'..'7'+ INTEGER_TYPE_SUFFIX?;
	public TerminalRule getOCTAL_LITERALRule() {
		return gaCommon.getOCTAL_LITERALRule();
	}
	
	//terminal BIN_LITERAL returns ecore::EString:
	//	('0b' | '0B') '0'..'1'+;
	public TerminalRule getBIN_LITERALRule() {
		return gaCommon.getBIN_LITERALRule();
	}
	
	//java.lang.RuntimeException: Could not serialize EObject via backtracking.
	//Constraint: null (fragment?='fragment' name=ValidID | name=ValidID type=TypeRef?) (preAntlrAction=ActionCall isSemanticPredicate?='?'?)? alternatives=TerminalAlternatives postAntlrAction=ActionCall? null
	//Values: name(1), type(1), alternatives(1), fragment(1), isSemanticPredicate(0-1)
	//Semantic Object: Grammar'at.jku.weiner.c.common.Common'.rules[72]->TerminalRule'HEX_DIGIT'
	//URI: file:/home/adalgrim/weiner/Private/xtext-predicates/workspace/at.jku.weiner.c.common/bin/at/jku/weiner/c/common/Common.xtext
	//Context: AbstractRule
	public TerminalRule getHEX_DIGITRule() {
		return gaCommon.getHEX_DIGITRule();
	}
	
	//java.lang.RuntimeException: Could not serialize EObject via backtracking.
	//Constraint: null (fragment?='fragment' name=ValidID | name=ValidID type=TypeRef?) (preAntlrAction=ActionCall isSemanticPredicate?='?'?)? alternatives=TerminalAlternatives postAntlrAction=ActionCall? null
	//Values: name(1), type(1), alternatives(1), fragment(1), isSemanticPredicate(0-1)
	//Semantic Object: Grammar'at.jku.weiner.c.common.Common'.rules[73]->TerminalRule'INTEGER_TYPE_SUFFIX'
	//URI: file:/home/adalgrim/weiner/Private/xtext-predicates/workspace/at.jku.weiner.c.common/bin/at/jku/weiner/c/common/Common.xtext
	//Context: AbstractRule
	public TerminalRule getINTEGER_TYPE_SUFFIXRule() {
		return gaCommon.getINTEGER_TYPE_SUFFIXRule();
	}
	
	//java.lang.RuntimeException: Could not serialize EObject via backtracking.
	//Constraint: null (fragment?='fragment' name=ValidID | name=ValidID type=TypeRef?) (preAntlrAction=ActionCall isSemanticPredicate?='?'?)? alternatives=TerminalAlternatives postAntlrAction=ActionCall? null
	//Values: name(1), type(1), alternatives(1), fragment(1), isSemanticPredicate(0-1)
	//Semantic Object: Grammar'at.jku.weiner.c.common.Common'.rules[74]->TerminalRule'UNSIGNED_SUFFIX'
	//URI: file:/home/adalgrim/weiner/Private/xtext-predicates/workspace/at.jku.weiner.c.common/bin/at/jku/weiner/c/common/Common.xtext
	//Context: AbstractRule
	public TerminalRule getUNSIGNED_SUFFIXRule() {
		return gaCommon.getUNSIGNED_SUFFIXRule();
	}
	
	//java.lang.RuntimeException: Could not serialize EObject via backtracking.
	//Constraint: null (fragment?='fragment' name=ValidID | name=ValidID type=TypeRef?) (preAntlrAction=ActionCall isSemanticPredicate?='?'?)? alternatives=TerminalAlternatives postAntlrAction=ActionCall? null
	//Values: name(1), type(1), alternatives(1), fragment(1), isSemanticPredicate(0-1)
	//Semantic Object: Grammar'at.jku.weiner.c.common.Common'.rules[75]->TerminalRule'LONG_SUFFIX'
	//URI: file:/home/adalgrim/weiner/Private/xtext-predicates/workspace/at.jku.weiner.c.common/bin/at/jku/weiner/c/common/Common.xtext
	//Context: AbstractRule
	public TerminalRule getLONG_SUFFIXRule() {
		return gaCommon.getLONG_SUFFIXRule();
	}
	
	//java.lang.RuntimeException: Could not serialize EObject via backtracking.
	//Constraint: null (fragment?='fragment' name=ValidID | name=ValidID type=TypeRef?) (preAntlrAction=ActionCall isSemanticPredicate?='?'?)? alternatives=TerminalAlternatives postAntlrAction=ActionCall? null
	//Values: name(1), type(1), alternatives(1), fragment(1), isSemanticPredicate(0-1)
	//Semantic Object: Grammar'at.jku.weiner.c.common.Common'.rules[76]->TerminalRule'LONG_LONG_SUFFIX'
	//URI: file:/home/adalgrim/weiner/Private/xtext-predicates/workspace/at.jku.weiner.c.common/bin/at/jku/weiner/c/common/Common.xtext
	//Context: AbstractRule
	public TerminalRule getLONG_LONG_SUFFIXRule() {
		return gaCommon.getLONG_LONG_SUFFIXRule();
	}
	
	//terminal FLOAT_LITERAL returns ecore::EString:
	//	'0'..'9'+ SKW_DOT '0'..'9'* EXPONENT? FLOAT_TYPE_SUFFIX?
	//	| SKW_DOT '0'..'9'+ EXPONENT? FLOAT_TYPE_SUFFIX?
	//	| '0'..'9'+ EXPONENT FLOAT_TYPE_SUFFIX?
	//	| '0'..'9'+ EXPONENT? FLOAT_TYPE_SUFFIX;
	public TerminalRule getFLOAT_LITERALRule() {
		return gaCommon.getFLOAT_LITERALRule();
	}
	
	//java.lang.RuntimeException: Could not serialize EObject via backtracking.
	//Constraint: null (fragment?='fragment' name=ValidID | name=ValidID type=TypeRef?) (preAntlrAction=ActionCall isSemanticPredicate?='?'?)? alternatives=TerminalAlternatives postAntlrAction=ActionCall? null
	//Values: name(1), type(1), alternatives(1), fragment(1), isSemanticPredicate(0-1)
	//Semantic Object: Grammar'at.jku.weiner.c.common.Common'.rules[78]->TerminalRule'EXPONENT'
	//URI: file:/home/adalgrim/weiner/Private/xtext-predicates/workspace/at.jku.weiner.c.common/bin/at/jku/weiner/c/common/Common.xtext
	//Context: AbstractRule
	public TerminalRule getEXPONENTRule() {
		return gaCommon.getEXPONENTRule();
	}
	
	//java.lang.RuntimeException: Could not serialize EObject via backtracking.
	//Constraint: null (fragment?='fragment' name=ValidID | name=ValidID type=TypeRef?) (preAntlrAction=ActionCall isSemanticPredicate?='?'?)? alternatives=TerminalAlternatives postAntlrAction=ActionCall? null
	//Values: name(1), type(1), alternatives(1), fragment(1), isSemanticPredicate(0-1)
	//Semantic Object: Grammar'at.jku.weiner.c.common.Common'.rules[79]->TerminalRule'FLOAT_TYPE_SUFFIX'
	//URI: file:/home/adalgrim/weiner/Private/xtext-predicates/workspace/at.jku.weiner.c.common/bin/at/jku/weiner/c/common/Common.xtext
	//Context: AbstractRule
	public TerminalRule getFLOAT_TYPE_SUFFIXRule() {
		return gaCommon.getFLOAT_TYPE_SUFFIXRule();
	}
	
	//java.lang.RuntimeException: Could not serialize EObject via backtracking.
	//Constraint: null (fragment?='fragment' name=ValidID | name=ValidID type=TypeRef?) (preAntlrAction=ActionCall isSemanticPredicate?='?'?)? alternatives=TerminalAlternatives postAntlrAction=ActionCall? null
	//Values: name(1), type(1), alternatives(1), fragment(1), isSemanticPredicate(0-1)
	//Semantic Object: Grammar'at.jku.weiner.c.common.Common'.rules[80]->TerminalRule'ESCAPE_SEQUENCE'
	//URI: file:/home/adalgrim/weiner/Private/xtext-predicates/workspace/at.jku.weiner.c.common/bin/at/jku/weiner/c/common/Common.xtext
	//Context: AbstractRule
	public TerminalRule getESCAPE_SEQUENCERule() {
		return gaCommon.getESCAPE_SEQUENCERule();
	}
	
	//java.lang.RuntimeException: Could not serialize EObject via backtracking.
	//Constraint: null (fragment?='fragment' name=ValidID | name=ValidID type=TypeRef?) (preAntlrAction=ActionCall isSemanticPredicate?='?'?)? alternatives=TerminalAlternatives postAntlrAction=ActionCall? null
	//Values: name(1), type(1), alternatives(1), fragment(1), isSemanticPredicate(0-1)
	//Semantic Object: Grammar'at.jku.weiner.c.common.Common'.rules[81]->TerminalRule'OCTAL_ESCAPE'
	//URI: file:/home/adalgrim/weiner/Private/xtext-predicates/workspace/at.jku.weiner.c.common/bin/at/jku/weiner/c/common/Common.xtext
	//Context: AbstractRule
	public TerminalRule getOCTAL_ESCAPERule() {
		return gaCommon.getOCTAL_ESCAPERule();
	}
	
	//java.lang.RuntimeException: Could not serialize EObject via backtracking.
	//Constraint: null (fragment?='fragment' name=ValidID | name=ValidID type=TypeRef?) (preAntlrAction=ActionCall isSemanticPredicate?='?'?)? alternatives=TerminalAlternatives postAntlrAction=ActionCall? null
	//Values: name(1), type(1), alternatives(1), fragment(1), isSemanticPredicate(0-1)
	//Semantic Object: Grammar'at.jku.weiner.c.common.Common'.rules[82]->TerminalRule'HEX_ESCAPE'
	//URI: file:/home/adalgrim/weiner/Private/xtext-predicates/workspace/at.jku.weiner.c.common/bin/at/jku/weiner/c/common/Common.xtext
	//Context: AbstractRule
	public TerminalRule getHEX_ESCAPERule() {
		return gaCommon.getHEX_ESCAPERule();
	}
	
	//java.lang.RuntimeException: Could not serialize EObject via backtracking.
	//Constraint: null (fragment?='fragment' name=ValidID | name=ValidID type=TypeRef?) (preAntlrAction=ActionCall isSemanticPredicate?='?'?)? alternatives=TerminalAlternatives postAntlrAction=ActionCall? null
	//Values: name(1), type(1), alternatives(1), fragment(1), isSemanticPredicate(0-1)
	//Semantic Object: Grammar'at.jku.weiner.c.common.Common'.rules[83]->TerminalRule'LINEFEED'
	//URI: file:/home/adalgrim/weiner/Private/xtext-predicates/workspace/at.jku.weiner.c.common/bin/at/jku/weiner/c/common/Common.xtext
	//Context: AbstractRule
	public TerminalRule getLINEFEEDRule() {
		return gaCommon.getLINEFEEDRule();
	}
	
	//java.lang.RuntimeException: Could not serialize EObject via backtracking.
	//Constraint: null (fragment?='fragment' name=ValidID | name=ValidID type=TypeRef?) (preAntlrAction=ActionCall isSemanticPredicate?='?'?)? alternatives=TerminalAlternatives postAntlrAction=ActionCall? null
	//Values: name(1), type(1), alternatives(1), fragment(1), isSemanticPredicate(0-1)
	//Semantic Object: Grammar'at.jku.weiner.c.common.Common'.rules[84]->TerminalRule'CARRIAGERETURN'
	//URI: file:/home/adalgrim/weiner/Private/xtext-predicates/workspace/at.jku.weiner.c.common/bin/at/jku/weiner/c/common/Common.xtext
	//Context: AbstractRule
	public TerminalRule getCARRIAGERETURNRule() {
		return gaCommon.getCARRIAGERETURNRule();
	}
	
	//terminal LINE_END returns ecore::EString:
	//	CARRIAGERETURN | LINEFEED;
	public TerminalRule getLINE_ENDRule() {
		return gaCommon.getLINE_ENDRule();
	}
	
	//terminal LINEBREAK returns ecore::EString:
	//	SKW_BACKSLASH LINE_END;
	public TerminalRule getLINEBREAKRule() {
		return gaCommon.getLINEBREAKRule();
	}
	
	//terminal NEWLINE returns ecore::EString:
	//	LINE_END;
	public TerminalRule getCommonNEWLINERule() {
		return gaCommon.getNEWLINERule();
	}
	
	//java.lang.RuntimeException: Could not serialize EObject via backtracking.
	//Constraint: null (fragment?='fragment' name=ValidID | name=ValidID type=TypeRef?) (preAntlrAction=ActionCall isSemanticPredicate?='?'?)? alternatives=TerminalAlternatives postAntlrAction=ActionCall? null
	//Values: name(1), type(1), alternatives(1), fragment(1), isSemanticPredicate(0-1)
	//Semantic Object: Grammar'at.jku.weiner.c.common.Common'.rules[88]->TerminalRule'SPACE'
	//URI: file:/home/adalgrim/weiner/Private/xtext-predicates/workspace/at.jku.weiner.c.common/bin/at/jku/weiner/c/common/Common.xtext
	//Context: AbstractRule
	public TerminalRule getSPACERule() {
		return gaCommon.getSPACERule();
	}
	
	//java.lang.RuntimeException: Could not serialize EObject via backtracking.
	//Constraint: null (fragment?='fragment' name=ValidID | name=ValidID type=TypeRef?) (preAntlrAction=ActionCall isSemanticPredicate?='?'?)? alternatives=TerminalAlternatives postAntlrAction=ActionCall? null
	//Values: name(1), type(1), alternatives(1), fragment(1), isSemanticPredicate(0-1)
	//Semantic Object: Grammar'at.jku.weiner.c.common.Common'.rules[89]->TerminalRule'TAB'
	//URI: file:/home/adalgrim/weiner/Private/xtext-predicates/workspace/at.jku.weiner.c.common/bin/at/jku/weiner/c/common/Common.xtext
	//Context: AbstractRule
	public TerminalRule getTABRule() {
		return gaCommon.getTABRule();
	}
	
	//terminal WHITESPACE returns ecore::EString:
	//	SPACE | TAB;
	public TerminalRule getWHITESPACERule() {
		return gaCommon.getWHITESPACERule();
	}
	
	//terminal BLOCK_COMMENT returns ecore::EString:
	//	'/ *'->'* /';
	public TerminalRule getBLOCK_COMMENTRule() {
		return gaCommon.getBLOCK_COMMENTRule();
	}
	
	//terminal LINE_COMMENT returns ecore::EString:
	//	'//' !LINE_END*;
	public TerminalRule getLINE_COMMENTRule() {
		return gaCommon.getLINE_COMMENTRule();
	}
	
	//terminal SPECIAL returns ecore::EString:
	//	.;
	public TerminalRule getSPECIALRule() {
		return gaCommon.getSPECIALRule();
	}
}
