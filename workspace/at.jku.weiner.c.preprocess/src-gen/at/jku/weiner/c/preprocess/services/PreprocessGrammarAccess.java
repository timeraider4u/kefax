/*
 * generated by Xtext 2.9.0-SNAPSHOT
 */
package at.jku.weiner.c.preprocess.services;

import at.jku.weiner.c.common.services.CommonGrammarAccess;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractParserRuleElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class PreprocessGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cUnitsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUnitsTranslationUnitParserRuleCall_1_0 = (RuleCall)cUnitsAssignment_1.eContents().get(0);
		
		//Model:
		//	{Model} units+=TranslationUnit;
		@Override public ParserRule getRule() { return rule; }
		
		//{Model} units+=TranslationUnit
		public Group getGroup() { return cGroup; }
		
		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }
		
		//units+=TranslationUnit
		public Assignment getUnitsAssignment_1() { return cUnitsAssignment_1; }
		
		//TranslationUnit
		public RuleCall getUnitsTranslationUnitParserRuleCall_1_0() { return cUnitsTranslationUnitParserRuleCall_1_0; }
	}
	public class TranslationUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.TranslationUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTranslationUnitAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cGroupAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGroupGroupOptParserRuleCall_1_0 = (RuleCall)cGroupAssignment_1.eContents().get(0);
		
		//TranslationUnit:
		//	{TranslationUnit} group=GroupOpt;
		@Override public ParserRule getRule() { return rule; }
		
		//{TranslationUnit} group=GroupOpt
		public Group getGroup() { return cGroup; }
		
		//{TranslationUnit}
		public Action getTranslationUnitAction_0() { return cTranslationUnitAction_0; }
		
		//group=GroupOpt
		public Assignment getGroupAssignment_1() { return cGroupAssignment_1; }
		
		//GroupOpt
		public RuleCall getGroupGroupOptParserRuleCall_1_0() { return cGroupGroupOptParserRuleCall_1_0; }
	}
	public class GroupOptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.GroupOpt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGroupOptAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cLinesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cLinesGroupOptTempParserRuleCall_1_0_0 = (RuleCall)cLinesAssignment_1_0.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//GroupOpt:
		//	{GroupOpt} (lines+=GroupOptTemp
		//	NEWLINE)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{GroupOpt} (lines+=GroupOptTemp NEWLINE)*
		public Group getGroup() { return cGroup; }
		
		//{GroupOpt}
		public Action getGroupOptAction_0() { return cGroupOptAction_0; }
		
		//(lines+=GroupOptTemp NEWLINE)*
		public Group getGroup_1() { return cGroup_1; }
		
		//lines+=GroupOptTemp
		public Assignment getLinesAssignment_1_0() { return cLinesAssignment_1_0; }
		
		//GroupOptTemp
		public RuleCall getLinesGroupOptTempParserRuleCall_1_0_0() { return cLinesGroupOptTempParserRuleCall_1_0_0; }
		
		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_1_1() { return cNEWLINETerminalRuleCall_1_1; }
	}
	public class GroupOptTempElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.GroupOptTemp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPreprocessorDirectivesParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNewLineLineParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCodeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//GroupOptTemp SourceCodeLine:
		//	PreprocessorDirectives
		//	| NewLineLine
		//	| Code
		@Override public ParserRule getRule() { return rule; }
		
		//PreprocessorDirectives | NewLineLine | Code
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PreprocessorDirectives
		public RuleCall getPreprocessorDirectivesParserRuleCall_0() { return cPreprocessorDirectivesParserRuleCall_0; }
		
		//NewLineLine
		public RuleCall getNewLineLineParserRuleCall_1() { return cNewLineLineParserRuleCall_1; }
		
		//Code
		public RuleCall getCodeParserRuleCall_2() { return cCodeParserRuleCall_2; }
	}
	public class PreprocessorDirectivesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.PreprocessorDirectives");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPreprocessorDirectivesAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cWHITESPACETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cHASHTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cWHITESPACETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cDirectiveAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cDirectiveIncludeDirectiveParserRuleCall_4_0_0 = (RuleCall)cDirectiveAssignment_4_0.eContents().get(0);
		private final Assignment cDirectiveAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cDirectiveDefineDirectiveParserRuleCall_4_1_0 = (RuleCall)cDirectiveAssignment_4_1.eContents().get(0);
		private final Assignment cDirectiveAssignment_4_2 = (Assignment)cAlternatives_4.eContents().get(2);
		private final RuleCall cDirectiveErrorDirectiveParserRuleCall_4_2_0 = (RuleCall)cDirectiveAssignment_4_2.eContents().get(0);
		private final Assignment cDirectiveAssignment_4_3 = (Assignment)cAlternatives_4.eContents().get(3);
		private final RuleCall cDirectiveWarningDirectiveParserRuleCall_4_3_0 = (RuleCall)cDirectiveAssignment_4_3.eContents().get(0);
		private final Assignment cDirectiveAssignment_4_4 = (Assignment)cAlternatives_4.eContents().get(4);
		private final RuleCall cDirectiveUnDefineDirectiveParserRuleCall_4_4_0 = (RuleCall)cDirectiveAssignment_4_4.eContents().get(0);
		private final Assignment cDirectiveAssignment_4_5 = (Assignment)cAlternatives_4.eContents().get(5);
		private final RuleCall cDirectiveConditionalDirectiveParserRuleCall_4_5_0 = (RuleCall)cDirectiveAssignment_4_5.eContents().get(0);
		private final Assignment cDirectiveAssignment_4_6 = (Assignment)cAlternatives_4.eContents().get(6);
		private final RuleCall cDirectivePragmaDirectiveParserRuleCall_4_6_0 = (RuleCall)cDirectiveAssignment_4_6.eContents().get(0);
		private final Assignment cDirectiveAssignment_4_7 = (Assignment)cAlternatives_4.eContents().get(7);
		private final RuleCall cDirectiveNullDirectiveParserRuleCall_4_7_0 = (RuleCall)cDirectiveAssignment_4_7.eContents().get(0);
		
		//PreprocessorDirectives SourceCodeLine:
		//	{PreprocessorDirectives} WHITESPACE* HASH WHITESPACE* (directive=IncludeDirective
		//	| directive=DefineDirective
		//	| directive=ErrorDirective
		//	| directive=WarningDirective
		//	| directive=UnDefineDirective
		//	| directive=ConditionalDirective
		//	| directive=PragmaDirective
		//	| directive=NullDirective)
		@Override public ParserRule getRule() { return rule; }
		
		//{PreprocessorDirectives} WHITESPACE* HASH WHITESPACE* (directive=IncludeDirective | directive=DefineDirective |
		//directive=ErrorDirective | directive=WarningDirective | directive=UnDefineDirective | directive=ConditionalDirective |
		//directive=PragmaDirective | directive=NullDirective)
		public Group getGroup() { return cGroup; }
		
		//{PreprocessorDirectives}
		public Action getPreprocessorDirectivesAction_0() { return cPreprocessorDirectivesAction_0; }
		
		//WHITESPACE*
		public RuleCall getWHITESPACETerminalRuleCall_1() { return cWHITESPACETerminalRuleCall_1; }
		
		//HASH
		public RuleCall getHASHTerminalRuleCall_2() { return cHASHTerminalRuleCall_2; }
		
		//WHITESPACE*
		public RuleCall getWHITESPACETerminalRuleCall_3() { return cWHITESPACETerminalRuleCall_3; }
		
		//(directive=IncludeDirective | directive=DefineDirective | directive=ErrorDirective | directive=WarningDirective |
		//directive=UnDefineDirective | directive=ConditionalDirective | directive=PragmaDirective | directive=NullDirective)
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//directive=IncludeDirective
		public Assignment getDirectiveAssignment_4_0() { return cDirectiveAssignment_4_0; }
		
		//IncludeDirective
		public RuleCall getDirectiveIncludeDirectiveParserRuleCall_4_0_0() { return cDirectiveIncludeDirectiveParserRuleCall_4_0_0; }
		
		//directive=DefineDirective
		public Assignment getDirectiveAssignment_4_1() { return cDirectiveAssignment_4_1; }
		
		//DefineDirective
		public RuleCall getDirectiveDefineDirectiveParserRuleCall_4_1_0() { return cDirectiveDefineDirectiveParserRuleCall_4_1_0; }
		
		//directive=ErrorDirective
		public Assignment getDirectiveAssignment_4_2() { return cDirectiveAssignment_4_2; }
		
		//ErrorDirective
		public RuleCall getDirectiveErrorDirectiveParserRuleCall_4_2_0() { return cDirectiveErrorDirectiveParserRuleCall_4_2_0; }
		
		//directive=WarningDirective
		public Assignment getDirectiveAssignment_4_3() { return cDirectiveAssignment_4_3; }
		
		//WarningDirective
		public RuleCall getDirectiveWarningDirectiveParserRuleCall_4_3_0() { return cDirectiveWarningDirectiveParserRuleCall_4_3_0; }
		
		//directive=UnDefineDirective
		public Assignment getDirectiveAssignment_4_4() { return cDirectiveAssignment_4_4; }
		
		//UnDefineDirective
		public RuleCall getDirectiveUnDefineDirectiveParserRuleCall_4_4_0() { return cDirectiveUnDefineDirectiveParserRuleCall_4_4_0; }
		
		//directive=ConditionalDirective
		public Assignment getDirectiveAssignment_4_5() { return cDirectiveAssignment_4_5; }
		
		//ConditionalDirective
		public RuleCall getDirectiveConditionalDirectiveParserRuleCall_4_5_0() { return cDirectiveConditionalDirectiveParserRuleCall_4_5_0; }
		
		//directive=PragmaDirective
		public Assignment getDirectiveAssignment_4_6() { return cDirectiveAssignment_4_6; }
		
		//PragmaDirective
		public RuleCall getDirectivePragmaDirectiveParserRuleCall_4_6_0() { return cDirectivePragmaDirectiveParserRuleCall_4_6_0; }
		
		//directive=NullDirective
		public Assignment getDirectiveAssignment_4_7() { return cDirectiveAssignment_4_7; }
		
		//NullDirective
		public RuleCall getDirectiveNullDirectiveParserRuleCall_4_7_0() { return cDirectiveNullDirectiveParserRuleCall_4_7_0; }
	}
	public class IncludeDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.IncludeDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIncludeDirectiveAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cINCLUDETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cWHITESPACETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cStringAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStringMyCodeLineParserRuleCall_3_0 = (RuleCall)cStringAssignment_3.eContents().get(0);
		
		//IncludeDirective:
		//	{IncludeDirective} INCLUDE WHITESPACE+ string=MyCodeLine;
		@Override public ParserRule getRule() { return rule; }
		
		//{IncludeDirective} INCLUDE WHITESPACE+ string=MyCodeLine
		public Group getGroup() { return cGroup; }
		
		//{IncludeDirective}
		public Action getIncludeDirectiveAction_0() { return cIncludeDirectiveAction_0; }
		
		//INCLUDE
		public RuleCall getINCLUDETerminalRuleCall_1() { return cINCLUDETerminalRuleCall_1; }
		
		//WHITESPACE+
		public RuleCall getWHITESPACETerminalRuleCall_2() { return cWHITESPACETerminalRuleCall_2; }
		
		//string=MyCodeLine
		public Assignment getStringAssignment_3() { return cStringAssignment_3; }
		
		//MyCodeLine
		public RuleCall getStringMyCodeLineParserRuleCall_3_0() { return cStringMyCodeLineParserRuleCall_3_0; }
	}
	public class DefineDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.DefineDirective");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDefineObjectMacroParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDefineFunctionLikeMacroParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DefineDirective:
		//	DefineObjectMacro
		//	| DefineFunctionLikeMacro;
		@Override public ParserRule getRule() { return rule; }
		
		//DefineObjectMacro | DefineFunctionLikeMacro
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DefineObjectMacro
		public RuleCall getDefineObjectMacroParserRuleCall_0() { return cDefineObjectMacroParserRuleCall_0; }
		
		//DefineFunctionLikeMacro
		public RuleCall getDefineFunctionLikeMacroParserRuleCall_1() { return cDefineFunctionLikeMacroParserRuleCall_1; }
	}
	public class DefineObjectMacroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.DefineObjectMacro");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDefineObjectMacroAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cDEFINETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cWHITESPACETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cIdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdIDTerminalRuleCall_3_0 = (RuleCall)cIdAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cWHITESPACETerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Assignment cStringAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cStringMyDefineLineParserRuleCall_4_1_0 = (RuleCall)cStringAssignment_4_1.eContents().get(0);
		
		//DefineObjectMacro DefineDirective:
		//	{DefineObjectMacro} DEFINE WHITESPACE+ id=ID (WHITESPACE+ string=MyDefineLine)?
		@Override public ParserRule getRule() { return rule; }
		
		//{DefineObjectMacro} DEFINE WHITESPACE+ id=ID (WHITESPACE+ string=MyDefineLine)?
		public Group getGroup() { return cGroup; }
		
		//{DefineObjectMacro}
		public Action getDefineObjectMacroAction_0() { return cDefineObjectMacroAction_0; }
		
		//DEFINE
		public RuleCall getDEFINETerminalRuleCall_1() { return cDEFINETerminalRuleCall_1; }
		
		//WHITESPACE+
		public RuleCall getWHITESPACETerminalRuleCall_2() { return cWHITESPACETerminalRuleCall_2; }
		
		//id=ID
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_3_0() { return cIdIDTerminalRuleCall_3_0; }
		
		//(WHITESPACE+ string=MyDefineLine)?
		public Group getGroup_4() { return cGroup_4; }
		
		//WHITESPACE+
		public RuleCall getWHITESPACETerminalRuleCall_4_0() { return cWHITESPACETerminalRuleCall_4_0; }
		
		//string=MyDefineLine
		public Assignment getStringAssignment_4_1() { return cStringAssignment_4_1; }
		
		//MyDefineLine
		public RuleCall getStringMyDefineLineParserRuleCall_4_1_0() { return cStringMyDefineLineParserRuleCall_4_1_0; }
	}
	public class DefineFunctionLikeMacroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.DefineFunctionLikeMacro");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDefineFunctionLikeMacroAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cDEFINETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cWHITESPACETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cIdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdIDTerminalRuleCall_3_0 = (RuleCall)cIdAssignment_3.eContents().get(0);
		private final RuleCall cSKW_LEFTPARENTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cWHITESPACETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cListAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cListIdentifierListParserRuleCall_6_0 = (RuleCall)cListAssignment_6.eContents().get(0);
		private final RuleCall cSKW_RIGHTPARENTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final RuleCall cWHITESPACETerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final Assignment cStringAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cStringMyDefineLineParserRuleCall_9_0 = (RuleCall)cStringAssignment_9.eContents().get(0);
		
		//DefineFunctionLikeMacro DefineDirective:
		//	{DefineFunctionLikeMacro} DEFINE WHITESPACE+ id=ID
		//	SKW_LEFTPAREN WHITESPACE*
		//	list=IdentifierList?
		//	SKW_RIGHTPAREN
		//	WHITESPACE+
		//	string=MyDefineLine
		@Override public ParserRule getRule() { return rule; }
		
		//{DefineFunctionLikeMacro} DEFINE WHITESPACE+ id=ID SKW_LEFTPAREN WHITESPACE* list=IdentifierList? SKW_RIGHTPAREN
		//WHITESPACE+ string=MyDefineLine
		public Group getGroup() { return cGroup; }
		
		//{DefineFunctionLikeMacro}
		public Action getDefineFunctionLikeMacroAction_0() { return cDefineFunctionLikeMacroAction_0; }
		
		//DEFINE
		public RuleCall getDEFINETerminalRuleCall_1() { return cDEFINETerminalRuleCall_1; }
		
		//WHITESPACE+
		public RuleCall getWHITESPACETerminalRuleCall_2() { return cWHITESPACETerminalRuleCall_2; }
		
		//id=ID
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_3_0() { return cIdIDTerminalRuleCall_3_0; }
		
		//SKW_LEFTPAREN
		public RuleCall getSKW_LEFTPARENTerminalRuleCall_4() { return cSKW_LEFTPARENTerminalRuleCall_4; }
		
		//WHITESPACE*
		public RuleCall getWHITESPACETerminalRuleCall_5() { return cWHITESPACETerminalRuleCall_5; }
		
		//list=IdentifierList?
		public Assignment getListAssignment_6() { return cListAssignment_6; }
		
		//IdentifierList
		public RuleCall getListIdentifierListParserRuleCall_6_0() { return cListIdentifierListParserRuleCall_6_0; }
		
		//SKW_RIGHTPAREN
		public RuleCall getSKW_RIGHTPARENTerminalRuleCall_7() { return cSKW_RIGHTPARENTerminalRuleCall_7; }
		
		//WHITESPACE+
		public RuleCall getWHITESPACETerminalRuleCall_8() { return cWHITESPACETerminalRuleCall_8; }
		
		//string=MyDefineLine
		public Assignment getStringAssignment_9() { return cStringAssignment_9; }
		
		//MyDefineLine
		public RuleCall getStringMyDefineLineParserRuleCall_9_0() { return cStringMyDefineLineParserRuleCall_9_0; }
	}
	public class IdentifierListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.IdentifierList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIdentifierListAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cSKW_COMMATerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cWHITESPACETerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Assignment cIdAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cIdIDTerminalRuleCall_2_2_0 = (RuleCall)cIdAssignment_2_2.eContents().get(0);
		
		//IdentifierList:
		//	{IdentifierList} id+=ID (SKW_COMMA WHITESPACE* id+=ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{IdentifierList} id+=ID (SKW_COMMA WHITESPACE* id+=ID)*
		public Group getGroup() { return cGroup; }
		
		//{IdentifierList}
		public Action getIdentifierListAction_0() { return cIdentifierListAction_0; }
		
		//id+=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }
		
		//(SKW_COMMA WHITESPACE* id+=ID)*
		public Group getGroup_2() { return cGroup_2; }
		
		//SKW_COMMA
		public RuleCall getSKW_COMMATerminalRuleCall_2_0() { return cSKW_COMMATerminalRuleCall_2_0; }
		
		//WHITESPACE*
		public RuleCall getWHITESPACETerminalRuleCall_2_1() { return cWHITESPACETerminalRuleCall_2_1; }
		
		//id+=ID
		public Assignment getIdAssignment_2_2() { return cIdAssignment_2_2; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_2_2_0() { return cIdIDTerminalRuleCall_2_2_0; }
	}
	public class ErrorDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.ErrorDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cErrorDirectiveAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cERRORTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cWHITESPACETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cMsgAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMsgMyCodeLineParserRuleCall_3_0 = (RuleCall)cMsgAssignment_3.eContents().get(0);
		
		//ErrorDirective:
		//	{ErrorDirective} ERROR WHITESPACE+ msg=MyCodeLine;
		@Override public ParserRule getRule() { return rule; }
		
		//{ErrorDirective} ERROR WHITESPACE+ msg=MyCodeLine
		public Group getGroup() { return cGroup; }
		
		//{ErrorDirective}
		public Action getErrorDirectiveAction_0() { return cErrorDirectiveAction_0; }
		
		//ERROR
		public RuleCall getERRORTerminalRuleCall_1() { return cERRORTerminalRuleCall_1; }
		
		//WHITESPACE+
		public RuleCall getWHITESPACETerminalRuleCall_2() { return cWHITESPACETerminalRuleCall_2; }
		
		//msg=MyCodeLine
		public Assignment getMsgAssignment_3() { return cMsgAssignment_3; }
		
		//MyCodeLine
		public RuleCall getMsgMyCodeLineParserRuleCall_3_0() { return cMsgMyCodeLineParserRuleCall_3_0; }
	}
	public class WarningDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.WarningDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWarningDirectiveAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cWARNINGTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cWHITESPACETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cMsgAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMsgMyCodeLineParserRuleCall_3_0 = (RuleCall)cMsgAssignment_3.eContents().get(0);
		
		//WarningDirective:
		//	{WarningDirective} WARNING WHITESPACE+ msg=MyCodeLine;
		@Override public ParserRule getRule() { return rule; }
		
		//{WarningDirective} WARNING WHITESPACE+ msg=MyCodeLine
		public Group getGroup() { return cGroup; }
		
		//{WarningDirective}
		public Action getWarningDirectiveAction_0() { return cWarningDirectiveAction_0; }
		
		//WARNING
		public RuleCall getWARNINGTerminalRuleCall_1() { return cWARNINGTerminalRuleCall_1; }
		
		//WHITESPACE+
		public RuleCall getWHITESPACETerminalRuleCall_2() { return cWHITESPACETerminalRuleCall_2; }
		
		//msg=MyCodeLine
		public Assignment getMsgAssignment_3() { return cMsgAssignment_3; }
		
		//MyCodeLine
		public RuleCall getMsgMyCodeLineParserRuleCall_3_0() { return cMsgMyCodeLineParserRuleCall_3_0; }
	}
	public class UnDefineDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.UnDefineDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnDefineDirectiveAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cUNDEFTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cWHITESPACETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cIdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdIDTerminalRuleCall_3_0 = (RuleCall)cIdAssignment_3.eContents().get(0);
		
		//UnDefineDirective:
		//	{UnDefineDirective} UNDEF WHITESPACE+ id=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{UnDefineDirective} UNDEF WHITESPACE+ id=ID
		public Group getGroup() { return cGroup; }
		
		//{UnDefineDirective}
		public Action getUnDefineDirectiveAction_0() { return cUnDefineDirectiveAction_0; }
		
		//UNDEF
		public RuleCall getUNDEFTerminalRuleCall_1() { return cUNDEFTerminalRuleCall_1; }
		
		//WHITESPACE+
		public RuleCall getWHITESPACETerminalRuleCall_2() { return cWHITESPACETerminalRuleCall_2; }
		
		//id=ID
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_3_0() { return cIdIDTerminalRuleCall_3_0; }
	}
	public class ConditionalDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.ConditionalDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConditionalDirectiveAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cConditionalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cConditionalAlternatives_1_0 = (Alternatives)cConditionalAssignment_1.eContents().get(0);
		private final RuleCall cConditionalIfConditionalParserRuleCall_1_0_0 = (RuleCall)cConditionalAlternatives_1_0.eContents().get(0);
		private final RuleCall cConditionalIfDefConditionalParserRuleCall_1_0_1 = (RuleCall)cConditionalAlternatives_1_0.eContents().get(1);
		private final RuleCall cConditionalIfNotDefConditionalParserRuleCall_1_0_2 = (RuleCall)cConditionalAlternatives_1_0.eContents().get(2);
		private final Assignment cElifsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElifsElIfConditionalParserRuleCall_2_0 = (RuleCall)cElifsAssignment_2.eContents().get(0);
		private final Assignment cElseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElseElseConditionalParserRuleCall_3_0 = (RuleCall)cElseAssignment_3.eContents().get(0);
		private final RuleCall cWHITESPACETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cHASHTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cWHITESPACETerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final RuleCall cENDIFTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final RuleCall cWHITESPACETerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		//ConditionalDirective:
		//	{ConditionalDirective} conditional=(IfConditional
		//	| IfDefConditional
		//	| IfNotDefConditional) elifs+=ElIfConditional*
		//	else=ElseConditional?
		//	WHITESPACE* HASH WHITESPACE* ENDIF WHITESPACE*;
		@Override public ParserRule getRule() { return rule; }
		
		//{ConditionalDirective} conditional=(IfConditional | IfDefConditional | IfNotDefConditional) elifs+=ElIfConditional*
		//else=ElseConditional? WHITESPACE* HASH WHITESPACE* ENDIF WHITESPACE*
		public Group getGroup() { return cGroup; }
		
		//{ConditionalDirective}
		public Action getConditionalDirectiveAction_0() { return cConditionalDirectiveAction_0; }
		
		//conditional=(IfConditional | IfDefConditional | IfNotDefConditional)
		public Assignment getConditionalAssignment_1() { return cConditionalAssignment_1; }
		
		//(IfConditional | IfDefConditional | IfNotDefConditional)
		public Alternatives getConditionalAlternatives_1_0() { return cConditionalAlternatives_1_0; }
		
		//IfConditional
		public RuleCall getConditionalIfConditionalParserRuleCall_1_0_0() { return cConditionalIfConditionalParserRuleCall_1_0_0; }
		
		//IfDefConditional
		public RuleCall getConditionalIfDefConditionalParserRuleCall_1_0_1() { return cConditionalIfDefConditionalParserRuleCall_1_0_1; }
		
		//IfNotDefConditional
		public RuleCall getConditionalIfNotDefConditionalParserRuleCall_1_0_2() { return cConditionalIfNotDefConditionalParserRuleCall_1_0_2; }
		
		//elifs+=ElIfConditional*
		public Assignment getElifsAssignment_2() { return cElifsAssignment_2; }
		
		//ElIfConditional
		public RuleCall getElifsElIfConditionalParserRuleCall_2_0() { return cElifsElIfConditionalParserRuleCall_2_0; }
		
		//else=ElseConditional?
		public Assignment getElseAssignment_3() { return cElseAssignment_3; }
		
		//ElseConditional
		public RuleCall getElseElseConditionalParserRuleCall_3_0() { return cElseElseConditionalParserRuleCall_3_0; }
		
		//WHITESPACE*
		public RuleCall getWHITESPACETerminalRuleCall_4() { return cWHITESPACETerminalRuleCall_4; }
		
		//HASH
		public RuleCall getHASHTerminalRuleCall_5() { return cHASHTerminalRuleCall_5; }
		
		//WHITESPACE*
		public RuleCall getWHITESPACETerminalRuleCall_6() { return cWHITESPACETerminalRuleCall_6; }
		
		//ENDIF
		public RuleCall getENDIFTerminalRuleCall_7() { return cENDIFTerminalRuleCall_7; }
		
		//WHITESPACE*
		public RuleCall getWHITESPACETerminalRuleCall_8() { return cWHITESPACETerminalRuleCall_8; }
	}
	public class IfConditionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.IfConditional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIfConditionalAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cIFTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cWHITESPACETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionConstantExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cGroupAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cGroupGroupOptParserRuleCall_5_0 = (RuleCall)cGroupAssignment_5.eContents().get(0);
		
		//IfConditional:
		//	{IfConditional} IF WHITESPACE+ expression=Common::ConstantExpression NEWLINE
		//	group=GroupOpt;
		@Override public ParserRule getRule() { return rule; }
		
		//{IfConditional} IF WHITESPACE+ expression=Common::ConstantExpression NEWLINE group=GroupOpt
		public Group getGroup() { return cGroup; }
		
		//{IfConditional}
		public Action getIfConditionalAction_0() { return cIfConditionalAction_0; }
		
		//IF
		public RuleCall getIFTerminalRuleCall_1() { return cIFTerminalRuleCall_1; }
		
		//WHITESPACE+
		public RuleCall getWHITESPACETerminalRuleCall_2() { return cWHITESPACETerminalRuleCall_2; }
		
		//expression=Common::ConstantExpression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//Common::ConstantExpression
		public RuleCall getExpressionConstantExpressionParserRuleCall_3_0() { return cExpressionConstantExpressionParserRuleCall_3_0; }
		
		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_4() { return cNEWLINETerminalRuleCall_4; }
		
		//group=GroupOpt
		public Assignment getGroupAssignment_5() { return cGroupAssignment_5; }
		
		//GroupOpt
		public RuleCall getGroupGroupOptParserRuleCall_5_0() { return cGroupGroupOptParserRuleCall_5_0; }
	}
	public class IfDefConditionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.IfDefConditional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIfDefConditionalAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cIFDEFTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cWHITESPACETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cIdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdIDTerminalRuleCall_3_0 = (RuleCall)cIdAssignment_3.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cGroupAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cGroupGroupOptParserRuleCall_5_0 = (RuleCall)cGroupAssignment_5.eContents().get(0);
		
		//IfDefConditional:
		//	{IfDefConditional} IFDEF WHITESPACE+ id=ID NEWLINE
		//	group=GroupOpt;
		@Override public ParserRule getRule() { return rule; }
		
		//{IfDefConditional} IFDEF WHITESPACE+ id=ID NEWLINE group=GroupOpt
		public Group getGroup() { return cGroup; }
		
		//{IfDefConditional}
		public Action getIfDefConditionalAction_0() { return cIfDefConditionalAction_0; }
		
		//IFDEF
		public RuleCall getIFDEFTerminalRuleCall_1() { return cIFDEFTerminalRuleCall_1; }
		
		//WHITESPACE+
		public RuleCall getWHITESPACETerminalRuleCall_2() { return cWHITESPACETerminalRuleCall_2; }
		
		//id=ID
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_3_0() { return cIdIDTerminalRuleCall_3_0; }
		
		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_4() { return cNEWLINETerminalRuleCall_4; }
		
		//group=GroupOpt
		public Assignment getGroupAssignment_5() { return cGroupAssignment_5; }
		
		//GroupOpt
		public RuleCall getGroupGroupOptParserRuleCall_5_0() { return cGroupGroupOptParserRuleCall_5_0; }
	}
	public class IfNotDefConditionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.IfNotDefConditional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIfNotDefConditionalAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cIFNOTDEFTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cWHITESPACETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cIdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdIDTerminalRuleCall_3_0 = (RuleCall)cIdAssignment_3.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cGroupAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cGroupGroupOptParserRuleCall_5_0 = (RuleCall)cGroupAssignment_5.eContents().get(0);
		
		//IfNotDefConditional:
		//	{IfNotDefConditional} IFNOTDEF WHITESPACE+ id=ID NEWLINE
		//	group=GroupOpt;
		@Override public ParserRule getRule() { return rule; }
		
		//{IfNotDefConditional} IFNOTDEF WHITESPACE+ id=ID NEWLINE group=GroupOpt
		public Group getGroup() { return cGroup; }
		
		//{IfNotDefConditional}
		public Action getIfNotDefConditionalAction_0() { return cIfNotDefConditionalAction_0; }
		
		//IFNOTDEF
		public RuleCall getIFNOTDEFTerminalRuleCall_1() { return cIFNOTDEFTerminalRuleCall_1; }
		
		//WHITESPACE+
		public RuleCall getWHITESPACETerminalRuleCall_2() { return cWHITESPACETerminalRuleCall_2; }
		
		//id=ID
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_3_0() { return cIdIDTerminalRuleCall_3_0; }
		
		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_4() { return cNEWLINETerminalRuleCall_4; }
		
		//group=GroupOpt
		public Assignment getGroupAssignment_5() { return cGroupAssignment_5; }
		
		//GroupOpt
		public RuleCall getGroupGroupOptParserRuleCall_5_0() { return cGroupGroupOptParserRuleCall_5_0; }
	}
	public class ElIfConditionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.ElIfConditional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cElIfConditionalAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cWHITESPACETerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cHASHTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cWHITESPACETerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cELIFTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final RuleCall cWHITESPACETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionConstantExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cGroupAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cGroupGroupOptParserRuleCall_5_0 = (RuleCall)cGroupAssignment_5.eContents().get(0);
		
		//ElIfConditional:
		//	{ElIfConditional} (WHITESPACE* HASH WHITESPACE* ELIF) WHITESPACE+ expression=Common::ConstantExpression NEWLINE
		//	group=GroupOpt;
		@Override public ParserRule getRule() { return rule; }
		
		//{ElIfConditional} (WHITESPACE* HASH WHITESPACE* ELIF) WHITESPACE+ expression=Common::ConstantExpression NEWLINE
		//group=GroupOpt
		public Group getGroup() { return cGroup; }
		
		//{ElIfConditional}
		public Action getElIfConditionalAction_0() { return cElIfConditionalAction_0; }
		
		//(WHITESPACE* HASH WHITESPACE* ELIF)
		public Group getGroup_1() { return cGroup_1; }
		
		//WHITESPACE*
		public RuleCall getWHITESPACETerminalRuleCall_1_0() { return cWHITESPACETerminalRuleCall_1_0; }
		
		//HASH
		public RuleCall getHASHTerminalRuleCall_1_1() { return cHASHTerminalRuleCall_1_1; }
		
		//WHITESPACE*
		public RuleCall getWHITESPACETerminalRuleCall_1_2() { return cWHITESPACETerminalRuleCall_1_2; }
		
		//ELIF
		public RuleCall getELIFTerminalRuleCall_1_3() { return cELIFTerminalRuleCall_1_3; }
		
		//WHITESPACE+
		public RuleCall getWHITESPACETerminalRuleCall_2() { return cWHITESPACETerminalRuleCall_2; }
		
		//expression=Common::ConstantExpression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//Common::ConstantExpression
		public RuleCall getExpressionConstantExpressionParserRuleCall_3_0() { return cExpressionConstantExpressionParserRuleCall_3_0; }
		
		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_4() { return cNEWLINETerminalRuleCall_4; }
		
		//group=GroupOpt
		public Assignment getGroupAssignment_5() { return cGroupAssignment_5; }
		
		//GroupOpt
		public RuleCall getGroupGroupOptParserRuleCall_5_0() { return cGroupGroupOptParserRuleCall_5_0; }
	}
	public class ElseConditionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.ElseConditional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cElseConditionalAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cWHITESPACETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cHASHTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cWHITESPACETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cELSETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cNEWLINETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cGroupAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cGroupGroupOptParserRuleCall_6_0 = (RuleCall)cGroupAssignment_6.eContents().get(0);
		
		//ElseConditional:
		//	{ElseConditional} WHITESPACE* HASH WHITESPACE* ELSE NEWLINE
		//	group=GroupOpt;
		@Override public ParserRule getRule() { return rule; }
		
		//{ElseConditional} WHITESPACE* HASH WHITESPACE* ELSE NEWLINE group=GroupOpt
		public Group getGroup() { return cGroup; }
		
		//{ElseConditional}
		public Action getElseConditionalAction_0() { return cElseConditionalAction_0; }
		
		//WHITESPACE*
		public RuleCall getWHITESPACETerminalRuleCall_1() { return cWHITESPACETerminalRuleCall_1; }
		
		//HASH
		public RuleCall getHASHTerminalRuleCall_2() { return cHASHTerminalRuleCall_2; }
		
		//WHITESPACE*
		public RuleCall getWHITESPACETerminalRuleCall_3() { return cWHITESPACETerminalRuleCall_3; }
		
		//ELSE
		public RuleCall getELSETerminalRuleCall_4() { return cELSETerminalRuleCall_4; }
		
		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_5() { return cNEWLINETerminalRuleCall_5; }
		
		//group=GroupOpt
		public Assignment getGroupAssignment_6() { return cGroupAssignment_6; }
		
		//GroupOpt
		public RuleCall getGroupGroupOptParserRuleCall_6_0() { return cGroupGroupOptParserRuleCall_6_0; }
	}
	public class PragmaDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.PragmaDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPragmaDirectiveAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cPRAGMATerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//PragmaDirective:
		//	{PragmaDirective} PRAGMA;
		@Override public ParserRule getRule() { return rule; }
		
		//{PragmaDirective} PRAGMA
		public Group getGroup() { return cGroup; }
		
		//{PragmaDirective}
		public Action getPragmaDirectiveAction_0() { return cPragmaDirectiveAction_0; }
		
		//PRAGMA
		public RuleCall getPRAGMATerminalRuleCall_1() { return cPRAGMATerminalRuleCall_1; }
	}
	public class NullDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.NullDirective");
		private final Action cNullDirectiveAction = (Action)rule.eContents().get(1);
		
		//NullDirective:
		//	{NullDirective};
		@Override public ParserRule getRule() { return rule; }
		
		//{NullDirective}
		public Action getNullDirectiveAction() { return cNullDirectiveAction; }
	}
	public class NewLineLineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.NewLineLine");
		private final Action cNewLineLineAction = (Action)rule.eContents().get(1);
		
		//NewLineLine SourceCodeLine:
		//	{NewLineLine}
		@Override public ParserRule getRule() { return rule; }
		
		//{NewLineLine}
		public Action getNewLineLineAction() { return cNewLineLineAction; }
	}
	public class CodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.Code");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCodeMyCodeLineExtendedParserRuleCall_1_0 = (RuleCall)cCodeAssignment_1.eContents().get(0);
		
		//Code SourceCodeLine:
		//	{Code} code=MyCodeLineExtended
		@Override public ParserRule getRule() { return rule; }
		
		//{Code} code=MyCodeLineExtended
		public Group getGroup() { return cGroup; }
		
		//{Code}
		public Action getCodeAction_0() { return cCodeAction_0; }
		
		//code=MyCodeLineExtended
		public Assignment getCodeAssignment_1() { return cCodeAssignment_1; }
		
		//MyCodeLineExtended
		public RuleCall getCodeMyCodeLineExtendedParserRuleCall_1_0() { return cCodeMyCodeLineExtendedParserRuleCall_1_0; }
	}
	public class MyCodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.MyCode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSPECIALTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cINCLUDETerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDEFINETerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cERRORTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cPRAGMATerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cIFDEFTerminalRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cENDIFTerminalRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cIFNOTDEFTerminalRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cIFTerminalRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cDEFINEDTerminalRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cSpecialKeywordsParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cConstant1ParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		
		//MyCode:
		//	ID | SPECIAL | INCLUDE | DEFINE | ERROR | PRAGMA
		//	| IFDEF | ENDIF | IFNOTDEF | IF | DEFINED
		//	| SpecialKeywords | Constant1;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | SPECIAL | INCLUDE | DEFINE | ERROR | PRAGMA | IFDEF | ENDIF | IFNOTDEF | IF | DEFINED | SpecialKeywords | Constant1
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//SPECIAL
		public RuleCall getSPECIALTerminalRuleCall_1() { return cSPECIALTerminalRuleCall_1; }
		
		//INCLUDE
		public RuleCall getINCLUDETerminalRuleCall_2() { return cINCLUDETerminalRuleCall_2; }
		
		//DEFINE
		public RuleCall getDEFINETerminalRuleCall_3() { return cDEFINETerminalRuleCall_3; }
		
		//ERROR
		public RuleCall getERRORTerminalRuleCall_4() { return cERRORTerminalRuleCall_4; }
		
		//PRAGMA
		public RuleCall getPRAGMATerminalRuleCall_5() { return cPRAGMATerminalRuleCall_5; }
		
		//IFDEF
		public RuleCall getIFDEFTerminalRuleCall_6() { return cIFDEFTerminalRuleCall_6; }
		
		//ENDIF
		public RuleCall getENDIFTerminalRuleCall_7() { return cENDIFTerminalRuleCall_7; }
		
		//IFNOTDEF
		public RuleCall getIFNOTDEFTerminalRuleCall_8() { return cIFNOTDEFTerminalRuleCall_8; }
		
		//IF
		public RuleCall getIFTerminalRuleCall_9() { return cIFTerminalRuleCall_9; }
		
		//DEFINED
		public RuleCall getDEFINEDTerminalRuleCall_10() { return cDEFINEDTerminalRuleCall_10; }
		
		//SpecialKeywords
		public RuleCall getSpecialKeywordsParserRuleCall_11() { return cSpecialKeywordsParserRuleCall_11; }
		
		//Constant1
		public RuleCall getConstant1ParserRuleCall_12() { return cConstant1ParserRuleCall_12; }
	}
	public class MyDefineLineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.MyDefineLine");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMyCodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWHITESPACETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHASHTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//MyDefineLine:
		//	MyCode | WHITESPACE | HASH*;
		@Override public ParserRule getRule() { return rule; }
		
		//MyCode | WHITESPACE | HASH*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MyCode
		public RuleCall getMyCodeParserRuleCall_0() { return cMyCodeParserRuleCall_0; }
		
		//WHITESPACE
		public RuleCall getWHITESPACETerminalRuleCall_1() { return cWHITESPACETerminalRuleCall_1; }
		
		//HASH
		public RuleCall getHASHTerminalRuleCall_2() { return cHASHTerminalRuleCall_2; }
	}
	public class MyCodeLineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.MyCodeLine");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMyCodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWHITESPACETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MyCodeLine:
		//	MyCode | WHITESPACE+;
		@Override public ParserRule getRule() { return rule; }
		
		//MyCode | WHITESPACE+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MyCode
		public RuleCall getMyCodeParserRuleCall_0() { return cMyCodeParserRuleCall_0; }
		
		//WHITESPACE
		public RuleCall getWHITESPACETerminalRuleCall_1() { return cWHITESPACETerminalRuleCall_1; }
	}
	public class MyCodeLineExtendedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.MyCodeLineExtended");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWHITESPACETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cMyCodeParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final RuleCall cMyCodeLineParserRuleCall_1_1_0 = (RuleCall)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cHASHTerminalRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		
		//MyCodeLineExtended:
		//	WHITESPACE* (MyCode (MyCodeLine | HASH)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//WHITESPACE* (MyCode (MyCodeLine | HASH)*)?
		public Group getGroup() { return cGroup; }
		
		//WHITESPACE*
		public RuleCall getWHITESPACETerminalRuleCall_0() { return cWHITESPACETerminalRuleCall_0; }
		
		//(MyCode (MyCodeLine | HASH)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//MyCode
		public RuleCall getMyCodeParserRuleCall_1_0() { return cMyCodeParserRuleCall_1_0; }
		
		//(MyCodeLine | HASH)*
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//MyCodeLine
		public RuleCall getMyCodeLineParserRuleCall_1_1_0() { return cMyCodeLineParserRuleCall_1_1_0; }
		
		//HASH
		public RuleCall getHASHTerminalRuleCall_1_1_1() { return cHASHTerminalRuleCall_1_1_1; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.PrimaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimaryExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cDefinedAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cDefinedDEFINEDTerminalRuleCall_1_0_0_0 = (RuleCall)cDefinedAssignment_1_0_0.eContents().get(0);
		private final Assignment cIdAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0_1_0 = (RuleCall)cIdAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cDefinedAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cDefinedDEFINEDTerminalRuleCall_1_1_0_0 = (RuleCall)cDefinedAssignment_1_1_0.eContents().get(0);
		private final RuleCall cSKW_LEFTPARENTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final Assignment cIdAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cIdIDTerminalRuleCall_1_1_2_0 = (RuleCall)cIdAssignment_1_1_2.eContents().get(0);
		private final RuleCall cSKW_RIGHTPARENTerminalRuleCall_1_1_3 = (RuleCall)cGroup_1_1.eContents().get(3);
		private final Assignment cConstAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cConstConstant1ParserRuleCall_1_2_0 = (RuleCall)cConstAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final RuleCall cSKW_LEFTPARENTerminalRuleCall_1_3_0 = (RuleCall)cGroup_1_3.eContents().get(0);
		private final Assignment cExprAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_3_1_0 = (RuleCall)cExprAssignment_1_3_1.eContents().get(0);
		private final RuleCall cSKW_RIGHTPARENTerminalRuleCall_1_3_2 = (RuleCall)cGroup_1_3.eContents().get(2);
		
		//// expressions
		//PrimaryExpression Expression:
		//	{PrimaryExpression} (defined?=DEFINED? id=ID
		//	| defined?=DEFINED? SKW_LEFTPAREN id=ID SKW_RIGHTPAREN
		//	| const=Constant1
		//	//|	string+=STRING_LITERAL+ // reachable over Constant!
		//	| SKW_LEFTPAREN expr=Expression SKW_RIGHTPAREN)
		@Override public ParserRule getRule() { return rule; }
		
		//{PrimaryExpression} (defined?=DEFINED? id=ID | defined?=DEFINED? SKW_LEFTPAREN id=ID SKW_RIGHTPAREN | const=Constant1 //|	string+=STRING_LITERAL+ // reachable over Constant!
		//| SKW_LEFTPAREN expr=Expression SKW_RIGHTPAREN)
		public Group getGroup() { return cGroup; }
		
		//{PrimaryExpression}
		public Action getPrimaryExpressionAction_0() { return cPrimaryExpressionAction_0; }
		
		//(defined?=DEFINED? id=ID | defined?=DEFINED? SKW_LEFTPAREN id=ID SKW_RIGHTPAREN | const=Constant1 //|	string+=STRING_LITERAL+ // reachable over Constant!
		//| SKW_LEFTPAREN expr=Expression SKW_RIGHTPAREN)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//defined?=DEFINED? id=ID
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//defined?=DEFINED?
		public Assignment getDefinedAssignment_1_0_0() { return cDefinedAssignment_1_0_0; }
		
		//DEFINED
		public RuleCall getDefinedDEFINEDTerminalRuleCall_1_0_0_0() { return cDefinedDEFINEDTerminalRuleCall_1_0_0_0; }
		
		//id=ID
		public Assignment getIdAssignment_1_0_1() { return cIdAssignment_1_0_1; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0_1_0() { return cIdIDTerminalRuleCall_1_0_1_0; }
		
		//defined?=DEFINED? SKW_LEFTPAREN id=ID SKW_RIGHTPAREN
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//defined?=DEFINED?
		public Assignment getDefinedAssignment_1_1_0() { return cDefinedAssignment_1_1_0; }
		
		//DEFINED
		public RuleCall getDefinedDEFINEDTerminalRuleCall_1_1_0_0() { return cDefinedDEFINEDTerminalRuleCall_1_1_0_0; }
		
		//SKW_LEFTPAREN
		public RuleCall getSKW_LEFTPARENTerminalRuleCall_1_1_1() { return cSKW_LEFTPARENTerminalRuleCall_1_1_1; }
		
		//id=ID
		public Assignment getIdAssignment_1_1_2() { return cIdAssignment_1_1_2; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_1_2_0() { return cIdIDTerminalRuleCall_1_1_2_0; }
		
		//SKW_RIGHTPAREN
		public RuleCall getSKW_RIGHTPARENTerminalRuleCall_1_1_3() { return cSKW_RIGHTPARENTerminalRuleCall_1_1_3; }
		
		//const=Constant1
		public Assignment getConstAssignment_1_2() { return cConstAssignment_1_2; }
		
		//Constant1
		public RuleCall getConstConstant1ParserRuleCall_1_2_0() { return cConstConstant1ParserRuleCall_1_2_0; }
		
		//SKW_LEFTPAREN expr=Expression SKW_RIGHTPAREN
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//SKW_LEFTPAREN
		public RuleCall getSKW_LEFTPARENTerminalRuleCall_1_3_0() { return cSKW_LEFTPARENTerminalRuleCall_1_3_0; }
		
		//expr=Expression
		public Assignment getExprAssignment_1_3_1() { return cExprAssignment_1_3_1; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_3_1_0() { return cExprExpressionParserRuleCall_1_3_1_0; }
		
		//SKW_RIGHTPAREN
		public RuleCall getSKW_RIGHTPARENTerminalRuleCall_1_3_2() { return cSKW_RIGHTPARENTerminalRuleCall_1_3_2; }
	}
	
	
	private final ModelElements pModel;
	private final TranslationUnitElements pTranslationUnit;
	private final GroupOptElements pGroupOpt;
	private final GroupOptTempElements pGroupOptTemp;
	private final PreprocessorDirectivesElements pPreprocessorDirectives;
	private final IncludeDirectiveElements pIncludeDirective;
	private final DefineDirectiveElements pDefineDirective;
	private final DefineObjectMacroElements pDefineObjectMacro;
	private final DefineFunctionLikeMacroElements pDefineFunctionLikeMacro;
	private final IdentifierListElements pIdentifierList;
	private final ErrorDirectiveElements pErrorDirective;
	private final WarningDirectiveElements pWarningDirective;
	private final UnDefineDirectiveElements pUnDefineDirective;
	private final ConditionalDirectiveElements pConditionalDirective;
	private final IfConditionalElements pIfConditional;
	private final IfDefConditionalElements pIfDefConditional;
	private final IfNotDefConditionalElements pIfNotDefConditional;
	private final ElIfConditionalElements pElIfConditional;
	private final ElseConditionalElements pElseConditional;
	private final PragmaDirectiveElements pPragmaDirective;
	private final NullDirectiveElements pNullDirective;
	private final NewLineLineElements pNewLineLine;
	private final CodeElements pCode;
	private final MyCodeElements pMyCode;
	private final MyDefineLineElements pMyDefineLine;
	private final MyCodeLineElements pMyCodeLine;
	private final MyCodeLineExtendedElements pMyCodeLineExtended;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final TerminalRule tHASH;
	private final TerminalRule tINCLUDE;
	private final TerminalRule tDEFINE;
	private final TerminalRule tERROR;
	private final TerminalRule tWARNING;
	private final TerminalRule tUNDEF;
	private final TerminalRule tIF;
	private final TerminalRule tDEFINED;
	private final TerminalRule tIFDEF;
	private final TerminalRule tIFNOTDEF;
	private final TerminalRule tELIF;
	private final TerminalRule tELSE;
	private final TerminalRule tENDIF;
	private final TerminalRule tPRAGMA;
	private final TerminalRule tEND_OF_FILE;
	private final TerminalRule tNEWLINE;
	
	private final Grammar grammar;
	
	private final CommonGrammarAccess gaCommon;

	@Inject
	public PreprocessGrammarAccess(GrammarProvider grammarProvider,
			CommonGrammarAccess gaCommon) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaCommon = gaCommon;
		this.pModel = new ModelElements();
		this.pTranslationUnit = new TranslationUnitElements();
		this.pGroupOpt = new GroupOptElements();
		this.pGroupOptTemp = new GroupOptTempElements();
		this.pPreprocessorDirectives = new PreprocessorDirectivesElements();
		this.pIncludeDirective = new IncludeDirectiveElements();
		this.pDefineDirective = new DefineDirectiveElements();
		this.pDefineObjectMacro = new DefineObjectMacroElements();
		this.pDefineFunctionLikeMacro = new DefineFunctionLikeMacroElements();
		this.pIdentifierList = new IdentifierListElements();
		this.pErrorDirective = new ErrorDirectiveElements();
		this.pWarningDirective = new WarningDirectiveElements();
		this.pUnDefineDirective = new UnDefineDirectiveElements();
		this.pConditionalDirective = new ConditionalDirectiveElements();
		this.pIfConditional = new IfConditionalElements();
		this.pIfDefConditional = new IfDefConditionalElements();
		this.pIfNotDefConditional = new IfNotDefConditionalElements();
		this.pElIfConditional = new ElIfConditionalElements();
		this.pElseConditional = new ElseConditionalElements();
		this.pPragmaDirective = new PragmaDirectiveElements();
		this.pNullDirective = new NullDirectiveElements();
		this.pNewLineLine = new NewLineLineElements();
		this.pCode = new CodeElements();
		this.pMyCode = new MyCodeElements();
		this.pMyDefineLine = new MyDefineLineElements();
		this.pMyCodeLine = new MyCodeLineElements();
		this.pMyCodeLineExtended = new MyCodeLineExtendedElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.tHASH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.HASH");
		this.tINCLUDE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.INCLUDE");
		this.tDEFINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.DEFINE");
		this.tERROR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.ERROR");
		this.tWARNING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.WARNING");
		this.tUNDEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.UNDEF");
		this.tIF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.IF");
		this.tDEFINED = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.DEFINED");
		this.tIFDEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.IFDEF");
		this.tIFNOTDEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.IFNOTDEF");
		this.tELIF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.ELIF");
		this.tELSE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.ELSE");
		this.tENDIF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.ENDIF");
		this.tPRAGMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.PRAGMA");
		this.tEND_OF_FILE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.END_OF_FILE");
		this.tNEWLINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.preprocess.Preprocess.NEWLINE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("at.jku.weiner.c.preprocess.Preprocess".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public CommonGrammarAccess getCommonGrammarAccess() {
		return gaCommon;
	}

	
	//Model:
	//	{Model} units+=TranslationUnit;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//TranslationUnit:
	//	{TranslationUnit} group=GroupOpt;
	public TranslationUnitElements getTranslationUnitAccess() {
		return pTranslationUnit;
	}
	
	public ParserRule getTranslationUnitRule() {
		return getTranslationUnitAccess().getRule();
	}
	
	//GroupOpt:
	//	{GroupOpt} (lines+=GroupOptTemp
	//	NEWLINE)*;
	public GroupOptElements getGroupOptAccess() {
		return pGroupOpt;
	}
	
	public ParserRule getGroupOptRule() {
		return getGroupOptAccess().getRule();
	}
	
	//GroupOptTemp SourceCodeLine:
	//	PreprocessorDirectives
	//	| NewLineLine
	//	| Code
	public GroupOptTempElements getGroupOptTempAccess() {
		return pGroupOptTemp;
	}
	
	public ParserRule getGroupOptTempRule() {
		return getGroupOptTempAccess().getRule();
	}
	
	//PreprocessorDirectives SourceCodeLine:
	//	{PreprocessorDirectives} WHITESPACE* HASH WHITESPACE* (directive=IncludeDirective
	//	| directive=DefineDirective
	//	| directive=ErrorDirective
	//	| directive=WarningDirective
	//	| directive=UnDefineDirective
	//	| directive=ConditionalDirective
	//	| directive=PragmaDirective
	//	| directive=NullDirective)
	public PreprocessorDirectivesElements getPreprocessorDirectivesAccess() {
		return pPreprocessorDirectives;
	}
	
	public ParserRule getPreprocessorDirectivesRule() {
		return getPreprocessorDirectivesAccess().getRule();
	}
	
	//IncludeDirective:
	//	{IncludeDirective} INCLUDE WHITESPACE+ string=MyCodeLine;
	public IncludeDirectiveElements getIncludeDirectiveAccess() {
		return pIncludeDirective;
	}
	
	public ParserRule getIncludeDirectiveRule() {
		return getIncludeDirectiveAccess().getRule();
	}
	
	//DefineDirective:
	//	DefineObjectMacro
	//	| DefineFunctionLikeMacro;
	public DefineDirectiveElements getDefineDirectiveAccess() {
		return pDefineDirective;
	}
	
	public ParserRule getDefineDirectiveRule() {
		return getDefineDirectiveAccess().getRule();
	}
	
	//DefineObjectMacro DefineDirective:
	//	{DefineObjectMacro} DEFINE WHITESPACE+ id=ID (WHITESPACE+ string=MyDefineLine)?
	public DefineObjectMacroElements getDefineObjectMacroAccess() {
		return pDefineObjectMacro;
	}
	
	public ParserRule getDefineObjectMacroRule() {
		return getDefineObjectMacroAccess().getRule();
	}
	
	//DefineFunctionLikeMacro DefineDirective:
	//	{DefineFunctionLikeMacro} DEFINE WHITESPACE+ id=ID
	//	SKW_LEFTPAREN WHITESPACE*
	//	list=IdentifierList?
	//	SKW_RIGHTPAREN
	//	WHITESPACE+
	//	string=MyDefineLine
	public DefineFunctionLikeMacroElements getDefineFunctionLikeMacroAccess() {
		return pDefineFunctionLikeMacro;
	}
	
	public ParserRule getDefineFunctionLikeMacroRule() {
		return getDefineFunctionLikeMacroAccess().getRule();
	}
	
	//IdentifierList:
	//	{IdentifierList} id+=ID (SKW_COMMA WHITESPACE* id+=ID)*;
	public IdentifierListElements getIdentifierListAccess() {
		return pIdentifierList;
	}
	
	public ParserRule getIdentifierListRule() {
		return getIdentifierListAccess().getRule();
	}
	
	//ErrorDirective:
	//	{ErrorDirective} ERROR WHITESPACE+ msg=MyCodeLine;
	public ErrorDirectiveElements getErrorDirectiveAccess() {
		return pErrorDirective;
	}
	
	public ParserRule getErrorDirectiveRule() {
		return getErrorDirectiveAccess().getRule();
	}
	
	//WarningDirective:
	//	{WarningDirective} WARNING WHITESPACE+ msg=MyCodeLine;
	public WarningDirectiveElements getWarningDirectiveAccess() {
		return pWarningDirective;
	}
	
	public ParserRule getWarningDirectiveRule() {
		return getWarningDirectiveAccess().getRule();
	}
	
	//UnDefineDirective:
	//	{UnDefineDirective} UNDEF WHITESPACE+ id=ID;
	public UnDefineDirectiveElements getUnDefineDirectiveAccess() {
		return pUnDefineDirective;
	}
	
	public ParserRule getUnDefineDirectiveRule() {
		return getUnDefineDirectiveAccess().getRule();
	}
	
	//ConditionalDirective:
	//	{ConditionalDirective} conditional=(IfConditional
	//	| IfDefConditional
	//	| IfNotDefConditional) elifs+=ElIfConditional*
	//	else=ElseConditional?
	//	WHITESPACE* HASH WHITESPACE* ENDIF WHITESPACE*;
	public ConditionalDirectiveElements getConditionalDirectiveAccess() {
		return pConditionalDirective;
	}
	
	public ParserRule getConditionalDirectiveRule() {
		return getConditionalDirectiveAccess().getRule();
	}
	
	//IfConditional:
	//	{IfConditional} IF WHITESPACE+ expression=Common::ConstantExpression NEWLINE
	//	group=GroupOpt;
	public IfConditionalElements getIfConditionalAccess() {
		return pIfConditional;
	}
	
	public ParserRule getIfConditionalRule() {
		return getIfConditionalAccess().getRule();
	}
	
	//IfDefConditional:
	//	{IfDefConditional} IFDEF WHITESPACE+ id=ID NEWLINE
	//	group=GroupOpt;
	public IfDefConditionalElements getIfDefConditionalAccess() {
		return pIfDefConditional;
	}
	
	public ParserRule getIfDefConditionalRule() {
		return getIfDefConditionalAccess().getRule();
	}
	
	//IfNotDefConditional:
	//	{IfNotDefConditional} IFNOTDEF WHITESPACE+ id=ID NEWLINE
	//	group=GroupOpt;
	public IfNotDefConditionalElements getIfNotDefConditionalAccess() {
		return pIfNotDefConditional;
	}
	
	public ParserRule getIfNotDefConditionalRule() {
		return getIfNotDefConditionalAccess().getRule();
	}
	
	//ElIfConditional:
	//	{ElIfConditional} (WHITESPACE* HASH WHITESPACE* ELIF) WHITESPACE+ expression=Common::ConstantExpression NEWLINE
	//	group=GroupOpt;
	public ElIfConditionalElements getElIfConditionalAccess() {
		return pElIfConditional;
	}
	
	public ParserRule getElIfConditionalRule() {
		return getElIfConditionalAccess().getRule();
	}
	
	//ElseConditional:
	//	{ElseConditional} WHITESPACE* HASH WHITESPACE* ELSE NEWLINE
	//	group=GroupOpt;
	public ElseConditionalElements getElseConditionalAccess() {
		return pElseConditional;
	}
	
	public ParserRule getElseConditionalRule() {
		return getElseConditionalAccess().getRule();
	}
	
	//PragmaDirective:
	//	{PragmaDirective} PRAGMA;
	public PragmaDirectiveElements getPragmaDirectiveAccess() {
		return pPragmaDirective;
	}
	
	public ParserRule getPragmaDirectiveRule() {
		return getPragmaDirectiveAccess().getRule();
	}
	
	//NullDirective:
	//	{NullDirective};
	public NullDirectiveElements getNullDirectiveAccess() {
		return pNullDirective;
	}
	
	public ParserRule getNullDirectiveRule() {
		return getNullDirectiveAccess().getRule();
	}
	
	//NewLineLine SourceCodeLine:
	//	{NewLineLine}
	public NewLineLineElements getNewLineLineAccess() {
		return pNewLineLine;
	}
	
	public ParserRule getNewLineLineRule() {
		return getNewLineLineAccess().getRule();
	}
	
	//Code SourceCodeLine:
	//	{Code} code=MyCodeLineExtended
	public CodeElements getCodeAccess() {
		return pCode;
	}
	
	public ParserRule getCodeRule() {
		return getCodeAccess().getRule();
	}
	
	//MyCode:
	//	ID | SPECIAL | INCLUDE | DEFINE | ERROR | PRAGMA
	//	| IFDEF | ENDIF | IFNOTDEF | IF | DEFINED
	//	| SpecialKeywords | Constant1;
	public MyCodeElements getMyCodeAccess() {
		return pMyCode;
	}
	
	public ParserRule getMyCodeRule() {
		return getMyCodeAccess().getRule();
	}
	
	//MyDefineLine:
	//	MyCode | WHITESPACE | HASH*;
	public MyDefineLineElements getMyDefineLineAccess() {
		return pMyDefineLine;
	}
	
	public ParserRule getMyDefineLineRule() {
		return getMyDefineLineAccess().getRule();
	}
	
	//MyCodeLine:
	//	MyCode | WHITESPACE+;
	public MyCodeLineElements getMyCodeLineAccess() {
		return pMyCodeLine;
	}
	
	public ParserRule getMyCodeLineRule() {
		return getMyCodeLineAccess().getRule();
	}
	
	//MyCodeLineExtended:
	//	WHITESPACE* (MyCode (MyCodeLine | HASH)*)?;
	public MyCodeLineExtendedElements getMyCodeLineExtendedAccess() {
		return pMyCodeLineExtended;
	}
	
	public ParserRule getMyCodeLineExtendedRule() {
		return getMyCodeLineExtendedAccess().getRule();
	}
	
	//// expressions
	//PrimaryExpression Expression:
	//	{PrimaryExpression} (defined?=DEFINED? id=ID
	//	| defined?=DEFINED? SKW_LEFTPAREN id=ID SKW_RIGHTPAREN
	//	| const=Constant1
	//	//|	string+=STRING_LITERAL+ // reachable over Constant!
	//	| SKW_LEFTPAREN expr=Expression SKW_RIGHTPAREN)
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//terminal HASH:
	//	'#';
	public TerminalRule getHASHRule() {
		return tHASH;
	}
	
	//terminal INCLUDE:
	//	'include';
	public TerminalRule getINCLUDERule() {
		return tINCLUDE;
	}
	
	//terminal DEFINE:
	//	'define';
	public TerminalRule getDEFINERule() {
		return tDEFINE;
	}
	
	//terminal ERROR:
	//	'error';
	public TerminalRule getERRORRule() {
		return tERROR;
	}
	
	//terminal WARNING:
	//	'warning';
	public TerminalRule getWARNINGRule() {
		return tWARNING;
	}
	
	//terminal UNDEF:
	//	'undef';
	public TerminalRule getUNDEFRule() {
		return tUNDEF;
	}
	
	//terminal IF:
	//	'if';
	public TerminalRule getIFRule() {
		return tIF;
	}
	
	//terminal DEFINED:
	//	'defined';
	public TerminalRule getDEFINEDRule() {
		return tDEFINED;
	}
	
	//terminal IFDEF:
	//	'ifdef';
	public TerminalRule getIFDEFRule() {
		return tIFDEF;
	}
	
	//terminal IFNOTDEF:
	//	'ifndef';
	public TerminalRule getIFNOTDEFRule() {
		return tIFNOTDEF;
	}
	
	//terminal ELIF:
	//	'elif';
	public TerminalRule getELIFRule() {
		return tELIF;
	}
	
	//terminal ELSE:
	//	'else';
	public TerminalRule getELSERule() {
		return tELSE;
	}
	
	//terminal ENDIF:
	//	'endif';
	public TerminalRule getENDIFRule() {
		return tENDIF;
	}
	
	//terminal PRAGMA:
	//	'pragma';
	public TerminalRule getPRAGMARule() {
		return tPRAGMA;
	}
	
	//terminal END_OF_FILE:
	//	EOF;
	public TerminalRule getEND_OF_FILERule() {
		return tEND_OF_FILE;
	}
	
	//terminal NEWLINE:
	//	Common::NEWLINE | END_OF_FILE;
	public TerminalRule getNEWLINERule() {
		return tNEWLINE;
	}
	
	//Expression hidden(WHITESPACE, BLOCK_COMMENT, LINE_COMMENT, LINEBREAK):
	//	{Expression} expression=ConditionalExpression;
	public CommonGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaCommon.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//ConstantExpression Expression hidden(WHITESPACE, BLOCK_COMMENT, LINE_COMMENT, LINEBREAK):
	//	{ConstantExpression} expr=ConditionalExpression
	public CommonGrammarAccess.ConstantExpressionElements getConstantExpressionAccess() {
		return gaCommon.getConstantExpressionAccess();
	}
	
	public ParserRule getConstantExpressionRule() {
		return getConstantExpressionAccess().getRule();
	}
	
	//ConditionalExpression Expression:
	//	{ConditionalExpression} expr=LogicalOrExpression (SKW_QUESTION qExpr=Expression SKW_COLON
	//	cExpr=ConditionalExpression)?
	public CommonGrammarAccess.ConditionalExpressionElements getConditionalExpressionAccess() {
		return gaCommon.getConditionalExpressionAccess();
	}
	
	public ParserRule getConditionalExpressionRule() {
		return getConditionalExpressionAccess().getRule();
	}
	
	//LogicalOrExpression Expression:
	//	{LogicalOrExpression} expr+=LogicalAndExpression (SKW_OROR expr+=LogicalAndExpression)*
	public CommonGrammarAccess.LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return gaCommon.getLogicalOrExpressionAccess();
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}
	
	//LogicalAndExpression Expression:
	//	{LogicalAndExpression} expr+=InclusiveOrExpression (SKW_ANDAND expr+=InclusiveOrExpression)*
	public CommonGrammarAccess.LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return gaCommon.getLogicalAndExpressionAccess();
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}
	
	//InclusiveOrExpression Expression:
	//	{InclusiveOrExpression} expr+=ExclusiveOrExpression (SKW_OR expr+=ExclusiveOrExpression)*
	public CommonGrammarAccess.InclusiveOrExpressionElements getInclusiveOrExpressionAccess() {
		return gaCommon.getInclusiveOrExpressionAccess();
	}
	
	public ParserRule getInclusiveOrExpressionRule() {
		return getInclusiveOrExpressionAccess().getRule();
	}
	
	//ExclusiveOrExpression Expression:
	//	{ExclusiveOrExpression} expr+=AndExpression (SKW_CARET expr+=AndExpression)*
	public CommonGrammarAccess.ExclusiveOrExpressionElements getExclusiveOrExpressionAccess() {
		return gaCommon.getExclusiveOrExpressionAccess();
	}
	
	public ParserRule getExclusiveOrExpressionRule() {
		return getExclusiveOrExpressionAccess().getRule();
	}
	
	//AndExpression Expression:
	//	{AndExpression} expr+=EqualityExpression (SKW_AND expr+=EqualityExpression)*
	public CommonGrammarAccess.AndExpressionElements getAndExpressionAccess() {
		return gaCommon.getAndExpressionAccess();
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	//EqualityExpression Expression:
	//	{EqualityExpression} expr+=RelationalExpression ((op+=SKW_EQUAL
	//	| op+=SKW_NOTEQUAL) expr+=RelationalExpression)*
	public CommonGrammarAccess.EqualityExpressionElements getEqualityExpressionAccess() {
		return gaCommon.getEqualityExpressionAccess();
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}
	
	//RelationalExpression Expression:
	//	{RelationalExpression} expr+=ShiftExpression ((op+=SKW_LESS
	//	| op+=SKW_GREATER
	//	| op+=SKW_LESSEQUAL
	//	| op+=SKW_GREATEREQUAL) expr+=ShiftExpression)*
	public CommonGrammarAccess.RelationalExpressionElements getRelationalExpressionAccess() {
		return gaCommon.getRelationalExpressionAccess();
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}
	
	//ShiftExpression Expression:
	//	{ShiftExpression} expr+=AdditiveExpression ((op+=SKW_LEFTSHIFT
	//	| op+=SKW_RIGHTSHIFT) expr+=AdditiveExpression)*
	public CommonGrammarAccess.ShiftExpressionElements getShiftExpressionAccess() {
		return gaCommon.getShiftExpressionAccess();
	}
	
	public ParserRule getShiftExpressionRule() {
		return getShiftExpressionAccess().getRule();
	}
	
	//AdditiveExpression Expression:
	//	{AdditiveExpression} expr+=MultiplicativeExpression ((op+=SKW_PLUS
	//	| op+=SKW_MINUS) expr+=MultiplicativeExpression)*
	public CommonGrammarAccess.AdditiveExpressionElements getAdditiveExpressionAccess() {
		return gaCommon.getAdditiveExpressionAccess();
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}
	
	//MultiplicativeExpression Expression:
	//	{MultiplicativeExpression} expr+=CastExpression ((op+=SKW_STAR
	//	| op+=SKW_DIV
	//	| op+=SKW_MOD) expr+=CastExpression)*
	public CommonGrammarAccess.MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return gaCommon.getMultiplicativeExpressionAccess();
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}
	
	//CastExpression Expression:
	//	{CastExpression} expr=UnaryExpression
	public CommonGrammarAccess.CastExpressionElements getCastExpressionAccess() {
		return gaCommon.getCastExpressionAccess();
	}
	
	public ParserRule getCastExpressionRule() {
		return getCastExpressionAccess().getRule();
	}
	
	//UnaryExpression Expression:
	//	{UnaryExpression} (expr=PostfixExpression
	//	//|	plusplus=SKW_PLUSPLUS expr=UnaryExpression
	//	//|	minusminus=SKW_MINUSMINUS expr=UnaryExpression
	//	| op=UnaryOperator expr=CastExpression
	//	//|	sizeOf=SKW_SIZEOF SKW_LEFTPAREN typeName=TypeName SKW_RIGHTPAREN
	//	//|	sizeOf=SKW_SIZEOF expr=UnaryExpression 
	//	//|	ALIGNOF LEFTPAREN typeName=typeName RIGHTPAREN
	//	//|	andand=SKW_ANDAND id=ID // GCC extension address of label
	//)
	public CommonGrammarAccess.UnaryExpressionElements getUnaryExpressionAccess() {
		return gaCommon.getUnaryExpressionAccess();
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}
	
	//UnaryOperator:
	//	{UnaryOperator} op=SKW_AND
	//	| op=SKW_STAR
	//	| op=SKW_PLUS
	//	| op=SKW_MINUS
	//	| op=SKW_TILDE
	//	| op=SKW_NOT;
	public CommonGrammarAccess.UnaryOperatorElements getUnaryOperatorAccess() {
		return gaCommon.getUnaryOperatorAccess();
	}
	
	public ParserRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}
	
	//PostfixExpression Expression:
	//	{PostfixExpression} (expr=super::PrimaryExpression
	//	/ *	(
	//	|	('__extension__' LEFTPAREN typeName RIGHTPAREN LEFTBRACE initializerList=initializerList) 
	//			(COMMA? RIGHTBRACE)
	//	)
	//	* /
	//	suffix+=PostfixExpressionSuffixArgument
	//	//|	suffix+=PostfixExpressionSuffixDot
	//	//|	suffix+=PostfixExpressionSuffixArrow
	//	//	suffix+=PostfixExpressionSuffixPlusPlus
	//	//|	suffix+=PostfixExpressionSuffixMinusMinus
	// *)
	public CommonGrammarAccess.PostfixExpressionElements getPostfixExpressionAccess() {
		return gaCommon.getPostfixExpressionAccess();
	}
	
	public ParserRule getPostfixExpressionRule() {
		return getPostfixExpressionAccess().getRule();
	}
	
	/// *
	//PostfixExpressionSuffixArray returns PostfixExpressionSuffix:
	//	{PostfixExpressionSuffixArray}
	//	SKW_LEFTBRACKET arrayExpr=Expression SKW_RIGHTBRACKET
	//;
	// * / PostfixExpressionSuffixArgument PostfixExpressionSuffix:
	//	{PostfixExpressionSuffixArgument} SKW_LEFTPAREN argumentExpressionList=ArgumentExpressionList? SKW_RIGHTPAREN
	public CommonGrammarAccess.PostfixExpressionSuffixArgumentElements getPostfixExpressionSuffixArgumentAccess() {
		return gaCommon.getPostfixExpressionSuffixArgumentAccess();
	}
	
	public ParserRule getPostfixExpressionSuffixArgumentRule() {
		return getPostfixExpressionSuffixArgumentAccess().getRule();
	}
	
	/// *
	//PostfixExpressionSuffixDot returns PostfixExpressionSuffix:
	//	{PostfixExpressionSuffixDot}
	//	SKW_DOT id=ID
	//;
	//
	//PostfixExpressionSuffixArrow returns PostfixExpressionSuffix:
	//	{PostfixExpressionSuffixArrow}
	//	SKW_ARROW id=ID
	//;
	//
	//
	//PostfixExpressionSuffixPlusPlus returns PostfixExpressionSuffix:
	//	{PostfixExpressionSuffixPlusPlus}
	//	SKW_PLUSPLUS
	//;
	//
	//PostfixExpressionSuffixMinusMinus returns PostfixExpressionSuffix:
	//	{PostfixExpressionSuffixMinusMinus}
	//	SKW_MINUSMINUS
	//;
	// * / ArgumentExpressionList:
	//	expr+=ConditionalExpression (SKW_COMMA expr+=ConditionalExpression)*;
	public CommonGrammarAccess.ArgumentExpressionListElements getArgumentExpressionListAccess() {
		return gaCommon.getArgumentExpressionListAccess();
	}
	
	public ParserRule getArgumentExpressionListRule() {
		return getArgumentExpressionListAccess().getRule();
	}
	
	//Constant1:
	//	HEX_LITERAL
	//	| OCTAL_LITERAL
	//	| DECIMAL_LITERAL
	//	| CHAR_LITERAL
	//	| STRING_LITERAL
	//	| FLOAT_LITERAL
	//	| BIN_LITERAL;
	public CommonGrammarAccess.Constant1Elements getConstant1Access() {
		return gaCommon.getConstant1Access();
	}
	
	public ParserRule getConstant1Rule() {
		return getConstant1Access().getRule();
	}
	
	//Constant2:
	//	{Constant2} (hex=HEX_LITERAL
	//	| oct=OCTAL_LITERAL
	//	| dec=DECIMAL_LITERAL
	//	| ch=CHAR_LITERAL
	//	| str=STRING_LITERAL
	//	| float=FLOAT_LITERAL
	//	| bin=BIN_LITERAL);
	public CommonGrammarAccess.Constant2Elements getConstant2Access() {
		return gaCommon.getConstant2Access();
	}
	
	public ParserRule getConstant2Rule() {
		return getConstant2Access().getRule();
	}
	
	//// keywords
	//// special keywords
	//SpecialKeywords:
	//	SKW_AND
	//	| SKW_ANDAND
	//	| SKW_ASSIGN
	//	| SKW_BACKSLASH
	//	| SKW_CARET
	//	| SKW_COMMA
	//	| SKW_COLON
	//	| SKW_DIV
	//	| SKW_DOT
	//	| SKW_DOUBLEQUOTE
	//	| SKW_EQUAL
	//	| SKW_GREATER
	//	| SKW_GREATEREQUAL
	//	| SKW_LEFTBRACE
	//	| SKW_LEFTBRACKET
	//	| SKW_LEFTPAREN
	//	| SKW_LEFTSHIFT
	//	| SKW_LESS
	//	| SKW_LESSEQUAL
	//	| SKW_MINUS
	//	| SKW_MINUSMINUS
	//	| SKW_MOD
	//	| SKW_NOT
	//	| SKW_NOTEQUAL
	//	| SKW_OR
	//	| SKW_OROR
	//	| SKW_PLUS
	//	| SKW_PLUSPLUS
	//	| SKW_QUESTION
	//	| SKW_RIGHTBRACE
	//	| SKW_RIGHTBRACKET
	//	| SKW_RIGHTPAREN
	//	| SKW_RIGHTSHIFT
	//	| SKW_SEMI
	//	| SKW_SINGLEQUOTE
	//	| SKW_STAR
	//	| SKW_TILDE;
	public CommonGrammarAccess.SpecialKeywordsElements getSpecialKeywordsAccess() {
		return gaCommon.getSpecialKeywordsAccess();
	}
	
	public ParserRule getSpecialKeywordsRule() {
		return getSpecialKeywordsAccess().getRule();
	}
	
	//terminal SKW_AND:
	//	'&';
	public TerminalRule getSKW_ANDRule() {
		return gaCommon.getSKW_ANDRule();
	}
	
	//terminal SKW_ANDAND:
	//	SKW_AND SKW_AND;
	public TerminalRule getSKW_ANDANDRule() {
		return gaCommon.getSKW_ANDANDRule();
	}
	
	//terminal SKW_ASSIGN:
	//	'=';
	public TerminalRule getSKW_ASSIGNRule() {
		return gaCommon.getSKW_ASSIGNRule();
	}
	
	//terminal SKW_BACKSLASH:
	//	'\\';
	public TerminalRule getSKW_BACKSLASHRule() {
		return gaCommon.getSKW_BACKSLASHRule();
	}
	
	//terminal SKW_CARET:
	//	'^';
	public TerminalRule getSKW_CARETRule() {
		return gaCommon.getSKW_CARETRule();
	}
	
	//terminal SKW_COMMA:
	//	',';
	public TerminalRule getSKW_COMMARule() {
		return gaCommon.getSKW_COMMARule();
	}
	
	//terminal SKW_COLON:
	//	':';
	public TerminalRule getSKW_COLONRule() {
		return gaCommon.getSKW_COLONRule();
	}
	
	//terminal SKW_DIV:
	//	'/';
	public TerminalRule getSKW_DIVRule() {
		return gaCommon.getSKW_DIVRule();
	}
	
	//terminal fragment SKW_DOLLAR:
	//	'$';
	public TerminalRule getSKW_DOLLARRule() {
		return gaCommon.getSKW_DOLLARRule();
	}
	
	//terminal SKW_DOT:
	//	'.';
	public TerminalRule getSKW_DOTRule() {
		return gaCommon.getSKW_DOTRule();
	}
	
	//terminal SKW_DOUBLEQUOTE:
	//	'"';
	public TerminalRule getSKW_DOUBLEQUOTERule() {
		return gaCommon.getSKW_DOUBLEQUOTERule();
	}
	
	//terminal SKW_EQUAL:
	//	SKW_ASSIGN SKW_ASSIGN;
	public TerminalRule getSKW_EQUALRule() {
		return gaCommon.getSKW_EQUALRule();
	}
	
	//terminal SKW_GREATER:
	//	'>';
	public TerminalRule getSKW_GREATERRule() {
		return gaCommon.getSKW_GREATERRule();
	}
	
	//terminal SKW_GREATEREQUAL:
	//	SKW_GREATER SKW_ASSIGN;
	public TerminalRule getSKW_GREATEREQUALRule() {
		return gaCommon.getSKW_GREATEREQUALRule();
	}
	
	//terminal SKW_LEFTBRACE:
	//	'{';
	public TerminalRule getSKW_LEFTBRACERule() {
		return gaCommon.getSKW_LEFTBRACERule();
	}
	
	//terminal SKW_LEFTBRACKET:
	//	'[';
	public TerminalRule getSKW_LEFTBRACKETRule() {
		return gaCommon.getSKW_LEFTBRACKETRule();
	}
	
	//terminal SKW_LEFTPAREN:
	//	'(';
	public TerminalRule getSKW_LEFTPARENRule() {
		return gaCommon.getSKW_LEFTPARENRule();
	}
	
	//terminal SKW_LEFTSHIFT:
	//	SKW_LESS SKW_LESS;
	public TerminalRule getSKW_LEFTSHIFTRule() {
		return gaCommon.getSKW_LEFTSHIFTRule();
	}
	
	//terminal SKW_LESS:
	//	'<';
	public TerminalRule getSKW_LESSRule() {
		return gaCommon.getSKW_LESSRule();
	}
	
	//terminal SKW_LESSEQUAL:
	//	SKW_LESS SKW_ASSIGN;
	public TerminalRule getSKW_LESSEQUALRule() {
		return gaCommon.getSKW_LESSEQUALRule();
	}
	
	//terminal SKW_MINUS:
	//	'-';
	public TerminalRule getSKW_MINUSRule() {
		return gaCommon.getSKW_MINUSRule();
	}
	
	//terminal SKW_MINUSMINUS:
	//	SKW_MINUS SKW_MINUS;
	public TerminalRule getSKW_MINUSMINUSRule() {
		return gaCommon.getSKW_MINUSMINUSRule();
	}
	
	//terminal SKW_MOD:
	//	'%';
	public TerminalRule getSKW_MODRule() {
		return gaCommon.getSKW_MODRule();
	}
	
	//terminal SKW_NOT:
	//	'!';
	public TerminalRule getSKW_NOTRule() {
		return gaCommon.getSKW_NOTRule();
	}
	
	//terminal SKW_NOTEQUAL:
	//	SKW_NOT SKW_ASSIGN;
	public TerminalRule getSKW_NOTEQUALRule() {
		return gaCommon.getSKW_NOTEQUALRule();
	}
	
	//terminal SKW_OR:
	//	'|';
	public TerminalRule getSKW_ORRule() {
		return gaCommon.getSKW_ORRule();
	}
	
	//terminal SKW_OROR:
	//	SKW_OR SKW_OR;
	public TerminalRule getSKW_ORORRule() {
		return gaCommon.getSKW_ORORRule();
	}
	
	//terminal SKW_PLUS:
	//	'+';
	public TerminalRule getSKW_PLUSRule() {
		return gaCommon.getSKW_PLUSRule();
	}
	
	//terminal SKW_PLUSPLUS:
	//	SKW_PLUS SKW_PLUS;
	public TerminalRule getSKW_PLUSPLUSRule() {
		return gaCommon.getSKW_PLUSPLUSRule();
	}
	
	//terminal SKW_QUESTION:
	//	'?';
	public TerminalRule getSKW_QUESTIONRule() {
		return gaCommon.getSKW_QUESTIONRule();
	}
	
	//terminal SKW_RIGHTBRACE:
	//	'}';
	public TerminalRule getSKW_RIGHTBRACERule() {
		return gaCommon.getSKW_RIGHTBRACERule();
	}
	
	//terminal SKW_RIGHTBRACKET:
	//	']';
	public TerminalRule getSKW_RIGHTBRACKETRule() {
		return gaCommon.getSKW_RIGHTBRACKETRule();
	}
	
	//terminal SKW_RIGHTPAREN:
	//	')';
	public TerminalRule getSKW_RIGHTPARENRule() {
		return gaCommon.getSKW_RIGHTPARENRule();
	}
	
	//terminal SKW_RIGHTSHIFT:
	//	SKW_GREATER SKW_GREATER;
	public TerminalRule getSKW_RIGHTSHIFTRule() {
		return gaCommon.getSKW_RIGHTSHIFTRule();
	}
	
	//terminal SKW_SEMI:
	//	';';
	public TerminalRule getSKW_SEMIRule() {
		return gaCommon.getSKW_SEMIRule();
	}
	
	//terminal SKW_SINGLEQUOTE:
	//	'\'';
	public TerminalRule getSKW_SINGLEQUOTERule() {
		return gaCommon.getSKW_SINGLEQUOTERule();
	}
	
	//terminal SKW_STAR:
	//	'*';
	public TerminalRule getSKW_STARRule() {
		return gaCommon.getSKW_STARRule();
	}
	
	//terminal SKW_TILDE:
	//	'~';
	public TerminalRule getSKW_TILDERule() {
		return gaCommon.getSKW_TILDERule();
	}
	
	//terminal fragment SKW_UNDERSCORE:
	//	'_';
	public TerminalRule getSKW_UNDERSCORERule() {
		return gaCommon.getSKW_UNDERSCORERule();
	}
	
	//terminal ID:
	//	IDENTIFIER;
	public TerminalRule getIDRule() {
		return gaCommon.getIDRule();
	}
	
	//terminal fragment IDENTIFIER:
	//	LETTER (LETTER | '0'..'9')*;
	public TerminalRule getIDENTIFIERRule() {
		return gaCommon.getIDENTIFIERRule();
	}
	
	//terminal fragment LETTER:
	//	SKW_DOLLAR
	//	| 'A'..'Z'
	//	| 'a'..'z'
	//	| SKW_UNDERSCORE;
	public TerminalRule getLETTERRule() {
		return gaCommon.getLETTERRule();
	}
	
	//terminal CHAR_LITERAL:
	//	SKW_SINGLEQUOTE (ESCAPE_SEQUENCE | !(SKW_SINGLEQUOTE | SKW_BACKSLASH)) SKW_SINGLEQUOTE;
	public TerminalRule getCHAR_LITERALRule() {
		return gaCommon.getCHAR_LITERALRule();
	}
	
	//terminal STRING_LITERAL:
	//	SKW_DOUBLEQUOTE (ESCAPE_SEQUENCE | !(SKW_BACKSLASH | SKW_DOUBLEQUOTE))* SKW_DOUBLEQUOTE;
	public TerminalRule getSTRING_LITERALRule() {
		return gaCommon.getSTRING_LITERALRule();
	}
	
	//terminal HEX_LITERAL:
	//	'0' ('x' | 'X') HEX_DIGIT+ INTEGER_TYPE_SUFFIX?;
	public TerminalRule getHEX_LITERALRule() {
		return gaCommon.getHEX_LITERALRule();
	}
	
	//terminal DECIMAL_LITERAL:
	//	('0' | '1'..'9' '0'..'9'*) INTEGER_TYPE_SUFFIX?;
	public TerminalRule getDECIMAL_LITERALRule() {
		return gaCommon.getDECIMAL_LITERALRule();
	}
	
	//terminal OCTAL_LITERAL:
	//	'0' '0'..'7'+ INTEGER_TYPE_SUFFIX?;
	public TerminalRule getOCTAL_LITERALRule() {
		return gaCommon.getOCTAL_LITERALRule();
	}
	
	//terminal BIN_LITERAL:
	//	('0b' | '0B') '0'..'1'+;
	public TerminalRule getBIN_LITERALRule() {
		return gaCommon.getBIN_LITERALRule();
	}
	
	//terminal fragment HEX_DIGIT:
	//	'0'..'9' | 'a'..'f' | 'A'..'F';
	public TerminalRule getHEX_DIGITRule() {
		return gaCommon.getHEX_DIGITRule();
	}
	
	//terminal fragment INTEGER_TYPE_SUFFIX:
	//	('u' | 'U')? ('l' | 'L') | ('u' | 'U') ('l' | 'L')?;
	public TerminalRule getINTEGER_TYPE_SUFFIXRule() {
		return gaCommon.getINTEGER_TYPE_SUFFIXRule();
	}
	
	//terminal FLOAT_LITERAL:
	//	'0'..'9'+ SKW_DOT '0'..'9'* EXPONENT? FLOAT_TYPE_SUFFIX?
	//	| SKW_DOT '0'..'9'+ EXPONENT? FLOAT_TYPE_SUFFIX?
	//	| '0'..'9'+ EXPONENT FLOAT_TYPE_SUFFIX?
	//	| '0'..'9'+ EXPONENT? FLOAT_TYPE_SUFFIX;
	public TerminalRule getFLOAT_LITERALRule() {
		return gaCommon.getFLOAT_LITERALRule();
	}
	
	//terminal fragment EXPONENT:
	//	('e' | 'E') ('+' | '-')? '0'..'9'+;
	public TerminalRule getEXPONENTRule() {
		return gaCommon.getEXPONENTRule();
	}
	
	//terminal fragment FLOAT_TYPE_SUFFIX:
	//	'f' | 'F' | 'd' | 'D';
	public TerminalRule getFLOAT_TYPE_SUFFIXRule() {
		return gaCommon.getFLOAT_TYPE_SUFFIXRule();
	}
	
	//terminal fragment ESCAPE_SEQUENCE:
	//	SKW_BACKSLASH ('b' | 't' | 'n' | 'f' | 'r' | '\"' | SKW_SINGLEQUOTE | SKW_BACKSLASH) | OCTAL_ESCAPE;
	public TerminalRule getESCAPE_SEQUENCERule() {
		return gaCommon.getESCAPE_SEQUENCERule();
	}
	
	//terminal fragment OCTAL_ESCAPE:
	//	SKW_BACKSLASH '0'..'3' '0'..'7' '0'..'7' | SKW_BACKSLASH '0'..'7' '0'..'7' | SKW_BACKSLASH '0'..'7';
	public TerminalRule getOCTAL_ESCAPERule() {
		return gaCommon.getOCTAL_ESCAPERule();
	}
	
	//terminal fragment LINEFEED:
	//	'\n';
	public TerminalRule getLINEFEEDRule() {
		return gaCommon.getLINEFEEDRule();
	}
	
	//terminal fragment CARRIAGERETURN:
	//	'\r';
	public TerminalRule getCARRIAGERETURNRule() {
		return gaCommon.getCARRIAGERETURNRule();
	}
	
	//terminal LINE_END:
	//	CARRIAGERETURN | LINEFEED;
	public TerminalRule getLINE_ENDRule() {
		return gaCommon.getLINE_ENDRule();
	}
	
	//terminal LINEBREAK:
	//	SKW_BACKSLASH LINE_END;
	public TerminalRule getLINEBREAKRule() {
		return gaCommon.getLINEBREAKRule();
	}
	
	//terminal NEWLINE:
	//	LINE_END;
	public TerminalRule getCommonNEWLINERule() {
		return gaCommon.getNEWLINERule();
	}
	
	//terminal fragment SPACE:
	//	' ';
	public TerminalRule getSPACERule() {
		return gaCommon.getSPACERule();
	}
	
	//terminal fragment TAB:
	//	'\t';
	public TerminalRule getTABRule() {
		return gaCommon.getTABRule();
	}
	
	//terminal WHITESPACE:
	//	SPACE | TAB;
	public TerminalRule getWHITESPACERule() {
		return gaCommon.getWHITESPACERule();
	}
	
	//terminal BLOCK_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getBLOCK_COMMENTRule() {
		return gaCommon.getBLOCK_COMMENTRule();
	}
	
	//terminal LINE_COMMENT:
	//	'//' !LINE_END*;
	public TerminalRule getLINE_COMMENTRule() {
		return gaCommon.getLINE_COMMENTRule();
	}
	
	//terminal SPECIAL:
	//	.;
	public TerminalRule getSPECIALRule() {
		return gaCommon.getSPECIALRule();
	}
}
