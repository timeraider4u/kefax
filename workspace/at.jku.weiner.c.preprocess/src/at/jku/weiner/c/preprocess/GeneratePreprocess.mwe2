module at.jku.weiner.c.preprocess.GeneratePreprocess

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var projectName = "at.jku.weiner.c.preprocess"
var projectPath = "../${projectName}"

var fileExtensions = "c,h"
var grammarURI = "platform:/resource/${projectName}/src/at/jku/weiner/c/preprocess/Preprocess.xtext"

var encoding = "UTF-8"
var lineDelimiter = "\n"
var fileHeader = "/*\n * generated by Xtext \${version}\n */"

var commonProjectName = "at.jku.weiner.c.common"
var commonGenModel = "platform:/resource/${commonProjectName}/model/custom/Common.genmodel"
//var commonEcore = "platform:/resource/${commonProjectName}/model/custom/Common.ecore"
var preprocessGenModel = "platform:/resource/${projectName}/model/custom/Preprocess.genmodel"
var preprocessEcore = "platform:/resource/${projectName}/model/custom/Preprocess.ecore"

Workflow {
    bean = StandaloneSetup {
		// use an XtextResourceSet throughout the process, which is able to resolve classpath:/ URIs.
    	resourceSet = org.eclipse.xtext.resource.XtextResourceSet:theResourceSet {}
		scanClassPath = true
		projectMapping = { projectName = 'at.jku.weiner.c.preprocess' path = '${projectPath}/../at.jku.weiner.c.preprocess' }
		projectMapping = { projectName = 'at.jku.weiner.c.preprocess.ui' path = '${projectPath}/../at.jku.weiner.c.preprocess.ui' }
		projectMapping = { projectName = 'at.jku.weiner.c.preprocess.tests' path = '${projectPath}/../at.jku.weiner.c.preprocess.tests' }
		projectMapping = { projectName = 'at.jku.weiner.c.preprocess.ui.tests' path = '${projectPath}/../at.jku.weiner.c.preprocess.ui.tests' }
		
		// The following two lines can be removed, if Xbase is not used.
		registerGeneratedEPackage = "org.eclipse.xtext.xbase.XbasePackage"
		registerGenModelFile = "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel"
		// Use ecore
		registerGeneratedEPackage = "org.eclipse.emf.ecore.EcorePackage"
    	registerGenModelFile = "platform:/resource/org.eclipse.emf.ecore/model/Ecore.genmodel"
    	// Use common
		registerGeneratedEPackage = "at.jku.weiner.c.common.common.CommonPackage"
		registerGenModelFile = "${commonGenModel}"
		// Use preprocess
//		registerGeneratedEPackage = "at.jku.weiner.c.preprocess.preprocess.PreprocessPackage"
		registerGenModelFile = "${preprocessGenModel}"
	}
	
	component = DirectoryCleaner {
		directory = "${projectPath}/src-gen"
	}
	component = DirectoryCleaner {
		directory = "${projectPath}/emf-gen"
	}
	component = DirectoryCleaner {
		directory = "${projectPath}.ui/src-gen"
	}
	component = DirectoryCleaner {
		directory = "${projectPath}.tests/src-gen/at/jku/weiner/c/preprocess/tests"
	}
	component = DirectoryCleaner {
		directory = "${projectPath}.ui.tests/src-gen"
	}
	component = DirectoryCleaner {
		directory = "${projectPath}/model/generated"
	}
	
	component = org.eclipse.emf.mwe2.ecore.EcoreGenerator {
		// make sure we use the resourceSet created during standalone setup.
		generateCustomClasses = false
//		resourceSet = theResourceSet
        genModel = "${preprocessGenModel}"
        srcPath = "platform:/resource/${projectName}/src"
    }
	
	component = XtextGenerator auto-inject {
		configuration = {
			project = WizardConfig {
				runtimeRoot = projectPath
				// eclipseEditor = false
				testingSupport = true
				// do not update META-INF/MANIFEST.MF files
				eclipsePluginManifest = model.ManifestAccess {
					merge = false
				}
				eclipsePluginTestManifest = model.ManifestAccess {
					merge = false
				}
				runtimeManifest = model.ManifestAccess {
					merge = false
				}
				runtimeTestManifest = model.ManifestAccess {
					merge = false
				}
			}
			code = auto-inject {
				preferXtendStubs = true
			}
		}
		language = auto-inject {
			uri = grammarURI
			// make sure we use the resourceSet created during standalone setup.
			resourceSet = theResourceSet
			loadedResource = "${preprocessEcore}"

			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment2 auto-inject {}
			
	
			// generates Java API for the generated EPackages
//			fragment = adapter.FragmentAdapter { 
//				fragment = ecore.EcoreGeneratorFragment auto-inject {
//					genModel="${preprocessGenModel}"
//					
////					javaModelDirectory = "/${projectName}/src-gen"
////					updateBuildProperties = true
//				}
//			}

			fragment = adapter.FragmentAdapter {
				fragment = serializer.SerializerFragment auto-inject {
					generateStub = false
				}
			}

			// a custom ResourceFactory for use with EMF
			fragment = adapter.FragmentAdapter {
				fragment = resourceFactory.ResourceFactoryFragment auto-inject {}
			}

			// The antlr parser generator fragment.
			fragment = adapter.FragmentAdapter {
				fragment = parser.antlr.XtextAntlrGeneratorFragment auto-inject {
				//fragment = org.eclipse.xtext.generator.parser.antlr.ex.rt.AntlrGeneratorFragment auto-inject {
					options = {
						// backtrackLexer = true
						backtrack = true
						//memoize=true
    					//kAsString="5"
					}
				}
			}
//			fragment = adapter.FragmentAdapter {
//				fragment = org.eclipse.xtext.generator.parser.antlr.ex.rt.AntlrGeneratorFragment {
//    				options = {
//        				backtrack = false
//        				backtrackLexer = false
//    				}
//				}
//			}

			// Xtend-based API for validation
			fragment = adapter.FragmentAdapter {
				fragment = validation.ValidatorFragment auto-inject {
				//    composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
				}
			}

			// scoping and exporting API
			fragment = adapter.FragmentAdapter {
				fragment = scoping.ImportNamespacesScopingFragment auto-inject {}
			}
			fragment = adapter.FragmentAdapter {
				fragment = exporting.QualifiedNamesFragment auto-inject {}
			}

			// generator API
			fragment = generator.GeneratorFragment2 {}

			// formatter API
			fragment = formatting.Formatter2Fragment2 {}
			
			fragment = junit.Junit4Fragment2 auto-inject {}
			
			fragment = builder.BuilderIntegrationFragment2 auto-inject {}
			// labeling API
			fragment = adapter.FragmentAdapter {
				fragment = labeling.LabelProviderFragment auto-inject {}
			}
			
			// outline API
			fragment = adapter.FragmentAdapter {
				fragment = outline.OutlineTreeProviderFragment auto-inject {}
			}
			fragment = adapter.FragmentAdapter {
				fragment = outline.QuickOutlineFragment auto-inject {}
			}
			
			// quickfix API
			fragment = adapter.FragmentAdapter {
				fragment = quickfix.QuickfixProviderFragment auto-inject {}
			}
			
			// content assist API
			fragment = adapter.FragmentAdapter {
				fragment = contentAssist.ContentAssistFragment auto-inject {}
			}
			
			// provides a preference page for template proposals
			fragment = adapter.FragmentAdapter {
				fragment = templates.CodetemplatesGeneratorFragment auto-inject {}
			}
			
			// rename refactoring
			fragment = adapter.FragmentAdapter {
				fragment = refactoring.RefactorElementNameFragment auto-inject {}
			}
			
			// provides a compare view
			fragment = adapter.FragmentAdapter {
				fragment = compare.CompareFragment auto-inject {}
			}
			// generates a more lightweight Antlr parser and lexer tailored for content assist
			fragment = adapter.FragmentAdapter {
				fragment = parser.antlr.XtextAntlrUiGeneratorFragment auto-inject {
					options = {
						backtrack = true
					}
				}
			}
			
			// provides the necessary bindings for java types integration
			fragment = adapter.FragmentAdapter {
				fragment = types.TypesGeneratorFragment auto-inject {}
			}

			// generates the required bindings only if the grammar inherits from Xbase
			fragment = xbase.XbaseGeneratorFragment2 auto-inject {}

			// generates the required bindings only if the grammar inherits from Xtype
			fragment = xbase.XtypeGeneratorFragment2 auto-inject {}

			
		}
		
	}
	
	component = DirectoryCleaner {
		directory = "${projectPath}.tests/src/at/jku/weiner/c/preprocess/tests"
		exclude = "xtexttests"
		exclude = ".keep"
		exclude = "LexerAndParserTest.java"
	}
	
}
