/*
 [The "BSD licence"]
 Copyright (c) 2013 Sam Harwell
 Copyright (c) 2015 Harald Weiner
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions
 are met:
 1. Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.
 3. The name of the author may not be used to endorse or promote products
    derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
grammar at.jku.weiner.c.preprocess.Preprocess
with at.jku.weiner.c.Common

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate preprocess "http://www.jku.at/weiner/c/preprocess/Preprocess"

Model:
	{Model}
	(units+=TranslationUnit);
	
TranslationUnit:
	{TranslationUnit}
	group=GroupOpt
;

GroupOpt:
	{GroupOpt}
	(
		lines+=PreprocessorDirectives
		|
		lines+=NewLineLine
		|	
		lines+=Code
	)*
;

PreprocessorDirectives returns SourceCodeLine:
	{PreprocessorDirectives}
	WS* HASH WS*
	(
			directive=IncludeDirective
		|	directive=DefineDirective
		|	directive=ErrorDirective
		|	directive=UnDefineDirective
		|	directive=ConditionalDirective
		|	directive=PragmaDirective
		|	directive=NullDirective
	)
	NEWLINE
;

IncludeDirective:
	{IncludeDirective}
	INCLUDE WS+ string=MyCodeLine
;

DefineDirective:
		DefineObjectMacro
	|	DefineFunctionLikeMacro
;

DefineObjectMacro returns DefineDirective:
	{DefineObjectMacro}
	DEFINE WS+ id=ID
		(WS+ string=MyDefineLine)?
;

DefineFunctionLikeMacro returns DefineDirective:
	{DefineFunctionLikeMacro}
	DEFINE WS+ id=ID 
	SKW_LEFTPAREN WS*
		(list=IdentifierList)?
	SKW_RIGHTPAREN
	WS+
	string=MyDefineLine 
;

IdentifierList:
	{IdentifierList}
	id+=ID (SKW_COMMA WS* id+=ID)*
;

ErrorDirective:
	{ErrorDirective}
	ERROR WS+ msg=MyCodeLine
;

UnDefineDirective:
	{UnDefineDirective}
	UNDEF WS+ id=ID
;

ConditionalDirective:
	{ConditionalDirective}
	(conditional=
		(		IfConditional	
			|	IfDefConditional
			|	IfNotDefConditional
		)
	)
	HASH ENDIF WS*
;

IfConditional:
	{IfConditional}
	IF WS+ expression=ShadowExpression NEWLINE
		group=GroupOpt
;

IfDefConditional:
	{IfDefConditional}
	IFDEF WS+ id=ID NEWLINE
		group=GroupOpt
;

IfNotDefConditional:
	{IfNotDefConditional}
	IFNOTDEF WS+ id=ID NEWLINE
		group=GroupOpt
;

PragmaDirective:
	{PragmaDirective}
	PRAGMA
;

NullDirective:
	{NullDirective}
;

NewLineLine returns SourceCodeLine:
	{NewLineLine}
	NEWLINE
;

Code returns SourceCodeLine:
	{Code}
	code=MyCodeLineExtended
	NEWLINE
;

MyCode returns ecore::EString:
	ID|SPECIAL|INCLUDE|DEFINE|ERROR|PRAGMA
	|IFDEF|ENDIF|IFNOTDEF|IF|SpecialKeywords
	|Constant
;

MyDefineLine returns ecore::EString:
	(MyCode|WS|HASH)*
;

MyCodeLine returns ecore::EString:
	(MyCode|WS)+
;

MyCodeLineExtended returns ecore::EString:
	WS* (MyCode (MyCodeLine|HASH)*)?
;

// expressions
ShadowExpression hidden(WS):
	ConstantExpression
;

Expression:
	{Expression}
	expression=ConditionalExpression
;

ConstantExpression returns Expression:
	{ConstantExpression}
	expr=ConditionalExpression
;

ConditionalExpression returns Expression:
	{ConditionalExpression}
	expr=LogicalOrExpression
	(SKW_QUESTION qExpr=Expression SKW_COLON
		cExpr=ConditionalExpression
	)?
;

LogicalOrExpression returns Expression:
	{LogicalOrExpression}
	expr+=LogicalAndExpression
	(SKW_OROR expr+=LogicalAndExpression)*
;

LogicalAndExpression returns Expression:
	{LogicalAndExpression}
	expr+=InclusiveOrExpression
	(SKW_ANDAND expr+=InclusiveOrExpression)*
;

InclusiveOrExpression returns Expression:
	{InclusiveOrExpression}
	expr+=ExclusiveOrExpression
	(SKW_OR expr+=ExclusiveOrExpression)*
;

ExclusiveOrExpression returns Expression:
	{ExclusiveOrExpression}
	expr+=AndExpression
	(SKW_CARET expr+=AndExpression)*
;

AndExpression returns Expression:
	{AndExpression}
	expr+=EqualityExpression
	(SKW_AND expr+=EqualityExpression)*
;

EqualityExpression returns Expression:
	{EqualityExpression}
	expr+=RelationalExpression
	(
		(
				op+=SKW_EQUAL
			|	op+=SKW_NOTEQUAL
		)
		expr+=RelationalExpression
	)*
;

RelationalExpression returns Expression:
	{RelationalExpression}
	expr+=ShiftExpression
	(
		(
				op+=SKW_LESS
			|	op+=SKW_GREATER
			|	op+=SKW_LESSEQUAL
			|	op+=SKW_GREATEREQUAL
		)
		expr += ShiftExpression
	)*
;

ShiftExpression returns Expression:
	{ShiftExpression}
	expr+=AdditiveExpression
	(
		(
				op+=SKW_LEFTSHIFT
			|	op+=SKW_RIGHTSHIFT
		)
		expr+=AdditiveExpression
	)*
;

AdditiveExpression returns Expression:
	{AdditiveExpression}
	expr+=MultiplicativeExpression
	(
		(
				op+=SKW_PLUS
			|	op+=SKW_MINUS
		)
		expr+=MultiplicativeExpression
	)*
;

MultiplicativeExpression returns Expression:
	{MultiplicativeExpression}
	expr+=CastExpression
	(
		(
				op+=SKW_STAR
			|	op+=SKW_DIV
			|	op+=SKW_MOD
		)
		expr+=CastExpression
	)*
;

CastExpression returns Expression:
	{CastExpression}
	(
		expr=UnaryExpression
	//|	SKW_LEFTPAREN type=TypeName SKW_RIGHTPAREN expr=CastExpression
	//|	'__extension__' LEFTPAREN type=TypeName RIGHTPAREN castExpr=CastExpression
	)
;

UnaryExpression returns Expression:
	{UnaryExpression}	
	(
		expr=PostfixExpression
	//|	plusplus=SKW_PLUSPLUS expr=UnaryExpression
	//|	minusminus=SKW_MINUSMINUS expr=UnaryExpression
	|	op=UnaryOperator expr=CastExpression
	//|	sizeOf=SKW_SIZEOF SKW_LEFTPAREN typeName=TypeName SKW_RIGHTPAREN
	//|	sizeOf=SKW_SIZEOF expr=UnaryExpression 
	//|	ALIGNOF LEFTPAREN typeName=typeName RIGHTPAREN
	//|	andand=SKW_ANDAND id=ID // GCC extension address of label
	)
;

enum UnaryOperator:
		SKW_AND
	|	SKW_STAR
	|	SKW_PLUS 
	|	SKW_MINUS 
	|	SKW_TILDE
	|	SKW_NOT
;

PostfixExpression returns Expression:
	{PostfixExpression}
	(expr=PrimaryExpression
	/*	(
	|	('__extension__' LEFTPAREN typeName RIGHTPAREN LEFTBRACE initializerList=initializerList) 
			(COMMA? RIGHTBRACE)
	)
	*/
	
	//(
		//	suffix+=PostfixExpressionSuffixArray
		//|	suffix+=PostfixExpressionSuffixArgument
		//|	suffix+=PostfixExpressionSuffixDot
		//|	suffix+=PostfixExpressionSuffixArrow
		//	suffix+=PostfixExpressionSuffixPlusPlus
		//|	suffix+=PostfixExpressionSuffixMinusMinus
	//)*
	
	)
;

/*
PostfixExpressionSuffixArray returns PostfixExpressionSuffix:
	{PostfixExpressionSuffixArray}
	SKW_LEFTBRACKET arrayExpr=Expression SKW_RIGHTBRACKET
;


PostfixExpressionSuffixArgument returns PostfixExpressionSuffix:
	{PostfixExpressionSuffixArgument}
	SKW_LEFTPAREN (argumentExpressionList=ArgumentExpressionList)? SKW_RIGHTPAREN
;

PostfixExpressionSuffixDot returns PostfixExpressionSuffix:
	{PostfixExpressionSuffixDot}
	SKW_DOT id=ID
;

PostfixExpressionSuffixArrow returns PostfixExpressionSuffix:
	{PostfixExpressionSuffixArrow}
	SKW_ARROW id=ID
;


PostfixExpressionSuffixPlusPlus returns PostfixExpressionSuffix:
	{PostfixExpressionSuffixPlusPlus}
	SKW_PLUSPLUS
;

PostfixExpressionSuffixMinusMinus returns PostfixExpressionSuffix:
	{PostfixExpressionSuffixMinusMinus}
	SKW_MINUSMINUS
;

ArgumentExpressionList: expr+=AssignmentExpression (SKW_COMMA expr+=AssignmentExpression)*;

*/

PrimaryExpression returns Expression:
	{PrimaryExpression}
	(id=ID
	|	const=Constant
	//|	string+=STRING_LITERAL+ // reachable over Constant!
	|	SKW_LEFTPAREN expr=Expression SKW_RIGHTPAREN
	//|	genericSelection=genericSelection
	// |	'__extension__'? LEFTPAREN compoundStmt=compoundStatement RIGHTPAREN // Blocks (GCC extension)
	//|	'__builtin_va_arg' LEFTPAREN expr=unaryExpression COMMA typeName=typeName RIGHTPAREN
	//|	'__builtin_offsetof' LEFTPAREN typeName=typeName COMMA expr=unaryExpression RIGHTPAREN
	)
;

Constant returns ecore::EString:
	(
		HEX_LITERAL
	|	OCTAL_LITERAL
	|	DECIMAL_LITERAL
	|	CHAR_LITERAL
	|	STRING_LITERAL
	|	FLOAT_LITERAL
	|	BIN_LITERAL
	)
;

// lexer tokens
terminal HASH: '#';
terminal INCLUDE: 'include';
terminal DEFINE: 'define';
terminal ERROR: 'error';
terminal UNDEF: 'undef';
terminal IF: 'if';
terminal IFDEF: 'ifdef';
terminal IFNOTDEF: 'ifndef';
terminal ENDIF: 'endif';
terminal PRAGMA: 'pragma';

// special keywords
/*terminal SKW_AND: '&';
terminal SKW_ANDAND: SKW_AND SKW_AND;
terminal SKW_ASSIGN: '=';
terminal SKW_BACKSLASH: '\\';
terminal SKW_CARET: '^';
terminal SKW_COMMA: ',';
terminal SKW_COLON: ':';
terminal SKW_DIV: '/';
terminal fragment SKW_DOLLAR: '$';
terminal SKW_DOT: '.';
terminal SKW_DOUBLEQUOTE: '"';
terminal SKW_EQUAL: SKW_ASSIGN SKW_ASSIGN;
terminal SKW_GREATER: '>';
terminal SKW_GREATEREQUAL: SKW_GREATER SKW_ASSIGN;
terminal SKW_LEFTSHIFT: SKW_LESS SKW_LESS;
terminal SKW_LESS: '<';
terminal SKW_LESSEQUAL: SKW_LESS SKW_ASSIGN;
terminal SKW_MINUS: '-';
terminal SKW_MINUSMINUS: SKW_MINUS SKW_MINUS;
terminal SKW_MOD: '%';
terminal SKW_NOT: '!';
terminal SKW_NOTEQUAL: SKW_NOT SKW_ASSIGN;
terminal SKW_OR: '|';
terminal SKW_OROR: SKW_OR SKW_OR;
terminal SKW_PLUS: '+';
terminal SKW_PLUSPLUS: SKW_PLUS SKW_PLUS;
terminal SKW_QUESTION: '?';
terminal SKW_RIGHTSHIFT: SKW_GREATER SKW_GREATER;
terminal SKW_SEMI: ';';
terminal SKW_SINGLEQUOTE: '\'';
terminal SKW_STAR: '*';
terminal SKW_TILDE: '~';
terminal fragment SKW_UNDERSCORE: '_';
*/

// more keywords
//terminal LEFTBRACKET: '[';
//terminal RIGHTBRACKET: ']';
//terminal LEFTBRACE: '{';
//terminal RIGHTBRACE: '}';
// even more keywords
//terminal LPAREN: '(';
//terminal RPAREN: ')';
terminal fragment LINEFEED: '\n';
terminal fragment CARRIAGERETURN: '\r';
terminal NEWLINE: (CARRIAGERETURN | LINEFEED) ;
terminal fragment LINEBREAK: (SKW_BACKSLASH NEWLINE);
terminal fragment SPACE: ' ';
terminal fragment TAB: '\t';
terminal WS: (SPACE | TAB | LINE_COMMENT | BLOCK_COMMENT | LINEBREAK);

/*terminal ID:
	ID_NONDIGIT
		(	ID_NONDIGIT
		|	DIGIT
		)*
;
terminal fragment ID_NONDIGIT:
		NONDIGIT_LETTER
	|	UNIVERSAL_CHARACTER
;
terminal fragment DIGIT: '0' .. '9';
terminal fragment NONDIGIT_LETTER:
		'a' .. 'z'
	|	'A' .. 'Z'
	|	'_'
;
terminal fragment
UNIVERSAL_CHARACTER:
		'\\u' HEX_QUAD
	|	'\\U' HEX_QUAD HEX_QUAD
	;
terminal fragment HEX_QUAD:
	HEXADECIMAL_DIGIT HEXADECIMAL_DIGIT
	HEXADECIMAL_DIGIT HEXADECIMAL_DIGIT
;
terminal fragment 
HEXADECIMAL_DIGIT:
		'0' .. '9'
	|	'a' .. 'f'
	|	'A' .. 'F'
	;

*/
terminal ID: IDENTIFIER;
terminal fragment IDENTIFIER:
	LETTER (LETTER|'0'..'9')*
;

terminal fragment LETTER:
		SKW_DOLLAR
	|	'A'..'Z'
	|	'a'..'z'
	|	SKW_UNDERSCORE
;

terminal CHAR_LITERAL:
	SKW_SINGLEQUOTE ( ESCAPE_SEQUENCE | !(SKW_SINGLEQUOTE|SKW_BACKSLASH) ) SKW_SINGLEQUOTE
;

terminal STRING_LITERAL:
	SKW_DOUBLEQUOTE ( ESCAPE_SEQUENCE | !(SKW_BACKSLASH|SKW_DOUBLEQUOTE) )* SKW_DOUBLEQUOTE
;

terminal HEX_LITERAL: '0' ('x'|'X') HEX_DIGIT+ INTEGER_TYPE_SUFFIX? ;

terminal DECIMAL_LITERAL: ('0' | '1'..'9' '0'..'9'*) INTEGER_TYPE_SUFFIX? ;

terminal OCTAL_LITERAL: '0' ('0'..'7')+ INTEGER_TYPE_SUFFIX? ;

terminal BIN_LITERAL: ('0b' | '0B') ('0'..'1')+;

terminal fragment HEX_DIGIT: ('0'..'9'|'a'..'f'|'A'..'F');

terminal fragment INTEGER_TYPE_SUFFIX:
	('u'|'U')? ('l'|'L')
	|	('u'|'U')  ('l'|'L')?
;

terminal FLOAT_LITERAL:
	('0'..'9')+ SKW_DOT ('0'..'9')* EXPONENT? FLOAT_TYPE_SUFFIX?
	|	SKW_DOT ('0'..'9')+ EXPONENT? FLOAT_TYPE_SUFFIX?
	|	('0'..'9')+ EXPONENT FLOAT_TYPE_SUFFIX?
	|	('0'..'9')+ EXPONENT? FLOAT_TYPE_SUFFIX
;

terminal fragment EXPONENT:
	('e'|'E') ('+'|'-')? ('0'..'9')+
;

terminal fragment FLOAT_TYPE_SUFFIX: ('f'|'F'|'d'|'D') ;

terminal fragment ESCAPE_SEQUENCE:
	SKW_BACKSLASH ('b'|'t'|'n'|'f'|'r'|'\"'|SKW_SINGLEQUOTE|SKW_BACKSLASH)
	|	OCTAL_ESCAPE
;

terminal fragment OCTAL_ESCAPE:
	SKW_BACKSLASH ('0'..'3') ('0'..'7') ('0'..'7')
	|	SKW_BACKSLASH ('0'..'7') ('0'..'7')
	|	SKW_BACKSLASH ('0'..'7')
;


// terminal SPECIAL: .;
terminal fragment BLOCK_COMMENT: '/*' -> '*/';
terminal fragment LINE_COMMENT: '//' (!NEWLINE)*;
