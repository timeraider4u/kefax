/*
 * generated by Xtext 2.9.0-SNAPSHOT
 */
package at.jku.weiner.c.preprocess.formatting2

import at.jku.weiner.c.common.formatting2.CommonFormatter
import at.jku.weiner.c.preprocess.preprocess.ConditionalDirective
import at.jku.weiner.c.preprocess.preprocess.DefineFunctionLikeMacro
import at.jku.weiner.c.preprocess.preprocess.ElIfConditional
import at.jku.weiner.c.preprocess.preprocess.ElseConditional
import at.jku.weiner.c.preprocess.preprocess.GroupOpt
import at.jku.weiner.c.preprocess.preprocess.GroupOpt2
import at.jku.weiner.c.preprocess.preprocess.IfConditional
import at.jku.weiner.c.preprocess.preprocess.IfDefConditional
import at.jku.weiner.c.preprocess.preprocess.IfNotDefConditional
import at.jku.weiner.c.preprocess.preprocess.Preprocess
import at.jku.weiner.c.preprocess.preprocess.PreprocessorDirectives
import at.jku.weiner.c.preprocess.preprocess.PrimaryExpression
import at.jku.weiner.c.preprocess.preprocess.SourceCodeLine
import at.jku.weiner.c.preprocess.services.PreprocessGrammarAccess
import com.google.inject.Inject
import org.eclipse.xtext.formatting2.IFormattableDocument

class PreprocessFormatter extends CommonFormatter {
	
	@Inject extension PreprocessGrammarAccess

	def dispatch void format(Preprocess preprocess, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(preprocess.getGroup(), document);
	}

	def dispatch void format(GroupOpt groupOpt, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (SourceCodeLine lines : groupOpt.getLines()) {
			format(lines, document);
		}
	}

	def dispatch void format(GroupOpt2 groupOpt2, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (SourceCodeLine lines : groupOpt2.getLines()) {
			format(lines, document);
		}
	}

	def dispatch void format(PreprocessorDirectives preprocessorDirectives, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(preprocessorDirectives.getDirective(), document);
	}

	def dispatch void format(DefineFunctionLikeMacro defineFunctionLikeMacro, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(defineFunctionLikeMacro.getList(), document);
	}

	def dispatch void format(ConditionalDirective conditionalDirective, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(conditionalDirective.getConditional(), document);
		for (ElIfConditional elifs : conditionalDirective.getElifs()) {
			format(elifs, document);
		}
		format(conditionalDirective.getElse(), document);
	}

	def dispatch void format(IfConditional ifConditional, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(ifConditional.getExpression(), document);
		format(ifConditional.getGroup(), document);
	}

	def dispatch void format(IfDefConditional ifDefConditional, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(ifDefConditional.getGroup(), document);
	}

	def dispatch void format(IfNotDefConditional ifNotDefConditional, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(ifNotDefConditional.getGroup(), document);
	}

	def dispatch void format(ElIfConditional elIfConditional, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(elIfConditional.getExpression(), document);
		format(elIfConditional.getGroup(), document);
	}

	def dispatch void format(ElseConditional elseConditional, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(elseConditional.getGroup(), document);
	}

	def dispatch void format(PrimaryExpression primaryExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(primaryExpression.getExpr(), document);
	}
}
