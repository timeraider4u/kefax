/**
 * generated by Xtext 2.9.0-SNAPSHOT
 */
package at.jku.weiner.c.preprocess.formatting2;

import at.jku.weiner.c.common.common.Expression;
import at.jku.weiner.c.common.formatting2.CommonFormatter;
import at.jku.weiner.c.preprocess.preprocess.ConditionalDirective;
import at.jku.weiner.c.preprocess.preprocess.DefineFunctionLikeMacro;
import at.jku.weiner.c.preprocess.preprocess.ElIfConditional;
import at.jku.weiner.c.preprocess.preprocess.ElseConditional;
import at.jku.weiner.c.preprocess.preprocess.GroupOpt;
import at.jku.weiner.c.preprocess.preprocess.GroupOpt2;
import at.jku.weiner.c.preprocess.preprocess.IdentifierList;
import at.jku.weiner.c.preprocess.preprocess.IfAbstractConditional;
import at.jku.weiner.c.preprocess.preprocess.IfConditional;
import at.jku.weiner.c.preprocess.preprocess.IfDefConditional;
import at.jku.weiner.c.preprocess.preprocess.IfNotDefConditional;
import at.jku.weiner.c.preprocess.preprocess.Preprocess;
import at.jku.weiner.c.preprocess.preprocess.PreprocessorDirectives;
import at.jku.weiner.c.preprocess.preprocess.PrimaryExpression;
import at.jku.weiner.c.preprocess.preprocess.SourceCodeLine;
import at.jku.weiner.c.preprocess.services.PreprocessGrammarAccess;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class PreprocessFormatter extends CommonFormatter {
  @Inject
  @Extension
  private PreprocessGrammarAccess _preprocessGrammarAccess;
  
  protected void _format(final Preprocess preprocess, @Extension final IFormattableDocument document) {
    GroupOpt _group = preprocess.getGroup();
    this.format(_group, document);
  }
  
  protected void _format(final GroupOpt groupOpt, @Extension final IFormattableDocument document) {
    EList<SourceCodeLine> _lines = groupOpt.getLines();
    for (final SourceCodeLine lines : _lines) {
      this.format(lines, document);
    }
  }
  
  protected void _format(final GroupOpt2 groupOpt2, @Extension final IFormattableDocument document) {
    EList<SourceCodeLine> _lines = groupOpt2.getLines();
    for (final SourceCodeLine lines : _lines) {
      this.format(lines, document);
    }
  }
  
  protected void _format(final PreprocessorDirectives preprocessorDirectives, @Extension final IFormattableDocument document) {
    EObject _directive = preprocessorDirectives.getDirective();
    this.format(_directive, document);
  }
  
  protected void _format(final DefineFunctionLikeMacro defineFunctionLikeMacro, @Extension final IFormattableDocument document) {
    IdentifierList _list = defineFunctionLikeMacro.getList();
    this.format(_list, document);
  }
  
  protected void _format(final ConditionalDirective conditionalDirective, @Extension final IFormattableDocument document) {
    IfAbstractConditional _conditional = conditionalDirective.getConditional();
    this.format(_conditional, document);
    EList<ElIfConditional> _elifs = conditionalDirective.getElifs();
    for (final ElIfConditional elifs : _elifs) {
      this.format(elifs, document);
    }
    ElseConditional _else = conditionalDirective.getElse();
    this.format(_else, document);
  }
  
  protected void _format(final IfConditional ifConditional, @Extension final IFormattableDocument document) {
    Expression _expression = ifConditional.getExpression();
    this.format(_expression, document);
    GroupOpt _group = ifConditional.getGroup();
    this.format(_group, document);
  }
  
  protected void _format(final IfDefConditional ifDefConditional, @Extension final IFormattableDocument document) {
    GroupOpt _group = ifDefConditional.getGroup();
    this.format(_group, document);
  }
  
  protected void _format(final IfNotDefConditional ifNotDefConditional, @Extension final IFormattableDocument document) {
    GroupOpt _group = ifNotDefConditional.getGroup();
    this.format(_group, document);
  }
  
  protected void _format(final ElIfConditional elIfConditional, @Extension final IFormattableDocument document) {
    Expression _expression = elIfConditional.getExpression();
    this.format(_expression, document);
    GroupOpt _group = elIfConditional.getGroup();
    this.format(_group, document);
  }
  
  protected void _format(final ElseConditional elseConditional, @Extension final IFormattableDocument document) {
    GroupOpt _group = elseConditional.getGroup();
    this.format(_group, document);
  }
  
  protected void _format(final PrimaryExpression primaryExpression, @Extension final IFormattableDocument document) {
    Expression _expr = primaryExpression.getExpr();
    this.format(_expr, document);
  }
  
  public void format(final Object primaryExpression, final IFormattableDocument document) {
    if (primaryExpression instanceof PrimaryExpression) {
      _format((PrimaryExpression)primaryExpression, document);
      return;
    } else if (primaryExpression instanceof DefineFunctionLikeMacro) {
      _format((DefineFunctionLikeMacro)primaryExpression, document);
      return;
    } else if (primaryExpression instanceof ElIfConditional) {
      _format((ElIfConditional)primaryExpression, document);
      return;
    } else if (primaryExpression instanceof ElseConditional) {
      _format((ElseConditional)primaryExpression, document);
      return;
    } else if (primaryExpression instanceof GroupOpt2) {
      _format((GroupOpt2)primaryExpression, document);
      return;
    } else if (primaryExpression instanceof IfConditional) {
      _format((IfConditional)primaryExpression, document);
      return;
    } else if (primaryExpression instanceof IfDefConditional) {
      _format((IfDefConditional)primaryExpression, document);
      return;
    } else if (primaryExpression instanceof IfNotDefConditional) {
      _format((IfNotDefConditional)primaryExpression, document);
      return;
    } else if (primaryExpression instanceof Preprocess) {
      _format((Preprocess)primaryExpression, document);
      return;
    } else if (primaryExpression instanceof PreprocessorDirectives) {
      _format((PreprocessorDirectives)primaryExpression, document);
      return;
    } else if (primaryExpression instanceof XtextResource) {
      _format((XtextResource)primaryExpression, document);
      return;
    } else if (primaryExpression instanceof ConditionalDirective) {
      _format((ConditionalDirective)primaryExpression, document);
      return;
    } else if (primaryExpression instanceof GroupOpt) {
      _format((GroupOpt)primaryExpression, document);
      return;
    } else if (primaryExpression == null) {
      _format((Void)null, document);
      return;
    } else if (primaryExpression != null) {
      _format(primaryExpression, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(primaryExpression, document).toString());
    }
  }
}
