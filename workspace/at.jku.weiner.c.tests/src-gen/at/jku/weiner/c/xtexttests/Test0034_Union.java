package at.jku.weiner.c.xtexttests;

import com.google.inject.Inject;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import org.antlr.runtime.Token;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipse.xtext.junit4.util.ParseHelper;
import org.eclipse.xtext.junit4.validation.ValidationTestHelper;
import org.eclipse.xtext.junit4.XtextRunner;
import org.eclipse.xtext.parser.antlr.ITokenDefProvider;
import org.junit.Assert;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import at.jku.weiner.c.tests.CInjectorProvider;
import at.jku.weiner.c.parser.antlr.CParser;
import at.jku.weiner.c.parser.antlr.internal.InternalCLexer;
import at.jku.weiner.c.xtexttests.LexerAndParserTest;

import at.jku.weiner.c.c.Model;
import at.jku.weiner.c.c.TranslationUnit;
import at.jku.weiner.c.c.ExternalDeclaration;
import at.jku.weiner.c.c.FunctionDefHead;
import at.jku.weiner.c.c.DeclarationSpecifiers;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.Declarator;
import at.jku.weiner.c.c.DirectDeclarator;
import at.jku.weiner.c.c.DeclaratorSuffix;
import at.jku.weiner.c.c.DirectDeclaratorLastSuffix;
import at.jku.weiner.c.c.ParameterTypeList;
import at.jku.weiner.c.c.ParameterList;
import at.jku.weiner.c.c.ParameterDeclaration;
import at.jku.weiner.c.c.DeclarationSpecifiers;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.FunctionDefinition;
import at.jku.weiner.c.c.BodyStatement;
import at.jku.weiner.c.c.BlockList;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.TypeName;
import at.jku.weiner.c.c.SpecifierQualifierList;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.AssignmentOperator;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.AssignmentOperator;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.JumpStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;

@SuppressWarnings("unused")
@RunWith(XtextRunner.class)
@InjectWith(CInjectorProvider.class)
public class Test0034_Union {

	@Inject
	private ParseHelper<Model> parseHelper;
	@Inject
	private ValidationTestHelper valHelper;
	@Inject
	private InternalCLexer lexer;
	@Inject
	private CParser parser;
	@Inject
	private ITokenDefProvider tokenDefProvider;
	
	private LexerAndParserTest testHelper;
	
	@Before
	public void initialize(){
		this.testHelper = new LexerAndParserTest(lexer, parser, tokenDefProvider);
	}
	
	private String getSourceText()
	throws Exception{
		final Path path = Paths.get("res/Test0034_Union.c");
		final String content = new String(Files.readAllBytes(path));
		return content;
	}
	
	@Test
	public void checkLexerTokens()
	throws Exception{
		final String text = this.getSourceText();
		//System.out.println(text);
		final String[] expected = new String[] {
			"RULE_LINEDIRECTIVE",
			"RULE_NEWLINE",
			"RULE_NEWLINE",
			"RULE_KW_INT",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_KW_VOID",
			"RULE_RIGHTPAREN",
			"RULE_WHITESPACE",
			"RULE_LEFTBRACE",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_LINE_COMMENT",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_STRING_LITERAL",
			"RULE_COMMA",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_STRING_LITERAL",
			"RULE_COMMA",
			"RULE_WHITESPACE",
			"RULE_KW_SIZEOF",
			"RULE_LEFTPAREN",
			"RULE_ID",
			"RULE_DOT",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_STRING_LITERAL",
			"RULE_COMMA",
			"RULE_WHITESPACE",
			"RULE_KW_SIZEOF",
			"RULE_LEFTPAREN",
			"RULE_KW_FLOAT",
			"RULE_RIGHTPAREN",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_DOT",
			"RULE_ID",
			"RULE_WHITESPACE",
			"RULE_ASSIGN",
			"RULE_WHITESPACE",
			"RULE_DECIMAL_LITERAL",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_STRING_LITERAL",
			"RULE_COMMA",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_DOT",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_STRING_LITERAL",
			"RULE_COMMA",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_DOT",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_STRING_LITERAL",
			"RULE_COMMA",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_DOT",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_DOT",
			"RULE_ID",
			"RULE_WHITESPACE",
			"RULE_ASSIGN",
			"RULE_WHITESPACE",
			"RULE_FLOAT_LITERAL",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_STRING_LITERAL",
			"RULE_COMMA",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_DOT",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_STRING_LITERAL",
			"RULE_COMMA",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_DOT",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_KW_RETURN",
			"RULE_WHITESPACE",
			"RULE_DECIMAL_LITERAL",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_RIGHTBRACE",
			"RULE_NEWLINE",
		};
		//final List<Token> actual = testHelper.getTokens(text);
		//testHelper.outputTokens(text);
		testHelper.checkTokenisation(text, expected);
	}
	
	@Test
	public void checkParserResult()
	throws Exception{

		final String text = this.getSourceText();
		final Model Model_0_Var = this.parseHelper.parse(text);
	
		this.valHelper.assertNoErrors(Model_0_Var);
		Assert.assertNotNull(Model_0_Var);
		final EList<? extends EObject> Unit_0_list = Model_0_Var.getUnit();
		Assert.assertNotNull(Unit_0_list);
		Assert.assertEquals(1, Unit_0_list.size());
		final TranslationUnit TranslationUnit_1_Var = (TranslationUnit)Unit_0_list.get(0);
		Assert.assertNotNull(TranslationUnit_1_Var);
		final EList<? extends EObject> External_1_list = TranslationUnit_1_Var.getExternal();
		Assert.assertNotNull(External_1_list);
		Assert.assertEquals(1, External_1_list.size());
		final ExternalDeclaration ExternalDeclaration_2_Var = (ExternalDeclaration)External_1_list.get(0);
		Assert.assertNotNull(ExternalDeclaration_2_Var);
		final FunctionDefHead FunctionDefHead_3_Var = (FunctionDefHead)ExternalDeclaration_2_Var.getFunctiondefHead();
		Assert.assertNotNull(FunctionDefHead_3_Var);
		final DeclarationSpecifiers DeclarationSpecifiers_4_Var = (DeclarationSpecifiers)FunctionDefHead_3_Var.getFunDeclSpecifiers();
		Assert.assertNotNull(DeclarationSpecifiers_4_Var);
		final EList<? extends EObject> DeclarationSpecifier_4_list = DeclarationSpecifiers_4_Var.getDeclarationSpecifier();
		Assert.assertNotNull(DeclarationSpecifier_4_list);
		Assert.assertEquals(1, DeclarationSpecifier_4_list.size());
		final TypeSpecifier TypeSpecifier_5_Var = (TypeSpecifier)DeclarationSpecifier_4_list.get(0);
		Assert.assertNotNull(TypeSpecifier_5_Var);
		Assert.assertEquals("int", TypeSpecifier_5_Var.getName());
		final Declarator Declarator_6_Var = (Declarator)FunctionDefHead_3_Var.getFunDeclarator();
		Assert.assertNotNull(Declarator_6_Var);
		final DirectDeclarator DirectDeclarator_7_Var = (DirectDeclarator)Declarator_6_Var.getDeclarator();
		Assert.assertNotNull(DirectDeclarator_7_Var);
		Assert.assertEquals("main", DirectDeclarator_7_Var.getId());
		final EList<? extends EObject> DeclaratorSuffix_7_list = DirectDeclarator_7_Var.getDeclaratorSuffix();
		Assert.assertNotNull(DeclaratorSuffix_7_list);
		Assert.assertEquals(1, DeclaratorSuffix_7_list.size());
		final DeclaratorSuffix DeclaratorSuffix_8_Var = (DeclaratorSuffix)DeclaratorSuffix_7_list.get(0);
		Assert.assertNotNull(DeclaratorSuffix_8_Var);
		final DirectDeclaratorLastSuffix DirectDeclaratorLastSuffix_9_Var = (DirectDeclaratorLastSuffix)DeclaratorSuffix_8_Var.getLastSuffix();
		Assert.assertNotNull(DirectDeclaratorLastSuffix_9_Var);
		final EList<? extends EObject> ParameterTypeList_9_list = DirectDeclaratorLastSuffix_9_Var.getParameterTypeList();
		Assert.assertNotNull(ParameterTypeList_9_list);
		Assert.assertEquals(1, ParameterTypeList_9_list.size());
		final ParameterTypeList ParameterTypeList_10_Var = (ParameterTypeList)ParameterTypeList_9_list.get(0);
		Assert.assertNotNull(ParameterTypeList_10_Var);
		final ParameterList ParameterList_11_Var = (ParameterList)ParameterTypeList_10_Var.getList();
		Assert.assertNotNull(ParameterList_11_Var);
		final EList<? extends EObject> ParameterDeclaration_11_list = ParameterList_11_Var.getParameterDeclaration();
		Assert.assertNotNull(ParameterDeclaration_11_list);
		Assert.assertEquals(1, ParameterDeclaration_11_list.size());
		final ParameterDeclaration ParameterDeclaration_12_Var = (ParameterDeclaration)ParameterDeclaration_11_list.get(0);
		Assert.assertNotNull(ParameterDeclaration_12_Var);
		final DeclarationSpecifiers DeclarationSpecifiers_13_Var = (DeclarationSpecifiers)ParameterDeclaration_12_Var.getDeclSpecifiers();
		Assert.assertNotNull(DeclarationSpecifiers_13_Var);
		final EList<? extends EObject> DeclarationSpecifier_13_list = DeclarationSpecifiers_13_Var.getDeclarationSpecifier();
		Assert.assertNotNull(DeclarationSpecifier_13_list);
		Assert.assertEquals(1, DeclarationSpecifier_13_list.size());
		final TypeSpecifier TypeSpecifier_14_Var = (TypeSpecifier)DeclarationSpecifier_13_list.get(0);
		Assert.assertNotNull(TypeSpecifier_14_Var);
		Assert.assertEquals("void", TypeSpecifier_14_Var.getName());
		final FunctionDefinition FunctionDefinition_15_Var = (FunctionDefinition)ExternalDeclaration_2_Var.getFunctionDefinition();
		Assert.assertNotNull(FunctionDefinition_15_Var);
		final BodyStatement BodyStatement_16_Var = (BodyStatement)FunctionDefinition_15_Var.getBody();
		Assert.assertNotNull(BodyStatement_16_Var);
		final EList<? extends EObject> BlockList_16_list = BodyStatement_16_Var.getBlockList();
		Assert.assertNotNull(BlockList_16_list);
		Assert.assertEquals(1, BlockList_16_list.size());
		final BlockList BlockList_17_Var = (BlockList)BlockList_16_list.get(0);
		Assert.assertNotNull(BlockList_17_Var);
		final EList<? extends EObject> Statement_17_list = BlockList_17_Var.getStatement();
		Assert.assertNotNull(Statement_17_list);
		Assert.assertEquals(11, Statement_17_list.size());
		final Statement Statement_18_Var = (Statement)Statement_17_list.get(0);
		Assert.assertNotNull(Statement_18_Var);
		final ExpressionStatement ExpressionStatement_19_Var = (ExpressionStatement)Statement_18_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_19_Var);
		final Expression Expression_20_Var = (Expression)ExpressionStatement_19_Var.getExpression();
		Assert.assertNotNull(Expression_20_Var);
		final EList<? extends EObject> ExprExpr_20_list = Expression_20_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_20_list);
		Assert.assertEquals(1, ExprExpr_20_list.size());
		final AssignmentExpression AssignmentExpression_21_Var = (AssignmentExpression)ExprExpr_20_list.get(0);
		Assert.assertNotNull(AssignmentExpression_21_Var);
		final ConditionalExpression ConditionalExpression_22_Var = (ConditionalExpression)AssignmentExpression_21_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_22_Var);
		final LogicalOrExpression LogicalOrExpression_23_Var = (LogicalOrExpression)ConditionalExpression_22_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_23_Var);
		final EList<? extends EObject> Expr_23_list = LogicalOrExpression_23_Var.getExpr();
		Assert.assertNotNull(Expr_23_list);
		Assert.assertEquals(1, Expr_23_list.size());
		final LogicalAndExpression LogicalAndExpression_24_Var = (LogicalAndExpression)Expr_23_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_24_Var);
		final EList<? extends EObject> Expr_24_list = LogicalAndExpression_24_Var.getExpr();
		Assert.assertNotNull(Expr_24_list);
		Assert.assertEquals(1, Expr_24_list.size());
		final InclusiveOrExpression InclusiveOrExpression_25_Var = (InclusiveOrExpression)Expr_24_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_25_Var);
		final EList<? extends EObject> Expr_25_list = InclusiveOrExpression_25_Var.getExpr();
		Assert.assertNotNull(Expr_25_list);
		Assert.assertEquals(1, Expr_25_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_26_Var = (ExclusiveOrExpression)Expr_25_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_26_Var);
		final EList<? extends EObject> Expr_26_list = ExclusiveOrExpression_26_Var.getExpr();
		Assert.assertNotNull(Expr_26_list);
		Assert.assertEquals(1, Expr_26_list.size());
		final AndExpression AndExpression_27_Var = (AndExpression)Expr_26_list.get(0);
		Assert.assertNotNull(AndExpression_27_Var);
		final EList<? extends EObject> Expr_27_list = AndExpression_27_Var.getExpr();
		Assert.assertNotNull(Expr_27_list);
		Assert.assertEquals(1, Expr_27_list.size());
		final EqualityExpression EqualityExpression_28_Var = (EqualityExpression)Expr_27_list.get(0);
		Assert.assertNotNull(EqualityExpression_28_Var);
		final EList<? extends EObject> Expr_28_list = EqualityExpression_28_Var.getExpr();
		Assert.assertNotNull(Expr_28_list);
		Assert.assertEquals(1, Expr_28_list.size());
		final RelationalExpression RelationalExpression_29_Var = (RelationalExpression)Expr_28_list.get(0);
		Assert.assertNotNull(RelationalExpression_29_Var);
		final EList<? extends EObject> Expr_29_list = RelationalExpression_29_Var.getExpr();
		Assert.assertNotNull(Expr_29_list);
		Assert.assertEquals(1, Expr_29_list.size());
		final ShiftExpression ShiftExpression_30_Var = (ShiftExpression)Expr_29_list.get(0);
		Assert.assertNotNull(ShiftExpression_30_Var);
		final EList<? extends EObject> Expr_30_list = ShiftExpression_30_Var.getExpr();
		Assert.assertNotNull(Expr_30_list);
		Assert.assertEquals(1, Expr_30_list.size());
		final AdditiveExpression AdditiveExpression_31_Var = (AdditiveExpression)Expr_30_list.get(0);
		Assert.assertNotNull(AdditiveExpression_31_Var);
		final EList<? extends EObject> Expr_31_list = AdditiveExpression_31_Var.getExpr();
		Assert.assertNotNull(Expr_31_list);
		Assert.assertEquals(1, Expr_31_list.size());
		final MultiplicativeExpression MultiplicativeExpression_32_Var = (MultiplicativeExpression)Expr_31_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_32_Var);
		final EList<? extends EObject> Expr_32_list = MultiplicativeExpression_32_Var.getExpr();
		Assert.assertNotNull(Expr_32_list);
		Assert.assertEquals(1, Expr_32_list.size());
		final CastExpression CastExpression_33_Var = (CastExpression)Expr_32_list.get(0);
		Assert.assertNotNull(CastExpression_33_Var);
		final UnaryExpression UnaryExpression_34_Var = (UnaryExpression)CastExpression_33_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_34_Var);
		final PostfixExpression PostfixExpression_35_Var = (PostfixExpression)UnaryExpression_34_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_35_Var);
		final EList<? extends EObject> Expr_35_list = PostfixExpression_35_Var.getExpr();
		Assert.assertNotNull(Expr_35_list);
		Assert.assertEquals(1, Expr_35_list.size());
		final PrimaryExpression PrimaryExpression_36_Var = (PrimaryExpression)Expr_35_list.get(0);
		Assert.assertNotNull(PrimaryExpression_36_Var);
		Assert.assertEquals("printf", PrimaryExpression_36_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_36_list = PostfixExpression_35_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_36_list);
		Assert.assertEquals(1, ArgumentExpressionList_36_list.size());
		final ArgumentExpressionList ArgumentExpressionList_37_Var = (ArgumentExpressionList)ArgumentExpressionList_36_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_37_Var);
		final EList<? extends EObject> Expr_37_list = ArgumentExpressionList_37_Var.getExpr();
		Assert.assertNotNull(Expr_37_list);
		Assert.assertEquals(2, Expr_37_list.size());
		final AssignmentExpression AssignmentExpression_38_Var = (AssignmentExpression)Expr_37_list.get(0);
		Assert.assertNotNull(AssignmentExpression_38_Var);
		final ConditionalExpression ConditionalExpression_39_Var = (ConditionalExpression)AssignmentExpression_38_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_39_Var);
		final LogicalOrExpression LogicalOrExpression_40_Var = (LogicalOrExpression)ConditionalExpression_39_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_40_Var);
		final EList<? extends EObject> Expr_40_list = LogicalOrExpression_40_Var.getExpr();
		Assert.assertNotNull(Expr_40_list);
		Assert.assertEquals(1, Expr_40_list.size());
		final LogicalAndExpression LogicalAndExpression_41_Var = (LogicalAndExpression)Expr_40_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_41_Var);
		final EList<? extends EObject> Expr_41_list = LogicalAndExpression_41_Var.getExpr();
		Assert.assertNotNull(Expr_41_list);
		Assert.assertEquals(1, Expr_41_list.size());
		final InclusiveOrExpression InclusiveOrExpression_42_Var = (InclusiveOrExpression)Expr_41_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_42_Var);
		final EList<? extends EObject> Expr_42_list = InclusiveOrExpression_42_Var.getExpr();
		Assert.assertNotNull(Expr_42_list);
		Assert.assertEquals(1, Expr_42_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_43_Var = (ExclusiveOrExpression)Expr_42_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_43_Var);
		final EList<? extends EObject> Expr_43_list = ExclusiveOrExpression_43_Var.getExpr();
		Assert.assertNotNull(Expr_43_list);
		Assert.assertEquals(1, Expr_43_list.size());
		final AndExpression AndExpression_44_Var = (AndExpression)Expr_43_list.get(0);
		Assert.assertNotNull(AndExpression_44_Var);
		final EList<? extends EObject> Expr_44_list = AndExpression_44_Var.getExpr();
		Assert.assertNotNull(Expr_44_list);
		Assert.assertEquals(1, Expr_44_list.size());
		final EqualityExpression EqualityExpression_45_Var = (EqualityExpression)Expr_44_list.get(0);
		Assert.assertNotNull(EqualityExpression_45_Var);
		final EList<? extends EObject> Expr_45_list = EqualityExpression_45_Var.getExpr();
		Assert.assertNotNull(Expr_45_list);
		Assert.assertEquals(1, Expr_45_list.size());
		final RelationalExpression RelationalExpression_46_Var = (RelationalExpression)Expr_45_list.get(0);
		Assert.assertNotNull(RelationalExpression_46_Var);
		final EList<? extends EObject> Expr_46_list = RelationalExpression_46_Var.getExpr();
		Assert.assertNotNull(Expr_46_list);
		Assert.assertEquals(1, Expr_46_list.size());
		final ShiftExpression ShiftExpression_47_Var = (ShiftExpression)Expr_46_list.get(0);
		Assert.assertNotNull(ShiftExpression_47_Var);
		final EList<? extends EObject> Expr_47_list = ShiftExpression_47_Var.getExpr();
		Assert.assertNotNull(Expr_47_list);
		Assert.assertEquals(1, Expr_47_list.size());
		final AdditiveExpression AdditiveExpression_48_Var = (AdditiveExpression)Expr_47_list.get(0);
		Assert.assertNotNull(AdditiveExpression_48_Var);
		final EList<? extends EObject> Expr_48_list = AdditiveExpression_48_Var.getExpr();
		Assert.assertNotNull(Expr_48_list);
		Assert.assertEquals(1, Expr_48_list.size());
		final MultiplicativeExpression MultiplicativeExpression_49_Var = (MultiplicativeExpression)Expr_48_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_49_Var);
		final EList<? extends EObject> Expr_49_list = MultiplicativeExpression_49_Var.getExpr();
		Assert.assertNotNull(Expr_49_list);
		Assert.assertEquals(1, Expr_49_list.size());
		final CastExpression CastExpression_50_Var = (CastExpression)Expr_49_list.get(0);
		Assert.assertNotNull(CastExpression_50_Var);
		final UnaryExpression UnaryExpression_51_Var = (UnaryExpression)CastExpression_50_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_51_Var);
		final PostfixExpression PostfixExpression_52_Var = (PostfixExpression)UnaryExpression_51_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_52_Var);
		final EList<? extends EObject> Expr_52_list = PostfixExpression_52_Var.getExpr();
		Assert.assertNotNull(Expr_52_list);
		Assert.assertEquals(1, Expr_52_list.size());
		final PrimaryExpression PrimaryExpression_53_Var = (PrimaryExpression)Expr_52_list.get(0);
		Assert.assertNotNull(PrimaryExpression_53_Var);
		final Constant Constant_54_Var = (Constant)PrimaryExpression_53_Var.getConst();
		Assert.assertNotNull(Constant_54_Var);
		Assert.assertEquals("\"sizeof(number)=%lu\\n\"", Constant_54_Var.getStr());
		final AssignmentExpression AssignmentExpression_55_Var = (AssignmentExpression)Expr_37_list.get(1);
		Assert.assertNotNull(AssignmentExpression_55_Var);
		final ConditionalExpression ConditionalExpression_56_Var = (ConditionalExpression)AssignmentExpression_55_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_56_Var);
		final LogicalOrExpression LogicalOrExpression_57_Var = (LogicalOrExpression)ConditionalExpression_56_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_57_Var);
		final EList<? extends EObject> Expr_57_list = LogicalOrExpression_57_Var.getExpr();
		Assert.assertNotNull(Expr_57_list);
		Assert.assertEquals(1, Expr_57_list.size());
		final LogicalAndExpression LogicalAndExpression_58_Var = (LogicalAndExpression)Expr_57_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_58_Var);
		final EList<? extends EObject> Expr_58_list = LogicalAndExpression_58_Var.getExpr();
		Assert.assertNotNull(Expr_58_list);
		Assert.assertEquals(1, Expr_58_list.size());
		final InclusiveOrExpression InclusiveOrExpression_59_Var = (InclusiveOrExpression)Expr_58_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_59_Var);
		final EList<? extends EObject> Expr_59_list = InclusiveOrExpression_59_Var.getExpr();
		Assert.assertNotNull(Expr_59_list);
		Assert.assertEquals(1, Expr_59_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_60_Var = (ExclusiveOrExpression)Expr_59_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_60_Var);
		final EList<? extends EObject> Expr_60_list = ExclusiveOrExpression_60_Var.getExpr();
		Assert.assertNotNull(Expr_60_list);
		Assert.assertEquals(1, Expr_60_list.size());
		final AndExpression AndExpression_61_Var = (AndExpression)Expr_60_list.get(0);
		Assert.assertNotNull(AndExpression_61_Var);
		final EList<? extends EObject> Expr_61_list = AndExpression_61_Var.getExpr();
		Assert.assertNotNull(Expr_61_list);
		Assert.assertEquals(1, Expr_61_list.size());
		final EqualityExpression EqualityExpression_62_Var = (EqualityExpression)Expr_61_list.get(0);
		Assert.assertNotNull(EqualityExpression_62_Var);
		final EList<? extends EObject> Expr_62_list = EqualityExpression_62_Var.getExpr();
		Assert.assertNotNull(Expr_62_list);
		Assert.assertEquals(1, Expr_62_list.size());
		final RelationalExpression RelationalExpression_63_Var = (RelationalExpression)Expr_62_list.get(0);
		Assert.assertNotNull(RelationalExpression_63_Var);
		final EList<? extends EObject> Expr_63_list = RelationalExpression_63_Var.getExpr();
		Assert.assertNotNull(Expr_63_list);
		Assert.assertEquals(1, Expr_63_list.size());
		final ShiftExpression ShiftExpression_64_Var = (ShiftExpression)Expr_63_list.get(0);
		Assert.assertNotNull(ShiftExpression_64_Var);
		final EList<? extends EObject> Expr_64_list = ShiftExpression_64_Var.getExpr();
		Assert.assertNotNull(Expr_64_list);
		Assert.assertEquals(1, Expr_64_list.size());
		final AdditiveExpression AdditiveExpression_65_Var = (AdditiveExpression)Expr_64_list.get(0);
		Assert.assertNotNull(AdditiveExpression_65_Var);
		final EList<? extends EObject> Expr_65_list = AdditiveExpression_65_Var.getExpr();
		Assert.assertNotNull(Expr_65_list);
		Assert.assertEquals(1, Expr_65_list.size());
		final MultiplicativeExpression MultiplicativeExpression_66_Var = (MultiplicativeExpression)Expr_65_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_66_Var);
		final EList<? extends EObject> Expr_66_list = MultiplicativeExpression_66_Var.getExpr();
		Assert.assertNotNull(Expr_66_list);
		Assert.assertEquals(1, Expr_66_list.size());
		final CastExpression CastExpression_67_Var = (CastExpression)Expr_66_list.get(0);
		Assert.assertNotNull(CastExpression_67_Var);
		final UnaryExpression UnaryExpression_68_Var = (UnaryExpression)CastExpression_67_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_68_Var);
		final PostfixExpression PostfixExpression_69_Var = (PostfixExpression)UnaryExpression_68_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_69_Var);
		final EList<? extends EObject> Expr_69_list = PostfixExpression_69_Var.getExpr();
		Assert.assertNotNull(Expr_69_list);
		Assert.assertEquals(1, Expr_69_list.size());
		final PrimaryExpression PrimaryExpression_70_Var = (PrimaryExpression)Expr_69_list.get(0);
		Assert.assertNotNull(PrimaryExpression_70_Var);
		Assert.assertEquals("size", PrimaryExpression_70_Var.getId());
		Assert.assertEquals(";", ExpressionStatement_19_Var.getSemi());
		final Statement Statement_71_Var = (Statement)Statement_17_list.get(1);
		Assert.assertNotNull(Statement_71_Var);
		final ExpressionStatement ExpressionStatement_72_Var = (ExpressionStatement)Statement_71_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_72_Var);
		final Expression Expression_73_Var = (Expression)ExpressionStatement_72_Var.getExpression();
		Assert.assertNotNull(Expression_73_Var);
		final EList<? extends EObject> ExprExpr_73_list = Expression_73_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_73_list);
		Assert.assertEquals(1, ExprExpr_73_list.size());
		final AssignmentExpression AssignmentExpression_74_Var = (AssignmentExpression)ExprExpr_73_list.get(0);
		Assert.assertNotNull(AssignmentExpression_74_Var);
		final ConditionalExpression ConditionalExpression_75_Var = (ConditionalExpression)AssignmentExpression_74_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_75_Var);
		final LogicalOrExpression LogicalOrExpression_76_Var = (LogicalOrExpression)ConditionalExpression_75_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_76_Var);
		final EList<? extends EObject> Expr_76_list = LogicalOrExpression_76_Var.getExpr();
		Assert.assertNotNull(Expr_76_list);
		Assert.assertEquals(1, Expr_76_list.size());
		final LogicalAndExpression LogicalAndExpression_77_Var = (LogicalAndExpression)Expr_76_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_77_Var);
		final EList<? extends EObject> Expr_77_list = LogicalAndExpression_77_Var.getExpr();
		Assert.assertNotNull(Expr_77_list);
		Assert.assertEquals(1, Expr_77_list.size());
		final InclusiveOrExpression InclusiveOrExpression_78_Var = (InclusiveOrExpression)Expr_77_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_78_Var);
		final EList<? extends EObject> Expr_78_list = InclusiveOrExpression_78_Var.getExpr();
		Assert.assertNotNull(Expr_78_list);
		Assert.assertEquals(1, Expr_78_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_79_Var = (ExclusiveOrExpression)Expr_78_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_79_Var);
		final EList<? extends EObject> Expr_79_list = ExclusiveOrExpression_79_Var.getExpr();
		Assert.assertNotNull(Expr_79_list);
		Assert.assertEquals(1, Expr_79_list.size());
		final AndExpression AndExpression_80_Var = (AndExpression)Expr_79_list.get(0);
		Assert.assertNotNull(AndExpression_80_Var);
		final EList<? extends EObject> Expr_80_list = AndExpression_80_Var.getExpr();
		Assert.assertNotNull(Expr_80_list);
		Assert.assertEquals(1, Expr_80_list.size());
		final EqualityExpression EqualityExpression_81_Var = (EqualityExpression)Expr_80_list.get(0);
		Assert.assertNotNull(EqualityExpression_81_Var);
		final EList<? extends EObject> Expr_81_list = EqualityExpression_81_Var.getExpr();
		Assert.assertNotNull(Expr_81_list);
		Assert.assertEquals(1, Expr_81_list.size());
		final RelationalExpression RelationalExpression_82_Var = (RelationalExpression)Expr_81_list.get(0);
		Assert.assertNotNull(RelationalExpression_82_Var);
		final EList<? extends EObject> Expr_82_list = RelationalExpression_82_Var.getExpr();
		Assert.assertNotNull(Expr_82_list);
		Assert.assertEquals(1, Expr_82_list.size());
		final ShiftExpression ShiftExpression_83_Var = (ShiftExpression)Expr_82_list.get(0);
		Assert.assertNotNull(ShiftExpression_83_Var);
		final EList<? extends EObject> Expr_83_list = ShiftExpression_83_Var.getExpr();
		Assert.assertNotNull(Expr_83_list);
		Assert.assertEquals(1, Expr_83_list.size());
		final AdditiveExpression AdditiveExpression_84_Var = (AdditiveExpression)Expr_83_list.get(0);
		Assert.assertNotNull(AdditiveExpression_84_Var);
		final EList<? extends EObject> Expr_84_list = AdditiveExpression_84_Var.getExpr();
		Assert.assertNotNull(Expr_84_list);
		Assert.assertEquals(1, Expr_84_list.size());
		final MultiplicativeExpression MultiplicativeExpression_85_Var = (MultiplicativeExpression)Expr_84_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_85_Var);
		final EList<? extends EObject> Expr_85_list = MultiplicativeExpression_85_Var.getExpr();
		Assert.assertNotNull(Expr_85_list);
		Assert.assertEquals(1, Expr_85_list.size());
		final CastExpression CastExpression_86_Var = (CastExpression)Expr_85_list.get(0);
		Assert.assertNotNull(CastExpression_86_Var);
		final UnaryExpression UnaryExpression_87_Var = (UnaryExpression)CastExpression_86_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_87_Var);
		final PostfixExpression PostfixExpression_88_Var = (PostfixExpression)UnaryExpression_87_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_88_Var);
		final EList<? extends EObject> Expr_88_list = PostfixExpression_88_Var.getExpr();
		Assert.assertNotNull(Expr_88_list);
		Assert.assertEquals(1, Expr_88_list.size());
		final PrimaryExpression PrimaryExpression_89_Var = (PrimaryExpression)Expr_88_list.get(0);
		Assert.assertNotNull(PrimaryExpression_89_Var);
		Assert.assertEquals("printf", PrimaryExpression_89_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_89_list = PostfixExpression_88_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_89_list);
		Assert.assertEquals(1, ArgumentExpressionList_89_list.size());
		final ArgumentExpressionList ArgumentExpressionList_90_Var = (ArgumentExpressionList)ArgumentExpressionList_89_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_90_Var);
		final EList<? extends EObject> Expr_90_list = ArgumentExpressionList_90_Var.getExpr();
		Assert.assertNotNull(Expr_90_list);
		Assert.assertEquals(2, Expr_90_list.size());
		final AssignmentExpression AssignmentExpression_91_Var = (AssignmentExpression)Expr_90_list.get(0);
		Assert.assertNotNull(AssignmentExpression_91_Var);
		final ConditionalExpression ConditionalExpression_92_Var = (ConditionalExpression)AssignmentExpression_91_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_92_Var);
		final LogicalOrExpression LogicalOrExpression_93_Var = (LogicalOrExpression)ConditionalExpression_92_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_93_Var);
		final EList<? extends EObject> Expr_93_list = LogicalOrExpression_93_Var.getExpr();
		Assert.assertNotNull(Expr_93_list);
		Assert.assertEquals(1, Expr_93_list.size());
		final LogicalAndExpression LogicalAndExpression_94_Var = (LogicalAndExpression)Expr_93_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_94_Var);
		final EList<? extends EObject> Expr_94_list = LogicalAndExpression_94_Var.getExpr();
		Assert.assertNotNull(Expr_94_list);
		Assert.assertEquals(1, Expr_94_list.size());
		final InclusiveOrExpression InclusiveOrExpression_95_Var = (InclusiveOrExpression)Expr_94_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_95_Var);
		final EList<? extends EObject> Expr_95_list = InclusiveOrExpression_95_Var.getExpr();
		Assert.assertNotNull(Expr_95_list);
		Assert.assertEquals(1, Expr_95_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_96_Var = (ExclusiveOrExpression)Expr_95_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_96_Var);
		final EList<? extends EObject> Expr_96_list = ExclusiveOrExpression_96_Var.getExpr();
		Assert.assertNotNull(Expr_96_list);
		Assert.assertEquals(1, Expr_96_list.size());
		final AndExpression AndExpression_97_Var = (AndExpression)Expr_96_list.get(0);
		Assert.assertNotNull(AndExpression_97_Var);
		final EList<? extends EObject> Expr_97_list = AndExpression_97_Var.getExpr();
		Assert.assertNotNull(Expr_97_list);
		Assert.assertEquals(1, Expr_97_list.size());
		final EqualityExpression EqualityExpression_98_Var = (EqualityExpression)Expr_97_list.get(0);
		Assert.assertNotNull(EqualityExpression_98_Var);
		final EList<? extends EObject> Expr_98_list = EqualityExpression_98_Var.getExpr();
		Assert.assertNotNull(Expr_98_list);
		Assert.assertEquals(1, Expr_98_list.size());
		final RelationalExpression RelationalExpression_99_Var = (RelationalExpression)Expr_98_list.get(0);
		Assert.assertNotNull(RelationalExpression_99_Var);
		final EList<? extends EObject> Expr_99_list = RelationalExpression_99_Var.getExpr();
		Assert.assertNotNull(Expr_99_list);
		Assert.assertEquals(1, Expr_99_list.size());
		final ShiftExpression ShiftExpression_100_Var = (ShiftExpression)Expr_99_list.get(0);
		Assert.assertNotNull(ShiftExpression_100_Var);
		final EList<? extends EObject> Expr_100_list = ShiftExpression_100_Var.getExpr();
		Assert.assertNotNull(Expr_100_list);
		Assert.assertEquals(1, Expr_100_list.size());
		final AdditiveExpression AdditiveExpression_101_Var = (AdditiveExpression)Expr_100_list.get(0);
		Assert.assertNotNull(AdditiveExpression_101_Var);
		final EList<? extends EObject> Expr_101_list = AdditiveExpression_101_Var.getExpr();
		Assert.assertNotNull(Expr_101_list);
		Assert.assertEquals(1, Expr_101_list.size());
		final MultiplicativeExpression MultiplicativeExpression_102_Var = (MultiplicativeExpression)Expr_101_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_102_Var);
		final EList<? extends EObject> Expr_102_list = MultiplicativeExpression_102_Var.getExpr();
		Assert.assertNotNull(Expr_102_list);
		Assert.assertEquals(1, Expr_102_list.size());
		final CastExpression CastExpression_103_Var = (CastExpression)Expr_102_list.get(0);
		Assert.assertNotNull(CastExpression_103_Var);
		final UnaryExpression UnaryExpression_104_Var = (UnaryExpression)CastExpression_103_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_104_Var);
		final PostfixExpression PostfixExpression_105_Var = (PostfixExpression)UnaryExpression_104_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_105_Var);
		final EList<? extends EObject> Expr_105_list = PostfixExpression_105_Var.getExpr();
		Assert.assertNotNull(Expr_105_list);
		Assert.assertEquals(1, Expr_105_list.size());
		final PrimaryExpression PrimaryExpression_106_Var = (PrimaryExpression)Expr_105_list.get(0);
		Assert.assertNotNull(PrimaryExpression_106_Var);
		final Constant Constant_107_Var = (Constant)PrimaryExpression_106_Var.getConst();
		Assert.assertNotNull(Constant_107_Var);
		Assert.assertEquals("\"sizeof(number.numChar)=%lu\\n\"", Constant_107_Var.getStr());
		final AssignmentExpression AssignmentExpression_108_Var = (AssignmentExpression)Expr_90_list.get(1);
		Assert.assertNotNull(AssignmentExpression_108_Var);
		final ConditionalExpression ConditionalExpression_109_Var = (ConditionalExpression)AssignmentExpression_108_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_109_Var);
		final LogicalOrExpression LogicalOrExpression_110_Var = (LogicalOrExpression)ConditionalExpression_109_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_110_Var);
		final EList<? extends EObject> Expr_110_list = LogicalOrExpression_110_Var.getExpr();
		Assert.assertNotNull(Expr_110_list);
		Assert.assertEquals(1, Expr_110_list.size());
		final LogicalAndExpression LogicalAndExpression_111_Var = (LogicalAndExpression)Expr_110_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_111_Var);
		final EList<? extends EObject> Expr_111_list = LogicalAndExpression_111_Var.getExpr();
		Assert.assertNotNull(Expr_111_list);
		Assert.assertEquals(1, Expr_111_list.size());
		final InclusiveOrExpression InclusiveOrExpression_112_Var = (InclusiveOrExpression)Expr_111_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_112_Var);
		final EList<? extends EObject> Expr_112_list = InclusiveOrExpression_112_Var.getExpr();
		Assert.assertNotNull(Expr_112_list);
		Assert.assertEquals(1, Expr_112_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_113_Var = (ExclusiveOrExpression)Expr_112_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_113_Var);
		final EList<? extends EObject> Expr_113_list = ExclusiveOrExpression_113_Var.getExpr();
		Assert.assertNotNull(Expr_113_list);
		Assert.assertEquals(1, Expr_113_list.size());
		final AndExpression AndExpression_114_Var = (AndExpression)Expr_113_list.get(0);
		Assert.assertNotNull(AndExpression_114_Var);
		final EList<? extends EObject> Expr_114_list = AndExpression_114_Var.getExpr();
		Assert.assertNotNull(Expr_114_list);
		Assert.assertEquals(1, Expr_114_list.size());
		final EqualityExpression EqualityExpression_115_Var = (EqualityExpression)Expr_114_list.get(0);
		Assert.assertNotNull(EqualityExpression_115_Var);
		final EList<? extends EObject> Expr_115_list = EqualityExpression_115_Var.getExpr();
		Assert.assertNotNull(Expr_115_list);
		Assert.assertEquals(1, Expr_115_list.size());
		final RelationalExpression RelationalExpression_116_Var = (RelationalExpression)Expr_115_list.get(0);
		Assert.assertNotNull(RelationalExpression_116_Var);
		final EList<? extends EObject> Expr_116_list = RelationalExpression_116_Var.getExpr();
		Assert.assertNotNull(Expr_116_list);
		Assert.assertEquals(1, Expr_116_list.size());
		final ShiftExpression ShiftExpression_117_Var = (ShiftExpression)Expr_116_list.get(0);
		Assert.assertNotNull(ShiftExpression_117_Var);
		final EList<? extends EObject> Expr_117_list = ShiftExpression_117_Var.getExpr();
		Assert.assertNotNull(Expr_117_list);
		Assert.assertEquals(1, Expr_117_list.size());
		final AdditiveExpression AdditiveExpression_118_Var = (AdditiveExpression)Expr_117_list.get(0);
		Assert.assertNotNull(AdditiveExpression_118_Var);
		final EList<? extends EObject> Expr_118_list = AdditiveExpression_118_Var.getExpr();
		Assert.assertNotNull(Expr_118_list);
		Assert.assertEquals(1, Expr_118_list.size());
		final MultiplicativeExpression MultiplicativeExpression_119_Var = (MultiplicativeExpression)Expr_118_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_119_Var);
		final EList<? extends EObject> Expr_119_list = MultiplicativeExpression_119_Var.getExpr();
		Assert.assertNotNull(Expr_119_list);
		Assert.assertEquals(1, Expr_119_list.size());
		final CastExpression CastExpression_120_Var = (CastExpression)Expr_119_list.get(0);
		Assert.assertNotNull(CastExpression_120_Var);
		final UnaryExpression UnaryExpression_121_Var = (UnaryExpression)CastExpression_120_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_121_Var);
		Assert.assertEquals("sizeof", UnaryExpression_121_Var.getSizeOf());
		final UnaryExpression UnaryExpression_122_Var = (UnaryExpression)UnaryExpression_121_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_122_Var);
		final PostfixExpression PostfixExpression_123_Var = (PostfixExpression)UnaryExpression_122_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_123_Var);
		final EList<? extends EObject> Expr_123_list = PostfixExpression_123_Var.getExpr();
		Assert.assertNotNull(Expr_123_list);
		Assert.assertEquals(1, Expr_123_list.size());
		final PrimaryExpression PrimaryExpression_124_Var = (PrimaryExpression)Expr_123_list.get(0);
		Assert.assertNotNull(PrimaryExpression_124_Var);
		final Expression Expression_125_Var = (Expression)PrimaryExpression_124_Var.getExpr();
		Assert.assertNotNull(Expression_125_Var);
		final EList<? extends EObject> ExprExpr_125_list = Expression_125_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_125_list);
		Assert.assertEquals(1, ExprExpr_125_list.size());
		final AssignmentExpression AssignmentExpression_126_Var = (AssignmentExpression)ExprExpr_125_list.get(0);
		Assert.assertNotNull(AssignmentExpression_126_Var);
		final ConditionalExpression ConditionalExpression_127_Var = (ConditionalExpression)AssignmentExpression_126_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_127_Var);
		final LogicalOrExpression LogicalOrExpression_128_Var = (LogicalOrExpression)ConditionalExpression_127_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_128_Var);
		final EList<? extends EObject> Expr_128_list = LogicalOrExpression_128_Var.getExpr();
		Assert.assertNotNull(Expr_128_list);
		Assert.assertEquals(1, Expr_128_list.size());
		final LogicalAndExpression LogicalAndExpression_129_Var = (LogicalAndExpression)Expr_128_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_129_Var);
		final EList<? extends EObject> Expr_129_list = LogicalAndExpression_129_Var.getExpr();
		Assert.assertNotNull(Expr_129_list);
		Assert.assertEquals(1, Expr_129_list.size());
		final InclusiveOrExpression InclusiveOrExpression_130_Var = (InclusiveOrExpression)Expr_129_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_130_Var);
		final EList<? extends EObject> Expr_130_list = InclusiveOrExpression_130_Var.getExpr();
		Assert.assertNotNull(Expr_130_list);
		Assert.assertEquals(1, Expr_130_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_131_Var = (ExclusiveOrExpression)Expr_130_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_131_Var);
		final EList<? extends EObject> Expr_131_list = ExclusiveOrExpression_131_Var.getExpr();
		Assert.assertNotNull(Expr_131_list);
		Assert.assertEquals(1, Expr_131_list.size());
		final AndExpression AndExpression_132_Var = (AndExpression)Expr_131_list.get(0);
		Assert.assertNotNull(AndExpression_132_Var);
		final EList<? extends EObject> Expr_132_list = AndExpression_132_Var.getExpr();
		Assert.assertNotNull(Expr_132_list);
		Assert.assertEquals(1, Expr_132_list.size());
		final EqualityExpression EqualityExpression_133_Var = (EqualityExpression)Expr_132_list.get(0);
		Assert.assertNotNull(EqualityExpression_133_Var);
		final EList<? extends EObject> Expr_133_list = EqualityExpression_133_Var.getExpr();
		Assert.assertNotNull(Expr_133_list);
		Assert.assertEquals(1, Expr_133_list.size());
		final RelationalExpression RelationalExpression_134_Var = (RelationalExpression)Expr_133_list.get(0);
		Assert.assertNotNull(RelationalExpression_134_Var);
		final EList<? extends EObject> Expr_134_list = RelationalExpression_134_Var.getExpr();
		Assert.assertNotNull(Expr_134_list);
		Assert.assertEquals(1, Expr_134_list.size());
		final ShiftExpression ShiftExpression_135_Var = (ShiftExpression)Expr_134_list.get(0);
		Assert.assertNotNull(ShiftExpression_135_Var);
		final EList<? extends EObject> Expr_135_list = ShiftExpression_135_Var.getExpr();
		Assert.assertNotNull(Expr_135_list);
		Assert.assertEquals(1, Expr_135_list.size());
		final AdditiveExpression AdditiveExpression_136_Var = (AdditiveExpression)Expr_135_list.get(0);
		Assert.assertNotNull(AdditiveExpression_136_Var);
		final EList<? extends EObject> Expr_136_list = AdditiveExpression_136_Var.getExpr();
		Assert.assertNotNull(Expr_136_list);
		Assert.assertEquals(1, Expr_136_list.size());
		final MultiplicativeExpression MultiplicativeExpression_137_Var = (MultiplicativeExpression)Expr_136_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_137_Var);
		final EList<? extends EObject> Expr_137_list = MultiplicativeExpression_137_Var.getExpr();
		Assert.assertNotNull(Expr_137_list);
		Assert.assertEquals(1, Expr_137_list.size());
		final CastExpression CastExpression_138_Var = (CastExpression)Expr_137_list.get(0);
		Assert.assertNotNull(CastExpression_138_Var);
		final UnaryExpression UnaryExpression_139_Var = (UnaryExpression)CastExpression_138_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_139_Var);
		final PostfixExpression PostfixExpression_140_Var = (PostfixExpression)UnaryExpression_139_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_140_Var);
		final EList<? extends EObject> Expr_140_list = PostfixExpression_140_Var.getExpr();
		Assert.assertNotNull(Expr_140_list);
		Assert.assertEquals(1, Expr_140_list.size());
		final PrimaryExpression PrimaryExpression_141_Var = (PrimaryExpression)Expr_140_list.get(0);
		Assert.assertNotNull(PrimaryExpression_141_Var);
		Assert.assertEquals("number", PrimaryExpression_141_Var.getId());
		Assert.assertEquals("[.]", PostfixExpression_140_Var.getDot().toString());
		Assert.assertEquals("[numChar]", PostfixExpression_140_Var.getId().toString());
		Assert.assertEquals(";", ExpressionStatement_72_Var.getSemi());
		final Statement Statement_142_Var = (Statement)Statement_17_list.get(2);
		Assert.assertNotNull(Statement_142_Var);
		final ExpressionStatement ExpressionStatement_143_Var = (ExpressionStatement)Statement_142_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_143_Var);
		final Expression Expression_144_Var = (Expression)ExpressionStatement_143_Var.getExpression();
		Assert.assertNotNull(Expression_144_Var);
		final EList<? extends EObject> ExprExpr_144_list = Expression_144_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_144_list);
		Assert.assertEquals(1, ExprExpr_144_list.size());
		final AssignmentExpression AssignmentExpression_145_Var = (AssignmentExpression)ExprExpr_144_list.get(0);
		Assert.assertNotNull(AssignmentExpression_145_Var);
		final ConditionalExpression ConditionalExpression_146_Var = (ConditionalExpression)AssignmentExpression_145_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_146_Var);
		final LogicalOrExpression LogicalOrExpression_147_Var = (LogicalOrExpression)ConditionalExpression_146_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_147_Var);
		final EList<? extends EObject> Expr_147_list = LogicalOrExpression_147_Var.getExpr();
		Assert.assertNotNull(Expr_147_list);
		Assert.assertEquals(1, Expr_147_list.size());
		final LogicalAndExpression LogicalAndExpression_148_Var = (LogicalAndExpression)Expr_147_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_148_Var);
		final EList<? extends EObject> Expr_148_list = LogicalAndExpression_148_Var.getExpr();
		Assert.assertNotNull(Expr_148_list);
		Assert.assertEquals(1, Expr_148_list.size());
		final InclusiveOrExpression InclusiveOrExpression_149_Var = (InclusiveOrExpression)Expr_148_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_149_Var);
		final EList<? extends EObject> Expr_149_list = InclusiveOrExpression_149_Var.getExpr();
		Assert.assertNotNull(Expr_149_list);
		Assert.assertEquals(1, Expr_149_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_150_Var = (ExclusiveOrExpression)Expr_149_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_150_Var);
		final EList<? extends EObject> Expr_150_list = ExclusiveOrExpression_150_Var.getExpr();
		Assert.assertNotNull(Expr_150_list);
		Assert.assertEquals(1, Expr_150_list.size());
		final AndExpression AndExpression_151_Var = (AndExpression)Expr_150_list.get(0);
		Assert.assertNotNull(AndExpression_151_Var);
		final EList<? extends EObject> Expr_151_list = AndExpression_151_Var.getExpr();
		Assert.assertNotNull(Expr_151_list);
		Assert.assertEquals(1, Expr_151_list.size());
		final EqualityExpression EqualityExpression_152_Var = (EqualityExpression)Expr_151_list.get(0);
		Assert.assertNotNull(EqualityExpression_152_Var);
		final EList<? extends EObject> Expr_152_list = EqualityExpression_152_Var.getExpr();
		Assert.assertNotNull(Expr_152_list);
		Assert.assertEquals(1, Expr_152_list.size());
		final RelationalExpression RelationalExpression_153_Var = (RelationalExpression)Expr_152_list.get(0);
		Assert.assertNotNull(RelationalExpression_153_Var);
		final EList<? extends EObject> Expr_153_list = RelationalExpression_153_Var.getExpr();
		Assert.assertNotNull(Expr_153_list);
		Assert.assertEquals(1, Expr_153_list.size());
		final ShiftExpression ShiftExpression_154_Var = (ShiftExpression)Expr_153_list.get(0);
		Assert.assertNotNull(ShiftExpression_154_Var);
		final EList<? extends EObject> Expr_154_list = ShiftExpression_154_Var.getExpr();
		Assert.assertNotNull(Expr_154_list);
		Assert.assertEquals(1, Expr_154_list.size());
		final AdditiveExpression AdditiveExpression_155_Var = (AdditiveExpression)Expr_154_list.get(0);
		Assert.assertNotNull(AdditiveExpression_155_Var);
		final EList<? extends EObject> Expr_155_list = AdditiveExpression_155_Var.getExpr();
		Assert.assertNotNull(Expr_155_list);
		Assert.assertEquals(1, Expr_155_list.size());
		final MultiplicativeExpression MultiplicativeExpression_156_Var = (MultiplicativeExpression)Expr_155_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_156_Var);
		final EList<? extends EObject> Expr_156_list = MultiplicativeExpression_156_Var.getExpr();
		Assert.assertNotNull(Expr_156_list);
		Assert.assertEquals(1, Expr_156_list.size());
		final CastExpression CastExpression_157_Var = (CastExpression)Expr_156_list.get(0);
		Assert.assertNotNull(CastExpression_157_Var);
		final UnaryExpression UnaryExpression_158_Var = (UnaryExpression)CastExpression_157_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_158_Var);
		final PostfixExpression PostfixExpression_159_Var = (PostfixExpression)UnaryExpression_158_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_159_Var);
		final EList<? extends EObject> Expr_159_list = PostfixExpression_159_Var.getExpr();
		Assert.assertNotNull(Expr_159_list);
		Assert.assertEquals(1, Expr_159_list.size());
		final PrimaryExpression PrimaryExpression_160_Var = (PrimaryExpression)Expr_159_list.get(0);
		Assert.assertNotNull(PrimaryExpression_160_Var);
		Assert.assertEquals("printf", PrimaryExpression_160_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_160_list = PostfixExpression_159_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_160_list);
		Assert.assertEquals(1, ArgumentExpressionList_160_list.size());
		final ArgumentExpressionList ArgumentExpressionList_161_Var = (ArgumentExpressionList)ArgumentExpressionList_160_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_161_Var);
		final EList<? extends EObject> Expr_161_list = ArgumentExpressionList_161_Var.getExpr();
		Assert.assertNotNull(Expr_161_list);
		Assert.assertEquals(2, Expr_161_list.size());
		final AssignmentExpression AssignmentExpression_162_Var = (AssignmentExpression)Expr_161_list.get(0);
		Assert.assertNotNull(AssignmentExpression_162_Var);
		final ConditionalExpression ConditionalExpression_163_Var = (ConditionalExpression)AssignmentExpression_162_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_163_Var);
		final LogicalOrExpression LogicalOrExpression_164_Var = (LogicalOrExpression)ConditionalExpression_163_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_164_Var);
		final EList<? extends EObject> Expr_164_list = LogicalOrExpression_164_Var.getExpr();
		Assert.assertNotNull(Expr_164_list);
		Assert.assertEquals(1, Expr_164_list.size());
		final LogicalAndExpression LogicalAndExpression_165_Var = (LogicalAndExpression)Expr_164_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_165_Var);
		final EList<? extends EObject> Expr_165_list = LogicalAndExpression_165_Var.getExpr();
		Assert.assertNotNull(Expr_165_list);
		Assert.assertEquals(1, Expr_165_list.size());
		final InclusiveOrExpression InclusiveOrExpression_166_Var = (InclusiveOrExpression)Expr_165_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_166_Var);
		final EList<? extends EObject> Expr_166_list = InclusiveOrExpression_166_Var.getExpr();
		Assert.assertNotNull(Expr_166_list);
		Assert.assertEquals(1, Expr_166_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_167_Var = (ExclusiveOrExpression)Expr_166_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_167_Var);
		final EList<? extends EObject> Expr_167_list = ExclusiveOrExpression_167_Var.getExpr();
		Assert.assertNotNull(Expr_167_list);
		Assert.assertEquals(1, Expr_167_list.size());
		final AndExpression AndExpression_168_Var = (AndExpression)Expr_167_list.get(0);
		Assert.assertNotNull(AndExpression_168_Var);
		final EList<? extends EObject> Expr_168_list = AndExpression_168_Var.getExpr();
		Assert.assertNotNull(Expr_168_list);
		Assert.assertEquals(1, Expr_168_list.size());
		final EqualityExpression EqualityExpression_169_Var = (EqualityExpression)Expr_168_list.get(0);
		Assert.assertNotNull(EqualityExpression_169_Var);
		final EList<? extends EObject> Expr_169_list = EqualityExpression_169_Var.getExpr();
		Assert.assertNotNull(Expr_169_list);
		Assert.assertEquals(1, Expr_169_list.size());
		final RelationalExpression RelationalExpression_170_Var = (RelationalExpression)Expr_169_list.get(0);
		Assert.assertNotNull(RelationalExpression_170_Var);
		final EList<? extends EObject> Expr_170_list = RelationalExpression_170_Var.getExpr();
		Assert.assertNotNull(Expr_170_list);
		Assert.assertEquals(1, Expr_170_list.size());
		final ShiftExpression ShiftExpression_171_Var = (ShiftExpression)Expr_170_list.get(0);
		Assert.assertNotNull(ShiftExpression_171_Var);
		final EList<? extends EObject> Expr_171_list = ShiftExpression_171_Var.getExpr();
		Assert.assertNotNull(Expr_171_list);
		Assert.assertEquals(1, Expr_171_list.size());
		final AdditiveExpression AdditiveExpression_172_Var = (AdditiveExpression)Expr_171_list.get(0);
		Assert.assertNotNull(AdditiveExpression_172_Var);
		final EList<? extends EObject> Expr_172_list = AdditiveExpression_172_Var.getExpr();
		Assert.assertNotNull(Expr_172_list);
		Assert.assertEquals(1, Expr_172_list.size());
		final MultiplicativeExpression MultiplicativeExpression_173_Var = (MultiplicativeExpression)Expr_172_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_173_Var);
		final EList<? extends EObject> Expr_173_list = MultiplicativeExpression_173_Var.getExpr();
		Assert.assertNotNull(Expr_173_list);
		Assert.assertEquals(1, Expr_173_list.size());
		final CastExpression CastExpression_174_Var = (CastExpression)Expr_173_list.get(0);
		Assert.assertNotNull(CastExpression_174_Var);
		final UnaryExpression UnaryExpression_175_Var = (UnaryExpression)CastExpression_174_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_175_Var);
		final PostfixExpression PostfixExpression_176_Var = (PostfixExpression)UnaryExpression_175_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_176_Var);
		final EList<? extends EObject> Expr_176_list = PostfixExpression_176_Var.getExpr();
		Assert.assertNotNull(Expr_176_list);
		Assert.assertEquals(1, Expr_176_list.size());
		final PrimaryExpression PrimaryExpression_177_Var = (PrimaryExpression)Expr_176_list.get(0);
		Assert.assertNotNull(PrimaryExpression_177_Var);
		final Constant Constant_178_Var = (Constant)PrimaryExpression_177_Var.getConst();
		Assert.assertNotNull(Constant_178_Var);
		Assert.assertEquals("\"sizeof(float)=%lu\\n\"", Constant_178_Var.getStr());
		final AssignmentExpression AssignmentExpression_179_Var = (AssignmentExpression)Expr_161_list.get(1);
		Assert.assertNotNull(AssignmentExpression_179_Var);
		final ConditionalExpression ConditionalExpression_180_Var = (ConditionalExpression)AssignmentExpression_179_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_180_Var);
		final LogicalOrExpression LogicalOrExpression_181_Var = (LogicalOrExpression)ConditionalExpression_180_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_181_Var);
		final EList<? extends EObject> Expr_181_list = LogicalOrExpression_181_Var.getExpr();
		Assert.assertNotNull(Expr_181_list);
		Assert.assertEquals(1, Expr_181_list.size());
		final LogicalAndExpression LogicalAndExpression_182_Var = (LogicalAndExpression)Expr_181_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_182_Var);
		final EList<? extends EObject> Expr_182_list = LogicalAndExpression_182_Var.getExpr();
		Assert.assertNotNull(Expr_182_list);
		Assert.assertEquals(1, Expr_182_list.size());
		final InclusiveOrExpression InclusiveOrExpression_183_Var = (InclusiveOrExpression)Expr_182_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_183_Var);
		final EList<? extends EObject> Expr_183_list = InclusiveOrExpression_183_Var.getExpr();
		Assert.assertNotNull(Expr_183_list);
		Assert.assertEquals(1, Expr_183_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_184_Var = (ExclusiveOrExpression)Expr_183_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_184_Var);
		final EList<? extends EObject> Expr_184_list = ExclusiveOrExpression_184_Var.getExpr();
		Assert.assertNotNull(Expr_184_list);
		Assert.assertEquals(1, Expr_184_list.size());
		final AndExpression AndExpression_185_Var = (AndExpression)Expr_184_list.get(0);
		Assert.assertNotNull(AndExpression_185_Var);
		final EList<? extends EObject> Expr_185_list = AndExpression_185_Var.getExpr();
		Assert.assertNotNull(Expr_185_list);
		Assert.assertEquals(1, Expr_185_list.size());
		final EqualityExpression EqualityExpression_186_Var = (EqualityExpression)Expr_185_list.get(0);
		Assert.assertNotNull(EqualityExpression_186_Var);
		final EList<? extends EObject> Expr_186_list = EqualityExpression_186_Var.getExpr();
		Assert.assertNotNull(Expr_186_list);
		Assert.assertEquals(1, Expr_186_list.size());
		final RelationalExpression RelationalExpression_187_Var = (RelationalExpression)Expr_186_list.get(0);
		Assert.assertNotNull(RelationalExpression_187_Var);
		final EList<? extends EObject> Expr_187_list = RelationalExpression_187_Var.getExpr();
		Assert.assertNotNull(Expr_187_list);
		Assert.assertEquals(1, Expr_187_list.size());
		final ShiftExpression ShiftExpression_188_Var = (ShiftExpression)Expr_187_list.get(0);
		Assert.assertNotNull(ShiftExpression_188_Var);
		final EList<? extends EObject> Expr_188_list = ShiftExpression_188_Var.getExpr();
		Assert.assertNotNull(Expr_188_list);
		Assert.assertEquals(1, Expr_188_list.size());
		final AdditiveExpression AdditiveExpression_189_Var = (AdditiveExpression)Expr_188_list.get(0);
		Assert.assertNotNull(AdditiveExpression_189_Var);
		final EList<? extends EObject> Expr_189_list = AdditiveExpression_189_Var.getExpr();
		Assert.assertNotNull(Expr_189_list);
		Assert.assertEquals(1, Expr_189_list.size());
		final MultiplicativeExpression MultiplicativeExpression_190_Var = (MultiplicativeExpression)Expr_189_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_190_Var);
		final EList<? extends EObject> Expr_190_list = MultiplicativeExpression_190_Var.getExpr();
		Assert.assertNotNull(Expr_190_list);
		Assert.assertEquals(1, Expr_190_list.size());
		final CastExpression CastExpression_191_Var = (CastExpression)Expr_190_list.get(0);
		Assert.assertNotNull(CastExpression_191_Var);
		final UnaryExpression UnaryExpression_192_Var = (UnaryExpression)CastExpression_191_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_192_Var);
		Assert.assertEquals("sizeof", UnaryExpression_192_Var.getSizeOf());
		final TypeName TypeName_193_Var = (TypeName)UnaryExpression_192_Var.getTypeName();
		Assert.assertNotNull(TypeName_193_Var);
		final SpecifierQualifierList SpecifierQualifierList_194_Var = (SpecifierQualifierList)TypeName_193_Var.getList();
		Assert.assertNotNull(SpecifierQualifierList_194_Var);
		final EList<? extends EObject> TypeSpecifier_194_list = SpecifierQualifierList_194_Var.getTypeSpecifier();
		Assert.assertNotNull(TypeSpecifier_194_list);
		Assert.assertEquals(1, TypeSpecifier_194_list.size());
		final TypeSpecifier TypeSpecifier_195_Var = (TypeSpecifier)TypeSpecifier_194_list.get(0);
		Assert.assertNotNull(TypeSpecifier_195_Var);
		Assert.assertEquals("float", TypeSpecifier_195_Var.getName());
		Assert.assertEquals(";", ExpressionStatement_143_Var.getSemi());
		final Statement Statement_196_Var = (Statement)Statement_17_list.get(3);
		Assert.assertNotNull(Statement_196_Var);
		final ExpressionStatement ExpressionStatement_197_Var = (ExpressionStatement)Statement_196_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_197_Var);
		final Expression Expression_198_Var = (Expression)ExpressionStatement_197_Var.getExpression();
		Assert.assertNotNull(Expression_198_Var);
		final EList<? extends EObject> ExprExpr_198_list = Expression_198_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_198_list);
		Assert.assertEquals(1, ExprExpr_198_list.size());
		final AssignmentExpression AssignmentExpression_199_Var = (AssignmentExpression)ExprExpr_198_list.get(0);
		Assert.assertNotNull(AssignmentExpression_199_Var);
		final UnaryExpression UnaryExpression_200_Var = (UnaryExpression)AssignmentExpression_199_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_200_Var);
		final PostfixExpression PostfixExpression_201_Var = (PostfixExpression)UnaryExpression_200_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_201_Var);
		final EList<? extends EObject> Expr_201_list = PostfixExpression_201_Var.getExpr();
		Assert.assertNotNull(Expr_201_list);
		Assert.assertEquals(1, Expr_201_list.size());
		final PrimaryExpression PrimaryExpression_202_Var = (PrimaryExpression)Expr_201_list.get(0);
		Assert.assertNotNull(PrimaryExpression_202_Var);
		Assert.assertEquals("number", PrimaryExpression_202_Var.getId());
		Assert.assertEquals("[.]", PostfixExpression_201_Var.getDot().toString());
		Assert.assertEquals("[numChar]", PostfixExpression_201_Var.getId().toString());
		final AssignmentOperator AssignmentOperator_203_Var = (AssignmentOperator)AssignmentExpression_199_Var.getOp();
		Assert.assertNotNull(AssignmentOperator_203_Var);
		Assert.assertEquals("=", AssignmentOperator_203_Var.getOp());
		final AssignmentExpression AssignmentExpression_204_Var = (AssignmentExpression)AssignmentExpression_199_Var.getAssignmentExpr();
		Assert.assertNotNull(AssignmentExpression_204_Var);
		final ConditionalExpression ConditionalExpression_205_Var = (ConditionalExpression)AssignmentExpression_204_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_205_Var);
		final LogicalOrExpression LogicalOrExpression_206_Var = (LogicalOrExpression)ConditionalExpression_205_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_206_Var);
		final EList<? extends EObject> Expr_206_list = LogicalOrExpression_206_Var.getExpr();
		Assert.assertNotNull(Expr_206_list);
		Assert.assertEquals(1, Expr_206_list.size());
		final LogicalAndExpression LogicalAndExpression_207_Var = (LogicalAndExpression)Expr_206_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_207_Var);
		final EList<? extends EObject> Expr_207_list = LogicalAndExpression_207_Var.getExpr();
		Assert.assertNotNull(Expr_207_list);
		Assert.assertEquals(1, Expr_207_list.size());
		final InclusiveOrExpression InclusiveOrExpression_208_Var = (InclusiveOrExpression)Expr_207_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_208_Var);
		final EList<? extends EObject> Expr_208_list = InclusiveOrExpression_208_Var.getExpr();
		Assert.assertNotNull(Expr_208_list);
		Assert.assertEquals(1, Expr_208_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_209_Var = (ExclusiveOrExpression)Expr_208_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_209_Var);
		final EList<? extends EObject> Expr_209_list = ExclusiveOrExpression_209_Var.getExpr();
		Assert.assertNotNull(Expr_209_list);
		Assert.assertEquals(1, Expr_209_list.size());
		final AndExpression AndExpression_210_Var = (AndExpression)Expr_209_list.get(0);
		Assert.assertNotNull(AndExpression_210_Var);
		final EList<? extends EObject> Expr_210_list = AndExpression_210_Var.getExpr();
		Assert.assertNotNull(Expr_210_list);
		Assert.assertEquals(1, Expr_210_list.size());
		final EqualityExpression EqualityExpression_211_Var = (EqualityExpression)Expr_210_list.get(0);
		Assert.assertNotNull(EqualityExpression_211_Var);
		final EList<? extends EObject> Expr_211_list = EqualityExpression_211_Var.getExpr();
		Assert.assertNotNull(Expr_211_list);
		Assert.assertEquals(1, Expr_211_list.size());
		final RelationalExpression RelationalExpression_212_Var = (RelationalExpression)Expr_211_list.get(0);
		Assert.assertNotNull(RelationalExpression_212_Var);
		final EList<? extends EObject> Expr_212_list = RelationalExpression_212_Var.getExpr();
		Assert.assertNotNull(Expr_212_list);
		Assert.assertEquals(1, Expr_212_list.size());
		final ShiftExpression ShiftExpression_213_Var = (ShiftExpression)Expr_212_list.get(0);
		Assert.assertNotNull(ShiftExpression_213_Var);
		final EList<? extends EObject> Expr_213_list = ShiftExpression_213_Var.getExpr();
		Assert.assertNotNull(Expr_213_list);
		Assert.assertEquals(1, Expr_213_list.size());
		final AdditiveExpression AdditiveExpression_214_Var = (AdditiveExpression)Expr_213_list.get(0);
		Assert.assertNotNull(AdditiveExpression_214_Var);
		final EList<? extends EObject> Expr_214_list = AdditiveExpression_214_Var.getExpr();
		Assert.assertNotNull(Expr_214_list);
		Assert.assertEquals(1, Expr_214_list.size());
		final MultiplicativeExpression MultiplicativeExpression_215_Var = (MultiplicativeExpression)Expr_214_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_215_Var);
		final EList<? extends EObject> Expr_215_list = MultiplicativeExpression_215_Var.getExpr();
		Assert.assertNotNull(Expr_215_list);
		Assert.assertEquals(1, Expr_215_list.size());
		final CastExpression CastExpression_216_Var = (CastExpression)Expr_215_list.get(0);
		Assert.assertNotNull(CastExpression_216_Var);
		final UnaryExpression UnaryExpression_217_Var = (UnaryExpression)CastExpression_216_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_217_Var);
		final PostfixExpression PostfixExpression_218_Var = (PostfixExpression)UnaryExpression_217_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_218_Var);
		final EList<? extends EObject> Expr_218_list = PostfixExpression_218_Var.getExpr();
		Assert.assertNotNull(Expr_218_list);
		Assert.assertEquals(1, Expr_218_list.size());
		final PrimaryExpression PrimaryExpression_219_Var = (PrimaryExpression)Expr_218_list.get(0);
		Assert.assertNotNull(PrimaryExpression_219_Var);
		final Constant Constant_220_Var = (Constant)PrimaryExpression_219_Var.getConst();
		Assert.assertNotNull(Constant_220_Var);
		Assert.assertEquals("65", Constant_220_Var.getDec());
		Assert.assertEquals(";", ExpressionStatement_197_Var.getSemi());
		final Statement Statement_221_Var = (Statement)Statement_17_list.get(4);
		Assert.assertNotNull(Statement_221_Var);
		final ExpressionStatement ExpressionStatement_222_Var = (ExpressionStatement)Statement_221_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_222_Var);
		final Expression Expression_223_Var = (Expression)ExpressionStatement_222_Var.getExpression();
		Assert.assertNotNull(Expression_223_Var);
		final EList<? extends EObject> ExprExpr_223_list = Expression_223_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_223_list);
		Assert.assertEquals(1, ExprExpr_223_list.size());
		final AssignmentExpression AssignmentExpression_224_Var = (AssignmentExpression)ExprExpr_223_list.get(0);
		Assert.assertNotNull(AssignmentExpression_224_Var);
		final ConditionalExpression ConditionalExpression_225_Var = (ConditionalExpression)AssignmentExpression_224_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_225_Var);
		final LogicalOrExpression LogicalOrExpression_226_Var = (LogicalOrExpression)ConditionalExpression_225_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_226_Var);
		final EList<? extends EObject> Expr_226_list = LogicalOrExpression_226_Var.getExpr();
		Assert.assertNotNull(Expr_226_list);
		Assert.assertEquals(1, Expr_226_list.size());
		final LogicalAndExpression LogicalAndExpression_227_Var = (LogicalAndExpression)Expr_226_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_227_Var);
		final EList<? extends EObject> Expr_227_list = LogicalAndExpression_227_Var.getExpr();
		Assert.assertNotNull(Expr_227_list);
		Assert.assertEquals(1, Expr_227_list.size());
		final InclusiveOrExpression InclusiveOrExpression_228_Var = (InclusiveOrExpression)Expr_227_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_228_Var);
		final EList<? extends EObject> Expr_228_list = InclusiveOrExpression_228_Var.getExpr();
		Assert.assertNotNull(Expr_228_list);
		Assert.assertEquals(1, Expr_228_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_229_Var = (ExclusiveOrExpression)Expr_228_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_229_Var);
		final EList<? extends EObject> Expr_229_list = ExclusiveOrExpression_229_Var.getExpr();
		Assert.assertNotNull(Expr_229_list);
		Assert.assertEquals(1, Expr_229_list.size());
		final AndExpression AndExpression_230_Var = (AndExpression)Expr_229_list.get(0);
		Assert.assertNotNull(AndExpression_230_Var);
		final EList<? extends EObject> Expr_230_list = AndExpression_230_Var.getExpr();
		Assert.assertNotNull(Expr_230_list);
		Assert.assertEquals(1, Expr_230_list.size());
		final EqualityExpression EqualityExpression_231_Var = (EqualityExpression)Expr_230_list.get(0);
		Assert.assertNotNull(EqualityExpression_231_Var);
		final EList<? extends EObject> Expr_231_list = EqualityExpression_231_Var.getExpr();
		Assert.assertNotNull(Expr_231_list);
		Assert.assertEquals(1, Expr_231_list.size());
		final RelationalExpression RelationalExpression_232_Var = (RelationalExpression)Expr_231_list.get(0);
		Assert.assertNotNull(RelationalExpression_232_Var);
		final EList<? extends EObject> Expr_232_list = RelationalExpression_232_Var.getExpr();
		Assert.assertNotNull(Expr_232_list);
		Assert.assertEquals(1, Expr_232_list.size());
		final ShiftExpression ShiftExpression_233_Var = (ShiftExpression)Expr_232_list.get(0);
		Assert.assertNotNull(ShiftExpression_233_Var);
		final EList<? extends EObject> Expr_233_list = ShiftExpression_233_Var.getExpr();
		Assert.assertNotNull(Expr_233_list);
		Assert.assertEquals(1, Expr_233_list.size());
		final AdditiveExpression AdditiveExpression_234_Var = (AdditiveExpression)Expr_233_list.get(0);
		Assert.assertNotNull(AdditiveExpression_234_Var);
		final EList<? extends EObject> Expr_234_list = AdditiveExpression_234_Var.getExpr();
		Assert.assertNotNull(Expr_234_list);
		Assert.assertEquals(1, Expr_234_list.size());
		final MultiplicativeExpression MultiplicativeExpression_235_Var = (MultiplicativeExpression)Expr_234_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_235_Var);
		final EList<? extends EObject> Expr_235_list = MultiplicativeExpression_235_Var.getExpr();
		Assert.assertNotNull(Expr_235_list);
		Assert.assertEquals(1, Expr_235_list.size());
		final CastExpression CastExpression_236_Var = (CastExpression)Expr_235_list.get(0);
		Assert.assertNotNull(CastExpression_236_Var);
		final UnaryExpression UnaryExpression_237_Var = (UnaryExpression)CastExpression_236_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_237_Var);
		final PostfixExpression PostfixExpression_238_Var = (PostfixExpression)UnaryExpression_237_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_238_Var);
		final EList<? extends EObject> Expr_238_list = PostfixExpression_238_Var.getExpr();
		Assert.assertNotNull(Expr_238_list);
		Assert.assertEquals(1, Expr_238_list.size());
		final PrimaryExpression PrimaryExpression_239_Var = (PrimaryExpression)Expr_238_list.get(0);
		Assert.assertNotNull(PrimaryExpression_239_Var);
		Assert.assertEquals("printf", PrimaryExpression_239_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_239_list = PostfixExpression_238_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_239_list);
		Assert.assertEquals(1, ArgumentExpressionList_239_list.size());
		final ArgumentExpressionList ArgumentExpressionList_240_Var = (ArgumentExpressionList)ArgumentExpressionList_239_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_240_Var);
		final EList<? extends EObject> Expr_240_list = ArgumentExpressionList_240_Var.getExpr();
		Assert.assertNotNull(Expr_240_list);
		Assert.assertEquals(2, Expr_240_list.size());
		final AssignmentExpression AssignmentExpression_241_Var = (AssignmentExpression)Expr_240_list.get(0);
		Assert.assertNotNull(AssignmentExpression_241_Var);
		final ConditionalExpression ConditionalExpression_242_Var = (ConditionalExpression)AssignmentExpression_241_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_242_Var);
		final LogicalOrExpression LogicalOrExpression_243_Var = (LogicalOrExpression)ConditionalExpression_242_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_243_Var);
		final EList<? extends EObject> Expr_243_list = LogicalOrExpression_243_Var.getExpr();
		Assert.assertNotNull(Expr_243_list);
		Assert.assertEquals(1, Expr_243_list.size());
		final LogicalAndExpression LogicalAndExpression_244_Var = (LogicalAndExpression)Expr_243_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_244_Var);
		final EList<? extends EObject> Expr_244_list = LogicalAndExpression_244_Var.getExpr();
		Assert.assertNotNull(Expr_244_list);
		Assert.assertEquals(1, Expr_244_list.size());
		final InclusiveOrExpression InclusiveOrExpression_245_Var = (InclusiveOrExpression)Expr_244_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_245_Var);
		final EList<? extends EObject> Expr_245_list = InclusiveOrExpression_245_Var.getExpr();
		Assert.assertNotNull(Expr_245_list);
		Assert.assertEquals(1, Expr_245_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_246_Var = (ExclusiveOrExpression)Expr_245_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_246_Var);
		final EList<? extends EObject> Expr_246_list = ExclusiveOrExpression_246_Var.getExpr();
		Assert.assertNotNull(Expr_246_list);
		Assert.assertEquals(1, Expr_246_list.size());
		final AndExpression AndExpression_247_Var = (AndExpression)Expr_246_list.get(0);
		Assert.assertNotNull(AndExpression_247_Var);
		final EList<? extends EObject> Expr_247_list = AndExpression_247_Var.getExpr();
		Assert.assertNotNull(Expr_247_list);
		Assert.assertEquals(1, Expr_247_list.size());
		final EqualityExpression EqualityExpression_248_Var = (EqualityExpression)Expr_247_list.get(0);
		Assert.assertNotNull(EqualityExpression_248_Var);
		final EList<? extends EObject> Expr_248_list = EqualityExpression_248_Var.getExpr();
		Assert.assertNotNull(Expr_248_list);
		Assert.assertEquals(1, Expr_248_list.size());
		final RelationalExpression RelationalExpression_249_Var = (RelationalExpression)Expr_248_list.get(0);
		Assert.assertNotNull(RelationalExpression_249_Var);
		final EList<? extends EObject> Expr_249_list = RelationalExpression_249_Var.getExpr();
		Assert.assertNotNull(Expr_249_list);
		Assert.assertEquals(1, Expr_249_list.size());
		final ShiftExpression ShiftExpression_250_Var = (ShiftExpression)Expr_249_list.get(0);
		Assert.assertNotNull(ShiftExpression_250_Var);
		final EList<? extends EObject> Expr_250_list = ShiftExpression_250_Var.getExpr();
		Assert.assertNotNull(Expr_250_list);
		Assert.assertEquals(1, Expr_250_list.size());
		final AdditiveExpression AdditiveExpression_251_Var = (AdditiveExpression)Expr_250_list.get(0);
		Assert.assertNotNull(AdditiveExpression_251_Var);
		final EList<? extends EObject> Expr_251_list = AdditiveExpression_251_Var.getExpr();
		Assert.assertNotNull(Expr_251_list);
		Assert.assertEquals(1, Expr_251_list.size());
		final MultiplicativeExpression MultiplicativeExpression_252_Var = (MultiplicativeExpression)Expr_251_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_252_Var);
		final EList<? extends EObject> Expr_252_list = MultiplicativeExpression_252_Var.getExpr();
		Assert.assertNotNull(Expr_252_list);
		Assert.assertEquals(1, Expr_252_list.size());
		final CastExpression CastExpression_253_Var = (CastExpression)Expr_252_list.get(0);
		Assert.assertNotNull(CastExpression_253_Var);
		final UnaryExpression UnaryExpression_254_Var = (UnaryExpression)CastExpression_253_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_254_Var);
		final PostfixExpression PostfixExpression_255_Var = (PostfixExpression)UnaryExpression_254_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_255_Var);
		final EList<? extends EObject> Expr_255_list = PostfixExpression_255_Var.getExpr();
		Assert.assertNotNull(Expr_255_list);
		Assert.assertEquals(1, Expr_255_list.size());
		final PrimaryExpression PrimaryExpression_256_Var = (PrimaryExpression)Expr_255_list.get(0);
		Assert.assertNotNull(PrimaryExpression_256_Var);
		final Constant Constant_257_Var = (Constant)PrimaryExpression_256_Var.getConst();
		Assert.assertNotNull(Constant_257_Var);
		Assert.assertEquals("\"number.numChar(as decimal)=%d\\n\"", Constant_257_Var.getStr());
		final AssignmentExpression AssignmentExpression_258_Var = (AssignmentExpression)Expr_240_list.get(1);
		Assert.assertNotNull(AssignmentExpression_258_Var);
		final ConditionalExpression ConditionalExpression_259_Var = (ConditionalExpression)AssignmentExpression_258_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_259_Var);
		final LogicalOrExpression LogicalOrExpression_260_Var = (LogicalOrExpression)ConditionalExpression_259_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_260_Var);
		final EList<? extends EObject> Expr_260_list = LogicalOrExpression_260_Var.getExpr();
		Assert.assertNotNull(Expr_260_list);
		Assert.assertEquals(1, Expr_260_list.size());
		final LogicalAndExpression LogicalAndExpression_261_Var = (LogicalAndExpression)Expr_260_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_261_Var);
		final EList<? extends EObject> Expr_261_list = LogicalAndExpression_261_Var.getExpr();
		Assert.assertNotNull(Expr_261_list);
		Assert.assertEquals(1, Expr_261_list.size());
		final InclusiveOrExpression InclusiveOrExpression_262_Var = (InclusiveOrExpression)Expr_261_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_262_Var);
		final EList<? extends EObject> Expr_262_list = InclusiveOrExpression_262_Var.getExpr();
		Assert.assertNotNull(Expr_262_list);
		Assert.assertEquals(1, Expr_262_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_263_Var = (ExclusiveOrExpression)Expr_262_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_263_Var);
		final EList<? extends EObject> Expr_263_list = ExclusiveOrExpression_263_Var.getExpr();
		Assert.assertNotNull(Expr_263_list);
		Assert.assertEquals(1, Expr_263_list.size());
		final AndExpression AndExpression_264_Var = (AndExpression)Expr_263_list.get(0);
		Assert.assertNotNull(AndExpression_264_Var);
		final EList<? extends EObject> Expr_264_list = AndExpression_264_Var.getExpr();
		Assert.assertNotNull(Expr_264_list);
		Assert.assertEquals(1, Expr_264_list.size());
		final EqualityExpression EqualityExpression_265_Var = (EqualityExpression)Expr_264_list.get(0);
		Assert.assertNotNull(EqualityExpression_265_Var);
		final EList<? extends EObject> Expr_265_list = EqualityExpression_265_Var.getExpr();
		Assert.assertNotNull(Expr_265_list);
		Assert.assertEquals(1, Expr_265_list.size());
		final RelationalExpression RelationalExpression_266_Var = (RelationalExpression)Expr_265_list.get(0);
		Assert.assertNotNull(RelationalExpression_266_Var);
		final EList<? extends EObject> Expr_266_list = RelationalExpression_266_Var.getExpr();
		Assert.assertNotNull(Expr_266_list);
		Assert.assertEquals(1, Expr_266_list.size());
		final ShiftExpression ShiftExpression_267_Var = (ShiftExpression)Expr_266_list.get(0);
		Assert.assertNotNull(ShiftExpression_267_Var);
		final EList<? extends EObject> Expr_267_list = ShiftExpression_267_Var.getExpr();
		Assert.assertNotNull(Expr_267_list);
		Assert.assertEquals(1, Expr_267_list.size());
		final AdditiveExpression AdditiveExpression_268_Var = (AdditiveExpression)Expr_267_list.get(0);
		Assert.assertNotNull(AdditiveExpression_268_Var);
		final EList<? extends EObject> Expr_268_list = AdditiveExpression_268_Var.getExpr();
		Assert.assertNotNull(Expr_268_list);
		Assert.assertEquals(1, Expr_268_list.size());
		final MultiplicativeExpression MultiplicativeExpression_269_Var = (MultiplicativeExpression)Expr_268_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_269_Var);
		final EList<? extends EObject> Expr_269_list = MultiplicativeExpression_269_Var.getExpr();
		Assert.assertNotNull(Expr_269_list);
		Assert.assertEquals(1, Expr_269_list.size());
		final CastExpression CastExpression_270_Var = (CastExpression)Expr_269_list.get(0);
		Assert.assertNotNull(CastExpression_270_Var);
		final UnaryExpression UnaryExpression_271_Var = (UnaryExpression)CastExpression_270_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_271_Var);
		final PostfixExpression PostfixExpression_272_Var = (PostfixExpression)UnaryExpression_271_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_272_Var);
		final EList<? extends EObject> Expr_272_list = PostfixExpression_272_Var.getExpr();
		Assert.assertNotNull(Expr_272_list);
		Assert.assertEquals(1, Expr_272_list.size());
		final PrimaryExpression PrimaryExpression_273_Var = (PrimaryExpression)Expr_272_list.get(0);
		Assert.assertNotNull(PrimaryExpression_273_Var);
		Assert.assertEquals("number", PrimaryExpression_273_Var.getId());
		Assert.assertEquals("[.]", PostfixExpression_272_Var.getDot().toString());
		Assert.assertEquals("[numChar]", PostfixExpression_272_Var.getId().toString());
		Assert.assertEquals(";", ExpressionStatement_222_Var.getSemi());
		final Statement Statement_274_Var = (Statement)Statement_17_list.get(5);
		Assert.assertNotNull(Statement_274_Var);
		final ExpressionStatement ExpressionStatement_275_Var = (ExpressionStatement)Statement_274_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_275_Var);
		final Expression Expression_276_Var = (Expression)ExpressionStatement_275_Var.getExpression();
		Assert.assertNotNull(Expression_276_Var);
		final EList<? extends EObject> ExprExpr_276_list = Expression_276_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_276_list);
		Assert.assertEquals(1, ExprExpr_276_list.size());
		final AssignmentExpression AssignmentExpression_277_Var = (AssignmentExpression)ExprExpr_276_list.get(0);
		Assert.assertNotNull(AssignmentExpression_277_Var);
		final ConditionalExpression ConditionalExpression_278_Var = (ConditionalExpression)AssignmentExpression_277_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_278_Var);
		final LogicalOrExpression LogicalOrExpression_279_Var = (LogicalOrExpression)ConditionalExpression_278_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_279_Var);
		final EList<? extends EObject> Expr_279_list = LogicalOrExpression_279_Var.getExpr();
		Assert.assertNotNull(Expr_279_list);
		Assert.assertEquals(1, Expr_279_list.size());
		final LogicalAndExpression LogicalAndExpression_280_Var = (LogicalAndExpression)Expr_279_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_280_Var);
		final EList<? extends EObject> Expr_280_list = LogicalAndExpression_280_Var.getExpr();
		Assert.assertNotNull(Expr_280_list);
		Assert.assertEquals(1, Expr_280_list.size());
		final InclusiveOrExpression InclusiveOrExpression_281_Var = (InclusiveOrExpression)Expr_280_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_281_Var);
		final EList<? extends EObject> Expr_281_list = InclusiveOrExpression_281_Var.getExpr();
		Assert.assertNotNull(Expr_281_list);
		Assert.assertEquals(1, Expr_281_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_282_Var = (ExclusiveOrExpression)Expr_281_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_282_Var);
		final EList<? extends EObject> Expr_282_list = ExclusiveOrExpression_282_Var.getExpr();
		Assert.assertNotNull(Expr_282_list);
		Assert.assertEquals(1, Expr_282_list.size());
		final AndExpression AndExpression_283_Var = (AndExpression)Expr_282_list.get(0);
		Assert.assertNotNull(AndExpression_283_Var);
		final EList<? extends EObject> Expr_283_list = AndExpression_283_Var.getExpr();
		Assert.assertNotNull(Expr_283_list);
		Assert.assertEquals(1, Expr_283_list.size());
		final EqualityExpression EqualityExpression_284_Var = (EqualityExpression)Expr_283_list.get(0);
		Assert.assertNotNull(EqualityExpression_284_Var);
		final EList<? extends EObject> Expr_284_list = EqualityExpression_284_Var.getExpr();
		Assert.assertNotNull(Expr_284_list);
		Assert.assertEquals(1, Expr_284_list.size());
		final RelationalExpression RelationalExpression_285_Var = (RelationalExpression)Expr_284_list.get(0);
		Assert.assertNotNull(RelationalExpression_285_Var);
		final EList<? extends EObject> Expr_285_list = RelationalExpression_285_Var.getExpr();
		Assert.assertNotNull(Expr_285_list);
		Assert.assertEquals(1, Expr_285_list.size());
		final ShiftExpression ShiftExpression_286_Var = (ShiftExpression)Expr_285_list.get(0);
		Assert.assertNotNull(ShiftExpression_286_Var);
		final EList<? extends EObject> Expr_286_list = ShiftExpression_286_Var.getExpr();
		Assert.assertNotNull(Expr_286_list);
		Assert.assertEquals(1, Expr_286_list.size());
		final AdditiveExpression AdditiveExpression_287_Var = (AdditiveExpression)Expr_286_list.get(0);
		Assert.assertNotNull(AdditiveExpression_287_Var);
		final EList<? extends EObject> Expr_287_list = AdditiveExpression_287_Var.getExpr();
		Assert.assertNotNull(Expr_287_list);
		Assert.assertEquals(1, Expr_287_list.size());
		final MultiplicativeExpression MultiplicativeExpression_288_Var = (MultiplicativeExpression)Expr_287_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_288_Var);
		final EList<? extends EObject> Expr_288_list = MultiplicativeExpression_288_Var.getExpr();
		Assert.assertNotNull(Expr_288_list);
		Assert.assertEquals(1, Expr_288_list.size());
		final CastExpression CastExpression_289_Var = (CastExpression)Expr_288_list.get(0);
		Assert.assertNotNull(CastExpression_289_Var);
		final UnaryExpression UnaryExpression_290_Var = (UnaryExpression)CastExpression_289_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_290_Var);
		final PostfixExpression PostfixExpression_291_Var = (PostfixExpression)UnaryExpression_290_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_291_Var);
		final EList<? extends EObject> Expr_291_list = PostfixExpression_291_Var.getExpr();
		Assert.assertNotNull(Expr_291_list);
		Assert.assertEquals(1, Expr_291_list.size());
		final PrimaryExpression PrimaryExpression_292_Var = (PrimaryExpression)Expr_291_list.get(0);
		Assert.assertNotNull(PrimaryExpression_292_Var);
		Assert.assertEquals("printf", PrimaryExpression_292_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_292_list = PostfixExpression_291_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_292_list);
		Assert.assertEquals(1, ArgumentExpressionList_292_list.size());
		final ArgumentExpressionList ArgumentExpressionList_293_Var = (ArgumentExpressionList)ArgumentExpressionList_292_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_293_Var);
		final EList<? extends EObject> Expr_293_list = ArgumentExpressionList_293_Var.getExpr();
		Assert.assertNotNull(Expr_293_list);
		Assert.assertEquals(2, Expr_293_list.size());
		final AssignmentExpression AssignmentExpression_294_Var = (AssignmentExpression)Expr_293_list.get(0);
		Assert.assertNotNull(AssignmentExpression_294_Var);
		final ConditionalExpression ConditionalExpression_295_Var = (ConditionalExpression)AssignmentExpression_294_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_295_Var);
		final LogicalOrExpression LogicalOrExpression_296_Var = (LogicalOrExpression)ConditionalExpression_295_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_296_Var);
		final EList<? extends EObject> Expr_296_list = LogicalOrExpression_296_Var.getExpr();
		Assert.assertNotNull(Expr_296_list);
		Assert.assertEquals(1, Expr_296_list.size());
		final LogicalAndExpression LogicalAndExpression_297_Var = (LogicalAndExpression)Expr_296_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_297_Var);
		final EList<? extends EObject> Expr_297_list = LogicalAndExpression_297_Var.getExpr();
		Assert.assertNotNull(Expr_297_list);
		Assert.assertEquals(1, Expr_297_list.size());
		final InclusiveOrExpression InclusiveOrExpression_298_Var = (InclusiveOrExpression)Expr_297_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_298_Var);
		final EList<? extends EObject> Expr_298_list = InclusiveOrExpression_298_Var.getExpr();
		Assert.assertNotNull(Expr_298_list);
		Assert.assertEquals(1, Expr_298_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_299_Var = (ExclusiveOrExpression)Expr_298_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_299_Var);
		final EList<? extends EObject> Expr_299_list = ExclusiveOrExpression_299_Var.getExpr();
		Assert.assertNotNull(Expr_299_list);
		Assert.assertEquals(1, Expr_299_list.size());
		final AndExpression AndExpression_300_Var = (AndExpression)Expr_299_list.get(0);
		Assert.assertNotNull(AndExpression_300_Var);
		final EList<? extends EObject> Expr_300_list = AndExpression_300_Var.getExpr();
		Assert.assertNotNull(Expr_300_list);
		Assert.assertEquals(1, Expr_300_list.size());
		final EqualityExpression EqualityExpression_301_Var = (EqualityExpression)Expr_300_list.get(0);
		Assert.assertNotNull(EqualityExpression_301_Var);
		final EList<? extends EObject> Expr_301_list = EqualityExpression_301_Var.getExpr();
		Assert.assertNotNull(Expr_301_list);
		Assert.assertEquals(1, Expr_301_list.size());
		final RelationalExpression RelationalExpression_302_Var = (RelationalExpression)Expr_301_list.get(0);
		Assert.assertNotNull(RelationalExpression_302_Var);
		final EList<? extends EObject> Expr_302_list = RelationalExpression_302_Var.getExpr();
		Assert.assertNotNull(Expr_302_list);
		Assert.assertEquals(1, Expr_302_list.size());
		final ShiftExpression ShiftExpression_303_Var = (ShiftExpression)Expr_302_list.get(0);
		Assert.assertNotNull(ShiftExpression_303_Var);
		final EList<? extends EObject> Expr_303_list = ShiftExpression_303_Var.getExpr();
		Assert.assertNotNull(Expr_303_list);
		Assert.assertEquals(1, Expr_303_list.size());
		final AdditiveExpression AdditiveExpression_304_Var = (AdditiveExpression)Expr_303_list.get(0);
		Assert.assertNotNull(AdditiveExpression_304_Var);
		final EList<? extends EObject> Expr_304_list = AdditiveExpression_304_Var.getExpr();
		Assert.assertNotNull(Expr_304_list);
		Assert.assertEquals(1, Expr_304_list.size());
		final MultiplicativeExpression MultiplicativeExpression_305_Var = (MultiplicativeExpression)Expr_304_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_305_Var);
		final EList<? extends EObject> Expr_305_list = MultiplicativeExpression_305_Var.getExpr();
		Assert.assertNotNull(Expr_305_list);
		Assert.assertEquals(1, Expr_305_list.size());
		final CastExpression CastExpression_306_Var = (CastExpression)Expr_305_list.get(0);
		Assert.assertNotNull(CastExpression_306_Var);
		final UnaryExpression UnaryExpression_307_Var = (UnaryExpression)CastExpression_306_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_307_Var);
		final PostfixExpression PostfixExpression_308_Var = (PostfixExpression)UnaryExpression_307_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_308_Var);
		final EList<? extends EObject> Expr_308_list = PostfixExpression_308_Var.getExpr();
		Assert.assertNotNull(Expr_308_list);
		Assert.assertEquals(1, Expr_308_list.size());
		final PrimaryExpression PrimaryExpression_309_Var = (PrimaryExpression)Expr_308_list.get(0);
		Assert.assertNotNull(PrimaryExpression_309_Var);
		final Constant Constant_310_Var = (Constant)PrimaryExpression_309_Var.getConst();
		Assert.assertNotNull(Constant_310_Var);
		Assert.assertEquals("\"number.numChar(as char)=%c\\n\"", Constant_310_Var.getStr());
		final AssignmentExpression AssignmentExpression_311_Var = (AssignmentExpression)Expr_293_list.get(1);
		Assert.assertNotNull(AssignmentExpression_311_Var);
		final ConditionalExpression ConditionalExpression_312_Var = (ConditionalExpression)AssignmentExpression_311_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_312_Var);
		final LogicalOrExpression LogicalOrExpression_313_Var = (LogicalOrExpression)ConditionalExpression_312_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_313_Var);
		final EList<? extends EObject> Expr_313_list = LogicalOrExpression_313_Var.getExpr();
		Assert.assertNotNull(Expr_313_list);
		Assert.assertEquals(1, Expr_313_list.size());
		final LogicalAndExpression LogicalAndExpression_314_Var = (LogicalAndExpression)Expr_313_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_314_Var);
		final EList<? extends EObject> Expr_314_list = LogicalAndExpression_314_Var.getExpr();
		Assert.assertNotNull(Expr_314_list);
		Assert.assertEquals(1, Expr_314_list.size());
		final InclusiveOrExpression InclusiveOrExpression_315_Var = (InclusiveOrExpression)Expr_314_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_315_Var);
		final EList<? extends EObject> Expr_315_list = InclusiveOrExpression_315_Var.getExpr();
		Assert.assertNotNull(Expr_315_list);
		Assert.assertEquals(1, Expr_315_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_316_Var = (ExclusiveOrExpression)Expr_315_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_316_Var);
		final EList<? extends EObject> Expr_316_list = ExclusiveOrExpression_316_Var.getExpr();
		Assert.assertNotNull(Expr_316_list);
		Assert.assertEquals(1, Expr_316_list.size());
		final AndExpression AndExpression_317_Var = (AndExpression)Expr_316_list.get(0);
		Assert.assertNotNull(AndExpression_317_Var);
		final EList<? extends EObject> Expr_317_list = AndExpression_317_Var.getExpr();
		Assert.assertNotNull(Expr_317_list);
		Assert.assertEquals(1, Expr_317_list.size());
		final EqualityExpression EqualityExpression_318_Var = (EqualityExpression)Expr_317_list.get(0);
		Assert.assertNotNull(EqualityExpression_318_Var);
		final EList<? extends EObject> Expr_318_list = EqualityExpression_318_Var.getExpr();
		Assert.assertNotNull(Expr_318_list);
		Assert.assertEquals(1, Expr_318_list.size());
		final RelationalExpression RelationalExpression_319_Var = (RelationalExpression)Expr_318_list.get(0);
		Assert.assertNotNull(RelationalExpression_319_Var);
		final EList<? extends EObject> Expr_319_list = RelationalExpression_319_Var.getExpr();
		Assert.assertNotNull(Expr_319_list);
		Assert.assertEquals(1, Expr_319_list.size());
		final ShiftExpression ShiftExpression_320_Var = (ShiftExpression)Expr_319_list.get(0);
		Assert.assertNotNull(ShiftExpression_320_Var);
		final EList<? extends EObject> Expr_320_list = ShiftExpression_320_Var.getExpr();
		Assert.assertNotNull(Expr_320_list);
		Assert.assertEquals(1, Expr_320_list.size());
		final AdditiveExpression AdditiveExpression_321_Var = (AdditiveExpression)Expr_320_list.get(0);
		Assert.assertNotNull(AdditiveExpression_321_Var);
		final EList<? extends EObject> Expr_321_list = AdditiveExpression_321_Var.getExpr();
		Assert.assertNotNull(Expr_321_list);
		Assert.assertEquals(1, Expr_321_list.size());
		final MultiplicativeExpression MultiplicativeExpression_322_Var = (MultiplicativeExpression)Expr_321_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_322_Var);
		final EList<? extends EObject> Expr_322_list = MultiplicativeExpression_322_Var.getExpr();
		Assert.assertNotNull(Expr_322_list);
		Assert.assertEquals(1, Expr_322_list.size());
		final CastExpression CastExpression_323_Var = (CastExpression)Expr_322_list.get(0);
		Assert.assertNotNull(CastExpression_323_Var);
		final UnaryExpression UnaryExpression_324_Var = (UnaryExpression)CastExpression_323_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_324_Var);
		final PostfixExpression PostfixExpression_325_Var = (PostfixExpression)UnaryExpression_324_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_325_Var);
		final EList<? extends EObject> Expr_325_list = PostfixExpression_325_Var.getExpr();
		Assert.assertNotNull(Expr_325_list);
		Assert.assertEquals(1, Expr_325_list.size());
		final PrimaryExpression PrimaryExpression_326_Var = (PrimaryExpression)Expr_325_list.get(0);
		Assert.assertNotNull(PrimaryExpression_326_Var);
		Assert.assertEquals("number", PrimaryExpression_326_Var.getId());
		Assert.assertEquals("[.]", PostfixExpression_325_Var.getDot().toString());
		Assert.assertEquals("[numChar]", PostfixExpression_325_Var.getId().toString());
		Assert.assertEquals(";", ExpressionStatement_275_Var.getSemi());
		final Statement Statement_327_Var = (Statement)Statement_17_list.get(6);
		Assert.assertNotNull(Statement_327_Var);
		final ExpressionStatement ExpressionStatement_328_Var = (ExpressionStatement)Statement_327_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_328_Var);
		final Expression Expression_329_Var = (Expression)ExpressionStatement_328_Var.getExpression();
		Assert.assertNotNull(Expression_329_Var);
		final EList<? extends EObject> ExprExpr_329_list = Expression_329_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_329_list);
		Assert.assertEquals(1, ExprExpr_329_list.size());
		final AssignmentExpression AssignmentExpression_330_Var = (AssignmentExpression)ExprExpr_329_list.get(0);
		Assert.assertNotNull(AssignmentExpression_330_Var);
		final ConditionalExpression ConditionalExpression_331_Var = (ConditionalExpression)AssignmentExpression_330_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_331_Var);
		final LogicalOrExpression LogicalOrExpression_332_Var = (LogicalOrExpression)ConditionalExpression_331_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_332_Var);
		final EList<? extends EObject> Expr_332_list = LogicalOrExpression_332_Var.getExpr();
		Assert.assertNotNull(Expr_332_list);
		Assert.assertEquals(1, Expr_332_list.size());
		final LogicalAndExpression LogicalAndExpression_333_Var = (LogicalAndExpression)Expr_332_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_333_Var);
		final EList<? extends EObject> Expr_333_list = LogicalAndExpression_333_Var.getExpr();
		Assert.assertNotNull(Expr_333_list);
		Assert.assertEquals(1, Expr_333_list.size());
		final InclusiveOrExpression InclusiveOrExpression_334_Var = (InclusiveOrExpression)Expr_333_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_334_Var);
		final EList<? extends EObject> Expr_334_list = InclusiveOrExpression_334_Var.getExpr();
		Assert.assertNotNull(Expr_334_list);
		Assert.assertEquals(1, Expr_334_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_335_Var = (ExclusiveOrExpression)Expr_334_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_335_Var);
		final EList<? extends EObject> Expr_335_list = ExclusiveOrExpression_335_Var.getExpr();
		Assert.assertNotNull(Expr_335_list);
		Assert.assertEquals(1, Expr_335_list.size());
		final AndExpression AndExpression_336_Var = (AndExpression)Expr_335_list.get(0);
		Assert.assertNotNull(AndExpression_336_Var);
		final EList<? extends EObject> Expr_336_list = AndExpression_336_Var.getExpr();
		Assert.assertNotNull(Expr_336_list);
		Assert.assertEquals(1, Expr_336_list.size());
		final EqualityExpression EqualityExpression_337_Var = (EqualityExpression)Expr_336_list.get(0);
		Assert.assertNotNull(EqualityExpression_337_Var);
		final EList<? extends EObject> Expr_337_list = EqualityExpression_337_Var.getExpr();
		Assert.assertNotNull(Expr_337_list);
		Assert.assertEquals(1, Expr_337_list.size());
		final RelationalExpression RelationalExpression_338_Var = (RelationalExpression)Expr_337_list.get(0);
		Assert.assertNotNull(RelationalExpression_338_Var);
		final EList<? extends EObject> Expr_338_list = RelationalExpression_338_Var.getExpr();
		Assert.assertNotNull(Expr_338_list);
		Assert.assertEquals(1, Expr_338_list.size());
		final ShiftExpression ShiftExpression_339_Var = (ShiftExpression)Expr_338_list.get(0);
		Assert.assertNotNull(ShiftExpression_339_Var);
		final EList<? extends EObject> Expr_339_list = ShiftExpression_339_Var.getExpr();
		Assert.assertNotNull(Expr_339_list);
		Assert.assertEquals(1, Expr_339_list.size());
		final AdditiveExpression AdditiveExpression_340_Var = (AdditiveExpression)Expr_339_list.get(0);
		Assert.assertNotNull(AdditiveExpression_340_Var);
		final EList<? extends EObject> Expr_340_list = AdditiveExpression_340_Var.getExpr();
		Assert.assertNotNull(Expr_340_list);
		Assert.assertEquals(1, Expr_340_list.size());
		final MultiplicativeExpression MultiplicativeExpression_341_Var = (MultiplicativeExpression)Expr_340_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_341_Var);
		final EList<? extends EObject> Expr_341_list = MultiplicativeExpression_341_Var.getExpr();
		Assert.assertNotNull(Expr_341_list);
		Assert.assertEquals(1, Expr_341_list.size());
		final CastExpression CastExpression_342_Var = (CastExpression)Expr_341_list.get(0);
		Assert.assertNotNull(CastExpression_342_Var);
		final UnaryExpression UnaryExpression_343_Var = (UnaryExpression)CastExpression_342_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_343_Var);
		final PostfixExpression PostfixExpression_344_Var = (PostfixExpression)UnaryExpression_343_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_344_Var);
		final EList<? extends EObject> Expr_344_list = PostfixExpression_344_Var.getExpr();
		Assert.assertNotNull(Expr_344_list);
		Assert.assertEquals(1, Expr_344_list.size());
		final PrimaryExpression PrimaryExpression_345_Var = (PrimaryExpression)Expr_344_list.get(0);
		Assert.assertNotNull(PrimaryExpression_345_Var);
		Assert.assertEquals("printf", PrimaryExpression_345_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_345_list = PostfixExpression_344_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_345_list);
		Assert.assertEquals(1, ArgumentExpressionList_345_list.size());
		final ArgumentExpressionList ArgumentExpressionList_346_Var = (ArgumentExpressionList)ArgumentExpressionList_345_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_346_Var);
		final EList<? extends EObject> Expr_346_list = ArgumentExpressionList_346_Var.getExpr();
		Assert.assertNotNull(Expr_346_list);
		Assert.assertEquals(2, Expr_346_list.size());
		final AssignmentExpression AssignmentExpression_347_Var = (AssignmentExpression)Expr_346_list.get(0);
		Assert.assertNotNull(AssignmentExpression_347_Var);
		final ConditionalExpression ConditionalExpression_348_Var = (ConditionalExpression)AssignmentExpression_347_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_348_Var);
		final LogicalOrExpression LogicalOrExpression_349_Var = (LogicalOrExpression)ConditionalExpression_348_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_349_Var);
		final EList<? extends EObject> Expr_349_list = LogicalOrExpression_349_Var.getExpr();
		Assert.assertNotNull(Expr_349_list);
		Assert.assertEquals(1, Expr_349_list.size());
		final LogicalAndExpression LogicalAndExpression_350_Var = (LogicalAndExpression)Expr_349_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_350_Var);
		final EList<? extends EObject> Expr_350_list = LogicalAndExpression_350_Var.getExpr();
		Assert.assertNotNull(Expr_350_list);
		Assert.assertEquals(1, Expr_350_list.size());
		final InclusiveOrExpression InclusiveOrExpression_351_Var = (InclusiveOrExpression)Expr_350_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_351_Var);
		final EList<? extends EObject> Expr_351_list = InclusiveOrExpression_351_Var.getExpr();
		Assert.assertNotNull(Expr_351_list);
		Assert.assertEquals(1, Expr_351_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_352_Var = (ExclusiveOrExpression)Expr_351_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_352_Var);
		final EList<? extends EObject> Expr_352_list = ExclusiveOrExpression_352_Var.getExpr();
		Assert.assertNotNull(Expr_352_list);
		Assert.assertEquals(1, Expr_352_list.size());
		final AndExpression AndExpression_353_Var = (AndExpression)Expr_352_list.get(0);
		Assert.assertNotNull(AndExpression_353_Var);
		final EList<? extends EObject> Expr_353_list = AndExpression_353_Var.getExpr();
		Assert.assertNotNull(Expr_353_list);
		Assert.assertEquals(1, Expr_353_list.size());
		final EqualityExpression EqualityExpression_354_Var = (EqualityExpression)Expr_353_list.get(0);
		Assert.assertNotNull(EqualityExpression_354_Var);
		final EList<? extends EObject> Expr_354_list = EqualityExpression_354_Var.getExpr();
		Assert.assertNotNull(Expr_354_list);
		Assert.assertEquals(1, Expr_354_list.size());
		final RelationalExpression RelationalExpression_355_Var = (RelationalExpression)Expr_354_list.get(0);
		Assert.assertNotNull(RelationalExpression_355_Var);
		final EList<? extends EObject> Expr_355_list = RelationalExpression_355_Var.getExpr();
		Assert.assertNotNull(Expr_355_list);
		Assert.assertEquals(1, Expr_355_list.size());
		final ShiftExpression ShiftExpression_356_Var = (ShiftExpression)Expr_355_list.get(0);
		Assert.assertNotNull(ShiftExpression_356_Var);
		final EList<? extends EObject> Expr_356_list = ShiftExpression_356_Var.getExpr();
		Assert.assertNotNull(Expr_356_list);
		Assert.assertEquals(1, Expr_356_list.size());
		final AdditiveExpression AdditiveExpression_357_Var = (AdditiveExpression)Expr_356_list.get(0);
		Assert.assertNotNull(AdditiveExpression_357_Var);
		final EList<? extends EObject> Expr_357_list = AdditiveExpression_357_Var.getExpr();
		Assert.assertNotNull(Expr_357_list);
		Assert.assertEquals(1, Expr_357_list.size());
		final MultiplicativeExpression MultiplicativeExpression_358_Var = (MultiplicativeExpression)Expr_357_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_358_Var);
		final EList<? extends EObject> Expr_358_list = MultiplicativeExpression_358_Var.getExpr();
		Assert.assertNotNull(Expr_358_list);
		Assert.assertEquals(1, Expr_358_list.size());
		final CastExpression CastExpression_359_Var = (CastExpression)Expr_358_list.get(0);
		Assert.assertNotNull(CastExpression_359_Var);
		final UnaryExpression UnaryExpression_360_Var = (UnaryExpression)CastExpression_359_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_360_Var);
		final PostfixExpression PostfixExpression_361_Var = (PostfixExpression)UnaryExpression_360_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_361_Var);
		final EList<? extends EObject> Expr_361_list = PostfixExpression_361_Var.getExpr();
		Assert.assertNotNull(Expr_361_list);
		Assert.assertEquals(1, Expr_361_list.size());
		final PrimaryExpression PrimaryExpression_362_Var = (PrimaryExpression)Expr_361_list.get(0);
		Assert.assertNotNull(PrimaryExpression_362_Var);
		final Constant Constant_363_Var = (Constant)PrimaryExpression_362_Var.getConst();
		Assert.assertNotNull(Constant_363_Var);
		Assert.assertEquals("\"number.numFloat=%f\\n\"", Constant_363_Var.getStr());
		final AssignmentExpression AssignmentExpression_364_Var = (AssignmentExpression)Expr_346_list.get(1);
		Assert.assertNotNull(AssignmentExpression_364_Var);
		final ConditionalExpression ConditionalExpression_365_Var = (ConditionalExpression)AssignmentExpression_364_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_365_Var);
		final LogicalOrExpression LogicalOrExpression_366_Var = (LogicalOrExpression)ConditionalExpression_365_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_366_Var);
		final EList<? extends EObject> Expr_366_list = LogicalOrExpression_366_Var.getExpr();
		Assert.assertNotNull(Expr_366_list);
		Assert.assertEquals(1, Expr_366_list.size());
		final LogicalAndExpression LogicalAndExpression_367_Var = (LogicalAndExpression)Expr_366_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_367_Var);
		final EList<? extends EObject> Expr_367_list = LogicalAndExpression_367_Var.getExpr();
		Assert.assertNotNull(Expr_367_list);
		Assert.assertEquals(1, Expr_367_list.size());
		final InclusiveOrExpression InclusiveOrExpression_368_Var = (InclusiveOrExpression)Expr_367_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_368_Var);
		final EList<? extends EObject> Expr_368_list = InclusiveOrExpression_368_Var.getExpr();
		Assert.assertNotNull(Expr_368_list);
		Assert.assertEquals(1, Expr_368_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_369_Var = (ExclusiveOrExpression)Expr_368_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_369_Var);
		final EList<? extends EObject> Expr_369_list = ExclusiveOrExpression_369_Var.getExpr();
		Assert.assertNotNull(Expr_369_list);
		Assert.assertEquals(1, Expr_369_list.size());
		final AndExpression AndExpression_370_Var = (AndExpression)Expr_369_list.get(0);
		Assert.assertNotNull(AndExpression_370_Var);
		final EList<? extends EObject> Expr_370_list = AndExpression_370_Var.getExpr();
		Assert.assertNotNull(Expr_370_list);
		Assert.assertEquals(1, Expr_370_list.size());
		final EqualityExpression EqualityExpression_371_Var = (EqualityExpression)Expr_370_list.get(0);
		Assert.assertNotNull(EqualityExpression_371_Var);
		final EList<? extends EObject> Expr_371_list = EqualityExpression_371_Var.getExpr();
		Assert.assertNotNull(Expr_371_list);
		Assert.assertEquals(1, Expr_371_list.size());
		final RelationalExpression RelationalExpression_372_Var = (RelationalExpression)Expr_371_list.get(0);
		Assert.assertNotNull(RelationalExpression_372_Var);
		final EList<? extends EObject> Expr_372_list = RelationalExpression_372_Var.getExpr();
		Assert.assertNotNull(Expr_372_list);
		Assert.assertEquals(1, Expr_372_list.size());
		final ShiftExpression ShiftExpression_373_Var = (ShiftExpression)Expr_372_list.get(0);
		Assert.assertNotNull(ShiftExpression_373_Var);
		final EList<? extends EObject> Expr_373_list = ShiftExpression_373_Var.getExpr();
		Assert.assertNotNull(Expr_373_list);
		Assert.assertEquals(1, Expr_373_list.size());
		final AdditiveExpression AdditiveExpression_374_Var = (AdditiveExpression)Expr_373_list.get(0);
		Assert.assertNotNull(AdditiveExpression_374_Var);
		final EList<? extends EObject> Expr_374_list = AdditiveExpression_374_Var.getExpr();
		Assert.assertNotNull(Expr_374_list);
		Assert.assertEquals(1, Expr_374_list.size());
		final MultiplicativeExpression MultiplicativeExpression_375_Var = (MultiplicativeExpression)Expr_374_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_375_Var);
		final EList<? extends EObject> Expr_375_list = MultiplicativeExpression_375_Var.getExpr();
		Assert.assertNotNull(Expr_375_list);
		Assert.assertEquals(1, Expr_375_list.size());
		final CastExpression CastExpression_376_Var = (CastExpression)Expr_375_list.get(0);
		Assert.assertNotNull(CastExpression_376_Var);
		final UnaryExpression UnaryExpression_377_Var = (UnaryExpression)CastExpression_376_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_377_Var);
		final PostfixExpression PostfixExpression_378_Var = (PostfixExpression)UnaryExpression_377_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_378_Var);
		final EList<? extends EObject> Expr_378_list = PostfixExpression_378_Var.getExpr();
		Assert.assertNotNull(Expr_378_list);
		Assert.assertEquals(1, Expr_378_list.size());
		final PrimaryExpression PrimaryExpression_379_Var = (PrimaryExpression)Expr_378_list.get(0);
		Assert.assertNotNull(PrimaryExpression_379_Var);
		Assert.assertEquals("number", PrimaryExpression_379_Var.getId());
		Assert.assertEquals("[.]", PostfixExpression_378_Var.getDot().toString());
		Assert.assertEquals("[numFloat]", PostfixExpression_378_Var.getId().toString());
		Assert.assertEquals(";", ExpressionStatement_328_Var.getSemi());
		final Statement Statement_380_Var = (Statement)Statement_17_list.get(7);
		Assert.assertNotNull(Statement_380_Var);
		final ExpressionStatement ExpressionStatement_381_Var = (ExpressionStatement)Statement_380_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_381_Var);
		final Expression Expression_382_Var = (Expression)ExpressionStatement_381_Var.getExpression();
		Assert.assertNotNull(Expression_382_Var);
		final EList<? extends EObject> ExprExpr_382_list = Expression_382_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_382_list);
		Assert.assertEquals(1, ExprExpr_382_list.size());
		final AssignmentExpression AssignmentExpression_383_Var = (AssignmentExpression)ExprExpr_382_list.get(0);
		Assert.assertNotNull(AssignmentExpression_383_Var);
		final UnaryExpression UnaryExpression_384_Var = (UnaryExpression)AssignmentExpression_383_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_384_Var);
		final PostfixExpression PostfixExpression_385_Var = (PostfixExpression)UnaryExpression_384_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_385_Var);
		final EList<? extends EObject> Expr_385_list = PostfixExpression_385_Var.getExpr();
		Assert.assertNotNull(Expr_385_list);
		Assert.assertEquals(1, Expr_385_list.size());
		final PrimaryExpression PrimaryExpression_386_Var = (PrimaryExpression)Expr_385_list.get(0);
		Assert.assertNotNull(PrimaryExpression_386_Var);
		Assert.assertEquals("number", PrimaryExpression_386_Var.getId());
		Assert.assertEquals("[.]", PostfixExpression_385_Var.getDot().toString());
		Assert.assertEquals("[numFloat]", PostfixExpression_385_Var.getId().toString());
		final AssignmentOperator AssignmentOperator_387_Var = (AssignmentOperator)AssignmentExpression_383_Var.getOp();
		Assert.assertNotNull(AssignmentOperator_387_Var);
		Assert.assertEquals("=", AssignmentOperator_387_Var.getOp());
		final AssignmentExpression AssignmentExpression_388_Var = (AssignmentExpression)AssignmentExpression_383_Var.getAssignmentExpr();
		Assert.assertNotNull(AssignmentExpression_388_Var);
		final ConditionalExpression ConditionalExpression_389_Var = (ConditionalExpression)AssignmentExpression_388_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_389_Var);
		final LogicalOrExpression LogicalOrExpression_390_Var = (LogicalOrExpression)ConditionalExpression_389_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_390_Var);
		final EList<? extends EObject> Expr_390_list = LogicalOrExpression_390_Var.getExpr();
		Assert.assertNotNull(Expr_390_list);
		Assert.assertEquals(1, Expr_390_list.size());
		final LogicalAndExpression LogicalAndExpression_391_Var = (LogicalAndExpression)Expr_390_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_391_Var);
		final EList<? extends EObject> Expr_391_list = LogicalAndExpression_391_Var.getExpr();
		Assert.assertNotNull(Expr_391_list);
		Assert.assertEquals(1, Expr_391_list.size());
		final InclusiveOrExpression InclusiveOrExpression_392_Var = (InclusiveOrExpression)Expr_391_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_392_Var);
		final EList<? extends EObject> Expr_392_list = InclusiveOrExpression_392_Var.getExpr();
		Assert.assertNotNull(Expr_392_list);
		Assert.assertEquals(1, Expr_392_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_393_Var = (ExclusiveOrExpression)Expr_392_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_393_Var);
		final EList<? extends EObject> Expr_393_list = ExclusiveOrExpression_393_Var.getExpr();
		Assert.assertNotNull(Expr_393_list);
		Assert.assertEquals(1, Expr_393_list.size());
		final AndExpression AndExpression_394_Var = (AndExpression)Expr_393_list.get(0);
		Assert.assertNotNull(AndExpression_394_Var);
		final EList<? extends EObject> Expr_394_list = AndExpression_394_Var.getExpr();
		Assert.assertNotNull(Expr_394_list);
		Assert.assertEquals(1, Expr_394_list.size());
		final EqualityExpression EqualityExpression_395_Var = (EqualityExpression)Expr_394_list.get(0);
		Assert.assertNotNull(EqualityExpression_395_Var);
		final EList<? extends EObject> Expr_395_list = EqualityExpression_395_Var.getExpr();
		Assert.assertNotNull(Expr_395_list);
		Assert.assertEquals(1, Expr_395_list.size());
		final RelationalExpression RelationalExpression_396_Var = (RelationalExpression)Expr_395_list.get(0);
		Assert.assertNotNull(RelationalExpression_396_Var);
		final EList<? extends EObject> Expr_396_list = RelationalExpression_396_Var.getExpr();
		Assert.assertNotNull(Expr_396_list);
		Assert.assertEquals(1, Expr_396_list.size());
		final ShiftExpression ShiftExpression_397_Var = (ShiftExpression)Expr_396_list.get(0);
		Assert.assertNotNull(ShiftExpression_397_Var);
		final EList<? extends EObject> Expr_397_list = ShiftExpression_397_Var.getExpr();
		Assert.assertNotNull(Expr_397_list);
		Assert.assertEquals(1, Expr_397_list.size());
		final AdditiveExpression AdditiveExpression_398_Var = (AdditiveExpression)Expr_397_list.get(0);
		Assert.assertNotNull(AdditiveExpression_398_Var);
		final EList<? extends EObject> Expr_398_list = AdditiveExpression_398_Var.getExpr();
		Assert.assertNotNull(Expr_398_list);
		Assert.assertEquals(1, Expr_398_list.size());
		final MultiplicativeExpression MultiplicativeExpression_399_Var = (MultiplicativeExpression)Expr_398_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_399_Var);
		final EList<? extends EObject> Expr_399_list = MultiplicativeExpression_399_Var.getExpr();
		Assert.assertNotNull(Expr_399_list);
		Assert.assertEquals(1, Expr_399_list.size());
		final CastExpression CastExpression_400_Var = (CastExpression)Expr_399_list.get(0);
		Assert.assertNotNull(CastExpression_400_Var);
		final UnaryExpression UnaryExpression_401_Var = (UnaryExpression)CastExpression_400_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_401_Var);
		final PostfixExpression PostfixExpression_402_Var = (PostfixExpression)UnaryExpression_401_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_402_Var);
		final EList<? extends EObject> Expr_402_list = PostfixExpression_402_Var.getExpr();
		Assert.assertNotNull(Expr_402_list);
		Assert.assertEquals(1, Expr_402_list.size());
		final PrimaryExpression PrimaryExpression_403_Var = (PrimaryExpression)Expr_402_list.get(0);
		Assert.assertNotNull(PrimaryExpression_403_Var);
		final Constant Constant_404_Var = (Constant)PrimaryExpression_403_Var.getConst();
		Assert.assertNotNull(Constant_404_Var);
		Assert.assertEquals("0.56789", Constant_404_Var.getFloat());
		Assert.assertEquals(";", ExpressionStatement_381_Var.getSemi());
		final Statement Statement_405_Var = (Statement)Statement_17_list.get(8);
		Assert.assertNotNull(Statement_405_Var);
		final ExpressionStatement ExpressionStatement_406_Var = (ExpressionStatement)Statement_405_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_406_Var);
		final Expression Expression_407_Var = (Expression)ExpressionStatement_406_Var.getExpression();
		Assert.assertNotNull(Expression_407_Var);
		final EList<? extends EObject> ExprExpr_407_list = Expression_407_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_407_list);
		Assert.assertEquals(1, ExprExpr_407_list.size());
		final AssignmentExpression AssignmentExpression_408_Var = (AssignmentExpression)ExprExpr_407_list.get(0);
		Assert.assertNotNull(AssignmentExpression_408_Var);
		final ConditionalExpression ConditionalExpression_409_Var = (ConditionalExpression)AssignmentExpression_408_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_409_Var);
		final LogicalOrExpression LogicalOrExpression_410_Var = (LogicalOrExpression)ConditionalExpression_409_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_410_Var);
		final EList<? extends EObject> Expr_410_list = LogicalOrExpression_410_Var.getExpr();
		Assert.assertNotNull(Expr_410_list);
		Assert.assertEquals(1, Expr_410_list.size());
		final LogicalAndExpression LogicalAndExpression_411_Var = (LogicalAndExpression)Expr_410_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_411_Var);
		final EList<? extends EObject> Expr_411_list = LogicalAndExpression_411_Var.getExpr();
		Assert.assertNotNull(Expr_411_list);
		Assert.assertEquals(1, Expr_411_list.size());
		final InclusiveOrExpression InclusiveOrExpression_412_Var = (InclusiveOrExpression)Expr_411_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_412_Var);
		final EList<? extends EObject> Expr_412_list = InclusiveOrExpression_412_Var.getExpr();
		Assert.assertNotNull(Expr_412_list);
		Assert.assertEquals(1, Expr_412_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_413_Var = (ExclusiveOrExpression)Expr_412_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_413_Var);
		final EList<? extends EObject> Expr_413_list = ExclusiveOrExpression_413_Var.getExpr();
		Assert.assertNotNull(Expr_413_list);
		Assert.assertEquals(1, Expr_413_list.size());
		final AndExpression AndExpression_414_Var = (AndExpression)Expr_413_list.get(0);
		Assert.assertNotNull(AndExpression_414_Var);
		final EList<? extends EObject> Expr_414_list = AndExpression_414_Var.getExpr();
		Assert.assertNotNull(Expr_414_list);
		Assert.assertEquals(1, Expr_414_list.size());
		final EqualityExpression EqualityExpression_415_Var = (EqualityExpression)Expr_414_list.get(0);
		Assert.assertNotNull(EqualityExpression_415_Var);
		final EList<? extends EObject> Expr_415_list = EqualityExpression_415_Var.getExpr();
		Assert.assertNotNull(Expr_415_list);
		Assert.assertEquals(1, Expr_415_list.size());
		final RelationalExpression RelationalExpression_416_Var = (RelationalExpression)Expr_415_list.get(0);
		Assert.assertNotNull(RelationalExpression_416_Var);
		final EList<? extends EObject> Expr_416_list = RelationalExpression_416_Var.getExpr();
		Assert.assertNotNull(Expr_416_list);
		Assert.assertEquals(1, Expr_416_list.size());
		final ShiftExpression ShiftExpression_417_Var = (ShiftExpression)Expr_416_list.get(0);
		Assert.assertNotNull(ShiftExpression_417_Var);
		final EList<? extends EObject> Expr_417_list = ShiftExpression_417_Var.getExpr();
		Assert.assertNotNull(Expr_417_list);
		Assert.assertEquals(1, Expr_417_list.size());
		final AdditiveExpression AdditiveExpression_418_Var = (AdditiveExpression)Expr_417_list.get(0);
		Assert.assertNotNull(AdditiveExpression_418_Var);
		final EList<? extends EObject> Expr_418_list = AdditiveExpression_418_Var.getExpr();
		Assert.assertNotNull(Expr_418_list);
		Assert.assertEquals(1, Expr_418_list.size());
		final MultiplicativeExpression MultiplicativeExpression_419_Var = (MultiplicativeExpression)Expr_418_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_419_Var);
		final EList<? extends EObject> Expr_419_list = MultiplicativeExpression_419_Var.getExpr();
		Assert.assertNotNull(Expr_419_list);
		Assert.assertEquals(1, Expr_419_list.size());
		final CastExpression CastExpression_420_Var = (CastExpression)Expr_419_list.get(0);
		Assert.assertNotNull(CastExpression_420_Var);
		final UnaryExpression UnaryExpression_421_Var = (UnaryExpression)CastExpression_420_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_421_Var);
		final PostfixExpression PostfixExpression_422_Var = (PostfixExpression)UnaryExpression_421_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_422_Var);
		final EList<? extends EObject> Expr_422_list = PostfixExpression_422_Var.getExpr();
		Assert.assertNotNull(Expr_422_list);
		Assert.assertEquals(1, Expr_422_list.size());
		final PrimaryExpression PrimaryExpression_423_Var = (PrimaryExpression)Expr_422_list.get(0);
		Assert.assertNotNull(PrimaryExpression_423_Var);
		Assert.assertEquals("printf", PrimaryExpression_423_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_423_list = PostfixExpression_422_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_423_list);
		Assert.assertEquals(1, ArgumentExpressionList_423_list.size());
		final ArgumentExpressionList ArgumentExpressionList_424_Var = (ArgumentExpressionList)ArgumentExpressionList_423_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_424_Var);
		final EList<? extends EObject> Expr_424_list = ArgumentExpressionList_424_Var.getExpr();
		Assert.assertNotNull(Expr_424_list);
		Assert.assertEquals(2, Expr_424_list.size());
		final AssignmentExpression AssignmentExpression_425_Var = (AssignmentExpression)Expr_424_list.get(0);
		Assert.assertNotNull(AssignmentExpression_425_Var);
		final ConditionalExpression ConditionalExpression_426_Var = (ConditionalExpression)AssignmentExpression_425_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_426_Var);
		final LogicalOrExpression LogicalOrExpression_427_Var = (LogicalOrExpression)ConditionalExpression_426_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_427_Var);
		final EList<? extends EObject> Expr_427_list = LogicalOrExpression_427_Var.getExpr();
		Assert.assertNotNull(Expr_427_list);
		Assert.assertEquals(1, Expr_427_list.size());
		final LogicalAndExpression LogicalAndExpression_428_Var = (LogicalAndExpression)Expr_427_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_428_Var);
		final EList<? extends EObject> Expr_428_list = LogicalAndExpression_428_Var.getExpr();
		Assert.assertNotNull(Expr_428_list);
		Assert.assertEquals(1, Expr_428_list.size());
		final InclusiveOrExpression InclusiveOrExpression_429_Var = (InclusiveOrExpression)Expr_428_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_429_Var);
		final EList<? extends EObject> Expr_429_list = InclusiveOrExpression_429_Var.getExpr();
		Assert.assertNotNull(Expr_429_list);
		Assert.assertEquals(1, Expr_429_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_430_Var = (ExclusiveOrExpression)Expr_429_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_430_Var);
		final EList<? extends EObject> Expr_430_list = ExclusiveOrExpression_430_Var.getExpr();
		Assert.assertNotNull(Expr_430_list);
		Assert.assertEquals(1, Expr_430_list.size());
		final AndExpression AndExpression_431_Var = (AndExpression)Expr_430_list.get(0);
		Assert.assertNotNull(AndExpression_431_Var);
		final EList<? extends EObject> Expr_431_list = AndExpression_431_Var.getExpr();
		Assert.assertNotNull(Expr_431_list);
		Assert.assertEquals(1, Expr_431_list.size());
		final EqualityExpression EqualityExpression_432_Var = (EqualityExpression)Expr_431_list.get(0);
		Assert.assertNotNull(EqualityExpression_432_Var);
		final EList<? extends EObject> Expr_432_list = EqualityExpression_432_Var.getExpr();
		Assert.assertNotNull(Expr_432_list);
		Assert.assertEquals(1, Expr_432_list.size());
		final RelationalExpression RelationalExpression_433_Var = (RelationalExpression)Expr_432_list.get(0);
		Assert.assertNotNull(RelationalExpression_433_Var);
		final EList<? extends EObject> Expr_433_list = RelationalExpression_433_Var.getExpr();
		Assert.assertNotNull(Expr_433_list);
		Assert.assertEquals(1, Expr_433_list.size());
		final ShiftExpression ShiftExpression_434_Var = (ShiftExpression)Expr_433_list.get(0);
		Assert.assertNotNull(ShiftExpression_434_Var);
		final EList<? extends EObject> Expr_434_list = ShiftExpression_434_Var.getExpr();
		Assert.assertNotNull(Expr_434_list);
		Assert.assertEquals(1, Expr_434_list.size());
		final AdditiveExpression AdditiveExpression_435_Var = (AdditiveExpression)Expr_434_list.get(0);
		Assert.assertNotNull(AdditiveExpression_435_Var);
		final EList<? extends EObject> Expr_435_list = AdditiveExpression_435_Var.getExpr();
		Assert.assertNotNull(Expr_435_list);
		Assert.assertEquals(1, Expr_435_list.size());
		final MultiplicativeExpression MultiplicativeExpression_436_Var = (MultiplicativeExpression)Expr_435_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_436_Var);
		final EList<? extends EObject> Expr_436_list = MultiplicativeExpression_436_Var.getExpr();
		Assert.assertNotNull(Expr_436_list);
		Assert.assertEquals(1, Expr_436_list.size());
		final CastExpression CastExpression_437_Var = (CastExpression)Expr_436_list.get(0);
		Assert.assertNotNull(CastExpression_437_Var);
		final UnaryExpression UnaryExpression_438_Var = (UnaryExpression)CastExpression_437_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_438_Var);
		final PostfixExpression PostfixExpression_439_Var = (PostfixExpression)UnaryExpression_438_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_439_Var);
		final EList<? extends EObject> Expr_439_list = PostfixExpression_439_Var.getExpr();
		Assert.assertNotNull(Expr_439_list);
		Assert.assertEquals(1, Expr_439_list.size());
		final PrimaryExpression PrimaryExpression_440_Var = (PrimaryExpression)Expr_439_list.get(0);
		Assert.assertNotNull(PrimaryExpression_440_Var);
		final Constant Constant_441_Var = (Constant)PrimaryExpression_440_Var.getConst();
		Assert.assertNotNull(Constant_441_Var);
		Assert.assertEquals("\"number.numChar(as decimal)=%d\\n\"", Constant_441_Var.getStr());
		final AssignmentExpression AssignmentExpression_442_Var = (AssignmentExpression)Expr_424_list.get(1);
		Assert.assertNotNull(AssignmentExpression_442_Var);
		final ConditionalExpression ConditionalExpression_443_Var = (ConditionalExpression)AssignmentExpression_442_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_443_Var);
		final LogicalOrExpression LogicalOrExpression_444_Var = (LogicalOrExpression)ConditionalExpression_443_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_444_Var);
		final EList<? extends EObject> Expr_444_list = LogicalOrExpression_444_Var.getExpr();
		Assert.assertNotNull(Expr_444_list);
		Assert.assertEquals(1, Expr_444_list.size());
		final LogicalAndExpression LogicalAndExpression_445_Var = (LogicalAndExpression)Expr_444_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_445_Var);
		final EList<? extends EObject> Expr_445_list = LogicalAndExpression_445_Var.getExpr();
		Assert.assertNotNull(Expr_445_list);
		Assert.assertEquals(1, Expr_445_list.size());
		final InclusiveOrExpression InclusiveOrExpression_446_Var = (InclusiveOrExpression)Expr_445_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_446_Var);
		final EList<? extends EObject> Expr_446_list = InclusiveOrExpression_446_Var.getExpr();
		Assert.assertNotNull(Expr_446_list);
		Assert.assertEquals(1, Expr_446_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_447_Var = (ExclusiveOrExpression)Expr_446_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_447_Var);
		final EList<? extends EObject> Expr_447_list = ExclusiveOrExpression_447_Var.getExpr();
		Assert.assertNotNull(Expr_447_list);
		Assert.assertEquals(1, Expr_447_list.size());
		final AndExpression AndExpression_448_Var = (AndExpression)Expr_447_list.get(0);
		Assert.assertNotNull(AndExpression_448_Var);
		final EList<? extends EObject> Expr_448_list = AndExpression_448_Var.getExpr();
		Assert.assertNotNull(Expr_448_list);
		Assert.assertEquals(1, Expr_448_list.size());
		final EqualityExpression EqualityExpression_449_Var = (EqualityExpression)Expr_448_list.get(0);
		Assert.assertNotNull(EqualityExpression_449_Var);
		final EList<? extends EObject> Expr_449_list = EqualityExpression_449_Var.getExpr();
		Assert.assertNotNull(Expr_449_list);
		Assert.assertEquals(1, Expr_449_list.size());
		final RelationalExpression RelationalExpression_450_Var = (RelationalExpression)Expr_449_list.get(0);
		Assert.assertNotNull(RelationalExpression_450_Var);
		final EList<? extends EObject> Expr_450_list = RelationalExpression_450_Var.getExpr();
		Assert.assertNotNull(Expr_450_list);
		Assert.assertEquals(1, Expr_450_list.size());
		final ShiftExpression ShiftExpression_451_Var = (ShiftExpression)Expr_450_list.get(0);
		Assert.assertNotNull(ShiftExpression_451_Var);
		final EList<? extends EObject> Expr_451_list = ShiftExpression_451_Var.getExpr();
		Assert.assertNotNull(Expr_451_list);
		Assert.assertEquals(1, Expr_451_list.size());
		final AdditiveExpression AdditiveExpression_452_Var = (AdditiveExpression)Expr_451_list.get(0);
		Assert.assertNotNull(AdditiveExpression_452_Var);
		final EList<? extends EObject> Expr_452_list = AdditiveExpression_452_Var.getExpr();
		Assert.assertNotNull(Expr_452_list);
		Assert.assertEquals(1, Expr_452_list.size());
		final MultiplicativeExpression MultiplicativeExpression_453_Var = (MultiplicativeExpression)Expr_452_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_453_Var);
		final EList<? extends EObject> Expr_453_list = MultiplicativeExpression_453_Var.getExpr();
		Assert.assertNotNull(Expr_453_list);
		Assert.assertEquals(1, Expr_453_list.size());
		final CastExpression CastExpression_454_Var = (CastExpression)Expr_453_list.get(0);
		Assert.assertNotNull(CastExpression_454_Var);
		final UnaryExpression UnaryExpression_455_Var = (UnaryExpression)CastExpression_454_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_455_Var);
		final PostfixExpression PostfixExpression_456_Var = (PostfixExpression)UnaryExpression_455_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_456_Var);
		final EList<? extends EObject> Expr_456_list = PostfixExpression_456_Var.getExpr();
		Assert.assertNotNull(Expr_456_list);
		Assert.assertEquals(1, Expr_456_list.size());
		final PrimaryExpression PrimaryExpression_457_Var = (PrimaryExpression)Expr_456_list.get(0);
		Assert.assertNotNull(PrimaryExpression_457_Var);
		Assert.assertEquals("number", PrimaryExpression_457_Var.getId());
		Assert.assertEquals("[.]", PostfixExpression_456_Var.getDot().toString());
		Assert.assertEquals("[numChar]", PostfixExpression_456_Var.getId().toString());
		Assert.assertEquals(";", ExpressionStatement_406_Var.getSemi());
		final Statement Statement_458_Var = (Statement)Statement_17_list.get(9);
		Assert.assertNotNull(Statement_458_Var);
		final ExpressionStatement ExpressionStatement_459_Var = (ExpressionStatement)Statement_458_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_459_Var);
		final Expression Expression_460_Var = (Expression)ExpressionStatement_459_Var.getExpression();
		Assert.assertNotNull(Expression_460_Var);
		final EList<? extends EObject> ExprExpr_460_list = Expression_460_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_460_list);
		Assert.assertEquals(1, ExprExpr_460_list.size());
		final AssignmentExpression AssignmentExpression_461_Var = (AssignmentExpression)ExprExpr_460_list.get(0);
		Assert.assertNotNull(AssignmentExpression_461_Var);
		final ConditionalExpression ConditionalExpression_462_Var = (ConditionalExpression)AssignmentExpression_461_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_462_Var);
		final LogicalOrExpression LogicalOrExpression_463_Var = (LogicalOrExpression)ConditionalExpression_462_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_463_Var);
		final EList<? extends EObject> Expr_463_list = LogicalOrExpression_463_Var.getExpr();
		Assert.assertNotNull(Expr_463_list);
		Assert.assertEquals(1, Expr_463_list.size());
		final LogicalAndExpression LogicalAndExpression_464_Var = (LogicalAndExpression)Expr_463_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_464_Var);
		final EList<? extends EObject> Expr_464_list = LogicalAndExpression_464_Var.getExpr();
		Assert.assertNotNull(Expr_464_list);
		Assert.assertEquals(1, Expr_464_list.size());
		final InclusiveOrExpression InclusiveOrExpression_465_Var = (InclusiveOrExpression)Expr_464_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_465_Var);
		final EList<? extends EObject> Expr_465_list = InclusiveOrExpression_465_Var.getExpr();
		Assert.assertNotNull(Expr_465_list);
		Assert.assertEquals(1, Expr_465_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_466_Var = (ExclusiveOrExpression)Expr_465_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_466_Var);
		final EList<? extends EObject> Expr_466_list = ExclusiveOrExpression_466_Var.getExpr();
		Assert.assertNotNull(Expr_466_list);
		Assert.assertEquals(1, Expr_466_list.size());
		final AndExpression AndExpression_467_Var = (AndExpression)Expr_466_list.get(0);
		Assert.assertNotNull(AndExpression_467_Var);
		final EList<? extends EObject> Expr_467_list = AndExpression_467_Var.getExpr();
		Assert.assertNotNull(Expr_467_list);
		Assert.assertEquals(1, Expr_467_list.size());
		final EqualityExpression EqualityExpression_468_Var = (EqualityExpression)Expr_467_list.get(0);
		Assert.assertNotNull(EqualityExpression_468_Var);
		final EList<? extends EObject> Expr_468_list = EqualityExpression_468_Var.getExpr();
		Assert.assertNotNull(Expr_468_list);
		Assert.assertEquals(1, Expr_468_list.size());
		final RelationalExpression RelationalExpression_469_Var = (RelationalExpression)Expr_468_list.get(0);
		Assert.assertNotNull(RelationalExpression_469_Var);
		final EList<? extends EObject> Expr_469_list = RelationalExpression_469_Var.getExpr();
		Assert.assertNotNull(Expr_469_list);
		Assert.assertEquals(1, Expr_469_list.size());
		final ShiftExpression ShiftExpression_470_Var = (ShiftExpression)Expr_469_list.get(0);
		Assert.assertNotNull(ShiftExpression_470_Var);
		final EList<? extends EObject> Expr_470_list = ShiftExpression_470_Var.getExpr();
		Assert.assertNotNull(Expr_470_list);
		Assert.assertEquals(1, Expr_470_list.size());
		final AdditiveExpression AdditiveExpression_471_Var = (AdditiveExpression)Expr_470_list.get(0);
		Assert.assertNotNull(AdditiveExpression_471_Var);
		final EList<? extends EObject> Expr_471_list = AdditiveExpression_471_Var.getExpr();
		Assert.assertNotNull(Expr_471_list);
		Assert.assertEquals(1, Expr_471_list.size());
		final MultiplicativeExpression MultiplicativeExpression_472_Var = (MultiplicativeExpression)Expr_471_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_472_Var);
		final EList<? extends EObject> Expr_472_list = MultiplicativeExpression_472_Var.getExpr();
		Assert.assertNotNull(Expr_472_list);
		Assert.assertEquals(1, Expr_472_list.size());
		final CastExpression CastExpression_473_Var = (CastExpression)Expr_472_list.get(0);
		Assert.assertNotNull(CastExpression_473_Var);
		final UnaryExpression UnaryExpression_474_Var = (UnaryExpression)CastExpression_473_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_474_Var);
		final PostfixExpression PostfixExpression_475_Var = (PostfixExpression)UnaryExpression_474_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_475_Var);
		final EList<? extends EObject> Expr_475_list = PostfixExpression_475_Var.getExpr();
		Assert.assertNotNull(Expr_475_list);
		Assert.assertEquals(1, Expr_475_list.size());
		final PrimaryExpression PrimaryExpression_476_Var = (PrimaryExpression)Expr_475_list.get(0);
		Assert.assertNotNull(PrimaryExpression_476_Var);
		Assert.assertEquals("printf", PrimaryExpression_476_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_476_list = PostfixExpression_475_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_476_list);
		Assert.assertEquals(1, ArgumentExpressionList_476_list.size());
		final ArgumentExpressionList ArgumentExpressionList_477_Var = (ArgumentExpressionList)ArgumentExpressionList_476_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_477_Var);
		final EList<? extends EObject> Expr_477_list = ArgumentExpressionList_477_Var.getExpr();
		Assert.assertNotNull(Expr_477_list);
		Assert.assertEquals(2, Expr_477_list.size());
		final AssignmentExpression AssignmentExpression_478_Var = (AssignmentExpression)Expr_477_list.get(0);
		Assert.assertNotNull(AssignmentExpression_478_Var);
		final ConditionalExpression ConditionalExpression_479_Var = (ConditionalExpression)AssignmentExpression_478_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_479_Var);
		final LogicalOrExpression LogicalOrExpression_480_Var = (LogicalOrExpression)ConditionalExpression_479_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_480_Var);
		final EList<? extends EObject> Expr_480_list = LogicalOrExpression_480_Var.getExpr();
		Assert.assertNotNull(Expr_480_list);
		Assert.assertEquals(1, Expr_480_list.size());
		final LogicalAndExpression LogicalAndExpression_481_Var = (LogicalAndExpression)Expr_480_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_481_Var);
		final EList<? extends EObject> Expr_481_list = LogicalAndExpression_481_Var.getExpr();
		Assert.assertNotNull(Expr_481_list);
		Assert.assertEquals(1, Expr_481_list.size());
		final InclusiveOrExpression InclusiveOrExpression_482_Var = (InclusiveOrExpression)Expr_481_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_482_Var);
		final EList<? extends EObject> Expr_482_list = InclusiveOrExpression_482_Var.getExpr();
		Assert.assertNotNull(Expr_482_list);
		Assert.assertEquals(1, Expr_482_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_483_Var = (ExclusiveOrExpression)Expr_482_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_483_Var);
		final EList<? extends EObject> Expr_483_list = ExclusiveOrExpression_483_Var.getExpr();
		Assert.assertNotNull(Expr_483_list);
		Assert.assertEquals(1, Expr_483_list.size());
		final AndExpression AndExpression_484_Var = (AndExpression)Expr_483_list.get(0);
		Assert.assertNotNull(AndExpression_484_Var);
		final EList<? extends EObject> Expr_484_list = AndExpression_484_Var.getExpr();
		Assert.assertNotNull(Expr_484_list);
		Assert.assertEquals(1, Expr_484_list.size());
		final EqualityExpression EqualityExpression_485_Var = (EqualityExpression)Expr_484_list.get(0);
		Assert.assertNotNull(EqualityExpression_485_Var);
		final EList<? extends EObject> Expr_485_list = EqualityExpression_485_Var.getExpr();
		Assert.assertNotNull(Expr_485_list);
		Assert.assertEquals(1, Expr_485_list.size());
		final RelationalExpression RelationalExpression_486_Var = (RelationalExpression)Expr_485_list.get(0);
		Assert.assertNotNull(RelationalExpression_486_Var);
		final EList<? extends EObject> Expr_486_list = RelationalExpression_486_Var.getExpr();
		Assert.assertNotNull(Expr_486_list);
		Assert.assertEquals(1, Expr_486_list.size());
		final ShiftExpression ShiftExpression_487_Var = (ShiftExpression)Expr_486_list.get(0);
		Assert.assertNotNull(ShiftExpression_487_Var);
		final EList<? extends EObject> Expr_487_list = ShiftExpression_487_Var.getExpr();
		Assert.assertNotNull(Expr_487_list);
		Assert.assertEquals(1, Expr_487_list.size());
		final AdditiveExpression AdditiveExpression_488_Var = (AdditiveExpression)Expr_487_list.get(0);
		Assert.assertNotNull(AdditiveExpression_488_Var);
		final EList<? extends EObject> Expr_488_list = AdditiveExpression_488_Var.getExpr();
		Assert.assertNotNull(Expr_488_list);
		Assert.assertEquals(1, Expr_488_list.size());
		final MultiplicativeExpression MultiplicativeExpression_489_Var = (MultiplicativeExpression)Expr_488_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_489_Var);
		final EList<? extends EObject> Expr_489_list = MultiplicativeExpression_489_Var.getExpr();
		Assert.assertNotNull(Expr_489_list);
		Assert.assertEquals(1, Expr_489_list.size());
		final CastExpression CastExpression_490_Var = (CastExpression)Expr_489_list.get(0);
		Assert.assertNotNull(CastExpression_490_Var);
		final UnaryExpression UnaryExpression_491_Var = (UnaryExpression)CastExpression_490_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_491_Var);
		final PostfixExpression PostfixExpression_492_Var = (PostfixExpression)UnaryExpression_491_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_492_Var);
		final EList<? extends EObject> Expr_492_list = PostfixExpression_492_Var.getExpr();
		Assert.assertNotNull(Expr_492_list);
		Assert.assertEquals(1, Expr_492_list.size());
		final PrimaryExpression PrimaryExpression_493_Var = (PrimaryExpression)Expr_492_list.get(0);
		Assert.assertNotNull(PrimaryExpression_493_Var);
		final Constant Constant_494_Var = (Constant)PrimaryExpression_493_Var.getConst();
		Assert.assertNotNull(Constant_494_Var);
		Assert.assertEquals("\"number.numFloat=%f\\n\"", Constant_494_Var.getStr());
		final AssignmentExpression AssignmentExpression_495_Var = (AssignmentExpression)Expr_477_list.get(1);
		Assert.assertNotNull(AssignmentExpression_495_Var);
		final ConditionalExpression ConditionalExpression_496_Var = (ConditionalExpression)AssignmentExpression_495_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_496_Var);
		final LogicalOrExpression LogicalOrExpression_497_Var = (LogicalOrExpression)ConditionalExpression_496_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_497_Var);
		final EList<? extends EObject> Expr_497_list = LogicalOrExpression_497_Var.getExpr();
		Assert.assertNotNull(Expr_497_list);
		Assert.assertEquals(1, Expr_497_list.size());
		final LogicalAndExpression LogicalAndExpression_498_Var = (LogicalAndExpression)Expr_497_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_498_Var);
		final EList<? extends EObject> Expr_498_list = LogicalAndExpression_498_Var.getExpr();
		Assert.assertNotNull(Expr_498_list);
		Assert.assertEquals(1, Expr_498_list.size());
		final InclusiveOrExpression InclusiveOrExpression_499_Var = (InclusiveOrExpression)Expr_498_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_499_Var);
		final EList<? extends EObject> Expr_499_list = InclusiveOrExpression_499_Var.getExpr();
		Assert.assertNotNull(Expr_499_list);
		Assert.assertEquals(1, Expr_499_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_500_Var = (ExclusiveOrExpression)Expr_499_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_500_Var);
		final EList<? extends EObject> Expr_500_list = ExclusiveOrExpression_500_Var.getExpr();
		Assert.assertNotNull(Expr_500_list);
		Assert.assertEquals(1, Expr_500_list.size());
		final AndExpression AndExpression_501_Var = (AndExpression)Expr_500_list.get(0);
		Assert.assertNotNull(AndExpression_501_Var);
		final EList<? extends EObject> Expr_501_list = AndExpression_501_Var.getExpr();
		Assert.assertNotNull(Expr_501_list);
		Assert.assertEquals(1, Expr_501_list.size());
		final EqualityExpression EqualityExpression_502_Var = (EqualityExpression)Expr_501_list.get(0);
		Assert.assertNotNull(EqualityExpression_502_Var);
		final EList<? extends EObject> Expr_502_list = EqualityExpression_502_Var.getExpr();
		Assert.assertNotNull(Expr_502_list);
		Assert.assertEquals(1, Expr_502_list.size());
		final RelationalExpression RelationalExpression_503_Var = (RelationalExpression)Expr_502_list.get(0);
		Assert.assertNotNull(RelationalExpression_503_Var);
		final EList<? extends EObject> Expr_503_list = RelationalExpression_503_Var.getExpr();
		Assert.assertNotNull(Expr_503_list);
		Assert.assertEquals(1, Expr_503_list.size());
		final ShiftExpression ShiftExpression_504_Var = (ShiftExpression)Expr_503_list.get(0);
		Assert.assertNotNull(ShiftExpression_504_Var);
		final EList<? extends EObject> Expr_504_list = ShiftExpression_504_Var.getExpr();
		Assert.assertNotNull(Expr_504_list);
		Assert.assertEquals(1, Expr_504_list.size());
		final AdditiveExpression AdditiveExpression_505_Var = (AdditiveExpression)Expr_504_list.get(0);
		Assert.assertNotNull(AdditiveExpression_505_Var);
		final EList<? extends EObject> Expr_505_list = AdditiveExpression_505_Var.getExpr();
		Assert.assertNotNull(Expr_505_list);
		Assert.assertEquals(1, Expr_505_list.size());
		final MultiplicativeExpression MultiplicativeExpression_506_Var = (MultiplicativeExpression)Expr_505_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_506_Var);
		final EList<? extends EObject> Expr_506_list = MultiplicativeExpression_506_Var.getExpr();
		Assert.assertNotNull(Expr_506_list);
		Assert.assertEquals(1, Expr_506_list.size());
		final CastExpression CastExpression_507_Var = (CastExpression)Expr_506_list.get(0);
		Assert.assertNotNull(CastExpression_507_Var);
		final UnaryExpression UnaryExpression_508_Var = (UnaryExpression)CastExpression_507_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_508_Var);
		final PostfixExpression PostfixExpression_509_Var = (PostfixExpression)UnaryExpression_508_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_509_Var);
		final EList<? extends EObject> Expr_509_list = PostfixExpression_509_Var.getExpr();
		Assert.assertNotNull(Expr_509_list);
		Assert.assertEquals(1, Expr_509_list.size());
		final PrimaryExpression PrimaryExpression_510_Var = (PrimaryExpression)Expr_509_list.get(0);
		Assert.assertNotNull(PrimaryExpression_510_Var);
		Assert.assertEquals("number", PrimaryExpression_510_Var.getId());
		Assert.assertEquals("[.]", PostfixExpression_509_Var.getDot().toString());
		Assert.assertEquals("[numFloat]", PostfixExpression_509_Var.getId().toString());
		Assert.assertEquals(";", ExpressionStatement_459_Var.getSemi());
		final Statement Statement_511_Var = (Statement)Statement_17_list.get(10);
		Assert.assertNotNull(Statement_511_Var);
		final JumpStatement JumpStatement_512_Var = (JumpStatement)Statement_511_Var.getStmt();
		Assert.assertNotNull(JumpStatement_512_Var);
		final Expression Expression_513_Var = (Expression)JumpStatement_512_Var.getExpr();
		Assert.assertNotNull(Expression_513_Var);
		final EList<? extends EObject> ExprExpr_513_list = Expression_513_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_513_list);
		Assert.assertEquals(1, ExprExpr_513_list.size());
		final AssignmentExpression AssignmentExpression_514_Var = (AssignmentExpression)ExprExpr_513_list.get(0);
		Assert.assertNotNull(AssignmentExpression_514_Var);
		final ConditionalExpression ConditionalExpression_515_Var = (ConditionalExpression)AssignmentExpression_514_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_515_Var);
		final LogicalOrExpression LogicalOrExpression_516_Var = (LogicalOrExpression)ConditionalExpression_515_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_516_Var);
		final EList<? extends EObject> Expr_516_list = LogicalOrExpression_516_Var.getExpr();
		Assert.assertNotNull(Expr_516_list);
		Assert.assertEquals(1, Expr_516_list.size());
		final LogicalAndExpression LogicalAndExpression_517_Var = (LogicalAndExpression)Expr_516_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_517_Var);
		final EList<? extends EObject> Expr_517_list = LogicalAndExpression_517_Var.getExpr();
		Assert.assertNotNull(Expr_517_list);
		Assert.assertEquals(1, Expr_517_list.size());
		final InclusiveOrExpression InclusiveOrExpression_518_Var = (InclusiveOrExpression)Expr_517_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_518_Var);
		final EList<? extends EObject> Expr_518_list = InclusiveOrExpression_518_Var.getExpr();
		Assert.assertNotNull(Expr_518_list);
		Assert.assertEquals(1, Expr_518_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_519_Var = (ExclusiveOrExpression)Expr_518_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_519_Var);
		final EList<? extends EObject> Expr_519_list = ExclusiveOrExpression_519_Var.getExpr();
		Assert.assertNotNull(Expr_519_list);
		Assert.assertEquals(1, Expr_519_list.size());
		final AndExpression AndExpression_520_Var = (AndExpression)Expr_519_list.get(0);
		Assert.assertNotNull(AndExpression_520_Var);
		final EList<? extends EObject> Expr_520_list = AndExpression_520_Var.getExpr();
		Assert.assertNotNull(Expr_520_list);
		Assert.assertEquals(1, Expr_520_list.size());
		final EqualityExpression EqualityExpression_521_Var = (EqualityExpression)Expr_520_list.get(0);
		Assert.assertNotNull(EqualityExpression_521_Var);
		final EList<? extends EObject> Expr_521_list = EqualityExpression_521_Var.getExpr();
		Assert.assertNotNull(Expr_521_list);
		Assert.assertEquals(1, Expr_521_list.size());
		final RelationalExpression RelationalExpression_522_Var = (RelationalExpression)Expr_521_list.get(0);
		Assert.assertNotNull(RelationalExpression_522_Var);
		final EList<? extends EObject> Expr_522_list = RelationalExpression_522_Var.getExpr();
		Assert.assertNotNull(Expr_522_list);
		Assert.assertEquals(1, Expr_522_list.size());
		final ShiftExpression ShiftExpression_523_Var = (ShiftExpression)Expr_522_list.get(0);
		Assert.assertNotNull(ShiftExpression_523_Var);
		final EList<? extends EObject> Expr_523_list = ShiftExpression_523_Var.getExpr();
		Assert.assertNotNull(Expr_523_list);
		Assert.assertEquals(1, Expr_523_list.size());
		final AdditiveExpression AdditiveExpression_524_Var = (AdditiveExpression)Expr_523_list.get(0);
		Assert.assertNotNull(AdditiveExpression_524_Var);
		final EList<? extends EObject> Expr_524_list = AdditiveExpression_524_Var.getExpr();
		Assert.assertNotNull(Expr_524_list);
		Assert.assertEquals(1, Expr_524_list.size());
		final MultiplicativeExpression MultiplicativeExpression_525_Var = (MultiplicativeExpression)Expr_524_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_525_Var);
		final EList<? extends EObject> Expr_525_list = MultiplicativeExpression_525_Var.getExpr();
		Assert.assertNotNull(Expr_525_list);
		Assert.assertEquals(1, Expr_525_list.size());
		final CastExpression CastExpression_526_Var = (CastExpression)Expr_525_list.get(0);
		Assert.assertNotNull(CastExpression_526_Var);
		final UnaryExpression UnaryExpression_527_Var = (UnaryExpression)CastExpression_526_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_527_Var);
		final PostfixExpression PostfixExpression_528_Var = (PostfixExpression)UnaryExpression_527_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_528_Var);
		final EList<? extends EObject> Expr_528_list = PostfixExpression_528_Var.getExpr();
		Assert.assertNotNull(Expr_528_list);
		Assert.assertEquals(1, Expr_528_list.size());
		final PrimaryExpression PrimaryExpression_529_Var = (PrimaryExpression)Expr_528_list.get(0);
		Assert.assertNotNull(PrimaryExpression_529_Var);
		final Constant Constant_530_Var = (Constant)PrimaryExpression_529_Var.getConst();
		Assert.assertNotNull(Constant_530_Var);
		Assert.assertEquals("0", Constant_530_Var.getDec());
		Assert.assertEquals("return", JumpStatement_512_Var.getReturn());
		Assert.assertEquals(";", JumpStatement_512_Var.getSemi());
	}


}
