package at.jku.weiner.c.xtexttests;

import com.google.inject.Inject;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import org.antlr.runtime.Token;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipse.xtext.junit4.util.ParseHelper;
import org.eclipse.xtext.junit4.validation.ValidationTestHelper;
import org.eclipse.xtext.junit4.XtextRunner;
import org.eclipse.xtext.parser.antlr.ITokenDefProvider;
import org.junit.Assert;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import at.jku.weiner.c.tests.CInjectorProvider;
import at.jku.weiner.c.parser.antlr.CParser;
import at.jku.weiner.c.parser.antlr.internal.InternalCLexer;
import at.jku.weiner.c.xtexttests.LexerAndParserTest;

import at.jku.weiner.c.c.Model;
import at.jku.weiner.c.c.TranslationUnit;
import at.jku.weiner.c.c.ExternalDeclaration;
import at.jku.weiner.c.c.FunctionDefHead;
import at.jku.weiner.c.c.DeclarationSpecifiers;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.Declarator;
import at.jku.weiner.c.c.DirectDeclarator;
import at.jku.weiner.c.c.DeclaratorSuffix;
import at.jku.weiner.c.c.DirectDeclaratorLastSuffix;
import at.jku.weiner.c.c.ParameterTypeList;
import at.jku.weiner.c.c.ParameterList;
import at.jku.weiner.c.c.ParameterDeclaration;
import at.jku.weiner.c.c.DeclarationSpecifiers;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.FunctionDefinition;
import at.jku.weiner.c.c.BodyStatement;
import at.jku.weiner.c.c.BlockList;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.TypeName;
import at.jku.weiner.c.c.SpecifierQualifierList;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.JumpStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;

@SuppressWarnings("unused")
@RunWith(XtextRunner.class)
@InjectWith(CInjectorProvider.class)
public class Test0034_Union {

	@Inject
	private ParseHelper<Model> parseHelper;
	@Inject
	private ValidationTestHelper valHelper;
	@Inject
	private InternalCLexer lexer;
	@Inject
	private CParser parser;
	@Inject
	private ITokenDefProvider tokenDefProvider;
	
	private LexerAndParserTest testHelper;
	
	@Before
	public void initialize(){
		this.testHelper = new LexerAndParserTest(lexer, parser, tokenDefProvider);
	}
	
	private String getSourceText()
	throws Exception{
		final Path path = Paths.get("res/Test0034_Union.c");
		final String content = new String(Files.readAllBytes(path));
		return content;
	}
	
	@Test
	public void checkLexerTokens()
	throws Exception{
		final String text = this.getSourceText();
		//System.out.println(text);
		final String[] expected = new String[] {
			"RULE_LINEDIRECTIVE",
			"RULE_NEWLINE",
			"RULE_NEWLINE",
			"RULE_KW_INT",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_KW_VOID",
			"RULE_RIGHTPAREN",
			"RULE_WHITESPACE",
			"RULE_LEFTBRACE",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_LINE_COMMENT",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_STRING_LITERAL",
			"RULE_COMMA",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_LINE_COMMENT",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_STRING_LITERAL",
			"RULE_COMMA",
			"RULE_WHITESPACE",
			"RULE_KW_SIZEOF",
			"RULE_LEFTPAREN",
			"RULE_KW_FLOAT",
			"RULE_RIGHTPAREN",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_LINE_COMMENT",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_STRING_LITERAL",
			"RULE_COMMA",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_DOT",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_STRING_LITERAL",
			"RULE_COMMA",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_DOT",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_STRING_LITERAL",
			"RULE_COMMA",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_DOT",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_LINE_COMMENT",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_STRING_LITERAL",
			"RULE_COMMA",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_DOT",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_STRING_LITERAL",
			"RULE_COMMA",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_DOT",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_KW_RETURN",
			"RULE_WHITESPACE",
			"RULE_DECIMAL_LITERAL",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_RIGHTBRACE",
			"RULE_NEWLINE",
		};
		//final List<Token> actual = testHelper.getTokens(text);
		//testHelper.outputTokens(text);
		testHelper.checkTokenisation(text, expected);
	}
	
	@Test
	public void checkParserResult()
	throws Exception{

		final String text = this.getSourceText();
		final Model Model_0_Var = this.parseHelper.parse(text);
	
		this.valHelper.assertNoErrors(Model_0_Var);
		Assert.assertNotNull(Model_0_Var);
		final EList<? extends EObject> Unit_0_list = Model_0_Var.getUnit();
		Assert.assertNotNull(Unit_0_list);
		Assert.assertEquals(1, Unit_0_list.size());
		final TranslationUnit TranslationUnit_1_Var = (TranslationUnit)Unit_0_list.get(0);
		Assert.assertNotNull(TranslationUnit_1_Var);
		final EList<? extends EObject> External_1_list = TranslationUnit_1_Var.getExternal();
		Assert.assertNotNull(External_1_list);
		Assert.assertEquals(1, External_1_list.size());
		final ExternalDeclaration ExternalDeclaration_2_Var = (ExternalDeclaration)External_1_list.get(0);
		Assert.assertNotNull(ExternalDeclaration_2_Var);
		final FunctionDefHead FunctionDefHead_3_Var = (FunctionDefHead)ExternalDeclaration_2_Var.getFunctiondefHead();
		Assert.assertNotNull(FunctionDefHead_3_Var);
		final DeclarationSpecifiers DeclarationSpecifiers_4_Var = (DeclarationSpecifiers)FunctionDefHead_3_Var.getFunDeclSpecifiers();
		Assert.assertNotNull(DeclarationSpecifiers_4_Var);
		final EList<? extends EObject> DeclarationSpecifier_4_list = DeclarationSpecifiers_4_Var.getDeclarationSpecifier();
		Assert.assertNotNull(DeclarationSpecifier_4_list);
		Assert.assertEquals(1, DeclarationSpecifier_4_list.size());
		final TypeSpecifier TypeSpecifier_5_Var = (TypeSpecifier)DeclarationSpecifier_4_list.get(0);
		Assert.assertNotNull(TypeSpecifier_5_Var);
		Assert.assertEquals("int", TypeSpecifier_5_Var.getName());
		final Declarator Declarator_6_Var = (Declarator)FunctionDefHead_3_Var.getFunDeclarator();
		Assert.assertNotNull(Declarator_6_Var);
		final DirectDeclarator DirectDeclarator_7_Var = (DirectDeclarator)Declarator_6_Var.getDeclarator();
		Assert.assertNotNull(DirectDeclarator_7_Var);
		Assert.assertEquals("main", DirectDeclarator_7_Var.getId());
		final EList<? extends EObject> DeclaratorSuffix_7_list = DirectDeclarator_7_Var.getDeclaratorSuffix();
		Assert.assertNotNull(DeclaratorSuffix_7_list);
		Assert.assertEquals(1, DeclaratorSuffix_7_list.size());
		final DeclaratorSuffix DeclaratorSuffix_8_Var = (DeclaratorSuffix)DeclaratorSuffix_7_list.get(0);
		Assert.assertNotNull(DeclaratorSuffix_8_Var);
		final DirectDeclaratorLastSuffix DirectDeclaratorLastSuffix_9_Var = (DirectDeclaratorLastSuffix)DeclaratorSuffix_8_Var.getLastSuffix();
		Assert.assertNotNull(DirectDeclaratorLastSuffix_9_Var);
		final EList<? extends EObject> ParameterTypeList_9_list = DirectDeclaratorLastSuffix_9_Var.getParameterTypeList();
		Assert.assertNotNull(ParameterTypeList_9_list);
		Assert.assertEquals(1, ParameterTypeList_9_list.size());
		final ParameterTypeList ParameterTypeList_10_Var = (ParameterTypeList)ParameterTypeList_9_list.get(0);
		Assert.assertNotNull(ParameterTypeList_10_Var);
		final ParameterList ParameterList_11_Var = (ParameterList)ParameterTypeList_10_Var.getList();
		Assert.assertNotNull(ParameterList_11_Var);
		final EList<? extends EObject> ParameterDeclaration_11_list = ParameterList_11_Var.getParameterDeclaration();
		Assert.assertNotNull(ParameterDeclaration_11_list);
		Assert.assertEquals(1, ParameterDeclaration_11_list.size());
		final ParameterDeclaration ParameterDeclaration_12_Var = (ParameterDeclaration)ParameterDeclaration_11_list.get(0);
		Assert.assertNotNull(ParameterDeclaration_12_Var);
		final DeclarationSpecifiers DeclarationSpecifiers_13_Var = (DeclarationSpecifiers)ParameterDeclaration_12_Var.getDeclSpecifiers();
		Assert.assertNotNull(DeclarationSpecifiers_13_Var);
		final EList<? extends EObject> DeclarationSpecifier_13_list = DeclarationSpecifiers_13_Var.getDeclarationSpecifier();
		Assert.assertNotNull(DeclarationSpecifier_13_list);
		Assert.assertEquals(1, DeclarationSpecifier_13_list.size());
		final TypeSpecifier TypeSpecifier_14_Var = (TypeSpecifier)DeclarationSpecifier_13_list.get(0);
		Assert.assertNotNull(TypeSpecifier_14_Var);
		Assert.assertEquals("void", TypeSpecifier_14_Var.getName());
		final FunctionDefinition FunctionDefinition_15_Var = (FunctionDefinition)ExternalDeclaration_2_Var.getFunctionDefinition();
		Assert.assertNotNull(FunctionDefinition_15_Var);
		final BodyStatement BodyStatement_16_Var = (BodyStatement)FunctionDefinition_15_Var.getBody();
		Assert.assertNotNull(BodyStatement_16_Var);
		final EList<? extends EObject> BlockList_16_list = BodyStatement_16_Var.getBlockList();
		Assert.assertNotNull(BlockList_16_list);
		Assert.assertEquals(1, BlockList_16_list.size());
		final BlockList BlockList_17_Var = (BlockList)BlockList_16_list.get(0);
		Assert.assertNotNull(BlockList_17_Var);
		final EList<? extends EObject> Statement_17_list = BlockList_17_Var.getStatement();
		Assert.assertNotNull(Statement_17_list);
		Assert.assertEquals(8, Statement_17_list.size());
		final Statement Statement_18_Var = (Statement)Statement_17_list.get(0);
		Assert.assertNotNull(Statement_18_Var);
		final ExpressionStatement ExpressionStatement_19_Var = (ExpressionStatement)Statement_18_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_19_Var);
		final Expression Expression_20_Var = (Expression)ExpressionStatement_19_Var.getExpression();
		Assert.assertNotNull(Expression_20_Var);
		final EList<? extends EObject> ExprExpr_20_list = Expression_20_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_20_list);
		Assert.assertEquals(1, ExprExpr_20_list.size());
		final AssignmentExpression AssignmentExpression_21_Var = (AssignmentExpression)ExprExpr_20_list.get(0);
		Assert.assertNotNull(AssignmentExpression_21_Var);
		final ConditionalExpression ConditionalExpression_22_Var = (ConditionalExpression)AssignmentExpression_21_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_22_Var);
		final LogicalOrExpression LogicalOrExpression_23_Var = (LogicalOrExpression)ConditionalExpression_22_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_23_Var);
		final EList<? extends EObject> Expr_23_list = LogicalOrExpression_23_Var.getExpr();
		Assert.assertNotNull(Expr_23_list);
		Assert.assertEquals(1, Expr_23_list.size());
		final LogicalAndExpression LogicalAndExpression_24_Var = (LogicalAndExpression)Expr_23_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_24_Var);
		final EList<? extends EObject> Expr_24_list = LogicalAndExpression_24_Var.getExpr();
		Assert.assertNotNull(Expr_24_list);
		Assert.assertEquals(1, Expr_24_list.size());
		final InclusiveOrExpression InclusiveOrExpression_25_Var = (InclusiveOrExpression)Expr_24_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_25_Var);
		final EList<? extends EObject> Expr_25_list = InclusiveOrExpression_25_Var.getExpr();
		Assert.assertNotNull(Expr_25_list);
		Assert.assertEquals(1, Expr_25_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_26_Var = (ExclusiveOrExpression)Expr_25_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_26_Var);
		final EList<? extends EObject> Expr_26_list = ExclusiveOrExpression_26_Var.getExpr();
		Assert.assertNotNull(Expr_26_list);
		Assert.assertEquals(1, Expr_26_list.size());
		final AndExpression AndExpression_27_Var = (AndExpression)Expr_26_list.get(0);
		Assert.assertNotNull(AndExpression_27_Var);
		final EList<? extends EObject> Expr_27_list = AndExpression_27_Var.getExpr();
		Assert.assertNotNull(Expr_27_list);
		Assert.assertEquals(1, Expr_27_list.size());
		final EqualityExpression EqualityExpression_28_Var = (EqualityExpression)Expr_27_list.get(0);
		Assert.assertNotNull(EqualityExpression_28_Var);
		final EList<? extends EObject> Expr_28_list = EqualityExpression_28_Var.getExpr();
		Assert.assertNotNull(Expr_28_list);
		Assert.assertEquals(1, Expr_28_list.size());
		final RelationalExpression RelationalExpression_29_Var = (RelationalExpression)Expr_28_list.get(0);
		Assert.assertNotNull(RelationalExpression_29_Var);
		final EList<? extends EObject> Expr_29_list = RelationalExpression_29_Var.getExpr();
		Assert.assertNotNull(Expr_29_list);
		Assert.assertEquals(1, Expr_29_list.size());
		final ShiftExpression ShiftExpression_30_Var = (ShiftExpression)Expr_29_list.get(0);
		Assert.assertNotNull(ShiftExpression_30_Var);
		final EList<? extends EObject> Expr_30_list = ShiftExpression_30_Var.getExpr();
		Assert.assertNotNull(Expr_30_list);
		Assert.assertEquals(1, Expr_30_list.size());
		final AdditiveExpression AdditiveExpression_31_Var = (AdditiveExpression)Expr_30_list.get(0);
		Assert.assertNotNull(AdditiveExpression_31_Var);
		final EList<? extends EObject> Expr_31_list = AdditiveExpression_31_Var.getExpr();
		Assert.assertNotNull(Expr_31_list);
		Assert.assertEquals(1, Expr_31_list.size());
		final MultiplicativeExpression MultiplicativeExpression_32_Var = (MultiplicativeExpression)Expr_31_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_32_Var);
		final EList<? extends EObject> Expr_32_list = MultiplicativeExpression_32_Var.getExpr();
		Assert.assertNotNull(Expr_32_list);
		Assert.assertEquals(1, Expr_32_list.size());
		final CastExpression CastExpression_33_Var = (CastExpression)Expr_32_list.get(0);
		Assert.assertNotNull(CastExpression_33_Var);
		final UnaryExpression UnaryExpression_34_Var = (UnaryExpression)CastExpression_33_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_34_Var);
		final PostfixExpression PostfixExpression_35_Var = (PostfixExpression)UnaryExpression_34_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_35_Var);
		final EList<? extends EObject> Expr_35_list = PostfixExpression_35_Var.getExpr();
		Assert.assertNotNull(Expr_35_list);
		Assert.assertEquals(1, Expr_35_list.size());
		final PrimaryExpression PrimaryExpression_36_Var = (PrimaryExpression)Expr_35_list.get(0);
		Assert.assertNotNull(PrimaryExpression_36_Var);
		Assert.assertEquals("printf", PrimaryExpression_36_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_36_list = PostfixExpression_35_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_36_list);
		Assert.assertEquals(1, ArgumentExpressionList_36_list.size());
		final ArgumentExpressionList ArgumentExpressionList_37_Var = (ArgumentExpressionList)ArgumentExpressionList_36_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_37_Var);
		final EList<? extends EObject> Expr_37_list = ArgumentExpressionList_37_Var.getExpr();
		Assert.assertNotNull(Expr_37_list);
		Assert.assertEquals(2, Expr_37_list.size());
		final AssignmentExpression AssignmentExpression_38_Var = (AssignmentExpression)Expr_37_list.get(0);
		Assert.assertNotNull(AssignmentExpression_38_Var);
		final ConditionalExpression ConditionalExpression_39_Var = (ConditionalExpression)AssignmentExpression_38_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_39_Var);
		final LogicalOrExpression LogicalOrExpression_40_Var = (LogicalOrExpression)ConditionalExpression_39_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_40_Var);
		final EList<? extends EObject> Expr_40_list = LogicalOrExpression_40_Var.getExpr();
		Assert.assertNotNull(Expr_40_list);
		Assert.assertEquals(1, Expr_40_list.size());
		final LogicalAndExpression LogicalAndExpression_41_Var = (LogicalAndExpression)Expr_40_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_41_Var);
		final EList<? extends EObject> Expr_41_list = LogicalAndExpression_41_Var.getExpr();
		Assert.assertNotNull(Expr_41_list);
		Assert.assertEquals(1, Expr_41_list.size());
		final InclusiveOrExpression InclusiveOrExpression_42_Var = (InclusiveOrExpression)Expr_41_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_42_Var);
		final EList<? extends EObject> Expr_42_list = InclusiveOrExpression_42_Var.getExpr();
		Assert.assertNotNull(Expr_42_list);
		Assert.assertEquals(1, Expr_42_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_43_Var = (ExclusiveOrExpression)Expr_42_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_43_Var);
		final EList<? extends EObject> Expr_43_list = ExclusiveOrExpression_43_Var.getExpr();
		Assert.assertNotNull(Expr_43_list);
		Assert.assertEquals(1, Expr_43_list.size());
		final AndExpression AndExpression_44_Var = (AndExpression)Expr_43_list.get(0);
		Assert.assertNotNull(AndExpression_44_Var);
		final EList<? extends EObject> Expr_44_list = AndExpression_44_Var.getExpr();
		Assert.assertNotNull(Expr_44_list);
		Assert.assertEquals(1, Expr_44_list.size());
		final EqualityExpression EqualityExpression_45_Var = (EqualityExpression)Expr_44_list.get(0);
		Assert.assertNotNull(EqualityExpression_45_Var);
		final EList<? extends EObject> Expr_45_list = EqualityExpression_45_Var.getExpr();
		Assert.assertNotNull(Expr_45_list);
		Assert.assertEquals(1, Expr_45_list.size());
		final RelationalExpression RelationalExpression_46_Var = (RelationalExpression)Expr_45_list.get(0);
		Assert.assertNotNull(RelationalExpression_46_Var);
		final EList<? extends EObject> Expr_46_list = RelationalExpression_46_Var.getExpr();
		Assert.assertNotNull(Expr_46_list);
		Assert.assertEquals(1, Expr_46_list.size());
		final ShiftExpression ShiftExpression_47_Var = (ShiftExpression)Expr_46_list.get(0);
		Assert.assertNotNull(ShiftExpression_47_Var);
		final EList<? extends EObject> Expr_47_list = ShiftExpression_47_Var.getExpr();
		Assert.assertNotNull(Expr_47_list);
		Assert.assertEquals(1, Expr_47_list.size());
		final AdditiveExpression AdditiveExpression_48_Var = (AdditiveExpression)Expr_47_list.get(0);
		Assert.assertNotNull(AdditiveExpression_48_Var);
		final EList<? extends EObject> Expr_48_list = AdditiveExpression_48_Var.getExpr();
		Assert.assertNotNull(Expr_48_list);
		Assert.assertEquals(1, Expr_48_list.size());
		final MultiplicativeExpression MultiplicativeExpression_49_Var = (MultiplicativeExpression)Expr_48_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_49_Var);
		final EList<? extends EObject> Expr_49_list = MultiplicativeExpression_49_Var.getExpr();
		Assert.assertNotNull(Expr_49_list);
		Assert.assertEquals(1, Expr_49_list.size());
		final CastExpression CastExpression_50_Var = (CastExpression)Expr_49_list.get(0);
		Assert.assertNotNull(CastExpression_50_Var);
		final UnaryExpression UnaryExpression_51_Var = (UnaryExpression)CastExpression_50_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_51_Var);
		final PostfixExpression PostfixExpression_52_Var = (PostfixExpression)UnaryExpression_51_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_52_Var);
		final EList<? extends EObject> Expr_52_list = PostfixExpression_52_Var.getExpr();
		Assert.assertNotNull(Expr_52_list);
		Assert.assertEquals(1, Expr_52_list.size());
		final PrimaryExpression PrimaryExpression_53_Var = (PrimaryExpression)Expr_52_list.get(0);
		Assert.assertNotNull(PrimaryExpression_53_Var);
		final Constant Constant_54_Var = (Constant)PrimaryExpression_53_Var.getConst();
		Assert.assertNotNull(Constant_54_Var);
		Assert.assertEquals("\"sizeof(number)=%lu\\n\"", Constant_54_Var.getStr());
		final AssignmentExpression AssignmentExpression_55_Var = (AssignmentExpression)Expr_37_list.get(1);
		Assert.assertNotNull(AssignmentExpression_55_Var);
		final ConditionalExpression ConditionalExpression_56_Var = (ConditionalExpression)AssignmentExpression_55_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_56_Var);
		final LogicalOrExpression LogicalOrExpression_57_Var = (LogicalOrExpression)ConditionalExpression_56_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_57_Var);
		final EList<? extends EObject> Expr_57_list = LogicalOrExpression_57_Var.getExpr();
		Assert.assertNotNull(Expr_57_list);
		Assert.assertEquals(1, Expr_57_list.size());
		final LogicalAndExpression LogicalAndExpression_58_Var = (LogicalAndExpression)Expr_57_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_58_Var);
		final EList<? extends EObject> Expr_58_list = LogicalAndExpression_58_Var.getExpr();
		Assert.assertNotNull(Expr_58_list);
		Assert.assertEquals(1, Expr_58_list.size());
		final InclusiveOrExpression InclusiveOrExpression_59_Var = (InclusiveOrExpression)Expr_58_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_59_Var);
		final EList<? extends EObject> Expr_59_list = InclusiveOrExpression_59_Var.getExpr();
		Assert.assertNotNull(Expr_59_list);
		Assert.assertEquals(1, Expr_59_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_60_Var = (ExclusiveOrExpression)Expr_59_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_60_Var);
		final EList<? extends EObject> Expr_60_list = ExclusiveOrExpression_60_Var.getExpr();
		Assert.assertNotNull(Expr_60_list);
		Assert.assertEquals(1, Expr_60_list.size());
		final AndExpression AndExpression_61_Var = (AndExpression)Expr_60_list.get(0);
		Assert.assertNotNull(AndExpression_61_Var);
		final EList<? extends EObject> Expr_61_list = AndExpression_61_Var.getExpr();
		Assert.assertNotNull(Expr_61_list);
		Assert.assertEquals(1, Expr_61_list.size());
		final EqualityExpression EqualityExpression_62_Var = (EqualityExpression)Expr_61_list.get(0);
		Assert.assertNotNull(EqualityExpression_62_Var);
		final EList<? extends EObject> Expr_62_list = EqualityExpression_62_Var.getExpr();
		Assert.assertNotNull(Expr_62_list);
		Assert.assertEquals(1, Expr_62_list.size());
		final RelationalExpression RelationalExpression_63_Var = (RelationalExpression)Expr_62_list.get(0);
		Assert.assertNotNull(RelationalExpression_63_Var);
		final EList<? extends EObject> Expr_63_list = RelationalExpression_63_Var.getExpr();
		Assert.assertNotNull(Expr_63_list);
		Assert.assertEquals(1, Expr_63_list.size());
		final ShiftExpression ShiftExpression_64_Var = (ShiftExpression)Expr_63_list.get(0);
		Assert.assertNotNull(ShiftExpression_64_Var);
		final EList<? extends EObject> Expr_64_list = ShiftExpression_64_Var.getExpr();
		Assert.assertNotNull(Expr_64_list);
		Assert.assertEquals(1, Expr_64_list.size());
		final AdditiveExpression AdditiveExpression_65_Var = (AdditiveExpression)Expr_64_list.get(0);
		Assert.assertNotNull(AdditiveExpression_65_Var);
		final EList<? extends EObject> Expr_65_list = AdditiveExpression_65_Var.getExpr();
		Assert.assertNotNull(Expr_65_list);
		Assert.assertEquals(1, Expr_65_list.size());
		final MultiplicativeExpression MultiplicativeExpression_66_Var = (MultiplicativeExpression)Expr_65_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_66_Var);
		final EList<? extends EObject> Expr_66_list = MultiplicativeExpression_66_Var.getExpr();
		Assert.assertNotNull(Expr_66_list);
		Assert.assertEquals(1, Expr_66_list.size());
		final CastExpression CastExpression_67_Var = (CastExpression)Expr_66_list.get(0);
		Assert.assertNotNull(CastExpression_67_Var);
		final UnaryExpression UnaryExpression_68_Var = (UnaryExpression)CastExpression_67_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_68_Var);
		final PostfixExpression PostfixExpression_69_Var = (PostfixExpression)UnaryExpression_68_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_69_Var);
		final EList<? extends EObject> Expr_69_list = PostfixExpression_69_Var.getExpr();
		Assert.assertNotNull(Expr_69_list);
		Assert.assertEquals(1, Expr_69_list.size());
		final PrimaryExpression PrimaryExpression_70_Var = (PrimaryExpression)Expr_69_list.get(0);
		Assert.assertNotNull(PrimaryExpression_70_Var);
		Assert.assertEquals("size", PrimaryExpression_70_Var.getId());
		Assert.assertEquals(";", ExpressionStatement_19_Var.getSemi());
		final Statement Statement_71_Var = (Statement)Statement_17_list.get(1);
		Assert.assertNotNull(Statement_71_Var);
		final ExpressionStatement ExpressionStatement_72_Var = (ExpressionStatement)Statement_71_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_72_Var);
		final Expression Expression_73_Var = (Expression)ExpressionStatement_72_Var.getExpression();
		Assert.assertNotNull(Expression_73_Var);
		final EList<? extends EObject> ExprExpr_73_list = Expression_73_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_73_list);
		Assert.assertEquals(1, ExprExpr_73_list.size());
		final AssignmentExpression AssignmentExpression_74_Var = (AssignmentExpression)ExprExpr_73_list.get(0);
		Assert.assertNotNull(AssignmentExpression_74_Var);
		final ConditionalExpression ConditionalExpression_75_Var = (ConditionalExpression)AssignmentExpression_74_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_75_Var);
		final LogicalOrExpression LogicalOrExpression_76_Var = (LogicalOrExpression)ConditionalExpression_75_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_76_Var);
		final EList<? extends EObject> Expr_76_list = LogicalOrExpression_76_Var.getExpr();
		Assert.assertNotNull(Expr_76_list);
		Assert.assertEquals(1, Expr_76_list.size());
		final LogicalAndExpression LogicalAndExpression_77_Var = (LogicalAndExpression)Expr_76_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_77_Var);
		final EList<? extends EObject> Expr_77_list = LogicalAndExpression_77_Var.getExpr();
		Assert.assertNotNull(Expr_77_list);
		Assert.assertEquals(1, Expr_77_list.size());
		final InclusiveOrExpression InclusiveOrExpression_78_Var = (InclusiveOrExpression)Expr_77_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_78_Var);
		final EList<? extends EObject> Expr_78_list = InclusiveOrExpression_78_Var.getExpr();
		Assert.assertNotNull(Expr_78_list);
		Assert.assertEquals(1, Expr_78_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_79_Var = (ExclusiveOrExpression)Expr_78_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_79_Var);
		final EList<? extends EObject> Expr_79_list = ExclusiveOrExpression_79_Var.getExpr();
		Assert.assertNotNull(Expr_79_list);
		Assert.assertEquals(1, Expr_79_list.size());
		final AndExpression AndExpression_80_Var = (AndExpression)Expr_79_list.get(0);
		Assert.assertNotNull(AndExpression_80_Var);
		final EList<? extends EObject> Expr_80_list = AndExpression_80_Var.getExpr();
		Assert.assertNotNull(Expr_80_list);
		Assert.assertEquals(1, Expr_80_list.size());
		final EqualityExpression EqualityExpression_81_Var = (EqualityExpression)Expr_80_list.get(0);
		Assert.assertNotNull(EqualityExpression_81_Var);
		final EList<? extends EObject> Expr_81_list = EqualityExpression_81_Var.getExpr();
		Assert.assertNotNull(Expr_81_list);
		Assert.assertEquals(1, Expr_81_list.size());
		final RelationalExpression RelationalExpression_82_Var = (RelationalExpression)Expr_81_list.get(0);
		Assert.assertNotNull(RelationalExpression_82_Var);
		final EList<? extends EObject> Expr_82_list = RelationalExpression_82_Var.getExpr();
		Assert.assertNotNull(Expr_82_list);
		Assert.assertEquals(1, Expr_82_list.size());
		final ShiftExpression ShiftExpression_83_Var = (ShiftExpression)Expr_82_list.get(0);
		Assert.assertNotNull(ShiftExpression_83_Var);
		final EList<? extends EObject> Expr_83_list = ShiftExpression_83_Var.getExpr();
		Assert.assertNotNull(Expr_83_list);
		Assert.assertEquals(1, Expr_83_list.size());
		final AdditiveExpression AdditiveExpression_84_Var = (AdditiveExpression)Expr_83_list.get(0);
		Assert.assertNotNull(AdditiveExpression_84_Var);
		final EList<? extends EObject> Expr_84_list = AdditiveExpression_84_Var.getExpr();
		Assert.assertNotNull(Expr_84_list);
		Assert.assertEquals(1, Expr_84_list.size());
		final MultiplicativeExpression MultiplicativeExpression_85_Var = (MultiplicativeExpression)Expr_84_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_85_Var);
		final EList<? extends EObject> Expr_85_list = MultiplicativeExpression_85_Var.getExpr();
		Assert.assertNotNull(Expr_85_list);
		Assert.assertEquals(1, Expr_85_list.size());
		final CastExpression CastExpression_86_Var = (CastExpression)Expr_85_list.get(0);
		Assert.assertNotNull(CastExpression_86_Var);
		final UnaryExpression UnaryExpression_87_Var = (UnaryExpression)CastExpression_86_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_87_Var);
		final PostfixExpression PostfixExpression_88_Var = (PostfixExpression)UnaryExpression_87_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_88_Var);
		final EList<? extends EObject> Expr_88_list = PostfixExpression_88_Var.getExpr();
		Assert.assertNotNull(Expr_88_list);
		Assert.assertEquals(1, Expr_88_list.size());
		final PrimaryExpression PrimaryExpression_89_Var = (PrimaryExpression)Expr_88_list.get(0);
		Assert.assertNotNull(PrimaryExpression_89_Var);
		Assert.assertEquals("printf", PrimaryExpression_89_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_89_list = PostfixExpression_88_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_89_list);
		Assert.assertEquals(1, ArgumentExpressionList_89_list.size());
		final ArgumentExpressionList ArgumentExpressionList_90_Var = (ArgumentExpressionList)ArgumentExpressionList_89_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_90_Var);
		final EList<? extends EObject> Expr_90_list = ArgumentExpressionList_90_Var.getExpr();
		Assert.assertNotNull(Expr_90_list);
		Assert.assertEquals(2, Expr_90_list.size());
		final AssignmentExpression AssignmentExpression_91_Var = (AssignmentExpression)Expr_90_list.get(0);
		Assert.assertNotNull(AssignmentExpression_91_Var);
		final ConditionalExpression ConditionalExpression_92_Var = (ConditionalExpression)AssignmentExpression_91_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_92_Var);
		final LogicalOrExpression LogicalOrExpression_93_Var = (LogicalOrExpression)ConditionalExpression_92_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_93_Var);
		final EList<? extends EObject> Expr_93_list = LogicalOrExpression_93_Var.getExpr();
		Assert.assertNotNull(Expr_93_list);
		Assert.assertEquals(1, Expr_93_list.size());
		final LogicalAndExpression LogicalAndExpression_94_Var = (LogicalAndExpression)Expr_93_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_94_Var);
		final EList<? extends EObject> Expr_94_list = LogicalAndExpression_94_Var.getExpr();
		Assert.assertNotNull(Expr_94_list);
		Assert.assertEquals(1, Expr_94_list.size());
		final InclusiveOrExpression InclusiveOrExpression_95_Var = (InclusiveOrExpression)Expr_94_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_95_Var);
		final EList<? extends EObject> Expr_95_list = InclusiveOrExpression_95_Var.getExpr();
		Assert.assertNotNull(Expr_95_list);
		Assert.assertEquals(1, Expr_95_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_96_Var = (ExclusiveOrExpression)Expr_95_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_96_Var);
		final EList<? extends EObject> Expr_96_list = ExclusiveOrExpression_96_Var.getExpr();
		Assert.assertNotNull(Expr_96_list);
		Assert.assertEquals(1, Expr_96_list.size());
		final AndExpression AndExpression_97_Var = (AndExpression)Expr_96_list.get(0);
		Assert.assertNotNull(AndExpression_97_Var);
		final EList<? extends EObject> Expr_97_list = AndExpression_97_Var.getExpr();
		Assert.assertNotNull(Expr_97_list);
		Assert.assertEquals(1, Expr_97_list.size());
		final EqualityExpression EqualityExpression_98_Var = (EqualityExpression)Expr_97_list.get(0);
		Assert.assertNotNull(EqualityExpression_98_Var);
		final EList<? extends EObject> Expr_98_list = EqualityExpression_98_Var.getExpr();
		Assert.assertNotNull(Expr_98_list);
		Assert.assertEquals(1, Expr_98_list.size());
		final RelationalExpression RelationalExpression_99_Var = (RelationalExpression)Expr_98_list.get(0);
		Assert.assertNotNull(RelationalExpression_99_Var);
		final EList<? extends EObject> Expr_99_list = RelationalExpression_99_Var.getExpr();
		Assert.assertNotNull(Expr_99_list);
		Assert.assertEquals(1, Expr_99_list.size());
		final ShiftExpression ShiftExpression_100_Var = (ShiftExpression)Expr_99_list.get(0);
		Assert.assertNotNull(ShiftExpression_100_Var);
		final EList<? extends EObject> Expr_100_list = ShiftExpression_100_Var.getExpr();
		Assert.assertNotNull(Expr_100_list);
		Assert.assertEquals(1, Expr_100_list.size());
		final AdditiveExpression AdditiveExpression_101_Var = (AdditiveExpression)Expr_100_list.get(0);
		Assert.assertNotNull(AdditiveExpression_101_Var);
		final EList<? extends EObject> Expr_101_list = AdditiveExpression_101_Var.getExpr();
		Assert.assertNotNull(Expr_101_list);
		Assert.assertEquals(1, Expr_101_list.size());
		final MultiplicativeExpression MultiplicativeExpression_102_Var = (MultiplicativeExpression)Expr_101_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_102_Var);
		final EList<? extends EObject> Expr_102_list = MultiplicativeExpression_102_Var.getExpr();
		Assert.assertNotNull(Expr_102_list);
		Assert.assertEquals(1, Expr_102_list.size());
		final CastExpression CastExpression_103_Var = (CastExpression)Expr_102_list.get(0);
		Assert.assertNotNull(CastExpression_103_Var);
		final UnaryExpression UnaryExpression_104_Var = (UnaryExpression)CastExpression_103_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_104_Var);
		final PostfixExpression PostfixExpression_105_Var = (PostfixExpression)UnaryExpression_104_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_105_Var);
		final EList<? extends EObject> Expr_105_list = PostfixExpression_105_Var.getExpr();
		Assert.assertNotNull(Expr_105_list);
		Assert.assertEquals(1, Expr_105_list.size());
		final PrimaryExpression PrimaryExpression_106_Var = (PrimaryExpression)Expr_105_list.get(0);
		Assert.assertNotNull(PrimaryExpression_106_Var);
		final Constant Constant_107_Var = (Constant)PrimaryExpression_106_Var.getConst();
		Assert.assertNotNull(Constant_107_Var);
		Assert.assertEquals("\"sizeof(float)=%lu\\n\"", Constant_107_Var.getStr());
		final AssignmentExpression AssignmentExpression_108_Var = (AssignmentExpression)Expr_90_list.get(1);
		Assert.assertNotNull(AssignmentExpression_108_Var);
		final ConditionalExpression ConditionalExpression_109_Var = (ConditionalExpression)AssignmentExpression_108_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_109_Var);
		final LogicalOrExpression LogicalOrExpression_110_Var = (LogicalOrExpression)ConditionalExpression_109_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_110_Var);
		final EList<? extends EObject> Expr_110_list = LogicalOrExpression_110_Var.getExpr();
		Assert.assertNotNull(Expr_110_list);
		Assert.assertEquals(1, Expr_110_list.size());
		final LogicalAndExpression LogicalAndExpression_111_Var = (LogicalAndExpression)Expr_110_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_111_Var);
		final EList<? extends EObject> Expr_111_list = LogicalAndExpression_111_Var.getExpr();
		Assert.assertNotNull(Expr_111_list);
		Assert.assertEquals(1, Expr_111_list.size());
		final InclusiveOrExpression InclusiveOrExpression_112_Var = (InclusiveOrExpression)Expr_111_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_112_Var);
		final EList<? extends EObject> Expr_112_list = InclusiveOrExpression_112_Var.getExpr();
		Assert.assertNotNull(Expr_112_list);
		Assert.assertEquals(1, Expr_112_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_113_Var = (ExclusiveOrExpression)Expr_112_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_113_Var);
		final EList<? extends EObject> Expr_113_list = ExclusiveOrExpression_113_Var.getExpr();
		Assert.assertNotNull(Expr_113_list);
		Assert.assertEquals(1, Expr_113_list.size());
		final AndExpression AndExpression_114_Var = (AndExpression)Expr_113_list.get(0);
		Assert.assertNotNull(AndExpression_114_Var);
		final EList<? extends EObject> Expr_114_list = AndExpression_114_Var.getExpr();
		Assert.assertNotNull(Expr_114_list);
		Assert.assertEquals(1, Expr_114_list.size());
		final EqualityExpression EqualityExpression_115_Var = (EqualityExpression)Expr_114_list.get(0);
		Assert.assertNotNull(EqualityExpression_115_Var);
		final EList<? extends EObject> Expr_115_list = EqualityExpression_115_Var.getExpr();
		Assert.assertNotNull(Expr_115_list);
		Assert.assertEquals(1, Expr_115_list.size());
		final RelationalExpression RelationalExpression_116_Var = (RelationalExpression)Expr_115_list.get(0);
		Assert.assertNotNull(RelationalExpression_116_Var);
		final EList<? extends EObject> Expr_116_list = RelationalExpression_116_Var.getExpr();
		Assert.assertNotNull(Expr_116_list);
		Assert.assertEquals(1, Expr_116_list.size());
		final ShiftExpression ShiftExpression_117_Var = (ShiftExpression)Expr_116_list.get(0);
		Assert.assertNotNull(ShiftExpression_117_Var);
		final EList<? extends EObject> Expr_117_list = ShiftExpression_117_Var.getExpr();
		Assert.assertNotNull(Expr_117_list);
		Assert.assertEquals(1, Expr_117_list.size());
		final AdditiveExpression AdditiveExpression_118_Var = (AdditiveExpression)Expr_117_list.get(0);
		Assert.assertNotNull(AdditiveExpression_118_Var);
		final EList<? extends EObject> Expr_118_list = AdditiveExpression_118_Var.getExpr();
		Assert.assertNotNull(Expr_118_list);
		Assert.assertEquals(1, Expr_118_list.size());
		final MultiplicativeExpression MultiplicativeExpression_119_Var = (MultiplicativeExpression)Expr_118_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_119_Var);
		final EList<? extends EObject> Expr_119_list = MultiplicativeExpression_119_Var.getExpr();
		Assert.assertNotNull(Expr_119_list);
		Assert.assertEquals(1, Expr_119_list.size());
		final CastExpression CastExpression_120_Var = (CastExpression)Expr_119_list.get(0);
		Assert.assertNotNull(CastExpression_120_Var);
		final UnaryExpression UnaryExpression_121_Var = (UnaryExpression)CastExpression_120_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_121_Var);
		Assert.assertEquals("sizeof", UnaryExpression_121_Var.getSizeOf());
		final TypeName TypeName_122_Var = (TypeName)UnaryExpression_121_Var.getTypeName();
		Assert.assertNotNull(TypeName_122_Var);
		final SpecifierQualifierList SpecifierQualifierList_123_Var = (SpecifierQualifierList)TypeName_122_Var.getList();
		Assert.assertNotNull(SpecifierQualifierList_123_Var);
		final EList<? extends EObject> TypeSpecifier_123_list = SpecifierQualifierList_123_Var.getTypeSpecifier();
		Assert.assertNotNull(TypeSpecifier_123_list);
		Assert.assertEquals(1, TypeSpecifier_123_list.size());
		final TypeSpecifier TypeSpecifier_124_Var = (TypeSpecifier)TypeSpecifier_123_list.get(0);
		Assert.assertNotNull(TypeSpecifier_124_Var);
		Assert.assertEquals("float", TypeSpecifier_124_Var.getName());
		Assert.assertEquals(";", ExpressionStatement_72_Var.getSemi());
		final Statement Statement_125_Var = (Statement)Statement_17_list.get(2);
		Assert.assertNotNull(Statement_125_Var);
		final ExpressionStatement ExpressionStatement_126_Var = (ExpressionStatement)Statement_125_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_126_Var);
		final Expression Expression_127_Var = (Expression)ExpressionStatement_126_Var.getExpression();
		Assert.assertNotNull(Expression_127_Var);
		final EList<? extends EObject> ExprExpr_127_list = Expression_127_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_127_list);
		Assert.assertEquals(1, ExprExpr_127_list.size());
		final AssignmentExpression AssignmentExpression_128_Var = (AssignmentExpression)ExprExpr_127_list.get(0);
		Assert.assertNotNull(AssignmentExpression_128_Var);
		final ConditionalExpression ConditionalExpression_129_Var = (ConditionalExpression)AssignmentExpression_128_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_129_Var);
		final LogicalOrExpression LogicalOrExpression_130_Var = (LogicalOrExpression)ConditionalExpression_129_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_130_Var);
		final EList<? extends EObject> Expr_130_list = LogicalOrExpression_130_Var.getExpr();
		Assert.assertNotNull(Expr_130_list);
		Assert.assertEquals(1, Expr_130_list.size());
		final LogicalAndExpression LogicalAndExpression_131_Var = (LogicalAndExpression)Expr_130_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_131_Var);
		final EList<? extends EObject> Expr_131_list = LogicalAndExpression_131_Var.getExpr();
		Assert.assertNotNull(Expr_131_list);
		Assert.assertEquals(1, Expr_131_list.size());
		final InclusiveOrExpression InclusiveOrExpression_132_Var = (InclusiveOrExpression)Expr_131_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_132_Var);
		final EList<? extends EObject> Expr_132_list = InclusiveOrExpression_132_Var.getExpr();
		Assert.assertNotNull(Expr_132_list);
		Assert.assertEquals(1, Expr_132_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_133_Var = (ExclusiveOrExpression)Expr_132_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_133_Var);
		final EList<? extends EObject> Expr_133_list = ExclusiveOrExpression_133_Var.getExpr();
		Assert.assertNotNull(Expr_133_list);
		Assert.assertEquals(1, Expr_133_list.size());
		final AndExpression AndExpression_134_Var = (AndExpression)Expr_133_list.get(0);
		Assert.assertNotNull(AndExpression_134_Var);
		final EList<? extends EObject> Expr_134_list = AndExpression_134_Var.getExpr();
		Assert.assertNotNull(Expr_134_list);
		Assert.assertEquals(1, Expr_134_list.size());
		final EqualityExpression EqualityExpression_135_Var = (EqualityExpression)Expr_134_list.get(0);
		Assert.assertNotNull(EqualityExpression_135_Var);
		final EList<? extends EObject> Expr_135_list = EqualityExpression_135_Var.getExpr();
		Assert.assertNotNull(Expr_135_list);
		Assert.assertEquals(1, Expr_135_list.size());
		final RelationalExpression RelationalExpression_136_Var = (RelationalExpression)Expr_135_list.get(0);
		Assert.assertNotNull(RelationalExpression_136_Var);
		final EList<? extends EObject> Expr_136_list = RelationalExpression_136_Var.getExpr();
		Assert.assertNotNull(Expr_136_list);
		Assert.assertEquals(1, Expr_136_list.size());
		final ShiftExpression ShiftExpression_137_Var = (ShiftExpression)Expr_136_list.get(0);
		Assert.assertNotNull(ShiftExpression_137_Var);
		final EList<? extends EObject> Expr_137_list = ShiftExpression_137_Var.getExpr();
		Assert.assertNotNull(Expr_137_list);
		Assert.assertEquals(1, Expr_137_list.size());
		final AdditiveExpression AdditiveExpression_138_Var = (AdditiveExpression)Expr_137_list.get(0);
		Assert.assertNotNull(AdditiveExpression_138_Var);
		final EList<? extends EObject> Expr_138_list = AdditiveExpression_138_Var.getExpr();
		Assert.assertNotNull(Expr_138_list);
		Assert.assertEquals(1, Expr_138_list.size());
		final MultiplicativeExpression MultiplicativeExpression_139_Var = (MultiplicativeExpression)Expr_138_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_139_Var);
		final EList<? extends EObject> Expr_139_list = MultiplicativeExpression_139_Var.getExpr();
		Assert.assertNotNull(Expr_139_list);
		Assert.assertEquals(1, Expr_139_list.size());
		final CastExpression CastExpression_140_Var = (CastExpression)Expr_139_list.get(0);
		Assert.assertNotNull(CastExpression_140_Var);
		final UnaryExpression UnaryExpression_141_Var = (UnaryExpression)CastExpression_140_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_141_Var);
		final PostfixExpression PostfixExpression_142_Var = (PostfixExpression)UnaryExpression_141_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_142_Var);
		final EList<? extends EObject> Expr_142_list = PostfixExpression_142_Var.getExpr();
		Assert.assertNotNull(Expr_142_list);
		Assert.assertEquals(1, Expr_142_list.size());
		final PrimaryExpression PrimaryExpression_143_Var = (PrimaryExpression)Expr_142_list.get(0);
		Assert.assertNotNull(PrimaryExpression_143_Var);
		Assert.assertEquals("printf", PrimaryExpression_143_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_143_list = PostfixExpression_142_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_143_list);
		Assert.assertEquals(1, ArgumentExpressionList_143_list.size());
		final ArgumentExpressionList ArgumentExpressionList_144_Var = (ArgumentExpressionList)ArgumentExpressionList_143_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_144_Var);
		final EList<? extends EObject> Expr_144_list = ArgumentExpressionList_144_Var.getExpr();
		Assert.assertNotNull(Expr_144_list);
		Assert.assertEquals(2, Expr_144_list.size());
		final AssignmentExpression AssignmentExpression_145_Var = (AssignmentExpression)Expr_144_list.get(0);
		Assert.assertNotNull(AssignmentExpression_145_Var);
		final ConditionalExpression ConditionalExpression_146_Var = (ConditionalExpression)AssignmentExpression_145_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_146_Var);
		final LogicalOrExpression LogicalOrExpression_147_Var = (LogicalOrExpression)ConditionalExpression_146_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_147_Var);
		final EList<? extends EObject> Expr_147_list = LogicalOrExpression_147_Var.getExpr();
		Assert.assertNotNull(Expr_147_list);
		Assert.assertEquals(1, Expr_147_list.size());
		final LogicalAndExpression LogicalAndExpression_148_Var = (LogicalAndExpression)Expr_147_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_148_Var);
		final EList<? extends EObject> Expr_148_list = LogicalAndExpression_148_Var.getExpr();
		Assert.assertNotNull(Expr_148_list);
		Assert.assertEquals(1, Expr_148_list.size());
		final InclusiveOrExpression InclusiveOrExpression_149_Var = (InclusiveOrExpression)Expr_148_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_149_Var);
		final EList<? extends EObject> Expr_149_list = InclusiveOrExpression_149_Var.getExpr();
		Assert.assertNotNull(Expr_149_list);
		Assert.assertEquals(1, Expr_149_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_150_Var = (ExclusiveOrExpression)Expr_149_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_150_Var);
		final EList<? extends EObject> Expr_150_list = ExclusiveOrExpression_150_Var.getExpr();
		Assert.assertNotNull(Expr_150_list);
		Assert.assertEquals(1, Expr_150_list.size());
		final AndExpression AndExpression_151_Var = (AndExpression)Expr_150_list.get(0);
		Assert.assertNotNull(AndExpression_151_Var);
		final EList<? extends EObject> Expr_151_list = AndExpression_151_Var.getExpr();
		Assert.assertNotNull(Expr_151_list);
		Assert.assertEquals(1, Expr_151_list.size());
		final EqualityExpression EqualityExpression_152_Var = (EqualityExpression)Expr_151_list.get(0);
		Assert.assertNotNull(EqualityExpression_152_Var);
		final EList<? extends EObject> Expr_152_list = EqualityExpression_152_Var.getExpr();
		Assert.assertNotNull(Expr_152_list);
		Assert.assertEquals(1, Expr_152_list.size());
		final RelationalExpression RelationalExpression_153_Var = (RelationalExpression)Expr_152_list.get(0);
		Assert.assertNotNull(RelationalExpression_153_Var);
		final EList<? extends EObject> Expr_153_list = RelationalExpression_153_Var.getExpr();
		Assert.assertNotNull(Expr_153_list);
		Assert.assertEquals(1, Expr_153_list.size());
		final ShiftExpression ShiftExpression_154_Var = (ShiftExpression)Expr_153_list.get(0);
		Assert.assertNotNull(ShiftExpression_154_Var);
		final EList<? extends EObject> Expr_154_list = ShiftExpression_154_Var.getExpr();
		Assert.assertNotNull(Expr_154_list);
		Assert.assertEquals(1, Expr_154_list.size());
		final AdditiveExpression AdditiveExpression_155_Var = (AdditiveExpression)Expr_154_list.get(0);
		Assert.assertNotNull(AdditiveExpression_155_Var);
		final EList<? extends EObject> Expr_155_list = AdditiveExpression_155_Var.getExpr();
		Assert.assertNotNull(Expr_155_list);
		Assert.assertEquals(1, Expr_155_list.size());
		final MultiplicativeExpression MultiplicativeExpression_156_Var = (MultiplicativeExpression)Expr_155_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_156_Var);
		final EList<? extends EObject> Expr_156_list = MultiplicativeExpression_156_Var.getExpr();
		Assert.assertNotNull(Expr_156_list);
		Assert.assertEquals(1, Expr_156_list.size());
		final CastExpression CastExpression_157_Var = (CastExpression)Expr_156_list.get(0);
		Assert.assertNotNull(CastExpression_157_Var);
		final UnaryExpression UnaryExpression_158_Var = (UnaryExpression)CastExpression_157_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_158_Var);
		final PostfixExpression PostfixExpression_159_Var = (PostfixExpression)UnaryExpression_158_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_159_Var);
		final EList<? extends EObject> Expr_159_list = PostfixExpression_159_Var.getExpr();
		Assert.assertNotNull(Expr_159_list);
		Assert.assertEquals(1, Expr_159_list.size());
		final PrimaryExpression PrimaryExpression_160_Var = (PrimaryExpression)Expr_159_list.get(0);
		Assert.assertNotNull(PrimaryExpression_160_Var);
		final Constant Constant_161_Var = (Constant)PrimaryExpression_160_Var.getConst();
		Assert.assertNotNull(Constant_161_Var);
		Assert.assertEquals("\"number.numChar(as decimal)=%d\\n\"", Constant_161_Var.getStr());
		final AssignmentExpression AssignmentExpression_162_Var = (AssignmentExpression)Expr_144_list.get(1);
		Assert.assertNotNull(AssignmentExpression_162_Var);
		final ConditionalExpression ConditionalExpression_163_Var = (ConditionalExpression)AssignmentExpression_162_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_163_Var);
		final LogicalOrExpression LogicalOrExpression_164_Var = (LogicalOrExpression)ConditionalExpression_163_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_164_Var);
		final EList<? extends EObject> Expr_164_list = LogicalOrExpression_164_Var.getExpr();
		Assert.assertNotNull(Expr_164_list);
		Assert.assertEquals(1, Expr_164_list.size());
		final LogicalAndExpression LogicalAndExpression_165_Var = (LogicalAndExpression)Expr_164_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_165_Var);
		final EList<? extends EObject> Expr_165_list = LogicalAndExpression_165_Var.getExpr();
		Assert.assertNotNull(Expr_165_list);
		Assert.assertEquals(1, Expr_165_list.size());
		final InclusiveOrExpression InclusiveOrExpression_166_Var = (InclusiveOrExpression)Expr_165_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_166_Var);
		final EList<? extends EObject> Expr_166_list = InclusiveOrExpression_166_Var.getExpr();
		Assert.assertNotNull(Expr_166_list);
		Assert.assertEquals(1, Expr_166_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_167_Var = (ExclusiveOrExpression)Expr_166_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_167_Var);
		final EList<? extends EObject> Expr_167_list = ExclusiveOrExpression_167_Var.getExpr();
		Assert.assertNotNull(Expr_167_list);
		Assert.assertEquals(1, Expr_167_list.size());
		final AndExpression AndExpression_168_Var = (AndExpression)Expr_167_list.get(0);
		Assert.assertNotNull(AndExpression_168_Var);
		final EList<? extends EObject> Expr_168_list = AndExpression_168_Var.getExpr();
		Assert.assertNotNull(Expr_168_list);
		Assert.assertEquals(1, Expr_168_list.size());
		final EqualityExpression EqualityExpression_169_Var = (EqualityExpression)Expr_168_list.get(0);
		Assert.assertNotNull(EqualityExpression_169_Var);
		final EList<? extends EObject> Expr_169_list = EqualityExpression_169_Var.getExpr();
		Assert.assertNotNull(Expr_169_list);
		Assert.assertEquals(1, Expr_169_list.size());
		final RelationalExpression RelationalExpression_170_Var = (RelationalExpression)Expr_169_list.get(0);
		Assert.assertNotNull(RelationalExpression_170_Var);
		final EList<? extends EObject> Expr_170_list = RelationalExpression_170_Var.getExpr();
		Assert.assertNotNull(Expr_170_list);
		Assert.assertEquals(1, Expr_170_list.size());
		final ShiftExpression ShiftExpression_171_Var = (ShiftExpression)Expr_170_list.get(0);
		Assert.assertNotNull(ShiftExpression_171_Var);
		final EList<? extends EObject> Expr_171_list = ShiftExpression_171_Var.getExpr();
		Assert.assertNotNull(Expr_171_list);
		Assert.assertEquals(1, Expr_171_list.size());
		final AdditiveExpression AdditiveExpression_172_Var = (AdditiveExpression)Expr_171_list.get(0);
		Assert.assertNotNull(AdditiveExpression_172_Var);
		final EList<? extends EObject> Expr_172_list = AdditiveExpression_172_Var.getExpr();
		Assert.assertNotNull(Expr_172_list);
		Assert.assertEquals(1, Expr_172_list.size());
		final MultiplicativeExpression MultiplicativeExpression_173_Var = (MultiplicativeExpression)Expr_172_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_173_Var);
		final EList<? extends EObject> Expr_173_list = MultiplicativeExpression_173_Var.getExpr();
		Assert.assertNotNull(Expr_173_list);
		Assert.assertEquals(1, Expr_173_list.size());
		final CastExpression CastExpression_174_Var = (CastExpression)Expr_173_list.get(0);
		Assert.assertNotNull(CastExpression_174_Var);
		final UnaryExpression UnaryExpression_175_Var = (UnaryExpression)CastExpression_174_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_175_Var);
		final PostfixExpression PostfixExpression_176_Var = (PostfixExpression)UnaryExpression_175_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_176_Var);
		final EList<? extends EObject> Expr_176_list = PostfixExpression_176_Var.getExpr();
		Assert.assertNotNull(Expr_176_list);
		Assert.assertEquals(1, Expr_176_list.size());
		final PrimaryExpression PrimaryExpression_177_Var = (PrimaryExpression)Expr_176_list.get(0);
		Assert.assertNotNull(PrimaryExpression_177_Var);
		Assert.assertEquals("number", PrimaryExpression_177_Var.getId());
		Assert.assertEquals("[.]", PostfixExpression_176_Var.getDot().toString());
		Assert.assertEquals("[numChar]", PostfixExpression_176_Var.getId().toString());
		Assert.assertEquals(";", ExpressionStatement_126_Var.getSemi());
		final Statement Statement_178_Var = (Statement)Statement_17_list.get(3);
		Assert.assertNotNull(Statement_178_Var);
		final ExpressionStatement ExpressionStatement_179_Var = (ExpressionStatement)Statement_178_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_179_Var);
		final Expression Expression_180_Var = (Expression)ExpressionStatement_179_Var.getExpression();
		Assert.assertNotNull(Expression_180_Var);
		final EList<? extends EObject> ExprExpr_180_list = Expression_180_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_180_list);
		Assert.assertEquals(1, ExprExpr_180_list.size());
		final AssignmentExpression AssignmentExpression_181_Var = (AssignmentExpression)ExprExpr_180_list.get(0);
		Assert.assertNotNull(AssignmentExpression_181_Var);
		final ConditionalExpression ConditionalExpression_182_Var = (ConditionalExpression)AssignmentExpression_181_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_182_Var);
		final LogicalOrExpression LogicalOrExpression_183_Var = (LogicalOrExpression)ConditionalExpression_182_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_183_Var);
		final EList<? extends EObject> Expr_183_list = LogicalOrExpression_183_Var.getExpr();
		Assert.assertNotNull(Expr_183_list);
		Assert.assertEquals(1, Expr_183_list.size());
		final LogicalAndExpression LogicalAndExpression_184_Var = (LogicalAndExpression)Expr_183_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_184_Var);
		final EList<? extends EObject> Expr_184_list = LogicalAndExpression_184_Var.getExpr();
		Assert.assertNotNull(Expr_184_list);
		Assert.assertEquals(1, Expr_184_list.size());
		final InclusiveOrExpression InclusiveOrExpression_185_Var = (InclusiveOrExpression)Expr_184_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_185_Var);
		final EList<? extends EObject> Expr_185_list = InclusiveOrExpression_185_Var.getExpr();
		Assert.assertNotNull(Expr_185_list);
		Assert.assertEquals(1, Expr_185_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_186_Var = (ExclusiveOrExpression)Expr_185_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_186_Var);
		final EList<? extends EObject> Expr_186_list = ExclusiveOrExpression_186_Var.getExpr();
		Assert.assertNotNull(Expr_186_list);
		Assert.assertEquals(1, Expr_186_list.size());
		final AndExpression AndExpression_187_Var = (AndExpression)Expr_186_list.get(0);
		Assert.assertNotNull(AndExpression_187_Var);
		final EList<? extends EObject> Expr_187_list = AndExpression_187_Var.getExpr();
		Assert.assertNotNull(Expr_187_list);
		Assert.assertEquals(1, Expr_187_list.size());
		final EqualityExpression EqualityExpression_188_Var = (EqualityExpression)Expr_187_list.get(0);
		Assert.assertNotNull(EqualityExpression_188_Var);
		final EList<? extends EObject> Expr_188_list = EqualityExpression_188_Var.getExpr();
		Assert.assertNotNull(Expr_188_list);
		Assert.assertEquals(1, Expr_188_list.size());
		final RelationalExpression RelationalExpression_189_Var = (RelationalExpression)Expr_188_list.get(0);
		Assert.assertNotNull(RelationalExpression_189_Var);
		final EList<? extends EObject> Expr_189_list = RelationalExpression_189_Var.getExpr();
		Assert.assertNotNull(Expr_189_list);
		Assert.assertEquals(1, Expr_189_list.size());
		final ShiftExpression ShiftExpression_190_Var = (ShiftExpression)Expr_189_list.get(0);
		Assert.assertNotNull(ShiftExpression_190_Var);
		final EList<? extends EObject> Expr_190_list = ShiftExpression_190_Var.getExpr();
		Assert.assertNotNull(Expr_190_list);
		Assert.assertEquals(1, Expr_190_list.size());
		final AdditiveExpression AdditiveExpression_191_Var = (AdditiveExpression)Expr_190_list.get(0);
		Assert.assertNotNull(AdditiveExpression_191_Var);
		final EList<? extends EObject> Expr_191_list = AdditiveExpression_191_Var.getExpr();
		Assert.assertNotNull(Expr_191_list);
		Assert.assertEquals(1, Expr_191_list.size());
		final MultiplicativeExpression MultiplicativeExpression_192_Var = (MultiplicativeExpression)Expr_191_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_192_Var);
		final EList<? extends EObject> Expr_192_list = MultiplicativeExpression_192_Var.getExpr();
		Assert.assertNotNull(Expr_192_list);
		Assert.assertEquals(1, Expr_192_list.size());
		final CastExpression CastExpression_193_Var = (CastExpression)Expr_192_list.get(0);
		Assert.assertNotNull(CastExpression_193_Var);
		final UnaryExpression UnaryExpression_194_Var = (UnaryExpression)CastExpression_193_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_194_Var);
		final PostfixExpression PostfixExpression_195_Var = (PostfixExpression)UnaryExpression_194_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_195_Var);
		final EList<? extends EObject> Expr_195_list = PostfixExpression_195_Var.getExpr();
		Assert.assertNotNull(Expr_195_list);
		Assert.assertEquals(1, Expr_195_list.size());
		final PrimaryExpression PrimaryExpression_196_Var = (PrimaryExpression)Expr_195_list.get(0);
		Assert.assertNotNull(PrimaryExpression_196_Var);
		Assert.assertEquals("printf", PrimaryExpression_196_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_196_list = PostfixExpression_195_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_196_list);
		Assert.assertEquals(1, ArgumentExpressionList_196_list.size());
		final ArgumentExpressionList ArgumentExpressionList_197_Var = (ArgumentExpressionList)ArgumentExpressionList_196_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_197_Var);
		final EList<? extends EObject> Expr_197_list = ArgumentExpressionList_197_Var.getExpr();
		Assert.assertNotNull(Expr_197_list);
		Assert.assertEquals(2, Expr_197_list.size());
		final AssignmentExpression AssignmentExpression_198_Var = (AssignmentExpression)Expr_197_list.get(0);
		Assert.assertNotNull(AssignmentExpression_198_Var);
		final ConditionalExpression ConditionalExpression_199_Var = (ConditionalExpression)AssignmentExpression_198_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_199_Var);
		final LogicalOrExpression LogicalOrExpression_200_Var = (LogicalOrExpression)ConditionalExpression_199_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_200_Var);
		final EList<? extends EObject> Expr_200_list = LogicalOrExpression_200_Var.getExpr();
		Assert.assertNotNull(Expr_200_list);
		Assert.assertEquals(1, Expr_200_list.size());
		final LogicalAndExpression LogicalAndExpression_201_Var = (LogicalAndExpression)Expr_200_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_201_Var);
		final EList<? extends EObject> Expr_201_list = LogicalAndExpression_201_Var.getExpr();
		Assert.assertNotNull(Expr_201_list);
		Assert.assertEquals(1, Expr_201_list.size());
		final InclusiveOrExpression InclusiveOrExpression_202_Var = (InclusiveOrExpression)Expr_201_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_202_Var);
		final EList<? extends EObject> Expr_202_list = InclusiveOrExpression_202_Var.getExpr();
		Assert.assertNotNull(Expr_202_list);
		Assert.assertEquals(1, Expr_202_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_203_Var = (ExclusiveOrExpression)Expr_202_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_203_Var);
		final EList<? extends EObject> Expr_203_list = ExclusiveOrExpression_203_Var.getExpr();
		Assert.assertNotNull(Expr_203_list);
		Assert.assertEquals(1, Expr_203_list.size());
		final AndExpression AndExpression_204_Var = (AndExpression)Expr_203_list.get(0);
		Assert.assertNotNull(AndExpression_204_Var);
		final EList<? extends EObject> Expr_204_list = AndExpression_204_Var.getExpr();
		Assert.assertNotNull(Expr_204_list);
		Assert.assertEquals(1, Expr_204_list.size());
		final EqualityExpression EqualityExpression_205_Var = (EqualityExpression)Expr_204_list.get(0);
		Assert.assertNotNull(EqualityExpression_205_Var);
		final EList<? extends EObject> Expr_205_list = EqualityExpression_205_Var.getExpr();
		Assert.assertNotNull(Expr_205_list);
		Assert.assertEquals(1, Expr_205_list.size());
		final RelationalExpression RelationalExpression_206_Var = (RelationalExpression)Expr_205_list.get(0);
		Assert.assertNotNull(RelationalExpression_206_Var);
		final EList<? extends EObject> Expr_206_list = RelationalExpression_206_Var.getExpr();
		Assert.assertNotNull(Expr_206_list);
		Assert.assertEquals(1, Expr_206_list.size());
		final ShiftExpression ShiftExpression_207_Var = (ShiftExpression)Expr_206_list.get(0);
		Assert.assertNotNull(ShiftExpression_207_Var);
		final EList<? extends EObject> Expr_207_list = ShiftExpression_207_Var.getExpr();
		Assert.assertNotNull(Expr_207_list);
		Assert.assertEquals(1, Expr_207_list.size());
		final AdditiveExpression AdditiveExpression_208_Var = (AdditiveExpression)Expr_207_list.get(0);
		Assert.assertNotNull(AdditiveExpression_208_Var);
		final EList<? extends EObject> Expr_208_list = AdditiveExpression_208_Var.getExpr();
		Assert.assertNotNull(Expr_208_list);
		Assert.assertEquals(1, Expr_208_list.size());
		final MultiplicativeExpression MultiplicativeExpression_209_Var = (MultiplicativeExpression)Expr_208_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_209_Var);
		final EList<? extends EObject> Expr_209_list = MultiplicativeExpression_209_Var.getExpr();
		Assert.assertNotNull(Expr_209_list);
		Assert.assertEquals(1, Expr_209_list.size());
		final CastExpression CastExpression_210_Var = (CastExpression)Expr_209_list.get(0);
		Assert.assertNotNull(CastExpression_210_Var);
		final UnaryExpression UnaryExpression_211_Var = (UnaryExpression)CastExpression_210_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_211_Var);
		final PostfixExpression PostfixExpression_212_Var = (PostfixExpression)UnaryExpression_211_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_212_Var);
		final EList<? extends EObject> Expr_212_list = PostfixExpression_212_Var.getExpr();
		Assert.assertNotNull(Expr_212_list);
		Assert.assertEquals(1, Expr_212_list.size());
		final PrimaryExpression PrimaryExpression_213_Var = (PrimaryExpression)Expr_212_list.get(0);
		Assert.assertNotNull(PrimaryExpression_213_Var);
		final Constant Constant_214_Var = (Constant)PrimaryExpression_213_Var.getConst();
		Assert.assertNotNull(Constant_214_Var);
		Assert.assertEquals("\"number.numChar(as char)=%c\\n\"", Constant_214_Var.getStr());
		final AssignmentExpression AssignmentExpression_215_Var = (AssignmentExpression)Expr_197_list.get(1);
		Assert.assertNotNull(AssignmentExpression_215_Var);
		final ConditionalExpression ConditionalExpression_216_Var = (ConditionalExpression)AssignmentExpression_215_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_216_Var);
		final LogicalOrExpression LogicalOrExpression_217_Var = (LogicalOrExpression)ConditionalExpression_216_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_217_Var);
		final EList<? extends EObject> Expr_217_list = LogicalOrExpression_217_Var.getExpr();
		Assert.assertNotNull(Expr_217_list);
		Assert.assertEquals(1, Expr_217_list.size());
		final LogicalAndExpression LogicalAndExpression_218_Var = (LogicalAndExpression)Expr_217_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_218_Var);
		final EList<? extends EObject> Expr_218_list = LogicalAndExpression_218_Var.getExpr();
		Assert.assertNotNull(Expr_218_list);
		Assert.assertEquals(1, Expr_218_list.size());
		final InclusiveOrExpression InclusiveOrExpression_219_Var = (InclusiveOrExpression)Expr_218_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_219_Var);
		final EList<? extends EObject> Expr_219_list = InclusiveOrExpression_219_Var.getExpr();
		Assert.assertNotNull(Expr_219_list);
		Assert.assertEquals(1, Expr_219_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_220_Var = (ExclusiveOrExpression)Expr_219_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_220_Var);
		final EList<? extends EObject> Expr_220_list = ExclusiveOrExpression_220_Var.getExpr();
		Assert.assertNotNull(Expr_220_list);
		Assert.assertEquals(1, Expr_220_list.size());
		final AndExpression AndExpression_221_Var = (AndExpression)Expr_220_list.get(0);
		Assert.assertNotNull(AndExpression_221_Var);
		final EList<? extends EObject> Expr_221_list = AndExpression_221_Var.getExpr();
		Assert.assertNotNull(Expr_221_list);
		Assert.assertEquals(1, Expr_221_list.size());
		final EqualityExpression EqualityExpression_222_Var = (EqualityExpression)Expr_221_list.get(0);
		Assert.assertNotNull(EqualityExpression_222_Var);
		final EList<? extends EObject> Expr_222_list = EqualityExpression_222_Var.getExpr();
		Assert.assertNotNull(Expr_222_list);
		Assert.assertEquals(1, Expr_222_list.size());
		final RelationalExpression RelationalExpression_223_Var = (RelationalExpression)Expr_222_list.get(0);
		Assert.assertNotNull(RelationalExpression_223_Var);
		final EList<? extends EObject> Expr_223_list = RelationalExpression_223_Var.getExpr();
		Assert.assertNotNull(Expr_223_list);
		Assert.assertEquals(1, Expr_223_list.size());
		final ShiftExpression ShiftExpression_224_Var = (ShiftExpression)Expr_223_list.get(0);
		Assert.assertNotNull(ShiftExpression_224_Var);
		final EList<? extends EObject> Expr_224_list = ShiftExpression_224_Var.getExpr();
		Assert.assertNotNull(Expr_224_list);
		Assert.assertEquals(1, Expr_224_list.size());
		final AdditiveExpression AdditiveExpression_225_Var = (AdditiveExpression)Expr_224_list.get(0);
		Assert.assertNotNull(AdditiveExpression_225_Var);
		final EList<? extends EObject> Expr_225_list = AdditiveExpression_225_Var.getExpr();
		Assert.assertNotNull(Expr_225_list);
		Assert.assertEquals(1, Expr_225_list.size());
		final MultiplicativeExpression MultiplicativeExpression_226_Var = (MultiplicativeExpression)Expr_225_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_226_Var);
		final EList<? extends EObject> Expr_226_list = MultiplicativeExpression_226_Var.getExpr();
		Assert.assertNotNull(Expr_226_list);
		Assert.assertEquals(1, Expr_226_list.size());
		final CastExpression CastExpression_227_Var = (CastExpression)Expr_226_list.get(0);
		Assert.assertNotNull(CastExpression_227_Var);
		final UnaryExpression UnaryExpression_228_Var = (UnaryExpression)CastExpression_227_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_228_Var);
		final PostfixExpression PostfixExpression_229_Var = (PostfixExpression)UnaryExpression_228_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_229_Var);
		final EList<? extends EObject> Expr_229_list = PostfixExpression_229_Var.getExpr();
		Assert.assertNotNull(Expr_229_list);
		Assert.assertEquals(1, Expr_229_list.size());
		final PrimaryExpression PrimaryExpression_230_Var = (PrimaryExpression)Expr_229_list.get(0);
		Assert.assertNotNull(PrimaryExpression_230_Var);
		Assert.assertEquals("number", PrimaryExpression_230_Var.getId());
		Assert.assertEquals("[.]", PostfixExpression_229_Var.getDot().toString());
		Assert.assertEquals("[numChar]", PostfixExpression_229_Var.getId().toString());
		Assert.assertEquals(";", ExpressionStatement_179_Var.getSemi());
		final Statement Statement_231_Var = (Statement)Statement_17_list.get(4);
		Assert.assertNotNull(Statement_231_Var);
		final ExpressionStatement ExpressionStatement_232_Var = (ExpressionStatement)Statement_231_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_232_Var);
		final Expression Expression_233_Var = (Expression)ExpressionStatement_232_Var.getExpression();
		Assert.assertNotNull(Expression_233_Var);
		final EList<? extends EObject> ExprExpr_233_list = Expression_233_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_233_list);
		Assert.assertEquals(1, ExprExpr_233_list.size());
		final AssignmentExpression AssignmentExpression_234_Var = (AssignmentExpression)ExprExpr_233_list.get(0);
		Assert.assertNotNull(AssignmentExpression_234_Var);
		final ConditionalExpression ConditionalExpression_235_Var = (ConditionalExpression)AssignmentExpression_234_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_235_Var);
		final LogicalOrExpression LogicalOrExpression_236_Var = (LogicalOrExpression)ConditionalExpression_235_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_236_Var);
		final EList<? extends EObject> Expr_236_list = LogicalOrExpression_236_Var.getExpr();
		Assert.assertNotNull(Expr_236_list);
		Assert.assertEquals(1, Expr_236_list.size());
		final LogicalAndExpression LogicalAndExpression_237_Var = (LogicalAndExpression)Expr_236_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_237_Var);
		final EList<? extends EObject> Expr_237_list = LogicalAndExpression_237_Var.getExpr();
		Assert.assertNotNull(Expr_237_list);
		Assert.assertEquals(1, Expr_237_list.size());
		final InclusiveOrExpression InclusiveOrExpression_238_Var = (InclusiveOrExpression)Expr_237_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_238_Var);
		final EList<? extends EObject> Expr_238_list = InclusiveOrExpression_238_Var.getExpr();
		Assert.assertNotNull(Expr_238_list);
		Assert.assertEquals(1, Expr_238_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_239_Var = (ExclusiveOrExpression)Expr_238_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_239_Var);
		final EList<? extends EObject> Expr_239_list = ExclusiveOrExpression_239_Var.getExpr();
		Assert.assertNotNull(Expr_239_list);
		Assert.assertEquals(1, Expr_239_list.size());
		final AndExpression AndExpression_240_Var = (AndExpression)Expr_239_list.get(0);
		Assert.assertNotNull(AndExpression_240_Var);
		final EList<? extends EObject> Expr_240_list = AndExpression_240_Var.getExpr();
		Assert.assertNotNull(Expr_240_list);
		Assert.assertEquals(1, Expr_240_list.size());
		final EqualityExpression EqualityExpression_241_Var = (EqualityExpression)Expr_240_list.get(0);
		Assert.assertNotNull(EqualityExpression_241_Var);
		final EList<? extends EObject> Expr_241_list = EqualityExpression_241_Var.getExpr();
		Assert.assertNotNull(Expr_241_list);
		Assert.assertEquals(1, Expr_241_list.size());
		final RelationalExpression RelationalExpression_242_Var = (RelationalExpression)Expr_241_list.get(0);
		Assert.assertNotNull(RelationalExpression_242_Var);
		final EList<? extends EObject> Expr_242_list = RelationalExpression_242_Var.getExpr();
		Assert.assertNotNull(Expr_242_list);
		Assert.assertEquals(1, Expr_242_list.size());
		final ShiftExpression ShiftExpression_243_Var = (ShiftExpression)Expr_242_list.get(0);
		Assert.assertNotNull(ShiftExpression_243_Var);
		final EList<? extends EObject> Expr_243_list = ShiftExpression_243_Var.getExpr();
		Assert.assertNotNull(Expr_243_list);
		Assert.assertEquals(1, Expr_243_list.size());
		final AdditiveExpression AdditiveExpression_244_Var = (AdditiveExpression)Expr_243_list.get(0);
		Assert.assertNotNull(AdditiveExpression_244_Var);
		final EList<? extends EObject> Expr_244_list = AdditiveExpression_244_Var.getExpr();
		Assert.assertNotNull(Expr_244_list);
		Assert.assertEquals(1, Expr_244_list.size());
		final MultiplicativeExpression MultiplicativeExpression_245_Var = (MultiplicativeExpression)Expr_244_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_245_Var);
		final EList<? extends EObject> Expr_245_list = MultiplicativeExpression_245_Var.getExpr();
		Assert.assertNotNull(Expr_245_list);
		Assert.assertEquals(1, Expr_245_list.size());
		final CastExpression CastExpression_246_Var = (CastExpression)Expr_245_list.get(0);
		Assert.assertNotNull(CastExpression_246_Var);
		final UnaryExpression UnaryExpression_247_Var = (UnaryExpression)CastExpression_246_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_247_Var);
		final PostfixExpression PostfixExpression_248_Var = (PostfixExpression)UnaryExpression_247_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_248_Var);
		final EList<? extends EObject> Expr_248_list = PostfixExpression_248_Var.getExpr();
		Assert.assertNotNull(Expr_248_list);
		Assert.assertEquals(1, Expr_248_list.size());
		final PrimaryExpression PrimaryExpression_249_Var = (PrimaryExpression)Expr_248_list.get(0);
		Assert.assertNotNull(PrimaryExpression_249_Var);
		Assert.assertEquals("printf", PrimaryExpression_249_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_249_list = PostfixExpression_248_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_249_list);
		Assert.assertEquals(1, ArgumentExpressionList_249_list.size());
		final ArgumentExpressionList ArgumentExpressionList_250_Var = (ArgumentExpressionList)ArgumentExpressionList_249_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_250_Var);
		final EList<? extends EObject> Expr_250_list = ArgumentExpressionList_250_Var.getExpr();
		Assert.assertNotNull(Expr_250_list);
		Assert.assertEquals(2, Expr_250_list.size());
		final AssignmentExpression AssignmentExpression_251_Var = (AssignmentExpression)Expr_250_list.get(0);
		Assert.assertNotNull(AssignmentExpression_251_Var);
		final ConditionalExpression ConditionalExpression_252_Var = (ConditionalExpression)AssignmentExpression_251_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_252_Var);
		final LogicalOrExpression LogicalOrExpression_253_Var = (LogicalOrExpression)ConditionalExpression_252_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_253_Var);
		final EList<? extends EObject> Expr_253_list = LogicalOrExpression_253_Var.getExpr();
		Assert.assertNotNull(Expr_253_list);
		Assert.assertEquals(1, Expr_253_list.size());
		final LogicalAndExpression LogicalAndExpression_254_Var = (LogicalAndExpression)Expr_253_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_254_Var);
		final EList<? extends EObject> Expr_254_list = LogicalAndExpression_254_Var.getExpr();
		Assert.assertNotNull(Expr_254_list);
		Assert.assertEquals(1, Expr_254_list.size());
		final InclusiveOrExpression InclusiveOrExpression_255_Var = (InclusiveOrExpression)Expr_254_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_255_Var);
		final EList<? extends EObject> Expr_255_list = InclusiveOrExpression_255_Var.getExpr();
		Assert.assertNotNull(Expr_255_list);
		Assert.assertEquals(1, Expr_255_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_256_Var = (ExclusiveOrExpression)Expr_255_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_256_Var);
		final EList<? extends EObject> Expr_256_list = ExclusiveOrExpression_256_Var.getExpr();
		Assert.assertNotNull(Expr_256_list);
		Assert.assertEquals(1, Expr_256_list.size());
		final AndExpression AndExpression_257_Var = (AndExpression)Expr_256_list.get(0);
		Assert.assertNotNull(AndExpression_257_Var);
		final EList<? extends EObject> Expr_257_list = AndExpression_257_Var.getExpr();
		Assert.assertNotNull(Expr_257_list);
		Assert.assertEquals(1, Expr_257_list.size());
		final EqualityExpression EqualityExpression_258_Var = (EqualityExpression)Expr_257_list.get(0);
		Assert.assertNotNull(EqualityExpression_258_Var);
		final EList<? extends EObject> Expr_258_list = EqualityExpression_258_Var.getExpr();
		Assert.assertNotNull(Expr_258_list);
		Assert.assertEquals(1, Expr_258_list.size());
		final RelationalExpression RelationalExpression_259_Var = (RelationalExpression)Expr_258_list.get(0);
		Assert.assertNotNull(RelationalExpression_259_Var);
		final EList<? extends EObject> Expr_259_list = RelationalExpression_259_Var.getExpr();
		Assert.assertNotNull(Expr_259_list);
		Assert.assertEquals(1, Expr_259_list.size());
		final ShiftExpression ShiftExpression_260_Var = (ShiftExpression)Expr_259_list.get(0);
		Assert.assertNotNull(ShiftExpression_260_Var);
		final EList<? extends EObject> Expr_260_list = ShiftExpression_260_Var.getExpr();
		Assert.assertNotNull(Expr_260_list);
		Assert.assertEquals(1, Expr_260_list.size());
		final AdditiveExpression AdditiveExpression_261_Var = (AdditiveExpression)Expr_260_list.get(0);
		Assert.assertNotNull(AdditiveExpression_261_Var);
		final EList<? extends EObject> Expr_261_list = AdditiveExpression_261_Var.getExpr();
		Assert.assertNotNull(Expr_261_list);
		Assert.assertEquals(1, Expr_261_list.size());
		final MultiplicativeExpression MultiplicativeExpression_262_Var = (MultiplicativeExpression)Expr_261_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_262_Var);
		final EList<? extends EObject> Expr_262_list = MultiplicativeExpression_262_Var.getExpr();
		Assert.assertNotNull(Expr_262_list);
		Assert.assertEquals(1, Expr_262_list.size());
		final CastExpression CastExpression_263_Var = (CastExpression)Expr_262_list.get(0);
		Assert.assertNotNull(CastExpression_263_Var);
		final UnaryExpression UnaryExpression_264_Var = (UnaryExpression)CastExpression_263_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_264_Var);
		final PostfixExpression PostfixExpression_265_Var = (PostfixExpression)UnaryExpression_264_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_265_Var);
		final EList<? extends EObject> Expr_265_list = PostfixExpression_265_Var.getExpr();
		Assert.assertNotNull(Expr_265_list);
		Assert.assertEquals(1, Expr_265_list.size());
		final PrimaryExpression PrimaryExpression_266_Var = (PrimaryExpression)Expr_265_list.get(0);
		Assert.assertNotNull(PrimaryExpression_266_Var);
		final Constant Constant_267_Var = (Constant)PrimaryExpression_266_Var.getConst();
		Assert.assertNotNull(Constant_267_Var);
		Assert.assertEquals("\"number.numFloat=%f\\n\"", Constant_267_Var.getStr());
		final AssignmentExpression AssignmentExpression_268_Var = (AssignmentExpression)Expr_250_list.get(1);
		Assert.assertNotNull(AssignmentExpression_268_Var);
		final ConditionalExpression ConditionalExpression_269_Var = (ConditionalExpression)AssignmentExpression_268_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_269_Var);
		final LogicalOrExpression LogicalOrExpression_270_Var = (LogicalOrExpression)ConditionalExpression_269_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_270_Var);
		final EList<? extends EObject> Expr_270_list = LogicalOrExpression_270_Var.getExpr();
		Assert.assertNotNull(Expr_270_list);
		Assert.assertEquals(1, Expr_270_list.size());
		final LogicalAndExpression LogicalAndExpression_271_Var = (LogicalAndExpression)Expr_270_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_271_Var);
		final EList<? extends EObject> Expr_271_list = LogicalAndExpression_271_Var.getExpr();
		Assert.assertNotNull(Expr_271_list);
		Assert.assertEquals(1, Expr_271_list.size());
		final InclusiveOrExpression InclusiveOrExpression_272_Var = (InclusiveOrExpression)Expr_271_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_272_Var);
		final EList<? extends EObject> Expr_272_list = InclusiveOrExpression_272_Var.getExpr();
		Assert.assertNotNull(Expr_272_list);
		Assert.assertEquals(1, Expr_272_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_273_Var = (ExclusiveOrExpression)Expr_272_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_273_Var);
		final EList<? extends EObject> Expr_273_list = ExclusiveOrExpression_273_Var.getExpr();
		Assert.assertNotNull(Expr_273_list);
		Assert.assertEquals(1, Expr_273_list.size());
		final AndExpression AndExpression_274_Var = (AndExpression)Expr_273_list.get(0);
		Assert.assertNotNull(AndExpression_274_Var);
		final EList<? extends EObject> Expr_274_list = AndExpression_274_Var.getExpr();
		Assert.assertNotNull(Expr_274_list);
		Assert.assertEquals(1, Expr_274_list.size());
		final EqualityExpression EqualityExpression_275_Var = (EqualityExpression)Expr_274_list.get(0);
		Assert.assertNotNull(EqualityExpression_275_Var);
		final EList<? extends EObject> Expr_275_list = EqualityExpression_275_Var.getExpr();
		Assert.assertNotNull(Expr_275_list);
		Assert.assertEquals(1, Expr_275_list.size());
		final RelationalExpression RelationalExpression_276_Var = (RelationalExpression)Expr_275_list.get(0);
		Assert.assertNotNull(RelationalExpression_276_Var);
		final EList<? extends EObject> Expr_276_list = RelationalExpression_276_Var.getExpr();
		Assert.assertNotNull(Expr_276_list);
		Assert.assertEquals(1, Expr_276_list.size());
		final ShiftExpression ShiftExpression_277_Var = (ShiftExpression)Expr_276_list.get(0);
		Assert.assertNotNull(ShiftExpression_277_Var);
		final EList<? extends EObject> Expr_277_list = ShiftExpression_277_Var.getExpr();
		Assert.assertNotNull(Expr_277_list);
		Assert.assertEquals(1, Expr_277_list.size());
		final AdditiveExpression AdditiveExpression_278_Var = (AdditiveExpression)Expr_277_list.get(0);
		Assert.assertNotNull(AdditiveExpression_278_Var);
		final EList<? extends EObject> Expr_278_list = AdditiveExpression_278_Var.getExpr();
		Assert.assertNotNull(Expr_278_list);
		Assert.assertEquals(1, Expr_278_list.size());
		final MultiplicativeExpression MultiplicativeExpression_279_Var = (MultiplicativeExpression)Expr_278_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_279_Var);
		final EList<? extends EObject> Expr_279_list = MultiplicativeExpression_279_Var.getExpr();
		Assert.assertNotNull(Expr_279_list);
		Assert.assertEquals(1, Expr_279_list.size());
		final CastExpression CastExpression_280_Var = (CastExpression)Expr_279_list.get(0);
		Assert.assertNotNull(CastExpression_280_Var);
		final UnaryExpression UnaryExpression_281_Var = (UnaryExpression)CastExpression_280_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_281_Var);
		final PostfixExpression PostfixExpression_282_Var = (PostfixExpression)UnaryExpression_281_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_282_Var);
		final EList<? extends EObject> Expr_282_list = PostfixExpression_282_Var.getExpr();
		Assert.assertNotNull(Expr_282_list);
		Assert.assertEquals(1, Expr_282_list.size());
		final PrimaryExpression PrimaryExpression_283_Var = (PrimaryExpression)Expr_282_list.get(0);
		Assert.assertNotNull(PrimaryExpression_283_Var);
		Assert.assertEquals("number", PrimaryExpression_283_Var.getId());
		Assert.assertEquals("[.]", PostfixExpression_282_Var.getDot().toString());
		Assert.assertEquals("[numFloat]", PostfixExpression_282_Var.getId().toString());
		Assert.assertEquals(";", ExpressionStatement_232_Var.getSemi());
		final Statement Statement_284_Var = (Statement)Statement_17_list.get(5);
		Assert.assertNotNull(Statement_284_Var);
		final ExpressionStatement ExpressionStatement_285_Var = (ExpressionStatement)Statement_284_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_285_Var);
		final Expression Expression_286_Var = (Expression)ExpressionStatement_285_Var.getExpression();
		Assert.assertNotNull(Expression_286_Var);
		final EList<? extends EObject> ExprExpr_286_list = Expression_286_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_286_list);
		Assert.assertEquals(1, ExprExpr_286_list.size());
		final AssignmentExpression AssignmentExpression_287_Var = (AssignmentExpression)ExprExpr_286_list.get(0);
		Assert.assertNotNull(AssignmentExpression_287_Var);
		final ConditionalExpression ConditionalExpression_288_Var = (ConditionalExpression)AssignmentExpression_287_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_288_Var);
		final LogicalOrExpression LogicalOrExpression_289_Var = (LogicalOrExpression)ConditionalExpression_288_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_289_Var);
		final EList<? extends EObject> Expr_289_list = LogicalOrExpression_289_Var.getExpr();
		Assert.assertNotNull(Expr_289_list);
		Assert.assertEquals(1, Expr_289_list.size());
		final LogicalAndExpression LogicalAndExpression_290_Var = (LogicalAndExpression)Expr_289_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_290_Var);
		final EList<? extends EObject> Expr_290_list = LogicalAndExpression_290_Var.getExpr();
		Assert.assertNotNull(Expr_290_list);
		Assert.assertEquals(1, Expr_290_list.size());
		final InclusiveOrExpression InclusiveOrExpression_291_Var = (InclusiveOrExpression)Expr_290_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_291_Var);
		final EList<? extends EObject> Expr_291_list = InclusiveOrExpression_291_Var.getExpr();
		Assert.assertNotNull(Expr_291_list);
		Assert.assertEquals(1, Expr_291_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_292_Var = (ExclusiveOrExpression)Expr_291_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_292_Var);
		final EList<? extends EObject> Expr_292_list = ExclusiveOrExpression_292_Var.getExpr();
		Assert.assertNotNull(Expr_292_list);
		Assert.assertEquals(1, Expr_292_list.size());
		final AndExpression AndExpression_293_Var = (AndExpression)Expr_292_list.get(0);
		Assert.assertNotNull(AndExpression_293_Var);
		final EList<? extends EObject> Expr_293_list = AndExpression_293_Var.getExpr();
		Assert.assertNotNull(Expr_293_list);
		Assert.assertEquals(1, Expr_293_list.size());
		final EqualityExpression EqualityExpression_294_Var = (EqualityExpression)Expr_293_list.get(0);
		Assert.assertNotNull(EqualityExpression_294_Var);
		final EList<? extends EObject> Expr_294_list = EqualityExpression_294_Var.getExpr();
		Assert.assertNotNull(Expr_294_list);
		Assert.assertEquals(1, Expr_294_list.size());
		final RelationalExpression RelationalExpression_295_Var = (RelationalExpression)Expr_294_list.get(0);
		Assert.assertNotNull(RelationalExpression_295_Var);
		final EList<? extends EObject> Expr_295_list = RelationalExpression_295_Var.getExpr();
		Assert.assertNotNull(Expr_295_list);
		Assert.assertEquals(1, Expr_295_list.size());
		final ShiftExpression ShiftExpression_296_Var = (ShiftExpression)Expr_295_list.get(0);
		Assert.assertNotNull(ShiftExpression_296_Var);
		final EList<? extends EObject> Expr_296_list = ShiftExpression_296_Var.getExpr();
		Assert.assertNotNull(Expr_296_list);
		Assert.assertEquals(1, Expr_296_list.size());
		final AdditiveExpression AdditiveExpression_297_Var = (AdditiveExpression)Expr_296_list.get(0);
		Assert.assertNotNull(AdditiveExpression_297_Var);
		final EList<? extends EObject> Expr_297_list = AdditiveExpression_297_Var.getExpr();
		Assert.assertNotNull(Expr_297_list);
		Assert.assertEquals(1, Expr_297_list.size());
		final MultiplicativeExpression MultiplicativeExpression_298_Var = (MultiplicativeExpression)Expr_297_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_298_Var);
		final EList<? extends EObject> Expr_298_list = MultiplicativeExpression_298_Var.getExpr();
		Assert.assertNotNull(Expr_298_list);
		Assert.assertEquals(1, Expr_298_list.size());
		final CastExpression CastExpression_299_Var = (CastExpression)Expr_298_list.get(0);
		Assert.assertNotNull(CastExpression_299_Var);
		final UnaryExpression UnaryExpression_300_Var = (UnaryExpression)CastExpression_299_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_300_Var);
		final PostfixExpression PostfixExpression_301_Var = (PostfixExpression)UnaryExpression_300_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_301_Var);
		final EList<? extends EObject> Expr_301_list = PostfixExpression_301_Var.getExpr();
		Assert.assertNotNull(Expr_301_list);
		Assert.assertEquals(1, Expr_301_list.size());
		final PrimaryExpression PrimaryExpression_302_Var = (PrimaryExpression)Expr_301_list.get(0);
		Assert.assertNotNull(PrimaryExpression_302_Var);
		Assert.assertEquals("printf", PrimaryExpression_302_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_302_list = PostfixExpression_301_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_302_list);
		Assert.assertEquals(1, ArgumentExpressionList_302_list.size());
		final ArgumentExpressionList ArgumentExpressionList_303_Var = (ArgumentExpressionList)ArgumentExpressionList_302_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_303_Var);
		final EList<? extends EObject> Expr_303_list = ArgumentExpressionList_303_Var.getExpr();
		Assert.assertNotNull(Expr_303_list);
		Assert.assertEquals(2, Expr_303_list.size());
		final AssignmentExpression AssignmentExpression_304_Var = (AssignmentExpression)Expr_303_list.get(0);
		Assert.assertNotNull(AssignmentExpression_304_Var);
		final ConditionalExpression ConditionalExpression_305_Var = (ConditionalExpression)AssignmentExpression_304_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_305_Var);
		final LogicalOrExpression LogicalOrExpression_306_Var = (LogicalOrExpression)ConditionalExpression_305_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_306_Var);
		final EList<? extends EObject> Expr_306_list = LogicalOrExpression_306_Var.getExpr();
		Assert.assertNotNull(Expr_306_list);
		Assert.assertEquals(1, Expr_306_list.size());
		final LogicalAndExpression LogicalAndExpression_307_Var = (LogicalAndExpression)Expr_306_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_307_Var);
		final EList<? extends EObject> Expr_307_list = LogicalAndExpression_307_Var.getExpr();
		Assert.assertNotNull(Expr_307_list);
		Assert.assertEquals(1, Expr_307_list.size());
		final InclusiveOrExpression InclusiveOrExpression_308_Var = (InclusiveOrExpression)Expr_307_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_308_Var);
		final EList<? extends EObject> Expr_308_list = InclusiveOrExpression_308_Var.getExpr();
		Assert.assertNotNull(Expr_308_list);
		Assert.assertEquals(1, Expr_308_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_309_Var = (ExclusiveOrExpression)Expr_308_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_309_Var);
		final EList<? extends EObject> Expr_309_list = ExclusiveOrExpression_309_Var.getExpr();
		Assert.assertNotNull(Expr_309_list);
		Assert.assertEquals(1, Expr_309_list.size());
		final AndExpression AndExpression_310_Var = (AndExpression)Expr_309_list.get(0);
		Assert.assertNotNull(AndExpression_310_Var);
		final EList<? extends EObject> Expr_310_list = AndExpression_310_Var.getExpr();
		Assert.assertNotNull(Expr_310_list);
		Assert.assertEquals(1, Expr_310_list.size());
		final EqualityExpression EqualityExpression_311_Var = (EqualityExpression)Expr_310_list.get(0);
		Assert.assertNotNull(EqualityExpression_311_Var);
		final EList<? extends EObject> Expr_311_list = EqualityExpression_311_Var.getExpr();
		Assert.assertNotNull(Expr_311_list);
		Assert.assertEquals(1, Expr_311_list.size());
		final RelationalExpression RelationalExpression_312_Var = (RelationalExpression)Expr_311_list.get(0);
		Assert.assertNotNull(RelationalExpression_312_Var);
		final EList<? extends EObject> Expr_312_list = RelationalExpression_312_Var.getExpr();
		Assert.assertNotNull(Expr_312_list);
		Assert.assertEquals(1, Expr_312_list.size());
		final ShiftExpression ShiftExpression_313_Var = (ShiftExpression)Expr_312_list.get(0);
		Assert.assertNotNull(ShiftExpression_313_Var);
		final EList<? extends EObject> Expr_313_list = ShiftExpression_313_Var.getExpr();
		Assert.assertNotNull(Expr_313_list);
		Assert.assertEquals(1, Expr_313_list.size());
		final AdditiveExpression AdditiveExpression_314_Var = (AdditiveExpression)Expr_313_list.get(0);
		Assert.assertNotNull(AdditiveExpression_314_Var);
		final EList<? extends EObject> Expr_314_list = AdditiveExpression_314_Var.getExpr();
		Assert.assertNotNull(Expr_314_list);
		Assert.assertEquals(1, Expr_314_list.size());
		final MultiplicativeExpression MultiplicativeExpression_315_Var = (MultiplicativeExpression)Expr_314_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_315_Var);
		final EList<? extends EObject> Expr_315_list = MultiplicativeExpression_315_Var.getExpr();
		Assert.assertNotNull(Expr_315_list);
		Assert.assertEquals(1, Expr_315_list.size());
		final CastExpression CastExpression_316_Var = (CastExpression)Expr_315_list.get(0);
		Assert.assertNotNull(CastExpression_316_Var);
		final UnaryExpression UnaryExpression_317_Var = (UnaryExpression)CastExpression_316_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_317_Var);
		final PostfixExpression PostfixExpression_318_Var = (PostfixExpression)UnaryExpression_317_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_318_Var);
		final EList<? extends EObject> Expr_318_list = PostfixExpression_318_Var.getExpr();
		Assert.assertNotNull(Expr_318_list);
		Assert.assertEquals(1, Expr_318_list.size());
		final PrimaryExpression PrimaryExpression_319_Var = (PrimaryExpression)Expr_318_list.get(0);
		Assert.assertNotNull(PrimaryExpression_319_Var);
		final Constant Constant_320_Var = (Constant)PrimaryExpression_319_Var.getConst();
		Assert.assertNotNull(Constant_320_Var);
		Assert.assertEquals("\"number.numChar(as decimal)=%d\\n\"", Constant_320_Var.getStr());
		final AssignmentExpression AssignmentExpression_321_Var = (AssignmentExpression)Expr_303_list.get(1);
		Assert.assertNotNull(AssignmentExpression_321_Var);
		final ConditionalExpression ConditionalExpression_322_Var = (ConditionalExpression)AssignmentExpression_321_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_322_Var);
		final LogicalOrExpression LogicalOrExpression_323_Var = (LogicalOrExpression)ConditionalExpression_322_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_323_Var);
		final EList<? extends EObject> Expr_323_list = LogicalOrExpression_323_Var.getExpr();
		Assert.assertNotNull(Expr_323_list);
		Assert.assertEquals(1, Expr_323_list.size());
		final LogicalAndExpression LogicalAndExpression_324_Var = (LogicalAndExpression)Expr_323_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_324_Var);
		final EList<? extends EObject> Expr_324_list = LogicalAndExpression_324_Var.getExpr();
		Assert.assertNotNull(Expr_324_list);
		Assert.assertEquals(1, Expr_324_list.size());
		final InclusiveOrExpression InclusiveOrExpression_325_Var = (InclusiveOrExpression)Expr_324_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_325_Var);
		final EList<? extends EObject> Expr_325_list = InclusiveOrExpression_325_Var.getExpr();
		Assert.assertNotNull(Expr_325_list);
		Assert.assertEquals(1, Expr_325_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_326_Var = (ExclusiveOrExpression)Expr_325_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_326_Var);
		final EList<? extends EObject> Expr_326_list = ExclusiveOrExpression_326_Var.getExpr();
		Assert.assertNotNull(Expr_326_list);
		Assert.assertEquals(1, Expr_326_list.size());
		final AndExpression AndExpression_327_Var = (AndExpression)Expr_326_list.get(0);
		Assert.assertNotNull(AndExpression_327_Var);
		final EList<? extends EObject> Expr_327_list = AndExpression_327_Var.getExpr();
		Assert.assertNotNull(Expr_327_list);
		Assert.assertEquals(1, Expr_327_list.size());
		final EqualityExpression EqualityExpression_328_Var = (EqualityExpression)Expr_327_list.get(0);
		Assert.assertNotNull(EqualityExpression_328_Var);
		final EList<? extends EObject> Expr_328_list = EqualityExpression_328_Var.getExpr();
		Assert.assertNotNull(Expr_328_list);
		Assert.assertEquals(1, Expr_328_list.size());
		final RelationalExpression RelationalExpression_329_Var = (RelationalExpression)Expr_328_list.get(0);
		Assert.assertNotNull(RelationalExpression_329_Var);
		final EList<? extends EObject> Expr_329_list = RelationalExpression_329_Var.getExpr();
		Assert.assertNotNull(Expr_329_list);
		Assert.assertEquals(1, Expr_329_list.size());
		final ShiftExpression ShiftExpression_330_Var = (ShiftExpression)Expr_329_list.get(0);
		Assert.assertNotNull(ShiftExpression_330_Var);
		final EList<? extends EObject> Expr_330_list = ShiftExpression_330_Var.getExpr();
		Assert.assertNotNull(Expr_330_list);
		Assert.assertEquals(1, Expr_330_list.size());
		final AdditiveExpression AdditiveExpression_331_Var = (AdditiveExpression)Expr_330_list.get(0);
		Assert.assertNotNull(AdditiveExpression_331_Var);
		final EList<? extends EObject> Expr_331_list = AdditiveExpression_331_Var.getExpr();
		Assert.assertNotNull(Expr_331_list);
		Assert.assertEquals(1, Expr_331_list.size());
		final MultiplicativeExpression MultiplicativeExpression_332_Var = (MultiplicativeExpression)Expr_331_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_332_Var);
		final EList<? extends EObject> Expr_332_list = MultiplicativeExpression_332_Var.getExpr();
		Assert.assertNotNull(Expr_332_list);
		Assert.assertEquals(1, Expr_332_list.size());
		final CastExpression CastExpression_333_Var = (CastExpression)Expr_332_list.get(0);
		Assert.assertNotNull(CastExpression_333_Var);
		final UnaryExpression UnaryExpression_334_Var = (UnaryExpression)CastExpression_333_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_334_Var);
		final PostfixExpression PostfixExpression_335_Var = (PostfixExpression)UnaryExpression_334_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_335_Var);
		final EList<? extends EObject> Expr_335_list = PostfixExpression_335_Var.getExpr();
		Assert.assertNotNull(Expr_335_list);
		Assert.assertEquals(1, Expr_335_list.size());
		final PrimaryExpression PrimaryExpression_336_Var = (PrimaryExpression)Expr_335_list.get(0);
		Assert.assertNotNull(PrimaryExpression_336_Var);
		Assert.assertEquals("number", PrimaryExpression_336_Var.getId());
		Assert.assertEquals("[.]", PostfixExpression_335_Var.getDot().toString());
		Assert.assertEquals("[numChar]", PostfixExpression_335_Var.getId().toString());
		Assert.assertEquals(";", ExpressionStatement_285_Var.getSemi());
		final Statement Statement_337_Var = (Statement)Statement_17_list.get(6);
		Assert.assertNotNull(Statement_337_Var);
		final ExpressionStatement ExpressionStatement_338_Var = (ExpressionStatement)Statement_337_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_338_Var);
		final Expression Expression_339_Var = (Expression)ExpressionStatement_338_Var.getExpression();
		Assert.assertNotNull(Expression_339_Var);
		final EList<? extends EObject> ExprExpr_339_list = Expression_339_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_339_list);
		Assert.assertEquals(1, ExprExpr_339_list.size());
		final AssignmentExpression AssignmentExpression_340_Var = (AssignmentExpression)ExprExpr_339_list.get(0);
		Assert.assertNotNull(AssignmentExpression_340_Var);
		final ConditionalExpression ConditionalExpression_341_Var = (ConditionalExpression)AssignmentExpression_340_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_341_Var);
		final LogicalOrExpression LogicalOrExpression_342_Var = (LogicalOrExpression)ConditionalExpression_341_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_342_Var);
		final EList<? extends EObject> Expr_342_list = LogicalOrExpression_342_Var.getExpr();
		Assert.assertNotNull(Expr_342_list);
		Assert.assertEquals(1, Expr_342_list.size());
		final LogicalAndExpression LogicalAndExpression_343_Var = (LogicalAndExpression)Expr_342_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_343_Var);
		final EList<? extends EObject> Expr_343_list = LogicalAndExpression_343_Var.getExpr();
		Assert.assertNotNull(Expr_343_list);
		Assert.assertEquals(1, Expr_343_list.size());
		final InclusiveOrExpression InclusiveOrExpression_344_Var = (InclusiveOrExpression)Expr_343_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_344_Var);
		final EList<? extends EObject> Expr_344_list = InclusiveOrExpression_344_Var.getExpr();
		Assert.assertNotNull(Expr_344_list);
		Assert.assertEquals(1, Expr_344_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_345_Var = (ExclusiveOrExpression)Expr_344_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_345_Var);
		final EList<? extends EObject> Expr_345_list = ExclusiveOrExpression_345_Var.getExpr();
		Assert.assertNotNull(Expr_345_list);
		Assert.assertEquals(1, Expr_345_list.size());
		final AndExpression AndExpression_346_Var = (AndExpression)Expr_345_list.get(0);
		Assert.assertNotNull(AndExpression_346_Var);
		final EList<? extends EObject> Expr_346_list = AndExpression_346_Var.getExpr();
		Assert.assertNotNull(Expr_346_list);
		Assert.assertEquals(1, Expr_346_list.size());
		final EqualityExpression EqualityExpression_347_Var = (EqualityExpression)Expr_346_list.get(0);
		Assert.assertNotNull(EqualityExpression_347_Var);
		final EList<? extends EObject> Expr_347_list = EqualityExpression_347_Var.getExpr();
		Assert.assertNotNull(Expr_347_list);
		Assert.assertEquals(1, Expr_347_list.size());
		final RelationalExpression RelationalExpression_348_Var = (RelationalExpression)Expr_347_list.get(0);
		Assert.assertNotNull(RelationalExpression_348_Var);
		final EList<? extends EObject> Expr_348_list = RelationalExpression_348_Var.getExpr();
		Assert.assertNotNull(Expr_348_list);
		Assert.assertEquals(1, Expr_348_list.size());
		final ShiftExpression ShiftExpression_349_Var = (ShiftExpression)Expr_348_list.get(0);
		Assert.assertNotNull(ShiftExpression_349_Var);
		final EList<? extends EObject> Expr_349_list = ShiftExpression_349_Var.getExpr();
		Assert.assertNotNull(Expr_349_list);
		Assert.assertEquals(1, Expr_349_list.size());
		final AdditiveExpression AdditiveExpression_350_Var = (AdditiveExpression)Expr_349_list.get(0);
		Assert.assertNotNull(AdditiveExpression_350_Var);
		final EList<? extends EObject> Expr_350_list = AdditiveExpression_350_Var.getExpr();
		Assert.assertNotNull(Expr_350_list);
		Assert.assertEquals(1, Expr_350_list.size());
		final MultiplicativeExpression MultiplicativeExpression_351_Var = (MultiplicativeExpression)Expr_350_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_351_Var);
		final EList<? extends EObject> Expr_351_list = MultiplicativeExpression_351_Var.getExpr();
		Assert.assertNotNull(Expr_351_list);
		Assert.assertEquals(1, Expr_351_list.size());
		final CastExpression CastExpression_352_Var = (CastExpression)Expr_351_list.get(0);
		Assert.assertNotNull(CastExpression_352_Var);
		final UnaryExpression UnaryExpression_353_Var = (UnaryExpression)CastExpression_352_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_353_Var);
		final PostfixExpression PostfixExpression_354_Var = (PostfixExpression)UnaryExpression_353_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_354_Var);
		final EList<? extends EObject> Expr_354_list = PostfixExpression_354_Var.getExpr();
		Assert.assertNotNull(Expr_354_list);
		Assert.assertEquals(1, Expr_354_list.size());
		final PrimaryExpression PrimaryExpression_355_Var = (PrimaryExpression)Expr_354_list.get(0);
		Assert.assertNotNull(PrimaryExpression_355_Var);
		Assert.assertEquals("printf", PrimaryExpression_355_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_355_list = PostfixExpression_354_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_355_list);
		Assert.assertEquals(1, ArgumentExpressionList_355_list.size());
		final ArgumentExpressionList ArgumentExpressionList_356_Var = (ArgumentExpressionList)ArgumentExpressionList_355_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_356_Var);
		final EList<? extends EObject> Expr_356_list = ArgumentExpressionList_356_Var.getExpr();
		Assert.assertNotNull(Expr_356_list);
		Assert.assertEquals(2, Expr_356_list.size());
		final AssignmentExpression AssignmentExpression_357_Var = (AssignmentExpression)Expr_356_list.get(0);
		Assert.assertNotNull(AssignmentExpression_357_Var);
		final ConditionalExpression ConditionalExpression_358_Var = (ConditionalExpression)AssignmentExpression_357_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_358_Var);
		final LogicalOrExpression LogicalOrExpression_359_Var = (LogicalOrExpression)ConditionalExpression_358_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_359_Var);
		final EList<? extends EObject> Expr_359_list = LogicalOrExpression_359_Var.getExpr();
		Assert.assertNotNull(Expr_359_list);
		Assert.assertEquals(1, Expr_359_list.size());
		final LogicalAndExpression LogicalAndExpression_360_Var = (LogicalAndExpression)Expr_359_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_360_Var);
		final EList<? extends EObject> Expr_360_list = LogicalAndExpression_360_Var.getExpr();
		Assert.assertNotNull(Expr_360_list);
		Assert.assertEquals(1, Expr_360_list.size());
		final InclusiveOrExpression InclusiveOrExpression_361_Var = (InclusiveOrExpression)Expr_360_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_361_Var);
		final EList<? extends EObject> Expr_361_list = InclusiveOrExpression_361_Var.getExpr();
		Assert.assertNotNull(Expr_361_list);
		Assert.assertEquals(1, Expr_361_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_362_Var = (ExclusiveOrExpression)Expr_361_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_362_Var);
		final EList<? extends EObject> Expr_362_list = ExclusiveOrExpression_362_Var.getExpr();
		Assert.assertNotNull(Expr_362_list);
		Assert.assertEquals(1, Expr_362_list.size());
		final AndExpression AndExpression_363_Var = (AndExpression)Expr_362_list.get(0);
		Assert.assertNotNull(AndExpression_363_Var);
		final EList<? extends EObject> Expr_363_list = AndExpression_363_Var.getExpr();
		Assert.assertNotNull(Expr_363_list);
		Assert.assertEquals(1, Expr_363_list.size());
		final EqualityExpression EqualityExpression_364_Var = (EqualityExpression)Expr_363_list.get(0);
		Assert.assertNotNull(EqualityExpression_364_Var);
		final EList<? extends EObject> Expr_364_list = EqualityExpression_364_Var.getExpr();
		Assert.assertNotNull(Expr_364_list);
		Assert.assertEquals(1, Expr_364_list.size());
		final RelationalExpression RelationalExpression_365_Var = (RelationalExpression)Expr_364_list.get(0);
		Assert.assertNotNull(RelationalExpression_365_Var);
		final EList<? extends EObject> Expr_365_list = RelationalExpression_365_Var.getExpr();
		Assert.assertNotNull(Expr_365_list);
		Assert.assertEquals(1, Expr_365_list.size());
		final ShiftExpression ShiftExpression_366_Var = (ShiftExpression)Expr_365_list.get(0);
		Assert.assertNotNull(ShiftExpression_366_Var);
		final EList<? extends EObject> Expr_366_list = ShiftExpression_366_Var.getExpr();
		Assert.assertNotNull(Expr_366_list);
		Assert.assertEquals(1, Expr_366_list.size());
		final AdditiveExpression AdditiveExpression_367_Var = (AdditiveExpression)Expr_366_list.get(0);
		Assert.assertNotNull(AdditiveExpression_367_Var);
		final EList<? extends EObject> Expr_367_list = AdditiveExpression_367_Var.getExpr();
		Assert.assertNotNull(Expr_367_list);
		Assert.assertEquals(1, Expr_367_list.size());
		final MultiplicativeExpression MultiplicativeExpression_368_Var = (MultiplicativeExpression)Expr_367_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_368_Var);
		final EList<? extends EObject> Expr_368_list = MultiplicativeExpression_368_Var.getExpr();
		Assert.assertNotNull(Expr_368_list);
		Assert.assertEquals(1, Expr_368_list.size());
		final CastExpression CastExpression_369_Var = (CastExpression)Expr_368_list.get(0);
		Assert.assertNotNull(CastExpression_369_Var);
		final UnaryExpression UnaryExpression_370_Var = (UnaryExpression)CastExpression_369_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_370_Var);
		final PostfixExpression PostfixExpression_371_Var = (PostfixExpression)UnaryExpression_370_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_371_Var);
		final EList<? extends EObject> Expr_371_list = PostfixExpression_371_Var.getExpr();
		Assert.assertNotNull(Expr_371_list);
		Assert.assertEquals(1, Expr_371_list.size());
		final PrimaryExpression PrimaryExpression_372_Var = (PrimaryExpression)Expr_371_list.get(0);
		Assert.assertNotNull(PrimaryExpression_372_Var);
		final Constant Constant_373_Var = (Constant)PrimaryExpression_372_Var.getConst();
		Assert.assertNotNull(Constant_373_Var);
		Assert.assertEquals("\"number.numFloat=%f\\n\"", Constant_373_Var.getStr());
		final AssignmentExpression AssignmentExpression_374_Var = (AssignmentExpression)Expr_356_list.get(1);
		Assert.assertNotNull(AssignmentExpression_374_Var);
		final ConditionalExpression ConditionalExpression_375_Var = (ConditionalExpression)AssignmentExpression_374_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_375_Var);
		final LogicalOrExpression LogicalOrExpression_376_Var = (LogicalOrExpression)ConditionalExpression_375_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_376_Var);
		final EList<? extends EObject> Expr_376_list = LogicalOrExpression_376_Var.getExpr();
		Assert.assertNotNull(Expr_376_list);
		Assert.assertEquals(1, Expr_376_list.size());
		final LogicalAndExpression LogicalAndExpression_377_Var = (LogicalAndExpression)Expr_376_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_377_Var);
		final EList<? extends EObject> Expr_377_list = LogicalAndExpression_377_Var.getExpr();
		Assert.assertNotNull(Expr_377_list);
		Assert.assertEquals(1, Expr_377_list.size());
		final InclusiveOrExpression InclusiveOrExpression_378_Var = (InclusiveOrExpression)Expr_377_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_378_Var);
		final EList<? extends EObject> Expr_378_list = InclusiveOrExpression_378_Var.getExpr();
		Assert.assertNotNull(Expr_378_list);
		Assert.assertEquals(1, Expr_378_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_379_Var = (ExclusiveOrExpression)Expr_378_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_379_Var);
		final EList<? extends EObject> Expr_379_list = ExclusiveOrExpression_379_Var.getExpr();
		Assert.assertNotNull(Expr_379_list);
		Assert.assertEquals(1, Expr_379_list.size());
		final AndExpression AndExpression_380_Var = (AndExpression)Expr_379_list.get(0);
		Assert.assertNotNull(AndExpression_380_Var);
		final EList<? extends EObject> Expr_380_list = AndExpression_380_Var.getExpr();
		Assert.assertNotNull(Expr_380_list);
		Assert.assertEquals(1, Expr_380_list.size());
		final EqualityExpression EqualityExpression_381_Var = (EqualityExpression)Expr_380_list.get(0);
		Assert.assertNotNull(EqualityExpression_381_Var);
		final EList<? extends EObject> Expr_381_list = EqualityExpression_381_Var.getExpr();
		Assert.assertNotNull(Expr_381_list);
		Assert.assertEquals(1, Expr_381_list.size());
		final RelationalExpression RelationalExpression_382_Var = (RelationalExpression)Expr_381_list.get(0);
		Assert.assertNotNull(RelationalExpression_382_Var);
		final EList<? extends EObject> Expr_382_list = RelationalExpression_382_Var.getExpr();
		Assert.assertNotNull(Expr_382_list);
		Assert.assertEquals(1, Expr_382_list.size());
		final ShiftExpression ShiftExpression_383_Var = (ShiftExpression)Expr_382_list.get(0);
		Assert.assertNotNull(ShiftExpression_383_Var);
		final EList<? extends EObject> Expr_383_list = ShiftExpression_383_Var.getExpr();
		Assert.assertNotNull(Expr_383_list);
		Assert.assertEquals(1, Expr_383_list.size());
		final AdditiveExpression AdditiveExpression_384_Var = (AdditiveExpression)Expr_383_list.get(0);
		Assert.assertNotNull(AdditiveExpression_384_Var);
		final EList<? extends EObject> Expr_384_list = AdditiveExpression_384_Var.getExpr();
		Assert.assertNotNull(Expr_384_list);
		Assert.assertEquals(1, Expr_384_list.size());
		final MultiplicativeExpression MultiplicativeExpression_385_Var = (MultiplicativeExpression)Expr_384_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_385_Var);
		final EList<? extends EObject> Expr_385_list = MultiplicativeExpression_385_Var.getExpr();
		Assert.assertNotNull(Expr_385_list);
		Assert.assertEquals(1, Expr_385_list.size());
		final CastExpression CastExpression_386_Var = (CastExpression)Expr_385_list.get(0);
		Assert.assertNotNull(CastExpression_386_Var);
		final UnaryExpression UnaryExpression_387_Var = (UnaryExpression)CastExpression_386_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_387_Var);
		final PostfixExpression PostfixExpression_388_Var = (PostfixExpression)UnaryExpression_387_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_388_Var);
		final EList<? extends EObject> Expr_388_list = PostfixExpression_388_Var.getExpr();
		Assert.assertNotNull(Expr_388_list);
		Assert.assertEquals(1, Expr_388_list.size());
		final PrimaryExpression PrimaryExpression_389_Var = (PrimaryExpression)Expr_388_list.get(0);
		Assert.assertNotNull(PrimaryExpression_389_Var);
		Assert.assertEquals("number", PrimaryExpression_389_Var.getId());
		Assert.assertEquals("[.]", PostfixExpression_388_Var.getDot().toString());
		Assert.assertEquals("[numFloat]", PostfixExpression_388_Var.getId().toString());
		Assert.assertEquals(";", ExpressionStatement_338_Var.getSemi());
		final Statement Statement_390_Var = (Statement)Statement_17_list.get(7);
		Assert.assertNotNull(Statement_390_Var);
		final JumpStatement JumpStatement_391_Var = (JumpStatement)Statement_390_Var.getStmt();
		Assert.assertNotNull(JumpStatement_391_Var);
		final Expression Expression_392_Var = (Expression)JumpStatement_391_Var.getExpr();
		Assert.assertNotNull(Expression_392_Var);
		final EList<? extends EObject> ExprExpr_392_list = Expression_392_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_392_list);
		Assert.assertEquals(1, ExprExpr_392_list.size());
		final AssignmentExpression AssignmentExpression_393_Var = (AssignmentExpression)ExprExpr_392_list.get(0);
		Assert.assertNotNull(AssignmentExpression_393_Var);
		final ConditionalExpression ConditionalExpression_394_Var = (ConditionalExpression)AssignmentExpression_393_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_394_Var);
		final LogicalOrExpression LogicalOrExpression_395_Var = (LogicalOrExpression)ConditionalExpression_394_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_395_Var);
		final EList<? extends EObject> Expr_395_list = LogicalOrExpression_395_Var.getExpr();
		Assert.assertNotNull(Expr_395_list);
		Assert.assertEquals(1, Expr_395_list.size());
		final LogicalAndExpression LogicalAndExpression_396_Var = (LogicalAndExpression)Expr_395_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_396_Var);
		final EList<? extends EObject> Expr_396_list = LogicalAndExpression_396_Var.getExpr();
		Assert.assertNotNull(Expr_396_list);
		Assert.assertEquals(1, Expr_396_list.size());
		final InclusiveOrExpression InclusiveOrExpression_397_Var = (InclusiveOrExpression)Expr_396_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_397_Var);
		final EList<? extends EObject> Expr_397_list = InclusiveOrExpression_397_Var.getExpr();
		Assert.assertNotNull(Expr_397_list);
		Assert.assertEquals(1, Expr_397_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_398_Var = (ExclusiveOrExpression)Expr_397_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_398_Var);
		final EList<? extends EObject> Expr_398_list = ExclusiveOrExpression_398_Var.getExpr();
		Assert.assertNotNull(Expr_398_list);
		Assert.assertEquals(1, Expr_398_list.size());
		final AndExpression AndExpression_399_Var = (AndExpression)Expr_398_list.get(0);
		Assert.assertNotNull(AndExpression_399_Var);
		final EList<? extends EObject> Expr_399_list = AndExpression_399_Var.getExpr();
		Assert.assertNotNull(Expr_399_list);
		Assert.assertEquals(1, Expr_399_list.size());
		final EqualityExpression EqualityExpression_400_Var = (EqualityExpression)Expr_399_list.get(0);
		Assert.assertNotNull(EqualityExpression_400_Var);
		final EList<? extends EObject> Expr_400_list = EqualityExpression_400_Var.getExpr();
		Assert.assertNotNull(Expr_400_list);
		Assert.assertEquals(1, Expr_400_list.size());
		final RelationalExpression RelationalExpression_401_Var = (RelationalExpression)Expr_400_list.get(0);
		Assert.assertNotNull(RelationalExpression_401_Var);
		final EList<? extends EObject> Expr_401_list = RelationalExpression_401_Var.getExpr();
		Assert.assertNotNull(Expr_401_list);
		Assert.assertEquals(1, Expr_401_list.size());
		final ShiftExpression ShiftExpression_402_Var = (ShiftExpression)Expr_401_list.get(0);
		Assert.assertNotNull(ShiftExpression_402_Var);
		final EList<? extends EObject> Expr_402_list = ShiftExpression_402_Var.getExpr();
		Assert.assertNotNull(Expr_402_list);
		Assert.assertEquals(1, Expr_402_list.size());
		final AdditiveExpression AdditiveExpression_403_Var = (AdditiveExpression)Expr_402_list.get(0);
		Assert.assertNotNull(AdditiveExpression_403_Var);
		final EList<? extends EObject> Expr_403_list = AdditiveExpression_403_Var.getExpr();
		Assert.assertNotNull(Expr_403_list);
		Assert.assertEquals(1, Expr_403_list.size());
		final MultiplicativeExpression MultiplicativeExpression_404_Var = (MultiplicativeExpression)Expr_403_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_404_Var);
		final EList<? extends EObject> Expr_404_list = MultiplicativeExpression_404_Var.getExpr();
		Assert.assertNotNull(Expr_404_list);
		Assert.assertEquals(1, Expr_404_list.size());
		final CastExpression CastExpression_405_Var = (CastExpression)Expr_404_list.get(0);
		Assert.assertNotNull(CastExpression_405_Var);
		final UnaryExpression UnaryExpression_406_Var = (UnaryExpression)CastExpression_405_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_406_Var);
		final PostfixExpression PostfixExpression_407_Var = (PostfixExpression)UnaryExpression_406_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_407_Var);
		final EList<? extends EObject> Expr_407_list = PostfixExpression_407_Var.getExpr();
		Assert.assertNotNull(Expr_407_list);
		Assert.assertEquals(1, Expr_407_list.size());
		final PrimaryExpression PrimaryExpression_408_Var = (PrimaryExpression)Expr_407_list.get(0);
		Assert.assertNotNull(PrimaryExpression_408_Var);
		final Constant Constant_409_Var = (Constant)PrimaryExpression_408_Var.getConst();
		Assert.assertNotNull(Constant_409_Var);
		Assert.assertEquals("0", Constant_409_Var.getDec());
		Assert.assertEquals("return", JumpStatement_391_Var.getReturn());
		Assert.assertEquals(";", JumpStatement_391_Var.getSemi());
	}


}
