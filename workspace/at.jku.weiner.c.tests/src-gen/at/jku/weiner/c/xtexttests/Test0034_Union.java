package at.jku.weiner.c.xtexttests;

import com.google.inject.Inject;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import org.antlr.runtime.Token;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipse.xtext.junit4.util.ParseHelper;
import org.eclipse.xtext.junit4.validation.ValidationTestHelper;
import org.eclipse.xtext.junit4.XtextRunner;
import org.eclipse.xtext.parser.antlr.ITokenDefProvider;
import org.junit.Assert;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import at.jku.weiner.c.tests.CInjectorProvider;
import at.jku.weiner.c.parser.antlr.CParser;
import at.jku.weiner.c.parser.antlr.internal.InternalCLexer;
import at.jku.weiner.c.xtexttests.LexerAndParserTest;

import at.jku.weiner.c.c.Model;
import at.jku.weiner.c.c.TranslationUnit;
import at.jku.weiner.c.c.ExternalDeclaration;
import at.jku.weiner.c.c.Declaration;
import at.jku.weiner.c.c.DeclarationSpecifiers;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.StructOrUnionSpecifier;
import at.jku.weiner.c.c.StructOrUnion;
import at.jku.weiner.c.c.StructDeclarationList;
import at.jku.weiner.c.c.StructDeclaration;
import at.jku.weiner.c.c.SpecifierQualifierList;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.StructDeclaratorList;
import at.jku.weiner.c.c.StructDeclarator;
import at.jku.weiner.c.c.Declarator;
import at.jku.weiner.c.c.DirectDeclarator;
import at.jku.weiner.c.c.StructDeclaration;
import at.jku.weiner.c.c.SpecifierQualifierList;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.StructDeclaratorList;
import at.jku.weiner.c.c.StructDeclarator;
import at.jku.weiner.c.c.Declarator;
import at.jku.weiner.c.c.DirectDeclarator;
import at.jku.weiner.c.c.ExternalDeclaration;
import at.jku.weiner.c.c.Declaration;
import at.jku.weiner.c.c.DeclarationSpecifiers;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.StructOrUnionSpecifier;
import at.jku.weiner.c.c.StructOrUnion;
import at.jku.weiner.c.c.InitDeclaratorList;
import at.jku.weiner.c.c.InitDeclarator;
import at.jku.weiner.c.c.Declarator;
import at.jku.weiner.c.c.DirectDeclarator;
import at.jku.weiner.c.c.ExternalDeclaration;
import at.jku.weiner.c.c.FunctionDefHead;
import at.jku.weiner.c.c.DeclarationSpecifiers;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.Declarator;
import at.jku.weiner.c.c.DirectDeclarator;
import at.jku.weiner.c.c.DeclaratorSuffix;
import at.jku.weiner.c.c.DirectDeclaratorLastSuffix;
import at.jku.weiner.c.c.ParameterTypeList;
import at.jku.weiner.c.c.ParameterList;
import at.jku.weiner.c.c.ParameterDeclaration;
import at.jku.weiner.c.c.DeclarationSpecifiers;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.FunctionDefinition;
import at.jku.weiner.c.c.BodyStatement;
import at.jku.weiner.c.c.BlockList;
import at.jku.weiner.c.c.Declaration;
import at.jku.weiner.c.c.DeclarationSpecifiers;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.InitDeclaratorList;
import at.jku.weiner.c.c.InitDeclarator;
import at.jku.weiner.c.c.Declarator;
import at.jku.weiner.c.c.DirectDeclarator;
import at.jku.weiner.c.c.Initializer;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.TypeName;
import at.jku.weiner.c.c.SpecifierQualifierList;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.TypeName;
import at.jku.weiner.c.c.SpecifierQualifierList;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.AssignmentOperator;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.AssignmentOperator;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.JumpStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;

@SuppressWarnings("unused")
@RunWith(XtextRunner.class)
@InjectWith(CInjectorProvider.class)
public class Test0034_Union {

	@Inject
	private ParseHelper<Model> parseHelper;
	@Inject
	private ValidationTestHelper valHelper;
	@Inject
	private InternalCLexer lexer;
	@Inject
	private CParser parser;
	@Inject
	private ITokenDefProvider tokenDefProvider;
	
	private LexerAndParserTest testHelper;
	
	@Before
	public void initialize(){
		this.testHelper = new LexerAndParserTest(lexer, parser, tokenDefProvider);
	}
	
	private String getSourceText()
	throws Exception{
		final Path path = Paths.get("res/Test0034_Union.c");
		final String content = new String(Files.readAllBytes(path));
		return content;
	}
	
	@Test
	public void checkLexerTokens()
	throws Exception{
		final String text = this.getSourceText();
		//System.out.println(text);
		final String[] expected = new String[] {
			"RULE_LINEDIRECTIVE",
			"RULE_NEWLINE",
			"RULE_NEWLINE",
			"RULE_KW_UNION",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_WHITESPACE",
			"RULE_LEFTBRACE",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_KW_CHAR",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_KW_FLOAT",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_RIGHTBRACE",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_NEWLINE",
			"RULE_KW_UNION",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_NEWLINE",
			"RULE_KW_INT",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_KW_VOID",
			"RULE_RIGHTPAREN",
			"RULE_WHITESPACE",
			"RULE_LEFTBRACE",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_KW_UNSIGNED",
			"RULE_WHITESPACE",
			"RULE_KW_LONG",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_WHITESPACE",
			"RULE_ASSIGN",
			"RULE_WHITESPACE",
			"RULE_LEFTPAREN",
			"RULE_KW_UNSIGNED",
			"RULE_WHITESPACE",
			"RULE_KW_LONG",
			"RULE_RIGHTPAREN",
			"RULE_KW_SIZEOF",
			"RULE_LEFTPAREN",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_STRING_LITERAL",
			"RULE_COMMA",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_STRING_LITERAL",
			"RULE_COMMA",
			"RULE_WHITESPACE",
			"RULE_KW_SIZEOF",
			"RULE_LEFTPAREN",
			"RULE_ID",
			"RULE_DOT",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_STRING_LITERAL",
			"RULE_COMMA",
			"RULE_WHITESPACE",
			"RULE_KW_SIZEOF",
			"RULE_LEFTPAREN",
			"RULE_KW_FLOAT",
			"RULE_RIGHTPAREN",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_DOT",
			"RULE_ID",
			"RULE_WHITESPACE",
			"RULE_ASSIGN",
			"RULE_WHITESPACE",
			"RULE_DECIMAL_LITERAL",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_STRING_LITERAL",
			"RULE_COMMA",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_DOT",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_STRING_LITERAL",
			"RULE_COMMA",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_DOT",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_STRING_LITERAL",
			"RULE_COMMA",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_DOT",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_DOT",
			"RULE_ID",
			"RULE_WHITESPACE",
			"RULE_ASSIGN",
			"RULE_WHITESPACE",
			"RULE_FLOAT_LITERAL",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_STRING_LITERAL",
			"RULE_COMMA",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_DOT",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_STRING_LITERAL",
			"RULE_COMMA",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_DOT",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_KW_RETURN",
			"RULE_WHITESPACE",
			"RULE_DECIMAL_LITERAL",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_RIGHTBRACE",
			"RULE_NEWLINE",
		};
		//final List<Token> actual = testHelper.getTokens(text);
		//testHelper.outputTokens(text);
		testHelper.checkTokenisation(text, expected);
	}
	
	@Test
	public void checkParserResult()
	throws Exception{

		final String text = this.getSourceText();
		final Model Model_0_Var = this.parseHelper.parse(text);
	
		this.valHelper.assertNoErrors(Model_0_Var);
		Assert.assertNotNull(Model_0_Var);
		final EList<? extends EObject> Unit_0_list = Model_0_Var.getUnit();
		Assert.assertNotNull(Unit_0_list);
		Assert.assertEquals(1, Unit_0_list.size());
		final TranslationUnit TranslationUnit_1_Var = (TranslationUnit)Unit_0_list.get(0);
		Assert.assertNotNull(TranslationUnit_1_Var);
		final EList<? extends EObject> External_1_list = TranslationUnit_1_Var.getExternal();
		Assert.assertNotNull(External_1_list);
		Assert.assertEquals(3, External_1_list.size());
		final ExternalDeclaration ExternalDeclaration_2_Var = (ExternalDeclaration)External_1_list.get(0);
		Assert.assertNotNull(ExternalDeclaration_2_Var);
		final Declaration Declaration_3_Var = (Declaration)ExternalDeclaration_2_Var.getDeclaration();
		Assert.assertNotNull(Declaration_3_Var);
		final DeclarationSpecifiers DeclarationSpecifiers_4_Var = (DeclarationSpecifiers)Declaration_3_Var.getSpecifiers();
		Assert.assertNotNull(DeclarationSpecifiers_4_Var);
		final EList<? extends EObject> DeclarationSpecifier_4_list = DeclarationSpecifiers_4_Var.getDeclarationSpecifier();
		Assert.assertNotNull(DeclarationSpecifier_4_list);
		Assert.assertEquals(1, DeclarationSpecifier_4_list.size());
		final TypeSpecifier TypeSpecifier_5_Var = (TypeSpecifier)DeclarationSpecifier_4_list.get(0);
		Assert.assertNotNull(TypeSpecifier_5_Var);
		final StructOrUnionSpecifier StructOrUnionSpecifier_6_Var = (StructOrUnionSpecifier)TypeSpecifier_5_Var.getSpecifier();
		Assert.assertNotNull(StructOrUnionSpecifier_6_Var);
		final StructOrUnion StructOrUnion_7_Var = (StructOrUnion)StructOrUnionSpecifier_6_Var.getType();
		Assert.assertNotNull(StructOrUnion_7_Var);
		Assert.assertEquals("union", StructOrUnion_7_Var.getName());
		Assert.assertEquals("num", StructOrUnionSpecifier_6_Var.getId());
		final StructDeclarationList StructDeclarationList_8_Var = (StructDeclarationList)StructOrUnionSpecifier_6_Var.getStructDeclList();
		Assert.assertNotNull(StructDeclarationList_8_Var);
		final EList<? extends EObject> StructDeclaration_8_list = StructDeclarationList_8_Var.getStructDeclaration();
		Assert.assertNotNull(StructDeclaration_8_list);
		Assert.assertEquals(2, StructDeclaration_8_list.size());
		final StructDeclaration StructDeclaration_9_Var = (StructDeclaration)StructDeclaration_8_list.get(0);
		Assert.assertNotNull(StructDeclaration_9_Var);
		final SpecifierQualifierList SpecifierQualifierList_10_Var = (SpecifierQualifierList)StructDeclaration_9_Var.getList();
		Assert.assertNotNull(SpecifierQualifierList_10_Var);
		final EList<? extends EObject> TypeSpecifier_10_list = SpecifierQualifierList_10_Var.getTypeSpecifier();
		Assert.assertNotNull(TypeSpecifier_10_list);
		Assert.assertEquals(1, TypeSpecifier_10_list.size());
		final TypeSpecifier TypeSpecifier_11_Var = (TypeSpecifier)TypeSpecifier_10_list.get(0);
		Assert.assertNotNull(TypeSpecifier_11_Var);
		Assert.assertEquals("char", TypeSpecifier_11_Var.getName());
		final StructDeclaratorList StructDeclaratorList_12_Var = (StructDeclaratorList)StructDeclaration_9_Var.getStructDeclarationList();
		Assert.assertNotNull(StructDeclaratorList_12_Var);
		final EList<? extends EObject> StructDeclarator_12_list = StructDeclaratorList_12_Var.getStructDeclarator();
		Assert.assertNotNull(StructDeclarator_12_list);
		Assert.assertEquals(1, StructDeclarator_12_list.size());
		final StructDeclarator StructDeclarator_13_Var = (StructDeclarator)StructDeclarator_12_list.get(0);
		Assert.assertNotNull(StructDeclarator_13_Var);
		final Declarator Declarator_14_Var = (Declarator)StructDeclarator_13_Var.getDeclarator();
		Assert.assertNotNull(Declarator_14_Var);
		final DirectDeclarator DirectDeclarator_15_Var = (DirectDeclarator)Declarator_14_Var.getDeclarator();
		Assert.assertNotNull(DirectDeclarator_15_Var);
		Assert.assertEquals("numChar", DirectDeclarator_15_Var.getId());
		final StructDeclaration StructDeclaration_16_Var = (StructDeclaration)StructDeclaration_8_list.get(1);
		Assert.assertNotNull(StructDeclaration_16_Var);
		final SpecifierQualifierList SpecifierQualifierList_17_Var = (SpecifierQualifierList)StructDeclaration_16_Var.getList();
		Assert.assertNotNull(SpecifierQualifierList_17_Var);
		final EList<? extends EObject> TypeSpecifier_17_list = SpecifierQualifierList_17_Var.getTypeSpecifier();
		Assert.assertNotNull(TypeSpecifier_17_list);
		Assert.assertEquals(1, TypeSpecifier_17_list.size());
		final TypeSpecifier TypeSpecifier_18_Var = (TypeSpecifier)TypeSpecifier_17_list.get(0);
		Assert.assertNotNull(TypeSpecifier_18_Var);
		Assert.assertEquals("float", TypeSpecifier_18_Var.getName());
		final StructDeclaratorList StructDeclaratorList_19_Var = (StructDeclaratorList)StructDeclaration_16_Var.getStructDeclarationList();
		Assert.assertNotNull(StructDeclaratorList_19_Var);
		final EList<? extends EObject> StructDeclarator_19_list = StructDeclaratorList_19_Var.getStructDeclarator();
		Assert.assertNotNull(StructDeclarator_19_list);
		Assert.assertEquals(1, StructDeclarator_19_list.size());
		final StructDeclarator StructDeclarator_20_Var = (StructDeclarator)StructDeclarator_19_list.get(0);
		Assert.assertNotNull(StructDeclarator_20_Var);
		final Declarator Declarator_21_Var = (Declarator)StructDeclarator_20_Var.getDeclarator();
		Assert.assertNotNull(Declarator_21_Var);
		final DirectDeclarator DirectDeclarator_22_Var = (DirectDeclarator)Declarator_21_Var.getDeclarator();
		Assert.assertNotNull(DirectDeclarator_22_Var);
		Assert.assertEquals("numFloat", DirectDeclarator_22_Var.getId());
		final ExternalDeclaration ExternalDeclaration_23_Var = (ExternalDeclaration)External_1_list.get(1);
		Assert.assertNotNull(ExternalDeclaration_23_Var);
		final Declaration Declaration_24_Var = (Declaration)ExternalDeclaration_23_Var.getDeclaration();
		Assert.assertNotNull(Declaration_24_Var);
		final DeclarationSpecifiers DeclarationSpecifiers_25_Var = (DeclarationSpecifiers)Declaration_24_Var.getSpecifiers();
		Assert.assertNotNull(DeclarationSpecifiers_25_Var);
		final EList<? extends EObject> DeclarationSpecifier_25_list = DeclarationSpecifiers_25_Var.getDeclarationSpecifier();
		Assert.assertNotNull(DeclarationSpecifier_25_list);
		Assert.assertEquals(1, DeclarationSpecifier_25_list.size());
		final TypeSpecifier TypeSpecifier_26_Var = (TypeSpecifier)DeclarationSpecifier_25_list.get(0);
		Assert.assertNotNull(TypeSpecifier_26_Var);
		final StructOrUnionSpecifier StructOrUnionSpecifier_27_Var = (StructOrUnionSpecifier)TypeSpecifier_26_Var.getSpecifier();
		Assert.assertNotNull(StructOrUnionSpecifier_27_Var);
		final StructOrUnion StructOrUnion_28_Var = (StructOrUnion)StructOrUnionSpecifier_27_Var.getType();
		Assert.assertNotNull(StructOrUnion_28_Var);
		Assert.assertEquals("union", StructOrUnion_28_Var.getName());
		Assert.assertEquals("num", StructOrUnionSpecifier_27_Var.getId());
		final EList<? extends EObject> InitDeclaratorList_28_list = Declaration_24_Var.getInitDeclaratorList();
		Assert.assertNotNull(InitDeclaratorList_28_list);
		Assert.assertEquals(1, InitDeclaratorList_28_list.size());
		final InitDeclaratorList InitDeclaratorList_29_Var = (InitDeclaratorList)InitDeclaratorList_28_list.get(0);
		Assert.assertNotNull(InitDeclaratorList_29_Var);
		final EList<? extends EObject> InitDeclarator_29_list = InitDeclaratorList_29_Var.getInitDeclarator();
		Assert.assertNotNull(InitDeclarator_29_list);
		Assert.assertEquals(1, InitDeclarator_29_list.size());
		final InitDeclarator InitDeclarator_30_Var = (InitDeclarator)InitDeclarator_29_list.get(0);
		Assert.assertNotNull(InitDeclarator_30_Var);
		final Declarator Declarator_31_Var = (Declarator)InitDeclarator_30_Var.getDeclarator();
		Assert.assertNotNull(Declarator_31_Var);
		final DirectDeclarator DirectDeclarator_32_Var = (DirectDeclarator)Declarator_31_Var.getDeclarator();
		Assert.assertNotNull(DirectDeclarator_32_Var);
		Assert.assertEquals("number", DirectDeclarator_32_Var.getId());
		final ExternalDeclaration ExternalDeclaration_33_Var = (ExternalDeclaration)External_1_list.get(2);
		Assert.assertNotNull(ExternalDeclaration_33_Var);
		final FunctionDefHead FunctionDefHead_34_Var = (FunctionDefHead)ExternalDeclaration_33_Var.getFunctiondefHead();
		Assert.assertNotNull(FunctionDefHead_34_Var);
		final DeclarationSpecifiers DeclarationSpecifiers_35_Var = (DeclarationSpecifiers)FunctionDefHead_34_Var.getFunDeclSpecifiers();
		Assert.assertNotNull(DeclarationSpecifiers_35_Var);
		final EList<? extends EObject> DeclarationSpecifier_35_list = DeclarationSpecifiers_35_Var.getDeclarationSpecifier();
		Assert.assertNotNull(DeclarationSpecifier_35_list);
		Assert.assertEquals(1, DeclarationSpecifier_35_list.size());
		final TypeSpecifier TypeSpecifier_36_Var = (TypeSpecifier)DeclarationSpecifier_35_list.get(0);
		Assert.assertNotNull(TypeSpecifier_36_Var);
		Assert.assertEquals("int", TypeSpecifier_36_Var.getName());
		final Declarator Declarator_37_Var = (Declarator)FunctionDefHead_34_Var.getFunDeclarator();
		Assert.assertNotNull(Declarator_37_Var);
		final DirectDeclarator DirectDeclarator_38_Var = (DirectDeclarator)Declarator_37_Var.getDeclarator();
		Assert.assertNotNull(DirectDeclarator_38_Var);
		Assert.assertEquals("main", DirectDeclarator_38_Var.getId());
		final EList<? extends EObject> DeclaratorSuffix_38_list = DirectDeclarator_38_Var.getDeclaratorSuffix();
		Assert.assertNotNull(DeclaratorSuffix_38_list);
		Assert.assertEquals(1, DeclaratorSuffix_38_list.size());
		final DeclaratorSuffix DeclaratorSuffix_39_Var = (DeclaratorSuffix)DeclaratorSuffix_38_list.get(0);
		Assert.assertNotNull(DeclaratorSuffix_39_Var);
		final DirectDeclaratorLastSuffix DirectDeclaratorLastSuffix_40_Var = (DirectDeclaratorLastSuffix)DeclaratorSuffix_39_Var.getLastSuffix();
		Assert.assertNotNull(DirectDeclaratorLastSuffix_40_Var);
		final EList<? extends EObject> ParameterTypeList_40_list = DirectDeclaratorLastSuffix_40_Var.getParameterTypeList();
		Assert.assertNotNull(ParameterTypeList_40_list);
		Assert.assertEquals(1, ParameterTypeList_40_list.size());
		final ParameterTypeList ParameterTypeList_41_Var = (ParameterTypeList)ParameterTypeList_40_list.get(0);
		Assert.assertNotNull(ParameterTypeList_41_Var);
		final ParameterList ParameterList_42_Var = (ParameterList)ParameterTypeList_41_Var.getList();
		Assert.assertNotNull(ParameterList_42_Var);
		final EList<? extends EObject> ParameterDeclaration_42_list = ParameterList_42_Var.getParameterDeclaration();
		Assert.assertNotNull(ParameterDeclaration_42_list);
		Assert.assertEquals(1, ParameterDeclaration_42_list.size());
		final ParameterDeclaration ParameterDeclaration_43_Var = (ParameterDeclaration)ParameterDeclaration_42_list.get(0);
		Assert.assertNotNull(ParameterDeclaration_43_Var);
		final DeclarationSpecifiers DeclarationSpecifiers_44_Var = (DeclarationSpecifiers)ParameterDeclaration_43_Var.getDeclSpecifiers();
		Assert.assertNotNull(DeclarationSpecifiers_44_Var);
		final EList<? extends EObject> DeclarationSpecifier_44_list = DeclarationSpecifiers_44_Var.getDeclarationSpecifier();
		Assert.assertNotNull(DeclarationSpecifier_44_list);
		Assert.assertEquals(1, DeclarationSpecifier_44_list.size());
		final TypeSpecifier TypeSpecifier_45_Var = (TypeSpecifier)DeclarationSpecifier_44_list.get(0);
		Assert.assertNotNull(TypeSpecifier_45_Var);
		Assert.assertEquals("void", TypeSpecifier_45_Var.getName());
		final FunctionDefinition FunctionDefinition_46_Var = (FunctionDefinition)ExternalDeclaration_33_Var.getFunctionDefinition();
		Assert.assertNotNull(FunctionDefinition_46_Var);
		final BodyStatement BodyStatement_47_Var = (BodyStatement)FunctionDefinition_46_Var.getBody();
		Assert.assertNotNull(BodyStatement_47_Var);
		final EList<? extends EObject> BlockList_47_list = BodyStatement_47_Var.getBlockList();
		Assert.assertNotNull(BlockList_47_list);
		Assert.assertEquals(1, BlockList_47_list.size());
		final BlockList BlockList_48_Var = (BlockList)BlockList_47_list.get(0);
		Assert.assertNotNull(BlockList_48_Var);
		final EList<? extends EObject> Declaration_48_list = BlockList_48_Var.getDeclaration();
		Assert.assertNotNull(Declaration_48_list);
		Assert.assertEquals(1, Declaration_48_list.size());
		final Declaration Declaration_49_Var = (Declaration)Declaration_48_list.get(0);
		Assert.assertNotNull(Declaration_49_Var);
		final DeclarationSpecifiers DeclarationSpecifiers_50_Var = (DeclarationSpecifiers)Declaration_49_Var.getSpecifiers();
		Assert.assertNotNull(DeclarationSpecifiers_50_Var);
		final EList<? extends EObject> DeclarationSpecifier_50_list = DeclarationSpecifiers_50_Var.getDeclarationSpecifier();
		Assert.assertNotNull(DeclarationSpecifier_50_list);
		Assert.assertEquals(2, DeclarationSpecifier_50_list.size());
		final TypeSpecifier TypeSpecifier_51_Var = (TypeSpecifier)DeclarationSpecifier_50_list.get(0);
		Assert.assertNotNull(TypeSpecifier_51_Var);
		Assert.assertEquals("unsigned", TypeSpecifier_51_Var.getName());
		final TypeSpecifier TypeSpecifier_52_Var = (TypeSpecifier)DeclarationSpecifier_50_list.get(1);
		Assert.assertNotNull(TypeSpecifier_52_Var);
		Assert.assertEquals("long", TypeSpecifier_52_Var.getName());
		final EList<? extends EObject> InitDeclaratorList_52_list = Declaration_49_Var.getInitDeclaratorList();
		Assert.assertNotNull(InitDeclaratorList_52_list);
		Assert.assertEquals(1, InitDeclaratorList_52_list.size());
		final InitDeclaratorList InitDeclaratorList_53_Var = (InitDeclaratorList)InitDeclaratorList_52_list.get(0);
		Assert.assertNotNull(InitDeclaratorList_53_Var);
		final EList<? extends EObject> InitDeclarator_53_list = InitDeclaratorList_53_Var.getInitDeclarator();
		Assert.assertNotNull(InitDeclarator_53_list);
		Assert.assertEquals(1, InitDeclarator_53_list.size());
		final InitDeclarator InitDeclarator_54_Var = (InitDeclarator)InitDeclarator_53_list.get(0);
		Assert.assertNotNull(InitDeclarator_54_Var);
		final Declarator Declarator_55_Var = (Declarator)InitDeclarator_54_Var.getDeclarator();
		Assert.assertNotNull(Declarator_55_Var);
		final DirectDeclarator DirectDeclarator_56_Var = (DirectDeclarator)Declarator_55_Var.getDeclarator();
		Assert.assertNotNull(DirectDeclarator_56_Var);
		Assert.assertEquals("size", DirectDeclarator_56_Var.getId());
		final Initializer Initializer_57_Var = (Initializer)InitDeclarator_54_Var.getInitializer();
		Assert.assertNotNull(Initializer_57_Var);
		final AssignmentExpression AssignmentExpression_58_Var = (AssignmentExpression)Initializer_57_Var.getExpr();
		Assert.assertNotNull(AssignmentExpression_58_Var);
		final ConditionalExpression ConditionalExpression_59_Var = (ConditionalExpression)AssignmentExpression_58_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_59_Var);
		final LogicalOrExpression LogicalOrExpression_60_Var = (LogicalOrExpression)ConditionalExpression_59_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_60_Var);
		final EList<? extends EObject> Expr_60_list = LogicalOrExpression_60_Var.getExpr();
		Assert.assertNotNull(Expr_60_list);
		Assert.assertEquals(1, Expr_60_list.size());
		final LogicalAndExpression LogicalAndExpression_61_Var = (LogicalAndExpression)Expr_60_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_61_Var);
		final EList<? extends EObject> Expr_61_list = LogicalAndExpression_61_Var.getExpr();
		Assert.assertNotNull(Expr_61_list);
		Assert.assertEquals(1, Expr_61_list.size());
		final InclusiveOrExpression InclusiveOrExpression_62_Var = (InclusiveOrExpression)Expr_61_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_62_Var);
		final EList<? extends EObject> Expr_62_list = InclusiveOrExpression_62_Var.getExpr();
		Assert.assertNotNull(Expr_62_list);
		Assert.assertEquals(1, Expr_62_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_63_Var = (ExclusiveOrExpression)Expr_62_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_63_Var);
		final EList<? extends EObject> Expr_63_list = ExclusiveOrExpression_63_Var.getExpr();
		Assert.assertNotNull(Expr_63_list);
		Assert.assertEquals(1, Expr_63_list.size());
		final AndExpression AndExpression_64_Var = (AndExpression)Expr_63_list.get(0);
		Assert.assertNotNull(AndExpression_64_Var);
		final EList<? extends EObject> Expr_64_list = AndExpression_64_Var.getExpr();
		Assert.assertNotNull(Expr_64_list);
		Assert.assertEquals(1, Expr_64_list.size());
		final EqualityExpression EqualityExpression_65_Var = (EqualityExpression)Expr_64_list.get(0);
		Assert.assertNotNull(EqualityExpression_65_Var);
		final EList<? extends EObject> Expr_65_list = EqualityExpression_65_Var.getExpr();
		Assert.assertNotNull(Expr_65_list);
		Assert.assertEquals(1, Expr_65_list.size());
		final RelationalExpression RelationalExpression_66_Var = (RelationalExpression)Expr_65_list.get(0);
		Assert.assertNotNull(RelationalExpression_66_Var);
		final EList<? extends EObject> Expr_66_list = RelationalExpression_66_Var.getExpr();
		Assert.assertNotNull(Expr_66_list);
		Assert.assertEquals(1, Expr_66_list.size());
		final ShiftExpression ShiftExpression_67_Var = (ShiftExpression)Expr_66_list.get(0);
		Assert.assertNotNull(ShiftExpression_67_Var);
		final EList<? extends EObject> Expr_67_list = ShiftExpression_67_Var.getExpr();
		Assert.assertNotNull(Expr_67_list);
		Assert.assertEquals(1, Expr_67_list.size());
		final AdditiveExpression AdditiveExpression_68_Var = (AdditiveExpression)Expr_67_list.get(0);
		Assert.assertNotNull(AdditiveExpression_68_Var);
		final EList<? extends EObject> Expr_68_list = AdditiveExpression_68_Var.getExpr();
		Assert.assertNotNull(Expr_68_list);
		Assert.assertEquals(1, Expr_68_list.size());
		final MultiplicativeExpression MultiplicativeExpression_69_Var = (MultiplicativeExpression)Expr_68_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_69_Var);
		final EList<? extends EObject> Expr_69_list = MultiplicativeExpression_69_Var.getExpr();
		Assert.assertNotNull(Expr_69_list);
		Assert.assertEquals(1, Expr_69_list.size());
		final CastExpression CastExpression_70_Var = (CastExpression)Expr_69_list.get(0);
		Assert.assertNotNull(CastExpression_70_Var);
		final TypeName TypeName_71_Var = (TypeName)CastExpression_70_Var.getType();
		Assert.assertNotNull(TypeName_71_Var);
		final SpecifierQualifierList SpecifierQualifierList_72_Var = (SpecifierQualifierList)TypeName_71_Var.getList();
		Assert.assertNotNull(SpecifierQualifierList_72_Var);
		final EList<? extends EObject> TypeSpecifier_72_list = SpecifierQualifierList_72_Var.getTypeSpecifier();
		Assert.assertNotNull(TypeSpecifier_72_list);
		Assert.assertEquals(2, TypeSpecifier_72_list.size());
		final TypeSpecifier TypeSpecifier_73_Var = (TypeSpecifier)TypeSpecifier_72_list.get(0);
		Assert.assertNotNull(TypeSpecifier_73_Var);
		Assert.assertEquals("unsigned", TypeSpecifier_73_Var.getName());
		final TypeSpecifier TypeSpecifier_74_Var = (TypeSpecifier)TypeSpecifier_72_list.get(1);
		Assert.assertNotNull(TypeSpecifier_74_Var);
		Assert.assertEquals("long", TypeSpecifier_74_Var.getName());
		final CastExpression CastExpression_75_Var = (CastExpression)CastExpression_70_Var.getExpr();
		Assert.assertNotNull(CastExpression_75_Var);
		final UnaryExpression UnaryExpression_76_Var = (UnaryExpression)CastExpression_75_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_76_Var);
		Assert.assertEquals("sizeof", UnaryExpression_76_Var.getSizeOf());
		final UnaryExpression UnaryExpression_77_Var = (UnaryExpression)UnaryExpression_76_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_77_Var);
		final PostfixExpression PostfixExpression_78_Var = (PostfixExpression)UnaryExpression_77_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_78_Var);
		final EList<? extends EObject> Expr_78_list = PostfixExpression_78_Var.getExpr();
		Assert.assertNotNull(Expr_78_list);
		Assert.assertEquals(1, Expr_78_list.size());
		final PrimaryExpression PrimaryExpression_79_Var = (PrimaryExpression)Expr_78_list.get(0);
		Assert.assertNotNull(PrimaryExpression_79_Var);
		final Expression Expression_80_Var = (Expression)PrimaryExpression_79_Var.getExpr();
		Assert.assertNotNull(Expression_80_Var);
		final EList<? extends EObject> ExprExpr_80_list = Expression_80_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_80_list);
		Assert.assertEquals(1, ExprExpr_80_list.size());
		final AssignmentExpression AssignmentExpression_81_Var = (AssignmentExpression)ExprExpr_80_list.get(0);
		Assert.assertNotNull(AssignmentExpression_81_Var);
		final ConditionalExpression ConditionalExpression_82_Var = (ConditionalExpression)AssignmentExpression_81_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_82_Var);
		final LogicalOrExpression LogicalOrExpression_83_Var = (LogicalOrExpression)ConditionalExpression_82_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_83_Var);
		final EList<? extends EObject> Expr_83_list = LogicalOrExpression_83_Var.getExpr();
		Assert.assertNotNull(Expr_83_list);
		Assert.assertEquals(1, Expr_83_list.size());
		final LogicalAndExpression LogicalAndExpression_84_Var = (LogicalAndExpression)Expr_83_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_84_Var);
		final EList<? extends EObject> Expr_84_list = LogicalAndExpression_84_Var.getExpr();
		Assert.assertNotNull(Expr_84_list);
		Assert.assertEquals(1, Expr_84_list.size());
		final InclusiveOrExpression InclusiveOrExpression_85_Var = (InclusiveOrExpression)Expr_84_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_85_Var);
		final EList<? extends EObject> Expr_85_list = InclusiveOrExpression_85_Var.getExpr();
		Assert.assertNotNull(Expr_85_list);
		Assert.assertEquals(1, Expr_85_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_86_Var = (ExclusiveOrExpression)Expr_85_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_86_Var);
		final EList<? extends EObject> Expr_86_list = ExclusiveOrExpression_86_Var.getExpr();
		Assert.assertNotNull(Expr_86_list);
		Assert.assertEquals(1, Expr_86_list.size());
		final AndExpression AndExpression_87_Var = (AndExpression)Expr_86_list.get(0);
		Assert.assertNotNull(AndExpression_87_Var);
		final EList<? extends EObject> Expr_87_list = AndExpression_87_Var.getExpr();
		Assert.assertNotNull(Expr_87_list);
		Assert.assertEquals(1, Expr_87_list.size());
		final EqualityExpression EqualityExpression_88_Var = (EqualityExpression)Expr_87_list.get(0);
		Assert.assertNotNull(EqualityExpression_88_Var);
		final EList<? extends EObject> Expr_88_list = EqualityExpression_88_Var.getExpr();
		Assert.assertNotNull(Expr_88_list);
		Assert.assertEquals(1, Expr_88_list.size());
		final RelationalExpression RelationalExpression_89_Var = (RelationalExpression)Expr_88_list.get(0);
		Assert.assertNotNull(RelationalExpression_89_Var);
		final EList<? extends EObject> Expr_89_list = RelationalExpression_89_Var.getExpr();
		Assert.assertNotNull(Expr_89_list);
		Assert.assertEquals(1, Expr_89_list.size());
		final ShiftExpression ShiftExpression_90_Var = (ShiftExpression)Expr_89_list.get(0);
		Assert.assertNotNull(ShiftExpression_90_Var);
		final EList<? extends EObject> Expr_90_list = ShiftExpression_90_Var.getExpr();
		Assert.assertNotNull(Expr_90_list);
		Assert.assertEquals(1, Expr_90_list.size());
		final AdditiveExpression AdditiveExpression_91_Var = (AdditiveExpression)Expr_90_list.get(0);
		Assert.assertNotNull(AdditiveExpression_91_Var);
		final EList<? extends EObject> Expr_91_list = AdditiveExpression_91_Var.getExpr();
		Assert.assertNotNull(Expr_91_list);
		Assert.assertEquals(1, Expr_91_list.size());
		final MultiplicativeExpression MultiplicativeExpression_92_Var = (MultiplicativeExpression)Expr_91_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_92_Var);
		final EList<? extends EObject> Expr_92_list = MultiplicativeExpression_92_Var.getExpr();
		Assert.assertNotNull(Expr_92_list);
		Assert.assertEquals(1, Expr_92_list.size());
		final CastExpression CastExpression_93_Var = (CastExpression)Expr_92_list.get(0);
		Assert.assertNotNull(CastExpression_93_Var);
		final UnaryExpression UnaryExpression_94_Var = (UnaryExpression)CastExpression_93_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_94_Var);
		final PostfixExpression PostfixExpression_95_Var = (PostfixExpression)UnaryExpression_94_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_95_Var);
		final EList<? extends EObject> Expr_95_list = PostfixExpression_95_Var.getExpr();
		Assert.assertNotNull(Expr_95_list);
		Assert.assertEquals(1, Expr_95_list.size());
		final PrimaryExpression PrimaryExpression_96_Var = (PrimaryExpression)Expr_95_list.get(0);
		Assert.assertNotNull(PrimaryExpression_96_Var);
		Assert.assertEquals("number", PrimaryExpression_96_Var.getId());
		final EList<? extends EObject> Statement_96_list = BlockList_48_Var.getStatement();
		Assert.assertNotNull(Statement_96_list);
		Assert.assertEquals(11, Statement_96_list.size());
		final Statement Statement_97_Var = (Statement)Statement_96_list.get(0);
		Assert.assertNotNull(Statement_97_Var);
		final ExpressionStatement ExpressionStatement_98_Var = (ExpressionStatement)Statement_97_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_98_Var);
		final Expression Expression_99_Var = (Expression)ExpressionStatement_98_Var.getExpression();
		Assert.assertNotNull(Expression_99_Var);
		final EList<? extends EObject> ExprExpr_99_list = Expression_99_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_99_list);
		Assert.assertEquals(1, ExprExpr_99_list.size());
		final AssignmentExpression AssignmentExpression_100_Var = (AssignmentExpression)ExprExpr_99_list.get(0);
		Assert.assertNotNull(AssignmentExpression_100_Var);
		final ConditionalExpression ConditionalExpression_101_Var = (ConditionalExpression)AssignmentExpression_100_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_101_Var);
		final LogicalOrExpression LogicalOrExpression_102_Var = (LogicalOrExpression)ConditionalExpression_101_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_102_Var);
		final EList<? extends EObject> Expr_102_list = LogicalOrExpression_102_Var.getExpr();
		Assert.assertNotNull(Expr_102_list);
		Assert.assertEquals(1, Expr_102_list.size());
		final LogicalAndExpression LogicalAndExpression_103_Var = (LogicalAndExpression)Expr_102_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_103_Var);
		final EList<? extends EObject> Expr_103_list = LogicalAndExpression_103_Var.getExpr();
		Assert.assertNotNull(Expr_103_list);
		Assert.assertEquals(1, Expr_103_list.size());
		final InclusiveOrExpression InclusiveOrExpression_104_Var = (InclusiveOrExpression)Expr_103_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_104_Var);
		final EList<? extends EObject> Expr_104_list = InclusiveOrExpression_104_Var.getExpr();
		Assert.assertNotNull(Expr_104_list);
		Assert.assertEquals(1, Expr_104_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_105_Var = (ExclusiveOrExpression)Expr_104_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_105_Var);
		final EList<? extends EObject> Expr_105_list = ExclusiveOrExpression_105_Var.getExpr();
		Assert.assertNotNull(Expr_105_list);
		Assert.assertEquals(1, Expr_105_list.size());
		final AndExpression AndExpression_106_Var = (AndExpression)Expr_105_list.get(0);
		Assert.assertNotNull(AndExpression_106_Var);
		final EList<? extends EObject> Expr_106_list = AndExpression_106_Var.getExpr();
		Assert.assertNotNull(Expr_106_list);
		Assert.assertEquals(1, Expr_106_list.size());
		final EqualityExpression EqualityExpression_107_Var = (EqualityExpression)Expr_106_list.get(0);
		Assert.assertNotNull(EqualityExpression_107_Var);
		final EList<? extends EObject> Expr_107_list = EqualityExpression_107_Var.getExpr();
		Assert.assertNotNull(Expr_107_list);
		Assert.assertEquals(1, Expr_107_list.size());
		final RelationalExpression RelationalExpression_108_Var = (RelationalExpression)Expr_107_list.get(0);
		Assert.assertNotNull(RelationalExpression_108_Var);
		final EList<? extends EObject> Expr_108_list = RelationalExpression_108_Var.getExpr();
		Assert.assertNotNull(Expr_108_list);
		Assert.assertEquals(1, Expr_108_list.size());
		final ShiftExpression ShiftExpression_109_Var = (ShiftExpression)Expr_108_list.get(0);
		Assert.assertNotNull(ShiftExpression_109_Var);
		final EList<? extends EObject> Expr_109_list = ShiftExpression_109_Var.getExpr();
		Assert.assertNotNull(Expr_109_list);
		Assert.assertEquals(1, Expr_109_list.size());
		final AdditiveExpression AdditiveExpression_110_Var = (AdditiveExpression)Expr_109_list.get(0);
		Assert.assertNotNull(AdditiveExpression_110_Var);
		final EList<? extends EObject> Expr_110_list = AdditiveExpression_110_Var.getExpr();
		Assert.assertNotNull(Expr_110_list);
		Assert.assertEquals(1, Expr_110_list.size());
		final MultiplicativeExpression MultiplicativeExpression_111_Var = (MultiplicativeExpression)Expr_110_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_111_Var);
		final EList<? extends EObject> Expr_111_list = MultiplicativeExpression_111_Var.getExpr();
		Assert.assertNotNull(Expr_111_list);
		Assert.assertEquals(1, Expr_111_list.size());
		final CastExpression CastExpression_112_Var = (CastExpression)Expr_111_list.get(0);
		Assert.assertNotNull(CastExpression_112_Var);
		final UnaryExpression UnaryExpression_113_Var = (UnaryExpression)CastExpression_112_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_113_Var);
		final PostfixExpression PostfixExpression_114_Var = (PostfixExpression)UnaryExpression_113_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_114_Var);
		final EList<? extends EObject> Expr_114_list = PostfixExpression_114_Var.getExpr();
		Assert.assertNotNull(Expr_114_list);
		Assert.assertEquals(1, Expr_114_list.size());
		final PrimaryExpression PrimaryExpression_115_Var = (PrimaryExpression)Expr_114_list.get(0);
		Assert.assertNotNull(PrimaryExpression_115_Var);
		Assert.assertEquals("printf", PrimaryExpression_115_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_115_list = PostfixExpression_114_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_115_list);
		Assert.assertEquals(1, ArgumentExpressionList_115_list.size());
		final ArgumentExpressionList ArgumentExpressionList_116_Var = (ArgumentExpressionList)ArgumentExpressionList_115_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_116_Var);
		final EList<? extends EObject> Expr_116_list = ArgumentExpressionList_116_Var.getExpr();
		Assert.assertNotNull(Expr_116_list);
		Assert.assertEquals(2, Expr_116_list.size());
		final AssignmentExpression AssignmentExpression_117_Var = (AssignmentExpression)Expr_116_list.get(0);
		Assert.assertNotNull(AssignmentExpression_117_Var);
		final ConditionalExpression ConditionalExpression_118_Var = (ConditionalExpression)AssignmentExpression_117_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_118_Var);
		final LogicalOrExpression LogicalOrExpression_119_Var = (LogicalOrExpression)ConditionalExpression_118_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_119_Var);
		final EList<? extends EObject> Expr_119_list = LogicalOrExpression_119_Var.getExpr();
		Assert.assertNotNull(Expr_119_list);
		Assert.assertEquals(1, Expr_119_list.size());
		final LogicalAndExpression LogicalAndExpression_120_Var = (LogicalAndExpression)Expr_119_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_120_Var);
		final EList<? extends EObject> Expr_120_list = LogicalAndExpression_120_Var.getExpr();
		Assert.assertNotNull(Expr_120_list);
		Assert.assertEquals(1, Expr_120_list.size());
		final InclusiveOrExpression InclusiveOrExpression_121_Var = (InclusiveOrExpression)Expr_120_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_121_Var);
		final EList<? extends EObject> Expr_121_list = InclusiveOrExpression_121_Var.getExpr();
		Assert.assertNotNull(Expr_121_list);
		Assert.assertEquals(1, Expr_121_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_122_Var = (ExclusiveOrExpression)Expr_121_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_122_Var);
		final EList<? extends EObject> Expr_122_list = ExclusiveOrExpression_122_Var.getExpr();
		Assert.assertNotNull(Expr_122_list);
		Assert.assertEquals(1, Expr_122_list.size());
		final AndExpression AndExpression_123_Var = (AndExpression)Expr_122_list.get(0);
		Assert.assertNotNull(AndExpression_123_Var);
		final EList<? extends EObject> Expr_123_list = AndExpression_123_Var.getExpr();
		Assert.assertNotNull(Expr_123_list);
		Assert.assertEquals(1, Expr_123_list.size());
		final EqualityExpression EqualityExpression_124_Var = (EqualityExpression)Expr_123_list.get(0);
		Assert.assertNotNull(EqualityExpression_124_Var);
		final EList<? extends EObject> Expr_124_list = EqualityExpression_124_Var.getExpr();
		Assert.assertNotNull(Expr_124_list);
		Assert.assertEquals(1, Expr_124_list.size());
		final RelationalExpression RelationalExpression_125_Var = (RelationalExpression)Expr_124_list.get(0);
		Assert.assertNotNull(RelationalExpression_125_Var);
		final EList<? extends EObject> Expr_125_list = RelationalExpression_125_Var.getExpr();
		Assert.assertNotNull(Expr_125_list);
		Assert.assertEquals(1, Expr_125_list.size());
		final ShiftExpression ShiftExpression_126_Var = (ShiftExpression)Expr_125_list.get(0);
		Assert.assertNotNull(ShiftExpression_126_Var);
		final EList<? extends EObject> Expr_126_list = ShiftExpression_126_Var.getExpr();
		Assert.assertNotNull(Expr_126_list);
		Assert.assertEquals(1, Expr_126_list.size());
		final AdditiveExpression AdditiveExpression_127_Var = (AdditiveExpression)Expr_126_list.get(0);
		Assert.assertNotNull(AdditiveExpression_127_Var);
		final EList<? extends EObject> Expr_127_list = AdditiveExpression_127_Var.getExpr();
		Assert.assertNotNull(Expr_127_list);
		Assert.assertEquals(1, Expr_127_list.size());
		final MultiplicativeExpression MultiplicativeExpression_128_Var = (MultiplicativeExpression)Expr_127_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_128_Var);
		final EList<? extends EObject> Expr_128_list = MultiplicativeExpression_128_Var.getExpr();
		Assert.assertNotNull(Expr_128_list);
		Assert.assertEquals(1, Expr_128_list.size());
		final CastExpression CastExpression_129_Var = (CastExpression)Expr_128_list.get(0);
		Assert.assertNotNull(CastExpression_129_Var);
		final UnaryExpression UnaryExpression_130_Var = (UnaryExpression)CastExpression_129_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_130_Var);
		final PostfixExpression PostfixExpression_131_Var = (PostfixExpression)UnaryExpression_130_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_131_Var);
		final EList<? extends EObject> Expr_131_list = PostfixExpression_131_Var.getExpr();
		Assert.assertNotNull(Expr_131_list);
		Assert.assertEquals(1, Expr_131_list.size());
		final PrimaryExpression PrimaryExpression_132_Var = (PrimaryExpression)Expr_131_list.get(0);
		Assert.assertNotNull(PrimaryExpression_132_Var);
		final Constant Constant_133_Var = (Constant)PrimaryExpression_132_Var.getConst();
		Assert.assertNotNull(Constant_133_Var);
		Assert.assertEquals("\"sizeof(number)=%lu\\n\"", Constant_133_Var.getStr());
		final AssignmentExpression AssignmentExpression_134_Var = (AssignmentExpression)Expr_116_list.get(1);
		Assert.assertNotNull(AssignmentExpression_134_Var);
		final ConditionalExpression ConditionalExpression_135_Var = (ConditionalExpression)AssignmentExpression_134_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_135_Var);
		final LogicalOrExpression LogicalOrExpression_136_Var = (LogicalOrExpression)ConditionalExpression_135_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_136_Var);
		final EList<? extends EObject> Expr_136_list = LogicalOrExpression_136_Var.getExpr();
		Assert.assertNotNull(Expr_136_list);
		Assert.assertEquals(1, Expr_136_list.size());
		final LogicalAndExpression LogicalAndExpression_137_Var = (LogicalAndExpression)Expr_136_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_137_Var);
		final EList<? extends EObject> Expr_137_list = LogicalAndExpression_137_Var.getExpr();
		Assert.assertNotNull(Expr_137_list);
		Assert.assertEquals(1, Expr_137_list.size());
		final InclusiveOrExpression InclusiveOrExpression_138_Var = (InclusiveOrExpression)Expr_137_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_138_Var);
		final EList<? extends EObject> Expr_138_list = InclusiveOrExpression_138_Var.getExpr();
		Assert.assertNotNull(Expr_138_list);
		Assert.assertEquals(1, Expr_138_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_139_Var = (ExclusiveOrExpression)Expr_138_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_139_Var);
		final EList<? extends EObject> Expr_139_list = ExclusiveOrExpression_139_Var.getExpr();
		Assert.assertNotNull(Expr_139_list);
		Assert.assertEquals(1, Expr_139_list.size());
		final AndExpression AndExpression_140_Var = (AndExpression)Expr_139_list.get(0);
		Assert.assertNotNull(AndExpression_140_Var);
		final EList<? extends EObject> Expr_140_list = AndExpression_140_Var.getExpr();
		Assert.assertNotNull(Expr_140_list);
		Assert.assertEquals(1, Expr_140_list.size());
		final EqualityExpression EqualityExpression_141_Var = (EqualityExpression)Expr_140_list.get(0);
		Assert.assertNotNull(EqualityExpression_141_Var);
		final EList<? extends EObject> Expr_141_list = EqualityExpression_141_Var.getExpr();
		Assert.assertNotNull(Expr_141_list);
		Assert.assertEquals(1, Expr_141_list.size());
		final RelationalExpression RelationalExpression_142_Var = (RelationalExpression)Expr_141_list.get(0);
		Assert.assertNotNull(RelationalExpression_142_Var);
		final EList<? extends EObject> Expr_142_list = RelationalExpression_142_Var.getExpr();
		Assert.assertNotNull(Expr_142_list);
		Assert.assertEquals(1, Expr_142_list.size());
		final ShiftExpression ShiftExpression_143_Var = (ShiftExpression)Expr_142_list.get(0);
		Assert.assertNotNull(ShiftExpression_143_Var);
		final EList<? extends EObject> Expr_143_list = ShiftExpression_143_Var.getExpr();
		Assert.assertNotNull(Expr_143_list);
		Assert.assertEquals(1, Expr_143_list.size());
		final AdditiveExpression AdditiveExpression_144_Var = (AdditiveExpression)Expr_143_list.get(0);
		Assert.assertNotNull(AdditiveExpression_144_Var);
		final EList<? extends EObject> Expr_144_list = AdditiveExpression_144_Var.getExpr();
		Assert.assertNotNull(Expr_144_list);
		Assert.assertEquals(1, Expr_144_list.size());
		final MultiplicativeExpression MultiplicativeExpression_145_Var = (MultiplicativeExpression)Expr_144_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_145_Var);
		final EList<? extends EObject> Expr_145_list = MultiplicativeExpression_145_Var.getExpr();
		Assert.assertNotNull(Expr_145_list);
		Assert.assertEquals(1, Expr_145_list.size());
		final CastExpression CastExpression_146_Var = (CastExpression)Expr_145_list.get(0);
		Assert.assertNotNull(CastExpression_146_Var);
		final UnaryExpression UnaryExpression_147_Var = (UnaryExpression)CastExpression_146_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_147_Var);
		final PostfixExpression PostfixExpression_148_Var = (PostfixExpression)UnaryExpression_147_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_148_Var);
		final EList<? extends EObject> Expr_148_list = PostfixExpression_148_Var.getExpr();
		Assert.assertNotNull(Expr_148_list);
		Assert.assertEquals(1, Expr_148_list.size());
		final PrimaryExpression PrimaryExpression_149_Var = (PrimaryExpression)Expr_148_list.get(0);
		Assert.assertNotNull(PrimaryExpression_149_Var);
		Assert.assertEquals("size", PrimaryExpression_149_Var.getId());
		Assert.assertEquals(";", ExpressionStatement_98_Var.getSemi());
		final Statement Statement_150_Var = (Statement)Statement_96_list.get(1);
		Assert.assertNotNull(Statement_150_Var);
		final ExpressionStatement ExpressionStatement_151_Var = (ExpressionStatement)Statement_150_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_151_Var);
		final Expression Expression_152_Var = (Expression)ExpressionStatement_151_Var.getExpression();
		Assert.assertNotNull(Expression_152_Var);
		final EList<? extends EObject> ExprExpr_152_list = Expression_152_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_152_list);
		Assert.assertEquals(1, ExprExpr_152_list.size());
		final AssignmentExpression AssignmentExpression_153_Var = (AssignmentExpression)ExprExpr_152_list.get(0);
		Assert.assertNotNull(AssignmentExpression_153_Var);
		final ConditionalExpression ConditionalExpression_154_Var = (ConditionalExpression)AssignmentExpression_153_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_154_Var);
		final LogicalOrExpression LogicalOrExpression_155_Var = (LogicalOrExpression)ConditionalExpression_154_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_155_Var);
		final EList<? extends EObject> Expr_155_list = LogicalOrExpression_155_Var.getExpr();
		Assert.assertNotNull(Expr_155_list);
		Assert.assertEquals(1, Expr_155_list.size());
		final LogicalAndExpression LogicalAndExpression_156_Var = (LogicalAndExpression)Expr_155_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_156_Var);
		final EList<? extends EObject> Expr_156_list = LogicalAndExpression_156_Var.getExpr();
		Assert.assertNotNull(Expr_156_list);
		Assert.assertEquals(1, Expr_156_list.size());
		final InclusiveOrExpression InclusiveOrExpression_157_Var = (InclusiveOrExpression)Expr_156_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_157_Var);
		final EList<? extends EObject> Expr_157_list = InclusiveOrExpression_157_Var.getExpr();
		Assert.assertNotNull(Expr_157_list);
		Assert.assertEquals(1, Expr_157_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_158_Var = (ExclusiveOrExpression)Expr_157_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_158_Var);
		final EList<? extends EObject> Expr_158_list = ExclusiveOrExpression_158_Var.getExpr();
		Assert.assertNotNull(Expr_158_list);
		Assert.assertEquals(1, Expr_158_list.size());
		final AndExpression AndExpression_159_Var = (AndExpression)Expr_158_list.get(0);
		Assert.assertNotNull(AndExpression_159_Var);
		final EList<? extends EObject> Expr_159_list = AndExpression_159_Var.getExpr();
		Assert.assertNotNull(Expr_159_list);
		Assert.assertEquals(1, Expr_159_list.size());
		final EqualityExpression EqualityExpression_160_Var = (EqualityExpression)Expr_159_list.get(0);
		Assert.assertNotNull(EqualityExpression_160_Var);
		final EList<? extends EObject> Expr_160_list = EqualityExpression_160_Var.getExpr();
		Assert.assertNotNull(Expr_160_list);
		Assert.assertEquals(1, Expr_160_list.size());
		final RelationalExpression RelationalExpression_161_Var = (RelationalExpression)Expr_160_list.get(0);
		Assert.assertNotNull(RelationalExpression_161_Var);
		final EList<? extends EObject> Expr_161_list = RelationalExpression_161_Var.getExpr();
		Assert.assertNotNull(Expr_161_list);
		Assert.assertEquals(1, Expr_161_list.size());
		final ShiftExpression ShiftExpression_162_Var = (ShiftExpression)Expr_161_list.get(0);
		Assert.assertNotNull(ShiftExpression_162_Var);
		final EList<? extends EObject> Expr_162_list = ShiftExpression_162_Var.getExpr();
		Assert.assertNotNull(Expr_162_list);
		Assert.assertEquals(1, Expr_162_list.size());
		final AdditiveExpression AdditiveExpression_163_Var = (AdditiveExpression)Expr_162_list.get(0);
		Assert.assertNotNull(AdditiveExpression_163_Var);
		final EList<? extends EObject> Expr_163_list = AdditiveExpression_163_Var.getExpr();
		Assert.assertNotNull(Expr_163_list);
		Assert.assertEquals(1, Expr_163_list.size());
		final MultiplicativeExpression MultiplicativeExpression_164_Var = (MultiplicativeExpression)Expr_163_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_164_Var);
		final EList<? extends EObject> Expr_164_list = MultiplicativeExpression_164_Var.getExpr();
		Assert.assertNotNull(Expr_164_list);
		Assert.assertEquals(1, Expr_164_list.size());
		final CastExpression CastExpression_165_Var = (CastExpression)Expr_164_list.get(0);
		Assert.assertNotNull(CastExpression_165_Var);
		final UnaryExpression UnaryExpression_166_Var = (UnaryExpression)CastExpression_165_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_166_Var);
		final PostfixExpression PostfixExpression_167_Var = (PostfixExpression)UnaryExpression_166_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_167_Var);
		final EList<? extends EObject> Expr_167_list = PostfixExpression_167_Var.getExpr();
		Assert.assertNotNull(Expr_167_list);
		Assert.assertEquals(1, Expr_167_list.size());
		final PrimaryExpression PrimaryExpression_168_Var = (PrimaryExpression)Expr_167_list.get(0);
		Assert.assertNotNull(PrimaryExpression_168_Var);
		Assert.assertEquals("printf", PrimaryExpression_168_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_168_list = PostfixExpression_167_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_168_list);
		Assert.assertEquals(1, ArgumentExpressionList_168_list.size());
		final ArgumentExpressionList ArgumentExpressionList_169_Var = (ArgumentExpressionList)ArgumentExpressionList_168_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_169_Var);
		final EList<? extends EObject> Expr_169_list = ArgumentExpressionList_169_Var.getExpr();
		Assert.assertNotNull(Expr_169_list);
		Assert.assertEquals(2, Expr_169_list.size());
		final AssignmentExpression AssignmentExpression_170_Var = (AssignmentExpression)Expr_169_list.get(0);
		Assert.assertNotNull(AssignmentExpression_170_Var);
		final ConditionalExpression ConditionalExpression_171_Var = (ConditionalExpression)AssignmentExpression_170_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_171_Var);
		final LogicalOrExpression LogicalOrExpression_172_Var = (LogicalOrExpression)ConditionalExpression_171_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_172_Var);
		final EList<? extends EObject> Expr_172_list = LogicalOrExpression_172_Var.getExpr();
		Assert.assertNotNull(Expr_172_list);
		Assert.assertEquals(1, Expr_172_list.size());
		final LogicalAndExpression LogicalAndExpression_173_Var = (LogicalAndExpression)Expr_172_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_173_Var);
		final EList<? extends EObject> Expr_173_list = LogicalAndExpression_173_Var.getExpr();
		Assert.assertNotNull(Expr_173_list);
		Assert.assertEquals(1, Expr_173_list.size());
		final InclusiveOrExpression InclusiveOrExpression_174_Var = (InclusiveOrExpression)Expr_173_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_174_Var);
		final EList<? extends EObject> Expr_174_list = InclusiveOrExpression_174_Var.getExpr();
		Assert.assertNotNull(Expr_174_list);
		Assert.assertEquals(1, Expr_174_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_175_Var = (ExclusiveOrExpression)Expr_174_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_175_Var);
		final EList<? extends EObject> Expr_175_list = ExclusiveOrExpression_175_Var.getExpr();
		Assert.assertNotNull(Expr_175_list);
		Assert.assertEquals(1, Expr_175_list.size());
		final AndExpression AndExpression_176_Var = (AndExpression)Expr_175_list.get(0);
		Assert.assertNotNull(AndExpression_176_Var);
		final EList<? extends EObject> Expr_176_list = AndExpression_176_Var.getExpr();
		Assert.assertNotNull(Expr_176_list);
		Assert.assertEquals(1, Expr_176_list.size());
		final EqualityExpression EqualityExpression_177_Var = (EqualityExpression)Expr_176_list.get(0);
		Assert.assertNotNull(EqualityExpression_177_Var);
		final EList<? extends EObject> Expr_177_list = EqualityExpression_177_Var.getExpr();
		Assert.assertNotNull(Expr_177_list);
		Assert.assertEquals(1, Expr_177_list.size());
		final RelationalExpression RelationalExpression_178_Var = (RelationalExpression)Expr_177_list.get(0);
		Assert.assertNotNull(RelationalExpression_178_Var);
		final EList<? extends EObject> Expr_178_list = RelationalExpression_178_Var.getExpr();
		Assert.assertNotNull(Expr_178_list);
		Assert.assertEquals(1, Expr_178_list.size());
		final ShiftExpression ShiftExpression_179_Var = (ShiftExpression)Expr_178_list.get(0);
		Assert.assertNotNull(ShiftExpression_179_Var);
		final EList<? extends EObject> Expr_179_list = ShiftExpression_179_Var.getExpr();
		Assert.assertNotNull(Expr_179_list);
		Assert.assertEquals(1, Expr_179_list.size());
		final AdditiveExpression AdditiveExpression_180_Var = (AdditiveExpression)Expr_179_list.get(0);
		Assert.assertNotNull(AdditiveExpression_180_Var);
		final EList<? extends EObject> Expr_180_list = AdditiveExpression_180_Var.getExpr();
		Assert.assertNotNull(Expr_180_list);
		Assert.assertEquals(1, Expr_180_list.size());
		final MultiplicativeExpression MultiplicativeExpression_181_Var = (MultiplicativeExpression)Expr_180_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_181_Var);
		final EList<? extends EObject> Expr_181_list = MultiplicativeExpression_181_Var.getExpr();
		Assert.assertNotNull(Expr_181_list);
		Assert.assertEquals(1, Expr_181_list.size());
		final CastExpression CastExpression_182_Var = (CastExpression)Expr_181_list.get(0);
		Assert.assertNotNull(CastExpression_182_Var);
		final UnaryExpression UnaryExpression_183_Var = (UnaryExpression)CastExpression_182_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_183_Var);
		final PostfixExpression PostfixExpression_184_Var = (PostfixExpression)UnaryExpression_183_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_184_Var);
		final EList<? extends EObject> Expr_184_list = PostfixExpression_184_Var.getExpr();
		Assert.assertNotNull(Expr_184_list);
		Assert.assertEquals(1, Expr_184_list.size());
		final PrimaryExpression PrimaryExpression_185_Var = (PrimaryExpression)Expr_184_list.get(0);
		Assert.assertNotNull(PrimaryExpression_185_Var);
		final Constant Constant_186_Var = (Constant)PrimaryExpression_185_Var.getConst();
		Assert.assertNotNull(Constant_186_Var);
		Assert.assertEquals("\"sizeof(number.numChar)=%lu\\n\"", Constant_186_Var.getStr());
		final AssignmentExpression AssignmentExpression_187_Var = (AssignmentExpression)Expr_169_list.get(1);
		Assert.assertNotNull(AssignmentExpression_187_Var);
		final ConditionalExpression ConditionalExpression_188_Var = (ConditionalExpression)AssignmentExpression_187_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_188_Var);
		final LogicalOrExpression LogicalOrExpression_189_Var = (LogicalOrExpression)ConditionalExpression_188_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_189_Var);
		final EList<? extends EObject> Expr_189_list = LogicalOrExpression_189_Var.getExpr();
		Assert.assertNotNull(Expr_189_list);
		Assert.assertEquals(1, Expr_189_list.size());
		final LogicalAndExpression LogicalAndExpression_190_Var = (LogicalAndExpression)Expr_189_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_190_Var);
		final EList<? extends EObject> Expr_190_list = LogicalAndExpression_190_Var.getExpr();
		Assert.assertNotNull(Expr_190_list);
		Assert.assertEquals(1, Expr_190_list.size());
		final InclusiveOrExpression InclusiveOrExpression_191_Var = (InclusiveOrExpression)Expr_190_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_191_Var);
		final EList<? extends EObject> Expr_191_list = InclusiveOrExpression_191_Var.getExpr();
		Assert.assertNotNull(Expr_191_list);
		Assert.assertEquals(1, Expr_191_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_192_Var = (ExclusiveOrExpression)Expr_191_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_192_Var);
		final EList<? extends EObject> Expr_192_list = ExclusiveOrExpression_192_Var.getExpr();
		Assert.assertNotNull(Expr_192_list);
		Assert.assertEquals(1, Expr_192_list.size());
		final AndExpression AndExpression_193_Var = (AndExpression)Expr_192_list.get(0);
		Assert.assertNotNull(AndExpression_193_Var);
		final EList<? extends EObject> Expr_193_list = AndExpression_193_Var.getExpr();
		Assert.assertNotNull(Expr_193_list);
		Assert.assertEquals(1, Expr_193_list.size());
		final EqualityExpression EqualityExpression_194_Var = (EqualityExpression)Expr_193_list.get(0);
		Assert.assertNotNull(EqualityExpression_194_Var);
		final EList<? extends EObject> Expr_194_list = EqualityExpression_194_Var.getExpr();
		Assert.assertNotNull(Expr_194_list);
		Assert.assertEquals(1, Expr_194_list.size());
		final RelationalExpression RelationalExpression_195_Var = (RelationalExpression)Expr_194_list.get(0);
		Assert.assertNotNull(RelationalExpression_195_Var);
		final EList<? extends EObject> Expr_195_list = RelationalExpression_195_Var.getExpr();
		Assert.assertNotNull(Expr_195_list);
		Assert.assertEquals(1, Expr_195_list.size());
		final ShiftExpression ShiftExpression_196_Var = (ShiftExpression)Expr_195_list.get(0);
		Assert.assertNotNull(ShiftExpression_196_Var);
		final EList<? extends EObject> Expr_196_list = ShiftExpression_196_Var.getExpr();
		Assert.assertNotNull(Expr_196_list);
		Assert.assertEquals(1, Expr_196_list.size());
		final AdditiveExpression AdditiveExpression_197_Var = (AdditiveExpression)Expr_196_list.get(0);
		Assert.assertNotNull(AdditiveExpression_197_Var);
		final EList<? extends EObject> Expr_197_list = AdditiveExpression_197_Var.getExpr();
		Assert.assertNotNull(Expr_197_list);
		Assert.assertEquals(1, Expr_197_list.size());
		final MultiplicativeExpression MultiplicativeExpression_198_Var = (MultiplicativeExpression)Expr_197_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_198_Var);
		final EList<? extends EObject> Expr_198_list = MultiplicativeExpression_198_Var.getExpr();
		Assert.assertNotNull(Expr_198_list);
		Assert.assertEquals(1, Expr_198_list.size());
		final CastExpression CastExpression_199_Var = (CastExpression)Expr_198_list.get(0);
		Assert.assertNotNull(CastExpression_199_Var);
		final UnaryExpression UnaryExpression_200_Var = (UnaryExpression)CastExpression_199_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_200_Var);
		Assert.assertEquals("sizeof", UnaryExpression_200_Var.getSizeOf());
		final UnaryExpression UnaryExpression_201_Var = (UnaryExpression)UnaryExpression_200_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_201_Var);
		final PostfixExpression PostfixExpression_202_Var = (PostfixExpression)UnaryExpression_201_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_202_Var);
		final EList<? extends EObject> Expr_202_list = PostfixExpression_202_Var.getExpr();
		Assert.assertNotNull(Expr_202_list);
		Assert.assertEquals(1, Expr_202_list.size());
		final PrimaryExpression PrimaryExpression_203_Var = (PrimaryExpression)Expr_202_list.get(0);
		Assert.assertNotNull(PrimaryExpression_203_Var);
		final Expression Expression_204_Var = (Expression)PrimaryExpression_203_Var.getExpr();
		Assert.assertNotNull(Expression_204_Var);
		final EList<? extends EObject> ExprExpr_204_list = Expression_204_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_204_list);
		Assert.assertEquals(1, ExprExpr_204_list.size());
		final AssignmentExpression AssignmentExpression_205_Var = (AssignmentExpression)ExprExpr_204_list.get(0);
		Assert.assertNotNull(AssignmentExpression_205_Var);
		final ConditionalExpression ConditionalExpression_206_Var = (ConditionalExpression)AssignmentExpression_205_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_206_Var);
		final LogicalOrExpression LogicalOrExpression_207_Var = (LogicalOrExpression)ConditionalExpression_206_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_207_Var);
		final EList<? extends EObject> Expr_207_list = LogicalOrExpression_207_Var.getExpr();
		Assert.assertNotNull(Expr_207_list);
		Assert.assertEquals(1, Expr_207_list.size());
		final LogicalAndExpression LogicalAndExpression_208_Var = (LogicalAndExpression)Expr_207_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_208_Var);
		final EList<? extends EObject> Expr_208_list = LogicalAndExpression_208_Var.getExpr();
		Assert.assertNotNull(Expr_208_list);
		Assert.assertEquals(1, Expr_208_list.size());
		final InclusiveOrExpression InclusiveOrExpression_209_Var = (InclusiveOrExpression)Expr_208_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_209_Var);
		final EList<? extends EObject> Expr_209_list = InclusiveOrExpression_209_Var.getExpr();
		Assert.assertNotNull(Expr_209_list);
		Assert.assertEquals(1, Expr_209_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_210_Var = (ExclusiveOrExpression)Expr_209_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_210_Var);
		final EList<? extends EObject> Expr_210_list = ExclusiveOrExpression_210_Var.getExpr();
		Assert.assertNotNull(Expr_210_list);
		Assert.assertEquals(1, Expr_210_list.size());
		final AndExpression AndExpression_211_Var = (AndExpression)Expr_210_list.get(0);
		Assert.assertNotNull(AndExpression_211_Var);
		final EList<? extends EObject> Expr_211_list = AndExpression_211_Var.getExpr();
		Assert.assertNotNull(Expr_211_list);
		Assert.assertEquals(1, Expr_211_list.size());
		final EqualityExpression EqualityExpression_212_Var = (EqualityExpression)Expr_211_list.get(0);
		Assert.assertNotNull(EqualityExpression_212_Var);
		final EList<? extends EObject> Expr_212_list = EqualityExpression_212_Var.getExpr();
		Assert.assertNotNull(Expr_212_list);
		Assert.assertEquals(1, Expr_212_list.size());
		final RelationalExpression RelationalExpression_213_Var = (RelationalExpression)Expr_212_list.get(0);
		Assert.assertNotNull(RelationalExpression_213_Var);
		final EList<? extends EObject> Expr_213_list = RelationalExpression_213_Var.getExpr();
		Assert.assertNotNull(Expr_213_list);
		Assert.assertEquals(1, Expr_213_list.size());
		final ShiftExpression ShiftExpression_214_Var = (ShiftExpression)Expr_213_list.get(0);
		Assert.assertNotNull(ShiftExpression_214_Var);
		final EList<? extends EObject> Expr_214_list = ShiftExpression_214_Var.getExpr();
		Assert.assertNotNull(Expr_214_list);
		Assert.assertEquals(1, Expr_214_list.size());
		final AdditiveExpression AdditiveExpression_215_Var = (AdditiveExpression)Expr_214_list.get(0);
		Assert.assertNotNull(AdditiveExpression_215_Var);
		final EList<? extends EObject> Expr_215_list = AdditiveExpression_215_Var.getExpr();
		Assert.assertNotNull(Expr_215_list);
		Assert.assertEquals(1, Expr_215_list.size());
		final MultiplicativeExpression MultiplicativeExpression_216_Var = (MultiplicativeExpression)Expr_215_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_216_Var);
		final EList<? extends EObject> Expr_216_list = MultiplicativeExpression_216_Var.getExpr();
		Assert.assertNotNull(Expr_216_list);
		Assert.assertEquals(1, Expr_216_list.size());
		final CastExpression CastExpression_217_Var = (CastExpression)Expr_216_list.get(0);
		Assert.assertNotNull(CastExpression_217_Var);
		final UnaryExpression UnaryExpression_218_Var = (UnaryExpression)CastExpression_217_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_218_Var);
		final PostfixExpression PostfixExpression_219_Var = (PostfixExpression)UnaryExpression_218_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_219_Var);
		final EList<? extends EObject> Expr_219_list = PostfixExpression_219_Var.getExpr();
		Assert.assertNotNull(Expr_219_list);
		Assert.assertEquals(1, Expr_219_list.size());
		final PrimaryExpression PrimaryExpression_220_Var = (PrimaryExpression)Expr_219_list.get(0);
		Assert.assertNotNull(PrimaryExpression_220_Var);
		Assert.assertEquals("number", PrimaryExpression_220_Var.getId());
		Assert.assertEquals("[.]", PostfixExpression_219_Var.getDot().toString());
		Assert.assertEquals("[numChar]", PostfixExpression_219_Var.getId().toString());
		Assert.assertEquals(";", ExpressionStatement_151_Var.getSemi());
		final Statement Statement_221_Var = (Statement)Statement_96_list.get(2);
		Assert.assertNotNull(Statement_221_Var);
		final ExpressionStatement ExpressionStatement_222_Var = (ExpressionStatement)Statement_221_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_222_Var);
		final Expression Expression_223_Var = (Expression)ExpressionStatement_222_Var.getExpression();
		Assert.assertNotNull(Expression_223_Var);
		final EList<? extends EObject> ExprExpr_223_list = Expression_223_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_223_list);
		Assert.assertEquals(1, ExprExpr_223_list.size());
		final AssignmentExpression AssignmentExpression_224_Var = (AssignmentExpression)ExprExpr_223_list.get(0);
		Assert.assertNotNull(AssignmentExpression_224_Var);
		final ConditionalExpression ConditionalExpression_225_Var = (ConditionalExpression)AssignmentExpression_224_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_225_Var);
		final LogicalOrExpression LogicalOrExpression_226_Var = (LogicalOrExpression)ConditionalExpression_225_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_226_Var);
		final EList<? extends EObject> Expr_226_list = LogicalOrExpression_226_Var.getExpr();
		Assert.assertNotNull(Expr_226_list);
		Assert.assertEquals(1, Expr_226_list.size());
		final LogicalAndExpression LogicalAndExpression_227_Var = (LogicalAndExpression)Expr_226_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_227_Var);
		final EList<? extends EObject> Expr_227_list = LogicalAndExpression_227_Var.getExpr();
		Assert.assertNotNull(Expr_227_list);
		Assert.assertEquals(1, Expr_227_list.size());
		final InclusiveOrExpression InclusiveOrExpression_228_Var = (InclusiveOrExpression)Expr_227_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_228_Var);
		final EList<? extends EObject> Expr_228_list = InclusiveOrExpression_228_Var.getExpr();
		Assert.assertNotNull(Expr_228_list);
		Assert.assertEquals(1, Expr_228_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_229_Var = (ExclusiveOrExpression)Expr_228_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_229_Var);
		final EList<? extends EObject> Expr_229_list = ExclusiveOrExpression_229_Var.getExpr();
		Assert.assertNotNull(Expr_229_list);
		Assert.assertEquals(1, Expr_229_list.size());
		final AndExpression AndExpression_230_Var = (AndExpression)Expr_229_list.get(0);
		Assert.assertNotNull(AndExpression_230_Var);
		final EList<? extends EObject> Expr_230_list = AndExpression_230_Var.getExpr();
		Assert.assertNotNull(Expr_230_list);
		Assert.assertEquals(1, Expr_230_list.size());
		final EqualityExpression EqualityExpression_231_Var = (EqualityExpression)Expr_230_list.get(0);
		Assert.assertNotNull(EqualityExpression_231_Var);
		final EList<? extends EObject> Expr_231_list = EqualityExpression_231_Var.getExpr();
		Assert.assertNotNull(Expr_231_list);
		Assert.assertEquals(1, Expr_231_list.size());
		final RelationalExpression RelationalExpression_232_Var = (RelationalExpression)Expr_231_list.get(0);
		Assert.assertNotNull(RelationalExpression_232_Var);
		final EList<? extends EObject> Expr_232_list = RelationalExpression_232_Var.getExpr();
		Assert.assertNotNull(Expr_232_list);
		Assert.assertEquals(1, Expr_232_list.size());
		final ShiftExpression ShiftExpression_233_Var = (ShiftExpression)Expr_232_list.get(0);
		Assert.assertNotNull(ShiftExpression_233_Var);
		final EList<? extends EObject> Expr_233_list = ShiftExpression_233_Var.getExpr();
		Assert.assertNotNull(Expr_233_list);
		Assert.assertEquals(1, Expr_233_list.size());
		final AdditiveExpression AdditiveExpression_234_Var = (AdditiveExpression)Expr_233_list.get(0);
		Assert.assertNotNull(AdditiveExpression_234_Var);
		final EList<? extends EObject> Expr_234_list = AdditiveExpression_234_Var.getExpr();
		Assert.assertNotNull(Expr_234_list);
		Assert.assertEquals(1, Expr_234_list.size());
		final MultiplicativeExpression MultiplicativeExpression_235_Var = (MultiplicativeExpression)Expr_234_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_235_Var);
		final EList<? extends EObject> Expr_235_list = MultiplicativeExpression_235_Var.getExpr();
		Assert.assertNotNull(Expr_235_list);
		Assert.assertEquals(1, Expr_235_list.size());
		final CastExpression CastExpression_236_Var = (CastExpression)Expr_235_list.get(0);
		Assert.assertNotNull(CastExpression_236_Var);
		final UnaryExpression UnaryExpression_237_Var = (UnaryExpression)CastExpression_236_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_237_Var);
		final PostfixExpression PostfixExpression_238_Var = (PostfixExpression)UnaryExpression_237_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_238_Var);
		final EList<? extends EObject> Expr_238_list = PostfixExpression_238_Var.getExpr();
		Assert.assertNotNull(Expr_238_list);
		Assert.assertEquals(1, Expr_238_list.size());
		final PrimaryExpression PrimaryExpression_239_Var = (PrimaryExpression)Expr_238_list.get(0);
		Assert.assertNotNull(PrimaryExpression_239_Var);
		Assert.assertEquals("printf", PrimaryExpression_239_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_239_list = PostfixExpression_238_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_239_list);
		Assert.assertEquals(1, ArgumentExpressionList_239_list.size());
		final ArgumentExpressionList ArgumentExpressionList_240_Var = (ArgumentExpressionList)ArgumentExpressionList_239_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_240_Var);
		final EList<? extends EObject> Expr_240_list = ArgumentExpressionList_240_Var.getExpr();
		Assert.assertNotNull(Expr_240_list);
		Assert.assertEquals(2, Expr_240_list.size());
		final AssignmentExpression AssignmentExpression_241_Var = (AssignmentExpression)Expr_240_list.get(0);
		Assert.assertNotNull(AssignmentExpression_241_Var);
		final ConditionalExpression ConditionalExpression_242_Var = (ConditionalExpression)AssignmentExpression_241_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_242_Var);
		final LogicalOrExpression LogicalOrExpression_243_Var = (LogicalOrExpression)ConditionalExpression_242_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_243_Var);
		final EList<? extends EObject> Expr_243_list = LogicalOrExpression_243_Var.getExpr();
		Assert.assertNotNull(Expr_243_list);
		Assert.assertEquals(1, Expr_243_list.size());
		final LogicalAndExpression LogicalAndExpression_244_Var = (LogicalAndExpression)Expr_243_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_244_Var);
		final EList<? extends EObject> Expr_244_list = LogicalAndExpression_244_Var.getExpr();
		Assert.assertNotNull(Expr_244_list);
		Assert.assertEquals(1, Expr_244_list.size());
		final InclusiveOrExpression InclusiveOrExpression_245_Var = (InclusiveOrExpression)Expr_244_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_245_Var);
		final EList<? extends EObject> Expr_245_list = InclusiveOrExpression_245_Var.getExpr();
		Assert.assertNotNull(Expr_245_list);
		Assert.assertEquals(1, Expr_245_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_246_Var = (ExclusiveOrExpression)Expr_245_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_246_Var);
		final EList<? extends EObject> Expr_246_list = ExclusiveOrExpression_246_Var.getExpr();
		Assert.assertNotNull(Expr_246_list);
		Assert.assertEquals(1, Expr_246_list.size());
		final AndExpression AndExpression_247_Var = (AndExpression)Expr_246_list.get(0);
		Assert.assertNotNull(AndExpression_247_Var);
		final EList<? extends EObject> Expr_247_list = AndExpression_247_Var.getExpr();
		Assert.assertNotNull(Expr_247_list);
		Assert.assertEquals(1, Expr_247_list.size());
		final EqualityExpression EqualityExpression_248_Var = (EqualityExpression)Expr_247_list.get(0);
		Assert.assertNotNull(EqualityExpression_248_Var);
		final EList<? extends EObject> Expr_248_list = EqualityExpression_248_Var.getExpr();
		Assert.assertNotNull(Expr_248_list);
		Assert.assertEquals(1, Expr_248_list.size());
		final RelationalExpression RelationalExpression_249_Var = (RelationalExpression)Expr_248_list.get(0);
		Assert.assertNotNull(RelationalExpression_249_Var);
		final EList<? extends EObject> Expr_249_list = RelationalExpression_249_Var.getExpr();
		Assert.assertNotNull(Expr_249_list);
		Assert.assertEquals(1, Expr_249_list.size());
		final ShiftExpression ShiftExpression_250_Var = (ShiftExpression)Expr_249_list.get(0);
		Assert.assertNotNull(ShiftExpression_250_Var);
		final EList<? extends EObject> Expr_250_list = ShiftExpression_250_Var.getExpr();
		Assert.assertNotNull(Expr_250_list);
		Assert.assertEquals(1, Expr_250_list.size());
		final AdditiveExpression AdditiveExpression_251_Var = (AdditiveExpression)Expr_250_list.get(0);
		Assert.assertNotNull(AdditiveExpression_251_Var);
		final EList<? extends EObject> Expr_251_list = AdditiveExpression_251_Var.getExpr();
		Assert.assertNotNull(Expr_251_list);
		Assert.assertEquals(1, Expr_251_list.size());
		final MultiplicativeExpression MultiplicativeExpression_252_Var = (MultiplicativeExpression)Expr_251_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_252_Var);
		final EList<? extends EObject> Expr_252_list = MultiplicativeExpression_252_Var.getExpr();
		Assert.assertNotNull(Expr_252_list);
		Assert.assertEquals(1, Expr_252_list.size());
		final CastExpression CastExpression_253_Var = (CastExpression)Expr_252_list.get(0);
		Assert.assertNotNull(CastExpression_253_Var);
		final UnaryExpression UnaryExpression_254_Var = (UnaryExpression)CastExpression_253_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_254_Var);
		final PostfixExpression PostfixExpression_255_Var = (PostfixExpression)UnaryExpression_254_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_255_Var);
		final EList<? extends EObject> Expr_255_list = PostfixExpression_255_Var.getExpr();
		Assert.assertNotNull(Expr_255_list);
		Assert.assertEquals(1, Expr_255_list.size());
		final PrimaryExpression PrimaryExpression_256_Var = (PrimaryExpression)Expr_255_list.get(0);
		Assert.assertNotNull(PrimaryExpression_256_Var);
		final Constant Constant_257_Var = (Constant)PrimaryExpression_256_Var.getConst();
		Assert.assertNotNull(Constant_257_Var);
		Assert.assertEquals("\"sizeof(float)=%lu\\n\"", Constant_257_Var.getStr());
		final AssignmentExpression AssignmentExpression_258_Var = (AssignmentExpression)Expr_240_list.get(1);
		Assert.assertNotNull(AssignmentExpression_258_Var);
		final ConditionalExpression ConditionalExpression_259_Var = (ConditionalExpression)AssignmentExpression_258_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_259_Var);
		final LogicalOrExpression LogicalOrExpression_260_Var = (LogicalOrExpression)ConditionalExpression_259_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_260_Var);
		final EList<? extends EObject> Expr_260_list = LogicalOrExpression_260_Var.getExpr();
		Assert.assertNotNull(Expr_260_list);
		Assert.assertEquals(1, Expr_260_list.size());
		final LogicalAndExpression LogicalAndExpression_261_Var = (LogicalAndExpression)Expr_260_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_261_Var);
		final EList<? extends EObject> Expr_261_list = LogicalAndExpression_261_Var.getExpr();
		Assert.assertNotNull(Expr_261_list);
		Assert.assertEquals(1, Expr_261_list.size());
		final InclusiveOrExpression InclusiveOrExpression_262_Var = (InclusiveOrExpression)Expr_261_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_262_Var);
		final EList<? extends EObject> Expr_262_list = InclusiveOrExpression_262_Var.getExpr();
		Assert.assertNotNull(Expr_262_list);
		Assert.assertEquals(1, Expr_262_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_263_Var = (ExclusiveOrExpression)Expr_262_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_263_Var);
		final EList<? extends EObject> Expr_263_list = ExclusiveOrExpression_263_Var.getExpr();
		Assert.assertNotNull(Expr_263_list);
		Assert.assertEquals(1, Expr_263_list.size());
		final AndExpression AndExpression_264_Var = (AndExpression)Expr_263_list.get(0);
		Assert.assertNotNull(AndExpression_264_Var);
		final EList<? extends EObject> Expr_264_list = AndExpression_264_Var.getExpr();
		Assert.assertNotNull(Expr_264_list);
		Assert.assertEquals(1, Expr_264_list.size());
		final EqualityExpression EqualityExpression_265_Var = (EqualityExpression)Expr_264_list.get(0);
		Assert.assertNotNull(EqualityExpression_265_Var);
		final EList<? extends EObject> Expr_265_list = EqualityExpression_265_Var.getExpr();
		Assert.assertNotNull(Expr_265_list);
		Assert.assertEquals(1, Expr_265_list.size());
		final RelationalExpression RelationalExpression_266_Var = (RelationalExpression)Expr_265_list.get(0);
		Assert.assertNotNull(RelationalExpression_266_Var);
		final EList<? extends EObject> Expr_266_list = RelationalExpression_266_Var.getExpr();
		Assert.assertNotNull(Expr_266_list);
		Assert.assertEquals(1, Expr_266_list.size());
		final ShiftExpression ShiftExpression_267_Var = (ShiftExpression)Expr_266_list.get(0);
		Assert.assertNotNull(ShiftExpression_267_Var);
		final EList<? extends EObject> Expr_267_list = ShiftExpression_267_Var.getExpr();
		Assert.assertNotNull(Expr_267_list);
		Assert.assertEquals(1, Expr_267_list.size());
		final AdditiveExpression AdditiveExpression_268_Var = (AdditiveExpression)Expr_267_list.get(0);
		Assert.assertNotNull(AdditiveExpression_268_Var);
		final EList<? extends EObject> Expr_268_list = AdditiveExpression_268_Var.getExpr();
		Assert.assertNotNull(Expr_268_list);
		Assert.assertEquals(1, Expr_268_list.size());
		final MultiplicativeExpression MultiplicativeExpression_269_Var = (MultiplicativeExpression)Expr_268_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_269_Var);
		final EList<? extends EObject> Expr_269_list = MultiplicativeExpression_269_Var.getExpr();
		Assert.assertNotNull(Expr_269_list);
		Assert.assertEquals(1, Expr_269_list.size());
		final CastExpression CastExpression_270_Var = (CastExpression)Expr_269_list.get(0);
		Assert.assertNotNull(CastExpression_270_Var);
		final UnaryExpression UnaryExpression_271_Var = (UnaryExpression)CastExpression_270_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_271_Var);
		Assert.assertEquals("sizeof", UnaryExpression_271_Var.getSizeOf());
		final TypeName TypeName_272_Var = (TypeName)UnaryExpression_271_Var.getTypeName();
		Assert.assertNotNull(TypeName_272_Var);
		final SpecifierQualifierList SpecifierQualifierList_273_Var = (SpecifierQualifierList)TypeName_272_Var.getList();
		Assert.assertNotNull(SpecifierQualifierList_273_Var);
		final EList<? extends EObject> TypeSpecifier_273_list = SpecifierQualifierList_273_Var.getTypeSpecifier();
		Assert.assertNotNull(TypeSpecifier_273_list);
		Assert.assertEquals(1, TypeSpecifier_273_list.size());
		final TypeSpecifier TypeSpecifier_274_Var = (TypeSpecifier)TypeSpecifier_273_list.get(0);
		Assert.assertNotNull(TypeSpecifier_274_Var);
		Assert.assertEquals("float", TypeSpecifier_274_Var.getName());
		Assert.assertEquals(";", ExpressionStatement_222_Var.getSemi());
		final Statement Statement_275_Var = (Statement)Statement_96_list.get(3);
		Assert.assertNotNull(Statement_275_Var);
		final ExpressionStatement ExpressionStatement_276_Var = (ExpressionStatement)Statement_275_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_276_Var);
		final Expression Expression_277_Var = (Expression)ExpressionStatement_276_Var.getExpression();
		Assert.assertNotNull(Expression_277_Var);
		final EList<? extends EObject> ExprExpr_277_list = Expression_277_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_277_list);
		Assert.assertEquals(1, ExprExpr_277_list.size());
		final AssignmentExpression AssignmentExpression_278_Var = (AssignmentExpression)ExprExpr_277_list.get(0);
		Assert.assertNotNull(AssignmentExpression_278_Var);
		final UnaryExpression UnaryExpression_279_Var = (UnaryExpression)AssignmentExpression_278_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_279_Var);
		final PostfixExpression PostfixExpression_280_Var = (PostfixExpression)UnaryExpression_279_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_280_Var);
		final EList<? extends EObject> Expr_280_list = PostfixExpression_280_Var.getExpr();
		Assert.assertNotNull(Expr_280_list);
		Assert.assertEquals(1, Expr_280_list.size());
		final PrimaryExpression PrimaryExpression_281_Var = (PrimaryExpression)Expr_280_list.get(0);
		Assert.assertNotNull(PrimaryExpression_281_Var);
		Assert.assertEquals("number", PrimaryExpression_281_Var.getId());
		Assert.assertEquals("[.]", PostfixExpression_280_Var.getDot().toString());
		Assert.assertEquals("[numChar]", PostfixExpression_280_Var.getId().toString());
		final AssignmentOperator AssignmentOperator_282_Var = (AssignmentOperator)AssignmentExpression_278_Var.getOp();
		Assert.assertNotNull(AssignmentOperator_282_Var);
		Assert.assertEquals("=", AssignmentOperator_282_Var.getOp());
		final AssignmentExpression AssignmentExpression_283_Var = (AssignmentExpression)AssignmentExpression_278_Var.getAssignmentExpr();
		Assert.assertNotNull(AssignmentExpression_283_Var);
		final ConditionalExpression ConditionalExpression_284_Var = (ConditionalExpression)AssignmentExpression_283_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_284_Var);
		final LogicalOrExpression LogicalOrExpression_285_Var = (LogicalOrExpression)ConditionalExpression_284_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_285_Var);
		final EList<? extends EObject> Expr_285_list = LogicalOrExpression_285_Var.getExpr();
		Assert.assertNotNull(Expr_285_list);
		Assert.assertEquals(1, Expr_285_list.size());
		final LogicalAndExpression LogicalAndExpression_286_Var = (LogicalAndExpression)Expr_285_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_286_Var);
		final EList<? extends EObject> Expr_286_list = LogicalAndExpression_286_Var.getExpr();
		Assert.assertNotNull(Expr_286_list);
		Assert.assertEquals(1, Expr_286_list.size());
		final InclusiveOrExpression InclusiveOrExpression_287_Var = (InclusiveOrExpression)Expr_286_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_287_Var);
		final EList<? extends EObject> Expr_287_list = InclusiveOrExpression_287_Var.getExpr();
		Assert.assertNotNull(Expr_287_list);
		Assert.assertEquals(1, Expr_287_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_288_Var = (ExclusiveOrExpression)Expr_287_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_288_Var);
		final EList<? extends EObject> Expr_288_list = ExclusiveOrExpression_288_Var.getExpr();
		Assert.assertNotNull(Expr_288_list);
		Assert.assertEquals(1, Expr_288_list.size());
		final AndExpression AndExpression_289_Var = (AndExpression)Expr_288_list.get(0);
		Assert.assertNotNull(AndExpression_289_Var);
		final EList<? extends EObject> Expr_289_list = AndExpression_289_Var.getExpr();
		Assert.assertNotNull(Expr_289_list);
		Assert.assertEquals(1, Expr_289_list.size());
		final EqualityExpression EqualityExpression_290_Var = (EqualityExpression)Expr_289_list.get(0);
		Assert.assertNotNull(EqualityExpression_290_Var);
		final EList<? extends EObject> Expr_290_list = EqualityExpression_290_Var.getExpr();
		Assert.assertNotNull(Expr_290_list);
		Assert.assertEquals(1, Expr_290_list.size());
		final RelationalExpression RelationalExpression_291_Var = (RelationalExpression)Expr_290_list.get(0);
		Assert.assertNotNull(RelationalExpression_291_Var);
		final EList<? extends EObject> Expr_291_list = RelationalExpression_291_Var.getExpr();
		Assert.assertNotNull(Expr_291_list);
		Assert.assertEquals(1, Expr_291_list.size());
		final ShiftExpression ShiftExpression_292_Var = (ShiftExpression)Expr_291_list.get(0);
		Assert.assertNotNull(ShiftExpression_292_Var);
		final EList<? extends EObject> Expr_292_list = ShiftExpression_292_Var.getExpr();
		Assert.assertNotNull(Expr_292_list);
		Assert.assertEquals(1, Expr_292_list.size());
		final AdditiveExpression AdditiveExpression_293_Var = (AdditiveExpression)Expr_292_list.get(0);
		Assert.assertNotNull(AdditiveExpression_293_Var);
		final EList<? extends EObject> Expr_293_list = AdditiveExpression_293_Var.getExpr();
		Assert.assertNotNull(Expr_293_list);
		Assert.assertEquals(1, Expr_293_list.size());
		final MultiplicativeExpression MultiplicativeExpression_294_Var = (MultiplicativeExpression)Expr_293_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_294_Var);
		final EList<? extends EObject> Expr_294_list = MultiplicativeExpression_294_Var.getExpr();
		Assert.assertNotNull(Expr_294_list);
		Assert.assertEquals(1, Expr_294_list.size());
		final CastExpression CastExpression_295_Var = (CastExpression)Expr_294_list.get(0);
		Assert.assertNotNull(CastExpression_295_Var);
		final UnaryExpression UnaryExpression_296_Var = (UnaryExpression)CastExpression_295_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_296_Var);
		final PostfixExpression PostfixExpression_297_Var = (PostfixExpression)UnaryExpression_296_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_297_Var);
		final EList<? extends EObject> Expr_297_list = PostfixExpression_297_Var.getExpr();
		Assert.assertNotNull(Expr_297_list);
		Assert.assertEquals(1, Expr_297_list.size());
		final PrimaryExpression PrimaryExpression_298_Var = (PrimaryExpression)Expr_297_list.get(0);
		Assert.assertNotNull(PrimaryExpression_298_Var);
		final Constant Constant_299_Var = (Constant)PrimaryExpression_298_Var.getConst();
		Assert.assertNotNull(Constant_299_Var);
		Assert.assertEquals("65", Constant_299_Var.getDec());
		Assert.assertEquals(";", ExpressionStatement_276_Var.getSemi());
		final Statement Statement_300_Var = (Statement)Statement_96_list.get(4);
		Assert.assertNotNull(Statement_300_Var);
		final ExpressionStatement ExpressionStatement_301_Var = (ExpressionStatement)Statement_300_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_301_Var);
		final Expression Expression_302_Var = (Expression)ExpressionStatement_301_Var.getExpression();
		Assert.assertNotNull(Expression_302_Var);
		final EList<? extends EObject> ExprExpr_302_list = Expression_302_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_302_list);
		Assert.assertEquals(1, ExprExpr_302_list.size());
		final AssignmentExpression AssignmentExpression_303_Var = (AssignmentExpression)ExprExpr_302_list.get(0);
		Assert.assertNotNull(AssignmentExpression_303_Var);
		final ConditionalExpression ConditionalExpression_304_Var = (ConditionalExpression)AssignmentExpression_303_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_304_Var);
		final LogicalOrExpression LogicalOrExpression_305_Var = (LogicalOrExpression)ConditionalExpression_304_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_305_Var);
		final EList<? extends EObject> Expr_305_list = LogicalOrExpression_305_Var.getExpr();
		Assert.assertNotNull(Expr_305_list);
		Assert.assertEquals(1, Expr_305_list.size());
		final LogicalAndExpression LogicalAndExpression_306_Var = (LogicalAndExpression)Expr_305_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_306_Var);
		final EList<? extends EObject> Expr_306_list = LogicalAndExpression_306_Var.getExpr();
		Assert.assertNotNull(Expr_306_list);
		Assert.assertEquals(1, Expr_306_list.size());
		final InclusiveOrExpression InclusiveOrExpression_307_Var = (InclusiveOrExpression)Expr_306_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_307_Var);
		final EList<? extends EObject> Expr_307_list = InclusiveOrExpression_307_Var.getExpr();
		Assert.assertNotNull(Expr_307_list);
		Assert.assertEquals(1, Expr_307_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_308_Var = (ExclusiveOrExpression)Expr_307_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_308_Var);
		final EList<? extends EObject> Expr_308_list = ExclusiveOrExpression_308_Var.getExpr();
		Assert.assertNotNull(Expr_308_list);
		Assert.assertEquals(1, Expr_308_list.size());
		final AndExpression AndExpression_309_Var = (AndExpression)Expr_308_list.get(0);
		Assert.assertNotNull(AndExpression_309_Var);
		final EList<? extends EObject> Expr_309_list = AndExpression_309_Var.getExpr();
		Assert.assertNotNull(Expr_309_list);
		Assert.assertEquals(1, Expr_309_list.size());
		final EqualityExpression EqualityExpression_310_Var = (EqualityExpression)Expr_309_list.get(0);
		Assert.assertNotNull(EqualityExpression_310_Var);
		final EList<? extends EObject> Expr_310_list = EqualityExpression_310_Var.getExpr();
		Assert.assertNotNull(Expr_310_list);
		Assert.assertEquals(1, Expr_310_list.size());
		final RelationalExpression RelationalExpression_311_Var = (RelationalExpression)Expr_310_list.get(0);
		Assert.assertNotNull(RelationalExpression_311_Var);
		final EList<? extends EObject> Expr_311_list = RelationalExpression_311_Var.getExpr();
		Assert.assertNotNull(Expr_311_list);
		Assert.assertEquals(1, Expr_311_list.size());
		final ShiftExpression ShiftExpression_312_Var = (ShiftExpression)Expr_311_list.get(0);
		Assert.assertNotNull(ShiftExpression_312_Var);
		final EList<? extends EObject> Expr_312_list = ShiftExpression_312_Var.getExpr();
		Assert.assertNotNull(Expr_312_list);
		Assert.assertEquals(1, Expr_312_list.size());
		final AdditiveExpression AdditiveExpression_313_Var = (AdditiveExpression)Expr_312_list.get(0);
		Assert.assertNotNull(AdditiveExpression_313_Var);
		final EList<? extends EObject> Expr_313_list = AdditiveExpression_313_Var.getExpr();
		Assert.assertNotNull(Expr_313_list);
		Assert.assertEquals(1, Expr_313_list.size());
		final MultiplicativeExpression MultiplicativeExpression_314_Var = (MultiplicativeExpression)Expr_313_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_314_Var);
		final EList<? extends EObject> Expr_314_list = MultiplicativeExpression_314_Var.getExpr();
		Assert.assertNotNull(Expr_314_list);
		Assert.assertEquals(1, Expr_314_list.size());
		final CastExpression CastExpression_315_Var = (CastExpression)Expr_314_list.get(0);
		Assert.assertNotNull(CastExpression_315_Var);
		final UnaryExpression UnaryExpression_316_Var = (UnaryExpression)CastExpression_315_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_316_Var);
		final PostfixExpression PostfixExpression_317_Var = (PostfixExpression)UnaryExpression_316_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_317_Var);
		final EList<? extends EObject> Expr_317_list = PostfixExpression_317_Var.getExpr();
		Assert.assertNotNull(Expr_317_list);
		Assert.assertEquals(1, Expr_317_list.size());
		final PrimaryExpression PrimaryExpression_318_Var = (PrimaryExpression)Expr_317_list.get(0);
		Assert.assertNotNull(PrimaryExpression_318_Var);
		Assert.assertEquals("printf", PrimaryExpression_318_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_318_list = PostfixExpression_317_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_318_list);
		Assert.assertEquals(1, ArgumentExpressionList_318_list.size());
		final ArgumentExpressionList ArgumentExpressionList_319_Var = (ArgumentExpressionList)ArgumentExpressionList_318_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_319_Var);
		final EList<? extends EObject> Expr_319_list = ArgumentExpressionList_319_Var.getExpr();
		Assert.assertNotNull(Expr_319_list);
		Assert.assertEquals(2, Expr_319_list.size());
		final AssignmentExpression AssignmentExpression_320_Var = (AssignmentExpression)Expr_319_list.get(0);
		Assert.assertNotNull(AssignmentExpression_320_Var);
		final ConditionalExpression ConditionalExpression_321_Var = (ConditionalExpression)AssignmentExpression_320_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_321_Var);
		final LogicalOrExpression LogicalOrExpression_322_Var = (LogicalOrExpression)ConditionalExpression_321_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_322_Var);
		final EList<? extends EObject> Expr_322_list = LogicalOrExpression_322_Var.getExpr();
		Assert.assertNotNull(Expr_322_list);
		Assert.assertEquals(1, Expr_322_list.size());
		final LogicalAndExpression LogicalAndExpression_323_Var = (LogicalAndExpression)Expr_322_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_323_Var);
		final EList<? extends EObject> Expr_323_list = LogicalAndExpression_323_Var.getExpr();
		Assert.assertNotNull(Expr_323_list);
		Assert.assertEquals(1, Expr_323_list.size());
		final InclusiveOrExpression InclusiveOrExpression_324_Var = (InclusiveOrExpression)Expr_323_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_324_Var);
		final EList<? extends EObject> Expr_324_list = InclusiveOrExpression_324_Var.getExpr();
		Assert.assertNotNull(Expr_324_list);
		Assert.assertEquals(1, Expr_324_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_325_Var = (ExclusiveOrExpression)Expr_324_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_325_Var);
		final EList<? extends EObject> Expr_325_list = ExclusiveOrExpression_325_Var.getExpr();
		Assert.assertNotNull(Expr_325_list);
		Assert.assertEquals(1, Expr_325_list.size());
		final AndExpression AndExpression_326_Var = (AndExpression)Expr_325_list.get(0);
		Assert.assertNotNull(AndExpression_326_Var);
		final EList<? extends EObject> Expr_326_list = AndExpression_326_Var.getExpr();
		Assert.assertNotNull(Expr_326_list);
		Assert.assertEquals(1, Expr_326_list.size());
		final EqualityExpression EqualityExpression_327_Var = (EqualityExpression)Expr_326_list.get(0);
		Assert.assertNotNull(EqualityExpression_327_Var);
		final EList<? extends EObject> Expr_327_list = EqualityExpression_327_Var.getExpr();
		Assert.assertNotNull(Expr_327_list);
		Assert.assertEquals(1, Expr_327_list.size());
		final RelationalExpression RelationalExpression_328_Var = (RelationalExpression)Expr_327_list.get(0);
		Assert.assertNotNull(RelationalExpression_328_Var);
		final EList<? extends EObject> Expr_328_list = RelationalExpression_328_Var.getExpr();
		Assert.assertNotNull(Expr_328_list);
		Assert.assertEquals(1, Expr_328_list.size());
		final ShiftExpression ShiftExpression_329_Var = (ShiftExpression)Expr_328_list.get(0);
		Assert.assertNotNull(ShiftExpression_329_Var);
		final EList<? extends EObject> Expr_329_list = ShiftExpression_329_Var.getExpr();
		Assert.assertNotNull(Expr_329_list);
		Assert.assertEquals(1, Expr_329_list.size());
		final AdditiveExpression AdditiveExpression_330_Var = (AdditiveExpression)Expr_329_list.get(0);
		Assert.assertNotNull(AdditiveExpression_330_Var);
		final EList<? extends EObject> Expr_330_list = AdditiveExpression_330_Var.getExpr();
		Assert.assertNotNull(Expr_330_list);
		Assert.assertEquals(1, Expr_330_list.size());
		final MultiplicativeExpression MultiplicativeExpression_331_Var = (MultiplicativeExpression)Expr_330_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_331_Var);
		final EList<? extends EObject> Expr_331_list = MultiplicativeExpression_331_Var.getExpr();
		Assert.assertNotNull(Expr_331_list);
		Assert.assertEquals(1, Expr_331_list.size());
		final CastExpression CastExpression_332_Var = (CastExpression)Expr_331_list.get(0);
		Assert.assertNotNull(CastExpression_332_Var);
		final UnaryExpression UnaryExpression_333_Var = (UnaryExpression)CastExpression_332_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_333_Var);
		final PostfixExpression PostfixExpression_334_Var = (PostfixExpression)UnaryExpression_333_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_334_Var);
		final EList<? extends EObject> Expr_334_list = PostfixExpression_334_Var.getExpr();
		Assert.assertNotNull(Expr_334_list);
		Assert.assertEquals(1, Expr_334_list.size());
		final PrimaryExpression PrimaryExpression_335_Var = (PrimaryExpression)Expr_334_list.get(0);
		Assert.assertNotNull(PrimaryExpression_335_Var);
		final Constant Constant_336_Var = (Constant)PrimaryExpression_335_Var.getConst();
		Assert.assertNotNull(Constant_336_Var);
		Assert.assertEquals("\"number.numChar(as decimal)=%d\\n\"", Constant_336_Var.getStr());
		final AssignmentExpression AssignmentExpression_337_Var = (AssignmentExpression)Expr_319_list.get(1);
		Assert.assertNotNull(AssignmentExpression_337_Var);
		final ConditionalExpression ConditionalExpression_338_Var = (ConditionalExpression)AssignmentExpression_337_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_338_Var);
		final LogicalOrExpression LogicalOrExpression_339_Var = (LogicalOrExpression)ConditionalExpression_338_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_339_Var);
		final EList<? extends EObject> Expr_339_list = LogicalOrExpression_339_Var.getExpr();
		Assert.assertNotNull(Expr_339_list);
		Assert.assertEquals(1, Expr_339_list.size());
		final LogicalAndExpression LogicalAndExpression_340_Var = (LogicalAndExpression)Expr_339_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_340_Var);
		final EList<? extends EObject> Expr_340_list = LogicalAndExpression_340_Var.getExpr();
		Assert.assertNotNull(Expr_340_list);
		Assert.assertEquals(1, Expr_340_list.size());
		final InclusiveOrExpression InclusiveOrExpression_341_Var = (InclusiveOrExpression)Expr_340_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_341_Var);
		final EList<? extends EObject> Expr_341_list = InclusiveOrExpression_341_Var.getExpr();
		Assert.assertNotNull(Expr_341_list);
		Assert.assertEquals(1, Expr_341_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_342_Var = (ExclusiveOrExpression)Expr_341_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_342_Var);
		final EList<? extends EObject> Expr_342_list = ExclusiveOrExpression_342_Var.getExpr();
		Assert.assertNotNull(Expr_342_list);
		Assert.assertEquals(1, Expr_342_list.size());
		final AndExpression AndExpression_343_Var = (AndExpression)Expr_342_list.get(0);
		Assert.assertNotNull(AndExpression_343_Var);
		final EList<? extends EObject> Expr_343_list = AndExpression_343_Var.getExpr();
		Assert.assertNotNull(Expr_343_list);
		Assert.assertEquals(1, Expr_343_list.size());
		final EqualityExpression EqualityExpression_344_Var = (EqualityExpression)Expr_343_list.get(0);
		Assert.assertNotNull(EqualityExpression_344_Var);
		final EList<? extends EObject> Expr_344_list = EqualityExpression_344_Var.getExpr();
		Assert.assertNotNull(Expr_344_list);
		Assert.assertEquals(1, Expr_344_list.size());
		final RelationalExpression RelationalExpression_345_Var = (RelationalExpression)Expr_344_list.get(0);
		Assert.assertNotNull(RelationalExpression_345_Var);
		final EList<? extends EObject> Expr_345_list = RelationalExpression_345_Var.getExpr();
		Assert.assertNotNull(Expr_345_list);
		Assert.assertEquals(1, Expr_345_list.size());
		final ShiftExpression ShiftExpression_346_Var = (ShiftExpression)Expr_345_list.get(0);
		Assert.assertNotNull(ShiftExpression_346_Var);
		final EList<? extends EObject> Expr_346_list = ShiftExpression_346_Var.getExpr();
		Assert.assertNotNull(Expr_346_list);
		Assert.assertEquals(1, Expr_346_list.size());
		final AdditiveExpression AdditiveExpression_347_Var = (AdditiveExpression)Expr_346_list.get(0);
		Assert.assertNotNull(AdditiveExpression_347_Var);
		final EList<? extends EObject> Expr_347_list = AdditiveExpression_347_Var.getExpr();
		Assert.assertNotNull(Expr_347_list);
		Assert.assertEquals(1, Expr_347_list.size());
		final MultiplicativeExpression MultiplicativeExpression_348_Var = (MultiplicativeExpression)Expr_347_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_348_Var);
		final EList<? extends EObject> Expr_348_list = MultiplicativeExpression_348_Var.getExpr();
		Assert.assertNotNull(Expr_348_list);
		Assert.assertEquals(1, Expr_348_list.size());
		final CastExpression CastExpression_349_Var = (CastExpression)Expr_348_list.get(0);
		Assert.assertNotNull(CastExpression_349_Var);
		final UnaryExpression UnaryExpression_350_Var = (UnaryExpression)CastExpression_349_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_350_Var);
		final PostfixExpression PostfixExpression_351_Var = (PostfixExpression)UnaryExpression_350_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_351_Var);
		final EList<? extends EObject> Expr_351_list = PostfixExpression_351_Var.getExpr();
		Assert.assertNotNull(Expr_351_list);
		Assert.assertEquals(1, Expr_351_list.size());
		final PrimaryExpression PrimaryExpression_352_Var = (PrimaryExpression)Expr_351_list.get(0);
		Assert.assertNotNull(PrimaryExpression_352_Var);
		Assert.assertEquals("number", PrimaryExpression_352_Var.getId());
		Assert.assertEquals("[.]", PostfixExpression_351_Var.getDot().toString());
		Assert.assertEquals("[numChar]", PostfixExpression_351_Var.getId().toString());
		Assert.assertEquals(";", ExpressionStatement_301_Var.getSemi());
		final Statement Statement_353_Var = (Statement)Statement_96_list.get(5);
		Assert.assertNotNull(Statement_353_Var);
		final ExpressionStatement ExpressionStatement_354_Var = (ExpressionStatement)Statement_353_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_354_Var);
		final Expression Expression_355_Var = (Expression)ExpressionStatement_354_Var.getExpression();
		Assert.assertNotNull(Expression_355_Var);
		final EList<? extends EObject> ExprExpr_355_list = Expression_355_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_355_list);
		Assert.assertEquals(1, ExprExpr_355_list.size());
		final AssignmentExpression AssignmentExpression_356_Var = (AssignmentExpression)ExprExpr_355_list.get(0);
		Assert.assertNotNull(AssignmentExpression_356_Var);
		final ConditionalExpression ConditionalExpression_357_Var = (ConditionalExpression)AssignmentExpression_356_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_357_Var);
		final LogicalOrExpression LogicalOrExpression_358_Var = (LogicalOrExpression)ConditionalExpression_357_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_358_Var);
		final EList<? extends EObject> Expr_358_list = LogicalOrExpression_358_Var.getExpr();
		Assert.assertNotNull(Expr_358_list);
		Assert.assertEquals(1, Expr_358_list.size());
		final LogicalAndExpression LogicalAndExpression_359_Var = (LogicalAndExpression)Expr_358_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_359_Var);
		final EList<? extends EObject> Expr_359_list = LogicalAndExpression_359_Var.getExpr();
		Assert.assertNotNull(Expr_359_list);
		Assert.assertEquals(1, Expr_359_list.size());
		final InclusiveOrExpression InclusiveOrExpression_360_Var = (InclusiveOrExpression)Expr_359_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_360_Var);
		final EList<? extends EObject> Expr_360_list = InclusiveOrExpression_360_Var.getExpr();
		Assert.assertNotNull(Expr_360_list);
		Assert.assertEquals(1, Expr_360_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_361_Var = (ExclusiveOrExpression)Expr_360_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_361_Var);
		final EList<? extends EObject> Expr_361_list = ExclusiveOrExpression_361_Var.getExpr();
		Assert.assertNotNull(Expr_361_list);
		Assert.assertEquals(1, Expr_361_list.size());
		final AndExpression AndExpression_362_Var = (AndExpression)Expr_361_list.get(0);
		Assert.assertNotNull(AndExpression_362_Var);
		final EList<? extends EObject> Expr_362_list = AndExpression_362_Var.getExpr();
		Assert.assertNotNull(Expr_362_list);
		Assert.assertEquals(1, Expr_362_list.size());
		final EqualityExpression EqualityExpression_363_Var = (EqualityExpression)Expr_362_list.get(0);
		Assert.assertNotNull(EqualityExpression_363_Var);
		final EList<? extends EObject> Expr_363_list = EqualityExpression_363_Var.getExpr();
		Assert.assertNotNull(Expr_363_list);
		Assert.assertEquals(1, Expr_363_list.size());
		final RelationalExpression RelationalExpression_364_Var = (RelationalExpression)Expr_363_list.get(0);
		Assert.assertNotNull(RelationalExpression_364_Var);
		final EList<? extends EObject> Expr_364_list = RelationalExpression_364_Var.getExpr();
		Assert.assertNotNull(Expr_364_list);
		Assert.assertEquals(1, Expr_364_list.size());
		final ShiftExpression ShiftExpression_365_Var = (ShiftExpression)Expr_364_list.get(0);
		Assert.assertNotNull(ShiftExpression_365_Var);
		final EList<? extends EObject> Expr_365_list = ShiftExpression_365_Var.getExpr();
		Assert.assertNotNull(Expr_365_list);
		Assert.assertEquals(1, Expr_365_list.size());
		final AdditiveExpression AdditiveExpression_366_Var = (AdditiveExpression)Expr_365_list.get(0);
		Assert.assertNotNull(AdditiveExpression_366_Var);
		final EList<? extends EObject> Expr_366_list = AdditiveExpression_366_Var.getExpr();
		Assert.assertNotNull(Expr_366_list);
		Assert.assertEquals(1, Expr_366_list.size());
		final MultiplicativeExpression MultiplicativeExpression_367_Var = (MultiplicativeExpression)Expr_366_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_367_Var);
		final EList<? extends EObject> Expr_367_list = MultiplicativeExpression_367_Var.getExpr();
		Assert.assertNotNull(Expr_367_list);
		Assert.assertEquals(1, Expr_367_list.size());
		final CastExpression CastExpression_368_Var = (CastExpression)Expr_367_list.get(0);
		Assert.assertNotNull(CastExpression_368_Var);
		final UnaryExpression UnaryExpression_369_Var = (UnaryExpression)CastExpression_368_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_369_Var);
		final PostfixExpression PostfixExpression_370_Var = (PostfixExpression)UnaryExpression_369_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_370_Var);
		final EList<? extends EObject> Expr_370_list = PostfixExpression_370_Var.getExpr();
		Assert.assertNotNull(Expr_370_list);
		Assert.assertEquals(1, Expr_370_list.size());
		final PrimaryExpression PrimaryExpression_371_Var = (PrimaryExpression)Expr_370_list.get(0);
		Assert.assertNotNull(PrimaryExpression_371_Var);
		Assert.assertEquals("printf", PrimaryExpression_371_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_371_list = PostfixExpression_370_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_371_list);
		Assert.assertEquals(1, ArgumentExpressionList_371_list.size());
		final ArgumentExpressionList ArgumentExpressionList_372_Var = (ArgumentExpressionList)ArgumentExpressionList_371_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_372_Var);
		final EList<? extends EObject> Expr_372_list = ArgumentExpressionList_372_Var.getExpr();
		Assert.assertNotNull(Expr_372_list);
		Assert.assertEquals(2, Expr_372_list.size());
		final AssignmentExpression AssignmentExpression_373_Var = (AssignmentExpression)Expr_372_list.get(0);
		Assert.assertNotNull(AssignmentExpression_373_Var);
		final ConditionalExpression ConditionalExpression_374_Var = (ConditionalExpression)AssignmentExpression_373_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_374_Var);
		final LogicalOrExpression LogicalOrExpression_375_Var = (LogicalOrExpression)ConditionalExpression_374_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_375_Var);
		final EList<? extends EObject> Expr_375_list = LogicalOrExpression_375_Var.getExpr();
		Assert.assertNotNull(Expr_375_list);
		Assert.assertEquals(1, Expr_375_list.size());
		final LogicalAndExpression LogicalAndExpression_376_Var = (LogicalAndExpression)Expr_375_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_376_Var);
		final EList<? extends EObject> Expr_376_list = LogicalAndExpression_376_Var.getExpr();
		Assert.assertNotNull(Expr_376_list);
		Assert.assertEquals(1, Expr_376_list.size());
		final InclusiveOrExpression InclusiveOrExpression_377_Var = (InclusiveOrExpression)Expr_376_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_377_Var);
		final EList<? extends EObject> Expr_377_list = InclusiveOrExpression_377_Var.getExpr();
		Assert.assertNotNull(Expr_377_list);
		Assert.assertEquals(1, Expr_377_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_378_Var = (ExclusiveOrExpression)Expr_377_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_378_Var);
		final EList<? extends EObject> Expr_378_list = ExclusiveOrExpression_378_Var.getExpr();
		Assert.assertNotNull(Expr_378_list);
		Assert.assertEquals(1, Expr_378_list.size());
		final AndExpression AndExpression_379_Var = (AndExpression)Expr_378_list.get(0);
		Assert.assertNotNull(AndExpression_379_Var);
		final EList<? extends EObject> Expr_379_list = AndExpression_379_Var.getExpr();
		Assert.assertNotNull(Expr_379_list);
		Assert.assertEquals(1, Expr_379_list.size());
		final EqualityExpression EqualityExpression_380_Var = (EqualityExpression)Expr_379_list.get(0);
		Assert.assertNotNull(EqualityExpression_380_Var);
		final EList<? extends EObject> Expr_380_list = EqualityExpression_380_Var.getExpr();
		Assert.assertNotNull(Expr_380_list);
		Assert.assertEquals(1, Expr_380_list.size());
		final RelationalExpression RelationalExpression_381_Var = (RelationalExpression)Expr_380_list.get(0);
		Assert.assertNotNull(RelationalExpression_381_Var);
		final EList<? extends EObject> Expr_381_list = RelationalExpression_381_Var.getExpr();
		Assert.assertNotNull(Expr_381_list);
		Assert.assertEquals(1, Expr_381_list.size());
		final ShiftExpression ShiftExpression_382_Var = (ShiftExpression)Expr_381_list.get(0);
		Assert.assertNotNull(ShiftExpression_382_Var);
		final EList<? extends EObject> Expr_382_list = ShiftExpression_382_Var.getExpr();
		Assert.assertNotNull(Expr_382_list);
		Assert.assertEquals(1, Expr_382_list.size());
		final AdditiveExpression AdditiveExpression_383_Var = (AdditiveExpression)Expr_382_list.get(0);
		Assert.assertNotNull(AdditiveExpression_383_Var);
		final EList<? extends EObject> Expr_383_list = AdditiveExpression_383_Var.getExpr();
		Assert.assertNotNull(Expr_383_list);
		Assert.assertEquals(1, Expr_383_list.size());
		final MultiplicativeExpression MultiplicativeExpression_384_Var = (MultiplicativeExpression)Expr_383_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_384_Var);
		final EList<? extends EObject> Expr_384_list = MultiplicativeExpression_384_Var.getExpr();
		Assert.assertNotNull(Expr_384_list);
		Assert.assertEquals(1, Expr_384_list.size());
		final CastExpression CastExpression_385_Var = (CastExpression)Expr_384_list.get(0);
		Assert.assertNotNull(CastExpression_385_Var);
		final UnaryExpression UnaryExpression_386_Var = (UnaryExpression)CastExpression_385_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_386_Var);
		final PostfixExpression PostfixExpression_387_Var = (PostfixExpression)UnaryExpression_386_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_387_Var);
		final EList<? extends EObject> Expr_387_list = PostfixExpression_387_Var.getExpr();
		Assert.assertNotNull(Expr_387_list);
		Assert.assertEquals(1, Expr_387_list.size());
		final PrimaryExpression PrimaryExpression_388_Var = (PrimaryExpression)Expr_387_list.get(0);
		Assert.assertNotNull(PrimaryExpression_388_Var);
		final Constant Constant_389_Var = (Constant)PrimaryExpression_388_Var.getConst();
		Assert.assertNotNull(Constant_389_Var);
		Assert.assertEquals("\"number.numChar(as char)=%c\\n\"", Constant_389_Var.getStr());
		final AssignmentExpression AssignmentExpression_390_Var = (AssignmentExpression)Expr_372_list.get(1);
		Assert.assertNotNull(AssignmentExpression_390_Var);
		final ConditionalExpression ConditionalExpression_391_Var = (ConditionalExpression)AssignmentExpression_390_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_391_Var);
		final LogicalOrExpression LogicalOrExpression_392_Var = (LogicalOrExpression)ConditionalExpression_391_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_392_Var);
		final EList<? extends EObject> Expr_392_list = LogicalOrExpression_392_Var.getExpr();
		Assert.assertNotNull(Expr_392_list);
		Assert.assertEquals(1, Expr_392_list.size());
		final LogicalAndExpression LogicalAndExpression_393_Var = (LogicalAndExpression)Expr_392_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_393_Var);
		final EList<? extends EObject> Expr_393_list = LogicalAndExpression_393_Var.getExpr();
		Assert.assertNotNull(Expr_393_list);
		Assert.assertEquals(1, Expr_393_list.size());
		final InclusiveOrExpression InclusiveOrExpression_394_Var = (InclusiveOrExpression)Expr_393_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_394_Var);
		final EList<? extends EObject> Expr_394_list = InclusiveOrExpression_394_Var.getExpr();
		Assert.assertNotNull(Expr_394_list);
		Assert.assertEquals(1, Expr_394_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_395_Var = (ExclusiveOrExpression)Expr_394_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_395_Var);
		final EList<? extends EObject> Expr_395_list = ExclusiveOrExpression_395_Var.getExpr();
		Assert.assertNotNull(Expr_395_list);
		Assert.assertEquals(1, Expr_395_list.size());
		final AndExpression AndExpression_396_Var = (AndExpression)Expr_395_list.get(0);
		Assert.assertNotNull(AndExpression_396_Var);
		final EList<? extends EObject> Expr_396_list = AndExpression_396_Var.getExpr();
		Assert.assertNotNull(Expr_396_list);
		Assert.assertEquals(1, Expr_396_list.size());
		final EqualityExpression EqualityExpression_397_Var = (EqualityExpression)Expr_396_list.get(0);
		Assert.assertNotNull(EqualityExpression_397_Var);
		final EList<? extends EObject> Expr_397_list = EqualityExpression_397_Var.getExpr();
		Assert.assertNotNull(Expr_397_list);
		Assert.assertEquals(1, Expr_397_list.size());
		final RelationalExpression RelationalExpression_398_Var = (RelationalExpression)Expr_397_list.get(0);
		Assert.assertNotNull(RelationalExpression_398_Var);
		final EList<? extends EObject> Expr_398_list = RelationalExpression_398_Var.getExpr();
		Assert.assertNotNull(Expr_398_list);
		Assert.assertEquals(1, Expr_398_list.size());
		final ShiftExpression ShiftExpression_399_Var = (ShiftExpression)Expr_398_list.get(0);
		Assert.assertNotNull(ShiftExpression_399_Var);
		final EList<? extends EObject> Expr_399_list = ShiftExpression_399_Var.getExpr();
		Assert.assertNotNull(Expr_399_list);
		Assert.assertEquals(1, Expr_399_list.size());
		final AdditiveExpression AdditiveExpression_400_Var = (AdditiveExpression)Expr_399_list.get(0);
		Assert.assertNotNull(AdditiveExpression_400_Var);
		final EList<? extends EObject> Expr_400_list = AdditiveExpression_400_Var.getExpr();
		Assert.assertNotNull(Expr_400_list);
		Assert.assertEquals(1, Expr_400_list.size());
		final MultiplicativeExpression MultiplicativeExpression_401_Var = (MultiplicativeExpression)Expr_400_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_401_Var);
		final EList<? extends EObject> Expr_401_list = MultiplicativeExpression_401_Var.getExpr();
		Assert.assertNotNull(Expr_401_list);
		Assert.assertEquals(1, Expr_401_list.size());
		final CastExpression CastExpression_402_Var = (CastExpression)Expr_401_list.get(0);
		Assert.assertNotNull(CastExpression_402_Var);
		final UnaryExpression UnaryExpression_403_Var = (UnaryExpression)CastExpression_402_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_403_Var);
		final PostfixExpression PostfixExpression_404_Var = (PostfixExpression)UnaryExpression_403_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_404_Var);
		final EList<? extends EObject> Expr_404_list = PostfixExpression_404_Var.getExpr();
		Assert.assertNotNull(Expr_404_list);
		Assert.assertEquals(1, Expr_404_list.size());
		final PrimaryExpression PrimaryExpression_405_Var = (PrimaryExpression)Expr_404_list.get(0);
		Assert.assertNotNull(PrimaryExpression_405_Var);
		Assert.assertEquals("number", PrimaryExpression_405_Var.getId());
		Assert.assertEquals("[.]", PostfixExpression_404_Var.getDot().toString());
		Assert.assertEquals("[numChar]", PostfixExpression_404_Var.getId().toString());
		Assert.assertEquals(";", ExpressionStatement_354_Var.getSemi());
		final Statement Statement_406_Var = (Statement)Statement_96_list.get(6);
		Assert.assertNotNull(Statement_406_Var);
		final ExpressionStatement ExpressionStatement_407_Var = (ExpressionStatement)Statement_406_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_407_Var);
		final Expression Expression_408_Var = (Expression)ExpressionStatement_407_Var.getExpression();
		Assert.assertNotNull(Expression_408_Var);
		final EList<? extends EObject> ExprExpr_408_list = Expression_408_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_408_list);
		Assert.assertEquals(1, ExprExpr_408_list.size());
		final AssignmentExpression AssignmentExpression_409_Var = (AssignmentExpression)ExprExpr_408_list.get(0);
		Assert.assertNotNull(AssignmentExpression_409_Var);
		final ConditionalExpression ConditionalExpression_410_Var = (ConditionalExpression)AssignmentExpression_409_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_410_Var);
		final LogicalOrExpression LogicalOrExpression_411_Var = (LogicalOrExpression)ConditionalExpression_410_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_411_Var);
		final EList<? extends EObject> Expr_411_list = LogicalOrExpression_411_Var.getExpr();
		Assert.assertNotNull(Expr_411_list);
		Assert.assertEquals(1, Expr_411_list.size());
		final LogicalAndExpression LogicalAndExpression_412_Var = (LogicalAndExpression)Expr_411_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_412_Var);
		final EList<? extends EObject> Expr_412_list = LogicalAndExpression_412_Var.getExpr();
		Assert.assertNotNull(Expr_412_list);
		Assert.assertEquals(1, Expr_412_list.size());
		final InclusiveOrExpression InclusiveOrExpression_413_Var = (InclusiveOrExpression)Expr_412_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_413_Var);
		final EList<? extends EObject> Expr_413_list = InclusiveOrExpression_413_Var.getExpr();
		Assert.assertNotNull(Expr_413_list);
		Assert.assertEquals(1, Expr_413_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_414_Var = (ExclusiveOrExpression)Expr_413_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_414_Var);
		final EList<? extends EObject> Expr_414_list = ExclusiveOrExpression_414_Var.getExpr();
		Assert.assertNotNull(Expr_414_list);
		Assert.assertEquals(1, Expr_414_list.size());
		final AndExpression AndExpression_415_Var = (AndExpression)Expr_414_list.get(0);
		Assert.assertNotNull(AndExpression_415_Var);
		final EList<? extends EObject> Expr_415_list = AndExpression_415_Var.getExpr();
		Assert.assertNotNull(Expr_415_list);
		Assert.assertEquals(1, Expr_415_list.size());
		final EqualityExpression EqualityExpression_416_Var = (EqualityExpression)Expr_415_list.get(0);
		Assert.assertNotNull(EqualityExpression_416_Var);
		final EList<? extends EObject> Expr_416_list = EqualityExpression_416_Var.getExpr();
		Assert.assertNotNull(Expr_416_list);
		Assert.assertEquals(1, Expr_416_list.size());
		final RelationalExpression RelationalExpression_417_Var = (RelationalExpression)Expr_416_list.get(0);
		Assert.assertNotNull(RelationalExpression_417_Var);
		final EList<? extends EObject> Expr_417_list = RelationalExpression_417_Var.getExpr();
		Assert.assertNotNull(Expr_417_list);
		Assert.assertEquals(1, Expr_417_list.size());
		final ShiftExpression ShiftExpression_418_Var = (ShiftExpression)Expr_417_list.get(0);
		Assert.assertNotNull(ShiftExpression_418_Var);
		final EList<? extends EObject> Expr_418_list = ShiftExpression_418_Var.getExpr();
		Assert.assertNotNull(Expr_418_list);
		Assert.assertEquals(1, Expr_418_list.size());
		final AdditiveExpression AdditiveExpression_419_Var = (AdditiveExpression)Expr_418_list.get(0);
		Assert.assertNotNull(AdditiveExpression_419_Var);
		final EList<? extends EObject> Expr_419_list = AdditiveExpression_419_Var.getExpr();
		Assert.assertNotNull(Expr_419_list);
		Assert.assertEquals(1, Expr_419_list.size());
		final MultiplicativeExpression MultiplicativeExpression_420_Var = (MultiplicativeExpression)Expr_419_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_420_Var);
		final EList<? extends EObject> Expr_420_list = MultiplicativeExpression_420_Var.getExpr();
		Assert.assertNotNull(Expr_420_list);
		Assert.assertEquals(1, Expr_420_list.size());
		final CastExpression CastExpression_421_Var = (CastExpression)Expr_420_list.get(0);
		Assert.assertNotNull(CastExpression_421_Var);
		final UnaryExpression UnaryExpression_422_Var = (UnaryExpression)CastExpression_421_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_422_Var);
		final PostfixExpression PostfixExpression_423_Var = (PostfixExpression)UnaryExpression_422_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_423_Var);
		final EList<? extends EObject> Expr_423_list = PostfixExpression_423_Var.getExpr();
		Assert.assertNotNull(Expr_423_list);
		Assert.assertEquals(1, Expr_423_list.size());
		final PrimaryExpression PrimaryExpression_424_Var = (PrimaryExpression)Expr_423_list.get(0);
		Assert.assertNotNull(PrimaryExpression_424_Var);
		Assert.assertEquals("printf", PrimaryExpression_424_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_424_list = PostfixExpression_423_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_424_list);
		Assert.assertEquals(1, ArgumentExpressionList_424_list.size());
		final ArgumentExpressionList ArgumentExpressionList_425_Var = (ArgumentExpressionList)ArgumentExpressionList_424_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_425_Var);
		final EList<? extends EObject> Expr_425_list = ArgumentExpressionList_425_Var.getExpr();
		Assert.assertNotNull(Expr_425_list);
		Assert.assertEquals(2, Expr_425_list.size());
		final AssignmentExpression AssignmentExpression_426_Var = (AssignmentExpression)Expr_425_list.get(0);
		Assert.assertNotNull(AssignmentExpression_426_Var);
		final ConditionalExpression ConditionalExpression_427_Var = (ConditionalExpression)AssignmentExpression_426_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_427_Var);
		final LogicalOrExpression LogicalOrExpression_428_Var = (LogicalOrExpression)ConditionalExpression_427_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_428_Var);
		final EList<? extends EObject> Expr_428_list = LogicalOrExpression_428_Var.getExpr();
		Assert.assertNotNull(Expr_428_list);
		Assert.assertEquals(1, Expr_428_list.size());
		final LogicalAndExpression LogicalAndExpression_429_Var = (LogicalAndExpression)Expr_428_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_429_Var);
		final EList<? extends EObject> Expr_429_list = LogicalAndExpression_429_Var.getExpr();
		Assert.assertNotNull(Expr_429_list);
		Assert.assertEquals(1, Expr_429_list.size());
		final InclusiveOrExpression InclusiveOrExpression_430_Var = (InclusiveOrExpression)Expr_429_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_430_Var);
		final EList<? extends EObject> Expr_430_list = InclusiveOrExpression_430_Var.getExpr();
		Assert.assertNotNull(Expr_430_list);
		Assert.assertEquals(1, Expr_430_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_431_Var = (ExclusiveOrExpression)Expr_430_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_431_Var);
		final EList<? extends EObject> Expr_431_list = ExclusiveOrExpression_431_Var.getExpr();
		Assert.assertNotNull(Expr_431_list);
		Assert.assertEquals(1, Expr_431_list.size());
		final AndExpression AndExpression_432_Var = (AndExpression)Expr_431_list.get(0);
		Assert.assertNotNull(AndExpression_432_Var);
		final EList<? extends EObject> Expr_432_list = AndExpression_432_Var.getExpr();
		Assert.assertNotNull(Expr_432_list);
		Assert.assertEquals(1, Expr_432_list.size());
		final EqualityExpression EqualityExpression_433_Var = (EqualityExpression)Expr_432_list.get(0);
		Assert.assertNotNull(EqualityExpression_433_Var);
		final EList<? extends EObject> Expr_433_list = EqualityExpression_433_Var.getExpr();
		Assert.assertNotNull(Expr_433_list);
		Assert.assertEquals(1, Expr_433_list.size());
		final RelationalExpression RelationalExpression_434_Var = (RelationalExpression)Expr_433_list.get(0);
		Assert.assertNotNull(RelationalExpression_434_Var);
		final EList<? extends EObject> Expr_434_list = RelationalExpression_434_Var.getExpr();
		Assert.assertNotNull(Expr_434_list);
		Assert.assertEquals(1, Expr_434_list.size());
		final ShiftExpression ShiftExpression_435_Var = (ShiftExpression)Expr_434_list.get(0);
		Assert.assertNotNull(ShiftExpression_435_Var);
		final EList<? extends EObject> Expr_435_list = ShiftExpression_435_Var.getExpr();
		Assert.assertNotNull(Expr_435_list);
		Assert.assertEquals(1, Expr_435_list.size());
		final AdditiveExpression AdditiveExpression_436_Var = (AdditiveExpression)Expr_435_list.get(0);
		Assert.assertNotNull(AdditiveExpression_436_Var);
		final EList<? extends EObject> Expr_436_list = AdditiveExpression_436_Var.getExpr();
		Assert.assertNotNull(Expr_436_list);
		Assert.assertEquals(1, Expr_436_list.size());
		final MultiplicativeExpression MultiplicativeExpression_437_Var = (MultiplicativeExpression)Expr_436_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_437_Var);
		final EList<? extends EObject> Expr_437_list = MultiplicativeExpression_437_Var.getExpr();
		Assert.assertNotNull(Expr_437_list);
		Assert.assertEquals(1, Expr_437_list.size());
		final CastExpression CastExpression_438_Var = (CastExpression)Expr_437_list.get(0);
		Assert.assertNotNull(CastExpression_438_Var);
		final UnaryExpression UnaryExpression_439_Var = (UnaryExpression)CastExpression_438_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_439_Var);
		final PostfixExpression PostfixExpression_440_Var = (PostfixExpression)UnaryExpression_439_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_440_Var);
		final EList<? extends EObject> Expr_440_list = PostfixExpression_440_Var.getExpr();
		Assert.assertNotNull(Expr_440_list);
		Assert.assertEquals(1, Expr_440_list.size());
		final PrimaryExpression PrimaryExpression_441_Var = (PrimaryExpression)Expr_440_list.get(0);
		Assert.assertNotNull(PrimaryExpression_441_Var);
		final Constant Constant_442_Var = (Constant)PrimaryExpression_441_Var.getConst();
		Assert.assertNotNull(Constant_442_Var);
		Assert.assertEquals("\"number.numFloat=%f\\n\"", Constant_442_Var.getStr());
		final AssignmentExpression AssignmentExpression_443_Var = (AssignmentExpression)Expr_425_list.get(1);
		Assert.assertNotNull(AssignmentExpression_443_Var);
		final ConditionalExpression ConditionalExpression_444_Var = (ConditionalExpression)AssignmentExpression_443_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_444_Var);
		final LogicalOrExpression LogicalOrExpression_445_Var = (LogicalOrExpression)ConditionalExpression_444_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_445_Var);
		final EList<? extends EObject> Expr_445_list = LogicalOrExpression_445_Var.getExpr();
		Assert.assertNotNull(Expr_445_list);
		Assert.assertEquals(1, Expr_445_list.size());
		final LogicalAndExpression LogicalAndExpression_446_Var = (LogicalAndExpression)Expr_445_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_446_Var);
		final EList<? extends EObject> Expr_446_list = LogicalAndExpression_446_Var.getExpr();
		Assert.assertNotNull(Expr_446_list);
		Assert.assertEquals(1, Expr_446_list.size());
		final InclusiveOrExpression InclusiveOrExpression_447_Var = (InclusiveOrExpression)Expr_446_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_447_Var);
		final EList<? extends EObject> Expr_447_list = InclusiveOrExpression_447_Var.getExpr();
		Assert.assertNotNull(Expr_447_list);
		Assert.assertEquals(1, Expr_447_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_448_Var = (ExclusiveOrExpression)Expr_447_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_448_Var);
		final EList<? extends EObject> Expr_448_list = ExclusiveOrExpression_448_Var.getExpr();
		Assert.assertNotNull(Expr_448_list);
		Assert.assertEquals(1, Expr_448_list.size());
		final AndExpression AndExpression_449_Var = (AndExpression)Expr_448_list.get(0);
		Assert.assertNotNull(AndExpression_449_Var);
		final EList<? extends EObject> Expr_449_list = AndExpression_449_Var.getExpr();
		Assert.assertNotNull(Expr_449_list);
		Assert.assertEquals(1, Expr_449_list.size());
		final EqualityExpression EqualityExpression_450_Var = (EqualityExpression)Expr_449_list.get(0);
		Assert.assertNotNull(EqualityExpression_450_Var);
		final EList<? extends EObject> Expr_450_list = EqualityExpression_450_Var.getExpr();
		Assert.assertNotNull(Expr_450_list);
		Assert.assertEquals(1, Expr_450_list.size());
		final RelationalExpression RelationalExpression_451_Var = (RelationalExpression)Expr_450_list.get(0);
		Assert.assertNotNull(RelationalExpression_451_Var);
		final EList<? extends EObject> Expr_451_list = RelationalExpression_451_Var.getExpr();
		Assert.assertNotNull(Expr_451_list);
		Assert.assertEquals(1, Expr_451_list.size());
		final ShiftExpression ShiftExpression_452_Var = (ShiftExpression)Expr_451_list.get(0);
		Assert.assertNotNull(ShiftExpression_452_Var);
		final EList<? extends EObject> Expr_452_list = ShiftExpression_452_Var.getExpr();
		Assert.assertNotNull(Expr_452_list);
		Assert.assertEquals(1, Expr_452_list.size());
		final AdditiveExpression AdditiveExpression_453_Var = (AdditiveExpression)Expr_452_list.get(0);
		Assert.assertNotNull(AdditiveExpression_453_Var);
		final EList<? extends EObject> Expr_453_list = AdditiveExpression_453_Var.getExpr();
		Assert.assertNotNull(Expr_453_list);
		Assert.assertEquals(1, Expr_453_list.size());
		final MultiplicativeExpression MultiplicativeExpression_454_Var = (MultiplicativeExpression)Expr_453_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_454_Var);
		final EList<? extends EObject> Expr_454_list = MultiplicativeExpression_454_Var.getExpr();
		Assert.assertNotNull(Expr_454_list);
		Assert.assertEquals(1, Expr_454_list.size());
		final CastExpression CastExpression_455_Var = (CastExpression)Expr_454_list.get(0);
		Assert.assertNotNull(CastExpression_455_Var);
		final UnaryExpression UnaryExpression_456_Var = (UnaryExpression)CastExpression_455_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_456_Var);
		final PostfixExpression PostfixExpression_457_Var = (PostfixExpression)UnaryExpression_456_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_457_Var);
		final EList<? extends EObject> Expr_457_list = PostfixExpression_457_Var.getExpr();
		Assert.assertNotNull(Expr_457_list);
		Assert.assertEquals(1, Expr_457_list.size());
		final PrimaryExpression PrimaryExpression_458_Var = (PrimaryExpression)Expr_457_list.get(0);
		Assert.assertNotNull(PrimaryExpression_458_Var);
		Assert.assertEquals("number", PrimaryExpression_458_Var.getId());
		Assert.assertEquals("[.]", PostfixExpression_457_Var.getDot().toString());
		Assert.assertEquals("[numFloat]", PostfixExpression_457_Var.getId().toString());
		Assert.assertEquals(";", ExpressionStatement_407_Var.getSemi());
		final Statement Statement_459_Var = (Statement)Statement_96_list.get(7);
		Assert.assertNotNull(Statement_459_Var);
		final ExpressionStatement ExpressionStatement_460_Var = (ExpressionStatement)Statement_459_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_460_Var);
		final Expression Expression_461_Var = (Expression)ExpressionStatement_460_Var.getExpression();
		Assert.assertNotNull(Expression_461_Var);
		final EList<? extends EObject> ExprExpr_461_list = Expression_461_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_461_list);
		Assert.assertEquals(1, ExprExpr_461_list.size());
		final AssignmentExpression AssignmentExpression_462_Var = (AssignmentExpression)ExprExpr_461_list.get(0);
		Assert.assertNotNull(AssignmentExpression_462_Var);
		final UnaryExpression UnaryExpression_463_Var = (UnaryExpression)AssignmentExpression_462_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_463_Var);
		final PostfixExpression PostfixExpression_464_Var = (PostfixExpression)UnaryExpression_463_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_464_Var);
		final EList<? extends EObject> Expr_464_list = PostfixExpression_464_Var.getExpr();
		Assert.assertNotNull(Expr_464_list);
		Assert.assertEquals(1, Expr_464_list.size());
		final PrimaryExpression PrimaryExpression_465_Var = (PrimaryExpression)Expr_464_list.get(0);
		Assert.assertNotNull(PrimaryExpression_465_Var);
		Assert.assertEquals("number", PrimaryExpression_465_Var.getId());
		Assert.assertEquals("[.]", PostfixExpression_464_Var.getDot().toString());
		Assert.assertEquals("[numFloat]", PostfixExpression_464_Var.getId().toString());
		final AssignmentOperator AssignmentOperator_466_Var = (AssignmentOperator)AssignmentExpression_462_Var.getOp();
		Assert.assertNotNull(AssignmentOperator_466_Var);
		Assert.assertEquals("=", AssignmentOperator_466_Var.getOp());
		final AssignmentExpression AssignmentExpression_467_Var = (AssignmentExpression)AssignmentExpression_462_Var.getAssignmentExpr();
		Assert.assertNotNull(AssignmentExpression_467_Var);
		final ConditionalExpression ConditionalExpression_468_Var = (ConditionalExpression)AssignmentExpression_467_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_468_Var);
		final LogicalOrExpression LogicalOrExpression_469_Var = (LogicalOrExpression)ConditionalExpression_468_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_469_Var);
		final EList<? extends EObject> Expr_469_list = LogicalOrExpression_469_Var.getExpr();
		Assert.assertNotNull(Expr_469_list);
		Assert.assertEquals(1, Expr_469_list.size());
		final LogicalAndExpression LogicalAndExpression_470_Var = (LogicalAndExpression)Expr_469_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_470_Var);
		final EList<? extends EObject> Expr_470_list = LogicalAndExpression_470_Var.getExpr();
		Assert.assertNotNull(Expr_470_list);
		Assert.assertEquals(1, Expr_470_list.size());
		final InclusiveOrExpression InclusiveOrExpression_471_Var = (InclusiveOrExpression)Expr_470_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_471_Var);
		final EList<? extends EObject> Expr_471_list = InclusiveOrExpression_471_Var.getExpr();
		Assert.assertNotNull(Expr_471_list);
		Assert.assertEquals(1, Expr_471_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_472_Var = (ExclusiveOrExpression)Expr_471_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_472_Var);
		final EList<? extends EObject> Expr_472_list = ExclusiveOrExpression_472_Var.getExpr();
		Assert.assertNotNull(Expr_472_list);
		Assert.assertEquals(1, Expr_472_list.size());
		final AndExpression AndExpression_473_Var = (AndExpression)Expr_472_list.get(0);
		Assert.assertNotNull(AndExpression_473_Var);
		final EList<? extends EObject> Expr_473_list = AndExpression_473_Var.getExpr();
		Assert.assertNotNull(Expr_473_list);
		Assert.assertEquals(1, Expr_473_list.size());
		final EqualityExpression EqualityExpression_474_Var = (EqualityExpression)Expr_473_list.get(0);
		Assert.assertNotNull(EqualityExpression_474_Var);
		final EList<? extends EObject> Expr_474_list = EqualityExpression_474_Var.getExpr();
		Assert.assertNotNull(Expr_474_list);
		Assert.assertEquals(1, Expr_474_list.size());
		final RelationalExpression RelationalExpression_475_Var = (RelationalExpression)Expr_474_list.get(0);
		Assert.assertNotNull(RelationalExpression_475_Var);
		final EList<? extends EObject> Expr_475_list = RelationalExpression_475_Var.getExpr();
		Assert.assertNotNull(Expr_475_list);
		Assert.assertEquals(1, Expr_475_list.size());
		final ShiftExpression ShiftExpression_476_Var = (ShiftExpression)Expr_475_list.get(0);
		Assert.assertNotNull(ShiftExpression_476_Var);
		final EList<? extends EObject> Expr_476_list = ShiftExpression_476_Var.getExpr();
		Assert.assertNotNull(Expr_476_list);
		Assert.assertEquals(1, Expr_476_list.size());
		final AdditiveExpression AdditiveExpression_477_Var = (AdditiveExpression)Expr_476_list.get(0);
		Assert.assertNotNull(AdditiveExpression_477_Var);
		final EList<? extends EObject> Expr_477_list = AdditiveExpression_477_Var.getExpr();
		Assert.assertNotNull(Expr_477_list);
		Assert.assertEquals(1, Expr_477_list.size());
		final MultiplicativeExpression MultiplicativeExpression_478_Var = (MultiplicativeExpression)Expr_477_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_478_Var);
		final EList<? extends EObject> Expr_478_list = MultiplicativeExpression_478_Var.getExpr();
		Assert.assertNotNull(Expr_478_list);
		Assert.assertEquals(1, Expr_478_list.size());
		final CastExpression CastExpression_479_Var = (CastExpression)Expr_478_list.get(0);
		Assert.assertNotNull(CastExpression_479_Var);
		final UnaryExpression UnaryExpression_480_Var = (UnaryExpression)CastExpression_479_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_480_Var);
		final PostfixExpression PostfixExpression_481_Var = (PostfixExpression)UnaryExpression_480_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_481_Var);
		final EList<? extends EObject> Expr_481_list = PostfixExpression_481_Var.getExpr();
		Assert.assertNotNull(Expr_481_list);
		Assert.assertEquals(1, Expr_481_list.size());
		final PrimaryExpression PrimaryExpression_482_Var = (PrimaryExpression)Expr_481_list.get(0);
		Assert.assertNotNull(PrimaryExpression_482_Var);
		final Constant Constant_483_Var = (Constant)PrimaryExpression_482_Var.getConst();
		Assert.assertNotNull(Constant_483_Var);
		Assert.assertEquals("0.56789", Constant_483_Var.getFloat());
		Assert.assertEquals(";", ExpressionStatement_460_Var.getSemi());
		final Statement Statement_484_Var = (Statement)Statement_96_list.get(8);
		Assert.assertNotNull(Statement_484_Var);
		final ExpressionStatement ExpressionStatement_485_Var = (ExpressionStatement)Statement_484_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_485_Var);
		final Expression Expression_486_Var = (Expression)ExpressionStatement_485_Var.getExpression();
		Assert.assertNotNull(Expression_486_Var);
		final EList<? extends EObject> ExprExpr_486_list = Expression_486_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_486_list);
		Assert.assertEquals(1, ExprExpr_486_list.size());
		final AssignmentExpression AssignmentExpression_487_Var = (AssignmentExpression)ExprExpr_486_list.get(0);
		Assert.assertNotNull(AssignmentExpression_487_Var);
		final ConditionalExpression ConditionalExpression_488_Var = (ConditionalExpression)AssignmentExpression_487_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_488_Var);
		final LogicalOrExpression LogicalOrExpression_489_Var = (LogicalOrExpression)ConditionalExpression_488_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_489_Var);
		final EList<? extends EObject> Expr_489_list = LogicalOrExpression_489_Var.getExpr();
		Assert.assertNotNull(Expr_489_list);
		Assert.assertEquals(1, Expr_489_list.size());
		final LogicalAndExpression LogicalAndExpression_490_Var = (LogicalAndExpression)Expr_489_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_490_Var);
		final EList<? extends EObject> Expr_490_list = LogicalAndExpression_490_Var.getExpr();
		Assert.assertNotNull(Expr_490_list);
		Assert.assertEquals(1, Expr_490_list.size());
		final InclusiveOrExpression InclusiveOrExpression_491_Var = (InclusiveOrExpression)Expr_490_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_491_Var);
		final EList<? extends EObject> Expr_491_list = InclusiveOrExpression_491_Var.getExpr();
		Assert.assertNotNull(Expr_491_list);
		Assert.assertEquals(1, Expr_491_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_492_Var = (ExclusiveOrExpression)Expr_491_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_492_Var);
		final EList<? extends EObject> Expr_492_list = ExclusiveOrExpression_492_Var.getExpr();
		Assert.assertNotNull(Expr_492_list);
		Assert.assertEquals(1, Expr_492_list.size());
		final AndExpression AndExpression_493_Var = (AndExpression)Expr_492_list.get(0);
		Assert.assertNotNull(AndExpression_493_Var);
		final EList<? extends EObject> Expr_493_list = AndExpression_493_Var.getExpr();
		Assert.assertNotNull(Expr_493_list);
		Assert.assertEquals(1, Expr_493_list.size());
		final EqualityExpression EqualityExpression_494_Var = (EqualityExpression)Expr_493_list.get(0);
		Assert.assertNotNull(EqualityExpression_494_Var);
		final EList<? extends EObject> Expr_494_list = EqualityExpression_494_Var.getExpr();
		Assert.assertNotNull(Expr_494_list);
		Assert.assertEquals(1, Expr_494_list.size());
		final RelationalExpression RelationalExpression_495_Var = (RelationalExpression)Expr_494_list.get(0);
		Assert.assertNotNull(RelationalExpression_495_Var);
		final EList<? extends EObject> Expr_495_list = RelationalExpression_495_Var.getExpr();
		Assert.assertNotNull(Expr_495_list);
		Assert.assertEquals(1, Expr_495_list.size());
		final ShiftExpression ShiftExpression_496_Var = (ShiftExpression)Expr_495_list.get(0);
		Assert.assertNotNull(ShiftExpression_496_Var);
		final EList<? extends EObject> Expr_496_list = ShiftExpression_496_Var.getExpr();
		Assert.assertNotNull(Expr_496_list);
		Assert.assertEquals(1, Expr_496_list.size());
		final AdditiveExpression AdditiveExpression_497_Var = (AdditiveExpression)Expr_496_list.get(0);
		Assert.assertNotNull(AdditiveExpression_497_Var);
		final EList<? extends EObject> Expr_497_list = AdditiveExpression_497_Var.getExpr();
		Assert.assertNotNull(Expr_497_list);
		Assert.assertEquals(1, Expr_497_list.size());
		final MultiplicativeExpression MultiplicativeExpression_498_Var = (MultiplicativeExpression)Expr_497_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_498_Var);
		final EList<? extends EObject> Expr_498_list = MultiplicativeExpression_498_Var.getExpr();
		Assert.assertNotNull(Expr_498_list);
		Assert.assertEquals(1, Expr_498_list.size());
		final CastExpression CastExpression_499_Var = (CastExpression)Expr_498_list.get(0);
		Assert.assertNotNull(CastExpression_499_Var);
		final UnaryExpression UnaryExpression_500_Var = (UnaryExpression)CastExpression_499_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_500_Var);
		final PostfixExpression PostfixExpression_501_Var = (PostfixExpression)UnaryExpression_500_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_501_Var);
		final EList<? extends EObject> Expr_501_list = PostfixExpression_501_Var.getExpr();
		Assert.assertNotNull(Expr_501_list);
		Assert.assertEquals(1, Expr_501_list.size());
		final PrimaryExpression PrimaryExpression_502_Var = (PrimaryExpression)Expr_501_list.get(0);
		Assert.assertNotNull(PrimaryExpression_502_Var);
		Assert.assertEquals("printf", PrimaryExpression_502_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_502_list = PostfixExpression_501_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_502_list);
		Assert.assertEquals(1, ArgumentExpressionList_502_list.size());
		final ArgumentExpressionList ArgumentExpressionList_503_Var = (ArgumentExpressionList)ArgumentExpressionList_502_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_503_Var);
		final EList<? extends EObject> Expr_503_list = ArgumentExpressionList_503_Var.getExpr();
		Assert.assertNotNull(Expr_503_list);
		Assert.assertEquals(2, Expr_503_list.size());
		final AssignmentExpression AssignmentExpression_504_Var = (AssignmentExpression)Expr_503_list.get(0);
		Assert.assertNotNull(AssignmentExpression_504_Var);
		final ConditionalExpression ConditionalExpression_505_Var = (ConditionalExpression)AssignmentExpression_504_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_505_Var);
		final LogicalOrExpression LogicalOrExpression_506_Var = (LogicalOrExpression)ConditionalExpression_505_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_506_Var);
		final EList<? extends EObject> Expr_506_list = LogicalOrExpression_506_Var.getExpr();
		Assert.assertNotNull(Expr_506_list);
		Assert.assertEquals(1, Expr_506_list.size());
		final LogicalAndExpression LogicalAndExpression_507_Var = (LogicalAndExpression)Expr_506_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_507_Var);
		final EList<? extends EObject> Expr_507_list = LogicalAndExpression_507_Var.getExpr();
		Assert.assertNotNull(Expr_507_list);
		Assert.assertEquals(1, Expr_507_list.size());
		final InclusiveOrExpression InclusiveOrExpression_508_Var = (InclusiveOrExpression)Expr_507_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_508_Var);
		final EList<? extends EObject> Expr_508_list = InclusiveOrExpression_508_Var.getExpr();
		Assert.assertNotNull(Expr_508_list);
		Assert.assertEquals(1, Expr_508_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_509_Var = (ExclusiveOrExpression)Expr_508_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_509_Var);
		final EList<? extends EObject> Expr_509_list = ExclusiveOrExpression_509_Var.getExpr();
		Assert.assertNotNull(Expr_509_list);
		Assert.assertEquals(1, Expr_509_list.size());
		final AndExpression AndExpression_510_Var = (AndExpression)Expr_509_list.get(0);
		Assert.assertNotNull(AndExpression_510_Var);
		final EList<? extends EObject> Expr_510_list = AndExpression_510_Var.getExpr();
		Assert.assertNotNull(Expr_510_list);
		Assert.assertEquals(1, Expr_510_list.size());
		final EqualityExpression EqualityExpression_511_Var = (EqualityExpression)Expr_510_list.get(0);
		Assert.assertNotNull(EqualityExpression_511_Var);
		final EList<? extends EObject> Expr_511_list = EqualityExpression_511_Var.getExpr();
		Assert.assertNotNull(Expr_511_list);
		Assert.assertEquals(1, Expr_511_list.size());
		final RelationalExpression RelationalExpression_512_Var = (RelationalExpression)Expr_511_list.get(0);
		Assert.assertNotNull(RelationalExpression_512_Var);
		final EList<? extends EObject> Expr_512_list = RelationalExpression_512_Var.getExpr();
		Assert.assertNotNull(Expr_512_list);
		Assert.assertEquals(1, Expr_512_list.size());
		final ShiftExpression ShiftExpression_513_Var = (ShiftExpression)Expr_512_list.get(0);
		Assert.assertNotNull(ShiftExpression_513_Var);
		final EList<? extends EObject> Expr_513_list = ShiftExpression_513_Var.getExpr();
		Assert.assertNotNull(Expr_513_list);
		Assert.assertEquals(1, Expr_513_list.size());
		final AdditiveExpression AdditiveExpression_514_Var = (AdditiveExpression)Expr_513_list.get(0);
		Assert.assertNotNull(AdditiveExpression_514_Var);
		final EList<? extends EObject> Expr_514_list = AdditiveExpression_514_Var.getExpr();
		Assert.assertNotNull(Expr_514_list);
		Assert.assertEquals(1, Expr_514_list.size());
		final MultiplicativeExpression MultiplicativeExpression_515_Var = (MultiplicativeExpression)Expr_514_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_515_Var);
		final EList<? extends EObject> Expr_515_list = MultiplicativeExpression_515_Var.getExpr();
		Assert.assertNotNull(Expr_515_list);
		Assert.assertEquals(1, Expr_515_list.size());
		final CastExpression CastExpression_516_Var = (CastExpression)Expr_515_list.get(0);
		Assert.assertNotNull(CastExpression_516_Var);
		final UnaryExpression UnaryExpression_517_Var = (UnaryExpression)CastExpression_516_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_517_Var);
		final PostfixExpression PostfixExpression_518_Var = (PostfixExpression)UnaryExpression_517_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_518_Var);
		final EList<? extends EObject> Expr_518_list = PostfixExpression_518_Var.getExpr();
		Assert.assertNotNull(Expr_518_list);
		Assert.assertEquals(1, Expr_518_list.size());
		final PrimaryExpression PrimaryExpression_519_Var = (PrimaryExpression)Expr_518_list.get(0);
		Assert.assertNotNull(PrimaryExpression_519_Var);
		final Constant Constant_520_Var = (Constant)PrimaryExpression_519_Var.getConst();
		Assert.assertNotNull(Constant_520_Var);
		Assert.assertEquals("\"number.numChar(as decimal)=%d\\n\"", Constant_520_Var.getStr());
		final AssignmentExpression AssignmentExpression_521_Var = (AssignmentExpression)Expr_503_list.get(1);
		Assert.assertNotNull(AssignmentExpression_521_Var);
		final ConditionalExpression ConditionalExpression_522_Var = (ConditionalExpression)AssignmentExpression_521_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_522_Var);
		final LogicalOrExpression LogicalOrExpression_523_Var = (LogicalOrExpression)ConditionalExpression_522_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_523_Var);
		final EList<? extends EObject> Expr_523_list = LogicalOrExpression_523_Var.getExpr();
		Assert.assertNotNull(Expr_523_list);
		Assert.assertEquals(1, Expr_523_list.size());
		final LogicalAndExpression LogicalAndExpression_524_Var = (LogicalAndExpression)Expr_523_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_524_Var);
		final EList<? extends EObject> Expr_524_list = LogicalAndExpression_524_Var.getExpr();
		Assert.assertNotNull(Expr_524_list);
		Assert.assertEquals(1, Expr_524_list.size());
		final InclusiveOrExpression InclusiveOrExpression_525_Var = (InclusiveOrExpression)Expr_524_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_525_Var);
		final EList<? extends EObject> Expr_525_list = InclusiveOrExpression_525_Var.getExpr();
		Assert.assertNotNull(Expr_525_list);
		Assert.assertEquals(1, Expr_525_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_526_Var = (ExclusiveOrExpression)Expr_525_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_526_Var);
		final EList<? extends EObject> Expr_526_list = ExclusiveOrExpression_526_Var.getExpr();
		Assert.assertNotNull(Expr_526_list);
		Assert.assertEquals(1, Expr_526_list.size());
		final AndExpression AndExpression_527_Var = (AndExpression)Expr_526_list.get(0);
		Assert.assertNotNull(AndExpression_527_Var);
		final EList<? extends EObject> Expr_527_list = AndExpression_527_Var.getExpr();
		Assert.assertNotNull(Expr_527_list);
		Assert.assertEquals(1, Expr_527_list.size());
		final EqualityExpression EqualityExpression_528_Var = (EqualityExpression)Expr_527_list.get(0);
		Assert.assertNotNull(EqualityExpression_528_Var);
		final EList<? extends EObject> Expr_528_list = EqualityExpression_528_Var.getExpr();
		Assert.assertNotNull(Expr_528_list);
		Assert.assertEquals(1, Expr_528_list.size());
		final RelationalExpression RelationalExpression_529_Var = (RelationalExpression)Expr_528_list.get(0);
		Assert.assertNotNull(RelationalExpression_529_Var);
		final EList<? extends EObject> Expr_529_list = RelationalExpression_529_Var.getExpr();
		Assert.assertNotNull(Expr_529_list);
		Assert.assertEquals(1, Expr_529_list.size());
		final ShiftExpression ShiftExpression_530_Var = (ShiftExpression)Expr_529_list.get(0);
		Assert.assertNotNull(ShiftExpression_530_Var);
		final EList<? extends EObject> Expr_530_list = ShiftExpression_530_Var.getExpr();
		Assert.assertNotNull(Expr_530_list);
		Assert.assertEquals(1, Expr_530_list.size());
		final AdditiveExpression AdditiveExpression_531_Var = (AdditiveExpression)Expr_530_list.get(0);
		Assert.assertNotNull(AdditiveExpression_531_Var);
		final EList<? extends EObject> Expr_531_list = AdditiveExpression_531_Var.getExpr();
		Assert.assertNotNull(Expr_531_list);
		Assert.assertEquals(1, Expr_531_list.size());
		final MultiplicativeExpression MultiplicativeExpression_532_Var = (MultiplicativeExpression)Expr_531_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_532_Var);
		final EList<? extends EObject> Expr_532_list = MultiplicativeExpression_532_Var.getExpr();
		Assert.assertNotNull(Expr_532_list);
		Assert.assertEquals(1, Expr_532_list.size());
		final CastExpression CastExpression_533_Var = (CastExpression)Expr_532_list.get(0);
		Assert.assertNotNull(CastExpression_533_Var);
		final UnaryExpression UnaryExpression_534_Var = (UnaryExpression)CastExpression_533_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_534_Var);
		final PostfixExpression PostfixExpression_535_Var = (PostfixExpression)UnaryExpression_534_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_535_Var);
		final EList<? extends EObject> Expr_535_list = PostfixExpression_535_Var.getExpr();
		Assert.assertNotNull(Expr_535_list);
		Assert.assertEquals(1, Expr_535_list.size());
		final PrimaryExpression PrimaryExpression_536_Var = (PrimaryExpression)Expr_535_list.get(0);
		Assert.assertNotNull(PrimaryExpression_536_Var);
		Assert.assertEquals("number", PrimaryExpression_536_Var.getId());
		Assert.assertEquals("[.]", PostfixExpression_535_Var.getDot().toString());
		Assert.assertEquals("[numChar]", PostfixExpression_535_Var.getId().toString());
		Assert.assertEquals(";", ExpressionStatement_485_Var.getSemi());
		final Statement Statement_537_Var = (Statement)Statement_96_list.get(9);
		Assert.assertNotNull(Statement_537_Var);
		final ExpressionStatement ExpressionStatement_538_Var = (ExpressionStatement)Statement_537_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_538_Var);
		final Expression Expression_539_Var = (Expression)ExpressionStatement_538_Var.getExpression();
		Assert.assertNotNull(Expression_539_Var);
		final EList<? extends EObject> ExprExpr_539_list = Expression_539_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_539_list);
		Assert.assertEquals(1, ExprExpr_539_list.size());
		final AssignmentExpression AssignmentExpression_540_Var = (AssignmentExpression)ExprExpr_539_list.get(0);
		Assert.assertNotNull(AssignmentExpression_540_Var);
		final ConditionalExpression ConditionalExpression_541_Var = (ConditionalExpression)AssignmentExpression_540_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_541_Var);
		final LogicalOrExpression LogicalOrExpression_542_Var = (LogicalOrExpression)ConditionalExpression_541_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_542_Var);
		final EList<? extends EObject> Expr_542_list = LogicalOrExpression_542_Var.getExpr();
		Assert.assertNotNull(Expr_542_list);
		Assert.assertEquals(1, Expr_542_list.size());
		final LogicalAndExpression LogicalAndExpression_543_Var = (LogicalAndExpression)Expr_542_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_543_Var);
		final EList<? extends EObject> Expr_543_list = LogicalAndExpression_543_Var.getExpr();
		Assert.assertNotNull(Expr_543_list);
		Assert.assertEquals(1, Expr_543_list.size());
		final InclusiveOrExpression InclusiveOrExpression_544_Var = (InclusiveOrExpression)Expr_543_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_544_Var);
		final EList<? extends EObject> Expr_544_list = InclusiveOrExpression_544_Var.getExpr();
		Assert.assertNotNull(Expr_544_list);
		Assert.assertEquals(1, Expr_544_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_545_Var = (ExclusiveOrExpression)Expr_544_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_545_Var);
		final EList<? extends EObject> Expr_545_list = ExclusiveOrExpression_545_Var.getExpr();
		Assert.assertNotNull(Expr_545_list);
		Assert.assertEquals(1, Expr_545_list.size());
		final AndExpression AndExpression_546_Var = (AndExpression)Expr_545_list.get(0);
		Assert.assertNotNull(AndExpression_546_Var);
		final EList<? extends EObject> Expr_546_list = AndExpression_546_Var.getExpr();
		Assert.assertNotNull(Expr_546_list);
		Assert.assertEquals(1, Expr_546_list.size());
		final EqualityExpression EqualityExpression_547_Var = (EqualityExpression)Expr_546_list.get(0);
		Assert.assertNotNull(EqualityExpression_547_Var);
		final EList<? extends EObject> Expr_547_list = EqualityExpression_547_Var.getExpr();
		Assert.assertNotNull(Expr_547_list);
		Assert.assertEquals(1, Expr_547_list.size());
		final RelationalExpression RelationalExpression_548_Var = (RelationalExpression)Expr_547_list.get(0);
		Assert.assertNotNull(RelationalExpression_548_Var);
		final EList<? extends EObject> Expr_548_list = RelationalExpression_548_Var.getExpr();
		Assert.assertNotNull(Expr_548_list);
		Assert.assertEquals(1, Expr_548_list.size());
		final ShiftExpression ShiftExpression_549_Var = (ShiftExpression)Expr_548_list.get(0);
		Assert.assertNotNull(ShiftExpression_549_Var);
		final EList<? extends EObject> Expr_549_list = ShiftExpression_549_Var.getExpr();
		Assert.assertNotNull(Expr_549_list);
		Assert.assertEquals(1, Expr_549_list.size());
		final AdditiveExpression AdditiveExpression_550_Var = (AdditiveExpression)Expr_549_list.get(0);
		Assert.assertNotNull(AdditiveExpression_550_Var);
		final EList<? extends EObject> Expr_550_list = AdditiveExpression_550_Var.getExpr();
		Assert.assertNotNull(Expr_550_list);
		Assert.assertEquals(1, Expr_550_list.size());
		final MultiplicativeExpression MultiplicativeExpression_551_Var = (MultiplicativeExpression)Expr_550_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_551_Var);
		final EList<? extends EObject> Expr_551_list = MultiplicativeExpression_551_Var.getExpr();
		Assert.assertNotNull(Expr_551_list);
		Assert.assertEquals(1, Expr_551_list.size());
		final CastExpression CastExpression_552_Var = (CastExpression)Expr_551_list.get(0);
		Assert.assertNotNull(CastExpression_552_Var);
		final UnaryExpression UnaryExpression_553_Var = (UnaryExpression)CastExpression_552_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_553_Var);
		final PostfixExpression PostfixExpression_554_Var = (PostfixExpression)UnaryExpression_553_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_554_Var);
		final EList<? extends EObject> Expr_554_list = PostfixExpression_554_Var.getExpr();
		Assert.assertNotNull(Expr_554_list);
		Assert.assertEquals(1, Expr_554_list.size());
		final PrimaryExpression PrimaryExpression_555_Var = (PrimaryExpression)Expr_554_list.get(0);
		Assert.assertNotNull(PrimaryExpression_555_Var);
		Assert.assertEquals("printf", PrimaryExpression_555_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_555_list = PostfixExpression_554_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_555_list);
		Assert.assertEquals(1, ArgumentExpressionList_555_list.size());
		final ArgumentExpressionList ArgumentExpressionList_556_Var = (ArgumentExpressionList)ArgumentExpressionList_555_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_556_Var);
		final EList<? extends EObject> Expr_556_list = ArgumentExpressionList_556_Var.getExpr();
		Assert.assertNotNull(Expr_556_list);
		Assert.assertEquals(2, Expr_556_list.size());
		final AssignmentExpression AssignmentExpression_557_Var = (AssignmentExpression)Expr_556_list.get(0);
		Assert.assertNotNull(AssignmentExpression_557_Var);
		final ConditionalExpression ConditionalExpression_558_Var = (ConditionalExpression)AssignmentExpression_557_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_558_Var);
		final LogicalOrExpression LogicalOrExpression_559_Var = (LogicalOrExpression)ConditionalExpression_558_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_559_Var);
		final EList<? extends EObject> Expr_559_list = LogicalOrExpression_559_Var.getExpr();
		Assert.assertNotNull(Expr_559_list);
		Assert.assertEquals(1, Expr_559_list.size());
		final LogicalAndExpression LogicalAndExpression_560_Var = (LogicalAndExpression)Expr_559_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_560_Var);
		final EList<? extends EObject> Expr_560_list = LogicalAndExpression_560_Var.getExpr();
		Assert.assertNotNull(Expr_560_list);
		Assert.assertEquals(1, Expr_560_list.size());
		final InclusiveOrExpression InclusiveOrExpression_561_Var = (InclusiveOrExpression)Expr_560_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_561_Var);
		final EList<? extends EObject> Expr_561_list = InclusiveOrExpression_561_Var.getExpr();
		Assert.assertNotNull(Expr_561_list);
		Assert.assertEquals(1, Expr_561_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_562_Var = (ExclusiveOrExpression)Expr_561_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_562_Var);
		final EList<? extends EObject> Expr_562_list = ExclusiveOrExpression_562_Var.getExpr();
		Assert.assertNotNull(Expr_562_list);
		Assert.assertEquals(1, Expr_562_list.size());
		final AndExpression AndExpression_563_Var = (AndExpression)Expr_562_list.get(0);
		Assert.assertNotNull(AndExpression_563_Var);
		final EList<? extends EObject> Expr_563_list = AndExpression_563_Var.getExpr();
		Assert.assertNotNull(Expr_563_list);
		Assert.assertEquals(1, Expr_563_list.size());
		final EqualityExpression EqualityExpression_564_Var = (EqualityExpression)Expr_563_list.get(0);
		Assert.assertNotNull(EqualityExpression_564_Var);
		final EList<? extends EObject> Expr_564_list = EqualityExpression_564_Var.getExpr();
		Assert.assertNotNull(Expr_564_list);
		Assert.assertEquals(1, Expr_564_list.size());
		final RelationalExpression RelationalExpression_565_Var = (RelationalExpression)Expr_564_list.get(0);
		Assert.assertNotNull(RelationalExpression_565_Var);
		final EList<? extends EObject> Expr_565_list = RelationalExpression_565_Var.getExpr();
		Assert.assertNotNull(Expr_565_list);
		Assert.assertEquals(1, Expr_565_list.size());
		final ShiftExpression ShiftExpression_566_Var = (ShiftExpression)Expr_565_list.get(0);
		Assert.assertNotNull(ShiftExpression_566_Var);
		final EList<? extends EObject> Expr_566_list = ShiftExpression_566_Var.getExpr();
		Assert.assertNotNull(Expr_566_list);
		Assert.assertEquals(1, Expr_566_list.size());
		final AdditiveExpression AdditiveExpression_567_Var = (AdditiveExpression)Expr_566_list.get(0);
		Assert.assertNotNull(AdditiveExpression_567_Var);
		final EList<? extends EObject> Expr_567_list = AdditiveExpression_567_Var.getExpr();
		Assert.assertNotNull(Expr_567_list);
		Assert.assertEquals(1, Expr_567_list.size());
		final MultiplicativeExpression MultiplicativeExpression_568_Var = (MultiplicativeExpression)Expr_567_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_568_Var);
		final EList<? extends EObject> Expr_568_list = MultiplicativeExpression_568_Var.getExpr();
		Assert.assertNotNull(Expr_568_list);
		Assert.assertEquals(1, Expr_568_list.size());
		final CastExpression CastExpression_569_Var = (CastExpression)Expr_568_list.get(0);
		Assert.assertNotNull(CastExpression_569_Var);
		final UnaryExpression UnaryExpression_570_Var = (UnaryExpression)CastExpression_569_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_570_Var);
		final PostfixExpression PostfixExpression_571_Var = (PostfixExpression)UnaryExpression_570_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_571_Var);
		final EList<? extends EObject> Expr_571_list = PostfixExpression_571_Var.getExpr();
		Assert.assertNotNull(Expr_571_list);
		Assert.assertEquals(1, Expr_571_list.size());
		final PrimaryExpression PrimaryExpression_572_Var = (PrimaryExpression)Expr_571_list.get(0);
		Assert.assertNotNull(PrimaryExpression_572_Var);
		final Constant Constant_573_Var = (Constant)PrimaryExpression_572_Var.getConst();
		Assert.assertNotNull(Constant_573_Var);
		Assert.assertEquals("\"number.numFloat=%f\\n\"", Constant_573_Var.getStr());
		final AssignmentExpression AssignmentExpression_574_Var = (AssignmentExpression)Expr_556_list.get(1);
		Assert.assertNotNull(AssignmentExpression_574_Var);
		final ConditionalExpression ConditionalExpression_575_Var = (ConditionalExpression)AssignmentExpression_574_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_575_Var);
		final LogicalOrExpression LogicalOrExpression_576_Var = (LogicalOrExpression)ConditionalExpression_575_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_576_Var);
		final EList<? extends EObject> Expr_576_list = LogicalOrExpression_576_Var.getExpr();
		Assert.assertNotNull(Expr_576_list);
		Assert.assertEquals(1, Expr_576_list.size());
		final LogicalAndExpression LogicalAndExpression_577_Var = (LogicalAndExpression)Expr_576_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_577_Var);
		final EList<? extends EObject> Expr_577_list = LogicalAndExpression_577_Var.getExpr();
		Assert.assertNotNull(Expr_577_list);
		Assert.assertEquals(1, Expr_577_list.size());
		final InclusiveOrExpression InclusiveOrExpression_578_Var = (InclusiveOrExpression)Expr_577_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_578_Var);
		final EList<? extends EObject> Expr_578_list = InclusiveOrExpression_578_Var.getExpr();
		Assert.assertNotNull(Expr_578_list);
		Assert.assertEquals(1, Expr_578_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_579_Var = (ExclusiveOrExpression)Expr_578_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_579_Var);
		final EList<? extends EObject> Expr_579_list = ExclusiveOrExpression_579_Var.getExpr();
		Assert.assertNotNull(Expr_579_list);
		Assert.assertEquals(1, Expr_579_list.size());
		final AndExpression AndExpression_580_Var = (AndExpression)Expr_579_list.get(0);
		Assert.assertNotNull(AndExpression_580_Var);
		final EList<? extends EObject> Expr_580_list = AndExpression_580_Var.getExpr();
		Assert.assertNotNull(Expr_580_list);
		Assert.assertEquals(1, Expr_580_list.size());
		final EqualityExpression EqualityExpression_581_Var = (EqualityExpression)Expr_580_list.get(0);
		Assert.assertNotNull(EqualityExpression_581_Var);
		final EList<? extends EObject> Expr_581_list = EqualityExpression_581_Var.getExpr();
		Assert.assertNotNull(Expr_581_list);
		Assert.assertEquals(1, Expr_581_list.size());
		final RelationalExpression RelationalExpression_582_Var = (RelationalExpression)Expr_581_list.get(0);
		Assert.assertNotNull(RelationalExpression_582_Var);
		final EList<? extends EObject> Expr_582_list = RelationalExpression_582_Var.getExpr();
		Assert.assertNotNull(Expr_582_list);
		Assert.assertEquals(1, Expr_582_list.size());
		final ShiftExpression ShiftExpression_583_Var = (ShiftExpression)Expr_582_list.get(0);
		Assert.assertNotNull(ShiftExpression_583_Var);
		final EList<? extends EObject> Expr_583_list = ShiftExpression_583_Var.getExpr();
		Assert.assertNotNull(Expr_583_list);
		Assert.assertEquals(1, Expr_583_list.size());
		final AdditiveExpression AdditiveExpression_584_Var = (AdditiveExpression)Expr_583_list.get(0);
		Assert.assertNotNull(AdditiveExpression_584_Var);
		final EList<? extends EObject> Expr_584_list = AdditiveExpression_584_Var.getExpr();
		Assert.assertNotNull(Expr_584_list);
		Assert.assertEquals(1, Expr_584_list.size());
		final MultiplicativeExpression MultiplicativeExpression_585_Var = (MultiplicativeExpression)Expr_584_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_585_Var);
		final EList<? extends EObject> Expr_585_list = MultiplicativeExpression_585_Var.getExpr();
		Assert.assertNotNull(Expr_585_list);
		Assert.assertEquals(1, Expr_585_list.size());
		final CastExpression CastExpression_586_Var = (CastExpression)Expr_585_list.get(0);
		Assert.assertNotNull(CastExpression_586_Var);
		final UnaryExpression UnaryExpression_587_Var = (UnaryExpression)CastExpression_586_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_587_Var);
		final PostfixExpression PostfixExpression_588_Var = (PostfixExpression)UnaryExpression_587_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_588_Var);
		final EList<? extends EObject> Expr_588_list = PostfixExpression_588_Var.getExpr();
		Assert.assertNotNull(Expr_588_list);
		Assert.assertEquals(1, Expr_588_list.size());
		final PrimaryExpression PrimaryExpression_589_Var = (PrimaryExpression)Expr_588_list.get(0);
		Assert.assertNotNull(PrimaryExpression_589_Var);
		Assert.assertEquals("number", PrimaryExpression_589_Var.getId());
		Assert.assertEquals("[.]", PostfixExpression_588_Var.getDot().toString());
		Assert.assertEquals("[numFloat]", PostfixExpression_588_Var.getId().toString());
		Assert.assertEquals(";", ExpressionStatement_538_Var.getSemi());
		final Statement Statement_590_Var = (Statement)Statement_96_list.get(10);
		Assert.assertNotNull(Statement_590_Var);
		final JumpStatement JumpStatement_591_Var = (JumpStatement)Statement_590_Var.getStmt();
		Assert.assertNotNull(JumpStatement_591_Var);
		final Expression Expression_592_Var = (Expression)JumpStatement_591_Var.getExpr();
		Assert.assertNotNull(Expression_592_Var);
		final EList<? extends EObject> ExprExpr_592_list = Expression_592_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_592_list);
		Assert.assertEquals(1, ExprExpr_592_list.size());
		final AssignmentExpression AssignmentExpression_593_Var = (AssignmentExpression)ExprExpr_592_list.get(0);
		Assert.assertNotNull(AssignmentExpression_593_Var);
		final ConditionalExpression ConditionalExpression_594_Var = (ConditionalExpression)AssignmentExpression_593_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_594_Var);
		final LogicalOrExpression LogicalOrExpression_595_Var = (LogicalOrExpression)ConditionalExpression_594_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_595_Var);
		final EList<? extends EObject> Expr_595_list = LogicalOrExpression_595_Var.getExpr();
		Assert.assertNotNull(Expr_595_list);
		Assert.assertEquals(1, Expr_595_list.size());
		final LogicalAndExpression LogicalAndExpression_596_Var = (LogicalAndExpression)Expr_595_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_596_Var);
		final EList<? extends EObject> Expr_596_list = LogicalAndExpression_596_Var.getExpr();
		Assert.assertNotNull(Expr_596_list);
		Assert.assertEquals(1, Expr_596_list.size());
		final InclusiveOrExpression InclusiveOrExpression_597_Var = (InclusiveOrExpression)Expr_596_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_597_Var);
		final EList<? extends EObject> Expr_597_list = InclusiveOrExpression_597_Var.getExpr();
		Assert.assertNotNull(Expr_597_list);
		Assert.assertEquals(1, Expr_597_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_598_Var = (ExclusiveOrExpression)Expr_597_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_598_Var);
		final EList<? extends EObject> Expr_598_list = ExclusiveOrExpression_598_Var.getExpr();
		Assert.assertNotNull(Expr_598_list);
		Assert.assertEquals(1, Expr_598_list.size());
		final AndExpression AndExpression_599_Var = (AndExpression)Expr_598_list.get(0);
		Assert.assertNotNull(AndExpression_599_Var);
		final EList<? extends EObject> Expr_599_list = AndExpression_599_Var.getExpr();
		Assert.assertNotNull(Expr_599_list);
		Assert.assertEquals(1, Expr_599_list.size());
		final EqualityExpression EqualityExpression_600_Var = (EqualityExpression)Expr_599_list.get(0);
		Assert.assertNotNull(EqualityExpression_600_Var);
		final EList<? extends EObject> Expr_600_list = EqualityExpression_600_Var.getExpr();
		Assert.assertNotNull(Expr_600_list);
		Assert.assertEquals(1, Expr_600_list.size());
		final RelationalExpression RelationalExpression_601_Var = (RelationalExpression)Expr_600_list.get(0);
		Assert.assertNotNull(RelationalExpression_601_Var);
		final EList<? extends EObject> Expr_601_list = RelationalExpression_601_Var.getExpr();
		Assert.assertNotNull(Expr_601_list);
		Assert.assertEquals(1, Expr_601_list.size());
		final ShiftExpression ShiftExpression_602_Var = (ShiftExpression)Expr_601_list.get(0);
		Assert.assertNotNull(ShiftExpression_602_Var);
		final EList<? extends EObject> Expr_602_list = ShiftExpression_602_Var.getExpr();
		Assert.assertNotNull(Expr_602_list);
		Assert.assertEquals(1, Expr_602_list.size());
		final AdditiveExpression AdditiveExpression_603_Var = (AdditiveExpression)Expr_602_list.get(0);
		Assert.assertNotNull(AdditiveExpression_603_Var);
		final EList<? extends EObject> Expr_603_list = AdditiveExpression_603_Var.getExpr();
		Assert.assertNotNull(Expr_603_list);
		Assert.assertEquals(1, Expr_603_list.size());
		final MultiplicativeExpression MultiplicativeExpression_604_Var = (MultiplicativeExpression)Expr_603_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_604_Var);
		final EList<? extends EObject> Expr_604_list = MultiplicativeExpression_604_Var.getExpr();
		Assert.assertNotNull(Expr_604_list);
		Assert.assertEquals(1, Expr_604_list.size());
		final CastExpression CastExpression_605_Var = (CastExpression)Expr_604_list.get(0);
		Assert.assertNotNull(CastExpression_605_Var);
		final UnaryExpression UnaryExpression_606_Var = (UnaryExpression)CastExpression_605_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_606_Var);
		final PostfixExpression PostfixExpression_607_Var = (PostfixExpression)UnaryExpression_606_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_607_Var);
		final EList<? extends EObject> Expr_607_list = PostfixExpression_607_Var.getExpr();
		Assert.assertNotNull(Expr_607_list);
		Assert.assertEquals(1, Expr_607_list.size());
		final PrimaryExpression PrimaryExpression_608_Var = (PrimaryExpression)Expr_607_list.get(0);
		Assert.assertNotNull(PrimaryExpression_608_Var);
		final Constant Constant_609_Var = (Constant)PrimaryExpression_608_Var.getConst();
		Assert.assertNotNull(Constant_609_Var);
		Assert.assertEquals("0", Constant_609_Var.getDec());
		Assert.assertEquals("return", JumpStatement_591_Var.getReturn());
		Assert.assertEquals(";", JumpStatement_591_Var.getSemi());
	}


}
