package at.jku.weiner.c.xtexttests;

import com.google.inject.Inject;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import org.antlr.runtime.Token;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipse.xtext.junit4.util.ParseHelper;
import org.eclipse.xtext.junit4.validation.ValidationTestHelper;
import org.eclipse.xtext.junit4.XtextRunner;
import org.eclipse.xtext.parser.antlr.ITokenDefProvider;
import org.junit.Assert;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import at.jku.weiner.c.tests.CInjectorProvider;
import at.jku.weiner.c.parser.antlr.CParser;
import at.jku.weiner.c.parser.antlr.internal.InternalCLexer;
import at.jku.weiner.c.xtexttests.LexerAndParserTest;

import at.jku.weiner.c.c.Model;
import at.jku.weiner.c.c.TranslationUnit;
import at.jku.weiner.c.c.ExternalDeclaration;
import at.jku.weiner.c.c.Declaration;
import at.jku.weiner.c.c.DeclarationSpecifiers;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.StructOrUnionSpecifier;
import at.jku.weiner.c.c.StructOrUnion;
import at.jku.weiner.c.c.StructDeclarationList;
import at.jku.weiner.c.c.StructDeclaration;
import at.jku.weiner.c.c.SpecifierQualifierList;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.StructDeclaratorList;
import at.jku.weiner.c.c.StructDeclarator;
import at.jku.weiner.c.c.Declarator;
import at.jku.weiner.c.c.DirectDeclarator;
import at.jku.weiner.c.c.StructDeclaration;
import at.jku.weiner.c.c.SpecifierQualifierList;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.StructDeclaratorList;
import at.jku.weiner.c.c.StructDeclarator;
import at.jku.weiner.c.c.Declarator;
import at.jku.weiner.c.c.DirectDeclarator;
import at.jku.weiner.c.c.DeclaratorSuffix;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.InitDeclaratorList;
import at.jku.weiner.c.c.InitDeclarator;
import at.jku.weiner.c.c.Declarator;
import at.jku.weiner.c.c.DirectDeclarator;
import at.jku.weiner.c.c.ExternalDeclaration;
import at.jku.weiner.c.c.Declaration;
import at.jku.weiner.c.c.DeclarationSpecifiers;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.StructOrUnionSpecifier;
import at.jku.weiner.c.c.StructOrUnion;
import at.jku.weiner.c.c.InitDeclaratorList;
import at.jku.weiner.c.c.InitDeclarator;
import at.jku.weiner.c.c.Declarator;
import at.jku.weiner.c.c.DirectDeclarator;
import at.jku.weiner.c.c.Initializer;
import at.jku.weiner.c.c.InitializerList;
import at.jku.weiner.c.c.Initializer;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.Initializer;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.ExternalDeclaration;
import at.jku.weiner.c.c.FunctionDefHead;
import at.jku.weiner.c.c.DeclarationSpecifiers;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.Declarator;
import at.jku.weiner.c.c.DirectDeclarator;
import at.jku.weiner.c.c.DeclaratorSuffix;
import at.jku.weiner.c.c.DirectDeclaratorLastSuffix;
import at.jku.weiner.c.c.ParameterTypeList;
import at.jku.weiner.c.c.ParameterList;
import at.jku.weiner.c.c.ParameterDeclaration;
import at.jku.weiner.c.c.DeclarationSpecifiers;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.FunctionDefinition;
import at.jku.weiner.c.c.BodyStatement;
import at.jku.weiner.c.c.BlockList;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.AssignmentOperator;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.JumpStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;

@SuppressWarnings("unused")
@RunWith(XtextRunner.class)
@InjectWith(CInjectorProvider.class)
public class Test0037_Struct {

	@Inject
	private ParseHelper<Model> parseHelper;
	@Inject
	private ValidationTestHelper valHelper;
	@Inject
	private InternalCLexer lexer;
	@Inject
	private CParser parser;
	@Inject
	private ITokenDefProvider tokenDefProvider;
	
	private LexerAndParserTest testHelper;
	
	@Before
	public void initialize(){
		this.testHelper = new LexerAndParserTest(lexer, parser, tokenDefProvider);
	}
	
	private String getSourceText()
	throws Exception{
		final Path path = Paths.get("res/Test0037_Struct.c");
		final String content = new String(Files.readAllBytes(path));
		return content;
	}
	
	@Test
	public void checkLexerTokens()
	throws Exception{
		final String text = this.getSourceText();
		//System.out.println(text);
		final String[] expected = new String[] {
			"RULE_LINEDIRECTIVE",
			"RULE_NEWLINE",
			"RULE_LINEDIRECTIVE",
			"RULE_NEWLINE",
			"RULE_NEWLINE",
			"RULE_KW_STRUCT",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_WHITESPACE",
			"RULE_LEFTBRACE",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_KW_INT",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_KW_CHAR",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTBRACKET",
			"RULE_DECIMAL_LITERAL",
			"RULE_RIGHTBRACKET",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_RIGHTBRACE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_NEWLINE",
			"RULE_KW_STRUCT",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_WHITESPACE",
			"RULE_ASSIGN",
			"RULE_WHITESPACE",
			"RULE_LEFTBRACE",
			"RULE_HEX_LITERAL",
			"RULE_COMMA",
			"RULE_WHITESPACE",
			"RULE_STRING_LITERAL",
			"RULE_RIGHTBRACE",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_NEWLINE",
			"RULE_KW_INT",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_KW_VOID",
			"RULE_RIGHTPAREN",
			"RULE_WHITESPACE",
			"RULE_LEFTBRACE",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_STRING_LITERAL",
			"RULE_COMMA",
			"RULE_WHITESPACE",
			"RULE_KW_SIZEOF",
			"RULE_LEFTPAREN",
			"RULE_ID",
			"RULE_DOT",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_STRING_LITERAL",
			"RULE_COMMA",
			"RULE_WHITESPACE",
			"RULE_KW_SIZEOF",
			"RULE_LEFTPAREN",
			"RULE_ID",
			"RULE_DOT",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_STRING_LITERAL",
			"RULE_COMMA",
			"RULE_WHITESPACE",
			"RULE_KW_SIZEOF",
			"RULE_LEFTPAREN",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_DOT",
			"RULE_ID",
			"RULE_WHITESPACE",
			"RULE_ASSIGN",
			"RULE_WHITESPACE",
			"RULE_HEX_LITERAL",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_ID",
			"RULE_DOT",
			"RULE_ID",
			"RULE_COMMA",
			"RULE_WHITESPACE",
			"RULE_STRING_LITERAL",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_STRING_LITERAL",
			"RULE_COMMA",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_DOT",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_STRING_LITERAL",
			"RULE_COMMA",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_DOT",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_STRING_LITERAL",
			"RULE_COMMA",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_DOT",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_STRING_LITERAL",
			"RULE_COMMA",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_DOT",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_KW_RETURN",
			"RULE_WHITESPACE",
			"RULE_DECIMAL_LITERAL",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_RIGHTBRACE",
			"RULE_NEWLINE",
		};
		//final List<Token> actual = testHelper.getTokens(text);
		//testHelper.outputTokens(text);
		testHelper.checkTokenisation(text, expected);
	}
	
	@Test
	public void checkParserResult()
	throws Exception{

		final String text = this.getSourceText();
		final Model Model_0_Var = this.parseHelper.parse(text);
	
		this.valHelper.assertNoErrors(Model_0_Var);
		Assert.assertNotNull(Model_0_Var);
		final EList<? extends EObject> Unit_0_list = Model_0_Var.getUnit();
		Assert.assertNotNull(Unit_0_list);
		Assert.assertEquals(1, Unit_0_list.size());
		final TranslationUnit TranslationUnit_1_Var = (TranslationUnit)Unit_0_list.get(0);
		Assert.assertNotNull(TranslationUnit_1_Var);
		final EList<? extends EObject> External_1_list = TranslationUnit_1_Var.getExternal();
		Assert.assertNotNull(External_1_list);
		Assert.assertEquals(3, External_1_list.size());
		final ExternalDeclaration ExternalDeclaration_2_Var = (ExternalDeclaration)External_1_list.get(0);
		Assert.assertNotNull(ExternalDeclaration_2_Var);
		final Declaration Declaration_3_Var = (Declaration)ExternalDeclaration_2_Var.getDeclaration();
		Assert.assertNotNull(Declaration_3_Var);
		final DeclarationSpecifiers DeclarationSpecifiers_4_Var = (DeclarationSpecifiers)Declaration_3_Var.getSpecifiers();
		Assert.assertNotNull(DeclarationSpecifiers_4_Var);
		final EList<? extends EObject> DeclarationSpecifier_4_list = DeclarationSpecifiers_4_Var.getDeclarationSpecifier();
		Assert.assertNotNull(DeclarationSpecifier_4_list);
		Assert.assertEquals(1, DeclarationSpecifier_4_list.size());
		final TypeSpecifier TypeSpecifier_5_Var = (TypeSpecifier)DeclarationSpecifier_4_list.get(0);
		Assert.assertNotNull(TypeSpecifier_5_Var);
		final StructOrUnionSpecifier StructOrUnionSpecifier_6_Var = (StructOrUnionSpecifier)TypeSpecifier_5_Var.getSpecifier();
		Assert.assertNotNull(StructOrUnionSpecifier_6_Var);
		final StructOrUnion StructOrUnion_7_Var = (StructOrUnion)StructOrUnionSpecifier_6_Var.getType();
		Assert.assertNotNull(StructOrUnion_7_Var);
		Assert.assertEquals("struct", StructOrUnion_7_Var.getName());
		Assert.assertEquals("employee", StructOrUnionSpecifier_6_Var.getId());
		final StructDeclarationList StructDeclarationList_8_Var = (StructDeclarationList)StructOrUnionSpecifier_6_Var.getStructDeclList();
		Assert.assertNotNull(StructDeclarationList_8_Var);
		final EList<? extends EObject> StructDeclaration_8_list = StructDeclarationList_8_Var.getStructDeclaration();
		Assert.assertNotNull(StructDeclaration_8_list);
		Assert.assertEquals(2, StructDeclaration_8_list.size());
		final StructDeclaration StructDeclaration_9_Var = (StructDeclaration)StructDeclaration_8_list.get(0);
		Assert.assertNotNull(StructDeclaration_9_Var);
		final SpecifierQualifierList SpecifierQualifierList_10_Var = (SpecifierQualifierList)StructDeclaration_9_Var.getList();
		Assert.assertNotNull(SpecifierQualifierList_10_Var);
		final EList<? extends EObject> TypeSpecifier_10_list = SpecifierQualifierList_10_Var.getTypeSpecifier();
		Assert.assertNotNull(TypeSpecifier_10_list);
		Assert.assertEquals(1, TypeSpecifier_10_list.size());
		final TypeSpecifier TypeSpecifier_11_Var = (TypeSpecifier)TypeSpecifier_10_list.get(0);
		Assert.assertNotNull(TypeSpecifier_11_Var);
		Assert.assertEquals("int", TypeSpecifier_11_Var.getName());
		final StructDeclaratorList StructDeclaratorList_12_Var = (StructDeclaratorList)StructDeclaration_9_Var.getStructDeclarationList();
		Assert.assertNotNull(StructDeclaratorList_12_Var);
		final EList<? extends EObject> StructDeclarator_12_list = StructDeclaratorList_12_Var.getStructDeclarator();
		Assert.assertNotNull(StructDeclarator_12_list);
		Assert.assertEquals(1, StructDeclarator_12_list.size());
		final StructDeclarator StructDeclarator_13_Var = (StructDeclarator)StructDeclarator_12_list.get(0);
		Assert.assertNotNull(StructDeclarator_13_Var);
		final Declarator Declarator_14_Var = (Declarator)StructDeclarator_13_Var.getDeclarator();
		Assert.assertNotNull(Declarator_14_Var);
		final DirectDeclarator DirectDeclarator_15_Var = (DirectDeclarator)Declarator_14_Var.getDeclarator();
		Assert.assertNotNull(DirectDeclarator_15_Var);
		Assert.assertEquals("id", DirectDeclarator_15_Var.getId());
		final StructDeclaration StructDeclaration_16_Var = (StructDeclaration)StructDeclaration_8_list.get(1);
		Assert.assertNotNull(StructDeclaration_16_Var);
		final SpecifierQualifierList SpecifierQualifierList_17_Var = (SpecifierQualifierList)StructDeclaration_16_Var.getList();
		Assert.assertNotNull(SpecifierQualifierList_17_Var);
		final EList<? extends EObject> TypeSpecifier_17_list = SpecifierQualifierList_17_Var.getTypeSpecifier();
		Assert.assertNotNull(TypeSpecifier_17_list);
		Assert.assertEquals(1, TypeSpecifier_17_list.size());
		final TypeSpecifier TypeSpecifier_18_Var = (TypeSpecifier)TypeSpecifier_17_list.get(0);
		Assert.assertNotNull(TypeSpecifier_18_Var);
		Assert.assertEquals("char", TypeSpecifier_18_Var.getName());
		final StructDeclaratorList StructDeclaratorList_19_Var = (StructDeclaratorList)StructDeclaration_16_Var.getStructDeclarationList();
		Assert.assertNotNull(StructDeclaratorList_19_Var);
		final EList<? extends EObject> StructDeclarator_19_list = StructDeclaratorList_19_Var.getStructDeclarator();
		Assert.assertNotNull(StructDeclarator_19_list);
		Assert.assertEquals(1, StructDeclarator_19_list.size());
		final StructDeclarator StructDeclarator_20_Var = (StructDeclarator)StructDeclarator_19_list.get(0);
		Assert.assertNotNull(StructDeclarator_20_Var);
		final Declarator Declarator_21_Var = (Declarator)StructDeclarator_20_Var.getDeclarator();
		Assert.assertNotNull(Declarator_21_Var);
		final DirectDeclarator DirectDeclarator_22_Var = (DirectDeclarator)Declarator_21_Var.getDeclarator();
		Assert.assertNotNull(DirectDeclarator_22_Var);
		Assert.assertEquals("name", DirectDeclarator_22_Var.getId());
		final EList<? extends EObject> DeclaratorSuffix_22_list = DirectDeclarator_22_Var.getDeclaratorSuffix();
		Assert.assertNotNull(DeclaratorSuffix_22_list);
		Assert.assertEquals(1, DeclaratorSuffix_22_list.size());
		final DeclaratorSuffix DeclaratorSuffix_23_Var = (DeclaratorSuffix)DeclaratorSuffix_22_list.get(0);
		Assert.assertNotNull(DeclaratorSuffix_23_Var);
		final AssignmentExpression AssignmentExpression_24_Var = (AssignmentExpression)DeclaratorSuffix_23_Var.getExpr();
		Assert.assertNotNull(AssignmentExpression_24_Var);
		final ConditionalExpression ConditionalExpression_25_Var = (ConditionalExpression)AssignmentExpression_24_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_25_Var);
		final LogicalOrExpression LogicalOrExpression_26_Var = (LogicalOrExpression)ConditionalExpression_25_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_26_Var);
		final EList<? extends EObject> Expr_26_list = LogicalOrExpression_26_Var.getExpr();
		Assert.assertNotNull(Expr_26_list);
		Assert.assertEquals(1, Expr_26_list.size());
		final LogicalAndExpression LogicalAndExpression_27_Var = (LogicalAndExpression)Expr_26_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_27_Var);
		final EList<? extends EObject> Expr_27_list = LogicalAndExpression_27_Var.getExpr();
		Assert.assertNotNull(Expr_27_list);
		Assert.assertEquals(1, Expr_27_list.size());
		final InclusiveOrExpression InclusiveOrExpression_28_Var = (InclusiveOrExpression)Expr_27_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_28_Var);
		final EList<? extends EObject> Expr_28_list = InclusiveOrExpression_28_Var.getExpr();
		Assert.assertNotNull(Expr_28_list);
		Assert.assertEquals(1, Expr_28_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_29_Var = (ExclusiveOrExpression)Expr_28_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_29_Var);
		final EList<? extends EObject> Expr_29_list = ExclusiveOrExpression_29_Var.getExpr();
		Assert.assertNotNull(Expr_29_list);
		Assert.assertEquals(1, Expr_29_list.size());
		final AndExpression AndExpression_30_Var = (AndExpression)Expr_29_list.get(0);
		Assert.assertNotNull(AndExpression_30_Var);
		final EList<? extends EObject> Expr_30_list = AndExpression_30_Var.getExpr();
		Assert.assertNotNull(Expr_30_list);
		Assert.assertEquals(1, Expr_30_list.size());
		final EqualityExpression EqualityExpression_31_Var = (EqualityExpression)Expr_30_list.get(0);
		Assert.assertNotNull(EqualityExpression_31_Var);
		final EList<? extends EObject> Expr_31_list = EqualityExpression_31_Var.getExpr();
		Assert.assertNotNull(Expr_31_list);
		Assert.assertEquals(1, Expr_31_list.size());
		final RelationalExpression RelationalExpression_32_Var = (RelationalExpression)Expr_31_list.get(0);
		Assert.assertNotNull(RelationalExpression_32_Var);
		final EList<? extends EObject> Expr_32_list = RelationalExpression_32_Var.getExpr();
		Assert.assertNotNull(Expr_32_list);
		Assert.assertEquals(1, Expr_32_list.size());
		final ShiftExpression ShiftExpression_33_Var = (ShiftExpression)Expr_32_list.get(0);
		Assert.assertNotNull(ShiftExpression_33_Var);
		final EList<? extends EObject> Expr_33_list = ShiftExpression_33_Var.getExpr();
		Assert.assertNotNull(Expr_33_list);
		Assert.assertEquals(1, Expr_33_list.size());
		final AdditiveExpression AdditiveExpression_34_Var = (AdditiveExpression)Expr_33_list.get(0);
		Assert.assertNotNull(AdditiveExpression_34_Var);
		final EList<? extends EObject> Expr_34_list = AdditiveExpression_34_Var.getExpr();
		Assert.assertNotNull(Expr_34_list);
		Assert.assertEquals(1, Expr_34_list.size());
		final MultiplicativeExpression MultiplicativeExpression_35_Var = (MultiplicativeExpression)Expr_34_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_35_Var);
		final EList<? extends EObject> Expr_35_list = MultiplicativeExpression_35_Var.getExpr();
		Assert.assertNotNull(Expr_35_list);
		Assert.assertEquals(1, Expr_35_list.size());
		final CastExpression CastExpression_36_Var = (CastExpression)Expr_35_list.get(0);
		Assert.assertNotNull(CastExpression_36_Var);
		final UnaryExpression UnaryExpression_37_Var = (UnaryExpression)CastExpression_36_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_37_Var);
		final PostfixExpression PostfixExpression_38_Var = (PostfixExpression)UnaryExpression_37_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_38_Var);
		final EList<? extends EObject> Expr_38_list = PostfixExpression_38_Var.getExpr();
		Assert.assertNotNull(Expr_38_list);
		Assert.assertEquals(1, Expr_38_list.size());
		final PrimaryExpression PrimaryExpression_39_Var = (PrimaryExpression)Expr_38_list.get(0);
		Assert.assertNotNull(PrimaryExpression_39_Var);
		final Constant Constant_40_Var = (Constant)PrimaryExpression_39_Var.getConst();
		Assert.assertNotNull(Constant_40_Var);
		Assert.assertEquals("250", Constant_40_Var.getDec());
		final EList<? extends EObject> InitDeclaratorList_40_list = Declaration_3_Var.getInitDeclaratorList();
		Assert.assertNotNull(InitDeclaratorList_40_list);
		Assert.assertEquals(1, InitDeclaratorList_40_list.size());
		final InitDeclaratorList InitDeclaratorList_41_Var = (InitDeclaratorList)InitDeclaratorList_40_list.get(0);
		Assert.assertNotNull(InitDeclaratorList_41_Var);
		final EList<? extends EObject> InitDeclarator_41_list = InitDeclaratorList_41_Var.getInitDeclarator();
		Assert.assertNotNull(InitDeclarator_41_list);
		Assert.assertEquals(1, InitDeclarator_41_list.size());
		final InitDeclarator InitDeclarator_42_Var = (InitDeclarator)InitDeclarator_41_list.get(0);
		Assert.assertNotNull(InitDeclarator_42_Var);
		final Declarator Declarator_43_Var = (Declarator)InitDeclarator_42_Var.getDeclarator();
		Assert.assertNotNull(Declarator_43_Var);
		final DirectDeclarator DirectDeclarator_44_Var = (DirectDeclarator)Declarator_43_Var.getDeclarator();
		Assert.assertNotNull(DirectDeclarator_44_Var);
		Assert.assertEquals("phil", DirectDeclarator_44_Var.getId());
		final ExternalDeclaration ExternalDeclaration_45_Var = (ExternalDeclaration)External_1_list.get(1);
		Assert.assertNotNull(ExternalDeclaration_45_Var);
		final Declaration Declaration_46_Var = (Declaration)ExternalDeclaration_45_Var.getDeclaration();
		Assert.assertNotNull(Declaration_46_Var);
		final DeclarationSpecifiers DeclarationSpecifiers_47_Var = (DeclarationSpecifiers)Declaration_46_Var.getSpecifiers();
		Assert.assertNotNull(DeclarationSpecifiers_47_Var);
		final EList<? extends EObject> DeclarationSpecifier_47_list = DeclarationSpecifiers_47_Var.getDeclarationSpecifier();
		Assert.assertNotNull(DeclarationSpecifier_47_list);
		Assert.assertEquals(1, DeclarationSpecifier_47_list.size());
		final TypeSpecifier TypeSpecifier_48_Var = (TypeSpecifier)DeclarationSpecifier_47_list.get(0);
		Assert.assertNotNull(TypeSpecifier_48_Var);
		final StructOrUnionSpecifier StructOrUnionSpecifier_49_Var = (StructOrUnionSpecifier)TypeSpecifier_48_Var.getSpecifier();
		Assert.assertNotNull(StructOrUnionSpecifier_49_Var);
		final StructOrUnion StructOrUnion_50_Var = (StructOrUnion)StructOrUnionSpecifier_49_Var.getType();
		Assert.assertNotNull(StructOrUnion_50_Var);
		Assert.assertEquals("struct", StructOrUnion_50_Var.getName());
		Assert.assertEquals("employee", StructOrUnionSpecifier_49_Var.getId());
		final EList<? extends EObject> InitDeclaratorList_50_list = Declaration_46_Var.getInitDeclaratorList();
		Assert.assertNotNull(InitDeclaratorList_50_list);
		Assert.assertEquals(1, InitDeclaratorList_50_list.size());
		final InitDeclaratorList InitDeclaratorList_51_Var = (InitDeclaratorList)InitDeclaratorList_50_list.get(0);
		Assert.assertNotNull(InitDeclaratorList_51_Var);
		final EList<? extends EObject> InitDeclarator_51_list = InitDeclaratorList_51_Var.getInitDeclarator();
		Assert.assertNotNull(InitDeclarator_51_list);
		Assert.assertEquals(1, InitDeclarator_51_list.size());
		final InitDeclarator InitDeclarator_52_Var = (InitDeclarator)InitDeclarator_51_list.get(0);
		Assert.assertNotNull(InitDeclarator_52_Var);
		final Declarator Declarator_53_Var = (Declarator)InitDeclarator_52_Var.getDeclarator();
		Assert.assertNotNull(Declarator_53_Var);
		final DirectDeclarator DirectDeclarator_54_Var = (DirectDeclarator)Declarator_53_Var.getDeclarator();
		Assert.assertNotNull(DirectDeclarator_54_Var);
		Assert.assertEquals("joe", DirectDeclarator_54_Var.getId());
		final Initializer Initializer_55_Var = (Initializer)InitDeclarator_52_Var.getInitializer();
		Assert.assertNotNull(Initializer_55_Var);
		final InitializerList InitializerList_56_Var = (InitializerList)Initializer_55_Var.getList();
		Assert.assertNotNull(InitializerList_56_Var);
		final EList<? extends EObject> Initializer_56_list = InitializerList_56_Var.getInitializer();
		Assert.assertNotNull(Initializer_56_list);
		Assert.assertEquals(2, Initializer_56_list.size());
		final Initializer Initializer_57_Var = (Initializer)Initializer_56_list.get(0);
		Assert.assertNotNull(Initializer_57_Var);
		final AssignmentExpression AssignmentExpression_58_Var = (AssignmentExpression)Initializer_57_Var.getExpr();
		Assert.assertNotNull(AssignmentExpression_58_Var);
		final ConditionalExpression ConditionalExpression_59_Var = (ConditionalExpression)AssignmentExpression_58_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_59_Var);
		final LogicalOrExpression LogicalOrExpression_60_Var = (LogicalOrExpression)ConditionalExpression_59_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_60_Var);
		final EList<? extends EObject> Expr_60_list = LogicalOrExpression_60_Var.getExpr();
		Assert.assertNotNull(Expr_60_list);
		Assert.assertEquals(1, Expr_60_list.size());
		final LogicalAndExpression LogicalAndExpression_61_Var = (LogicalAndExpression)Expr_60_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_61_Var);
		final EList<? extends EObject> Expr_61_list = LogicalAndExpression_61_Var.getExpr();
		Assert.assertNotNull(Expr_61_list);
		Assert.assertEquals(1, Expr_61_list.size());
		final InclusiveOrExpression InclusiveOrExpression_62_Var = (InclusiveOrExpression)Expr_61_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_62_Var);
		final EList<? extends EObject> Expr_62_list = InclusiveOrExpression_62_Var.getExpr();
		Assert.assertNotNull(Expr_62_list);
		Assert.assertEquals(1, Expr_62_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_63_Var = (ExclusiveOrExpression)Expr_62_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_63_Var);
		final EList<? extends EObject> Expr_63_list = ExclusiveOrExpression_63_Var.getExpr();
		Assert.assertNotNull(Expr_63_list);
		Assert.assertEquals(1, Expr_63_list.size());
		final AndExpression AndExpression_64_Var = (AndExpression)Expr_63_list.get(0);
		Assert.assertNotNull(AndExpression_64_Var);
		final EList<? extends EObject> Expr_64_list = AndExpression_64_Var.getExpr();
		Assert.assertNotNull(Expr_64_list);
		Assert.assertEquals(1, Expr_64_list.size());
		final EqualityExpression EqualityExpression_65_Var = (EqualityExpression)Expr_64_list.get(0);
		Assert.assertNotNull(EqualityExpression_65_Var);
		final EList<? extends EObject> Expr_65_list = EqualityExpression_65_Var.getExpr();
		Assert.assertNotNull(Expr_65_list);
		Assert.assertEquals(1, Expr_65_list.size());
		final RelationalExpression RelationalExpression_66_Var = (RelationalExpression)Expr_65_list.get(0);
		Assert.assertNotNull(RelationalExpression_66_Var);
		final EList<? extends EObject> Expr_66_list = RelationalExpression_66_Var.getExpr();
		Assert.assertNotNull(Expr_66_list);
		Assert.assertEquals(1, Expr_66_list.size());
		final ShiftExpression ShiftExpression_67_Var = (ShiftExpression)Expr_66_list.get(0);
		Assert.assertNotNull(ShiftExpression_67_Var);
		final EList<? extends EObject> Expr_67_list = ShiftExpression_67_Var.getExpr();
		Assert.assertNotNull(Expr_67_list);
		Assert.assertEquals(1, Expr_67_list.size());
		final AdditiveExpression AdditiveExpression_68_Var = (AdditiveExpression)Expr_67_list.get(0);
		Assert.assertNotNull(AdditiveExpression_68_Var);
		final EList<? extends EObject> Expr_68_list = AdditiveExpression_68_Var.getExpr();
		Assert.assertNotNull(Expr_68_list);
		Assert.assertEquals(1, Expr_68_list.size());
		final MultiplicativeExpression MultiplicativeExpression_69_Var = (MultiplicativeExpression)Expr_68_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_69_Var);
		final EList<? extends EObject> Expr_69_list = MultiplicativeExpression_69_Var.getExpr();
		Assert.assertNotNull(Expr_69_list);
		Assert.assertEquals(1, Expr_69_list.size());
		final CastExpression CastExpression_70_Var = (CastExpression)Expr_69_list.get(0);
		Assert.assertNotNull(CastExpression_70_Var);
		final UnaryExpression UnaryExpression_71_Var = (UnaryExpression)CastExpression_70_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_71_Var);
		final PostfixExpression PostfixExpression_72_Var = (PostfixExpression)UnaryExpression_71_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_72_Var);
		final EList<? extends EObject> Expr_72_list = PostfixExpression_72_Var.getExpr();
		Assert.assertNotNull(Expr_72_list);
		Assert.assertEquals(1, Expr_72_list.size());
		final PrimaryExpression PrimaryExpression_73_Var = (PrimaryExpression)Expr_72_list.get(0);
		Assert.assertNotNull(PrimaryExpression_73_Var);
		final Constant Constant_74_Var = (Constant)PrimaryExpression_73_Var.getConst();
		Assert.assertNotNull(Constant_74_Var);
		Assert.assertEquals("0x007", Constant_74_Var.getHex());
		final Initializer Initializer_75_Var = (Initializer)Initializer_56_list.get(1);
		Assert.assertNotNull(Initializer_75_Var);
		final AssignmentExpression AssignmentExpression_76_Var = (AssignmentExpression)Initializer_75_Var.getExpr();
		Assert.assertNotNull(AssignmentExpression_76_Var);
		final ConditionalExpression ConditionalExpression_77_Var = (ConditionalExpression)AssignmentExpression_76_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_77_Var);
		final LogicalOrExpression LogicalOrExpression_78_Var = (LogicalOrExpression)ConditionalExpression_77_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_78_Var);
		final EList<? extends EObject> Expr_78_list = LogicalOrExpression_78_Var.getExpr();
		Assert.assertNotNull(Expr_78_list);
		Assert.assertEquals(1, Expr_78_list.size());
		final LogicalAndExpression LogicalAndExpression_79_Var = (LogicalAndExpression)Expr_78_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_79_Var);
		final EList<? extends EObject> Expr_79_list = LogicalAndExpression_79_Var.getExpr();
		Assert.assertNotNull(Expr_79_list);
		Assert.assertEquals(1, Expr_79_list.size());
		final InclusiveOrExpression InclusiveOrExpression_80_Var = (InclusiveOrExpression)Expr_79_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_80_Var);
		final EList<? extends EObject> Expr_80_list = InclusiveOrExpression_80_Var.getExpr();
		Assert.assertNotNull(Expr_80_list);
		Assert.assertEquals(1, Expr_80_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_81_Var = (ExclusiveOrExpression)Expr_80_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_81_Var);
		final EList<? extends EObject> Expr_81_list = ExclusiveOrExpression_81_Var.getExpr();
		Assert.assertNotNull(Expr_81_list);
		Assert.assertEquals(1, Expr_81_list.size());
		final AndExpression AndExpression_82_Var = (AndExpression)Expr_81_list.get(0);
		Assert.assertNotNull(AndExpression_82_Var);
		final EList<? extends EObject> Expr_82_list = AndExpression_82_Var.getExpr();
		Assert.assertNotNull(Expr_82_list);
		Assert.assertEquals(1, Expr_82_list.size());
		final EqualityExpression EqualityExpression_83_Var = (EqualityExpression)Expr_82_list.get(0);
		Assert.assertNotNull(EqualityExpression_83_Var);
		final EList<? extends EObject> Expr_83_list = EqualityExpression_83_Var.getExpr();
		Assert.assertNotNull(Expr_83_list);
		Assert.assertEquals(1, Expr_83_list.size());
		final RelationalExpression RelationalExpression_84_Var = (RelationalExpression)Expr_83_list.get(0);
		Assert.assertNotNull(RelationalExpression_84_Var);
		final EList<? extends EObject> Expr_84_list = RelationalExpression_84_Var.getExpr();
		Assert.assertNotNull(Expr_84_list);
		Assert.assertEquals(1, Expr_84_list.size());
		final ShiftExpression ShiftExpression_85_Var = (ShiftExpression)Expr_84_list.get(0);
		Assert.assertNotNull(ShiftExpression_85_Var);
		final EList<? extends EObject> Expr_85_list = ShiftExpression_85_Var.getExpr();
		Assert.assertNotNull(Expr_85_list);
		Assert.assertEquals(1, Expr_85_list.size());
		final AdditiveExpression AdditiveExpression_86_Var = (AdditiveExpression)Expr_85_list.get(0);
		Assert.assertNotNull(AdditiveExpression_86_Var);
		final EList<? extends EObject> Expr_86_list = AdditiveExpression_86_Var.getExpr();
		Assert.assertNotNull(Expr_86_list);
		Assert.assertEquals(1, Expr_86_list.size());
		final MultiplicativeExpression MultiplicativeExpression_87_Var = (MultiplicativeExpression)Expr_86_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_87_Var);
		final EList<? extends EObject> Expr_87_list = MultiplicativeExpression_87_Var.getExpr();
		Assert.assertNotNull(Expr_87_list);
		Assert.assertEquals(1, Expr_87_list.size());
		final CastExpression CastExpression_88_Var = (CastExpression)Expr_87_list.get(0);
		Assert.assertNotNull(CastExpression_88_Var);
		final UnaryExpression UnaryExpression_89_Var = (UnaryExpression)CastExpression_88_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_89_Var);
		final PostfixExpression PostfixExpression_90_Var = (PostfixExpression)UnaryExpression_89_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_90_Var);
		final EList<? extends EObject> Expr_90_list = PostfixExpression_90_Var.getExpr();
		Assert.assertNotNull(Expr_90_list);
		Assert.assertEquals(1, Expr_90_list.size());
		final PrimaryExpression PrimaryExpression_91_Var = (PrimaryExpression)Expr_90_list.get(0);
		Assert.assertNotNull(PrimaryExpression_91_Var);
		final Constant Constant_92_Var = (Constant)PrimaryExpression_91_Var.getConst();
		Assert.assertNotNull(Constant_92_Var);
		Assert.assertEquals("\"Joe Nobody\"", Constant_92_Var.getStr());
		final ExternalDeclaration ExternalDeclaration_93_Var = (ExternalDeclaration)External_1_list.get(2);
		Assert.assertNotNull(ExternalDeclaration_93_Var);
		final FunctionDefHead FunctionDefHead_94_Var = (FunctionDefHead)ExternalDeclaration_93_Var.getFunctiondefHead();
		Assert.assertNotNull(FunctionDefHead_94_Var);
		final DeclarationSpecifiers DeclarationSpecifiers_95_Var = (DeclarationSpecifiers)FunctionDefHead_94_Var.getFunDeclSpecifiers();
		Assert.assertNotNull(DeclarationSpecifiers_95_Var);
		final EList<? extends EObject> DeclarationSpecifier_95_list = DeclarationSpecifiers_95_Var.getDeclarationSpecifier();
		Assert.assertNotNull(DeclarationSpecifier_95_list);
		Assert.assertEquals(1, DeclarationSpecifier_95_list.size());
		final TypeSpecifier TypeSpecifier_96_Var = (TypeSpecifier)DeclarationSpecifier_95_list.get(0);
		Assert.assertNotNull(TypeSpecifier_96_Var);
		Assert.assertEquals("int", TypeSpecifier_96_Var.getName());
		final Declarator Declarator_97_Var = (Declarator)FunctionDefHead_94_Var.getFunDeclarator();
		Assert.assertNotNull(Declarator_97_Var);
		final DirectDeclarator DirectDeclarator_98_Var = (DirectDeclarator)Declarator_97_Var.getDeclarator();
		Assert.assertNotNull(DirectDeclarator_98_Var);
		Assert.assertEquals("main", DirectDeclarator_98_Var.getId());
		final EList<? extends EObject> DeclaratorSuffix_98_list = DirectDeclarator_98_Var.getDeclaratorSuffix();
		Assert.assertNotNull(DeclaratorSuffix_98_list);
		Assert.assertEquals(1, DeclaratorSuffix_98_list.size());
		final DeclaratorSuffix DeclaratorSuffix_99_Var = (DeclaratorSuffix)DeclaratorSuffix_98_list.get(0);
		Assert.assertNotNull(DeclaratorSuffix_99_Var);
		final DirectDeclaratorLastSuffix DirectDeclaratorLastSuffix_100_Var = (DirectDeclaratorLastSuffix)DeclaratorSuffix_99_Var.getLastSuffix();
		Assert.assertNotNull(DirectDeclaratorLastSuffix_100_Var);
		final EList<? extends EObject> ParameterTypeList_100_list = DirectDeclaratorLastSuffix_100_Var.getParameterTypeList();
		Assert.assertNotNull(ParameterTypeList_100_list);
		Assert.assertEquals(1, ParameterTypeList_100_list.size());
		final ParameterTypeList ParameterTypeList_101_Var = (ParameterTypeList)ParameterTypeList_100_list.get(0);
		Assert.assertNotNull(ParameterTypeList_101_Var);
		final ParameterList ParameterList_102_Var = (ParameterList)ParameterTypeList_101_Var.getList();
		Assert.assertNotNull(ParameterList_102_Var);
		final EList<? extends EObject> ParameterDeclaration_102_list = ParameterList_102_Var.getParameterDeclaration();
		Assert.assertNotNull(ParameterDeclaration_102_list);
		Assert.assertEquals(1, ParameterDeclaration_102_list.size());
		final ParameterDeclaration ParameterDeclaration_103_Var = (ParameterDeclaration)ParameterDeclaration_102_list.get(0);
		Assert.assertNotNull(ParameterDeclaration_103_Var);
		final DeclarationSpecifiers DeclarationSpecifiers_104_Var = (DeclarationSpecifiers)ParameterDeclaration_103_Var.getDeclSpecifiers();
		Assert.assertNotNull(DeclarationSpecifiers_104_Var);
		final EList<? extends EObject> DeclarationSpecifier_104_list = DeclarationSpecifiers_104_Var.getDeclarationSpecifier();
		Assert.assertNotNull(DeclarationSpecifier_104_list);
		Assert.assertEquals(1, DeclarationSpecifier_104_list.size());
		final TypeSpecifier TypeSpecifier_105_Var = (TypeSpecifier)DeclarationSpecifier_104_list.get(0);
		Assert.assertNotNull(TypeSpecifier_105_Var);
		Assert.assertEquals("void", TypeSpecifier_105_Var.getName());
		final FunctionDefinition FunctionDefinition_106_Var = (FunctionDefinition)ExternalDeclaration_93_Var.getFunctionDefinition();
		Assert.assertNotNull(FunctionDefinition_106_Var);
		final BodyStatement BodyStatement_107_Var = (BodyStatement)FunctionDefinition_106_Var.getBody();
		Assert.assertNotNull(BodyStatement_107_Var);
		final EList<? extends EObject> BlockList_107_list = BodyStatement_107_Var.getBlockList();
		Assert.assertNotNull(BlockList_107_list);
		Assert.assertEquals(1, BlockList_107_list.size());
		final BlockList BlockList_108_Var = (BlockList)BlockList_107_list.get(0);
		Assert.assertNotNull(BlockList_108_Var);
		final EList<? extends EObject> Statement_108_list = BlockList_108_Var.getStatement();
		Assert.assertNotNull(Statement_108_list);
		Assert.assertEquals(10, Statement_108_list.size());
		final Statement Statement_109_Var = (Statement)Statement_108_list.get(0);
		Assert.assertNotNull(Statement_109_Var);
		final ExpressionStatement ExpressionStatement_110_Var = (ExpressionStatement)Statement_109_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_110_Var);
		final Expression Expression_111_Var = (Expression)ExpressionStatement_110_Var.getExpression();
		Assert.assertNotNull(Expression_111_Var);
		final EList<? extends EObject> ExprExpr_111_list = Expression_111_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_111_list);
		Assert.assertEquals(1, ExprExpr_111_list.size());
		final AssignmentExpression AssignmentExpression_112_Var = (AssignmentExpression)ExprExpr_111_list.get(0);
		Assert.assertNotNull(AssignmentExpression_112_Var);
		final ConditionalExpression ConditionalExpression_113_Var = (ConditionalExpression)AssignmentExpression_112_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_113_Var);
		final LogicalOrExpression LogicalOrExpression_114_Var = (LogicalOrExpression)ConditionalExpression_113_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_114_Var);
		final EList<? extends EObject> Expr_114_list = LogicalOrExpression_114_Var.getExpr();
		Assert.assertNotNull(Expr_114_list);
		Assert.assertEquals(1, Expr_114_list.size());
		final LogicalAndExpression LogicalAndExpression_115_Var = (LogicalAndExpression)Expr_114_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_115_Var);
		final EList<? extends EObject> Expr_115_list = LogicalAndExpression_115_Var.getExpr();
		Assert.assertNotNull(Expr_115_list);
		Assert.assertEquals(1, Expr_115_list.size());
		final InclusiveOrExpression InclusiveOrExpression_116_Var = (InclusiveOrExpression)Expr_115_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_116_Var);
		final EList<? extends EObject> Expr_116_list = InclusiveOrExpression_116_Var.getExpr();
		Assert.assertNotNull(Expr_116_list);
		Assert.assertEquals(1, Expr_116_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_117_Var = (ExclusiveOrExpression)Expr_116_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_117_Var);
		final EList<? extends EObject> Expr_117_list = ExclusiveOrExpression_117_Var.getExpr();
		Assert.assertNotNull(Expr_117_list);
		Assert.assertEquals(1, Expr_117_list.size());
		final AndExpression AndExpression_118_Var = (AndExpression)Expr_117_list.get(0);
		Assert.assertNotNull(AndExpression_118_Var);
		final EList<? extends EObject> Expr_118_list = AndExpression_118_Var.getExpr();
		Assert.assertNotNull(Expr_118_list);
		Assert.assertEquals(1, Expr_118_list.size());
		final EqualityExpression EqualityExpression_119_Var = (EqualityExpression)Expr_118_list.get(0);
		Assert.assertNotNull(EqualityExpression_119_Var);
		final EList<? extends EObject> Expr_119_list = EqualityExpression_119_Var.getExpr();
		Assert.assertNotNull(Expr_119_list);
		Assert.assertEquals(1, Expr_119_list.size());
		final RelationalExpression RelationalExpression_120_Var = (RelationalExpression)Expr_119_list.get(0);
		Assert.assertNotNull(RelationalExpression_120_Var);
		final EList<? extends EObject> Expr_120_list = RelationalExpression_120_Var.getExpr();
		Assert.assertNotNull(Expr_120_list);
		Assert.assertEquals(1, Expr_120_list.size());
		final ShiftExpression ShiftExpression_121_Var = (ShiftExpression)Expr_120_list.get(0);
		Assert.assertNotNull(ShiftExpression_121_Var);
		final EList<? extends EObject> Expr_121_list = ShiftExpression_121_Var.getExpr();
		Assert.assertNotNull(Expr_121_list);
		Assert.assertEquals(1, Expr_121_list.size());
		final AdditiveExpression AdditiveExpression_122_Var = (AdditiveExpression)Expr_121_list.get(0);
		Assert.assertNotNull(AdditiveExpression_122_Var);
		final EList<? extends EObject> Expr_122_list = AdditiveExpression_122_Var.getExpr();
		Assert.assertNotNull(Expr_122_list);
		Assert.assertEquals(1, Expr_122_list.size());
		final MultiplicativeExpression MultiplicativeExpression_123_Var = (MultiplicativeExpression)Expr_122_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_123_Var);
		final EList<? extends EObject> Expr_123_list = MultiplicativeExpression_123_Var.getExpr();
		Assert.assertNotNull(Expr_123_list);
		Assert.assertEquals(1, Expr_123_list.size());
		final CastExpression CastExpression_124_Var = (CastExpression)Expr_123_list.get(0);
		Assert.assertNotNull(CastExpression_124_Var);
		final UnaryExpression UnaryExpression_125_Var = (UnaryExpression)CastExpression_124_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_125_Var);
		final PostfixExpression PostfixExpression_126_Var = (PostfixExpression)UnaryExpression_125_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_126_Var);
		final EList<? extends EObject> Expr_126_list = PostfixExpression_126_Var.getExpr();
		Assert.assertNotNull(Expr_126_list);
		Assert.assertEquals(1, Expr_126_list.size());
		final PrimaryExpression PrimaryExpression_127_Var = (PrimaryExpression)Expr_126_list.get(0);
		Assert.assertNotNull(PrimaryExpression_127_Var);
		Assert.assertEquals("printf", PrimaryExpression_127_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_127_list = PostfixExpression_126_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_127_list);
		Assert.assertEquals(1, ArgumentExpressionList_127_list.size());
		final ArgumentExpressionList ArgumentExpressionList_128_Var = (ArgumentExpressionList)ArgumentExpressionList_127_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_128_Var);
		final EList<? extends EObject> Expr_128_list = ArgumentExpressionList_128_Var.getExpr();
		Assert.assertNotNull(Expr_128_list);
		Assert.assertEquals(2, Expr_128_list.size());
		final AssignmentExpression AssignmentExpression_129_Var = (AssignmentExpression)Expr_128_list.get(0);
		Assert.assertNotNull(AssignmentExpression_129_Var);
		final ConditionalExpression ConditionalExpression_130_Var = (ConditionalExpression)AssignmentExpression_129_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_130_Var);
		final LogicalOrExpression LogicalOrExpression_131_Var = (LogicalOrExpression)ConditionalExpression_130_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_131_Var);
		final EList<? extends EObject> Expr_131_list = LogicalOrExpression_131_Var.getExpr();
		Assert.assertNotNull(Expr_131_list);
		Assert.assertEquals(1, Expr_131_list.size());
		final LogicalAndExpression LogicalAndExpression_132_Var = (LogicalAndExpression)Expr_131_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_132_Var);
		final EList<? extends EObject> Expr_132_list = LogicalAndExpression_132_Var.getExpr();
		Assert.assertNotNull(Expr_132_list);
		Assert.assertEquals(1, Expr_132_list.size());
		final InclusiveOrExpression InclusiveOrExpression_133_Var = (InclusiveOrExpression)Expr_132_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_133_Var);
		final EList<? extends EObject> Expr_133_list = InclusiveOrExpression_133_Var.getExpr();
		Assert.assertNotNull(Expr_133_list);
		Assert.assertEquals(1, Expr_133_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_134_Var = (ExclusiveOrExpression)Expr_133_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_134_Var);
		final EList<? extends EObject> Expr_134_list = ExclusiveOrExpression_134_Var.getExpr();
		Assert.assertNotNull(Expr_134_list);
		Assert.assertEquals(1, Expr_134_list.size());
		final AndExpression AndExpression_135_Var = (AndExpression)Expr_134_list.get(0);
		Assert.assertNotNull(AndExpression_135_Var);
		final EList<? extends EObject> Expr_135_list = AndExpression_135_Var.getExpr();
		Assert.assertNotNull(Expr_135_list);
		Assert.assertEquals(1, Expr_135_list.size());
		final EqualityExpression EqualityExpression_136_Var = (EqualityExpression)Expr_135_list.get(0);
		Assert.assertNotNull(EqualityExpression_136_Var);
		final EList<? extends EObject> Expr_136_list = EqualityExpression_136_Var.getExpr();
		Assert.assertNotNull(Expr_136_list);
		Assert.assertEquals(1, Expr_136_list.size());
		final RelationalExpression RelationalExpression_137_Var = (RelationalExpression)Expr_136_list.get(0);
		Assert.assertNotNull(RelationalExpression_137_Var);
		final EList<? extends EObject> Expr_137_list = RelationalExpression_137_Var.getExpr();
		Assert.assertNotNull(Expr_137_list);
		Assert.assertEquals(1, Expr_137_list.size());
		final ShiftExpression ShiftExpression_138_Var = (ShiftExpression)Expr_137_list.get(0);
		Assert.assertNotNull(ShiftExpression_138_Var);
		final EList<? extends EObject> Expr_138_list = ShiftExpression_138_Var.getExpr();
		Assert.assertNotNull(Expr_138_list);
		Assert.assertEquals(1, Expr_138_list.size());
		final AdditiveExpression AdditiveExpression_139_Var = (AdditiveExpression)Expr_138_list.get(0);
		Assert.assertNotNull(AdditiveExpression_139_Var);
		final EList<? extends EObject> Expr_139_list = AdditiveExpression_139_Var.getExpr();
		Assert.assertNotNull(Expr_139_list);
		Assert.assertEquals(1, Expr_139_list.size());
		final MultiplicativeExpression MultiplicativeExpression_140_Var = (MultiplicativeExpression)Expr_139_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_140_Var);
		final EList<? extends EObject> Expr_140_list = MultiplicativeExpression_140_Var.getExpr();
		Assert.assertNotNull(Expr_140_list);
		Assert.assertEquals(1, Expr_140_list.size());
		final CastExpression CastExpression_141_Var = (CastExpression)Expr_140_list.get(0);
		Assert.assertNotNull(CastExpression_141_Var);
		final UnaryExpression UnaryExpression_142_Var = (UnaryExpression)CastExpression_141_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_142_Var);
		final PostfixExpression PostfixExpression_143_Var = (PostfixExpression)UnaryExpression_142_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_143_Var);
		final EList<? extends EObject> Expr_143_list = PostfixExpression_143_Var.getExpr();
		Assert.assertNotNull(Expr_143_list);
		Assert.assertEquals(1, Expr_143_list.size());
		final PrimaryExpression PrimaryExpression_144_Var = (PrimaryExpression)Expr_143_list.get(0);
		Assert.assertNotNull(PrimaryExpression_144_Var);
		final Constant Constant_145_Var = (Constant)PrimaryExpression_144_Var.getConst();
		Assert.assertNotNull(Constant_145_Var);
		Assert.assertEquals("\"sizeof(joe.id)=%lu\\n\"", Constant_145_Var.getStr());
		final AssignmentExpression AssignmentExpression_146_Var = (AssignmentExpression)Expr_128_list.get(1);
		Assert.assertNotNull(AssignmentExpression_146_Var);
		final ConditionalExpression ConditionalExpression_147_Var = (ConditionalExpression)AssignmentExpression_146_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_147_Var);
		final LogicalOrExpression LogicalOrExpression_148_Var = (LogicalOrExpression)ConditionalExpression_147_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_148_Var);
		final EList<? extends EObject> Expr_148_list = LogicalOrExpression_148_Var.getExpr();
		Assert.assertNotNull(Expr_148_list);
		Assert.assertEquals(1, Expr_148_list.size());
		final LogicalAndExpression LogicalAndExpression_149_Var = (LogicalAndExpression)Expr_148_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_149_Var);
		final EList<? extends EObject> Expr_149_list = LogicalAndExpression_149_Var.getExpr();
		Assert.assertNotNull(Expr_149_list);
		Assert.assertEquals(1, Expr_149_list.size());
		final InclusiveOrExpression InclusiveOrExpression_150_Var = (InclusiveOrExpression)Expr_149_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_150_Var);
		final EList<? extends EObject> Expr_150_list = InclusiveOrExpression_150_Var.getExpr();
		Assert.assertNotNull(Expr_150_list);
		Assert.assertEquals(1, Expr_150_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_151_Var = (ExclusiveOrExpression)Expr_150_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_151_Var);
		final EList<? extends EObject> Expr_151_list = ExclusiveOrExpression_151_Var.getExpr();
		Assert.assertNotNull(Expr_151_list);
		Assert.assertEquals(1, Expr_151_list.size());
		final AndExpression AndExpression_152_Var = (AndExpression)Expr_151_list.get(0);
		Assert.assertNotNull(AndExpression_152_Var);
		final EList<? extends EObject> Expr_152_list = AndExpression_152_Var.getExpr();
		Assert.assertNotNull(Expr_152_list);
		Assert.assertEquals(1, Expr_152_list.size());
		final EqualityExpression EqualityExpression_153_Var = (EqualityExpression)Expr_152_list.get(0);
		Assert.assertNotNull(EqualityExpression_153_Var);
		final EList<? extends EObject> Expr_153_list = EqualityExpression_153_Var.getExpr();
		Assert.assertNotNull(Expr_153_list);
		Assert.assertEquals(1, Expr_153_list.size());
		final RelationalExpression RelationalExpression_154_Var = (RelationalExpression)Expr_153_list.get(0);
		Assert.assertNotNull(RelationalExpression_154_Var);
		final EList<? extends EObject> Expr_154_list = RelationalExpression_154_Var.getExpr();
		Assert.assertNotNull(Expr_154_list);
		Assert.assertEquals(1, Expr_154_list.size());
		final ShiftExpression ShiftExpression_155_Var = (ShiftExpression)Expr_154_list.get(0);
		Assert.assertNotNull(ShiftExpression_155_Var);
		final EList<? extends EObject> Expr_155_list = ShiftExpression_155_Var.getExpr();
		Assert.assertNotNull(Expr_155_list);
		Assert.assertEquals(1, Expr_155_list.size());
		final AdditiveExpression AdditiveExpression_156_Var = (AdditiveExpression)Expr_155_list.get(0);
		Assert.assertNotNull(AdditiveExpression_156_Var);
		final EList<? extends EObject> Expr_156_list = AdditiveExpression_156_Var.getExpr();
		Assert.assertNotNull(Expr_156_list);
		Assert.assertEquals(1, Expr_156_list.size());
		final MultiplicativeExpression MultiplicativeExpression_157_Var = (MultiplicativeExpression)Expr_156_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_157_Var);
		final EList<? extends EObject> Expr_157_list = MultiplicativeExpression_157_Var.getExpr();
		Assert.assertNotNull(Expr_157_list);
		Assert.assertEquals(1, Expr_157_list.size());
		final CastExpression CastExpression_158_Var = (CastExpression)Expr_157_list.get(0);
		Assert.assertNotNull(CastExpression_158_Var);
		final UnaryExpression UnaryExpression_159_Var = (UnaryExpression)CastExpression_158_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_159_Var);
		Assert.assertEquals("sizeof", UnaryExpression_159_Var.getSizeOf());
		final UnaryExpression UnaryExpression_160_Var = (UnaryExpression)UnaryExpression_159_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_160_Var);
		final PostfixExpression PostfixExpression_161_Var = (PostfixExpression)UnaryExpression_160_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_161_Var);
		final EList<? extends EObject> Expr_161_list = PostfixExpression_161_Var.getExpr();
		Assert.assertNotNull(Expr_161_list);
		Assert.assertEquals(1, Expr_161_list.size());
		final PrimaryExpression PrimaryExpression_162_Var = (PrimaryExpression)Expr_161_list.get(0);
		Assert.assertNotNull(PrimaryExpression_162_Var);
		final Expression Expression_163_Var = (Expression)PrimaryExpression_162_Var.getExpr();
		Assert.assertNotNull(Expression_163_Var);
		final EList<? extends EObject> ExprExpr_163_list = Expression_163_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_163_list);
		Assert.assertEquals(1, ExprExpr_163_list.size());
		final AssignmentExpression AssignmentExpression_164_Var = (AssignmentExpression)ExprExpr_163_list.get(0);
		Assert.assertNotNull(AssignmentExpression_164_Var);
		final ConditionalExpression ConditionalExpression_165_Var = (ConditionalExpression)AssignmentExpression_164_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_165_Var);
		final LogicalOrExpression LogicalOrExpression_166_Var = (LogicalOrExpression)ConditionalExpression_165_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_166_Var);
		final EList<? extends EObject> Expr_166_list = LogicalOrExpression_166_Var.getExpr();
		Assert.assertNotNull(Expr_166_list);
		Assert.assertEquals(1, Expr_166_list.size());
		final LogicalAndExpression LogicalAndExpression_167_Var = (LogicalAndExpression)Expr_166_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_167_Var);
		final EList<? extends EObject> Expr_167_list = LogicalAndExpression_167_Var.getExpr();
		Assert.assertNotNull(Expr_167_list);
		Assert.assertEquals(1, Expr_167_list.size());
		final InclusiveOrExpression InclusiveOrExpression_168_Var = (InclusiveOrExpression)Expr_167_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_168_Var);
		final EList<? extends EObject> Expr_168_list = InclusiveOrExpression_168_Var.getExpr();
		Assert.assertNotNull(Expr_168_list);
		Assert.assertEquals(1, Expr_168_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_169_Var = (ExclusiveOrExpression)Expr_168_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_169_Var);
		final EList<? extends EObject> Expr_169_list = ExclusiveOrExpression_169_Var.getExpr();
		Assert.assertNotNull(Expr_169_list);
		Assert.assertEquals(1, Expr_169_list.size());
		final AndExpression AndExpression_170_Var = (AndExpression)Expr_169_list.get(0);
		Assert.assertNotNull(AndExpression_170_Var);
		final EList<? extends EObject> Expr_170_list = AndExpression_170_Var.getExpr();
		Assert.assertNotNull(Expr_170_list);
		Assert.assertEquals(1, Expr_170_list.size());
		final EqualityExpression EqualityExpression_171_Var = (EqualityExpression)Expr_170_list.get(0);
		Assert.assertNotNull(EqualityExpression_171_Var);
		final EList<? extends EObject> Expr_171_list = EqualityExpression_171_Var.getExpr();
		Assert.assertNotNull(Expr_171_list);
		Assert.assertEquals(1, Expr_171_list.size());
		final RelationalExpression RelationalExpression_172_Var = (RelationalExpression)Expr_171_list.get(0);
		Assert.assertNotNull(RelationalExpression_172_Var);
		final EList<? extends EObject> Expr_172_list = RelationalExpression_172_Var.getExpr();
		Assert.assertNotNull(Expr_172_list);
		Assert.assertEquals(1, Expr_172_list.size());
		final ShiftExpression ShiftExpression_173_Var = (ShiftExpression)Expr_172_list.get(0);
		Assert.assertNotNull(ShiftExpression_173_Var);
		final EList<? extends EObject> Expr_173_list = ShiftExpression_173_Var.getExpr();
		Assert.assertNotNull(Expr_173_list);
		Assert.assertEquals(1, Expr_173_list.size());
		final AdditiveExpression AdditiveExpression_174_Var = (AdditiveExpression)Expr_173_list.get(0);
		Assert.assertNotNull(AdditiveExpression_174_Var);
		final EList<? extends EObject> Expr_174_list = AdditiveExpression_174_Var.getExpr();
		Assert.assertNotNull(Expr_174_list);
		Assert.assertEquals(1, Expr_174_list.size());
		final MultiplicativeExpression MultiplicativeExpression_175_Var = (MultiplicativeExpression)Expr_174_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_175_Var);
		final EList<? extends EObject> Expr_175_list = MultiplicativeExpression_175_Var.getExpr();
		Assert.assertNotNull(Expr_175_list);
		Assert.assertEquals(1, Expr_175_list.size());
		final CastExpression CastExpression_176_Var = (CastExpression)Expr_175_list.get(0);
		Assert.assertNotNull(CastExpression_176_Var);
		final UnaryExpression UnaryExpression_177_Var = (UnaryExpression)CastExpression_176_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_177_Var);
		final PostfixExpression PostfixExpression_178_Var = (PostfixExpression)UnaryExpression_177_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_178_Var);
		final EList<? extends EObject> Expr_178_list = PostfixExpression_178_Var.getExpr();
		Assert.assertNotNull(Expr_178_list);
		Assert.assertEquals(1, Expr_178_list.size());
		final PrimaryExpression PrimaryExpression_179_Var = (PrimaryExpression)Expr_178_list.get(0);
		Assert.assertNotNull(PrimaryExpression_179_Var);
		Assert.assertEquals("joe", PrimaryExpression_179_Var.getId());
		Assert.assertEquals("[.]", PostfixExpression_178_Var.getDot().toString());
		Assert.assertEquals("[id]", PostfixExpression_178_Var.getId().toString());
		Assert.assertEquals(";", ExpressionStatement_110_Var.getSemi());
		final Statement Statement_180_Var = (Statement)Statement_108_list.get(1);
		Assert.assertNotNull(Statement_180_Var);
		final ExpressionStatement ExpressionStatement_181_Var = (ExpressionStatement)Statement_180_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_181_Var);
		final Expression Expression_182_Var = (Expression)ExpressionStatement_181_Var.getExpression();
		Assert.assertNotNull(Expression_182_Var);
		final EList<? extends EObject> ExprExpr_182_list = Expression_182_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_182_list);
		Assert.assertEquals(1, ExprExpr_182_list.size());
		final AssignmentExpression AssignmentExpression_183_Var = (AssignmentExpression)ExprExpr_182_list.get(0);
		Assert.assertNotNull(AssignmentExpression_183_Var);
		final ConditionalExpression ConditionalExpression_184_Var = (ConditionalExpression)AssignmentExpression_183_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_184_Var);
		final LogicalOrExpression LogicalOrExpression_185_Var = (LogicalOrExpression)ConditionalExpression_184_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_185_Var);
		final EList<? extends EObject> Expr_185_list = LogicalOrExpression_185_Var.getExpr();
		Assert.assertNotNull(Expr_185_list);
		Assert.assertEquals(1, Expr_185_list.size());
		final LogicalAndExpression LogicalAndExpression_186_Var = (LogicalAndExpression)Expr_185_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_186_Var);
		final EList<? extends EObject> Expr_186_list = LogicalAndExpression_186_Var.getExpr();
		Assert.assertNotNull(Expr_186_list);
		Assert.assertEquals(1, Expr_186_list.size());
		final InclusiveOrExpression InclusiveOrExpression_187_Var = (InclusiveOrExpression)Expr_186_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_187_Var);
		final EList<? extends EObject> Expr_187_list = InclusiveOrExpression_187_Var.getExpr();
		Assert.assertNotNull(Expr_187_list);
		Assert.assertEquals(1, Expr_187_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_188_Var = (ExclusiveOrExpression)Expr_187_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_188_Var);
		final EList<? extends EObject> Expr_188_list = ExclusiveOrExpression_188_Var.getExpr();
		Assert.assertNotNull(Expr_188_list);
		Assert.assertEquals(1, Expr_188_list.size());
		final AndExpression AndExpression_189_Var = (AndExpression)Expr_188_list.get(0);
		Assert.assertNotNull(AndExpression_189_Var);
		final EList<? extends EObject> Expr_189_list = AndExpression_189_Var.getExpr();
		Assert.assertNotNull(Expr_189_list);
		Assert.assertEquals(1, Expr_189_list.size());
		final EqualityExpression EqualityExpression_190_Var = (EqualityExpression)Expr_189_list.get(0);
		Assert.assertNotNull(EqualityExpression_190_Var);
		final EList<? extends EObject> Expr_190_list = EqualityExpression_190_Var.getExpr();
		Assert.assertNotNull(Expr_190_list);
		Assert.assertEquals(1, Expr_190_list.size());
		final RelationalExpression RelationalExpression_191_Var = (RelationalExpression)Expr_190_list.get(0);
		Assert.assertNotNull(RelationalExpression_191_Var);
		final EList<? extends EObject> Expr_191_list = RelationalExpression_191_Var.getExpr();
		Assert.assertNotNull(Expr_191_list);
		Assert.assertEquals(1, Expr_191_list.size());
		final ShiftExpression ShiftExpression_192_Var = (ShiftExpression)Expr_191_list.get(0);
		Assert.assertNotNull(ShiftExpression_192_Var);
		final EList<? extends EObject> Expr_192_list = ShiftExpression_192_Var.getExpr();
		Assert.assertNotNull(Expr_192_list);
		Assert.assertEquals(1, Expr_192_list.size());
		final AdditiveExpression AdditiveExpression_193_Var = (AdditiveExpression)Expr_192_list.get(0);
		Assert.assertNotNull(AdditiveExpression_193_Var);
		final EList<? extends EObject> Expr_193_list = AdditiveExpression_193_Var.getExpr();
		Assert.assertNotNull(Expr_193_list);
		Assert.assertEquals(1, Expr_193_list.size());
		final MultiplicativeExpression MultiplicativeExpression_194_Var = (MultiplicativeExpression)Expr_193_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_194_Var);
		final EList<? extends EObject> Expr_194_list = MultiplicativeExpression_194_Var.getExpr();
		Assert.assertNotNull(Expr_194_list);
		Assert.assertEquals(1, Expr_194_list.size());
		final CastExpression CastExpression_195_Var = (CastExpression)Expr_194_list.get(0);
		Assert.assertNotNull(CastExpression_195_Var);
		final UnaryExpression UnaryExpression_196_Var = (UnaryExpression)CastExpression_195_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_196_Var);
		final PostfixExpression PostfixExpression_197_Var = (PostfixExpression)UnaryExpression_196_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_197_Var);
		final EList<? extends EObject> Expr_197_list = PostfixExpression_197_Var.getExpr();
		Assert.assertNotNull(Expr_197_list);
		Assert.assertEquals(1, Expr_197_list.size());
		final PrimaryExpression PrimaryExpression_198_Var = (PrimaryExpression)Expr_197_list.get(0);
		Assert.assertNotNull(PrimaryExpression_198_Var);
		Assert.assertEquals("printf", PrimaryExpression_198_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_198_list = PostfixExpression_197_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_198_list);
		Assert.assertEquals(1, ArgumentExpressionList_198_list.size());
		final ArgumentExpressionList ArgumentExpressionList_199_Var = (ArgumentExpressionList)ArgumentExpressionList_198_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_199_Var);
		final EList<? extends EObject> Expr_199_list = ArgumentExpressionList_199_Var.getExpr();
		Assert.assertNotNull(Expr_199_list);
		Assert.assertEquals(2, Expr_199_list.size());
		final AssignmentExpression AssignmentExpression_200_Var = (AssignmentExpression)Expr_199_list.get(0);
		Assert.assertNotNull(AssignmentExpression_200_Var);
		final ConditionalExpression ConditionalExpression_201_Var = (ConditionalExpression)AssignmentExpression_200_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_201_Var);
		final LogicalOrExpression LogicalOrExpression_202_Var = (LogicalOrExpression)ConditionalExpression_201_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_202_Var);
		final EList<? extends EObject> Expr_202_list = LogicalOrExpression_202_Var.getExpr();
		Assert.assertNotNull(Expr_202_list);
		Assert.assertEquals(1, Expr_202_list.size());
		final LogicalAndExpression LogicalAndExpression_203_Var = (LogicalAndExpression)Expr_202_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_203_Var);
		final EList<? extends EObject> Expr_203_list = LogicalAndExpression_203_Var.getExpr();
		Assert.assertNotNull(Expr_203_list);
		Assert.assertEquals(1, Expr_203_list.size());
		final InclusiveOrExpression InclusiveOrExpression_204_Var = (InclusiveOrExpression)Expr_203_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_204_Var);
		final EList<? extends EObject> Expr_204_list = InclusiveOrExpression_204_Var.getExpr();
		Assert.assertNotNull(Expr_204_list);
		Assert.assertEquals(1, Expr_204_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_205_Var = (ExclusiveOrExpression)Expr_204_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_205_Var);
		final EList<? extends EObject> Expr_205_list = ExclusiveOrExpression_205_Var.getExpr();
		Assert.assertNotNull(Expr_205_list);
		Assert.assertEquals(1, Expr_205_list.size());
		final AndExpression AndExpression_206_Var = (AndExpression)Expr_205_list.get(0);
		Assert.assertNotNull(AndExpression_206_Var);
		final EList<? extends EObject> Expr_206_list = AndExpression_206_Var.getExpr();
		Assert.assertNotNull(Expr_206_list);
		Assert.assertEquals(1, Expr_206_list.size());
		final EqualityExpression EqualityExpression_207_Var = (EqualityExpression)Expr_206_list.get(0);
		Assert.assertNotNull(EqualityExpression_207_Var);
		final EList<? extends EObject> Expr_207_list = EqualityExpression_207_Var.getExpr();
		Assert.assertNotNull(Expr_207_list);
		Assert.assertEquals(1, Expr_207_list.size());
		final RelationalExpression RelationalExpression_208_Var = (RelationalExpression)Expr_207_list.get(0);
		Assert.assertNotNull(RelationalExpression_208_Var);
		final EList<? extends EObject> Expr_208_list = RelationalExpression_208_Var.getExpr();
		Assert.assertNotNull(Expr_208_list);
		Assert.assertEquals(1, Expr_208_list.size());
		final ShiftExpression ShiftExpression_209_Var = (ShiftExpression)Expr_208_list.get(0);
		Assert.assertNotNull(ShiftExpression_209_Var);
		final EList<? extends EObject> Expr_209_list = ShiftExpression_209_Var.getExpr();
		Assert.assertNotNull(Expr_209_list);
		Assert.assertEquals(1, Expr_209_list.size());
		final AdditiveExpression AdditiveExpression_210_Var = (AdditiveExpression)Expr_209_list.get(0);
		Assert.assertNotNull(AdditiveExpression_210_Var);
		final EList<? extends EObject> Expr_210_list = AdditiveExpression_210_Var.getExpr();
		Assert.assertNotNull(Expr_210_list);
		Assert.assertEquals(1, Expr_210_list.size());
		final MultiplicativeExpression MultiplicativeExpression_211_Var = (MultiplicativeExpression)Expr_210_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_211_Var);
		final EList<? extends EObject> Expr_211_list = MultiplicativeExpression_211_Var.getExpr();
		Assert.assertNotNull(Expr_211_list);
		Assert.assertEquals(1, Expr_211_list.size());
		final CastExpression CastExpression_212_Var = (CastExpression)Expr_211_list.get(0);
		Assert.assertNotNull(CastExpression_212_Var);
		final UnaryExpression UnaryExpression_213_Var = (UnaryExpression)CastExpression_212_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_213_Var);
		final PostfixExpression PostfixExpression_214_Var = (PostfixExpression)UnaryExpression_213_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_214_Var);
		final EList<? extends EObject> Expr_214_list = PostfixExpression_214_Var.getExpr();
		Assert.assertNotNull(Expr_214_list);
		Assert.assertEquals(1, Expr_214_list.size());
		final PrimaryExpression PrimaryExpression_215_Var = (PrimaryExpression)Expr_214_list.get(0);
		Assert.assertNotNull(PrimaryExpression_215_Var);
		final Constant Constant_216_Var = (Constant)PrimaryExpression_215_Var.getConst();
		Assert.assertNotNull(Constant_216_Var);
		Assert.assertEquals("\"sizeof(joe.name)=%lu\\n\"", Constant_216_Var.getStr());
		final AssignmentExpression AssignmentExpression_217_Var = (AssignmentExpression)Expr_199_list.get(1);
		Assert.assertNotNull(AssignmentExpression_217_Var);
		final ConditionalExpression ConditionalExpression_218_Var = (ConditionalExpression)AssignmentExpression_217_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_218_Var);
		final LogicalOrExpression LogicalOrExpression_219_Var = (LogicalOrExpression)ConditionalExpression_218_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_219_Var);
		final EList<? extends EObject> Expr_219_list = LogicalOrExpression_219_Var.getExpr();
		Assert.assertNotNull(Expr_219_list);
		Assert.assertEquals(1, Expr_219_list.size());
		final LogicalAndExpression LogicalAndExpression_220_Var = (LogicalAndExpression)Expr_219_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_220_Var);
		final EList<? extends EObject> Expr_220_list = LogicalAndExpression_220_Var.getExpr();
		Assert.assertNotNull(Expr_220_list);
		Assert.assertEquals(1, Expr_220_list.size());
		final InclusiveOrExpression InclusiveOrExpression_221_Var = (InclusiveOrExpression)Expr_220_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_221_Var);
		final EList<? extends EObject> Expr_221_list = InclusiveOrExpression_221_Var.getExpr();
		Assert.assertNotNull(Expr_221_list);
		Assert.assertEquals(1, Expr_221_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_222_Var = (ExclusiveOrExpression)Expr_221_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_222_Var);
		final EList<? extends EObject> Expr_222_list = ExclusiveOrExpression_222_Var.getExpr();
		Assert.assertNotNull(Expr_222_list);
		Assert.assertEquals(1, Expr_222_list.size());
		final AndExpression AndExpression_223_Var = (AndExpression)Expr_222_list.get(0);
		Assert.assertNotNull(AndExpression_223_Var);
		final EList<? extends EObject> Expr_223_list = AndExpression_223_Var.getExpr();
		Assert.assertNotNull(Expr_223_list);
		Assert.assertEquals(1, Expr_223_list.size());
		final EqualityExpression EqualityExpression_224_Var = (EqualityExpression)Expr_223_list.get(0);
		Assert.assertNotNull(EqualityExpression_224_Var);
		final EList<? extends EObject> Expr_224_list = EqualityExpression_224_Var.getExpr();
		Assert.assertNotNull(Expr_224_list);
		Assert.assertEquals(1, Expr_224_list.size());
		final RelationalExpression RelationalExpression_225_Var = (RelationalExpression)Expr_224_list.get(0);
		Assert.assertNotNull(RelationalExpression_225_Var);
		final EList<? extends EObject> Expr_225_list = RelationalExpression_225_Var.getExpr();
		Assert.assertNotNull(Expr_225_list);
		Assert.assertEquals(1, Expr_225_list.size());
		final ShiftExpression ShiftExpression_226_Var = (ShiftExpression)Expr_225_list.get(0);
		Assert.assertNotNull(ShiftExpression_226_Var);
		final EList<? extends EObject> Expr_226_list = ShiftExpression_226_Var.getExpr();
		Assert.assertNotNull(Expr_226_list);
		Assert.assertEquals(1, Expr_226_list.size());
		final AdditiveExpression AdditiveExpression_227_Var = (AdditiveExpression)Expr_226_list.get(0);
		Assert.assertNotNull(AdditiveExpression_227_Var);
		final EList<? extends EObject> Expr_227_list = AdditiveExpression_227_Var.getExpr();
		Assert.assertNotNull(Expr_227_list);
		Assert.assertEquals(1, Expr_227_list.size());
		final MultiplicativeExpression MultiplicativeExpression_228_Var = (MultiplicativeExpression)Expr_227_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_228_Var);
		final EList<? extends EObject> Expr_228_list = MultiplicativeExpression_228_Var.getExpr();
		Assert.assertNotNull(Expr_228_list);
		Assert.assertEquals(1, Expr_228_list.size());
		final CastExpression CastExpression_229_Var = (CastExpression)Expr_228_list.get(0);
		Assert.assertNotNull(CastExpression_229_Var);
		final UnaryExpression UnaryExpression_230_Var = (UnaryExpression)CastExpression_229_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_230_Var);
		Assert.assertEquals("sizeof", UnaryExpression_230_Var.getSizeOf());
		final UnaryExpression UnaryExpression_231_Var = (UnaryExpression)UnaryExpression_230_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_231_Var);
		final PostfixExpression PostfixExpression_232_Var = (PostfixExpression)UnaryExpression_231_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_232_Var);
		final EList<? extends EObject> Expr_232_list = PostfixExpression_232_Var.getExpr();
		Assert.assertNotNull(Expr_232_list);
		Assert.assertEquals(1, Expr_232_list.size());
		final PrimaryExpression PrimaryExpression_233_Var = (PrimaryExpression)Expr_232_list.get(0);
		Assert.assertNotNull(PrimaryExpression_233_Var);
		final Expression Expression_234_Var = (Expression)PrimaryExpression_233_Var.getExpr();
		Assert.assertNotNull(Expression_234_Var);
		final EList<? extends EObject> ExprExpr_234_list = Expression_234_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_234_list);
		Assert.assertEquals(1, ExprExpr_234_list.size());
		final AssignmentExpression AssignmentExpression_235_Var = (AssignmentExpression)ExprExpr_234_list.get(0);
		Assert.assertNotNull(AssignmentExpression_235_Var);
		final ConditionalExpression ConditionalExpression_236_Var = (ConditionalExpression)AssignmentExpression_235_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_236_Var);
		final LogicalOrExpression LogicalOrExpression_237_Var = (LogicalOrExpression)ConditionalExpression_236_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_237_Var);
		final EList<? extends EObject> Expr_237_list = LogicalOrExpression_237_Var.getExpr();
		Assert.assertNotNull(Expr_237_list);
		Assert.assertEquals(1, Expr_237_list.size());
		final LogicalAndExpression LogicalAndExpression_238_Var = (LogicalAndExpression)Expr_237_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_238_Var);
		final EList<? extends EObject> Expr_238_list = LogicalAndExpression_238_Var.getExpr();
		Assert.assertNotNull(Expr_238_list);
		Assert.assertEquals(1, Expr_238_list.size());
		final InclusiveOrExpression InclusiveOrExpression_239_Var = (InclusiveOrExpression)Expr_238_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_239_Var);
		final EList<? extends EObject> Expr_239_list = InclusiveOrExpression_239_Var.getExpr();
		Assert.assertNotNull(Expr_239_list);
		Assert.assertEquals(1, Expr_239_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_240_Var = (ExclusiveOrExpression)Expr_239_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_240_Var);
		final EList<? extends EObject> Expr_240_list = ExclusiveOrExpression_240_Var.getExpr();
		Assert.assertNotNull(Expr_240_list);
		Assert.assertEquals(1, Expr_240_list.size());
		final AndExpression AndExpression_241_Var = (AndExpression)Expr_240_list.get(0);
		Assert.assertNotNull(AndExpression_241_Var);
		final EList<? extends EObject> Expr_241_list = AndExpression_241_Var.getExpr();
		Assert.assertNotNull(Expr_241_list);
		Assert.assertEquals(1, Expr_241_list.size());
		final EqualityExpression EqualityExpression_242_Var = (EqualityExpression)Expr_241_list.get(0);
		Assert.assertNotNull(EqualityExpression_242_Var);
		final EList<? extends EObject> Expr_242_list = EqualityExpression_242_Var.getExpr();
		Assert.assertNotNull(Expr_242_list);
		Assert.assertEquals(1, Expr_242_list.size());
		final RelationalExpression RelationalExpression_243_Var = (RelationalExpression)Expr_242_list.get(0);
		Assert.assertNotNull(RelationalExpression_243_Var);
		final EList<? extends EObject> Expr_243_list = RelationalExpression_243_Var.getExpr();
		Assert.assertNotNull(Expr_243_list);
		Assert.assertEquals(1, Expr_243_list.size());
		final ShiftExpression ShiftExpression_244_Var = (ShiftExpression)Expr_243_list.get(0);
		Assert.assertNotNull(ShiftExpression_244_Var);
		final EList<? extends EObject> Expr_244_list = ShiftExpression_244_Var.getExpr();
		Assert.assertNotNull(Expr_244_list);
		Assert.assertEquals(1, Expr_244_list.size());
		final AdditiveExpression AdditiveExpression_245_Var = (AdditiveExpression)Expr_244_list.get(0);
		Assert.assertNotNull(AdditiveExpression_245_Var);
		final EList<? extends EObject> Expr_245_list = AdditiveExpression_245_Var.getExpr();
		Assert.assertNotNull(Expr_245_list);
		Assert.assertEquals(1, Expr_245_list.size());
		final MultiplicativeExpression MultiplicativeExpression_246_Var = (MultiplicativeExpression)Expr_245_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_246_Var);
		final EList<? extends EObject> Expr_246_list = MultiplicativeExpression_246_Var.getExpr();
		Assert.assertNotNull(Expr_246_list);
		Assert.assertEquals(1, Expr_246_list.size());
		final CastExpression CastExpression_247_Var = (CastExpression)Expr_246_list.get(0);
		Assert.assertNotNull(CastExpression_247_Var);
		final UnaryExpression UnaryExpression_248_Var = (UnaryExpression)CastExpression_247_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_248_Var);
		final PostfixExpression PostfixExpression_249_Var = (PostfixExpression)UnaryExpression_248_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_249_Var);
		final EList<? extends EObject> Expr_249_list = PostfixExpression_249_Var.getExpr();
		Assert.assertNotNull(Expr_249_list);
		Assert.assertEquals(1, Expr_249_list.size());
		final PrimaryExpression PrimaryExpression_250_Var = (PrimaryExpression)Expr_249_list.get(0);
		Assert.assertNotNull(PrimaryExpression_250_Var);
		Assert.assertEquals("joe", PrimaryExpression_250_Var.getId());
		Assert.assertEquals("[.]", PostfixExpression_249_Var.getDot().toString());
		Assert.assertEquals("[name]", PostfixExpression_249_Var.getId().toString());
		Assert.assertEquals(";", ExpressionStatement_181_Var.getSemi());
		final Statement Statement_251_Var = (Statement)Statement_108_list.get(2);
		Assert.assertNotNull(Statement_251_Var);
		final ExpressionStatement ExpressionStatement_252_Var = (ExpressionStatement)Statement_251_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_252_Var);
		final Expression Expression_253_Var = (Expression)ExpressionStatement_252_Var.getExpression();
		Assert.assertNotNull(Expression_253_Var);
		final EList<? extends EObject> ExprExpr_253_list = Expression_253_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_253_list);
		Assert.assertEquals(1, ExprExpr_253_list.size());
		final AssignmentExpression AssignmentExpression_254_Var = (AssignmentExpression)ExprExpr_253_list.get(0);
		Assert.assertNotNull(AssignmentExpression_254_Var);
		final ConditionalExpression ConditionalExpression_255_Var = (ConditionalExpression)AssignmentExpression_254_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_255_Var);
		final LogicalOrExpression LogicalOrExpression_256_Var = (LogicalOrExpression)ConditionalExpression_255_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_256_Var);
		final EList<? extends EObject> Expr_256_list = LogicalOrExpression_256_Var.getExpr();
		Assert.assertNotNull(Expr_256_list);
		Assert.assertEquals(1, Expr_256_list.size());
		final LogicalAndExpression LogicalAndExpression_257_Var = (LogicalAndExpression)Expr_256_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_257_Var);
		final EList<? extends EObject> Expr_257_list = LogicalAndExpression_257_Var.getExpr();
		Assert.assertNotNull(Expr_257_list);
		Assert.assertEquals(1, Expr_257_list.size());
		final InclusiveOrExpression InclusiveOrExpression_258_Var = (InclusiveOrExpression)Expr_257_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_258_Var);
		final EList<? extends EObject> Expr_258_list = InclusiveOrExpression_258_Var.getExpr();
		Assert.assertNotNull(Expr_258_list);
		Assert.assertEquals(1, Expr_258_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_259_Var = (ExclusiveOrExpression)Expr_258_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_259_Var);
		final EList<? extends EObject> Expr_259_list = ExclusiveOrExpression_259_Var.getExpr();
		Assert.assertNotNull(Expr_259_list);
		Assert.assertEquals(1, Expr_259_list.size());
		final AndExpression AndExpression_260_Var = (AndExpression)Expr_259_list.get(0);
		Assert.assertNotNull(AndExpression_260_Var);
		final EList<? extends EObject> Expr_260_list = AndExpression_260_Var.getExpr();
		Assert.assertNotNull(Expr_260_list);
		Assert.assertEquals(1, Expr_260_list.size());
		final EqualityExpression EqualityExpression_261_Var = (EqualityExpression)Expr_260_list.get(0);
		Assert.assertNotNull(EqualityExpression_261_Var);
		final EList<? extends EObject> Expr_261_list = EqualityExpression_261_Var.getExpr();
		Assert.assertNotNull(Expr_261_list);
		Assert.assertEquals(1, Expr_261_list.size());
		final RelationalExpression RelationalExpression_262_Var = (RelationalExpression)Expr_261_list.get(0);
		Assert.assertNotNull(RelationalExpression_262_Var);
		final EList<? extends EObject> Expr_262_list = RelationalExpression_262_Var.getExpr();
		Assert.assertNotNull(Expr_262_list);
		Assert.assertEquals(1, Expr_262_list.size());
		final ShiftExpression ShiftExpression_263_Var = (ShiftExpression)Expr_262_list.get(0);
		Assert.assertNotNull(ShiftExpression_263_Var);
		final EList<? extends EObject> Expr_263_list = ShiftExpression_263_Var.getExpr();
		Assert.assertNotNull(Expr_263_list);
		Assert.assertEquals(1, Expr_263_list.size());
		final AdditiveExpression AdditiveExpression_264_Var = (AdditiveExpression)Expr_263_list.get(0);
		Assert.assertNotNull(AdditiveExpression_264_Var);
		final EList<? extends EObject> Expr_264_list = AdditiveExpression_264_Var.getExpr();
		Assert.assertNotNull(Expr_264_list);
		Assert.assertEquals(1, Expr_264_list.size());
		final MultiplicativeExpression MultiplicativeExpression_265_Var = (MultiplicativeExpression)Expr_264_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_265_Var);
		final EList<? extends EObject> Expr_265_list = MultiplicativeExpression_265_Var.getExpr();
		Assert.assertNotNull(Expr_265_list);
		Assert.assertEquals(1, Expr_265_list.size());
		final CastExpression CastExpression_266_Var = (CastExpression)Expr_265_list.get(0);
		Assert.assertNotNull(CastExpression_266_Var);
		final UnaryExpression UnaryExpression_267_Var = (UnaryExpression)CastExpression_266_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_267_Var);
		final PostfixExpression PostfixExpression_268_Var = (PostfixExpression)UnaryExpression_267_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_268_Var);
		final EList<? extends EObject> Expr_268_list = PostfixExpression_268_Var.getExpr();
		Assert.assertNotNull(Expr_268_list);
		Assert.assertEquals(1, Expr_268_list.size());
		final PrimaryExpression PrimaryExpression_269_Var = (PrimaryExpression)Expr_268_list.get(0);
		Assert.assertNotNull(PrimaryExpression_269_Var);
		Assert.assertEquals("printf", PrimaryExpression_269_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_269_list = PostfixExpression_268_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_269_list);
		Assert.assertEquals(1, ArgumentExpressionList_269_list.size());
		final ArgumentExpressionList ArgumentExpressionList_270_Var = (ArgumentExpressionList)ArgumentExpressionList_269_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_270_Var);
		final EList<? extends EObject> Expr_270_list = ArgumentExpressionList_270_Var.getExpr();
		Assert.assertNotNull(Expr_270_list);
		Assert.assertEquals(2, Expr_270_list.size());
		final AssignmentExpression AssignmentExpression_271_Var = (AssignmentExpression)Expr_270_list.get(0);
		Assert.assertNotNull(AssignmentExpression_271_Var);
		final ConditionalExpression ConditionalExpression_272_Var = (ConditionalExpression)AssignmentExpression_271_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_272_Var);
		final LogicalOrExpression LogicalOrExpression_273_Var = (LogicalOrExpression)ConditionalExpression_272_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_273_Var);
		final EList<? extends EObject> Expr_273_list = LogicalOrExpression_273_Var.getExpr();
		Assert.assertNotNull(Expr_273_list);
		Assert.assertEquals(1, Expr_273_list.size());
		final LogicalAndExpression LogicalAndExpression_274_Var = (LogicalAndExpression)Expr_273_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_274_Var);
		final EList<? extends EObject> Expr_274_list = LogicalAndExpression_274_Var.getExpr();
		Assert.assertNotNull(Expr_274_list);
		Assert.assertEquals(1, Expr_274_list.size());
		final InclusiveOrExpression InclusiveOrExpression_275_Var = (InclusiveOrExpression)Expr_274_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_275_Var);
		final EList<? extends EObject> Expr_275_list = InclusiveOrExpression_275_Var.getExpr();
		Assert.assertNotNull(Expr_275_list);
		Assert.assertEquals(1, Expr_275_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_276_Var = (ExclusiveOrExpression)Expr_275_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_276_Var);
		final EList<? extends EObject> Expr_276_list = ExclusiveOrExpression_276_Var.getExpr();
		Assert.assertNotNull(Expr_276_list);
		Assert.assertEquals(1, Expr_276_list.size());
		final AndExpression AndExpression_277_Var = (AndExpression)Expr_276_list.get(0);
		Assert.assertNotNull(AndExpression_277_Var);
		final EList<? extends EObject> Expr_277_list = AndExpression_277_Var.getExpr();
		Assert.assertNotNull(Expr_277_list);
		Assert.assertEquals(1, Expr_277_list.size());
		final EqualityExpression EqualityExpression_278_Var = (EqualityExpression)Expr_277_list.get(0);
		Assert.assertNotNull(EqualityExpression_278_Var);
		final EList<? extends EObject> Expr_278_list = EqualityExpression_278_Var.getExpr();
		Assert.assertNotNull(Expr_278_list);
		Assert.assertEquals(1, Expr_278_list.size());
		final RelationalExpression RelationalExpression_279_Var = (RelationalExpression)Expr_278_list.get(0);
		Assert.assertNotNull(RelationalExpression_279_Var);
		final EList<? extends EObject> Expr_279_list = RelationalExpression_279_Var.getExpr();
		Assert.assertNotNull(Expr_279_list);
		Assert.assertEquals(1, Expr_279_list.size());
		final ShiftExpression ShiftExpression_280_Var = (ShiftExpression)Expr_279_list.get(0);
		Assert.assertNotNull(ShiftExpression_280_Var);
		final EList<? extends EObject> Expr_280_list = ShiftExpression_280_Var.getExpr();
		Assert.assertNotNull(Expr_280_list);
		Assert.assertEquals(1, Expr_280_list.size());
		final AdditiveExpression AdditiveExpression_281_Var = (AdditiveExpression)Expr_280_list.get(0);
		Assert.assertNotNull(AdditiveExpression_281_Var);
		final EList<? extends EObject> Expr_281_list = AdditiveExpression_281_Var.getExpr();
		Assert.assertNotNull(Expr_281_list);
		Assert.assertEquals(1, Expr_281_list.size());
		final MultiplicativeExpression MultiplicativeExpression_282_Var = (MultiplicativeExpression)Expr_281_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_282_Var);
		final EList<? extends EObject> Expr_282_list = MultiplicativeExpression_282_Var.getExpr();
		Assert.assertNotNull(Expr_282_list);
		Assert.assertEquals(1, Expr_282_list.size());
		final CastExpression CastExpression_283_Var = (CastExpression)Expr_282_list.get(0);
		Assert.assertNotNull(CastExpression_283_Var);
		final UnaryExpression UnaryExpression_284_Var = (UnaryExpression)CastExpression_283_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_284_Var);
		final PostfixExpression PostfixExpression_285_Var = (PostfixExpression)UnaryExpression_284_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_285_Var);
		final EList<? extends EObject> Expr_285_list = PostfixExpression_285_Var.getExpr();
		Assert.assertNotNull(Expr_285_list);
		Assert.assertEquals(1, Expr_285_list.size());
		final PrimaryExpression PrimaryExpression_286_Var = (PrimaryExpression)Expr_285_list.get(0);
		Assert.assertNotNull(PrimaryExpression_286_Var);
		final Constant Constant_287_Var = (Constant)PrimaryExpression_286_Var.getConst();
		Assert.assertNotNull(Constant_287_Var);
		Assert.assertEquals("\"sizeof(joe)=%lu\\n\"", Constant_287_Var.getStr());
		final AssignmentExpression AssignmentExpression_288_Var = (AssignmentExpression)Expr_270_list.get(1);
		Assert.assertNotNull(AssignmentExpression_288_Var);
		final ConditionalExpression ConditionalExpression_289_Var = (ConditionalExpression)AssignmentExpression_288_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_289_Var);
		final LogicalOrExpression LogicalOrExpression_290_Var = (LogicalOrExpression)ConditionalExpression_289_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_290_Var);
		final EList<? extends EObject> Expr_290_list = LogicalOrExpression_290_Var.getExpr();
		Assert.assertNotNull(Expr_290_list);
		Assert.assertEquals(1, Expr_290_list.size());
		final LogicalAndExpression LogicalAndExpression_291_Var = (LogicalAndExpression)Expr_290_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_291_Var);
		final EList<? extends EObject> Expr_291_list = LogicalAndExpression_291_Var.getExpr();
		Assert.assertNotNull(Expr_291_list);
		Assert.assertEquals(1, Expr_291_list.size());
		final InclusiveOrExpression InclusiveOrExpression_292_Var = (InclusiveOrExpression)Expr_291_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_292_Var);
		final EList<? extends EObject> Expr_292_list = InclusiveOrExpression_292_Var.getExpr();
		Assert.assertNotNull(Expr_292_list);
		Assert.assertEquals(1, Expr_292_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_293_Var = (ExclusiveOrExpression)Expr_292_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_293_Var);
		final EList<? extends EObject> Expr_293_list = ExclusiveOrExpression_293_Var.getExpr();
		Assert.assertNotNull(Expr_293_list);
		Assert.assertEquals(1, Expr_293_list.size());
		final AndExpression AndExpression_294_Var = (AndExpression)Expr_293_list.get(0);
		Assert.assertNotNull(AndExpression_294_Var);
		final EList<? extends EObject> Expr_294_list = AndExpression_294_Var.getExpr();
		Assert.assertNotNull(Expr_294_list);
		Assert.assertEquals(1, Expr_294_list.size());
		final EqualityExpression EqualityExpression_295_Var = (EqualityExpression)Expr_294_list.get(0);
		Assert.assertNotNull(EqualityExpression_295_Var);
		final EList<? extends EObject> Expr_295_list = EqualityExpression_295_Var.getExpr();
		Assert.assertNotNull(Expr_295_list);
		Assert.assertEquals(1, Expr_295_list.size());
		final RelationalExpression RelationalExpression_296_Var = (RelationalExpression)Expr_295_list.get(0);
		Assert.assertNotNull(RelationalExpression_296_Var);
		final EList<? extends EObject> Expr_296_list = RelationalExpression_296_Var.getExpr();
		Assert.assertNotNull(Expr_296_list);
		Assert.assertEquals(1, Expr_296_list.size());
		final ShiftExpression ShiftExpression_297_Var = (ShiftExpression)Expr_296_list.get(0);
		Assert.assertNotNull(ShiftExpression_297_Var);
		final EList<? extends EObject> Expr_297_list = ShiftExpression_297_Var.getExpr();
		Assert.assertNotNull(Expr_297_list);
		Assert.assertEquals(1, Expr_297_list.size());
		final AdditiveExpression AdditiveExpression_298_Var = (AdditiveExpression)Expr_297_list.get(0);
		Assert.assertNotNull(AdditiveExpression_298_Var);
		final EList<? extends EObject> Expr_298_list = AdditiveExpression_298_Var.getExpr();
		Assert.assertNotNull(Expr_298_list);
		Assert.assertEquals(1, Expr_298_list.size());
		final MultiplicativeExpression MultiplicativeExpression_299_Var = (MultiplicativeExpression)Expr_298_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_299_Var);
		final EList<? extends EObject> Expr_299_list = MultiplicativeExpression_299_Var.getExpr();
		Assert.assertNotNull(Expr_299_list);
		Assert.assertEquals(1, Expr_299_list.size());
		final CastExpression CastExpression_300_Var = (CastExpression)Expr_299_list.get(0);
		Assert.assertNotNull(CastExpression_300_Var);
		final UnaryExpression UnaryExpression_301_Var = (UnaryExpression)CastExpression_300_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_301_Var);
		Assert.assertEquals("sizeof", UnaryExpression_301_Var.getSizeOf());
		final UnaryExpression UnaryExpression_302_Var = (UnaryExpression)UnaryExpression_301_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_302_Var);
		final PostfixExpression PostfixExpression_303_Var = (PostfixExpression)UnaryExpression_302_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_303_Var);
		final EList<? extends EObject> Expr_303_list = PostfixExpression_303_Var.getExpr();
		Assert.assertNotNull(Expr_303_list);
		Assert.assertEquals(1, Expr_303_list.size());
		final PrimaryExpression PrimaryExpression_304_Var = (PrimaryExpression)Expr_303_list.get(0);
		Assert.assertNotNull(PrimaryExpression_304_Var);
		final Expression Expression_305_Var = (Expression)PrimaryExpression_304_Var.getExpr();
		Assert.assertNotNull(Expression_305_Var);
		final EList<? extends EObject> ExprExpr_305_list = Expression_305_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_305_list);
		Assert.assertEquals(1, ExprExpr_305_list.size());
		final AssignmentExpression AssignmentExpression_306_Var = (AssignmentExpression)ExprExpr_305_list.get(0);
		Assert.assertNotNull(AssignmentExpression_306_Var);
		final ConditionalExpression ConditionalExpression_307_Var = (ConditionalExpression)AssignmentExpression_306_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_307_Var);
		final LogicalOrExpression LogicalOrExpression_308_Var = (LogicalOrExpression)ConditionalExpression_307_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_308_Var);
		final EList<? extends EObject> Expr_308_list = LogicalOrExpression_308_Var.getExpr();
		Assert.assertNotNull(Expr_308_list);
		Assert.assertEquals(1, Expr_308_list.size());
		final LogicalAndExpression LogicalAndExpression_309_Var = (LogicalAndExpression)Expr_308_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_309_Var);
		final EList<? extends EObject> Expr_309_list = LogicalAndExpression_309_Var.getExpr();
		Assert.assertNotNull(Expr_309_list);
		Assert.assertEquals(1, Expr_309_list.size());
		final InclusiveOrExpression InclusiveOrExpression_310_Var = (InclusiveOrExpression)Expr_309_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_310_Var);
		final EList<? extends EObject> Expr_310_list = InclusiveOrExpression_310_Var.getExpr();
		Assert.assertNotNull(Expr_310_list);
		Assert.assertEquals(1, Expr_310_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_311_Var = (ExclusiveOrExpression)Expr_310_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_311_Var);
		final EList<? extends EObject> Expr_311_list = ExclusiveOrExpression_311_Var.getExpr();
		Assert.assertNotNull(Expr_311_list);
		Assert.assertEquals(1, Expr_311_list.size());
		final AndExpression AndExpression_312_Var = (AndExpression)Expr_311_list.get(0);
		Assert.assertNotNull(AndExpression_312_Var);
		final EList<? extends EObject> Expr_312_list = AndExpression_312_Var.getExpr();
		Assert.assertNotNull(Expr_312_list);
		Assert.assertEquals(1, Expr_312_list.size());
		final EqualityExpression EqualityExpression_313_Var = (EqualityExpression)Expr_312_list.get(0);
		Assert.assertNotNull(EqualityExpression_313_Var);
		final EList<? extends EObject> Expr_313_list = EqualityExpression_313_Var.getExpr();
		Assert.assertNotNull(Expr_313_list);
		Assert.assertEquals(1, Expr_313_list.size());
		final RelationalExpression RelationalExpression_314_Var = (RelationalExpression)Expr_313_list.get(0);
		Assert.assertNotNull(RelationalExpression_314_Var);
		final EList<? extends EObject> Expr_314_list = RelationalExpression_314_Var.getExpr();
		Assert.assertNotNull(Expr_314_list);
		Assert.assertEquals(1, Expr_314_list.size());
		final ShiftExpression ShiftExpression_315_Var = (ShiftExpression)Expr_314_list.get(0);
		Assert.assertNotNull(ShiftExpression_315_Var);
		final EList<? extends EObject> Expr_315_list = ShiftExpression_315_Var.getExpr();
		Assert.assertNotNull(Expr_315_list);
		Assert.assertEquals(1, Expr_315_list.size());
		final AdditiveExpression AdditiveExpression_316_Var = (AdditiveExpression)Expr_315_list.get(0);
		Assert.assertNotNull(AdditiveExpression_316_Var);
		final EList<? extends EObject> Expr_316_list = AdditiveExpression_316_Var.getExpr();
		Assert.assertNotNull(Expr_316_list);
		Assert.assertEquals(1, Expr_316_list.size());
		final MultiplicativeExpression MultiplicativeExpression_317_Var = (MultiplicativeExpression)Expr_316_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_317_Var);
		final EList<? extends EObject> Expr_317_list = MultiplicativeExpression_317_Var.getExpr();
		Assert.assertNotNull(Expr_317_list);
		Assert.assertEquals(1, Expr_317_list.size());
		final CastExpression CastExpression_318_Var = (CastExpression)Expr_317_list.get(0);
		Assert.assertNotNull(CastExpression_318_Var);
		final UnaryExpression UnaryExpression_319_Var = (UnaryExpression)CastExpression_318_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_319_Var);
		final PostfixExpression PostfixExpression_320_Var = (PostfixExpression)UnaryExpression_319_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_320_Var);
		final EList<? extends EObject> Expr_320_list = PostfixExpression_320_Var.getExpr();
		Assert.assertNotNull(Expr_320_list);
		Assert.assertEquals(1, Expr_320_list.size());
		final PrimaryExpression PrimaryExpression_321_Var = (PrimaryExpression)Expr_320_list.get(0);
		Assert.assertNotNull(PrimaryExpression_321_Var);
		Assert.assertEquals("joe", PrimaryExpression_321_Var.getId());
		Assert.assertEquals(";", ExpressionStatement_252_Var.getSemi());
		final Statement Statement_322_Var = (Statement)Statement_108_list.get(3);
		Assert.assertNotNull(Statement_322_Var);
		final ExpressionStatement ExpressionStatement_323_Var = (ExpressionStatement)Statement_322_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_323_Var);
		final Expression Expression_324_Var = (Expression)ExpressionStatement_323_Var.getExpression();
		Assert.assertNotNull(Expression_324_Var);
		final EList<? extends EObject> ExprExpr_324_list = Expression_324_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_324_list);
		Assert.assertEquals(1, ExprExpr_324_list.size());
		final AssignmentExpression AssignmentExpression_325_Var = (AssignmentExpression)ExprExpr_324_list.get(0);
		Assert.assertNotNull(AssignmentExpression_325_Var);
		final UnaryExpression UnaryExpression_326_Var = (UnaryExpression)AssignmentExpression_325_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_326_Var);
		final PostfixExpression PostfixExpression_327_Var = (PostfixExpression)UnaryExpression_326_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_327_Var);
		final EList<? extends EObject> Expr_327_list = PostfixExpression_327_Var.getExpr();
		Assert.assertNotNull(Expr_327_list);
		Assert.assertEquals(1, Expr_327_list.size());
		final PrimaryExpression PrimaryExpression_328_Var = (PrimaryExpression)Expr_327_list.get(0);
		Assert.assertNotNull(PrimaryExpression_328_Var);
		Assert.assertEquals("phil", PrimaryExpression_328_Var.getId());
		Assert.assertEquals("[.]", PostfixExpression_327_Var.getDot().toString());
		Assert.assertEquals("[id]", PostfixExpression_327_Var.getId().toString());
		final AssignmentOperator AssignmentOperator_329_Var = (AssignmentOperator)AssignmentExpression_325_Var.getOp();
		Assert.assertNotNull(AssignmentOperator_329_Var);
		Assert.assertEquals("=", AssignmentOperator_329_Var.getOp());
		final AssignmentExpression AssignmentExpression_330_Var = (AssignmentExpression)AssignmentExpression_325_Var.getAssignmentExpr();
		Assert.assertNotNull(AssignmentExpression_330_Var);
		final ConditionalExpression ConditionalExpression_331_Var = (ConditionalExpression)AssignmentExpression_330_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_331_Var);
		final LogicalOrExpression LogicalOrExpression_332_Var = (LogicalOrExpression)ConditionalExpression_331_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_332_Var);
		final EList<? extends EObject> Expr_332_list = LogicalOrExpression_332_Var.getExpr();
		Assert.assertNotNull(Expr_332_list);
		Assert.assertEquals(1, Expr_332_list.size());
		final LogicalAndExpression LogicalAndExpression_333_Var = (LogicalAndExpression)Expr_332_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_333_Var);
		final EList<? extends EObject> Expr_333_list = LogicalAndExpression_333_Var.getExpr();
		Assert.assertNotNull(Expr_333_list);
		Assert.assertEquals(1, Expr_333_list.size());
		final InclusiveOrExpression InclusiveOrExpression_334_Var = (InclusiveOrExpression)Expr_333_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_334_Var);
		final EList<? extends EObject> Expr_334_list = InclusiveOrExpression_334_Var.getExpr();
		Assert.assertNotNull(Expr_334_list);
		Assert.assertEquals(1, Expr_334_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_335_Var = (ExclusiveOrExpression)Expr_334_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_335_Var);
		final EList<? extends EObject> Expr_335_list = ExclusiveOrExpression_335_Var.getExpr();
		Assert.assertNotNull(Expr_335_list);
		Assert.assertEquals(1, Expr_335_list.size());
		final AndExpression AndExpression_336_Var = (AndExpression)Expr_335_list.get(0);
		Assert.assertNotNull(AndExpression_336_Var);
		final EList<? extends EObject> Expr_336_list = AndExpression_336_Var.getExpr();
		Assert.assertNotNull(Expr_336_list);
		Assert.assertEquals(1, Expr_336_list.size());
		final EqualityExpression EqualityExpression_337_Var = (EqualityExpression)Expr_336_list.get(0);
		Assert.assertNotNull(EqualityExpression_337_Var);
		final EList<? extends EObject> Expr_337_list = EqualityExpression_337_Var.getExpr();
		Assert.assertNotNull(Expr_337_list);
		Assert.assertEquals(1, Expr_337_list.size());
		final RelationalExpression RelationalExpression_338_Var = (RelationalExpression)Expr_337_list.get(0);
		Assert.assertNotNull(RelationalExpression_338_Var);
		final EList<? extends EObject> Expr_338_list = RelationalExpression_338_Var.getExpr();
		Assert.assertNotNull(Expr_338_list);
		Assert.assertEquals(1, Expr_338_list.size());
		final ShiftExpression ShiftExpression_339_Var = (ShiftExpression)Expr_338_list.get(0);
		Assert.assertNotNull(ShiftExpression_339_Var);
		final EList<? extends EObject> Expr_339_list = ShiftExpression_339_Var.getExpr();
		Assert.assertNotNull(Expr_339_list);
		Assert.assertEquals(1, Expr_339_list.size());
		final AdditiveExpression AdditiveExpression_340_Var = (AdditiveExpression)Expr_339_list.get(0);
		Assert.assertNotNull(AdditiveExpression_340_Var);
		final EList<? extends EObject> Expr_340_list = AdditiveExpression_340_Var.getExpr();
		Assert.assertNotNull(Expr_340_list);
		Assert.assertEquals(1, Expr_340_list.size());
		final MultiplicativeExpression MultiplicativeExpression_341_Var = (MultiplicativeExpression)Expr_340_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_341_Var);
		final EList<? extends EObject> Expr_341_list = MultiplicativeExpression_341_Var.getExpr();
		Assert.assertNotNull(Expr_341_list);
		Assert.assertEquals(1, Expr_341_list.size());
		final CastExpression CastExpression_342_Var = (CastExpression)Expr_341_list.get(0);
		Assert.assertNotNull(CastExpression_342_Var);
		final UnaryExpression UnaryExpression_343_Var = (UnaryExpression)CastExpression_342_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_343_Var);
		final PostfixExpression PostfixExpression_344_Var = (PostfixExpression)UnaryExpression_343_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_344_Var);
		final EList<? extends EObject> Expr_344_list = PostfixExpression_344_Var.getExpr();
		Assert.assertNotNull(Expr_344_list);
		Assert.assertEquals(1, Expr_344_list.size());
		final PrimaryExpression PrimaryExpression_345_Var = (PrimaryExpression)Expr_344_list.get(0);
		Assert.assertNotNull(PrimaryExpression_345_Var);
		final Constant Constant_346_Var = (Constant)PrimaryExpression_345_Var.getConst();
		Assert.assertNotNull(Constant_346_Var);
		Assert.assertEquals("0x008", Constant_346_Var.getHex());
		Assert.assertEquals(";", ExpressionStatement_323_Var.getSemi());
		final Statement Statement_347_Var = (Statement)Statement_108_list.get(4);
		Assert.assertNotNull(Statement_347_Var);
		final ExpressionStatement ExpressionStatement_348_Var = (ExpressionStatement)Statement_347_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_348_Var);
		final Expression Expression_349_Var = (Expression)ExpressionStatement_348_Var.getExpression();
		Assert.assertNotNull(Expression_349_Var);
		final EList<? extends EObject> ExprExpr_349_list = Expression_349_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_349_list);
		Assert.assertEquals(1, ExprExpr_349_list.size());
		final AssignmentExpression AssignmentExpression_350_Var = (AssignmentExpression)ExprExpr_349_list.get(0);
		Assert.assertNotNull(AssignmentExpression_350_Var);
		final ConditionalExpression ConditionalExpression_351_Var = (ConditionalExpression)AssignmentExpression_350_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_351_Var);
		final LogicalOrExpression LogicalOrExpression_352_Var = (LogicalOrExpression)ConditionalExpression_351_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_352_Var);
		final EList<? extends EObject> Expr_352_list = LogicalOrExpression_352_Var.getExpr();
		Assert.assertNotNull(Expr_352_list);
		Assert.assertEquals(1, Expr_352_list.size());
		final LogicalAndExpression LogicalAndExpression_353_Var = (LogicalAndExpression)Expr_352_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_353_Var);
		final EList<? extends EObject> Expr_353_list = LogicalAndExpression_353_Var.getExpr();
		Assert.assertNotNull(Expr_353_list);
		Assert.assertEquals(1, Expr_353_list.size());
		final InclusiveOrExpression InclusiveOrExpression_354_Var = (InclusiveOrExpression)Expr_353_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_354_Var);
		final EList<? extends EObject> Expr_354_list = InclusiveOrExpression_354_Var.getExpr();
		Assert.assertNotNull(Expr_354_list);
		Assert.assertEquals(1, Expr_354_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_355_Var = (ExclusiveOrExpression)Expr_354_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_355_Var);
		final EList<? extends EObject> Expr_355_list = ExclusiveOrExpression_355_Var.getExpr();
		Assert.assertNotNull(Expr_355_list);
		Assert.assertEquals(1, Expr_355_list.size());
		final AndExpression AndExpression_356_Var = (AndExpression)Expr_355_list.get(0);
		Assert.assertNotNull(AndExpression_356_Var);
		final EList<? extends EObject> Expr_356_list = AndExpression_356_Var.getExpr();
		Assert.assertNotNull(Expr_356_list);
		Assert.assertEquals(1, Expr_356_list.size());
		final EqualityExpression EqualityExpression_357_Var = (EqualityExpression)Expr_356_list.get(0);
		Assert.assertNotNull(EqualityExpression_357_Var);
		final EList<? extends EObject> Expr_357_list = EqualityExpression_357_Var.getExpr();
		Assert.assertNotNull(Expr_357_list);
		Assert.assertEquals(1, Expr_357_list.size());
		final RelationalExpression RelationalExpression_358_Var = (RelationalExpression)Expr_357_list.get(0);
		Assert.assertNotNull(RelationalExpression_358_Var);
		final EList<? extends EObject> Expr_358_list = RelationalExpression_358_Var.getExpr();
		Assert.assertNotNull(Expr_358_list);
		Assert.assertEquals(1, Expr_358_list.size());
		final ShiftExpression ShiftExpression_359_Var = (ShiftExpression)Expr_358_list.get(0);
		Assert.assertNotNull(ShiftExpression_359_Var);
		final EList<? extends EObject> Expr_359_list = ShiftExpression_359_Var.getExpr();
		Assert.assertNotNull(Expr_359_list);
		Assert.assertEquals(1, Expr_359_list.size());
		final AdditiveExpression AdditiveExpression_360_Var = (AdditiveExpression)Expr_359_list.get(0);
		Assert.assertNotNull(AdditiveExpression_360_Var);
		final EList<? extends EObject> Expr_360_list = AdditiveExpression_360_Var.getExpr();
		Assert.assertNotNull(Expr_360_list);
		Assert.assertEquals(1, Expr_360_list.size());
		final MultiplicativeExpression MultiplicativeExpression_361_Var = (MultiplicativeExpression)Expr_360_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_361_Var);
		final EList<? extends EObject> Expr_361_list = MultiplicativeExpression_361_Var.getExpr();
		Assert.assertNotNull(Expr_361_list);
		Assert.assertEquals(1, Expr_361_list.size());
		final CastExpression CastExpression_362_Var = (CastExpression)Expr_361_list.get(0);
		Assert.assertNotNull(CastExpression_362_Var);
		final UnaryExpression UnaryExpression_363_Var = (UnaryExpression)CastExpression_362_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_363_Var);
		final PostfixExpression PostfixExpression_364_Var = (PostfixExpression)UnaryExpression_363_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_364_Var);
		final EList<? extends EObject> Expr_364_list = PostfixExpression_364_Var.getExpr();
		Assert.assertNotNull(Expr_364_list);
		Assert.assertEquals(1, Expr_364_list.size());
		final PrimaryExpression PrimaryExpression_365_Var = (PrimaryExpression)Expr_364_list.get(0);
		Assert.assertNotNull(PrimaryExpression_365_Var);
		Assert.assertEquals("strcpy", PrimaryExpression_365_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_365_list = PostfixExpression_364_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_365_list);
		Assert.assertEquals(1, ArgumentExpressionList_365_list.size());
		final ArgumentExpressionList ArgumentExpressionList_366_Var = (ArgumentExpressionList)ArgumentExpressionList_365_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_366_Var);
		final EList<? extends EObject> Expr_366_list = ArgumentExpressionList_366_Var.getExpr();
		Assert.assertNotNull(Expr_366_list);
		Assert.assertEquals(2, Expr_366_list.size());
		final AssignmentExpression AssignmentExpression_367_Var = (AssignmentExpression)Expr_366_list.get(0);
		Assert.assertNotNull(AssignmentExpression_367_Var);
		final ConditionalExpression ConditionalExpression_368_Var = (ConditionalExpression)AssignmentExpression_367_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_368_Var);
		final LogicalOrExpression LogicalOrExpression_369_Var = (LogicalOrExpression)ConditionalExpression_368_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_369_Var);
		final EList<? extends EObject> Expr_369_list = LogicalOrExpression_369_Var.getExpr();
		Assert.assertNotNull(Expr_369_list);
		Assert.assertEquals(1, Expr_369_list.size());
		final LogicalAndExpression LogicalAndExpression_370_Var = (LogicalAndExpression)Expr_369_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_370_Var);
		final EList<? extends EObject> Expr_370_list = LogicalAndExpression_370_Var.getExpr();
		Assert.assertNotNull(Expr_370_list);
		Assert.assertEquals(1, Expr_370_list.size());
		final InclusiveOrExpression InclusiveOrExpression_371_Var = (InclusiveOrExpression)Expr_370_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_371_Var);
		final EList<? extends EObject> Expr_371_list = InclusiveOrExpression_371_Var.getExpr();
		Assert.assertNotNull(Expr_371_list);
		Assert.assertEquals(1, Expr_371_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_372_Var = (ExclusiveOrExpression)Expr_371_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_372_Var);
		final EList<? extends EObject> Expr_372_list = ExclusiveOrExpression_372_Var.getExpr();
		Assert.assertNotNull(Expr_372_list);
		Assert.assertEquals(1, Expr_372_list.size());
		final AndExpression AndExpression_373_Var = (AndExpression)Expr_372_list.get(0);
		Assert.assertNotNull(AndExpression_373_Var);
		final EList<? extends EObject> Expr_373_list = AndExpression_373_Var.getExpr();
		Assert.assertNotNull(Expr_373_list);
		Assert.assertEquals(1, Expr_373_list.size());
		final EqualityExpression EqualityExpression_374_Var = (EqualityExpression)Expr_373_list.get(0);
		Assert.assertNotNull(EqualityExpression_374_Var);
		final EList<? extends EObject> Expr_374_list = EqualityExpression_374_Var.getExpr();
		Assert.assertNotNull(Expr_374_list);
		Assert.assertEquals(1, Expr_374_list.size());
		final RelationalExpression RelationalExpression_375_Var = (RelationalExpression)Expr_374_list.get(0);
		Assert.assertNotNull(RelationalExpression_375_Var);
		final EList<? extends EObject> Expr_375_list = RelationalExpression_375_Var.getExpr();
		Assert.assertNotNull(Expr_375_list);
		Assert.assertEquals(1, Expr_375_list.size());
		final ShiftExpression ShiftExpression_376_Var = (ShiftExpression)Expr_375_list.get(0);
		Assert.assertNotNull(ShiftExpression_376_Var);
		final EList<? extends EObject> Expr_376_list = ShiftExpression_376_Var.getExpr();
		Assert.assertNotNull(Expr_376_list);
		Assert.assertEquals(1, Expr_376_list.size());
		final AdditiveExpression AdditiveExpression_377_Var = (AdditiveExpression)Expr_376_list.get(0);
		Assert.assertNotNull(AdditiveExpression_377_Var);
		final EList<? extends EObject> Expr_377_list = AdditiveExpression_377_Var.getExpr();
		Assert.assertNotNull(Expr_377_list);
		Assert.assertEquals(1, Expr_377_list.size());
		final MultiplicativeExpression MultiplicativeExpression_378_Var = (MultiplicativeExpression)Expr_377_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_378_Var);
		final EList<? extends EObject> Expr_378_list = MultiplicativeExpression_378_Var.getExpr();
		Assert.assertNotNull(Expr_378_list);
		Assert.assertEquals(1, Expr_378_list.size());
		final CastExpression CastExpression_379_Var = (CastExpression)Expr_378_list.get(0);
		Assert.assertNotNull(CastExpression_379_Var);
		final UnaryExpression UnaryExpression_380_Var = (UnaryExpression)CastExpression_379_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_380_Var);
		final PostfixExpression PostfixExpression_381_Var = (PostfixExpression)UnaryExpression_380_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_381_Var);
		final EList<? extends EObject> Expr_381_list = PostfixExpression_381_Var.getExpr();
		Assert.assertNotNull(Expr_381_list);
		Assert.assertEquals(1, Expr_381_list.size());
		final PrimaryExpression PrimaryExpression_382_Var = (PrimaryExpression)Expr_381_list.get(0);
		Assert.assertNotNull(PrimaryExpression_382_Var);
		Assert.assertEquals("phil", PrimaryExpression_382_Var.getId());
		Assert.assertEquals("[.]", PostfixExpression_381_Var.getDot().toString());
		Assert.assertEquals("[name]", PostfixExpression_381_Var.getId().toString());
		final AssignmentExpression AssignmentExpression_383_Var = (AssignmentExpression)Expr_366_list.get(1);
		Assert.assertNotNull(AssignmentExpression_383_Var);
		final ConditionalExpression ConditionalExpression_384_Var = (ConditionalExpression)AssignmentExpression_383_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_384_Var);
		final LogicalOrExpression LogicalOrExpression_385_Var = (LogicalOrExpression)ConditionalExpression_384_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_385_Var);
		final EList<? extends EObject> Expr_385_list = LogicalOrExpression_385_Var.getExpr();
		Assert.assertNotNull(Expr_385_list);
		Assert.assertEquals(1, Expr_385_list.size());
		final LogicalAndExpression LogicalAndExpression_386_Var = (LogicalAndExpression)Expr_385_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_386_Var);
		final EList<? extends EObject> Expr_386_list = LogicalAndExpression_386_Var.getExpr();
		Assert.assertNotNull(Expr_386_list);
		Assert.assertEquals(1, Expr_386_list.size());
		final InclusiveOrExpression InclusiveOrExpression_387_Var = (InclusiveOrExpression)Expr_386_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_387_Var);
		final EList<? extends EObject> Expr_387_list = InclusiveOrExpression_387_Var.getExpr();
		Assert.assertNotNull(Expr_387_list);
		Assert.assertEquals(1, Expr_387_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_388_Var = (ExclusiveOrExpression)Expr_387_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_388_Var);
		final EList<? extends EObject> Expr_388_list = ExclusiveOrExpression_388_Var.getExpr();
		Assert.assertNotNull(Expr_388_list);
		Assert.assertEquals(1, Expr_388_list.size());
		final AndExpression AndExpression_389_Var = (AndExpression)Expr_388_list.get(0);
		Assert.assertNotNull(AndExpression_389_Var);
		final EList<? extends EObject> Expr_389_list = AndExpression_389_Var.getExpr();
		Assert.assertNotNull(Expr_389_list);
		Assert.assertEquals(1, Expr_389_list.size());
		final EqualityExpression EqualityExpression_390_Var = (EqualityExpression)Expr_389_list.get(0);
		Assert.assertNotNull(EqualityExpression_390_Var);
		final EList<? extends EObject> Expr_390_list = EqualityExpression_390_Var.getExpr();
		Assert.assertNotNull(Expr_390_list);
		Assert.assertEquals(1, Expr_390_list.size());
		final RelationalExpression RelationalExpression_391_Var = (RelationalExpression)Expr_390_list.get(0);
		Assert.assertNotNull(RelationalExpression_391_Var);
		final EList<? extends EObject> Expr_391_list = RelationalExpression_391_Var.getExpr();
		Assert.assertNotNull(Expr_391_list);
		Assert.assertEquals(1, Expr_391_list.size());
		final ShiftExpression ShiftExpression_392_Var = (ShiftExpression)Expr_391_list.get(0);
		Assert.assertNotNull(ShiftExpression_392_Var);
		final EList<? extends EObject> Expr_392_list = ShiftExpression_392_Var.getExpr();
		Assert.assertNotNull(Expr_392_list);
		Assert.assertEquals(1, Expr_392_list.size());
		final AdditiveExpression AdditiveExpression_393_Var = (AdditiveExpression)Expr_392_list.get(0);
		Assert.assertNotNull(AdditiveExpression_393_Var);
		final EList<? extends EObject> Expr_393_list = AdditiveExpression_393_Var.getExpr();
		Assert.assertNotNull(Expr_393_list);
		Assert.assertEquals(1, Expr_393_list.size());
		final MultiplicativeExpression MultiplicativeExpression_394_Var = (MultiplicativeExpression)Expr_393_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_394_Var);
		final EList<? extends EObject> Expr_394_list = MultiplicativeExpression_394_Var.getExpr();
		Assert.assertNotNull(Expr_394_list);
		Assert.assertEquals(1, Expr_394_list.size());
		final CastExpression CastExpression_395_Var = (CastExpression)Expr_394_list.get(0);
		Assert.assertNotNull(CastExpression_395_Var);
		final UnaryExpression UnaryExpression_396_Var = (UnaryExpression)CastExpression_395_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_396_Var);
		final PostfixExpression PostfixExpression_397_Var = (PostfixExpression)UnaryExpression_396_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_397_Var);
		final EList<? extends EObject> Expr_397_list = PostfixExpression_397_Var.getExpr();
		Assert.assertNotNull(Expr_397_list);
		Assert.assertEquals(1, Expr_397_list.size());
		final PrimaryExpression PrimaryExpression_398_Var = (PrimaryExpression)Expr_397_list.get(0);
		Assert.assertNotNull(PrimaryExpression_398_Var);
		final Constant Constant_399_Var = (Constant)PrimaryExpression_398_Var.getConst();
		Assert.assertNotNull(Constant_399_Var);
		Assert.assertEquals("\"Phil Morrison\"", Constant_399_Var.getStr());
		Assert.assertEquals(";", ExpressionStatement_348_Var.getSemi());
		final Statement Statement_400_Var = (Statement)Statement_108_list.get(5);
		Assert.assertNotNull(Statement_400_Var);
		final ExpressionStatement ExpressionStatement_401_Var = (ExpressionStatement)Statement_400_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_401_Var);
		final Expression Expression_402_Var = (Expression)ExpressionStatement_401_Var.getExpression();
		Assert.assertNotNull(Expression_402_Var);
		final EList<? extends EObject> ExprExpr_402_list = Expression_402_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_402_list);
		Assert.assertEquals(1, ExprExpr_402_list.size());
		final AssignmentExpression AssignmentExpression_403_Var = (AssignmentExpression)ExprExpr_402_list.get(0);
		Assert.assertNotNull(AssignmentExpression_403_Var);
		final ConditionalExpression ConditionalExpression_404_Var = (ConditionalExpression)AssignmentExpression_403_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_404_Var);
		final LogicalOrExpression LogicalOrExpression_405_Var = (LogicalOrExpression)ConditionalExpression_404_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_405_Var);
		final EList<? extends EObject> Expr_405_list = LogicalOrExpression_405_Var.getExpr();
		Assert.assertNotNull(Expr_405_list);
		Assert.assertEquals(1, Expr_405_list.size());
		final LogicalAndExpression LogicalAndExpression_406_Var = (LogicalAndExpression)Expr_405_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_406_Var);
		final EList<? extends EObject> Expr_406_list = LogicalAndExpression_406_Var.getExpr();
		Assert.assertNotNull(Expr_406_list);
		Assert.assertEquals(1, Expr_406_list.size());
		final InclusiveOrExpression InclusiveOrExpression_407_Var = (InclusiveOrExpression)Expr_406_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_407_Var);
		final EList<? extends EObject> Expr_407_list = InclusiveOrExpression_407_Var.getExpr();
		Assert.assertNotNull(Expr_407_list);
		Assert.assertEquals(1, Expr_407_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_408_Var = (ExclusiveOrExpression)Expr_407_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_408_Var);
		final EList<? extends EObject> Expr_408_list = ExclusiveOrExpression_408_Var.getExpr();
		Assert.assertNotNull(Expr_408_list);
		Assert.assertEquals(1, Expr_408_list.size());
		final AndExpression AndExpression_409_Var = (AndExpression)Expr_408_list.get(0);
		Assert.assertNotNull(AndExpression_409_Var);
		final EList<? extends EObject> Expr_409_list = AndExpression_409_Var.getExpr();
		Assert.assertNotNull(Expr_409_list);
		Assert.assertEquals(1, Expr_409_list.size());
		final EqualityExpression EqualityExpression_410_Var = (EqualityExpression)Expr_409_list.get(0);
		Assert.assertNotNull(EqualityExpression_410_Var);
		final EList<? extends EObject> Expr_410_list = EqualityExpression_410_Var.getExpr();
		Assert.assertNotNull(Expr_410_list);
		Assert.assertEquals(1, Expr_410_list.size());
		final RelationalExpression RelationalExpression_411_Var = (RelationalExpression)Expr_410_list.get(0);
		Assert.assertNotNull(RelationalExpression_411_Var);
		final EList<? extends EObject> Expr_411_list = RelationalExpression_411_Var.getExpr();
		Assert.assertNotNull(Expr_411_list);
		Assert.assertEquals(1, Expr_411_list.size());
		final ShiftExpression ShiftExpression_412_Var = (ShiftExpression)Expr_411_list.get(0);
		Assert.assertNotNull(ShiftExpression_412_Var);
		final EList<? extends EObject> Expr_412_list = ShiftExpression_412_Var.getExpr();
		Assert.assertNotNull(Expr_412_list);
		Assert.assertEquals(1, Expr_412_list.size());
		final AdditiveExpression AdditiveExpression_413_Var = (AdditiveExpression)Expr_412_list.get(0);
		Assert.assertNotNull(AdditiveExpression_413_Var);
		final EList<? extends EObject> Expr_413_list = AdditiveExpression_413_Var.getExpr();
		Assert.assertNotNull(Expr_413_list);
		Assert.assertEquals(1, Expr_413_list.size());
		final MultiplicativeExpression MultiplicativeExpression_414_Var = (MultiplicativeExpression)Expr_413_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_414_Var);
		final EList<? extends EObject> Expr_414_list = MultiplicativeExpression_414_Var.getExpr();
		Assert.assertNotNull(Expr_414_list);
		Assert.assertEquals(1, Expr_414_list.size());
		final CastExpression CastExpression_415_Var = (CastExpression)Expr_414_list.get(0);
		Assert.assertNotNull(CastExpression_415_Var);
		final UnaryExpression UnaryExpression_416_Var = (UnaryExpression)CastExpression_415_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_416_Var);
		final PostfixExpression PostfixExpression_417_Var = (PostfixExpression)UnaryExpression_416_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_417_Var);
		final EList<? extends EObject> Expr_417_list = PostfixExpression_417_Var.getExpr();
		Assert.assertNotNull(Expr_417_list);
		Assert.assertEquals(1, Expr_417_list.size());
		final PrimaryExpression PrimaryExpression_418_Var = (PrimaryExpression)Expr_417_list.get(0);
		Assert.assertNotNull(PrimaryExpression_418_Var);
		Assert.assertEquals("printf", PrimaryExpression_418_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_418_list = PostfixExpression_417_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_418_list);
		Assert.assertEquals(1, ArgumentExpressionList_418_list.size());
		final ArgumentExpressionList ArgumentExpressionList_419_Var = (ArgumentExpressionList)ArgumentExpressionList_418_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_419_Var);
		final EList<? extends EObject> Expr_419_list = ArgumentExpressionList_419_Var.getExpr();
		Assert.assertNotNull(Expr_419_list);
		Assert.assertEquals(2, Expr_419_list.size());
		final AssignmentExpression AssignmentExpression_420_Var = (AssignmentExpression)Expr_419_list.get(0);
		Assert.assertNotNull(AssignmentExpression_420_Var);
		final ConditionalExpression ConditionalExpression_421_Var = (ConditionalExpression)AssignmentExpression_420_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_421_Var);
		final LogicalOrExpression LogicalOrExpression_422_Var = (LogicalOrExpression)ConditionalExpression_421_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_422_Var);
		final EList<? extends EObject> Expr_422_list = LogicalOrExpression_422_Var.getExpr();
		Assert.assertNotNull(Expr_422_list);
		Assert.assertEquals(1, Expr_422_list.size());
		final LogicalAndExpression LogicalAndExpression_423_Var = (LogicalAndExpression)Expr_422_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_423_Var);
		final EList<? extends EObject> Expr_423_list = LogicalAndExpression_423_Var.getExpr();
		Assert.assertNotNull(Expr_423_list);
		Assert.assertEquals(1, Expr_423_list.size());
		final InclusiveOrExpression InclusiveOrExpression_424_Var = (InclusiveOrExpression)Expr_423_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_424_Var);
		final EList<? extends EObject> Expr_424_list = InclusiveOrExpression_424_Var.getExpr();
		Assert.assertNotNull(Expr_424_list);
		Assert.assertEquals(1, Expr_424_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_425_Var = (ExclusiveOrExpression)Expr_424_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_425_Var);
		final EList<? extends EObject> Expr_425_list = ExclusiveOrExpression_425_Var.getExpr();
		Assert.assertNotNull(Expr_425_list);
		Assert.assertEquals(1, Expr_425_list.size());
		final AndExpression AndExpression_426_Var = (AndExpression)Expr_425_list.get(0);
		Assert.assertNotNull(AndExpression_426_Var);
		final EList<? extends EObject> Expr_426_list = AndExpression_426_Var.getExpr();
		Assert.assertNotNull(Expr_426_list);
		Assert.assertEquals(1, Expr_426_list.size());
		final EqualityExpression EqualityExpression_427_Var = (EqualityExpression)Expr_426_list.get(0);
		Assert.assertNotNull(EqualityExpression_427_Var);
		final EList<? extends EObject> Expr_427_list = EqualityExpression_427_Var.getExpr();
		Assert.assertNotNull(Expr_427_list);
		Assert.assertEquals(1, Expr_427_list.size());
		final RelationalExpression RelationalExpression_428_Var = (RelationalExpression)Expr_427_list.get(0);
		Assert.assertNotNull(RelationalExpression_428_Var);
		final EList<? extends EObject> Expr_428_list = RelationalExpression_428_Var.getExpr();
		Assert.assertNotNull(Expr_428_list);
		Assert.assertEquals(1, Expr_428_list.size());
		final ShiftExpression ShiftExpression_429_Var = (ShiftExpression)Expr_428_list.get(0);
		Assert.assertNotNull(ShiftExpression_429_Var);
		final EList<? extends EObject> Expr_429_list = ShiftExpression_429_Var.getExpr();
		Assert.assertNotNull(Expr_429_list);
		Assert.assertEquals(1, Expr_429_list.size());
		final AdditiveExpression AdditiveExpression_430_Var = (AdditiveExpression)Expr_429_list.get(0);
		Assert.assertNotNull(AdditiveExpression_430_Var);
		final EList<? extends EObject> Expr_430_list = AdditiveExpression_430_Var.getExpr();
		Assert.assertNotNull(Expr_430_list);
		Assert.assertEquals(1, Expr_430_list.size());
		final MultiplicativeExpression MultiplicativeExpression_431_Var = (MultiplicativeExpression)Expr_430_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_431_Var);
		final EList<? extends EObject> Expr_431_list = MultiplicativeExpression_431_Var.getExpr();
		Assert.assertNotNull(Expr_431_list);
		Assert.assertEquals(1, Expr_431_list.size());
		final CastExpression CastExpression_432_Var = (CastExpression)Expr_431_list.get(0);
		Assert.assertNotNull(CastExpression_432_Var);
		final UnaryExpression UnaryExpression_433_Var = (UnaryExpression)CastExpression_432_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_433_Var);
		final PostfixExpression PostfixExpression_434_Var = (PostfixExpression)UnaryExpression_433_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_434_Var);
		final EList<? extends EObject> Expr_434_list = PostfixExpression_434_Var.getExpr();
		Assert.assertNotNull(Expr_434_list);
		Assert.assertEquals(1, Expr_434_list.size());
		final PrimaryExpression PrimaryExpression_435_Var = (PrimaryExpression)Expr_434_list.get(0);
		Assert.assertNotNull(PrimaryExpression_435_Var);
		final Constant Constant_436_Var = (Constant)PrimaryExpression_435_Var.getConst();
		Assert.assertNotNull(Constant_436_Var);
		Assert.assertEquals("\"joe.id=%d\\n\"", Constant_436_Var.getStr());
		final AssignmentExpression AssignmentExpression_437_Var = (AssignmentExpression)Expr_419_list.get(1);
		Assert.assertNotNull(AssignmentExpression_437_Var);
		final ConditionalExpression ConditionalExpression_438_Var = (ConditionalExpression)AssignmentExpression_437_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_438_Var);
		final LogicalOrExpression LogicalOrExpression_439_Var = (LogicalOrExpression)ConditionalExpression_438_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_439_Var);
		final EList<? extends EObject> Expr_439_list = LogicalOrExpression_439_Var.getExpr();
		Assert.assertNotNull(Expr_439_list);
		Assert.assertEquals(1, Expr_439_list.size());
		final LogicalAndExpression LogicalAndExpression_440_Var = (LogicalAndExpression)Expr_439_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_440_Var);
		final EList<? extends EObject> Expr_440_list = LogicalAndExpression_440_Var.getExpr();
		Assert.assertNotNull(Expr_440_list);
		Assert.assertEquals(1, Expr_440_list.size());
		final InclusiveOrExpression InclusiveOrExpression_441_Var = (InclusiveOrExpression)Expr_440_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_441_Var);
		final EList<? extends EObject> Expr_441_list = InclusiveOrExpression_441_Var.getExpr();
		Assert.assertNotNull(Expr_441_list);
		Assert.assertEquals(1, Expr_441_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_442_Var = (ExclusiveOrExpression)Expr_441_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_442_Var);
		final EList<? extends EObject> Expr_442_list = ExclusiveOrExpression_442_Var.getExpr();
		Assert.assertNotNull(Expr_442_list);
		Assert.assertEquals(1, Expr_442_list.size());
		final AndExpression AndExpression_443_Var = (AndExpression)Expr_442_list.get(0);
		Assert.assertNotNull(AndExpression_443_Var);
		final EList<? extends EObject> Expr_443_list = AndExpression_443_Var.getExpr();
		Assert.assertNotNull(Expr_443_list);
		Assert.assertEquals(1, Expr_443_list.size());
		final EqualityExpression EqualityExpression_444_Var = (EqualityExpression)Expr_443_list.get(0);
		Assert.assertNotNull(EqualityExpression_444_Var);
		final EList<? extends EObject> Expr_444_list = EqualityExpression_444_Var.getExpr();
		Assert.assertNotNull(Expr_444_list);
		Assert.assertEquals(1, Expr_444_list.size());
		final RelationalExpression RelationalExpression_445_Var = (RelationalExpression)Expr_444_list.get(0);
		Assert.assertNotNull(RelationalExpression_445_Var);
		final EList<? extends EObject> Expr_445_list = RelationalExpression_445_Var.getExpr();
		Assert.assertNotNull(Expr_445_list);
		Assert.assertEquals(1, Expr_445_list.size());
		final ShiftExpression ShiftExpression_446_Var = (ShiftExpression)Expr_445_list.get(0);
		Assert.assertNotNull(ShiftExpression_446_Var);
		final EList<? extends EObject> Expr_446_list = ShiftExpression_446_Var.getExpr();
		Assert.assertNotNull(Expr_446_list);
		Assert.assertEquals(1, Expr_446_list.size());
		final AdditiveExpression AdditiveExpression_447_Var = (AdditiveExpression)Expr_446_list.get(0);
		Assert.assertNotNull(AdditiveExpression_447_Var);
		final EList<? extends EObject> Expr_447_list = AdditiveExpression_447_Var.getExpr();
		Assert.assertNotNull(Expr_447_list);
		Assert.assertEquals(1, Expr_447_list.size());
		final MultiplicativeExpression MultiplicativeExpression_448_Var = (MultiplicativeExpression)Expr_447_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_448_Var);
		final EList<? extends EObject> Expr_448_list = MultiplicativeExpression_448_Var.getExpr();
		Assert.assertNotNull(Expr_448_list);
		Assert.assertEquals(1, Expr_448_list.size());
		final CastExpression CastExpression_449_Var = (CastExpression)Expr_448_list.get(0);
		Assert.assertNotNull(CastExpression_449_Var);
		final UnaryExpression UnaryExpression_450_Var = (UnaryExpression)CastExpression_449_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_450_Var);
		final PostfixExpression PostfixExpression_451_Var = (PostfixExpression)UnaryExpression_450_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_451_Var);
		final EList<? extends EObject> Expr_451_list = PostfixExpression_451_Var.getExpr();
		Assert.assertNotNull(Expr_451_list);
		Assert.assertEquals(1, Expr_451_list.size());
		final PrimaryExpression PrimaryExpression_452_Var = (PrimaryExpression)Expr_451_list.get(0);
		Assert.assertNotNull(PrimaryExpression_452_Var);
		Assert.assertEquals("joe", PrimaryExpression_452_Var.getId());
		Assert.assertEquals("[.]", PostfixExpression_451_Var.getDot().toString());
		Assert.assertEquals("[id]", PostfixExpression_451_Var.getId().toString());
		Assert.assertEquals(";", ExpressionStatement_401_Var.getSemi());
		final Statement Statement_453_Var = (Statement)Statement_108_list.get(6);
		Assert.assertNotNull(Statement_453_Var);
		final ExpressionStatement ExpressionStatement_454_Var = (ExpressionStatement)Statement_453_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_454_Var);
		final Expression Expression_455_Var = (Expression)ExpressionStatement_454_Var.getExpression();
		Assert.assertNotNull(Expression_455_Var);
		final EList<? extends EObject> ExprExpr_455_list = Expression_455_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_455_list);
		Assert.assertEquals(1, ExprExpr_455_list.size());
		final AssignmentExpression AssignmentExpression_456_Var = (AssignmentExpression)ExprExpr_455_list.get(0);
		Assert.assertNotNull(AssignmentExpression_456_Var);
		final ConditionalExpression ConditionalExpression_457_Var = (ConditionalExpression)AssignmentExpression_456_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_457_Var);
		final LogicalOrExpression LogicalOrExpression_458_Var = (LogicalOrExpression)ConditionalExpression_457_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_458_Var);
		final EList<? extends EObject> Expr_458_list = LogicalOrExpression_458_Var.getExpr();
		Assert.assertNotNull(Expr_458_list);
		Assert.assertEquals(1, Expr_458_list.size());
		final LogicalAndExpression LogicalAndExpression_459_Var = (LogicalAndExpression)Expr_458_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_459_Var);
		final EList<? extends EObject> Expr_459_list = LogicalAndExpression_459_Var.getExpr();
		Assert.assertNotNull(Expr_459_list);
		Assert.assertEquals(1, Expr_459_list.size());
		final InclusiveOrExpression InclusiveOrExpression_460_Var = (InclusiveOrExpression)Expr_459_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_460_Var);
		final EList<? extends EObject> Expr_460_list = InclusiveOrExpression_460_Var.getExpr();
		Assert.assertNotNull(Expr_460_list);
		Assert.assertEquals(1, Expr_460_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_461_Var = (ExclusiveOrExpression)Expr_460_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_461_Var);
		final EList<? extends EObject> Expr_461_list = ExclusiveOrExpression_461_Var.getExpr();
		Assert.assertNotNull(Expr_461_list);
		Assert.assertEquals(1, Expr_461_list.size());
		final AndExpression AndExpression_462_Var = (AndExpression)Expr_461_list.get(0);
		Assert.assertNotNull(AndExpression_462_Var);
		final EList<? extends EObject> Expr_462_list = AndExpression_462_Var.getExpr();
		Assert.assertNotNull(Expr_462_list);
		Assert.assertEquals(1, Expr_462_list.size());
		final EqualityExpression EqualityExpression_463_Var = (EqualityExpression)Expr_462_list.get(0);
		Assert.assertNotNull(EqualityExpression_463_Var);
		final EList<? extends EObject> Expr_463_list = EqualityExpression_463_Var.getExpr();
		Assert.assertNotNull(Expr_463_list);
		Assert.assertEquals(1, Expr_463_list.size());
		final RelationalExpression RelationalExpression_464_Var = (RelationalExpression)Expr_463_list.get(0);
		Assert.assertNotNull(RelationalExpression_464_Var);
		final EList<? extends EObject> Expr_464_list = RelationalExpression_464_Var.getExpr();
		Assert.assertNotNull(Expr_464_list);
		Assert.assertEquals(1, Expr_464_list.size());
		final ShiftExpression ShiftExpression_465_Var = (ShiftExpression)Expr_464_list.get(0);
		Assert.assertNotNull(ShiftExpression_465_Var);
		final EList<? extends EObject> Expr_465_list = ShiftExpression_465_Var.getExpr();
		Assert.assertNotNull(Expr_465_list);
		Assert.assertEquals(1, Expr_465_list.size());
		final AdditiveExpression AdditiveExpression_466_Var = (AdditiveExpression)Expr_465_list.get(0);
		Assert.assertNotNull(AdditiveExpression_466_Var);
		final EList<? extends EObject> Expr_466_list = AdditiveExpression_466_Var.getExpr();
		Assert.assertNotNull(Expr_466_list);
		Assert.assertEquals(1, Expr_466_list.size());
		final MultiplicativeExpression MultiplicativeExpression_467_Var = (MultiplicativeExpression)Expr_466_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_467_Var);
		final EList<? extends EObject> Expr_467_list = MultiplicativeExpression_467_Var.getExpr();
		Assert.assertNotNull(Expr_467_list);
		Assert.assertEquals(1, Expr_467_list.size());
		final CastExpression CastExpression_468_Var = (CastExpression)Expr_467_list.get(0);
		Assert.assertNotNull(CastExpression_468_Var);
		final UnaryExpression UnaryExpression_469_Var = (UnaryExpression)CastExpression_468_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_469_Var);
		final PostfixExpression PostfixExpression_470_Var = (PostfixExpression)UnaryExpression_469_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_470_Var);
		final EList<? extends EObject> Expr_470_list = PostfixExpression_470_Var.getExpr();
		Assert.assertNotNull(Expr_470_list);
		Assert.assertEquals(1, Expr_470_list.size());
		final PrimaryExpression PrimaryExpression_471_Var = (PrimaryExpression)Expr_470_list.get(0);
		Assert.assertNotNull(PrimaryExpression_471_Var);
		Assert.assertEquals("printf", PrimaryExpression_471_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_471_list = PostfixExpression_470_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_471_list);
		Assert.assertEquals(1, ArgumentExpressionList_471_list.size());
		final ArgumentExpressionList ArgumentExpressionList_472_Var = (ArgumentExpressionList)ArgumentExpressionList_471_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_472_Var);
		final EList<? extends EObject> Expr_472_list = ArgumentExpressionList_472_Var.getExpr();
		Assert.assertNotNull(Expr_472_list);
		Assert.assertEquals(2, Expr_472_list.size());
		final AssignmentExpression AssignmentExpression_473_Var = (AssignmentExpression)Expr_472_list.get(0);
		Assert.assertNotNull(AssignmentExpression_473_Var);
		final ConditionalExpression ConditionalExpression_474_Var = (ConditionalExpression)AssignmentExpression_473_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_474_Var);
		final LogicalOrExpression LogicalOrExpression_475_Var = (LogicalOrExpression)ConditionalExpression_474_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_475_Var);
		final EList<? extends EObject> Expr_475_list = LogicalOrExpression_475_Var.getExpr();
		Assert.assertNotNull(Expr_475_list);
		Assert.assertEquals(1, Expr_475_list.size());
		final LogicalAndExpression LogicalAndExpression_476_Var = (LogicalAndExpression)Expr_475_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_476_Var);
		final EList<? extends EObject> Expr_476_list = LogicalAndExpression_476_Var.getExpr();
		Assert.assertNotNull(Expr_476_list);
		Assert.assertEquals(1, Expr_476_list.size());
		final InclusiveOrExpression InclusiveOrExpression_477_Var = (InclusiveOrExpression)Expr_476_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_477_Var);
		final EList<? extends EObject> Expr_477_list = InclusiveOrExpression_477_Var.getExpr();
		Assert.assertNotNull(Expr_477_list);
		Assert.assertEquals(1, Expr_477_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_478_Var = (ExclusiveOrExpression)Expr_477_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_478_Var);
		final EList<? extends EObject> Expr_478_list = ExclusiveOrExpression_478_Var.getExpr();
		Assert.assertNotNull(Expr_478_list);
		Assert.assertEquals(1, Expr_478_list.size());
		final AndExpression AndExpression_479_Var = (AndExpression)Expr_478_list.get(0);
		Assert.assertNotNull(AndExpression_479_Var);
		final EList<? extends EObject> Expr_479_list = AndExpression_479_Var.getExpr();
		Assert.assertNotNull(Expr_479_list);
		Assert.assertEquals(1, Expr_479_list.size());
		final EqualityExpression EqualityExpression_480_Var = (EqualityExpression)Expr_479_list.get(0);
		Assert.assertNotNull(EqualityExpression_480_Var);
		final EList<? extends EObject> Expr_480_list = EqualityExpression_480_Var.getExpr();
		Assert.assertNotNull(Expr_480_list);
		Assert.assertEquals(1, Expr_480_list.size());
		final RelationalExpression RelationalExpression_481_Var = (RelationalExpression)Expr_480_list.get(0);
		Assert.assertNotNull(RelationalExpression_481_Var);
		final EList<? extends EObject> Expr_481_list = RelationalExpression_481_Var.getExpr();
		Assert.assertNotNull(Expr_481_list);
		Assert.assertEquals(1, Expr_481_list.size());
		final ShiftExpression ShiftExpression_482_Var = (ShiftExpression)Expr_481_list.get(0);
		Assert.assertNotNull(ShiftExpression_482_Var);
		final EList<? extends EObject> Expr_482_list = ShiftExpression_482_Var.getExpr();
		Assert.assertNotNull(Expr_482_list);
		Assert.assertEquals(1, Expr_482_list.size());
		final AdditiveExpression AdditiveExpression_483_Var = (AdditiveExpression)Expr_482_list.get(0);
		Assert.assertNotNull(AdditiveExpression_483_Var);
		final EList<? extends EObject> Expr_483_list = AdditiveExpression_483_Var.getExpr();
		Assert.assertNotNull(Expr_483_list);
		Assert.assertEquals(1, Expr_483_list.size());
		final MultiplicativeExpression MultiplicativeExpression_484_Var = (MultiplicativeExpression)Expr_483_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_484_Var);
		final EList<? extends EObject> Expr_484_list = MultiplicativeExpression_484_Var.getExpr();
		Assert.assertNotNull(Expr_484_list);
		Assert.assertEquals(1, Expr_484_list.size());
		final CastExpression CastExpression_485_Var = (CastExpression)Expr_484_list.get(0);
		Assert.assertNotNull(CastExpression_485_Var);
		final UnaryExpression UnaryExpression_486_Var = (UnaryExpression)CastExpression_485_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_486_Var);
		final PostfixExpression PostfixExpression_487_Var = (PostfixExpression)UnaryExpression_486_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_487_Var);
		final EList<? extends EObject> Expr_487_list = PostfixExpression_487_Var.getExpr();
		Assert.assertNotNull(Expr_487_list);
		Assert.assertEquals(1, Expr_487_list.size());
		final PrimaryExpression PrimaryExpression_488_Var = (PrimaryExpression)Expr_487_list.get(0);
		Assert.assertNotNull(PrimaryExpression_488_Var);
		final Constant Constant_489_Var = (Constant)PrimaryExpression_488_Var.getConst();
		Assert.assertNotNull(Constant_489_Var);
		Assert.assertEquals("\"joe.name=%s\\n\"", Constant_489_Var.getStr());
		final AssignmentExpression AssignmentExpression_490_Var = (AssignmentExpression)Expr_472_list.get(1);
		Assert.assertNotNull(AssignmentExpression_490_Var);
		final ConditionalExpression ConditionalExpression_491_Var = (ConditionalExpression)AssignmentExpression_490_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_491_Var);
		final LogicalOrExpression LogicalOrExpression_492_Var = (LogicalOrExpression)ConditionalExpression_491_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_492_Var);
		final EList<? extends EObject> Expr_492_list = LogicalOrExpression_492_Var.getExpr();
		Assert.assertNotNull(Expr_492_list);
		Assert.assertEquals(1, Expr_492_list.size());
		final LogicalAndExpression LogicalAndExpression_493_Var = (LogicalAndExpression)Expr_492_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_493_Var);
		final EList<? extends EObject> Expr_493_list = LogicalAndExpression_493_Var.getExpr();
		Assert.assertNotNull(Expr_493_list);
		Assert.assertEquals(1, Expr_493_list.size());
		final InclusiveOrExpression InclusiveOrExpression_494_Var = (InclusiveOrExpression)Expr_493_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_494_Var);
		final EList<? extends EObject> Expr_494_list = InclusiveOrExpression_494_Var.getExpr();
		Assert.assertNotNull(Expr_494_list);
		Assert.assertEquals(1, Expr_494_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_495_Var = (ExclusiveOrExpression)Expr_494_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_495_Var);
		final EList<? extends EObject> Expr_495_list = ExclusiveOrExpression_495_Var.getExpr();
		Assert.assertNotNull(Expr_495_list);
		Assert.assertEquals(1, Expr_495_list.size());
		final AndExpression AndExpression_496_Var = (AndExpression)Expr_495_list.get(0);
		Assert.assertNotNull(AndExpression_496_Var);
		final EList<? extends EObject> Expr_496_list = AndExpression_496_Var.getExpr();
		Assert.assertNotNull(Expr_496_list);
		Assert.assertEquals(1, Expr_496_list.size());
		final EqualityExpression EqualityExpression_497_Var = (EqualityExpression)Expr_496_list.get(0);
		Assert.assertNotNull(EqualityExpression_497_Var);
		final EList<? extends EObject> Expr_497_list = EqualityExpression_497_Var.getExpr();
		Assert.assertNotNull(Expr_497_list);
		Assert.assertEquals(1, Expr_497_list.size());
		final RelationalExpression RelationalExpression_498_Var = (RelationalExpression)Expr_497_list.get(0);
		Assert.assertNotNull(RelationalExpression_498_Var);
		final EList<? extends EObject> Expr_498_list = RelationalExpression_498_Var.getExpr();
		Assert.assertNotNull(Expr_498_list);
		Assert.assertEquals(1, Expr_498_list.size());
		final ShiftExpression ShiftExpression_499_Var = (ShiftExpression)Expr_498_list.get(0);
		Assert.assertNotNull(ShiftExpression_499_Var);
		final EList<? extends EObject> Expr_499_list = ShiftExpression_499_Var.getExpr();
		Assert.assertNotNull(Expr_499_list);
		Assert.assertEquals(1, Expr_499_list.size());
		final AdditiveExpression AdditiveExpression_500_Var = (AdditiveExpression)Expr_499_list.get(0);
		Assert.assertNotNull(AdditiveExpression_500_Var);
		final EList<? extends EObject> Expr_500_list = AdditiveExpression_500_Var.getExpr();
		Assert.assertNotNull(Expr_500_list);
		Assert.assertEquals(1, Expr_500_list.size());
		final MultiplicativeExpression MultiplicativeExpression_501_Var = (MultiplicativeExpression)Expr_500_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_501_Var);
		final EList<? extends EObject> Expr_501_list = MultiplicativeExpression_501_Var.getExpr();
		Assert.assertNotNull(Expr_501_list);
		Assert.assertEquals(1, Expr_501_list.size());
		final CastExpression CastExpression_502_Var = (CastExpression)Expr_501_list.get(0);
		Assert.assertNotNull(CastExpression_502_Var);
		final UnaryExpression UnaryExpression_503_Var = (UnaryExpression)CastExpression_502_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_503_Var);
		final PostfixExpression PostfixExpression_504_Var = (PostfixExpression)UnaryExpression_503_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_504_Var);
		final EList<? extends EObject> Expr_504_list = PostfixExpression_504_Var.getExpr();
		Assert.assertNotNull(Expr_504_list);
		Assert.assertEquals(1, Expr_504_list.size());
		final PrimaryExpression PrimaryExpression_505_Var = (PrimaryExpression)Expr_504_list.get(0);
		Assert.assertNotNull(PrimaryExpression_505_Var);
		Assert.assertEquals("joe", PrimaryExpression_505_Var.getId());
		Assert.assertEquals("[.]", PostfixExpression_504_Var.getDot().toString());
		Assert.assertEquals("[name]", PostfixExpression_504_Var.getId().toString());
		Assert.assertEquals(";", ExpressionStatement_454_Var.getSemi());
		final Statement Statement_506_Var = (Statement)Statement_108_list.get(7);
		Assert.assertNotNull(Statement_506_Var);
		final ExpressionStatement ExpressionStatement_507_Var = (ExpressionStatement)Statement_506_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_507_Var);
		final Expression Expression_508_Var = (Expression)ExpressionStatement_507_Var.getExpression();
		Assert.assertNotNull(Expression_508_Var);
		final EList<? extends EObject> ExprExpr_508_list = Expression_508_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_508_list);
		Assert.assertEquals(1, ExprExpr_508_list.size());
		final AssignmentExpression AssignmentExpression_509_Var = (AssignmentExpression)ExprExpr_508_list.get(0);
		Assert.assertNotNull(AssignmentExpression_509_Var);
		final ConditionalExpression ConditionalExpression_510_Var = (ConditionalExpression)AssignmentExpression_509_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_510_Var);
		final LogicalOrExpression LogicalOrExpression_511_Var = (LogicalOrExpression)ConditionalExpression_510_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_511_Var);
		final EList<? extends EObject> Expr_511_list = LogicalOrExpression_511_Var.getExpr();
		Assert.assertNotNull(Expr_511_list);
		Assert.assertEquals(1, Expr_511_list.size());
		final LogicalAndExpression LogicalAndExpression_512_Var = (LogicalAndExpression)Expr_511_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_512_Var);
		final EList<? extends EObject> Expr_512_list = LogicalAndExpression_512_Var.getExpr();
		Assert.assertNotNull(Expr_512_list);
		Assert.assertEquals(1, Expr_512_list.size());
		final InclusiveOrExpression InclusiveOrExpression_513_Var = (InclusiveOrExpression)Expr_512_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_513_Var);
		final EList<? extends EObject> Expr_513_list = InclusiveOrExpression_513_Var.getExpr();
		Assert.assertNotNull(Expr_513_list);
		Assert.assertEquals(1, Expr_513_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_514_Var = (ExclusiveOrExpression)Expr_513_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_514_Var);
		final EList<? extends EObject> Expr_514_list = ExclusiveOrExpression_514_Var.getExpr();
		Assert.assertNotNull(Expr_514_list);
		Assert.assertEquals(1, Expr_514_list.size());
		final AndExpression AndExpression_515_Var = (AndExpression)Expr_514_list.get(0);
		Assert.assertNotNull(AndExpression_515_Var);
		final EList<? extends EObject> Expr_515_list = AndExpression_515_Var.getExpr();
		Assert.assertNotNull(Expr_515_list);
		Assert.assertEquals(1, Expr_515_list.size());
		final EqualityExpression EqualityExpression_516_Var = (EqualityExpression)Expr_515_list.get(0);
		Assert.assertNotNull(EqualityExpression_516_Var);
		final EList<? extends EObject> Expr_516_list = EqualityExpression_516_Var.getExpr();
		Assert.assertNotNull(Expr_516_list);
		Assert.assertEquals(1, Expr_516_list.size());
		final RelationalExpression RelationalExpression_517_Var = (RelationalExpression)Expr_516_list.get(0);
		Assert.assertNotNull(RelationalExpression_517_Var);
		final EList<? extends EObject> Expr_517_list = RelationalExpression_517_Var.getExpr();
		Assert.assertNotNull(Expr_517_list);
		Assert.assertEquals(1, Expr_517_list.size());
		final ShiftExpression ShiftExpression_518_Var = (ShiftExpression)Expr_517_list.get(0);
		Assert.assertNotNull(ShiftExpression_518_Var);
		final EList<? extends EObject> Expr_518_list = ShiftExpression_518_Var.getExpr();
		Assert.assertNotNull(Expr_518_list);
		Assert.assertEquals(1, Expr_518_list.size());
		final AdditiveExpression AdditiveExpression_519_Var = (AdditiveExpression)Expr_518_list.get(0);
		Assert.assertNotNull(AdditiveExpression_519_Var);
		final EList<? extends EObject> Expr_519_list = AdditiveExpression_519_Var.getExpr();
		Assert.assertNotNull(Expr_519_list);
		Assert.assertEquals(1, Expr_519_list.size());
		final MultiplicativeExpression MultiplicativeExpression_520_Var = (MultiplicativeExpression)Expr_519_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_520_Var);
		final EList<? extends EObject> Expr_520_list = MultiplicativeExpression_520_Var.getExpr();
		Assert.assertNotNull(Expr_520_list);
		Assert.assertEquals(1, Expr_520_list.size());
		final CastExpression CastExpression_521_Var = (CastExpression)Expr_520_list.get(0);
		Assert.assertNotNull(CastExpression_521_Var);
		final UnaryExpression UnaryExpression_522_Var = (UnaryExpression)CastExpression_521_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_522_Var);
		final PostfixExpression PostfixExpression_523_Var = (PostfixExpression)UnaryExpression_522_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_523_Var);
		final EList<? extends EObject> Expr_523_list = PostfixExpression_523_Var.getExpr();
		Assert.assertNotNull(Expr_523_list);
		Assert.assertEquals(1, Expr_523_list.size());
		final PrimaryExpression PrimaryExpression_524_Var = (PrimaryExpression)Expr_523_list.get(0);
		Assert.assertNotNull(PrimaryExpression_524_Var);
		Assert.assertEquals("printf", PrimaryExpression_524_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_524_list = PostfixExpression_523_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_524_list);
		Assert.assertEquals(1, ArgumentExpressionList_524_list.size());
		final ArgumentExpressionList ArgumentExpressionList_525_Var = (ArgumentExpressionList)ArgumentExpressionList_524_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_525_Var);
		final EList<? extends EObject> Expr_525_list = ArgumentExpressionList_525_Var.getExpr();
		Assert.assertNotNull(Expr_525_list);
		Assert.assertEquals(2, Expr_525_list.size());
		final AssignmentExpression AssignmentExpression_526_Var = (AssignmentExpression)Expr_525_list.get(0);
		Assert.assertNotNull(AssignmentExpression_526_Var);
		final ConditionalExpression ConditionalExpression_527_Var = (ConditionalExpression)AssignmentExpression_526_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_527_Var);
		final LogicalOrExpression LogicalOrExpression_528_Var = (LogicalOrExpression)ConditionalExpression_527_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_528_Var);
		final EList<? extends EObject> Expr_528_list = LogicalOrExpression_528_Var.getExpr();
		Assert.assertNotNull(Expr_528_list);
		Assert.assertEquals(1, Expr_528_list.size());
		final LogicalAndExpression LogicalAndExpression_529_Var = (LogicalAndExpression)Expr_528_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_529_Var);
		final EList<? extends EObject> Expr_529_list = LogicalAndExpression_529_Var.getExpr();
		Assert.assertNotNull(Expr_529_list);
		Assert.assertEquals(1, Expr_529_list.size());
		final InclusiveOrExpression InclusiveOrExpression_530_Var = (InclusiveOrExpression)Expr_529_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_530_Var);
		final EList<? extends EObject> Expr_530_list = InclusiveOrExpression_530_Var.getExpr();
		Assert.assertNotNull(Expr_530_list);
		Assert.assertEquals(1, Expr_530_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_531_Var = (ExclusiveOrExpression)Expr_530_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_531_Var);
		final EList<? extends EObject> Expr_531_list = ExclusiveOrExpression_531_Var.getExpr();
		Assert.assertNotNull(Expr_531_list);
		Assert.assertEquals(1, Expr_531_list.size());
		final AndExpression AndExpression_532_Var = (AndExpression)Expr_531_list.get(0);
		Assert.assertNotNull(AndExpression_532_Var);
		final EList<? extends EObject> Expr_532_list = AndExpression_532_Var.getExpr();
		Assert.assertNotNull(Expr_532_list);
		Assert.assertEquals(1, Expr_532_list.size());
		final EqualityExpression EqualityExpression_533_Var = (EqualityExpression)Expr_532_list.get(0);
		Assert.assertNotNull(EqualityExpression_533_Var);
		final EList<? extends EObject> Expr_533_list = EqualityExpression_533_Var.getExpr();
		Assert.assertNotNull(Expr_533_list);
		Assert.assertEquals(1, Expr_533_list.size());
		final RelationalExpression RelationalExpression_534_Var = (RelationalExpression)Expr_533_list.get(0);
		Assert.assertNotNull(RelationalExpression_534_Var);
		final EList<? extends EObject> Expr_534_list = RelationalExpression_534_Var.getExpr();
		Assert.assertNotNull(Expr_534_list);
		Assert.assertEquals(1, Expr_534_list.size());
		final ShiftExpression ShiftExpression_535_Var = (ShiftExpression)Expr_534_list.get(0);
		Assert.assertNotNull(ShiftExpression_535_Var);
		final EList<? extends EObject> Expr_535_list = ShiftExpression_535_Var.getExpr();
		Assert.assertNotNull(Expr_535_list);
		Assert.assertEquals(1, Expr_535_list.size());
		final AdditiveExpression AdditiveExpression_536_Var = (AdditiveExpression)Expr_535_list.get(0);
		Assert.assertNotNull(AdditiveExpression_536_Var);
		final EList<? extends EObject> Expr_536_list = AdditiveExpression_536_Var.getExpr();
		Assert.assertNotNull(Expr_536_list);
		Assert.assertEquals(1, Expr_536_list.size());
		final MultiplicativeExpression MultiplicativeExpression_537_Var = (MultiplicativeExpression)Expr_536_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_537_Var);
		final EList<? extends EObject> Expr_537_list = MultiplicativeExpression_537_Var.getExpr();
		Assert.assertNotNull(Expr_537_list);
		Assert.assertEquals(1, Expr_537_list.size());
		final CastExpression CastExpression_538_Var = (CastExpression)Expr_537_list.get(0);
		Assert.assertNotNull(CastExpression_538_Var);
		final UnaryExpression UnaryExpression_539_Var = (UnaryExpression)CastExpression_538_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_539_Var);
		final PostfixExpression PostfixExpression_540_Var = (PostfixExpression)UnaryExpression_539_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_540_Var);
		final EList<? extends EObject> Expr_540_list = PostfixExpression_540_Var.getExpr();
		Assert.assertNotNull(Expr_540_list);
		Assert.assertEquals(1, Expr_540_list.size());
		final PrimaryExpression PrimaryExpression_541_Var = (PrimaryExpression)Expr_540_list.get(0);
		Assert.assertNotNull(PrimaryExpression_541_Var);
		final Constant Constant_542_Var = (Constant)PrimaryExpression_541_Var.getConst();
		Assert.assertNotNull(Constant_542_Var);
		Assert.assertEquals("\"phil.id=%d\\n\"", Constant_542_Var.getStr());
		final AssignmentExpression AssignmentExpression_543_Var = (AssignmentExpression)Expr_525_list.get(1);
		Assert.assertNotNull(AssignmentExpression_543_Var);
		final ConditionalExpression ConditionalExpression_544_Var = (ConditionalExpression)AssignmentExpression_543_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_544_Var);
		final LogicalOrExpression LogicalOrExpression_545_Var = (LogicalOrExpression)ConditionalExpression_544_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_545_Var);
		final EList<? extends EObject> Expr_545_list = LogicalOrExpression_545_Var.getExpr();
		Assert.assertNotNull(Expr_545_list);
		Assert.assertEquals(1, Expr_545_list.size());
		final LogicalAndExpression LogicalAndExpression_546_Var = (LogicalAndExpression)Expr_545_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_546_Var);
		final EList<? extends EObject> Expr_546_list = LogicalAndExpression_546_Var.getExpr();
		Assert.assertNotNull(Expr_546_list);
		Assert.assertEquals(1, Expr_546_list.size());
		final InclusiveOrExpression InclusiveOrExpression_547_Var = (InclusiveOrExpression)Expr_546_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_547_Var);
		final EList<? extends EObject> Expr_547_list = InclusiveOrExpression_547_Var.getExpr();
		Assert.assertNotNull(Expr_547_list);
		Assert.assertEquals(1, Expr_547_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_548_Var = (ExclusiveOrExpression)Expr_547_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_548_Var);
		final EList<? extends EObject> Expr_548_list = ExclusiveOrExpression_548_Var.getExpr();
		Assert.assertNotNull(Expr_548_list);
		Assert.assertEquals(1, Expr_548_list.size());
		final AndExpression AndExpression_549_Var = (AndExpression)Expr_548_list.get(0);
		Assert.assertNotNull(AndExpression_549_Var);
		final EList<? extends EObject> Expr_549_list = AndExpression_549_Var.getExpr();
		Assert.assertNotNull(Expr_549_list);
		Assert.assertEquals(1, Expr_549_list.size());
		final EqualityExpression EqualityExpression_550_Var = (EqualityExpression)Expr_549_list.get(0);
		Assert.assertNotNull(EqualityExpression_550_Var);
		final EList<? extends EObject> Expr_550_list = EqualityExpression_550_Var.getExpr();
		Assert.assertNotNull(Expr_550_list);
		Assert.assertEquals(1, Expr_550_list.size());
		final RelationalExpression RelationalExpression_551_Var = (RelationalExpression)Expr_550_list.get(0);
		Assert.assertNotNull(RelationalExpression_551_Var);
		final EList<? extends EObject> Expr_551_list = RelationalExpression_551_Var.getExpr();
		Assert.assertNotNull(Expr_551_list);
		Assert.assertEquals(1, Expr_551_list.size());
		final ShiftExpression ShiftExpression_552_Var = (ShiftExpression)Expr_551_list.get(0);
		Assert.assertNotNull(ShiftExpression_552_Var);
		final EList<? extends EObject> Expr_552_list = ShiftExpression_552_Var.getExpr();
		Assert.assertNotNull(Expr_552_list);
		Assert.assertEquals(1, Expr_552_list.size());
		final AdditiveExpression AdditiveExpression_553_Var = (AdditiveExpression)Expr_552_list.get(0);
		Assert.assertNotNull(AdditiveExpression_553_Var);
		final EList<? extends EObject> Expr_553_list = AdditiveExpression_553_Var.getExpr();
		Assert.assertNotNull(Expr_553_list);
		Assert.assertEquals(1, Expr_553_list.size());
		final MultiplicativeExpression MultiplicativeExpression_554_Var = (MultiplicativeExpression)Expr_553_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_554_Var);
		final EList<? extends EObject> Expr_554_list = MultiplicativeExpression_554_Var.getExpr();
		Assert.assertNotNull(Expr_554_list);
		Assert.assertEquals(1, Expr_554_list.size());
		final CastExpression CastExpression_555_Var = (CastExpression)Expr_554_list.get(0);
		Assert.assertNotNull(CastExpression_555_Var);
		final UnaryExpression UnaryExpression_556_Var = (UnaryExpression)CastExpression_555_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_556_Var);
		final PostfixExpression PostfixExpression_557_Var = (PostfixExpression)UnaryExpression_556_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_557_Var);
		final EList<? extends EObject> Expr_557_list = PostfixExpression_557_Var.getExpr();
		Assert.assertNotNull(Expr_557_list);
		Assert.assertEquals(1, Expr_557_list.size());
		final PrimaryExpression PrimaryExpression_558_Var = (PrimaryExpression)Expr_557_list.get(0);
		Assert.assertNotNull(PrimaryExpression_558_Var);
		Assert.assertEquals("phil", PrimaryExpression_558_Var.getId());
		Assert.assertEquals("[.]", PostfixExpression_557_Var.getDot().toString());
		Assert.assertEquals("[id]", PostfixExpression_557_Var.getId().toString());
		Assert.assertEquals(";", ExpressionStatement_507_Var.getSemi());
		final Statement Statement_559_Var = (Statement)Statement_108_list.get(8);
		Assert.assertNotNull(Statement_559_Var);
		final ExpressionStatement ExpressionStatement_560_Var = (ExpressionStatement)Statement_559_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_560_Var);
		final Expression Expression_561_Var = (Expression)ExpressionStatement_560_Var.getExpression();
		Assert.assertNotNull(Expression_561_Var);
		final EList<? extends EObject> ExprExpr_561_list = Expression_561_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_561_list);
		Assert.assertEquals(1, ExprExpr_561_list.size());
		final AssignmentExpression AssignmentExpression_562_Var = (AssignmentExpression)ExprExpr_561_list.get(0);
		Assert.assertNotNull(AssignmentExpression_562_Var);
		final ConditionalExpression ConditionalExpression_563_Var = (ConditionalExpression)AssignmentExpression_562_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_563_Var);
		final LogicalOrExpression LogicalOrExpression_564_Var = (LogicalOrExpression)ConditionalExpression_563_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_564_Var);
		final EList<? extends EObject> Expr_564_list = LogicalOrExpression_564_Var.getExpr();
		Assert.assertNotNull(Expr_564_list);
		Assert.assertEquals(1, Expr_564_list.size());
		final LogicalAndExpression LogicalAndExpression_565_Var = (LogicalAndExpression)Expr_564_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_565_Var);
		final EList<? extends EObject> Expr_565_list = LogicalAndExpression_565_Var.getExpr();
		Assert.assertNotNull(Expr_565_list);
		Assert.assertEquals(1, Expr_565_list.size());
		final InclusiveOrExpression InclusiveOrExpression_566_Var = (InclusiveOrExpression)Expr_565_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_566_Var);
		final EList<? extends EObject> Expr_566_list = InclusiveOrExpression_566_Var.getExpr();
		Assert.assertNotNull(Expr_566_list);
		Assert.assertEquals(1, Expr_566_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_567_Var = (ExclusiveOrExpression)Expr_566_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_567_Var);
		final EList<? extends EObject> Expr_567_list = ExclusiveOrExpression_567_Var.getExpr();
		Assert.assertNotNull(Expr_567_list);
		Assert.assertEquals(1, Expr_567_list.size());
		final AndExpression AndExpression_568_Var = (AndExpression)Expr_567_list.get(0);
		Assert.assertNotNull(AndExpression_568_Var);
		final EList<? extends EObject> Expr_568_list = AndExpression_568_Var.getExpr();
		Assert.assertNotNull(Expr_568_list);
		Assert.assertEquals(1, Expr_568_list.size());
		final EqualityExpression EqualityExpression_569_Var = (EqualityExpression)Expr_568_list.get(0);
		Assert.assertNotNull(EqualityExpression_569_Var);
		final EList<? extends EObject> Expr_569_list = EqualityExpression_569_Var.getExpr();
		Assert.assertNotNull(Expr_569_list);
		Assert.assertEquals(1, Expr_569_list.size());
		final RelationalExpression RelationalExpression_570_Var = (RelationalExpression)Expr_569_list.get(0);
		Assert.assertNotNull(RelationalExpression_570_Var);
		final EList<? extends EObject> Expr_570_list = RelationalExpression_570_Var.getExpr();
		Assert.assertNotNull(Expr_570_list);
		Assert.assertEquals(1, Expr_570_list.size());
		final ShiftExpression ShiftExpression_571_Var = (ShiftExpression)Expr_570_list.get(0);
		Assert.assertNotNull(ShiftExpression_571_Var);
		final EList<? extends EObject> Expr_571_list = ShiftExpression_571_Var.getExpr();
		Assert.assertNotNull(Expr_571_list);
		Assert.assertEquals(1, Expr_571_list.size());
		final AdditiveExpression AdditiveExpression_572_Var = (AdditiveExpression)Expr_571_list.get(0);
		Assert.assertNotNull(AdditiveExpression_572_Var);
		final EList<? extends EObject> Expr_572_list = AdditiveExpression_572_Var.getExpr();
		Assert.assertNotNull(Expr_572_list);
		Assert.assertEquals(1, Expr_572_list.size());
		final MultiplicativeExpression MultiplicativeExpression_573_Var = (MultiplicativeExpression)Expr_572_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_573_Var);
		final EList<? extends EObject> Expr_573_list = MultiplicativeExpression_573_Var.getExpr();
		Assert.assertNotNull(Expr_573_list);
		Assert.assertEquals(1, Expr_573_list.size());
		final CastExpression CastExpression_574_Var = (CastExpression)Expr_573_list.get(0);
		Assert.assertNotNull(CastExpression_574_Var);
		final UnaryExpression UnaryExpression_575_Var = (UnaryExpression)CastExpression_574_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_575_Var);
		final PostfixExpression PostfixExpression_576_Var = (PostfixExpression)UnaryExpression_575_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_576_Var);
		final EList<? extends EObject> Expr_576_list = PostfixExpression_576_Var.getExpr();
		Assert.assertNotNull(Expr_576_list);
		Assert.assertEquals(1, Expr_576_list.size());
		final PrimaryExpression PrimaryExpression_577_Var = (PrimaryExpression)Expr_576_list.get(0);
		Assert.assertNotNull(PrimaryExpression_577_Var);
		Assert.assertEquals("printf", PrimaryExpression_577_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_577_list = PostfixExpression_576_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_577_list);
		Assert.assertEquals(1, ArgumentExpressionList_577_list.size());
		final ArgumentExpressionList ArgumentExpressionList_578_Var = (ArgumentExpressionList)ArgumentExpressionList_577_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_578_Var);
		final EList<? extends EObject> Expr_578_list = ArgumentExpressionList_578_Var.getExpr();
		Assert.assertNotNull(Expr_578_list);
		Assert.assertEquals(2, Expr_578_list.size());
		final AssignmentExpression AssignmentExpression_579_Var = (AssignmentExpression)Expr_578_list.get(0);
		Assert.assertNotNull(AssignmentExpression_579_Var);
		final ConditionalExpression ConditionalExpression_580_Var = (ConditionalExpression)AssignmentExpression_579_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_580_Var);
		final LogicalOrExpression LogicalOrExpression_581_Var = (LogicalOrExpression)ConditionalExpression_580_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_581_Var);
		final EList<? extends EObject> Expr_581_list = LogicalOrExpression_581_Var.getExpr();
		Assert.assertNotNull(Expr_581_list);
		Assert.assertEquals(1, Expr_581_list.size());
		final LogicalAndExpression LogicalAndExpression_582_Var = (LogicalAndExpression)Expr_581_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_582_Var);
		final EList<? extends EObject> Expr_582_list = LogicalAndExpression_582_Var.getExpr();
		Assert.assertNotNull(Expr_582_list);
		Assert.assertEquals(1, Expr_582_list.size());
		final InclusiveOrExpression InclusiveOrExpression_583_Var = (InclusiveOrExpression)Expr_582_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_583_Var);
		final EList<? extends EObject> Expr_583_list = InclusiveOrExpression_583_Var.getExpr();
		Assert.assertNotNull(Expr_583_list);
		Assert.assertEquals(1, Expr_583_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_584_Var = (ExclusiveOrExpression)Expr_583_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_584_Var);
		final EList<? extends EObject> Expr_584_list = ExclusiveOrExpression_584_Var.getExpr();
		Assert.assertNotNull(Expr_584_list);
		Assert.assertEquals(1, Expr_584_list.size());
		final AndExpression AndExpression_585_Var = (AndExpression)Expr_584_list.get(0);
		Assert.assertNotNull(AndExpression_585_Var);
		final EList<? extends EObject> Expr_585_list = AndExpression_585_Var.getExpr();
		Assert.assertNotNull(Expr_585_list);
		Assert.assertEquals(1, Expr_585_list.size());
		final EqualityExpression EqualityExpression_586_Var = (EqualityExpression)Expr_585_list.get(0);
		Assert.assertNotNull(EqualityExpression_586_Var);
		final EList<? extends EObject> Expr_586_list = EqualityExpression_586_Var.getExpr();
		Assert.assertNotNull(Expr_586_list);
		Assert.assertEquals(1, Expr_586_list.size());
		final RelationalExpression RelationalExpression_587_Var = (RelationalExpression)Expr_586_list.get(0);
		Assert.assertNotNull(RelationalExpression_587_Var);
		final EList<? extends EObject> Expr_587_list = RelationalExpression_587_Var.getExpr();
		Assert.assertNotNull(Expr_587_list);
		Assert.assertEquals(1, Expr_587_list.size());
		final ShiftExpression ShiftExpression_588_Var = (ShiftExpression)Expr_587_list.get(0);
		Assert.assertNotNull(ShiftExpression_588_Var);
		final EList<? extends EObject> Expr_588_list = ShiftExpression_588_Var.getExpr();
		Assert.assertNotNull(Expr_588_list);
		Assert.assertEquals(1, Expr_588_list.size());
		final AdditiveExpression AdditiveExpression_589_Var = (AdditiveExpression)Expr_588_list.get(0);
		Assert.assertNotNull(AdditiveExpression_589_Var);
		final EList<? extends EObject> Expr_589_list = AdditiveExpression_589_Var.getExpr();
		Assert.assertNotNull(Expr_589_list);
		Assert.assertEquals(1, Expr_589_list.size());
		final MultiplicativeExpression MultiplicativeExpression_590_Var = (MultiplicativeExpression)Expr_589_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_590_Var);
		final EList<? extends EObject> Expr_590_list = MultiplicativeExpression_590_Var.getExpr();
		Assert.assertNotNull(Expr_590_list);
		Assert.assertEquals(1, Expr_590_list.size());
		final CastExpression CastExpression_591_Var = (CastExpression)Expr_590_list.get(0);
		Assert.assertNotNull(CastExpression_591_Var);
		final UnaryExpression UnaryExpression_592_Var = (UnaryExpression)CastExpression_591_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_592_Var);
		final PostfixExpression PostfixExpression_593_Var = (PostfixExpression)UnaryExpression_592_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_593_Var);
		final EList<? extends EObject> Expr_593_list = PostfixExpression_593_Var.getExpr();
		Assert.assertNotNull(Expr_593_list);
		Assert.assertEquals(1, Expr_593_list.size());
		final PrimaryExpression PrimaryExpression_594_Var = (PrimaryExpression)Expr_593_list.get(0);
		Assert.assertNotNull(PrimaryExpression_594_Var);
		final Constant Constant_595_Var = (Constant)PrimaryExpression_594_Var.getConst();
		Assert.assertNotNull(Constant_595_Var);
		Assert.assertEquals("\"phil.name=%s\\n\"", Constant_595_Var.getStr());
		final AssignmentExpression AssignmentExpression_596_Var = (AssignmentExpression)Expr_578_list.get(1);
		Assert.assertNotNull(AssignmentExpression_596_Var);
		final ConditionalExpression ConditionalExpression_597_Var = (ConditionalExpression)AssignmentExpression_596_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_597_Var);
		final LogicalOrExpression LogicalOrExpression_598_Var = (LogicalOrExpression)ConditionalExpression_597_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_598_Var);
		final EList<? extends EObject> Expr_598_list = LogicalOrExpression_598_Var.getExpr();
		Assert.assertNotNull(Expr_598_list);
		Assert.assertEquals(1, Expr_598_list.size());
		final LogicalAndExpression LogicalAndExpression_599_Var = (LogicalAndExpression)Expr_598_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_599_Var);
		final EList<? extends EObject> Expr_599_list = LogicalAndExpression_599_Var.getExpr();
		Assert.assertNotNull(Expr_599_list);
		Assert.assertEquals(1, Expr_599_list.size());
		final InclusiveOrExpression InclusiveOrExpression_600_Var = (InclusiveOrExpression)Expr_599_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_600_Var);
		final EList<? extends EObject> Expr_600_list = InclusiveOrExpression_600_Var.getExpr();
		Assert.assertNotNull(Expr_600_list);
		Assert.assertEquals(1, Expr_600_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_601_Var = (ExclusiveOrExpression)Expr_600_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_601_Var);
		final EList<? extends EObject> Expr_601_list = ExclusiveOrExpression_601_Var.getExpr();
		Assert.assertNotNull(Expr_601_list);
		Assert.assertEquals(1, Expr_601_list.size());
		final AndExpression AndExpression_602_Var = (AndExpression)Expr_601_list.get(0);
		Assert.assertNotNull(AndExpression_602_Var);
		final EList<? extends EObject> Expr_602_list = AndExpression_602_Var.getExpr();
		Assert.assertNotNull(Expr_602_list);
		Assert.assertEquals(1, Expr_602_list.size());
		final EqualityExpression EqualityExpression_603_Var = (EqualityExpression)Expr_602_list.get(0);
		Assert.assertNotNull(EqualityExpression_603_Var);
		final EList<? extends EObject> Expr_603_list = EqualityExpression_603_Var.getExpr();
		Assert.assertNotNull(Expr_603_list);
		Assert.assertEquals(1, Expr_603_list.size());
		final RelationalExpression RelationalExpression_604_Var = (RelationalExpression)Expr_603_list.get(0);
		Assert.assertNotNull(RelationalExpression_604_Var);
		final EList<? extends EObject> Expr_604_list = RelationalExpression_604_Var.getExpr();
		Assert.assertNotNull(Expr_604_list);
		Assert.assertEquals(1, Expr_604_list.size());
		final ShiftExpression ShiftExpression_605_Var = (ShiftExpression)Expr_604_list.get(0);
		Assert.assertNotNull(ShiftExpression_605_Var);
		final EList<? extends EObject> Expr_605_list = ShiftExpression_605_Var.getExpr();
		Assert.assertNotNull(Expr_605_list);
		Assert.assertEquals(1, Expr_605_list.size());
		final AdditiveExpression AdditiveExpression_606_Var = (AdditiveExpression)Expr_605_list.get(0);
		Assert.assertNotNull(AdditiveExpression_606_Var);
		final EList<? extends EObject> Expr_606_list = AdditiveExpression_606_Var.getExpr();
		Assert.assertNotNull(Expr_606_list);
		Assert.assertEquals(1, Expr_606_list.size());
		final MultiplicativeExpression MultiplicativeExpression_607_Var = (MultiplicativeExpression)Expr_606_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_607_Var);
		final EList<? extends EObject> Expr_607_list = MultiplicativeExpression_607_Var.getExpr();
		Assert.assertNotNull(Expr_607_list);
		Assert.assertEquals(1, Expr_607_list.size());
		final CastExpression CastExpression_608_Var = (CastExpression)Expr_607_list.get(0);
		Assert.assertNotNull(CastExpression_608_Var);
		final UnaryExpression UnaryExpression_609_Var = (UnaryExpression)CastExpression_608_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_609_Var);
		final PostfixExpression PostfixExpression_610_Var = (PostfixExpression)UnaryExpression_609_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_610_Var);
		final EList<? extends EObject> Expr_610_list = PostfixExpression_610_Var.getExpr();
		Assert.assertNotNull(Expr_610_list);
		Assert.assertEquals(1, Expr_610_list.size());
		final PrimaryExpression PrimaryExpression_611_Var = (PrimaryExpression)Expr_610_list.get(0);
		Assert.assertNotNull(PrimaryExpression_611_Var);
		Assert.assertEquals("phil", PrimaryExpression_611_Var.getId());
		Assert.assertEquals("[.]", PostfixExpression_610_Var.getDot().toString());
		Assert.assertEquals("[name]", PostfixExpression_610_Var.getId().toString());
		Assert.assertEquals(";", ExpressionStatement_560_Var.getSemi());
		final Statement Statement_612_Var = (Statement)Statement_108_list.get(9);
		Assert.assertNotNull(Statement_612_Var);
		final JumpStatement JumpStatement_613_Var = (JumpStatement)Statement_612_Var.getStmt();
		Assert.assertNotNull(JumpStatement_613_Var);
		final Expression Expression_614_Var = (Expression)JumpStatement_613_Var.getExpr();
		Assert.assertNotNull(Expression_614_Var);
		final EList<? extends EObject> ExprExpr_614_list = Expression_614_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_614_list);
		Assert.assertEquals(1, ExprExpr_614_list.size());
		final AssignmentExpression AssignmentExpression_615_Var = (AssignmentExpression)ExprExpr_614_list.get(0);
		Assert.assertNotNull(AssignmentExpression_615_Var);
		final ConditionalExpression ConditionalExpression_616_Var = (ConditionalExpression)AssignmentExpression_615_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_616_Var);
		final LogicalOrExpression LogicalOrExpression_617_Var = (LogicalOrExpression)ConditionalExpression_616_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_617_Var);
		final EList<? extends EObject> Expr_617_list = LogicalOrExpression_617_Var.getExpr();
		Assert.assertNotNull(Expr_617_list);
		Assert.assertEquals(1, Expr_617_list.size());
		final LogicalAndExpression LogicalAndExpression_618_Var = (LogicalAndExpression)Expr_617_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_618_Var);
		final EList<? extends EObject> Expr_618_list = LogicalAndExpression_618_Var.getExpr();
		Assert.assertNotNull(Expr_618_list);
		Assert.assertEquals(1, Expr_618_list.size());
		final InclusiveOrExpression InclusiveOrExpression_619_Var = (InclusiveOrExpression)Expr_618_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_619_Var);
		final EList<? extends EObject> Expr_619_list = InclusiveOrExpression_619_Var.getExpr();
		Assert.assertNotNull(Expr_619_list);
		Assert.assertEquals(1, Expr_619_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_620_Var = (ExclusiveOrExpression)Expr_619_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_620_Var);
		final EList<? extends EObject> Expr_620_list = ExclusiveOrExpression_620_Var.getExpr();
		Assert.assertNotNull(Expr_620_list);
		Assert.assertEquals(1, Expr_620_list.size());
		final AndExpression AndExpression_621_Var = (AndExpression)Expr_620_list.get(0);
		Assert.assertNotNull(AndExpression_621_Var);
		final EList<? extends EObject> Expr_621_list = AndExpression_621_Var.getExpr();
		Assert.assertNotNull(Expr_621_list);
		Assert.assertEquals(1, Expr_621_list.size());
		final EqualityExpression EqualityExpression_622_Var = (EqualityExpression)Expr_621_list.get(0);
		Assert.assertNotNull(EqualityExpression_622_Var);
		final EList<? extends EObject> Expr_622_list = EqualityExpression_622_Var.getExpr();
		Assert.assertNotNull(Expr_622_list);
		Assert.assertEquals(1, Expr_622_list.size());
		final RelationalExpression RelationalExpression_623_Var = (RelationalExpression)Expr_622_list.get(0);
		Assert.assertNotNull(RelationalExpression_623_Var);
		final EList<? extends EObject> Expr_623_list = RelationalExpression_623_Var.getExpr();
		Assert.assertNotNull(Expr_623_list);
		Assert.assertEquals(1, Expr_623_list.size());
		final ShiftExpression ShiftExpression_624_Var = (ShiftExpression)Expr_623_list.get(0);
		Assert.assertNotNull(ShiftExpression_624_Var);
		final EList<? extends EObject> Expr_624_list = ShiftExpression_624_Var.getExpr();
		Assert.assertNotNull(Expr_624_list);
		Assert.assertEquals(1, Expr_624_list.size());
		final AdditiveExpression AdditiveExpression_625_Var = (AdditiveExpression)Expr_624_list.get(0);
		Assert.assertNotNull(AdditiveExpression_625_Var);
		final EList<? extends EObject> Expr_625_list = AdditiveExpression_625_Var.getExpr();
		Assert.assertNotNull(Expr_625_list);
		Assert.assertEquals(1, Expr_625_list.size());
		final MultiplicativeExpression MultiplicativeExpression_626_Var = (MultiplicativeExpression)Expr_625_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_626_Var);
		final EList<? extends EObject> Expr_626_list = MultiplicativeExpression_626_Var.getExpr();
		Assert.assertNotNull(Expr_626_list);
		Assert.assertEquals(1, Expr_626_list.size());
		final CastExpression CastExpression_627_Var = (CastExpression)Expr_626_list.get(0);
		Assert.assertNotNull(CastExpression_627_Var);
		final UnaryExpression UnaryExpression_628_Var = (UnaryExpression)CastExpression_627_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_628_Var);
		final PostfixExpression PostfixExpression_629_Var = (PostfixExpression)UnaryExpression_628_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_629_Var);
		final EList<? extends EObject> Expr_629_list = PostfixExpression_629_Var.getExpr();
		Assert.assertNotNull(Expr_629_list);
		Assert.assertEquals(1, Expr_629_list.size());
		final PrimaryExpression PrimaryExpression_630_Var = (PrimaryExpression)Expr_629_list.get(0);
		Assert.assertNotNull(PrimaryExpression_630_Var);
		final Constant Constant_631_Var = (Constant)PrimaryExpression_630_Var.getConst();
		Assert.assertNotNull(Constant_631_Var);
		Assert.assertEquals("0", Constant_631_Var.getDec());
		Assert.assertEquals("return", JumpStatement_613_Var.getReturn());
		Assert.assertEquals(";", JumpStatement_613_Var.getSemi());
	}


}
