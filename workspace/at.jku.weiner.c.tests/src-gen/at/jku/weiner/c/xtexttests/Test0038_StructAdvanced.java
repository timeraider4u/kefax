package at.jku.weiner.c.xtexttests;

import com.google.inject.Inject;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import org.antlr.runtime.Token;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipse.xtext.junit4.util.ParseHelper;
import org.eclipse.xtext.junit4.validation.ValidationTestHelper;
import org.eclipse.xtext.junit4.XtextRunner;
import org.eclipse.xtext.parser.antlr.ITokenDefProvider;
import org.junit.Assert;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import at.jku.weiner.c.tests.CInjectorProvider;
import at.jku.weiner.c.parser.antlr.CParser;
import at.jku.weiner.c.parser.antlr.internal.InternalCLexer;
import at.jku.weiner.c.xtexttests.LexerAndParserTest;

import at.jku.weiner.c.c.Model;
import at.jku.weiner.c.c.TranslationUnit;
import at.jku.weiner.c.c.ExternalDeclaration;
import at.jku.weiner.c.c.Declaration;
import at.jku.weiner.c.c.DeclarationSpecifiers;
import at.jku.weiner.c.c.StorageClassSpecifier;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.StructOrUnionSpecifier;
import at.jku.weiner.c.c.StructOrUnion;
import at.jku.weiner.c.c.StructDeclarationList;
import at.jku.weiner.c.c.StructDeclaration;
import at.jku.weiner.c.c.SpecifierQualifierList;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.StructDeclaratorList;
import at.jku.weiner.c.c.StructDeclarator;
import at.jku.weiner.c.c.Declarator;
import at.jku.weiner.c.c.DirectDeclarator;
import at.jku.weiner.c.c.StructDeclaration;
import at.jku.weiner.c.c.SpecifierQualifierList;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.StructDeclaratorList;
import at.jku.weiner.c.c.StructDeclarator;
import at.jku.weiner.c.c.Declarator;
import at.jku.weiner.c.c.DirectDeclarator;
import at.jku.weiner.c.c.DeclaratorSuffix;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.InitDeclaratorList;
import at.jku.weiner.c.c.InitDeclarator;
import at.jku.weiner.c.c.Declarator;
import at.jku.weiner.c.c.DirectDeclarator;
import at.jku.weiner.c.c.ExternalDeclaration;
import at.jku.weiner.c.c.Declaration;
import at.jku.weiner.c.c.DeclarationSpecifiers;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.StructOrUnionSpecifier;
import at.jku.weiner.c.c.StructOrUnion;
import at.jku.weiner.c.c.InitDeclaratorList;
import at.jku.weiner.c.c.InitDeclarator;
import at.jku.weiner.c.c.Declarator;
import at.jku.weiner.c.c.DirectDeclarator;
import at.jku.weiner.c.c.Initializer;
import at.jku.weiner.c.c.InitializerList;
import at.jku.weiner.c.c.Initializer;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.Initializer;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.ExternalDeclaration;
import at.jku.weiner.c.c.Declaration;
import at.jku.weiner.c.c.DeclarationSpecifiers;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.TypedefName;
import at.jku.weiner.c.c.InitDeclaratorList;
import at.jku.weiner.c.c.InitDeclarator;
import at.jku.weiner.c.c.Declarator;
import at.jku.weiner.c.c.DirectDeclarator;
import at.jku.weiner.c.c.Initializer;
import at.jku.weiner.c.c.InitializerList;
import at.jku.weiner.c.c.Initializer;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.Initializer;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.ExternalDeclaration;
import at.jku.weiner.c.c.FunctionDefHead;
import at.jku.weiner.c.c.DeclarationSpecifiers;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.Declarator;
import at.jku.weiner.c.c.DirectDeclarator;
import at.jku.weiner.c.c.DeclaratorSuffix;
import at.jku.weiner.c.c.DirectDeclaratorLastSuffix;
import at.jku.weiner.c.c.ParameterTypeList;
import at.jku.weiner.c.c.ParameterList;
import at.jku.weiner.c.c.ParameterDeclaration;
import at.jku.weiner.c.c.DeclarationSpecifiers;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.TypedefName;
import at.jku.weiner.c.c.Declarator;
import at.jku.weiner.c.c.DirectDeclarator;
import at.jku.weiner.c.c.Pointer;
import at.jku.weiner.c.c.FunctionDefinition;
import at.jku.weiner.c.c.BodyStatement;
import at.jku.weiner.c.c.BlockList;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.UnaryOperator;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ExternalDeclaration;
import at.jku.weiner.c.c.FunctionDefHead;
import at.jku.weiner.c.c.DeclarationSpecifiers;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.Declarator;
import at.jku.weiner.c.c.DirectDeclarator;
import at.jku.weiner.c.c.DeclaratorSuffix;
import at.jku.weiner.c.c.DirectDeclaratorLastSuffix;
import at.jku.weiner.c.c.ParameterTypeList;
import at.jku.weiner.c.c.ParameterList;
import at.jku.weiner.c.c.ParameterDeclaration;
import at.jku.weiner.c.c.DeclarationSpecifiers;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.FunctionDefinition;
import at.jku.weiner.c.c.BodyStatement;
import at.jku.weiner.c.c.BlockList;
import at.jku.weiner.c.c.Declaration;
import at.jku.weiner.c.c.DeclarationSpecifiers;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.TypedefName;
import at.jku.weiner.c.c.InitDeclaratorList;
import at.jku.weiner.c.c.InitDeclarator;
import at.jku.weiner.c.c.Declarator;
import at.jku.weiner.c.c.Pointer;
import at.jku.weiner.c.c.DirectDeclarator;
import at.jku.weiner.c.c.Initializer;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.TypeName;
import at.jku.weiner.c.c.SpecifierQualifierList;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.TypedefName;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.SelectionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.CompoundStatement;
import at.jku.weiner.c.c.BodyStatement;
import at.jku.weiner.c.c.BlockList;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.JumpStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.UnaryOperator;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.UnaryOperator;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.UnaryOperator;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.JumpStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;

@SuppressWarnings("unused")
@RunWith(XtextRunner.class)
@InjectWith(CInjectorProvider.class)
public class Test0038_StructAdvanced {

	@Inject
	private ParseHelper<Model> parseHelper;
	@Inject
	private ValidationTestHelper valHelper;
	@Inject
	private InternalCLexer lexer;
	@Inject
	private CParser parser;
	@Inject
	private ITokenDefProvider tokenDefProvider;
	
	private LexerAndParserTest testHelper;
	
	@Before
	public void initialize(){
		this.testHelper = new LexerAndParserTest(lexer, parser, tokenDefProvider);
	}
	
	private String getSourceText()
	throws Exception{
		final Path path = Paths.get("res/Test0038_StructAdvanced.c");
		final String content = new String(Files.readAllBytes(path));
		return content;
	}
	
	@Test
	public void checkLexerTokens()
	throws Exception{
		final String text = this.getSourceText();
		//System.out.println(text);
		final String[] expected = new String[] {
			"RULE_LINEDIRECTIVE",
			"RULE_NEWLINE",
			"RULE_LINEDIRECTIVE",
			"RULE_NEWLINE",
			"RULE_LINEDIRECTIVE",
			"RULE_NEWLINE",
			"RULE_NEWLINE",
			"RULE_KW_TYPEDEF",
			"RULE_WHITESPACE",
			"RULE_KW_STRUCT",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_WHITESPACE",
			"RULE_LEFTBRACE",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_KW_INT",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_KW_CHAR",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTBRACKET",
			"RULE_DECIMAL_LITERAL",
			"RULE_RIGHTBRACKET",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_RIGHTBRACE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_NEWLINE",
			"RULE_KW_STRUCT",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_WHITESPACE",
			"RULE_ASSIGN",
			"RULE_WHITESPACE",
			"RULE_LEFTBRACE",
			"RULE_HEX_LITERAL",
			"RULE_COMMA",
			"RULE_WHITESPACE",
			"RULE_STRING_LITERAL",
			"RULE_RIGHTBRACE",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_ID",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_WHITESPACE",
			"RULE_ASSIGN",
			"RULE_WHITESPACE",
			"RULE_LEFTBRACE",
			"RULE_HEX_LITERAL",
			"RULE_COMMA",
			"RULE_WHITESPACE",
			"RULE_STRING_LITERAL",
			"RULE_RIGHTBRACE",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_NEWLINE",
			"RULE_KW_VOID",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_ID",
			"RULE_WHITESPACE",
			"RULE_STAR",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_WHITESPACE",
			"RULE_LEFTBRACE",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_STRING_LITERAL",
			"RULE_COMMA",
			"RULE_WHITESPACE",
			"RULE_LEFTPAREN",
			"RULE_STAR",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_DOT",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_LINE_COMMENT",
			"RULE_NEWLINE",
			"RULE_RIGHTBRACE",
			"RULE_NEWLINE",
			"RULE_NEWLINE",
			"RULE_KW_INT",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_KW_VOID",
			"RULE_RIGHTPAREN",
			"RULE_WHITESPACE",
			"RULE_LEFTBRACE",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_WHITESPACE",
			"RULE_STAR",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_WHITESPACE",
			"RULE_ASSIGN",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_KW_SIZEOF",
			"RULE_LEFTPAREN",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_KW_IF",
			"RULE_WHITESPACE",
			"RULE_LEFTPAREN",
			"RULE_ID",
			"RULE_WHITESPACE",
			"RULE_EQUAL",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_WHITESPACE",
			"RULE_LEFTBRACE",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_STRING_LITERAL",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_KW_RETURN",
			"RULE_WHITESPACE",
			"RULE_MINUS",
			"RULE_DECIMAL_LITERAL",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_RIGHTBRACE",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_AND",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_AND",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_LINE_COMMENT",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_LINE_COMMENT",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_KW_RETURN",
			"RULE_WHITESPACE",
			"RULE_DECIMAL_LITERAL",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_RIGHTBRACE",
			"RULE_NEWLINE",
		};
		//final List<Token> actual = testHelper.getTokens(text);
		//testHelper.outputTokens(text);
		testHelper.checkTokenisation(text, expected);
	}
	
	@Test
	public void checkParserResult()
	throws Exception{

		final String text = this.getSourceText();
		final Model Model_0_Var = this.parseHelper.parse(text);
	
		this.valHelper.assertNoErrors(Model_0_Var);
		Assert.assertNotNull(Model_0_Var);
		final EList<? extends EObject> Unit_0_list = Model_0_Var.getUnit();
		Assert.assertNotNull(Unit_0_list);
		Assert.assertEquals(1, Unit_0_list.size());
		final TranslationUnit TranslationUnit_1_Var = (TranslationUnit)Unit_0_list.get(0);
		Assert.assertNotNull(TranslationUnit_1_Var);
		final EList<? extends EObject> External_1_list = TranslationUnit_1_Var.getExternal();
		Assert.assertNotNull(External_1_list);
		Assert.assertEquals(5, External_1_list.size());
		final ExternalDeclaration ExternalDeclaration_2_Var = (ExternalDeclaration)External_1_list.get(0);
		Assert.assertNotNull(ExternalDeclaration_2_Var);
		final Declaration Declaration_3_Var = (Declaration)ExternalDeclaration_2_Var.getDeclaration();
		Assert.assertNotNull(Declaration_3_Var);
		final DeclarationSpecifiers DeclarationSpecifiers_4_Var = (DeclarationSpecifiers)Declaration_3_Var.getSpecifiers();
		Assert.assertNotNull(DeclarationSpecifiers_4_Var);
		final EList<? extends EObject> DeclarationSpecifier_4_list = DeclarationSpecifiers_4_Var.getDeclarationSpecifier();
		Assert.assertNotNull(DeclarationSpecifier_4_list);
		Assert.assertEquals(2, DeclarationSpecifier_4_list.size());
		final StorageClassSpecifier StorageClassSpecifier_5_Var = (StorageClassSpecifier)DeclarationSpecifier_4_list.get(0);
		Assert.assertNotNull(StorageClassSpecifier_5_Var);
		Assert.assertEquals("typedef", StorageClassSpecifier_5_Var.getName());
		final TypeSpecifier TypeSpecifier_6_Var = (TypeSpecifier)DeclarationSpecifier_4_list.get(1);
		Assert.assertNotNull(TypeSpecifier_6_Var);
		final StructOrUnionSpecifier StructOrUnionSpecifier_7_Var = (StructOrUnionSpecifier)TypeSpecifier_6_Var.getSpecifier();
		Assert.assertNotNull(StructOrUnionSpecifier_7_Var);
		final StructOrUnion StructOrUnion_8_Var = (StructOrUnion)StructOrUnionSpecifier_7_Var.getType();
		Assert.assertNotNull(StructOrUnion_8_Var);
		Assert.assertEquals("struct", StructOrUnion_8_Var.getName());
		Assert.assertEquals("empStruct", StructOrUnionSpecifier_7_Var.getId());
		final StructDeclarationList StructDeclarationList_9_Var = (StructDeclarationList)StructOrUnionSpecifier_7_Var.getStructDeclList();
		Assert.assertNotNull(StructDeclarationList_9_Var);
		final EList<? extends EObject> StructDeclaration_9_list = StructDeclarationList_9_Var.getStructDeclaration();
		Assert.assertNotNull(StructDeclaration_9_list);
		Assert.assertEquals(2, StructDeclaration_9_list.size());
		final StructDeclaration StructDeclaration_10_Var = (StructDeclaration)StructDeclaration_9_list.get(0);
		Assert.assertNotNull(StructDeclaration_10_Var);
		final SpecifierQualifierList SpecifierQualifierList_11_Var = (SpecifierQualifierList)StructDeclaration_10_Var.getList();
		Assert.assertNotNull(SpecifierQualifierList_11_Var);
		final EList<? extends EObject> TypeSpecifier_11_list = SpecifierQualifierList_11_Var.getTypeSpecifier();
		Assert.assertNotNull(TypeSpecifier_11_list);
		Assert.assertEquals(1, TypeSpecifier_11_list.size());
		final TypeSpecifier TypeSpecifier_12_Var = (TypeSpecifier)TypeSpecifier_11_list.get(0);
		Assert.assertNotNull(TypeSpecifier_12_Var);
		Assert.assertEquals("int", TypeSpecifier_12_Var.getName());
		final StructDeclaratorList StructDeclaratorList_13_Var = (StructDeclaratorList)StructDeclaration_10_Var.getStructDeclarationList();
		Assert.assertNotNull(StructDeclaratorList_13_Var);
		final EList<? extends EObject> StructDeclarator_13_list = StructDeclaratorList_13_Var.getStructDeclarator();
		Assert.assertNotNull(StructDeclarator_13_list);
		Assert.assertEquals(1, StructDeclarator_13_list.size());
		final StructDeclarator StructDeclarator_14_Var = (StructDeclarator)StructDeclarator_13_list.get(0);
		Assert.assertNotNull(StructDeclarator_14_Var);
		final Declarator Declarator_15_Var = (Declarator)StructDeclarator_14_Var.getDeclarator();
		Assert.assertNotNull(Declarator_15_Var);
		final DirectDeclarator DirectDeclarator_16_Var = (DirectDeclarator)Declarator_15_Var.getDeclarator();
		Assert.assertNotNull(DirectDeclarator_16_Var);
		Assert.assertEquals("id", DirectDeclarator_16_Var.getId());
		final StructDeclaration StructDeclaration_17_Var = (StructDeclaration)StructDeclaration_9_list.get(1);
		Assert.assertNotNull(StructDeclaration_17_Var);
		final SpecifierQualifierList SpecifierQualifierList_18_Var = (SpecifierQualifierList)StructDeclaration_17_Var.getList();
		Assert.assertNotNull(SpecifierQualifierList_18_Var);
		final EList<? extends EObject> TypeSpecifier_18_list = SpecifierQualifierList_18_Var.getTypeSpecifier();
		Assert.assertNotNull(TypeSpecifier_18_list);
		Assert.assertEquals(1, TypeSpecifier_18_list.size());
		final TypeSpecifier TypeSpecifier_19_Var = (TypeSpecifier)TypeSpecifier_18_list.get(0);
		Assert.assertNotNull(TypeSpecifier_19_Var);
		Assert.assertEquals("char", TypeSpecifier_19_Var.getName());
		final StructDeclaratorList StructDeclaratorList_20_Var = (StructDeclaratorList)StructDeclaration_17_Var.getStructDeclarationList();
		Assert.assertNotNull(StructDeclaratorList_20_Var);
		final EList<? extends EObject> StructDeclarator_20_list = StructDeclaratorList_20_Var.getStructDeclarator();
		Assert.assertNotNull(StructDeclarator_20_list);
		Assert.assertEquals(1, StructDeclarator_20_list.size());
		final StructDeclarator StructDeclarator_21_Var = (StructDeclarator)StructDeclarator_20_list.get(0);
		Assert.assertNotNull(StructDeclarator_21_Var);
		final Declarator Declarator_22_Var = (Declarator)StructDeclarator_21_Var.getDeclarator();
		Assert.assertNotNull(Declarator_22_Var);
		final DirectDeclarator DirectDeclarator_23_Var = (DirectDeclarator)Declarator_22_Var.getDeclarator();
		Assert.assertNotNull(DirectDeclarator_23_Var);
		Assert.assertEquals("name", DirectDeclarator_23_Var.getId());
		final EList<? extends EObject> DeclaratorSuffix_23_list = DirectDeclarator_23_Var.getDeclaratorSuffix();
		Assert.assertNotNull(DeclaratorSuffix_23_list);
		Assert.assertEquals(1, DeclaratorSuffix_23_list.size());
		final DeclaratorSuffix DeclaratorSuffix_24_Var = (DeclaratorSuffix)DeclaratorSuffix_23_list.get(0);
		Assert.assertNotNull(DeclaratorSuffix_24_Var);
		final AssignmentExpression AssignmentExpression_25_Var = (AssignmentExpression)DeclaratorSuffix_24_Var.getExpr();
		Assert.assertNotNull(AssignmentExpression_25_Var);
		final ConditionalExpression ConditionalExpression_26_Var = (ConditionalExpression)AssignmentExpression_25_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_26_Var);
		final LogicalOrExpression LogicalOrExpression_27_Var = (LogicalOrExpression)ConditionalExpression_26_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_27_Var);
		final EList<? extends EObject> Expr_27_list = LogicalOrExpression_27_Var.getExpr();
		Assert.assertNotNull(Expr_27_list);
		Assert.assertEquals(1, Expr_27_list.size());
		final LogicalAndExpression LogicalAndExpression_28_Var = (LogicalAndExpression)Expr_27_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_28_Var);
		final EList<? extends EObject> Expr_28_list = LogicalAndExpression_28_Var.getExpr();
		Assert.assertNotNull(Expr_28_list);
		Assert.assertEquals(1, Expr_28_list.size());
		final InclusiveOrExpression InclusiveOrExpression_29_Var = (InclusiveOrExpression)Expr_28_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_29_Var);
		final EList<? extends EObject> Expr_29_list = InclusiveOrExpression_29_Var.getExpr();
		Assert.assertNotNull(Expr_29_list);
		Assert.assertEquals(1, Expr_29_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_30_Var = (ExclusiveOrExpression)Expr_29_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_30_Var);
		final EList<? extends EObject> Expr_30_list = ExclusiveOrExpression_30_Var.getExpr();
		Assert.assertNotNull(Expr_30_list);
		Assert.assertEquals(1, Expr_30_list.size());
		final AndExpression AndExpression_31_Var = (AndExpression)Expr_30_list.get(0);
		Assert.assertNotNull(AndExpression_31_Var);
		final EList<? extends EObject> Expr_31_list = AndExpression_31_Var.getExpr();
		Assert.assertNotNull(Expr_31_list);
		Assert.assertEquals(1, Expr_31_list.size());
		final EqualityExpression EqualityExpression_32_Var = (EqualityExpression)Expr_31_list.get(0);
		Assert.assertNotNull(EqualityExpression_32_Var);
		final EList<? extends EObject> Expr_32_list = EqualityExpression_32_Var.getExpr();
		Assert.assertNotNull(Expr_32_list);
		Assert.assertEquals(1, Expr_32_list.size());
		final RelationalExpression RelationalExpression_33_Var = (RelationalExpression)Expr_32_list.get(0);
		Assert.assertNotNull(RelationalExpression_33_Var);
		final EList<? extends EObject> Expr_33_list = RelationalExpression_33_Var.getExpr();
		Assert.assertNotNull(Expr_33_list);
		Assert.assertEquals(1, Expr_33_list.size());
		final ShiftExpression ShiftExpression_34_Var = (ShiftExpression)Expr_33_list.get(0);
		Assert.assertNotNull(ShiftExpression_34_Var);
		final EList<? extends EObject> Expr_34_list = ShiftExpression_34_Var.getExpr();
		Assert.assertNotNull(Expr_34_list);
		Assert.assertEquals(1, Expr_34_list.size());
		final AdditiveExpression AdditiveExpression_35_Var = (AdditiveExpression)Expr_34_list.get(0);
		Assert.assertNotNull(AdditiveExpression_35_Var);
		final EList<? extends EObject> Expr_35_list = AdditiveExpression_35_Var.getExpr();
		Assert.assertNotNull(Expr_35_list);
		Assert.assertEquals(1, Expr_35_list.size());
		final MultiplicativeExpression MultiplicativeExpression_36_Var = (MultiplicativeExpression)Expr_35_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_36_Var);
		final EList<? extends EObject> Expr_36_list = MultiplicativeExpression_36_Var.getExpr();
		Assert.assertNotNull(Expr_36_list);
		Assert.assertEquals(1, Expr_36_list.size());
		final CastExpression CastExpression_37_Var = (CastExpression)Expr_36_list.get(0);
		Assert.assertNotNull(CastExpression_37_Var);
		final UnaryExpression UnaryExpression_38_Var = (UnaryExpression)CastExpression_37_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_38_Var);
		final PostfixExpression PostfixExpression_39_Var = (PostfixExpression)UnaryExpression_38_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_39_Var);
		final EList<? extends EObject> Expr_39_list = PostfixExpression_39_Var.getExpr();
		Assert.assertNotNull(Expr_39_list);
		Assert.assertEquals(1, Expr_39_list.size());
		final PrimaryExpression PrimaryExpression_40_Var = (PrimaryExpression)Expr_39_list.get(0);
		Assert.assertNotNull(PrimaryExpression_40_Var);
		final Constant Constant_41_Var = (Constant)PrimaryExpression_40_Var.getConst();
		Assert.assertNotNull(Constant_41_Var);
		Assert.assertEquals("250", Constant_41_Var.getDec());
		final EList<? extends EObject> InitDeclaratorList_41_list = Declaration_3_Var.getInitDeclaratorList();
		Assert.assertNotNull(InitDeclaratorList_41_list);
		Assert.assertEquals(1, InitDeclaratorList_41_list.size());
		final InitDeclaratorList InitDeclaratorList_42_Var = (InitDeclaratorList)InitDeclaratorList_41_list.get(0);
		Assert.assertNotNull(InitDeclaratorList_42_Var);
		final EList<? extends EObject> InitDeclarator_42_list = InitDeclaratorList_42_Var.getInitDeclarator();
		Assert.assertNotNull(InitDeclarator_42_list);
		Assert.assertEquals(1, InitDeclarator_42_list.size());
		final InitDeclarator InitDeclarator_43_Var = (InitDeclarator)InitDeclarator_42_list.get(0);
		Assert.assertNotNull(InitDeclarator_43_Var);
		final Declarator Declarator_44_Var = (Declarator)InitDeclarator_43_Var.getDeclarator();
		Assert.assertNotNull(Declarator_44_Var);
		final DirectDeclarator DirectDeclarator_45_Var = (DirectDeclarator)Declarator_44_Var.getDeclarator();
		Assert.assertNotNull(DirectDeclarator_45_Var);
		Assert.assertEquals("employee", DirectDeclarator_45_Var.getId());
		final ExternalDeclaration ExternalDeclaration_46_Var = (ExternalDeclaration)External_1_list.get(1);
		Assert.assertNotNull(ExternalDeclaration_46_Var);
		final Declaration Declaration_47_Var = (Declaration)ExternalDeclaration_46_Var.getDeclaration();
		Assert.assertNotNull(Declaration_47_Var);
		final DeclarationSpecifiers DeclarationSpecifiers_48_Var = (DeclarationSpecifiers)Declaration_47_Var.getSpecifiers();
		Assert.assertNotNull(DeclarationSpecifiers_48_Var);
		final EList<? extends EObject> DeclarationSpecifier_48_list = DeclarationSpecifiers_48_Var.getDeclarationSpecifier();
		Assert.assertNotNull(DeclarationSpecifier_48_list);
		Assert.assertEquals(1, DeclarationSpecifier_48_list.size());
		final TypeSpecifier TypeSpecifier_49_Var = (TypeSpecifier)DeclarationSpecifier_48_list.get(0);
		Assert.assertNotNull(TypeSpecifier_49_Var);
		final StructOrUnionSpecifier StructOrUnionSpecifier_50_Var = (StructOrUnionSpecifier)TypeSpecifier_49_Var.getSpecifier();
		Assert.assertNotNull(StructOrUnionSpecifier_50_Var);
		final StructOrUnion StructOrUnion_51_Var = (StructOrUnion)StructOrUnionSpecifier_50_Var.getType();
		Assert.assertNotNull(StructOrUnion_51_Var);
		Assert.assertEquals("struct", StructOrUnion_51_Var.getName());
		Assert.assertEquals("empStruct", StructOrUnionSpecifier_50_Var.getId());
		final EList<? extends EObject> InitDeclaratorList_51_list = Declaration_47_Var.getInitDeclaratorList();
		Assert.assertNotNull(InitDeclaratorList_51_list);
		Assert.assertEquals(1, InitDeclaratorList_51_list.size());
		final InitDeclaratorList InitDeclaratorList_52_Var = (InitDeclaratorList)InitDeclaratorList_51_list.get(0);
		Assert.assertNotNull(InitDeclaratorList_52_Var);
		final EList<? extends EObject> InitDeclarator_52_list = InitDeclaratorList_52_Var.getInitDeclarator();
		Assert.assertNotNull(InitDeclarator_52_list);
		Assert.assertEquals(1, InitDeclarator_52_list.size());
		final InitDeclarator InitDeclarator_53_Var = (InitDeclarator)InitDeclarator_52_list.get(0);
		Assert.assertNotNull(InitDeclarator_53_Var);
		final Declarator Declarator_54_Var = (Declarator)InitDeclarator_53_Var.getDeclarator();
		Assert.assertNotNull(Declarator_54_Var);
		final DirectDeclarator DirectDeclarator_55_Var = (DirectDeclarator)Declarator_54_Var.getDeclarator();
		Assert.assertNotNull(DirectDeclarator_55_Var);
		Assert.assertEquals("joe", DirectDeclarator_55_Var.getId());
		final Initializer Initializer_56_Var = (Initializer)InitDeclarator_53_Var.getInitializer();
		Assert.assertNotNull(Initializer_56_Var);
		final InitializerList InitializerList_57_Var = (InitializerList)Initializer_56_Var.getList();
		Assert.assertNotNull(InitializerList_57_Var);
		final EList<? extends EObject> Initializer_57_list = InitializerList_57_Var.getInitializer();
		Assert.assertNotNull(Initializer_57_list);
		Assert.assertEquals(2, Initializer_57_list.size());
		final Initializer Initializer_58_Var = (Initializer)Initializer_57_list.get(0);
		Assert.assertNotNull(Initializer_58_Var);
		final AssignmentExpression AssignmentExpression_59_Var = (AssignmentExpression)Initializer_58_Var.getExpr();
		Assert.assertNotNull(AssignmentExpression_59_Var);
		final ConditionalExpression ConditionalExpression_60_Var = (ConditionalExpression)AssignmentExpression_59_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_60_Var);
		final LogicalOrExpression LogicalOrExpression_61_Var = (LogicalOrExpression)ConditionalExpression_60_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_61_Var);
		final EList<? extends EObject> Expr_61_list = LogicalOrExpression_61_Var.getExpr();
		Assert.assertNotNull(Expr_61_list);
		Assert.assertEquals(1, Expr_61_list.size());
		final LogicalAndExpression LogicalAndExpression_62_Var = (LogicalAndExpression)Expr_61_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_62_Var);
		final EList<? extends EObject> Expr_62_list = LogicalAndExpression_62_Var.getExpr();
		Assert.assertNotNull(Expr_62_list);
		Assert.assertEquals(1, Expr_62_list.size());
		final InclusiveOrExpression InclusiveOrExpression_63_Var = (InclusiveOrExpression)Expr_62_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_63_Var);
		final EList<? extends EObject> Expr_63_list = InclusiveOrExpression_63_Var.getExpr();
		Assert.assertNotNull(Expr_63_list);
		Assert.assertEquals(1, Expr_63_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_64_Var = (ExclusiveOrExpression)Expr_63_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_64_Var);
		final EList<? extends EObject> Expr_64_list = ExclusiveOrExpression_64_Var.getExpr();
		Assert.assertNotNull(Expr_64_list);
		Assert.assertEquals(1, Expr_64_list.size());
		final AndExpression AndExpression_65_Var = (AndExpression)Expr_64_list.get(0);
		Assert.assertNotNull(AndExpression_65_Var);
		final EList<? extends EObject> Expr_65_list = AndExpression_65_Var.getExpr();
		Assert.assertNotNull(Expr_65_list);
		Assert.assertEquals(1, Expr_65_list.size());
		final EqualityExpression EqualityExpression_66_Var = (EqualityExpression)Expr_65_list.get(0);
		Assert.assertNotNull(EqualityExpression_66_Var);
		final EList<? extends EObject> Expr_66_list = EqualityExpression_66_Var.getExpr();
		Assert.assertNotNull(Expr_66_list);
		Assert.assertEquals(1, Expr_66_list.size());
		final RelationalExpression RelationalExpression_67_Var = (RelationalExpression)Expr_66_list.get(0);
		Assert.assertNotNull(RelationalExpression_67_Var);
		final EList<? extends EObject> Expr_67_list = RelationalExpression_67_Var.getExpr();
		Assert.assertNotNull(Expr_67_list);
		Assert.assertEquals(1, Expr_67_list.size());
		final ShiftExpression ShiftExpression_68_Var = (ShiftExpression)Expr_67_list.get(0);
		Assert.assertNotNull(ShiftExpression_68_Var);
		final EList<? extends EObject> Expr_68_list = ShiftExpression_68_Var.getExpr();
		Assert.assertNotNull(Expr_68_list);
		Assert.assertEquals(1, Expr_68_list.size());
		final AdditiveExpression AdditiveExpression_69_Var = (AdditiveExpression)Expr_68_list.get(0);
		Assert.assertNotNull(AdditiveExpression_69_Var);
		final EList<? extends EObject> Expr_69_list = AdditiveExpression_69_Var.getExpr();
		Assert.assertNotNull(Expr_69_list);
		Assert.assertEquals(1, Expr_69_list.size());
		final MultiplicativeExpression MultiplicativeExpression_70_Var = (MultiplicativeExpression)Expr_69_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_70_Var);
		final EList<? extends EObject> Expr_70_list = MultiplicativeExpression_70_Var.getExpr();
		Assert.assertNotNull(Expr_70_list);
		Assert.assertEquals(1, Expr_70_list.size());
		final CastExpression CastExpression_71_Var = (CastExpression)Expr_70_list.get(0);
		Assert.assertNotNull(CastExpression_71_Var);
		final UnaryExpression UnaryExpression_72_Var = (UnaryExpression)CastExpression_71_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_72_Var);
		final PostfixExpression PostfixExpression_73_Var = (PostfixExpression)UnaryExpression_72_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_73_Var);
		final EList<? extends EObject> Expr_73_list = PostfixExpression_73_Var.getExpr();
		Assert.assertNotNull(Expr_73_list);
		Assert.assertEquals(1, Expr_73_list.size());
		final PrimaryExpression PrimaryExpression_74_Var = (PrimaryExpression)Expr_73_list.get(0);
		Assert.assertNotNull(PrimaryExpression_74_Var);
		final Constant Constant_75_Var = (Constant)PrimaryExpression_74_Var.getConst();
		Assert.assertNotNull(Constant_75_Var);
		Assert.assertEquals("0x007", Constant_75_Var.getHex());
		final Initializer Initializer_76_Var = (Initializer)Initializer_57_list.get(1);
		Assert.assertNotNull(Initializer_76_Var);
		final AssignmentExpression AssignmentExpression_77_Var = (AssignmentExpression)Initializer_76_Var.getExpr();
		Assert.assertNotNull(AssignmentExpression_77_Var);
		final ConditionalExpression ConditionalExpression_78_Var = (ConditionalExpression)AssignmentExpression_77_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_78_Var);
		final LogicalOrExpression LogicalOrExpression_79_Var = (LogicalOrExpression)ConditionalExpression_78_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_79_Var);
		final EList<? extends EObject> Expr_79_list = LogicalOrExpression_79_Var.getExpr();
		Assert.assertNotNull(Expr_79_list);
		Assert.assertEquals(1, Expr_79_list.size());
		final LogicalAndExpression LogicalAndExpression_80_Var = (LogicalAndExpression)Expr_79_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_80_Var);
		final EList<? extends EObject> Expr_80_list = LogicalAndExpression_80_Var.getExpr();
		Assert.assertNotNull(Expr_80_list);
		Assert.assertEquals(1, Expr_80_list.size());
		final InclusiveOrExpression InclusiveOrExpression_81_Var = (InclusiveOrExpression)Expr_80_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_81_Var);
		final EList<? extends EObject> Expr_81_list = InclusiveOrExpression_81_Var.getExpr();
		Assert.assertNotNull(Expr_81_list);
		Assert.assertEquals(1, Expr_81_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_82_Var = (ExclusiveOrExpression)Expr_81_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_82_Var);
		final EList<? extends EObject> Expr_82_list = ExclusiveOrExpression_82_Var.getExpr();
		Assert.assertNotNull(Expr_82_list);
		Assert.assertEquals(1, Expr_82_list.size());
		final AndExpression AndExpression_83_Var = (AndExpression)Expr_82_list.get(0);
		Assert.assertNotNull(AndExpression_83_Var);
		final EList<? extends EObject> Expr_83_list = AndExpression_83_Var.getExpr();
		Assert.assertNotNull(Expr_83_list);
		Assert.assertEquals(1, Expr_83_list.size());
		final EqualityExpression EqualityExpression_84_Var = (EqualityExpression)Expr_83_list.get(0);
		Assert.assertNotNull(EqualityExpression_84_Var);
		final EList<? extends EObject> Expr_84_list = EqualityExpression_84_Var.getExpr();
		Assert.assertNotNull(Expr_84_list);
		Assert.assertEquals(1, Expr_84_list.size());
		final RelationalExpression RelationalExpression_85_Var = (RelationalExpression)Expr_84_list.get(0);
		Assert.assertNotNull(RelationalExpression_85_Var);
		final EList<? extends EObject> Expr_85_list = RelationalExpression_85_Var.getExpr();
		Assert.assertNotNull(Expr_85_list);
		Assert.assertEquals(1, Expr_85_list.size());
		final ShiftExpression ShiftExpression_86_Var = (ShiftExpression)Expr_85_list.get(0);
		Assert.assertNotNull(ShiftExpression_86_Var);
		final EList<? extends EObject> Expr_86_list = ShiftExpression_86_Var.getExpr();
		Assert.assertNotNull(Expr_86_list);
		Assert.assertEquals(1, Expr_86_list.size());
		final AdditiveExpression AdditiveExpression_87_Var = (AdditiveExpression)Expr_86_list.get(0);
		Assert.assertNotNull(AdditiveExpression_87_Var);
		final EList<? extends EObject> Expr_87_list = AdditiveExpression_87_Var.getExpr();
		Assert.assertNotNull(Expr_87_list);
		Assert.assertEquals(1, Expr_87_list.size());
		final MultiplicativeExpression MultiplicativeExpression_88_Var = (MultiplicativeExpression)Expr_87_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_88_Var);
		final EList<? extends EObject> Expr_88_list = MultiplicativeExpression_88_Var.getExpr();
		Assert.assertNotNull(Expr_88_list);
		Assert.assertEquals(1, Expr_88_list.size());
		final CastExpression CastExpression_89_Var = (CastExpression)Expr_88_list.get(0);
		Assert.assertNotNull(CastExpression_89_Var);
		final UnaryExpression UnaryExpression_90_Var = (UnaryExpression)CastExpression_89_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_90_Var);
		final PostfixExpression PostfixExpression_91_Var = (PostfixExpression)UnaryExpression_90_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_91_Var);
		final EList<? extends EObject> Expr_91_list = PostfixExpression_91_Var.getExpr();
		Assert.assertNotNull(Expr_91_list);
		Assert.assertEquals(1, Expr_91_list.size());
		final PrimaryExpression PrimaryExpression_92_Var = (PrimaryExpression)Expr_91_list.get(0);
		Assert.assertNotNull(PrimaryExpression_92_Var);
		final Constant Constant_93_Var = (Constant)PrimaryExpression_92_Var.getConst();
		Assert.assertNotNull(Constant_93_Var);
		Assert.assertEquals("\"Joe Nobody\"", Constant_93_Var.getStr());
		final ExternalDeclaration ExternalDeclaration_94_Var = (ExternalDeclaration)External_1_list.get(2);
		Assert.assertNotNull(ExternalDeclaration_94_Var);
		final Declaration Declaration_95_Var = (Declaration)ExternalDeclaration_94_Var.getDeclaration();
		Assert.assertNotNull(Declaration_95_Var);
		final DeclarationSpecifiers DeclarationSpecifiers_96_Var = (DeclarationSpecifiers)Declaration_95_Var.getSpecifiers();
		Assert.assertNotNull(DeclarationSpecifiers_96_Var);
		final EList<? extends EObject> DeclarationSpecifier_96_list = DeclarationSpecifiers_96_Var.getDeclarationSpecifier();
		Assert.assertNotNull(DeclarationSpecifier_96_list);
		Assert.assertEquals(1, DeclarationSpecifier_96_list.size());
		final TypeSpecifier TypeSpecifier_97_Var = (TypeSpecifier)DeclarationSpecifier_96_list.get(0);
		Assert.assertNotNull(TypeSpecifier_97_Var);
		final TypedefName TypedefName_98_Var = (TypedefName)TypeSpecifier_97_Var.getType();
		Assert.assertNotNull(TypedefName_98_Var);
		Assert.assertEquals("employee", TypedefName_98_Var.getId());
		final EList<? extends EObject> InitDeclaratorList_98_list = Declaration_95_Var.getInitDeclaratorList();
		Assert.assertNotNull(InitDeclaratorList_98_list);
		Assert.assertEquals(1, InitDeclaratorList_98_list.size());
		final InitDeclaratorList InitDeclaratorList_99_Var = (InitDeclaratorList)InitDeclaratorList_98_list.get(0);
		Assert.assertNotNull(InitDeclaratorList_99_Var);
		final EList<? extends EObject> InitDeclarator_99_list = InitDeclaratorList_99_Var.getInitDeclarator();
		Assert.assertNotNull(InitDeclarator_99_list);
		Assert.assertEquals(1, InitDeclarator_99_list.size());
		final InitDeclarator InitDeclarator_100_Var = (InitDeclarator)InitDeclarator_99_list.get(0);
		Assert.assertNotNull(InitDeclarator_100_Var);
		final Declarator Declarator_101_Var = (Declarator)InitDeclarator_100_Var.getDeclarator();
		Assert.assertNotNull(Declarator_101_Var);
		final DirectDeclarator DirectDeclarator_102_Var = (DirectDeclarator)Declarator_101_Var.getDeclarator();
		Assert.assertNotNull(DirectDeclarator_102_Var);
		Assert.assertEquals("phil", DirectDeclarator_102_Var.getId());
		final Initializer Initializer_103_Var = (Initializer)InitDeclarator_100_Var.getInitializer();
		Assert.assertNotNull(Initializer_103_Var);
		final InitializerList InitializerList_104_Var = (InitializerList)Initializer_103_Var.getList();
		Assert.assertNotNull(InitializerList_104_Var);
		final EList<? extends EObject> Initializer_104_list = InitializerList_104_Var.getInitializer();
		Assert.assertNotNull(Initializer_104_list);
		Assert.assertEquals(2, Initializer_104_list.size());
		final Initializer Initializer_105_Var = (Initializer)Initializer_104_list.get(0);
		Assert.assertNotNull(Initializer_105_Var);
		final AssignmentExpression AssignmentExpression_106_Var = (AssignmentExpression)Initializer_105_Var.getExpr();
		Assert.assertNotNull(AssignmentExpression_106_Var);
		final ConditionalExpression ConditionalExpression_107_Var = (ConditionalExpression)AssignmentExpression_106_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_107_Var);
		final LogicalOrExpression LogicalOrExpression_108_Var = (LogicalOrExpression)ConditionalExpression_107_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_108_Var);
		final EList<? extends EObject> Expr_108_list = LogicalOrExpression_108_Var.getExpr();
		Assert.assertNotNull(Expr_108_list);
		Assert.assertEquals(1, Expr_108_list.size());
		final LogicalAndExpression LogicalAndExpression_109_Var = (LogicalAndExpression)Expr_108_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_109_Var);
		final EList<? extends EObject> Expr_109_list = LogicalAndExpression_109_Var.getExpr();
		Assert.assertNotNull(Expr_109_list);
		Assert.assertEquals(1, Expr_109_list.size());
		final InclusiveOrExpression InclusiveOrExpression_110_Var = (InclusiveOrExpression)Expr_109_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_110_Var);
		final EList<? extends EObject> Expr_110_list = InclusiveOrExpression_110_Var.getExpr();
		Assert.assertNotNull(Expr_110_list);
		Assert.assertEquals(1, Expr_110_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_111_Var = (ExclusiveOrExpression)Expr_110_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_111_Var);
		final EList<? extends EObject> Expr_111_list = ExclusiveOrExpression_111_Var.getExpr();
		Assert.assertNotNull(Expr_111_list);
		Assert.assertEquals(1, Expr_111_list.size());
		final AndExpression AndExpression_112_Var = (AndExpression)Expr_111_list.get(0);
		Assert.assertNotNull(AndExpression_112_Var);
		final EList<? extends EObject> Expr_112_list = AndExpression_112_Var.getExpr();
		Assert.assertNotNull(Expr_112_list);
		Assert.assertEquals(1, Expr_112_list.size());
		final EqualityExpression EqualityExpression_113_Var = (EqualityExpression)Expr_112_list.get(0);
		Assert.assertNotNull(EqualityExpression_113_Var);
		final EList<? extends EObject> Expr_113_list = EqualityExpression_113_Var.getExpr();
		Assert.assertNotNull(Expr_113_list);
		Assert.assertEquals(1, Expr_113_list.size());
		final RelationalExpression RelationalExpression_114_Var = (RelationalExpression)Expr_113_list.get(0);
		Assert.assertNotNull(RelationalExpression_114_Var);
		final EList<? extends EObject> Expr_114_list = RelationalExpression_114_Var.getExpr();
		Assert.assertNotNull(Expr_114_list);
		Assert.assertEquals(1, Expr_114_list.size());
		final ShiftExpression ShiftExpression_115_Var = (ShiftExpression)Expr_114_list.get(0);
		Assert.assertNotNull(ShiftExpression_115_Var);
		final EList<? extends EObject> Expr_115_list = ShiftExpression_115_Var.getExpr();
		Assert.assertNotNull(Expr_115_list);
		Assert.assertEquals(1, Expr_115_list.size());
		final AdditiveExpression AdditiveExpression_116_Var = (AdditiveExpression)Expr_115_list.get(0);
		Assert.assertNotNull(AdditiveExpression_116_Var);
		final EList<? extends EObject> Expr_116_list = AdditiveExpression_116_Var.getExpr();
		Assert.assertNotNull(Expr_116_list);
		Assert.assertEquals(1, Expr_116_list.size());
		final MultiplicativeExpression MultiplicativeExpression_117_Var = (MultiplicativeExpression)Expr_116_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_117_Var);
		final EList<? extends EObject> Expr_117_list = MultiplicativeExpression_117_Var.getExpr();
		Assert.assertNotNull(Expr_117_list);
		Assert.assertEquals(1, Expr_117_list.size());
		final CastExpression CastExpression_118_Var = (CastExpression)Expr_117_list.get(0);
		Assert.assertNotNull(CastExpression_118_Var);
		final UnaryExpression UnaryExpression_119_Var = (UnaryExpression)CastExpression_118_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_119_Var);
		final PostfixExpression PostfixExpression_120_Var = (PostfixExpression)UnaryExpression_119_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_120_Var);
		final EList<? extends EObject> Expr_120_list = PostfixExpression_120_Var.getExpr();
		Assert.assertNotNull(Expr_120_list);
		Assert.assertEquals(1, Expr_120_list.size());
		final PrimaryExpression PrimaryExpression_121_Var = (PrimaryExpression)Expr_120_list.get(0);
		Assert.assertNotNull(PrimaryExpression_121_Var);
		final Constant Constant_122_Var = (Constant)PrimaryExpression_121_Var.getConst();
		Assert.assertNotNull(Constant_122_Var);
		Assert.assertEquals("0x008", Constant_122_Var.getHex());
		final Initializer Initializer_123_Var = (Initializer)Initializer_104_list.get(1);
		Assert.assertNotNull(Initializer_123_Var);
		final AssignmentExpression AssignmentExpression_124_Var = (AssignmentExpression)Initializer_123_Var.getExpr();
		Assert.assertNotNull(AssignmentExpression_124_Var);
		final ConditionalExpression ConditionalExpression_125_Var = (ConditionalExpression)AssignmentExpression_124_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_125_Var);
		final LogicalOrExpression LogicalOrExpression_126_Var = (LogicalOrExpression)ConditionalExpression_125_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_126_Var);
		final EList<? extends EObject> Expr_126_list = LogicalOrExpression_126_Var.getExpr();
		Assert.assertNotNull(Expr_126_list);
		Assert.assertEquals(1, Expr_126_list.size());
		final LogicalAndExpression LogicalAndExpression_127_Var = (LogicalAndExpression)Expr_126_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_127_Var);
		final EList<? extends EObject> Expr_127_list = LogicalAndExpression_127_Var.getExpr();
		Assert.assertNotNull(Expr_127_list);
		Assert.assertEquals(1, Expr_127_list.size());
		final InclusiveOrExpression InclusiveOrExpression_128_Var = (InclusiveOrExpression)Expr_127_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_128_Var);
		final EList<? extends EObject> Expr_128_list = InclusiveOrExpression_128_Var.getExpr();
		Assert.assertNotNull(Expr_128_list);
		Assert.assertEquals(1, Expr_128_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_129_Var = (ExclusiveOrExpression)Expr_128_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_129_Var);
		final EList<? extends EObject> Expr_129_list = ExclusiveOrExpression_129_Var.getExpr();
		Assert.assertNotNull(Expr_129_list);
		Assert.assertEquals(1, Expr_129_list.size());
		final AndExpression AndExpression_130_Var = (AndExpression)Expr_129_list.get(0);
		Assert.assertNotNull(AndExpression_130_Var);
		final EList<? extends EObject> Expr_130_list = AndExpression_130_Var.getExpr();
		Assert.assertNotNull(Expr_130_list);
		Assert.assertEquals(1, Expr_130_list.size());
		final EqualityExpression EqualityExpression_131_Var = (EqualityExpression)Expr_130_list.get(0);
		Assert.assertNotNull(EqualityExpression_131_Var);
		final EList<? extends EObject> Expr_131_list = EqualityExpression_131_Var.getExpr();
		Assert.assertNotNull(Expr_131_list);
		Assert.assertEquals(1, Expr_131_list.size());
		final RelationalExpression RelationalExpression_132_Var = (RelationalExpression)Expr_131_list.get(0);
		Assert.assertNotNull(RelationalExpression_132_Var);
		final EList<? extends EObject> Expr_132_list = RelationalExpression_132_Var.getExpr();
		Assert.assertNotNull(Expr_132_list);
		Assert.assertEquals(1, Expr_132_list.size());
		final ShiftExpression ShiftExpression_133_Var = (ShiftExpression)Expr_132_list.get(0);
		Assert.assertNotNull(ShiftExpression_133_Var);
		final EList<? extends EObject> Expr_133_list = ShiftExpression_133_Var.getExpr();
		Assert.assertNotNull(Expr_133_list);
		Assert.assertEquals(1, Expr_133_list.size());
		final AdditiveExpression AdditiveExpression_134_Var = (AdditiveExpression)Expr_133_list.get(0);
		Assert.assertNotNull(AdditiveExpression_134_Var);
		final EList<? extends EObject> Expr_134_list = AdditiveExpression_134_Var.getExpr();
		Assert.assertNotNull(Expr_134_list);
		Assert.assertEquals(1, Expr_134_list.size());
		final MultiplicativeExpression MultiplicativeExpression_135_Var = (MultiplicativeExpression)Expr_134_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_135_Var);
		final EList<? extends EObject> Expr_135_list = MultiplicativeExpression_135_Var.getExpr();
		Assert.assertNotNull(Expr_135_list);
		Assert.assertEquals(1, Expr_135_list.size());
		final CastExpression CastExpression_136_Var = (CastExpression)Expr_135_list.get(0);
		Assert.assertNotNull(CastExpression_136_Var);
		final UnaryExpression UnaryExpression_137_Var = (UnaryExpression)CastExpression_136_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_137_Var);
		final PostfixExpression PostfixExpression_138_Var = (PostfixExpression)UnaryExpression_137_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_138_Var);
		final EList<? extends EObject> Expr_138_list = PostfixExpression_138_Var.getExpr();
		Assert.assertNotNull(Expr_138_list);
		Assert.assertEquals(1, Expr_138_list.size());
		final PrimaryExpression PrimaryExpression_139_Var = (PrimaryExpression)Expr_138_list.get(0);
		Assert.assertNotNull(PrimaryExpression_139_Var);
		final Constant Constant_140_Var = (Constant)PrimaryExpression_139_Var.getConst();
		Assert.assertNotNull(Constant_140_Var);
		Assert.assertEquals("\"Phil Morrison\"", Constant_140_Var.getStr());
		final ExternalDeclaration ExternalDeclaration_141_Var = (ExternalDeclaration)External_1_list.get(3);
		Assert.assertNotNull(ExternalDeclaration_141_Var);
		final FunctionDefHead FunctionDefHead_142_Var = (FunctionDefHead)ExternalDeclaration_141_Var.getFunctiondefHead();
		Assert.assertNotNull(FunctionDefHead_142_Var);
		final DeclarationSpecifiers DeclarationSpecifiers_143_Var = (DeclarationSpecifiers)FunctionDefHead_142_Var.getFunDeclSpecifiers();
		Assert.assertNotNull(DeclarationSpecifiers_143_Var);
		final EList<? extends EObject> DeclarationSpecifier_143_list = DeclarationSpecifiers_143_Var.getDeclarationSpecifier();
		Assert.assertNotNull(DeclarationSpecifier_143_list);
		Assert.assertEquals(1, DeclarationSpecifier_143_list.size());
		final TypeSpecifier TypeSpecifier_144_Var = (TypeSpecifier)DeclarationSpecifier_143_list.get(0);
		Assert.assertNotNull(TypeSpecifier_144_Var);
		Assert.assertEquals("void", TypeSpecifier_144_Var.getName());
		final Declarator Declarator_145_Var = (Declarator)FunctionDefHead_142_Var.getFunDeclarator();
		Assert.assertNotNull(Declarator_145_Var);
		final DirectDeclarator DirectDeclarator_146_Var = (DirectDeclarator)Declarator_145_Var.getDeclarator();
		Assert.assertNotNull(DirectDeclarator_146_Var);
		Assert.assertEquals("print", DirectDeclarator_146_Var.getId());
		final EList<? extends EObject> DeclaratorSuffix_146_list = DirectDeclarator_146_Var.getDeclaratorSuffix();
		Assert.assertNotNull(DeclaratorSuffix_146_list);
		Assert.assertEquals(1, DeclaratorSuffix_146_list.size());
		final DeclaratorSuffix DeclaratorSuffix_147_Var = (DeclaratorSuffix)DeclaratorSuffix_146_list.get(0);
		Assert.assertNotNull(DeclaratorSuffix_147_Var);
		final DirectDeclaratorLastSuffix DirectDeclaratorLastSuffix_148_Var = (DirectDeclaratorLastSuffix)DeclaratorSuffix_147_Var.getLastSuffix();
		Assert.assertNotNull(DirectDeclaratorLastSuffix_148_Var);
		final EList<? extends EObject> ParameterTypeList_148_list = DirectDeclaratorLastSuffix_148_Var.getParameterTypeList();
		Assert.assertNotNull(ParameterTypeList_148_list);
		Assert.assertEquals(1, ParameterTypeList_148_list.size());
		final ParameterTypeList ParameterTypeList_149_Var = (ParameterTypeList)ParameterTypeList_148_list.get(0);
		Assert.assertNotNull(ParameterTypeList_149_Var);
		final ParameterList ParameterList_150_Var = (ParameterList)ParameterTypeList_149_Var.getList();
		Assert.assertNotNull(ParameterList_150_Var);
		final EList<? extends EObject> ParameterDeclaration_150_list = ParameterList_150_Var.getParameterDeclaration();
		Assert.assertNotNull(ParameterDeclaration_150_list);
		Assert.assertEquals(1, ParameterDeclaration_150_list.size());
		final ParameterDeclaration ParameterDeclaration_151_Var = (ParameterDeclaration)ParameterDeclaration_150_list.get(0);
		Assert.assertNotNull(ParameterDeclaration_151_Var);
		final DeclarationSpecifiers DeclarationSpecifiers_152_Var = (DeclarationSpecifiers)ParameterDeclaration_151_Var.getDeclSpecifiers();
		Assert.assertNotNull(DeclarationSpecifiers_152_Var);
		final EList<? extends EObject> DeclarationSpecifier_152_list = DeclarationSpecifiers_152_Var.getDeclarationSpecifier();
		Assert.assertNotNull(DeclarationSpecifier_152_list);
		Assert.assertEquals(1, DeclarationSpecifier_152_list.size());
		final TypeSpecifier TypeSpecifier_153_Var = (TypeSpecifier)DeclarationSpecifier_152_list.get(0);
		Assert.assertNotNull(TypeSpecifier_153_Var);
		final TypedefName TypedefName_154_Var = (TypedefName)TypeSpecifier_153_Var.getType();
		Assert.assertNotNull(TypedefName_154_Var);
		Assert.assertEquals("employee", TypedefName_154_Var.getId());
		final Declarator Declarator_155_Var = (Declarator)ParameterDeclaration_151_Var.getDeclarator();
		Assert.assertNotNull(Declarator_155_Var);
		final DirectDeclarator DirectDeclarator_156_Var = (DirectDeclarator)Declarator_155_Var.getDeclarator();
		Assert.assertNotNull(DirectDeclarator_156_Var);
		Assert.assertEquals("emp", DirectDeclarator_156_Var.getId());
		final Pointer Pointer_157_Var = (Pointer)Declarator_155_Var.getPointer();
		Assert.assertNotNull(Pointer_157_Var);
		Assert.assertEquals("[*]", Pointer_157_Var.getStar().toString());
		final FunctionDefinition FunctionDefinition_158_Var = (FunctionDefinition)ExternalDeclaration_141_Var.getFunctionDefinition();
		Assert.assertNotNull(FunctionDefinition_158_Var);
		final BodyStatement BodyStatement_159_Var = (BodyStatement)FunctionDefinition_158_Var.getBody();
		Assert.assertNotNull(BodyStatement_159_Var);
		final EList<? extends EObject> BlockList_159_list = BodyStatement_159_Var.getBlockList();
		Assert.assertNotNull(BlockList_159_list);
		Assert.assertEquals(1, BlockList_159_list.size());
		final BlockList BlockList_160_Var = (BlockList)BlockList_159_list.get(0);
		Assert.assertNotNull(BlockList_160_Var);
		final EList<? extends EObject> Statement_160_list = BlockList_160_Var.getStatement();
		Assert.assertNotNull(Statement_160_list);
		Assert.assertEquals(1, Statement_160_list.size());
		final Statement Statement_161_Var = (Statement)Statement_160_list.get(0);
		Assert.assertNotNull(Statement_161_Var);
		final ExpressionStatement ExpressionStatement_162_Var = (ExpressionStatement)Statement_161_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_162_Var);
		final Expression Expression_163_Var = (Expression)ExpressionStatement_162_Var.getExpression();
		Assert.assertNotNull(Expression_163_Var);
		final EList<? extends EObject> ExprExpr_163_list = Expression_163_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_163_list);
		Assert.assertEquals(1, ExprExpr_163_list.size());
		final AssignmentExpression AssignmentExpression_164_Var = (AssignmentExpression)ExprExpr_163_list.get(0);
		Assert.assertNotNull(AssignmentExpression_164_Var);
		final ConditionalExpression ConditionalExpression_165_Var = (ConditionalExpression)AssignmentExpression_164_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_165_Var);
		final LogicalOrExpression LogicalOrExpression_166_Var = (LogicalOrExpression)ConditionalExpression_165_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_166_Var);
		final EList<? extends EObject> Expr_166_list = LogicalOrExpression_166_Var.getExpr();
		Assert.assertNotNull(Expr_166_list);
		Assert.assertEquals(1, Expr_166_list.size());
		final LogicalAndExpression LogicalAndExpression_167_Var = (LogicalAndExpression)Expr_166_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_167_Var);
		final EList<? extends EObject> Expr_167_list = LogicalAndExpression_167_Var.getExpr();
		Assert.assertNotNull(Expr_167_list);
		Assert.assertEquals(1, Expr_167_list.size());
		final InclusiveOrExpression InclusiveOrExpression_168_Var = (InclusiveOrExpression)Expr_167_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_168_Var);
		final EList<? extends EObject> Expr_168_list = InclusiveOrExpression_168_Var.getExpr();
		Assert.assertNotNull(Expr_168_list);
		Assert.assertEquals(1, Expr_168_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_169_Var = (ExclusiveOrExpression)Expr_168_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_169_Var);
		final EList<? extends EObject> Expr_169_list = ExclusiveOrExpression_169_Var.getExpr();
		Assert.assertNotNull(Expr_169_list);
		Assert.assertEquals(1, Expr_169_list.size());
		final AndExpression AndExpression_170_Var = (AndExpression)Expr_169_list.get(0);
		Assert.assertNotNull(AndExpression_170_Var);
		final EList<? extends EObject> Expr_170_list = AndExpression_170_Var.getExpr();
		Assert.assertNotNull(Expr_170_list);
		Assert.assertEquals(1, Expr_170_list.size());
		final EqualityExpression EqualityExpression_171_Var = (EqualityExpression)Expr_170_list.get(0);
		Assert.assertNotNull(EqualityExpression_171_Var);
		final EList<? extends EObject> Expr_171_list = EqualityExpression_171_Var.getExpr();
		Assert.assertNotNull(Expr_171_list);
		Assert.assertEquals(1, Expr_171_list.size());
		final RelationalExpression RelationalExpression_172_Var = (RelationalExpression)Expr_171_list.get(0);
		Assert.assertNotNull(RelationalExpression_172_Var);
		final EList<? extends EObject> Expr_172_list = RelationalExpression_172_Var.getExpr();
		Assert.assertNotNull(Expr_172_list);
		Assert.assertEquals(1, Expr_172_list.size());
		final ShiftExpression ShiftExpression_173_Var = (ShiftExpression)Expr_172_list.get(0);
		Assert.assertNotNull(ShiftExpression_173_Var);
		final EList<? extends EObject> Expr_173_list = ShiftExpression_173_Var.getExpr();
		Assert.assertNotNull(Expr_173_list);
		Assert.assertEquals(1, Expr_173_list.size());
		final AdditiveExpression AdditiveExpression_174_Var = (AdditiveExpression)Expr_173_list.get(0);
		Assert.assertNotNull(AdditiveExpression_174_Var);
		final EList<? extends EObject> Expr_174_list = AdditiveExpression_174_Var.getExpr();
		Assert.assertNotNull(Expr_174_list);
		Assert.assertEquals(1, Expr_174_list.size());
		final MultiplicativeExpression MultiplicativeExpression_175_Var = (MultiplicativeExpression)Expr_174_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_175_Var);
		final EList<? extends EObject> Expr_175_list = MultiplicativeExpression_175_Var.getExpr();
		Assert.assertNotNull(Expr_175_list);
		Assert.assertEquals(1, Expr_175_list.size());
		final CastExpression CastExpression_176_Var = (CastExpression)Expr_175_list.get(0);
		Assert.assertNotNull(CastExpression_176_Var);
		final UnaryExpression UnaryExpression_177_Var = (UnaryExpression)CastExpression_176_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_177_Var);
		final PostfixExpression PostfixExpression_178_Var = (PostfixExpression)UnaryExpression_177_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_178_Var);
		final EList<? extends EObject> Expr_178_list = PostfixExpression_178_Var.getExpr();
		Assert.assertNotNull(Expr_178_list);
		Assert.assertEquals(1, Expr_178_list.size());
		final PrimaryExpression PrimaryExpression_179_Var = (PrimaryExpression)Expr_178_list.get(0);
		Assert.assertNotNull(PrimaryExpression_179_Var);
		Assert.assertEquals("printf", PrimaryExpression_179_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_179_list = PostfixExpression_178_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_179_list);
		Assert.assertEquals(1, ArgumentExpressionList_179_list.size());
		final ArgumentExpressionList ArgumentExpressionList_180_Var = (ArgumentExpressionList)ArgumentExpressionList_179_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_180_Var);
		final EList<? extends EObject> Expr_180_list = ArgumentExpressionList_180_Var.getExpr();
		Assert.assertNotNull(Expr_180_list);
		Assert.assertEquals(2, Expr_180_list.size());
		final AssignmentExpression AssignmentExpression_181_Var = (AssignmentExpression)Expr_180_list.get(0);
		Assert.assertNotNull(AssignmentExpression_181_Var);
		final ConditionalExpression ConditionalExpression_182_Var = (ConditionalExpression)AssignmentExpression_181_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_182_Var);
		final LogicalOrExpression LogicalOrExpression_183_Var = (LogicalOrExpression)ConditionalExpression_182_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_183_Var);
		final EList<? extends EObject> Expr_183_list = LogicalOrExpression_183_Var.getExpr();
		Assert.assertNotNull(Expr_183_list);
		Assert.assertEquals(1, Expr_183_list.size());
		final LogicalAndExpression LogicalAndExpression_184_Var = (LogicalAndExpression)Expr_183_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_184_Var);
		final EList<? extends EObject> Expr_184_list = LogicalAndExpression_184_Var.getExpr();
		Assert.assertNotNull(Expr_184_list);
		Assert.assertEquals(1, Expr_184_list.size());
		final InclusiveOrExpression InclusiveOrExpression_185_Var = (InclusiveOrExpression)Expr_184_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_185_Var);
		final EList<? extends EObject> Expr_185_list = InclusiveOrExpression_185_Var.getExpr();
		Assert.assertNotNull(Expr_185_list);
		Assert.assertEquals(1, Expr_185_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_186_Var = (ExclusiveOrExpression)Expr_185_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_186_Var);
		final EList<? extends EObject> Expr_186_list = ExclusiveOrExpression_186_Var.getExpr();
		Assert.assertNotNull(Expr_186_list);
		Assert.assertEquals(1, Expr_186_list.size());
		final AndExpression AndExpression_187_Var = (AndExpression)Expr_186_list.get(0);
		Assert.assertNotNull(AndExpression_187_Var);
		final EList<? extends EObject> Expr_187_list = AndExpression_187_Var.getExpr();
		Assert.assertNotNull(Expr_187_list);
		Assert.assertEquals(1, Expr_187_list.size());
		final EqualityExpression EqualityExpression_188_Var = (EqualityExpression)Expr_187_list.get(0);
		Assert.assertNotNull(EqualityExpression_188_Var);
		final EList<? extends EObject> Expr_188_list = EqualityExpression_188_Var.getExpr();
		Assert.assertNotNull(Expr_188_list);
		Assert.assertEquals(1, Expr_188_list.size());
		final RelationalExpression RelationalExpression_189_Var = (RelationalExpression)Expr_188_list.get(0);
		Assert.assertNotNull(RelationalExpression_189_Var);
		final EList<? extends EObject> Expr_189_list = RelationalExpression_189_Var.getExpr();
		Assert.assertNotNull(Expr_189_list);
		Assert.assertEquals(1, Expr_189_list.size());
		final ShiftExpression ShiftExpression_190_Var = (ShiftExpression)Expr_189_list.get(0);
		Assert.assertNotNull(ShiftExpression_190_Var);
		final EList<? extends EObject> Expr_190_list = ShiftExpression_190_Var.getExpr();
		Assert.assertNotNull(Expr_190_list);
		Assert.assertEquals(1, Expr_190_list.size());
		final AdditiveExpression AdditiveExpression_191_Var = (AdditiveExpression)Expr_190_list.get(0);
		Assert.assertNotNull(AdditiveExpression_191_Var);
		final EList<? extends EObject> Expr_191_list = AdditiveExpression_191_Var.getExpr();
		Assert.assertNotNull(Expr_191_list);
		Assert.assertEquals(1, Expr_191_list.size());
		final MultiplicativeExpression MultiplicativeExpression_192_Var = (MultiplicativeExpression)Expr_191_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_192_Var);
		final EList<? extends EObject> Expr_192_list = MultiplicativeExpression_192_Var.getExpr();
		Assert.assertNotNull(Expr_192_list);
		Assert.assertEquals(1, Expr_192_list.size());
		final CastExpression CastExpression_193_Var = (CastExpression)Expr_192_list.get(0);
		Assert.assertNotNull(CastExpression_193_Var);
		final UnaryExpression UnaryExpression_194_Var = (UnaryExpression)CastExpression_193_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_194_Var);
		final PostfixExpression PostfixExpression_195_Var = (PostfixExpression)UnaryExpression_194_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_195_Var);
		final EList<? extends EObject> Expr_195_list = PostfixExpression_195_Var.getExpr();
		Assert.assertNotNull(Expr_195_list);
		Assert.assertEquals(1, Expr_195_list.size());
		final PrimaryExpression PrimaryExpression_196_Var = (PrimaryExpression)Expr_195_list.get(0);
		Assert.assertNotNull(PrimaryExpression_196_Var);
		final Constant Constant_197_Var = (Constant)PrimaryExpression_196_Var.getConst();
		Assert.assertNotNull(Constant_197_Var);
		Assert.assertEquals("\"(*employee).id=%d\\n\"", Constant_197_Var.getStr());
		final AssignmentExpression AssignmentExpression_198_Var = (AssignmentExpression)Expr_180_list.get(1);
		Assert.assertNotNull(AssignmentExpression_198_Var);
		final ConditionalExpression ConditionalExpression_199_Var = (ConditionalExpression)AssignmentExpression_198_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_199_Var);
		final LogicalOrExpression LogicalOrExpression_200_Var = (LogicalOrExpression)ConditionalExpression_199_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_200_Var);
		final EList<? extends EObject> Expr_200_list = LogicalOrExpression_200_Var.getExpr();
		Assert.assertNotNull(Expr_200_list);
		Assert.assertEquals(1, Expr_200_list.size());
		final LogicalAndExpression LogicalAndExpression_201_Var = (LogicalAndExpression)Expr_200_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_201_Var);
		final EList<? extends EObject> Expr_201_list = LogicalAndExpression_201_Var.getExpr();
		Assert.assertNotNull(Expr_201_list);
		Assert.assertEquals(1, Expr_201_list.size());
		final InclusiveOrExpression InclusiveOrExpression_202_Var = (InclusiveOrExpression)Expr_201_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_202_Var);
		final EList<? extends EObject> Expr_202_list = InclusiveOrExpression_202_Var.getExpr();
		Assert.assertNotNull(Expr_202_list);
		Assert.assertEquals(1, Expr_202_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_203_Var = (ExclusiveOrExpression)Expr_202_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_203_Var);
		final EList<? extends EObject> Expr_203_list = ExclusiveOrExpression_203_Var.getExpr();
		Assert.assertNotNull(Expr_203_list);
		Assert.assertEquals(1, Expr_203_list.size());
		final AndExpression AndExpression_204_Var = (AndExpression)Expr_203_list.get(0);
		Assert.assertNotNull(AndExpression_204_Var);
		final EList<? extends EObject> Expr_204_list = AndExpression_204_Var.getExpr();
		Assert.assertNotNull(Expr_204_list);
		Assert.assertEquals(1, Expr_204_list.size());
		final EqualityExpression EqualityExpression_205_Var = (EqualityExpression)Expr_204_list.get(0);
		Assert.assertNotNull(EqualityExpression_205_Var);
		final EList<? extends EObject> Expr_205_list = EqualityExpression_205_Var.getExpr();
		Assert.assertNotNull(Expr_205_list);
		Assert.assertEquals(1, Expr_205_list.size());
		final RelationalExpression RelationalExpression_206_Var = (RelationalExpression)Expr_205_list.get(0);
		Assert.assertNotNull(RelationalExpression_206_Var);
		final EList<? extends EObject> Expr_206_list = RelationalExpression_206_Var.getExpr();
		Assert.assertNotNull(Expr_206_list);
		Assert.assertEquals(1, Expr_206_list.size());
		final ShiftExpression ShiftExpression_207_Var = (ShiftExpression)Expr_206_list.get(0);
		Assert.assertNotNull(ShiftExpression_207_Var);
		final EList<? extends EObject> Expr_207_list = ShiftExpression_207_Var.getExpr();
		Assert.assertNotNull(Expr_207_list);
		Assert.assertEquals(1, Expr_207_list.size());
		final AdditiveExpression AdditiveExpression_208_Var = (AdditiveExpression)Expr_207_list.get(0);
		Assert.assertNotNull(AdditiveExpression_208_Var);
		final EList<? extends EObject> Expr_208_list = AdditiveExpression_208_Var.getExpr();
		Assert.assertNotNull(Expr_208_list);
		Assert.assertEquals(1, Expr_208_list.size());
		final MultiplicativeExpression MultiplicativeExpression_209_Var = (MultiplicativeExpression)Expr_208_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_209_Var);
		final EList<? extends EObject> Expr_209_list = MultiplicativeExpression_209_Var.getExpr();
		Assert.assertNotNull(Expr_209_list);
		Assert.assertEquals(1, Expr_209_list.size());
		final CastExpression CastExpression_210_Var = (CastExpression)Expr_209_list.get(0);
		Assert.assertNotNull(CastExpression_210_Var);
		final UnaryExpression UnaryExpression_211_Var = (UnaryExpression)CastExpression_210_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_211_Var);
		final PostfixExpression PostfixExpression_212_Var = (PostfixExpression)UnaryExpression_211_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_212_Var);
		final EList<? extends EObject> Expr_212_list = PostfixExpression_212_Var.getExpr();
		Assert.assertNotNull(Expr_212_list);
		Assert.assertEquals(1, Expr_212_list.size());
		final PrimaryExpression PrimaryExpression_213_Var = (PrimaryExpression)Expr_212_list.get(0);
		Assert.assertNotNull(PrimaryExpression_213_Var);
		final Expression Expression_214_Var = (Expression)PrimaryExpression_213_Var.getExpr();
		Assert.assertNotNull(Expression_214_Var);
		final EList<? extends EObject> ExprExpr_214_list = Expression_214_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_214_list);
		Assert.assertEquals(1, ExprExpr_214_list.size());
		final AssignmentExpression AssignmentExpression_215_Var = (AssignmentExpression)ExprExpr_214_list.get(0);
		Assert.assertNotNull(AssignmentExpression_215_Var);
		final ConditionalExpression ConditionalExpression_216_Var = (ConditionalExpression)AssignmentExpression_215_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_216_Var);
		final LogicalOrExpression LogicalOrExpression_217_Var = (LogicalOrExpression)ConditionalExpression_216_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_217_Var);
		final EList<? extends EObject> Expr_217_list = LogicalOrExpression_217_Var.getExpr();
		Assert.assertNotNull(Expr_217_list);
		Assert.assertEquals(1, Expr_217_list.size());
		final LogicalAndExpression LogicalAndExpression_218_Var = (LogicalAndExpression)Expr_217_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_218_Var);
		final EList<? extends EObject> Expr_218_list = LogicalAndExpression_218_Var.getExpr();
		Assert.assertNotNull(Expr_218_list);
		Assert.assertEquals(1, Expr_218_list.size());
		final InclusiveOrExpression InclusiveOrExpression_219_Var = (InclusiveOrExpression)Expr_218_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_219_Var);
		final EList<? extends EObject> Expr_219_list = InclusiveOrExpression_219_Var.getExpr();
		Assert.assertNotNull(Expr_219_list);
		Assert.assertEquals(1, Expr_219_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_220_Var = (ExclusiveOrExpression)Expr_219_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_220_Var);
		final EList<? extends EObject> Expr_220_list = ExclusiveOrExpression_220_Var.getExpr();
		Assert.assertNotNull(Expr_220_list);
		Assert.assertEquals(1, Expr_220_list.size());
		final AndExpression AndExpression_221_Var = (AndExpression)Expr_220_list.get(0);
		Assert.assertNotNull(AndExpression_221_Var);
		final EList<? extends EObject> Expr_221_list = AndExpression_221_Var.getExpr();
		Assert.assertNotNull(Expr_221_list);
		Assert.assertEquals(1, Expr_221_list.size());
		final EqualityExpression EqualityExpression_222_Var = (EqualityExpression)Expr_221_list.get(0);
		Assert.assertNotNull(EqualityExpression_222_Var);
		final EList<? extends EObject> Expr_222_list = EqualityExpression_222_Var.getExpr();
		Assert.assertNotNull(Expr_222_list);
		Assert.assertEquals(1, Expr_222_list.size());
		final RelationalExpression RelationalExpression_223_Var = (RelationalExpression)Expr_222_list.get(0);
		Assert.assertNotNull(RelationalExpression_223_Var);
		final EList<? extends EObject> Expr_223_list = RelationalExpression_223_Var.getExpr();
		Assert.assertNotNull(Expr_223_list);
		Assert.assertEquals(1, Expr_223_list.size());
		final ShiftExpression ShiftExpression_224_Var = (ShiftExpression)Expr_223_list.get(0);
		Assert.assertNotNull(ShiftExpression_224_Var);
		final EList<? extends EObject> Expr_224_list = ShiftExpression_224_Var.getExpr();
		Assert.assertNotNull(Expr_224_list);
		Assert.assertEquals(1, Expr_224_list.size());
		final AdditiveExpression AdditiveExpression_225_Var = (AdditiveExpression)Expr_224_list.get(0);
		Assert.assertNotNull(AdditiveExpression_225_Var);
		final EList<? extends EObject> Expr_225_list = AdditiveExpression_225_Var.getExpr();
		Assert.assertNotNull(Expr_225_list);
		Assert.assertEquals(1, Expr_225_list.size());
		final MultiplicativeExpression MultiplicativeExpression_226_Var = (MultiplicativeExpression)Expr_225_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_226_Var);
		final EList<? extends EObject> Expr_226_list = MultiplicativeExpression_226_Var.getExpr();
		Assert.assertNotNull(Expr_226_list);
		Assert.assertEquals(1, Expr_226_list.size());
		final CastExpression CastExpression_227_Var = (CastExpression)Expr_226_list.get(0);
		Assert.assertNotNull(CastExpression_227_Var);
		final UnaryExpression UnaryExpression_228_Var = (UnaryExpression)CastExpression_227_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_228_Var);
		final UnaryOperator UnaryOperator_229_Var = (UnaryOperator)UnaryExpression_228_Var.getOp();
		Assert.assertNotNull(UnaryOperator_229_Var);
		Assert.assertEquals("*", UnaryOperator_229_Var.getOp());
		final CastExpression CastExpression_230_Var = (CastExpression)UnaryExpression_228_Var.getExpr();
		Assert.assertNotNull(CastExpression_230_Var);
		final UnaryExpression UnaryExpression_231_Var = (UnaryExpression)CastExpression_230_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_231_Var);
		final PostfixExpression PostfixExpression_232_Var = (PostfixExpression)UnaryExpression_231_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_232_Var);
		final EList<? extends EObject> Expr_232_list = PostfixExpression_232_Var.getExpr();
		Assert.assertNotNull(Expr_232_list);
		Assert.assertEquals(1, Expr_232_list.size());
		final PrimaryExpression PrimaryExpression_233_Var = (PrimaryExpression)Expr_232_list.get(0);
		Assert.assertNotNull(PrimaryExpression_233_Var);
		Assert.assertEquals("emp", PrimaryExpression_233_Var.getId());
		Assert.assertEquals("[.]", PostfixExpression_212_Var.getDot().toString());
		Assert.assertEquals("[id]", PostfixExpression_212_Var.getId().toString());
		Assert.assertEquals(";", ExpressionStatement_162_Var.getSemi());
		final ExternalDeclaration ExternalDeclaration_234_Var = (ExternalDeclaration)External_1_list.get(4);
		Assert.assertNotNull(ExternalDeclaration_234_Var);
		final FunctionDefHead FunctionDefHead_235_Var = (FunctionDefHead)ExternalDeclaration_234_Var.getFunctiondefHead();
		Assert.assertNotNull(FunctionDefHead_235_Var);
		final DeclarationSpecifiers DeclarationSpecifiers_236_Var = (DeclarationSpecifiers)FunctionDefHead_235_Var.getFunDeclSpecifiers();
		Assert.assertNotNull(DeclarationSpecifiers_236_Var);
		final EList<? extends EObject> DeclarationSpecifier_236_list = DeclarationSpecifiers_236_Var.getDeclarationSpecifier();
		Assert.assertNotNull(DeclarationSpecifier_236_list);
		Assert.assertEquals(1, DeclarationSpecifier_236_list.size());
		final TypeSpecifier TypeSpecifier_237_Var = (TypeSpecifier)DeclarationSpecifier_236_list.get(0);
		Assert.assertNotNull(TypeSpecifier_237_Var);
		Assert.assertEquals("int", TypeSpecifier_237_Var.getName());
		final Declarator Declarator_238_Var = (Declarator)FunctionDefHead_235_Var.getFunDeclarator();
		Assert.assertNotNull(Declarator_238_Var);
		final DirectDeclarator DirectDeclarator_239_Var = (DirectDeclarator)Declarator_238_Var.getDeclarator();
		Assert.assertNotNull(DirectDeclarator_239_Var);
		Assert.assertEquals("main", DirectDeclarator_239_Var.getId());
		final EList<? extends EObject> DeclaratorSuffix_239_list = DirectDeclarator_239_Var.getDeclaratorSuffix();
		Assert.assertNotNull(DeclaratorSuffix_239_list);
		Assert.assertEquals(1, DeclaratorSuffix_239_list.size());
		final DeclaratorSuffix DeclaratorSuffix_240_Var = (DeclaratorSuffix)DeclaratorSuffix_239_list.get(0);
		Assert.assertNotNull(DeclaratorSuffix_240_Var);
		final DirectDeclaratorLastSuffix DirectDeclaratorLastSuffix_241_Var = (DirectDeclaratorLastSuffix)DeclaratorSuffix_240_Var.getLastSuffix();
		Assert.assertNotNull(DirectDeclaratorLastSuffix_241_Var);
		final EList<? extends EObject> ParameterTypeList_241_list = DirectDeclaratorLastSuffix_241_Var.getParameterTypeList();
		Assert.assertNotNull(ParameterTypeList_241_list);
		Assert.assertEquals(1, ParameterTypeList_241_list.size());
		final ParameterTypeList ParameterTypeList_242_Var = (ParameterTypeList)ParameterTypeList_241_list.get(0);
		Assert.assertNotNull(ParameterTypeList_242_Var);
		final ParameterList ParameterList_243_Var = (ParameterList)ParameterTypeList_242_Var.getList();
		Assert.assertNotNull(ParameterList_243_Var);
		final EList<? extends EObject> ParameterDeclaration_243_list = ParameterList_243_Var.getParameterDeclaration();
		Assert.assertNotNull(ParameterDeclaration_243_list);
		Assert.assertEquals(1, ParameterDeclaration_243_list.size());
		final ParameterDeclaration ParameterDeclaration_244_Var = (ParameterDeclaration)ParameterDeclaration_243_list.get(0);
		Assert.assertNotNull(ParameterDeclaration_244_Var);
		final DeclarationSpecifiers DeclarationSpecifiers_245_Var = (DeclarationSpecifiers)ParameterDeclaration_244_Var.getDeclSpecifiers();
		Assert.assertNotNull(DeclarationSpecifiers_245_Var);
		final EList<? extends EObject> DeclarationSpecifier_245_list = DeclarationSpecifiers_245_Var.getDeclarationSpecifier();
		Assert.assertNotNull(DeclarationSpecifier_245_list);
		Assert.assertEquals(1, DeclarationSpecifier_245_list.size());
		final TypeSpecifier TypeSpecifier_246_Var = (TypeSpecifier)DeclarationSpecifier_245_list.get(0);
		Assert.assertNotNull(TypeSpecifier_246_Var);
		Assert.assertEquals("void", TypeSpecifier_246_Var.getName());
		final FunctionDefinition FunctionDefinition_247_Var = (FunctionDefinition)ExternalDeclaration_234_Var.getFunctionDefinition();
		Assert.assertNotNull(FunctionDefinition_247_Var);
		final BodyStatement BodyStatement_248_Var = (BodyStatement)FunctionDefinition_247_Var.getBody();
		Assert.assertNotNull(BodyStatement_248_Var);
		final EList<? extends EObject> BlockList_248_list = BodyStatement_248_Var.getBlockList();
		Assert.assertNotNull(BlockList_248_list);
		Assert.assertEquals(1, BlockList_248_list.size());
		final BlockList BlockList_249_Var = (BlockList)BlockList_248_list.get(0);
		Assert.assertNotNull(BlockList_249_Var);
		final EList<? extends EObject> Declaration_249_list = BlockList_249_Var.getDeclaration();
		Assert.assertNotNull(Declaration_249_list);
		Assert.assertEquals(1, Declaration_249_list.size());
		final Declaration Declaration_250_Var = (Declaration)Declaration_249_list.get(0);
		Assert.assertNotNull(Declaration_250_Var);
		final DeclarationSpecifiers DeclarationSpecifiers_251_Var = (DeclarationSpecifiers)Declaration_250_Var.getSpecifiers();
		Assert.assertNotNull(DeclarationSpecifiers_251_Var);
		final EList<? extends EObject> DeclarationSpecifier_251_list = DeclarationSpecifiers_251_Var.getDeclarationSpecifier();
		Assert.assertNotNull(DeclarationSpecifier_251_list);
		Assert.assertEquals(1, DeclarationSpecifier_251_list.size());
		final TypeSpecifier TypeSpecifier_252_Var = (TypeSpecifier)DeclarationSpecifier_251_list.get(0);
		Assert.assertNotNull(TypeSpecifier_252_Var);
		final TypedefName TypedefName_253_Var = (TypedefName)TypeSpecifier_252_Var.getType();
		Assert.assertNotNull(TypedefName_253_Var);
		Assert.assertEquals("employee", TypedefName_253_Var.getId());
		final EList<? extends EObject> InitDeclaratorList_253_list = Declaration_250_Var.getInitDeclaratorList();
		Assert.assertNotNull(InitDeclaratorList_253_list);
		Assert.assertEquals(1, InitDeclaratorList_253_list.size());
		final InitDeclaratorList InitDeclaratorList_254_Var = (InitDeclaratorList)InitDeclaratorList_253_list.get(0);
		Assert.assertNotNull(InitDeclaratorList_254_Var);
		final EList<? extends EObject> InitDeclarator_254_list = InitDeclaratorList_254_Var.getInitDeclarator();
		Assert.assertNotNull(InitDeclarator_254_list);
		Assert.assertEquals(1, InitDeclarator_254_list.size());
		final InitDeclarator InitDeclarator_255_Var = (InitDeclarator)InitDeclarator_254_list.get(0);
		Assert.assertNotNull(InitDeclarator_255_Var);
		final Declarator Declarator_256_Var = (Declarator)InitDeclarator_255_Var.getDeclarator();
		Assert.assertNotNull(Declarator_256_Var);
		final Pointer Pointer_257_Var = (Pointer)Declarator_256_Var.getPointer();
		Assert.assertNotNull(Pointer_257_Var);
		Assert.assertEquals("[*]", Pointer_257_Var.getStar().toString());
		final DirectDeclarator DirectDeclarator_258_Var = (DirectDeclarator)Declarator_256_Var.getDeclarator();
		Assert.assertNotNull(DirectDeclarator_258_Var);
		Assert.assertEquals("newEmployee", DirectDeclarator_258_Var.getId());
		final Initializer Initializer_259_Var = (Initializer)InitDeclarator_255_Var.getInitializer();
		Assert.assertNotNull(Initializer_259_Var);
		final AssignmentExpression AssignmentExpression_260_Var = (AssignmentExpression)Initializer_259_Var.getExpr();
		Assert.assertNotNull(AssignmentExpression_260_Var);
		final ConditionalExpression ConditionalExpression_261_Var = (ConditionalExpression)AssignmentExpression_260_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_261_Var);
		final LogicalOrExpression LogicalOrExpression_262_Var = (LogicalOrExpression)ConditionalExpression_261_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_262_Var);
		final EList<? extends EObject> Expr_262_list = LogicalOrExpression_262_Var.getExpr();
		Assert.assertNotNull(Expr_262_list);
		Assert.assertEquals(1, Expr_262_list.size());
		final LogicalAndExpression LogicalAndExpression_263_Var = (LogicalAndExpression)Expr_262_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_263_Var);
		final EList<? extends EObject> Expr_263_list = LogicalAndExpression_263_Var.getExpr();
		Assert.assertNotNull(Expr_263_list);
		Assert.assertEquals(1, Expr_263_list.size());
		final InclusiveOrExpression InclusiveOrExpression_264_Var = (InclusiveOrExpression)Expr_263_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_264_Var);
		final EList<? extends EObject> Expr_264_list = InclusiveOrExpression_264_Var.getExpr();
		Assert.assertNotNull(Expr_264_list);
		Assert.assertEquals(1, Expr_264_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_265_Var = (ExclusiveOrExpression)Expr_264_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_265_Var);
		final EList<? extends EObject> Expr_265_list = ExclusiveOrExpression_265_Var.getExpr();
		Assert.assertNotNull(Expr_265_list);
		Assert.assertEquals(1, Expr_265_list.size());
		final AndExpression AndExpression_266_Var = (AndExpression)Expr_265_list.get(0);
		Assert.assertNotNull(AndExpression_266_Var);
		final EList<? extends EObject> Expr_266_list = AndExpression_266_Var.getExpr();
		Assert.assertNotNull(Expr_266_list);
		Assert.assertEquals(1, Expr_266_list.size());
		final EqualityExpression EqualityExpression_267_Var = (EqualityExpression)Expr_266_list.get(0);
		Assert.assertNotNull(EqualityExpression_267_Var);
		final EList<? extends EObject> Expr_267_list = EqualityExpression_267_Var.getExpr();
		Assert.assertNotNull(Expr_267_list);
		Assert.assertEquals(1, Expr_267_list.size());
		final RelationalExpression RelationalExpression_268_Var = (RelationalExpression)Expr_267_list.get(0);
		Assert.assertNotNull(RelationalExpression_268_Var);
		final EList<? extends EObject> Expr_268_list = RelationalExpression_268_Var.getExpr();
		Assert.assertNotNull(Expr_268_list);
		Assert.assertEquals(1, Expr_268_list.size());
		final ShiftExpression ShiftExpression_269_Var = (ShiftExpression)Expr_268_list.get(0);
		Assert.assertNotNull(ShiftExpression_269_Var);
		final EList<? extends EObject> Expr_269_list = ShiftExpression_269_Var.getExpr();
		Assert.assertNotNull(Expr_269_list);
		Assert.assertEquals(1, Expr_269_list.size());
		final AdditiveExpression AdditiveExpression_270_Var = (AdditiveExpression)Expr_269_list.get(0);
		Assert.assertNotNull(AdditiveExpression_270_Var);
		final EList<? extends EObject> Expr_270_list = AdditiveExpression_270_Var.getExpr();
		Assert.assertNotNull(Expr_270_list);
		Assert.assertEquals(1, Expr_270_list.size());
		final MultiplicativeExpression MultiplicativeExpression_271_Var = (MultiplicativeExpression)Expr_270_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_271_Var);
		final EList<? extends EObject> Expr_271_list = MultiplicativeExpression_271_Var.getExpr();
		Assert.assertNotNull(Expr_271_list);
		Assert.assertEquals(1, Expr_271_list.size());
		final CastExpression CastExpression_272_Var = (CastExpression)Expr_271_list.get(0);
		Assert.assertNotNull(CastExpression_272_Var);
		final UnaryExpression UnaryExpression_273_Var = (UnaryExpression)CastExpression_272_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_273_Var);
		final PostfixExpression PostfixExpression_274_Var = (PostfixExpression)UnaryExpression_273_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_274_Var);
		final EList<? extends EObject> Expr_274_list = PostfixExpression_274_Var.getExpr();
		Assert.assertNotNull(Expr_274_list);
		Assert.assertEquals(1, Expr_274_list.size());
		final PrimaryExpression PrimaryExpression_275_Var = (PrimaryExpression)Expr_274_list.get(0);
		Assert.assertNotNull(PrimaryExpression_275_Var);
		Assert.assertEquals("malloc", PrimaryExpression_275_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_275_list = PostfixExpression_274_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_275_list);
		Assert.assertEquals(1, ArgumentExpressionList_275_list.size());
		final ArgumentExpressionList ArgumentExpressionList_276_Var = (ArgumentExpressionList)ArgumentExpressionList_275_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_276_Var);
		final EList<? extends EObject> Expr_276_list = ArgumentExpressionList_276_Var.getExpr();
		Assert.assertNotNull(Expr_276_list);
		Assert.assertEquals(1, Expr_276_list.size());
		final AssignmentExpression AssignmentExpression_277_Var = (AssignmentExpression)Expr_276_list.get(0);
		Assert.assertNotNull(AssignmentExpression_277_Var);
		final ConditionalExpression ConditionalExpression_278_Var = (ConditionalExpression)AssignmentExpression_277_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_278_Var);
		final LogicalOrExpression LogicalOrExpression_279_Var = (LogicalOrExpression)ConditionalExpression_278_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_279_Var);
		final EList<? extends EObject> Expr_279_list = LogicalOrExpression_279_Var.getExpr();
		Assert.assertNotNull(Expr_279_list);
		Assert.assertEquals(1, Expr_279_list.size());
		final LogicalAndExpression LogicalAndExpression_280_Var = (LogicalAndExpression)Expr_279_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_280_Var);
		final EList<? extends EObject> Expr_280_list = LogicalAndExpression_280_Var.getExpr();
		Assert.assertNotNull(Expr_280_list);
		Assert.assertEquals(1, Expr_280_list.size());
		final InclusiveOrExpression InclusiveOrExpression_281_Var = (InclusiveOrExpression)Expr_280_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_281_Var);
		final EList<? extends EObject> Expr_281_list = InclusiveOrExpression_281_Var.getExpr();
		Assert.assertNotNull(Expr_281_list);
		Assert.assertEquals(1, Expr_281_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_282_Var = (ExclusiveOrExpression)Expr_281_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_282_Var);
		final EList<? extends EObject> Expr_282_list = ExclusiveOrExpression_282_Var.getExpr();
		Assert.assertNotNull(Expr_282_list);
		Assert.assertEquals(1, Expr_282_list.size());
		final AndExpression AndExpression_283_Var = (AndExpression)Expr_282_list.get(0);
		Assert.assertNotNull(AndExpression_283_Var);
		final EList<? extends EObject> Expr_283_list = AndExpression_283_Var.getExpr();
		Assert.assertNotNull(Expr_283_list);
		Assert.assertEquals(1, Expr_283_list.size());
		final EqualityExpression EqualityExpression_284_Var = (EqualityExpression)Expr_283_list.get(0);
		Assert.assertNotNull(EqualityExpression_284_Var);
		final EList<? extends EObject> Expr_284_list = EqualityExpression_284_Var.getExpr();
		Assert.assertNotNull(Expr_284_list);
		Assert.assertEquals(1, Expr_284_list.size());
		final RelationalExpression RelationalExpression_285_Var = (RelationalExpression)Expr_284_list.get(0);
		Assert.assertNotNull(RelationalExpression_285_Var);
		final EList<? extends EObject> Expr_285_list = RelationalExpression_285_Var.getExpr();
		Assert.assertNotNull(Expr_285_list);
		Assert.assertEquals(1, Expr_285_list.size());
		final ShiftExpression ShiftExpression_286_Var = (ShiftExpression)Expr_285_list.get(0);
		Assert.assertNotNull(ShiftExpression_286_Var);
		final EList<? extends EObject> Expr_286_list = ShiftExpression_286_Var.getExpr();
		Assert.assertNotNull(Expr_286_list);
		Assert.assertEquals(1, Expr_286_list.size());
		final AdditiveExpression AdditiveExpression_287_Var = (AdditiveExpression)Expr_286_list.get(0);
		Assert.assertNotNull(AdditiveExpression_287_Var);
		final EList<? extends EObject> Expr_287_list = AdditiveExpression_287_Var.getExpr();
		Assert.assertNotNull(Expr_287_list);
		Assert.assertEquals(1, Expr_287_list.size());
		final MultiplicativeExpression MultiplicativeExpression_288_Var = (MultiplicativeExpression)Expr_287_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_288_Var);
		final EList<? extends EObject> Expr_288_list = MultiplicativeExpression_288_Var.getExpr();
		Assert.assertNotNull(Expr_288_list);
		Assert.assertEquals(1, Expr_288_list.size());
		final CastExpression CastExpression_289_Var = (CastExpression)Expr_288_list.get(0);
		Assert.assertNotNull(CastExpression_289_Var);
		final UnaryExpression UnaryExpression_290_Var = (UnaryExpression)CastExpression_289_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_290_Var);
		Assert.assertEquals("sizeof", UnaryExpression_290_Var.getSizeOf());
		final TypeName TypeName_291_Var = (TypeName)UnaryExpression_290_Var.getTypeName();
		Assert.assertNotNull(TypeName_291_Var);
		final SpecifierQualifierList SpecifierQualifierList_292_Var = (SpecifierQualifierList)TypeName_291_Var.getList();
		Assert.assertNotNull(SpecifierQualifierList_292_Var);
		final EList<? extends EObject> TypeSpecifier_292_list = SpecifierQualifierList_292_Var.getTypeSpecifier();
		Assert.assertNotNull(TypeSpecifier_292_list);
		Assert.assertEquals(1, TypeSpecifier_292_list.size());
		final TypeSpecifier TypeSpecifier_293_Var = (TypeSpecifier)TypeSpecifier_292_list.get(0);
		Assert.assertNotNull(TypeSpecifier_293_Var);
		final TypedefName TypedefName_294_Var = (TypedefName)TypeSpecifier_293_Var.getType();
		Assert.assertNotNull(TypedefName_294_Var);
		Assert.assertEquals("employee", TypedefName_294_Var.getId());
		final EList<? extends EObject> Statement_294_list = BlockList_249_Var.getStatement();
		Assert.assertNotNull(Statement_294_list);
		Assert.assertEquals(6, Statement_294_list.size());
		final Statement Statement_295_Var = (Statement)Statement_294_list.get(0);
		Assert.assertNotNull(Statement_295_Var);
		final SelectionStatement SelectionStatement_296_Var = (SelectionStatement)Statement_295_Var.getStmt();
		Assert.assertNotNull(SelectionStatement_296_Var);
		Assert.assertEquals("if", SelectionStatement_296_Var.getIf());
		final Expression Expression_297_Var = (Expression)SelectionStatement_296_Var.getExpr();
		Assert.assertNotNull(Expression_297_Var);
		final EList<? extends EObject> ExprExpr_297_list = Expression_297_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_297_list);
		Assert.assertEquals(1, ExprExpr_297_list.size());
		final AssignmentExpression AssignmentExpression_298_Var = (AssignmentExpression)ExprExpr_297_list.get(0);
		Assert.assertNotNull(AssignmentExpression_298_Var);
		final ConditionalExpression ConditionalExpression_299_Var = (ConditionalExpression)AssignmentExpression_298_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_299_Var);
		final LogicalOrExpression LogicalOrExpression_300_Var = (LogicalOrExpression)ConditionalExpression_299_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_300_Var);
		final EList<? extends EObject> Expr_300_list = LogicalOrExpression_300_Var.getExpr();
		Assert.assertNotNull(Expr_300_list);
		Assert.assertEquals(1, Expr_300_list.size());
		final LogicalAndExpression LogicalAndExpression_301_Var = (LogicalAndExpression)Expr_300_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_301_Var);
		final EList<? extends EObject> Expr_301_list = LogicalAndExpression_301_Var.getExpr();
		Assert.assertNotNull(Expr_301_list);
		Assert.assertEquals(1, Expr_301_list.size());
		final InclusiveOrExpression InclusiveOrExpression_302_Var = (InclusiveOrExpression)Expr_301_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_302_Var);
		final EList<? extends EObject> Expr_302_list = InclusiveOrExpression_302_Var.getExpr();
		Assert.assertNotNull(Expr_302_list);
		Assert.assertEquals(1, Expr_302_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_303_Var = (ExclusiveOrExpression)Expr_302_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_303_Var);
		final EList<? extends EObject> Expr_303_list = ExclusiveOrExpression_303_Var.getExpr();
		Assert.assertNotNull(Expr_303_list);
		Assert.assertEquals(1, Expr_303_list.size());
		final AndExpression AndExpression_304_Var = (AndExpression)Expr_303_list.get(0);
		Assert.assertNotNull(AndExpression_304_Var);
		final EList<? extends EObject> Expr_304_list = AndExpression_304_Var.getExpr();
		Assert.assertNotNull(Expr_304_list);
		Assert.assertEquals(1, Expr_304_list.size());
		final EqualityExpression EqualityExpression_305_Var = (EqualityExpression)Expr_304_list.get(0);
		Assert.assertNotNull(EqualityExpression_305_Var);
		Assert.assertEquals("[==]", EqualityExpression_305_Var.getOp().toString());
		final EList<? extends EObject> Expr_305_list = EqualityExpression_305_Var.getExpr();
		Assert.assertNotNull(Expr_305_list);
		Assert.assertEquals(2, Expr_305_list.size());
		final RelationalExpression RelationalExpression_306_Var = (RelationalExpression)Expr_305_list.get(0);
		Assert.assertNotNull(RelationalExpression_306_Var);
		final EList<? extends EObject> Expr_306_list = RelationalExpression_306_Var.getExpr();
		Assert.assertNotNull(Expr_306_list);
		Assert.assertEquals(1, Expr_306_list.size());
		final ShiftExpression ShiftExpression_307_Var = (ShiftExpression)Expr_306_list.get(0);
		Assert.assertNotNull(ShiftExpression_307_Var);
		final EList<? extends EObject> Expr_307_list = ShiftExpression_307_Var.getExpr();
		Assert.assertNotNull(Expr_307_list);
		Assert.assertEquals(1, Expr_307_list.size());
		final AdditiveExpression AdditiveExpression_308_Var = (AdditiveExpression)Expr_307_list.get(0);
		Assert.assertNotNull(AdditiveExpression_308_Var);
		final EList<? extends EObject> Expr_308_list = AdditiveExpression_308_Var.getExpr();
		Assert.assertNotNull(Expr_308_list);
		Assert.assertEquals(1, Expr_308_list.size());
		final MultiplicativeExpression MultiplicativeExpression_309_Var = (MultiplicativeExpression)Expr_308_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_309_Var);
		final EList<? extends EObject> Expr_309_list = MultiplicativeExpression_309_Var.getExpr();
		Assert.assertNotNull(Expr_309_list);
		Assert.assertEquals(1, Expr_309_list.size());
		final CastExpression CastExpression_310_Var = (CastExpression)Expr_309_list.get(0);
		Assert.assertNotNull(CastExpression_310_Var);
		final UnaryExpression UnaryExpression_311_Var = (UnaryExpression)CastExpression_310_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_311_Var);
		final PostfixExpression PostfixExpression_312_Var = (PostfixExpression)UnaryExpression_311_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_312_Var);
		final EList<? extends EObject> Expr_312_list = PostfixExpression_312_Var.getExpr();
		Assert.assertNotNull(Expr_312_list);
		Assert.assertEquals(1, Expr_312_list.size());
		final PrimaryExpression PrimaryExpression_313_Var = (PrimaryExpression)Expr_312_list.get(0);
		Assert.assertNotNull(PrimaryExpression_313_Var);
		Assert.assertEquals("newEmployee", PrimaryExpression_313_Var.getId());
		final RelationalExpression RelationalExpression_314_Var = (RelationalExpression)Expr_305_list.get(1);
		Assert.assertNotNull(RelationalExpression_314_Var);
		final EList<? extends EObject> Expr_314_list = RelationalExpression_314_Var.getExpr();
		Assert.assertNotNull(Expr_314_list);
		Assert.assertEquals(1, Expr_314_list.size());
		final ShiftExpression ShiftExpression_315_Var = (ShiftExpression)Expr_314_list.get(0);
		Assert.assertNotNull(ShiftExpression_315_Var);
		final EList<? extends EObject> Expr_315_list = ShiftExpression_315_Var.getExpr();
		Assert.assertNotNull(Expr_315_list);
		Assert.assertEquals(1, Expr_315_list.size());
		final AdditiveExpression AdditiveExpression_316_Var = (AdditiveExpression)Expr_315_list.get(0);
		Assert.assertNotNull(AdditiveExpression_316_Var);
		final EList<? extends EObject> Expr_316_list = AdditiveExpression_316_Var.getExpr();
		Assert.assertNotNull(Expr_316_list);
		Assert.assertEquals(1, Expr_316_list.size());
		final MultiplicativeExpression MultiplicativeExpression_317_Var = (MultiplicativeExpression)Expr_316_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_317_Var);
		final EList<? extends EObject> Expr_317_list = MultiplicativeExpression_317_Var.getExpr();
		Assert.assertNotNull(Expr_317_list);
		Assert.assertEquals(1, Expr_317_list.size());
		final CastExpression CastExpression_318_Var = (CastExpression)Expr_317_list.get(0);
		Assert.assertNotNull(CastExpression_318_Var);
		final UnaryExpression UnaryExpression_319_Var = (UnaryExpression)CastExpression_318_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_319_Var);
		final PostfixExpression PostfixExpression_320_Var = (PostfixExpression)UnaryExpression_319_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_320_Var);
		final EList<? extends EObject> Expr_320_list = PostfixExpression_320_Var.getExpr();
		Assert.assertNotNull(Expr_320_list);
		Assert.assertEquals(1, Expr_320_list.size());
		final PrimaryExpression PrimaryExpression_321_Var = (PrimaryExpression)Expr_320_list.get(0);
		Assert.assertNotNull(PrimaryExpression_321_Var);
		Assert.assertEquals("NULL", PrimaryExpression_321_Var.getId());
		final Statement Statement_322_Var = (Statement)SelectionStatement_296_Var.getIfStatement();
		Assert.assertNotNull(Statement_322_Var);
		final CompoundStatement CompoundStatement_323_Var = (CompoundStatement)Statement_322_Var.getStmt();
		Assert.assertNotNull(CompoundStatement_323_Var);
		final BodyStatement BodyStatement_324_Var = (BodyStatement)CompoundStatement_323_Var.getBody();
		Assert.assertNotNull(BodyStatement_324_Var);
		final EList<? extends EObject> BlockList_324_list = BodyStatement_324_Var.getBlockList();
		Assert.assertNotNull(BlockList_324_list);
		Assert.assertEquals(1, BlockList_324_list.size());
		final BlockList BlockList_325_Var = (BlockList)BlockList_324_list.get(0);
		Assert.assertNotNull(BlockList_325_Var);
		final EList<? extends EObject> Statement_325_list = BlockList_325_Var.getStatement();
		Assert.assertNotNull(Statement_325_list);
		Assert.assertEquals(2, Statement_325_list.size());
		final Statement Statement_326_Var = (Statement)Statement_325_list.get(0);
		Assert.assertNotNull(Statement_326_Var);
		final ExpressionStatement ExpressionStatement_327_Var = (ExpressionStatement)Statement_326_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_327_Var);
		final Expression Expression_328_Var = (Expression)ExpressionStatement_327_Var.getExpression();
		Assert.assertNotNull(Expression_328_Var);
		final EList<? extends EObject> ExprExpr_328_list = Expression_328_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_328_list);
		Assert.assertEquals(1, ExprExpr_328_list.size());
		final AssignmentExpression AssignmentExpression_329_Var = (AssignmentExpression)ExprExpr_328_list.get(0);
		Assert.assertNotNull(AssignmentExpression_329_Var);
		final ConditionalExpression ConditionalExpression_330_Var = (ConditionalExpression)AssignmentExpression_329_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_330_Var);
		final LogicalOrExpression LogicalOrExpression_331_Var = (LogicalOrExpression)ConditionalExpression_330_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_331_Var);
		final EList<? extends EObject> Expr_331_list = LogicalOrExpression_331_Var.getExpr();
		Assert.assertNotNull(Expr_331_list);
		Assert.assertEquals(1, Expr_331_list.size());
		final LogicalAndExpression LogicalAndExpression_332_Var = (LogicalAndExpression)Expr_331_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_332_Var);
		final EList<? extends EObject> Expr_332_list = LogicalAndExpression_332_Var.getExpr();
		Assert.assertNotNull(Expr_332_list);
		Assert.assertEquals(1, Expr_332_list.size());
		final InclusiveOrExpression InclusiveOrExpression_333_Var = (InclusiveOrExpression)Expr_332_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_333_Var);
		final EList<? extends EObject> Expr_333_list = InclusiveOrExpression_333_Var.getExpr();
		Assert.assertNotNull(Expr_333_list);
		Assert.assertEquals(1, Expr_333_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_334_Var = (ExclusiveOrExpression)Expr_333_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_334_Var);
		final EList<? extends EObject> Expr_334_list = ExclusiveOrExpression_334_Var.getExpr();
		Assert.assertNotNull(Expr_334_list);
		Assert.assertEquals(1, Expr_334_list.size());
		final AndExpression AndExpression_335_Var = (AndExpression)Expr_334_list.get(0);
		Assert.assertNotNull(AndExpression_335_Var);
		final EList<? extends EObject> Expr_335_list = AndExpression_335_Var.getExpr();
		Assert.assertNotNull(Expr_335_list);
		Assert.assertEquals(1, Expr_335_list.size());
		final EqualityExpression EqualityExpression_336_Var = (EqualityExpression)Expr_335_list.get(0);
		Assert.assertNotNull(EqualityExpression_336_Var);
		final EList<? extends EObject> Expr_336_list = EqualityExpression_336_Var.getExpr();
		Assert.assertNotNull(Expr_336_list);
		Assert.assertEquals(1, Expr_336_list.size());
		final RelationalExpression RelationalExpression_337_Var = (RelationalExpression)Expr_336_list.get(0);
		Assert.assertNotNull(RelationalExpression_337_Var);
		final EList<? extends EObject> Expr_337_list = RelationalExpression_337_Var.getExpr();
		Assert.assertNotNull(Expr_337_list);
		Assert.assertEquals(1, Expr_337_list.size());
		final ShiftExpression ShiftExpression_338_Var = (ShiftExpression)Expr_337_list.get(0);
		Assert.assertNotNull(ShiftExpression_338_Var);
		final EList<? extends EObject> Expr_338_list = ShiftExpression_338_Var.getExpr();
		Assert.assertNotNull(Expr_338_list);
		Assert.assertEquals(1, Expr_338_list.size());
		final AdditiveExpression AdditiveExpression_339_Var = (AdditiveExpression)Expr_338_list.get(0);
		Assert.assertNotNull(AdditiveExpression_339_Var);
		final EList<? extends EObject> Expr_339_list = AdditiveExpression_339_Var.getExpr();
		Assert.assertNotNull(Expr_339_list);
		Assert.assertEquals(1, Expr_339_list.size());
		final MultiplicativeExpression MultiplicativeExpression_340_Var = (MultiplicativeExpression)Expr_339_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_340_Var);
		final EList<? extends EObject> Expr_340_list = MultiplicativeExpression_340_Var.getExpr();
		Assert.assertNotNull(Expr_340_list);
		Assert.assertEquals(1, Expr_340_list.size());
		final CastExpression CastExpression_341_Var = (CastExpression)Expr_340_list.get(0);
		Assert.assertNotNull(CastExpression_341_Var);
		final UnaryExpression UnaryExpression_342_Var = (UnaryExpression)CastExpression_341_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_342_Var);
		final PostfixExpression PostfixExpression_343_Var = (PostfixExpression)UnaryExpression_342_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_343_Var);
		final EList<? extends EObject> Expr_343_list = PostfixExpression_343_Var.getExpr();
		Assert.assertNotNull(Expr_343_list);
		Assert.assertEquals(1, Expr_343_list.size());
		final PrimaryExpression PrimaryExpression_344_Var = (PrimaryExpression)Expr_343_list.get(0);
		Assert.assertNotNull(PrimaryExpression_344_Var);
		Assert.assertEquals("printf", PrimaryExpression_344_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_344_list = PostfixExpression_343_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_344_list);
		Assert.assertEquals(1, ArgumentExpressionList_344_list.size());
		final ArgumentExpressionList ArgumentExpressionList_345_Var = (ArgumentExpressionList)ArgumentExpressionList_344_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_345_Var);
		final EList<? extends EObject> Expr_345_list = ArgumentExpressionList_345_Var.getExpr();
		Assert.assertNotNull(Expr_345_list);
		Assert.assertEquals(1, Expr_345_list.size());
		final AssignmentExpression AssignmentExpression_346_Var = (AssignmentExpression)Expr_345_list.get(0);
		Assert.assertNotNull(AssignmentExpression_346_Var);
		final ConditionalExpression ConditionalExpression_347_Var = (ConditionalExpression)AssignmentExpression_346_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_347_Var);
		final LogicalOrExpression LogicalOrExpression_348_Var = (LogicalOrExpression)ConditionalExpression_347_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_348_Var);
		final EList<? extends EObject> Expr_348_list = LogicalOrExpression_348_Var.getExpr();
		Assert.assertNotNull(Expr_348_list);
		Assert.assertEquals(1, Expr_348_list.size());
		final LogicalAndExpression LogicalAndExpression_349_Var = (LogicalAndExpression)Expr_348_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_349_Var);
		final EList<? extends EObject> Expr_349_list = LogicalAndExpression_349_Var.getExpr();
		Assert.assertNotNull(Expr_349_list);
		Assert.assertEquals(1, Expr_349_list.size());
		final InclusiveOrExpression InclusiveOrExpression_350_Var = (InclusiveOrExpression)Expr_349_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_350_Var);
		final EList<? extends EObject> Expr_350_list = InclusiveOrExpression_350_Var.getExpr();
		Assert.assertNotNull(Expr_350_list);
		Assert.assertEquals(1, Expr_350_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_351_Var = (ExclusiveOrExpression)Expr_350_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_351_Var);
		final EList<? extends EObject> Expr_351_list = ExclusiveOrExpression_351_Var.getExpr();
		Assert.assertNotNull(Expr_351_list);
		Assert.assertEquals(1, Expr_351_list.size());
		final AndExpression AndExpression_352_Var = (AndExpression)Expr_351_list.get(0);
		Assert.assertNotNull(AndExpression_352_Var);
		final EList<? extends EObject> Expr_352_list = AndExpression_352_Var.getExpr();
		Assert.assertNotNull(Expr_352_list);
		Assert.assertEquals(1, Expr_352_list.size());
		final EqualityExpression EqualityExpression_353_Var = (EqualityExpression)Expr_352_list.get(0);
		Assert.assertNotNull(EqualityExpression_353_Var);
		final EList<? extends EObject> Expr_353_list = EqualityExpression_353_Var.getExpr();
		Assert.assertNotNull(Expr_353_list);
		Assert.assertEquals(1, Expr_353_list.size());
		final RelationalExpression RelationalExpression_354_Var = (RelationalExpression)Expr_353_list.get(0);
		Assert.assertNotNull(RelationalExpression_354_Var);
		final EList<? extends EObject> Expr_354_list = RelationalExpression_354_Var.getExpr();
		Assert.assertNotNull(Expr_354_list);
		Assert.assertEquals(1, Expr_354_list.size());
		final ShiftExpression ShiftExpression_355_Var = (ShiftExpression)Expr_354_list.get(0);
		Assert.assertNotNull(ShiftExpression_355_Var);
		final EList<? extends EObject> Expr_355_list = ShiftExpression_355_Var.getExpr();
		Assert.assertNotNull(Expr_355_list);
		Assert.assertEquals(1, Expr_355_list.size());
		final AdditiveExpression AdditiveExpression_356_Var = (AdditiveExpression)Expr_355_list.get(0);
		Assert.assertNotNull(AdditiveExpression_356_Var);
		final EList<? extends EObject> Expr_356_list = AdditiveExpression_356_Var.getExpr();
		Assert.assertNotNull(Expr_356_list);
		Assert.assertEquals(1, Expr_356_list.size());
		final MultiplicativeExpression MultiplicativeExpression_357_Var = (MultiplicativeExpression)Expr_356_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_357_Var);
		final EList<? extends EObject> Expr_357_list = MultiplicativeExpression_357_Var.getExpr();
		Assert.assertNotNull(Expr_357_list);
		Assert.assertEquals(1, Expr_357_list.size());
		final CastExpression CastExpression_358_Var = (CastExpression)Expr_357_list.get(0);
		Assert.assertNotNull(CastExpression_358_Var);
		final UnaryExpression UnaryExpression_359_Var = (UnaryExpression)CastExpression_358_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_359_Var);
		final PostfixExpression PostfixExpression_360_Var = (PostfixExpression)UnaryExpression_359_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_360_Var);
		final EList<? extends EObject> Expr_360_list = PostfixExpression_360_Var.getExpr();
		Assert.assertNotNull(Expr_360_list);
		Assert.assertEquals(1, Expr_360_list.size());
		final PrimaryExpression PrimaryExpression_361_Var = (PrimaryExpression)Expr_360_list.get(0);
		Assert.assertNotNull(PrimaryExpression_361_Var);
		final Constant Constant_362_Var = (Constant)PrimaryExpression_361_Var.getConst();
		Assert.assertNotNull(Constant_362_Var);
		Assert.assertEquals("\"Could not reserve space for new employee!\\n\"", Constant_362_Var.getStr());
		Assert.assertEquals(";", ExpressionStatement_327_Var.getSemi());
		final Statement Statement_363_Var = (Statement)Statement_325_list.get(1);
		Assert.assertNotNull(Statement_363_Var);
		final JumpStatement JumpStatement_364_Var = (JumpStatement)Statement_363_Var.getStmt();
		Assert.assertNotNull(JumpStatement_364_Var);
		final Expression Expression_365_Var = (Expression)JumpStatement_364_Var.getExpr();
		Assert.assertNotNull(Expression_365_Var);
		final EList<? extends EObject> ExprExpr_365_list = Expression_365_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_365_list);
		Assert.assertEquals(1, ExprExpr_365_list.size());
		final AssignmentExpression AssignmentExpression_366_Var = (AssignmentExpression)ExprExpr_365_list.get(0);
		Assert.assertNotNull(AssignmentExpression_366_Var);
		final ConditionalExpression ConditionalExpression_367_Var = (ConditionalExpression)AssignmentExpression_366_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_367_Var);
		final LogicalOrExpression LogicalOrExpression_368_Var = (LogicalOrExpression)ConditionalExpression_367_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_368_Var);
		final EList<? extends EObject> Expr_368_list = LogicalOrExpression_368_Var.getExpr();
		Assert.assertNotNull(Expr_368_list);
		Assert.assertEquals(1, Expr_368_list.size());
		final LogicalAndExpression LogicalAndExpression_369_Var = (LogicalAndExpression)Expr_368_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_369_Var);
		final EList<? extends EObject> Expr_369_list = LogicalAndExpression_369_Var.getExpr();
		Assert.assertNotNull(Expr_369_list);
		Assert.assertEquals(1, Expr_369_list.size());
		final InclusiveOrExpression InclusiveOrExpression_370_Var = (InclusiveOrExpression)Expr_369_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_370_Var);
		final EList<? extends EObject> Expr_370_list = InclusiveOrExpression_370_Var.getExpr();
		Assert.assertNotNull(Expr_370_list);
		Assert.assertEquals(1, Expr_370_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_371_Var = (ExclusiveOrExpression)Expr_370_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_371_Var);
		final EList<? extends EObject> Expr_371_list = ExclusiveOrExpression_371_Var.getExpr();
		Assert.assertNotNull(Expr_371_list);
		Assert.assertEquals(1, Expr_371_list.size());
		final AndExpression AndExpression_372_Var = (AndExpression)Expr_371_list.get(0);
		Assert.assertNotNull(AndExpression_372_Var);
		final EList<? extends EObject> Expr_372_list = AndExpression_372_Var.getExpr();
		Assert.assertNotNull(Expr_372_list);
		Assert.assertEquals(1, Expr_372_list.size());
		final EqualityExpression EqualityExpression_373_Var = (EqualityExpression)Expr_372_list.get(0);
		Assert.assertNotNull(EqualityExpression_373_Var);
		final EList<? extends EObject> Expr_373_list = EqualityExpression_373_Var.getExpr();
		Assert.assertNotNull(Expr_373_list);
		Assert.assertEquals(1, Expr_373_list.size());
		final RelationalExpression RelationalExpression_374_Var = (RelationalExpression)Expr_373_list.get(0);
		Assert.assertNotNull(RelationalExpression_374_Var);
		final EList<? extends EObject> Expr_374_list = RelationalExpression_374_Var.getExpr();
		Assert.assertNotNull(Expr_374_list);
		Assert.assertEquals(1, Expr_374_list.size());
		final ShiftExpression ShiftExpression_375_Var = (ShiftExpression)Expr_374_list.get(0);
		Assert.assertNotNull(ShiftExpression_375_Var);
		final EList<? extends EObject> Expr_375_list = ShiftExpression_375_Var.getExpr();
		Assert.assertNotNull(Expr_375_list);
		Assert.assertEquals(1, Expr_375_list.size());
		final AdditiveExpression AdditiveExpression_376_Var = (AdditiveExpression)Expr_375_list.get(0);
		Assert.assertNotNull(AdditiveExpression_376_Var);
		final EList<? extends EObject> Expr_376_list = AdditiveExpression_376_Var.getExpr();
		Assert.assertNotNull(Expr_376_list);
		Assert.assertEquals(1, Expr_376_list.size());
		final MultiplicativeExpression MultiplicativeExpression_377_Var = (MultiplicativeExpression)Expr_376_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_377_Var);
		final EList<? extends EObject> Expr_377_list = MultiplicativeExpression_377_Var.getExpr();
		Assert.assertNotNull(Expr_377_list);
		Assert.assertEquals(1, Expr_377_list.size());
		final CastExpression CastExpression_378_Var = (CastExpression)Expr_377_list.get(0);
		Assert.assertNotNull(CastExpression_378_Var);
		final UnaryExpression UnaryExpression_379_Var = (UnaryExpression)CastExpression_378_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_379_Var);
		final UnaryOperator UnaryOperator_380_Var = (UnaryOperator)UnaryExpression_379_Var.getOp();
		Assert.assertNotNull(UnaryOperator_380_Var);
		Assert.assertEquals("-", UnaryOperator_380_Var.getOp());
		final CastExpression CastExpression_381_Var = (CastExpression)UnaryExpression_379_Var.getExpr();
		Assert.assertNotNull(CastExpression_381_Var);
		final UnaryExpression UnaryExpression_382_Var = (UnaryExpression)CastExpression_381_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_382_Var);
		final PostfixExpression PostfixExpression_383_Var = (PostfixExpression)UnaryExpression_382_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_383_Var);
		final EList<? extends EObject> Expr_383_list = PostfixExpression_383_Var.getExpr();
		Assert.assertNotNull(Expr_383_list);
		Assert.assertEquals(1, Expr_383_list.size());
		final PrimaryExpression PrimaryExpression_384_Var = (PrimaryExpression)Expr_383_list.get(0);
		Assert.assertNotNull(PrimaryExpression_384_Var);
		final Constant Constant_385_Var = (Constant)PrimaryExpression_384_Var.getConst();
		Assert.assertNotNull(Constant_385_Var);
		Assert.assertEquals("1", Constant_385_Var.getDec());
		Assert.assertEquals("return", JumpStatement_364_Var.getReturn());
		Assert.assertEquals(";", JumpStatement_364_Var.getSemi());
		final Statement Statement_386_Var = (Statement)Statement_294_list.get(1);
		Assert.assertNotNull(Statement_386_Var);
		final ExpressionStatement ExpressionStatement_387_Var = (ExpressionStatement)Statement_386_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_387_Var);
		final Expression Expression_388_Var = (Expression)ExpressionStatement_387_Var.getExpression();
		Assert.assertNotNull(Expression_388_Var);
		final EList<? extends EObject> ExprExpr_388_list = Expression_388_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_388_list);
		Assert.assertEquals(1, ExprExpr_388_list.size());
		final AssignmentExpression AssignmentExpression_389_Var = (AssignmentExpression)ExprExpr_388_list.get(0);
		Assert.assertNotNull(AssignmentExpression_389_Var);
		final ConditionalExpression ConditionalExpression_390_Var = (ConditionalExpression)AssignmentExpression_389_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_390_Var);
		final LogicalOrExpression LogicalOrExpression_391_Var = (LogicalOrExpression)ConditionalExpression_390_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_391_Var);
		final EList<? extends EObject> Expr_391_list = LogicalOrExpression_391_Var.getExpr();
		Assert.assertNotNull(Expr_391_list);
		Assert.assertEquals(1, Expr_391_list.size());
		final LogicalAndExpression LogicalAndExpression_392_Var = (LogicalAndExpression)Expr_391_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_392_Var);
		final EList<? extends EObject> Expr_392_list = LogicalAndExpression_392_Var.getExpr();
		Assert.assertNotNull(Expr_392_list);
		Assert.assertEquals(1, Expr_392_list.size());
		final InclusiveOrExpression InclusiveOrExpression_393_Var = (InclusiveOrExpression)Expr_392_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_393_Var);
		final EList<? extends EObject> Expr_393_list = InclusiveOrExpression_393_Var.getExpr();
		Assert.assertNotNull(Expr_393_list);
		Assert.assertEquals(1, Expr_393_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_394_Var = (ExclusiveOrExpression)Expr_393_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_394_Var);
		final EList<? extends EObject> Expr_394_list = ExclusiveOrExpression_394_Var.getExpr();
		Assert.assertNotNull(Expr_394_list);
		Assert.assertEquals(1, Expr_394_list.size());
		final AndExpression AndExpression_395_Var = (AndExpression)Expr_394_list.get(0);
		Assert.assertNotNull(AndExpression_395_Var);
		final EList<? extends EObject> Expr_395_list = AndExpression_395_Var.getExpr();
		Assert.assertNotNull(Expr_395_list);
		Assert.assertEquals(1, Expr_395_list.size());
		final EqualityExpression EqualityExpression_396_Var = (EqualityExpression)Expr_395_list.get(0);
		Assert.assertNotNull(EqualityExpression_396_Var);
		final EList<? extends EObject> Expr_396_list = EqualityExpression_396_Var.getExpr();
		Assert.assertNotNull(Expr_396_list);
		Assert.assertEquals(1, Expr_396_list.size());
		final RelationalExpression RelationalExpression_397_Var = (RelationalExpression)Expr_396_list.get(0);
		Assert.assertNotNull(RelationalExpression_397_Var);
		final EList<? extends EObject> Expr_397_list = RelationalExpression_397_Var.getExpr();
		Assert.assertNotNull(Expr_397_list);
		Assert.assertEquals(1, Expr_397_list.size());
		final ShiftExpression ShiftExpression_398_Var = (ShiftExpression)Expr_397_list.get(0);
		Assert.assertNotNull(ShiftExpression_398_Var);
		final EList<? extends EObject> Expr_398_list = ShiftExpression_398_Var.getExpr();
		Assert.assertNotNull(Expr_398_list);
		Assert.assertEquals(1, Expr_398_list.size());
		final AdditiveExpression AdditiveExpression_399_Var = (AdditiveExpression)Expr_398_list.get(0);
		Assert.assertNotNull(AdditiveExpression_399_Var);
		final EList<? extends EObject> Expr_399_list = AdditiveExpression_399_Var.getExpr();
		Assert.assertNotNull(Expr_399_list);
		Assert.assertEquals(1, Expr_399_list.size());
		final MultiplicativeExpression MultiplicativeExpression_400_Var = (MultiplicativeExpression)Expr_399_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_400_Var);
		final EList<? extends EObject> Expr_400_list = MultiplicativeExpression_400_Var.getExpr();
		Assert.assertNotNull(Expr_400_list);
		Assert.assertEquals(1, Expr_400_list.size());
		final CastExpression CastExpression_401_Var = (CastExpression)Expr_400_list.get(0);
		Assert.assertNotNull(CastExpression_401_Var);
		final UnaryExpression UnaryExpression_402_Var = (UnaryExpression)CastExpression_401_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_402_Var);
		final PostfixExpression PostfixExpression_403_Var = (PostfixExpression)UnaryExpression_402_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_403_Var);
		final EList<? extends EObject> Expr_403_list = PostfixExpression_403_Var.getExpr();
		Assert.assertNotNull(Expr_403_list);
		Assert.assertEquals(1, Expr_403_list.size());
		final PrimaryExpression PrimaryExpression_404_Var = (PrimaryExpression)Expr_403_list.get(0);
		Assert.assertNotNull(PrimaryExpression_404_Var);
		Assert.assertEquals("print", PrimaryExpression_404_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_404_list = PostfixExpression_403_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_404_list);
		Assert.assertEquals(1, ArgumentExpressionList_404_list.size());
		final ArgumentExpressionList ArgumentExpressionList_405_Var = (ArgumentExpressionList)ArgumentExpressionList_404_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_405_Var);
		final EList<? extends EObject> Expr_405_list = ArgumentExpressionList_405_Var.getExpr();
		Assert.assertNotNull(Expr_405_list);
		Assert.assertEquals(1, Expr_405_list.size());
		final AssignmentExpression AssignmentExpression_406_Var = (AssignmentExpression)Expr_405_list.get(0);
		Assert.assertNotNull(AssignmentExpression_406_Var);
		final ConditionalExpression ConditionalExpression_407_Var = (ConditionalExpression)AssignmentExpression_406_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_407_Var);
		final LogicalOrExpression LogicalOrExpression_408_Var = (LogicalOrExpression)ConditionalExpression_407_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_408_Var);
		final EList<? extends EObject> Expr_408_list = LogicalOrExpression_408_Var.getExpr();
		Assert.assertNotNull(Expr_408_list);
		Assert.assertEquals(1, Expr_408_list.size());
		final LogicalAndExpression LogicalAndExpression_409_Var = (LogicalAndExpression)Expr_408_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_409_Var);
		final EList<? extends EObject> Expr_409_list = LogicalAndExpression_409_Var.getExpr();
		Assert.assertNotNull(Expr_409_list);
		Assert.assertEquals(1, Expr_409_list.size());
		final InclusiveOrExpression InclusiveOrExpression_410_Var = (InclusiveOrExpression)Expr_409_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_410_Var);
		final EList<? extends EObject> Expr_410_list = InclusiveOrExpression_410_Var.getExpr();
		Assert.assertNotNull(Expr_410_list);
		Assert.assertEquals(1, Expr_410_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_411_Var = (ExclusiveOrExpression)Expr_410_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_411_Var);
		final EList<? extends EObject> Expr_411_list = ExclusiveOrExpression_411_Var.getExpr();
		Assert.assertNotNull(Expr_411_list);
		Assert.assertEquals(1, Expr_411_list.size());
		final AndExpression AndExpression_412_Var = (AndExpression)Expr_411_list.get(0);
		Assert.assertNotNull(AndExpression_412_Var);
		final EList<? extends EObject> Expr_412_list = AndExpression_412_Var.getExpr();
		Assert.assertNotNull(Expr_412_list);
		Assert.assertEquals(1, Expr_412_list.size());
		final EqualityExpression EqualityExpression_413_Var = (EqualityExpression)Expr_412_list.get(0);
		Assert.assertNotNull(EqualityExpression_413_Var);
		final EList<? extends EObject> Expr_413_list = EqualityExpression_413_Var.getExpr();
		Assert.assertNotNull(Expr_413_list);
		Assert.assertEquals(1, Expr_413_list.size());
		final RelationalExpression RelationalExpression_414_Var = (RelationalExpression)Expr_413_list.get(0);
		Assert.assertNotNull(RelationalExpression_414_Var);
		final EList<? extends EObject> Expr_414_list = RelationalExpression_414_Var.getExpr();
		Assert.assertNotNull(Expr_414_list);
		Assert.assertEquals(1, Expr_414_list.size());
		final ShiftExpression ShiftExpression_415_Var = (ShiftExpression)Expr_414_list.get(0);
		Assert.assertNotNull(ShiftExpression_415_Var);
		final EList<? extends EObject> Expr_415_list = ShiftExpression_415_Var.getExpr();
		Assert.assertNotNull(Expr_415_list);
		Assert.assertEquals(1, Expr_415_list.size());
		final AdditiveExpression AdditiveExpression_416_Var = (AdditiveExpression)Expr_415_list.get(0);
		Assert.assertNotNull(AdditiveExpression_416_Var);
		final EList<? extends EObject> Expr_416_list = AdditiveExpression_416_Var.getExpr();
		Assert.assertNotNull(Expr_416_list);
		Assert.assertEquals(1, Expr_416_list.size());
		final MultiplicativeExpression MultiplicativeExpression_417_Var = (MultiplicativeExpression)Expr_416_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_417_Var);
		final EList<? extends EObject> Expr_417_list = MultiplicativeExpression_417_Var.getExpr();
		Assert.assertNotNull(Expr_417_list);
		Assert.assertEquals(1, Expr_417_list.size());
		final CastExpression CastExpression_418_Var = (CastExpression)Expr_417_list.get(0);
		Assert.assertNotNull(CastExpression_418_Var);
		final UnaryExpression UnaryExpression_419_Var = (UnaryExpression)CastExpression_418_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_419_Var);
		final UnaryOperator UnaryOperator_420_Var = (UnaryOperator)UnaryExpression_419_Var.getOp();
		Assert.assertNotNull(UnaryOperator_420_Var);
		Assert.assertEquals("&", UnaryOperator_420_Var.getOp());
		final CastExpression CastExpression_421_Var = (CastExpression)UnaryExpression_419_Var.getExpr();
		Assert.assertNotNull(CastExpression_421_Var);
		final UnaryExpression UnaryExpression_422_Var = (UnaryExpression)CastExpression_421_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_422_Var);
		final PostfixExpression PostfixExpression_423_Var = (PostfixExpression)UnaryExpression_422_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_423_Var);
		final EList<? extends EObject> Expr_423_list = PostfixExpression_423_Var.getExpr();
		Assert.assertNotNull(Expr_423_list);
		Assert.assertEquals(1, Expr_423_list.size());
		final PrimaryExpression PrimaryExpression_424_Var = (PrimaryExpression)Expr_423_list.get(0);
		Assert.assertNotNull(PrimaryExpression_424_Var);
		Assert.assertEquals("joe", PrimaryExpression_424_Var.getId());
		Assert.assertEquals(";", ExpressionStatement_387_Var.getSemi());
		final Statement Statement_425_Var = (Statement)Statement_294_list.get(2);
		Assert.assertNotNull(Statement_425_Var);
		final ExpressionStatement ExpressionStatement_426_Var = (ExpressionStatement)Statement_425_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_426_Var);
		final Expression Expression_427_Var = (Expression)ExpressionStatement_426_Var.getExpression();
		Assert.assertNotNull(Expression_427_Var);
		final EList<? extends EObject> ExprExpr_427_list = Expression_427_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_427_list);
		Assert.assertEquals(1, ExprExpr_427_list.size());
		final AssignmentExpression AssignmentExpression_428_Var = (AssignmentExpression)ExprExpr_427_list.get(0);
		Assert.assertNotNull(AssignmentExpression_428_Var);
		final ConditionalExpression ConditionalExpression_429_Var = (ConditionalExpression)AssignmentExpression_428_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_429_Var);
		final LogicalOrExpression LogicalOrExpression_430_Var = (LogicalOrExpression)ConditionalExpression_429_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_430_Var);
		final EList<? extends EObject> Expr_430_list = LogicalOrExpression_430_Var.getExpr();
		Assert.assertNotNull(Expr_430_list);
		Assert.assertEquals(1, Expr_430_list.size());
		final LogicalAndExpression LogicalAndExpression_431_Var = (LogicalAndExpression)Expr_430_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_431_Var);
		final EList<? extends EObject> Expr_431_list = LogicalAndExpression_431_Var.getExpr();
		Assert.assertNotNull(Expr_431_list);
		Assert.assertEquals(1, Expr_431_list.size());
		final InclusiveOrExpression InclusiveOrExpression_432_Var = (InclusiveOrExpression)Expr_431_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_432_Var);
		final EList<? extends EObject> Expr_432_list = InclusiveOrExpression_432_Var.getExpr();
		Assert.assertNotNull(Expr_432_list);
		Assert.assertEquals(1, Expr_432_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_433_Var = (ExclusiveOrExpression)Expr_432_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_433_Var);
		final EList<? extends EObject> Expr_433_list = ExclusiveOrExpression_433_Var.getExpr();
		Assert.assertNotNull(Expr_433_list);
		Assert.assertEquals(1, Expr_433_list.size());
		final AndExpression AndExpression_434_Var = (AndExpression)Expr_433_list.get(0);
		Assert.assertNotNull(AndExpression_434_Var);
		final EList<? extends EObject> Expr_434_list = AndExpression_434_Var.getExpr();
		Assert.assertNotNull(Expr_434_list);
		Assert.assertEquals(1, Expr_434_list.size());
		final EqualityExpression EqualityExpression_435_Var = (EqualityExpression)Expr_434_list.get(0);
		Assert.assertNotNull(EqualityExpression_435_Var);
		final EList<? extends EObject> Expr_435_list = EqualityExpression_435_Var.getExpr();
		Assert.assertNotNull(Expr_435_list);
		Assert.assertEquals(1, Expr_435_list.size());
		final RelationalExpression RelationalExpression_436_Var = (RelationalExpression)Expr_435_list.get(0);
		Assert.assertNotNull(RelationalExpression_436_Var);
		final EList<? extends EObject> Expr_436_list = RelationalExpression_436_Var.getExpr();
		Assert.assertNotNull(Expr_436_list);
		Assert.assertEquals(1, Expr_436_list.size());
		final ShiftExpression ShiftExpression_437_Var = (ShiftExpression)Expr_436_list.get(0);
		Assert.assertNotNull(ShiftExpression_437_Var);
		final EList<? extends EObject> Expr_437_list = ShiftExpression_437_Var.getExpr();
		Assert.assertNotNull(Expr_437_list);
		Assert.assertEquals(1, Expr_437_list.size());
		final AdditiveExpression AdditiveExpression_438_Var = (AdditiveExpression)Expr_437_list.get(0);
		Assert.assertNotNull(AdditiveExpression_438_Var);
		final EList<? extends EObject> Expr_438_list = AdditiveExpression_438_Var.getExpr();
		Assert.assertNotNull(Expr_438_list);
		Assert.assertEquals(1, Expr_438_list.size());
		final MultiplicativeExpression MultiplicativeExpression_439_Var = (MultiplicativeExpression)Expr_438_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_439_Var);
		final EList<? extends EObject> Expr_439_list = MultiplicativeExpression_439_Var.getExpr();
		Assert.assertNotNull(Expr_439_list);
		Assert.assertEquals(1, Expr_439_list.size());
		final CastExpression CastExpression_440_Var = (CastExpression)Expr_439_list.get(0);
		Assert.assertNotNull(CastExpression_440_Var);
		final UnaryExpression UnaryExpression_441_Var = (UnaryExpression)CastExpression_440_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_441_Var);
		final PostfixExpression PostfixExpression_442_Var = (PostfixExpression)UnaryExpression_441_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_442_Var);
		final EList<? extends EObject> Expr_442_list = PostfixExpression_442_Var.getExpr();
		Assert.assertNotNull(Expr_442_list);
		Assert.assertEquals(1, Expr_442_list.size());
		final PrimaryExpression PrimaryExpression_443_Var = (PrimaryExpression)Expr_442_list.get(0);
		Assert.assertNotNull(PrimaryExpression_443_Var);
		Assert.assertEquals("print", PrimaryExpression_443_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_443_list = PostfixExpression_442_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_443_list);
		Assert.assertEquals(1, ArgumentExpressionList_443_list.size());
		final ArgumentExpressionList ArgumentExpressionList_444_Var = (ArgumentExpressionList)ArgumentExpressionList_443_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_444_Var);
		final EList<? extends EObject> Expr_444_list = ArgumentExpressionList_444_Var.getExpr();
		Assert.assertNotNull(Expr_444_list);
		Assert.assertEquals(1, Expr_444_list.size());
		final AssignmentExpression AssignmentExpression_445_Var = (AssignmentExpression)Expr_444_list.get(0);
		Assert.assertNotNull(AssignmentExpression_445_Var);
		final ConditionalExpression ConditionalExpression_446_Var = (ConditionalExpression)AssignmentExpression_445_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_446_Var);
		final LogicalOrExpression LogicalOrExpression_447_Var = (LogicalOrExpression)ConditionalExpression_446_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_447_Var);
		final EList<? extends EObject> Expr_447_list = LogicalOrExpression_447_Var.getExpr();
		Assert.assertNotNull(Expr_447_list);
		Assert.assertEquals(1, Expr_447_list.size());
		final LogicalAndExpression LogicalAndExpression_448_Var = (LogicalAndExpression)Expr_447_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_448_Var);
		final EList<? extends EObject> Expr_448_list = LogicalAndExpression_448_Var.getExpr();
		Assert.assertNotNull(Expr_448_list);
		Assert.assertEquals(1, Expr_448_list.size());
		final InclusiveOrExpression InclusiveOrExpression_449_Var = (InclusiveOrExpression)Expr_448_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_449_Var);
		final EList<? extends EObject> Expr_449_list = InclusiveOrExpression_449_Var.getExpr();
		Assert.assertNotNull(Expr_449_list);
		Assert.assertEquals(1, Expr_449_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_450_Var = (ExclusiveOrExpression)Expr_449_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_450_Var);
		final EList<? extends EObject> Expr_450_list = ExclusiveOrExpression_450_Var.getExpr();
		Assert.assertNotNull(Expr_450_list);
		Assert.assertEquals(1, Expr_450_list.size());
		final AndExpression AndExpression_451_Var = (AndExpression)Expr_450_list.get(0);
		Assert.assertNotNull(AndExpression_451_Var);
		final EList<? extends EObject> Expr_451_list = AndExpression_451_Var.getExpr();
		Assert.assertNotNull(Expr_451_list);
		Assert.assertEquals(1, Expr_451_list.size());
		final EqualityExpression EqualityExpression_452_Var = (EqualityExpression)Expr_451_list.get(0);
		Assert.assertNotNull(EqualityExpression_452_Var);
		final EList<? extends EObject> Expr_452_list = EqualityExpression_452_Var.getExpr();
		Assert.assertNotNull(Expr_452_list);
		Assert.assertEquals(1, Expr_452_list.size());
		final RelationalExpression RelationalExpression_453_Var = (RelationalExpression)Expr_452_list.get(0);
		Assert.assertNotNull(RelationalExpression_453_Var);
		final EList<? extends EObject> Expr_453_list = RelationalExpression_453_Var.getExpr();
		Assert.assertNotNull(Expr_453_list);
		Assert.assertEquals(1, Expr_453_list.size());
		final ShiftExpression ShiftExpression_454_Var = (ShiftExpression)Expr_453_list.get(0);
		Assert.assertNotNull(ShiftExpression_454_Var);
		final EList<? extends EObject> Expr_454_list = ShiftExpression_454_Var.getExpr();
		Assert.assertNotNull(Expr_454_list);
		Assert.assertEquals(1, Expr_454_list.size());
		final AdditiveExpression AdditiveExpression_455_Var = (AdditiveExpression)Expr_454_list.get(0);
		Assert.assertNotNull(AdditiveExpression_455_Var);
		final EList<? extends EObject> Expr_455_list = AdditiveExpression_455_Var.getExpr();
		Assert.assertNotNull(Expr_455_list);
		Assert.assertEquals(1, Expr_455_list.size());
		final MultiplicativeExpression MultiplicativeExpression_456_Var = (MultiplicativeExpression)Expr_455_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_456_Var);
		final EList<? extends EObject> Expr_456_list = MultiplicativeExpression_456_Var.getExpr();
		Assert.assertNotNull(Expr_456_list);
		Assert.assertEquals(1, Expr_456_list.size());
		final CastExpression CastExpression_457_Var = (CastExpression)Expr_456_list.get(0);
		Assert.assertNotNull(CastExpression_457_Var);
		final UnaryExpression UnaryExpression_458_Var = (UnaryExpression)CastExpression_457_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_458_Var);
		final UnaryOperator UnaryOperator_459_Var = (UnaryOperator)UnaryExpression_458_Var.getOp();
		Assert.assertNotNull(UnaryOperator_459_Var);
		Assert.assertEquals("&", UnaryOperator_459_Var.getOp());
		final CastExpression CastExpression_460_Var = (CastExpression)UnaryExpression_458_Var.getExpr();
		Assert.assertNotNull(CastExpression_460_Var);
		final UnaryExpression UnaryExpression_461_Var = (UnaryExpression)CastExpression_460_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_461_Var);
		final PostfixExpression PostfixExpression_462_Var = (PostfixExpression)UnaryExpression_461_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_462_Var);
		final EList<? extends EObject> Expr_462_list = PostfixExpression_462_Var.getExpr();
		Assert.assertNotNull(Expr_462_list);
		Assert.assertEquals(1, Expr_462_list.size());
		final PrimaryExpression PrimaryExpression_463_Var = (PrimaryExpression)Expr_462_list.get(0);
		Assert.assertNotNull(PrimaryExpression_463_Var);
		Assert.assertEquals("phil", PrimaryExpression_463_Var.getId());
		Assert.assertEquals(";", ExpressionStatement_426_Var.getSemi());
		final Statement Statement_464_Var = (Statement)Statement_294_list.get(3);
		Assert.assertNotNull(Statement_464_Var);
		final ExpressionStatement ExpressionStatement_465_Var = (ExpressionStatement)Statement_464_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_465_Var);
		final Expression Expression_466_Var = (Expression)ExpressionStatement_465_Var.getExpression();
		Assert.assertNotNull(Expression_466_Var);
		final EList<? extends EObject> ExprExpr_466_list = Expression_466_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_466_list);
		Assert.assertEquals(1, ExprExpr_466_list.size());
		final AssignmentExpression AssignmentExpression_467_Var = (AssignmentExpression)ExprExpr_466_list.get(0);
		Assert.assertNotNull(AssignmentExpression_467_Var);
		final ConditionalExpression ConditionalExpression_468_Var = (ConditionalExpression)AssignmentExpression_467_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_468_Var);
		final LogicalOrExpression LogicalOrExpression_469_Var = (LogicalOrExpression)ConditionalExpression_468_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_469_Var);
		final EList<? extends EObject> Expr_469_list = LogicalOrExpression_469_Var.getExpr();
		Assert.assertNotNull(Expr_469_list);
		Assert.assertEquals(1, Expr_469_list.size());
		final LogicalAndExpression LogicalAndExpression_470_Var = (LogicalAndExpression)Expr_469_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_470_Var);
		final EList<? extends EObject> Expr_470_list = LogicalAndExpression_470_Var.getExpr();
		Assert.assertNotNull(Expr_470_list);
		Assert.assertEquals(1, Expr_470_list.size());
		final InclusiveOrExpression InclusiveOrExpression_471_Var = (InclusiveOrExpression)Expr_470_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_471_Var);
		final EList<? extends EObject> Expr_471_list = InclusiveOrExpression_471_Var.getExpr();
		Assert.assertNotNull(Expr_471_list);
		Assert.assertEquals(1, Expr_471_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_472_Var = (ExclusiveOrExpression)Expr_471_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_472_Var);
		final EList<? extends EObject> Expr_472_list = ExclusiveOrExpression_472_Var.getExpr();
		Assert.assertNotNull(Expr_472_list);
		Assert.assertEquals(1, Expr_472_list.size());
		final AndExpression AndExpression_473_Var = (AndExpression)Expr_472_list.get(0);
		Assert.assertNotNull(AndExpression_473_Var);
		final EList<? extends EObject> Expr_473_list = AndExpression_473_Var.getExpr();
		Assert.assertNotNull(Expr_473_list);
		Assert.assertEquals(1, Expr_473_list.size());
		final EqualityExpression EqualityExpression_474_Var = (EqualityExpression)Expr_473_list.get(0);
		Assert.assertNotNull(EqualityExpression_474_Var);
		final EList<? extends EObject> Expr_474_list = EqualityExpression_474_Var.getExpr();
		Assert.assertNotNull(Expr_474_list);
		Assert.assertEquals(1, Expr_474_list.size());
		final RelationalExpression RelationalExpression_475_Var = (RelationalExpression)Expr_474_list.get(0);
		Assert.assertNotNull(RelationalExpression_475_Var);
		final EList<? extends EObject> Expr_475_list = RelationalExpression_475_Var.getExpr();
		Assert.assertNotNull(Expr_475_list);
		Assert.assertEquals(1, Expr_475_list.size());
		final ShiftExpression ShiftExpression_476_Var = (ShiftExpression)Expr_475_list.get(0);
		Assert.assertNotNull(ShiftExpression_476_Var);
		final EList<? extends EObject> Expr_476_list = ShiftExpression_476_Var.getExpr();
		Assert.assertNotNull(Expr_476_list);
		Assert.assertEquals(1, Expr_476_list.size());
		final AdditiveExpression AdditiveExpression_477_Var = (AdditiveExpression)Expr_476_list.get(0);
		Assert.assertNotNull(AdditiveExpression_477_Var);
		final EList<? extends EObject> Expr_477_list = AdditiveExpression_477_Var.getExpr();
		Assert.assertNotNull(Expr_477_list);
		Assert.assertEquals(1, Expr_477_list.size());
		final MultiplicativeExpression MultiplicativeExpression_478_Var = (MultiplicativeExpression)Expr_477_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_478_Var);
		final EList<? extends EObject> Expr_478_list = MultiplicativeExpression_478_Var.getExpr();
		Assert.assertNotNull(Expr_478_list);
		Assert.assertEquals(1, Expr_478_list.size());
		final CastExpression CastExpression_479_Var = (CastExpression)Expr_478_list.get(0);
		Assert.assertNotNull(CastExpression_479_Var);
		final UnaryExpression UnaryExpression_480_Var = (UnaryExpression)CastExpression_479_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_480_Var);
		final PostfixExpression PostfixExpression_481_Var = (PostfixExpression)UnaryExpression_480_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_481_Var);
		final EList<? extends EObject> Expr_481_list = PostfixExpression_481_Var.getExpr();
		Assert.assertNotNull(Expr_481_list);
		Assert.assertEquals(1, Expr_481_list.size());
		final PrimaryExpression PrimaryExpression_482_Var = (PrimaryExpression)Expr_481_list.get(0);
		Assert.assertNotNull(PrimaryExpression_482_Var);
		Assert.assertEquals("print", PrimaryExpression_482_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_482_list = PostfixExpression_481_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_482_list);
		Assert.assertEquals(1, ArgumentExpressionList_482_list.size());
		final ArgumentExpressionList ArgumentExpressionList_483_Var = (ArgumentExpressionList)ArgumentExpressionList_482_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_483_Var);
		final EList<? extends EObject> Expr_483_list = ArgumentExpressionList_483_Var.getExpr();
		Assert.assertNotNull(Expr_483_list);
		Assert.assertEquals(1, Expr_483_list.size());
		final AssignmentExpression AssignmentExpression_484_Var = (AssignmentExpression)Expr_483_list.get(0);
		Assert.assertNotNull(AssignmentExpression_484_Var);
		final ConditionalExpression ConditionalExpression_485_Var = (ConditionalExpression)AssignmentExpression_484_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_485_Var);
		final LogicalOrExpression LogicalOrExpression_486_Var = (LogicalOrExpression)ConditionalExpression_485_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_486_Var);
		final EList<? extends EObject> Expr_486_list = LogicalOrExpression_486_Var.getExpr();
		Assert.assertNotNull(Expr_486_list);
		Assert.assertEquals(1, Expr_486_list.size());
		final LogicalAndExpression LogicalAndExpression_487_Var = (LogicalAndExpression)Expr_486_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_487_Var);
		final EList<? extends EObject> Expr_487_list = LogicalAndExpression_487_Var.getExpr();
		Assert.assertNotNull(Expr_487_list);
		Assert.assertEquals(1, Expr_487_list.size());
		final InclusiveOrExpression InclusiveOrExpression_488_Var = (InclusiveOrExpression)Expr_487_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_488_Var);
		final EList<? extends EObject> Expr_488_list = InclusiveOrExpression_488_Var.getExpr();
		Assert.assertNotNull(Expr_488_list);
		Assert.assertEquals(1, Expr_488_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_489_Var = (ExclusiveOrExpression)Expr_488_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_489_Var);
		final EList<? extends EObject> Expr_489_list = ExclusiveOrExpression_489_Var.getExpr();
		Assert.assertNotNull(Expr_489_list);
		Assert.assertEquals(1, Expr_489_list.size());
		final AndExpression AndExpression_490_Var = (AndExpression)Expr_489_list.get(0);
		Assert.assertNotNull(AndExpression_490_Var);
		final EList<? extends EObject> Expr_490_list = AndExpression_490_Var.getExpr();
		Assert.assertNotNull(Expr_490_list);
		Assert.assertEquals(1, Expr_490_list.size());
		final EqualityExpression EqualityExpression_491_Var = (EqualityExpression)Expr_490_list.get(0);
		Assert.assertNotNull(EqualityExpression_491_Var);
		final EList<? extends EObject> Expr_491_list = EqualityExpression_491_Var.getExpr();
		Assert.assertNotNull(Expr_491_list);
		Assert.assertEquals(1, Expr_491_list.size());
		final RelationalExpression RelationalExpression_492_Var = (RelationalExpression)Expr_491_list.get(0);
		Assert.assertNotNull(RelationalExpression_492_Var);
		final EList<? extends EObject> Expr_492_list = RelationalExpression_492_Var.getExpr();
		Assert.assertNotNull(Expr_492_list);
		Assert.assertEquals(1, Expr_492_list.size());
		final ShiftExpression ShiftExpression_493_Var = (ShiftExpression)Expr_492_list.get(0);
		Assert.assertNotNull(ShiftExpression_493_Var);
		final EList<? extends EObject> Expr_493_list = ShiftExpression_493_Var.getExpr();
		Assert.assertNotNull(Expr_493_list);
		Assert.assertEquals(1, Expr_493_list.size());
		final AdditiveExpression AdditiveExpression_494_Var = (AdditiveExpression)Expr_493_list.get(0);
		Assert.assertNotNull(AdditiveExpression_494_Var);
		final EList<? extends EObject> Expr_494_list = AdditiveExpression_494_Var.getExpr();
		Assert.assertNotNull(Expr_494_list);
		Assert.assertEquals(1, Expr_494_list.size());
		final MultiplicativeExpression MultiplicativeExpression_495_Var = (MultiplicativeExpression)Expr_494_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_495_Var);
		final EList<? extends EObject> Expr_495_list = MultiplicativeExpression_495_Var.getExpr();
		Assert.assertNotNull(Expr_495_list);
		Assert.assertEquals(1, Expr_495_list.size());
		final CastExpression CastExpression_496_Var = (CastExpression)Expr_495_list.get(0);
		Assert.assertNotNull(CastExpression_496_Var);
		final UnaryExpression UnaryExpression_497_Var = (UnaryExpression)CastExpression_496_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_497_Var);
		final PostfixExpression PostfixExpression_498_Var = (PostfixExpression)UnaryExpression_497_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_498_Var);
		final EList<? extends EObject> Expr_498_list = PostfixExpression_498_Var.getExpr();
		Assert.assertNotNull(Expr_498_list);
		Assert.assertEquals(1, Expr_498_list.size());
		final PrimaryExpression PrimaryExpression_499_Var = (PrimaryExpression)Expr_498_list.get(0);
		Assert.assertNotNull(PrimaryExpression_499_Var);
		Assert.assertEquals("newEmployee", PrimaryExpression_499_Var.getId());
		Assert.assertEquals(";", ExpressionStatement_465_Var.getSemi());
		final Statement Statement_500_Var = (Statement)Statement_294_list.get(4);
		Assert.assertNotNull(Statement_500_Var);
		final ExpressionStatement ExpressionStatement_501_Var = (ExpressionStatement)Statement_500_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_501_Var);
		final Expression Expression_502_Var = (Expression)ExpressionStatement_501_Var.getExpression();
		Assert.assertNotNull(Expression_502_Var);
		final EList<? extends EObject> ExprExpr_502_list = Expression_502_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_502_list);
		Assert.assertEquals(1, ExprExpr_502_list.size());
		final AssignmentExpression AssignmentExpression_503_Var = (AssignmentExpression)ExprExpr_502_list.get(0);
		Assert.assertNotNull(AssignmentExpression_503_Var);
		final ConditionalExpression ConditionalExpression_504_Var = (ConditionalExpression)AssignmentExpression_503_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_504_Var);
		final LogicalOrExpression LogicalOrExpression_505_Var = (LogicalOrExpression)ConditionalExpression_504_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_505_Var);
		final EList<? extends EObject> Expr_505_list = LogicalOrExpression_505_Var.getExpr();
		Assert.assertNotNull(Expr_505_list);
		Assert.assertEquals(1, Expr_505_list.size());
		final LogicalAndExpression LogicalAndExpression_506_Var = (LogicalAndExpression)Expr_505_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_506_Var);
		final EList<? extends EObject> Expr_506_list = LogicalAndExpression_506_Var.getExpr();
		Assert.assertNotNull(Expr_506_list);
		Assert.assertEquals(1, Expr_506_list.size());
		final InclusiveOrExpression InclusiveOrExpression_507_Var = (InclusiveOrExpression)Expr_506_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_507_Var);
		final EList<? extends EObject> Expr_507_list = InclusiveOrExpression_507_Var.getExpr();
		Assert.assertNotNull(Expr_507_list);
		Assert.assertEquals(1, Expr_507_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_508_Var = (ExclusiveOrExpression)Expr_507_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_508_Var);
		final EList<? extends EObject> Expr_508_list = ExclusiveOrExpression_508_Var.getExpr();
		Assert.assertNotNull(Expr_508_list);
		Assert.assertEquals(1, Expr_508_list.size());
		final AndExpression AndExpression_509_Var = (AndExpression)Expr_508_list.get(0);
		Assert.assertNotNull(AndExpression_509_Var);
		final EList<? extends EObject> Expr_509_list = AndExpression_509_Var.getExpr();
		Assert.assertNotNull(Expr_509_list);
		Assert.assertEquals(1, Expr_509_list.size());
		final EqualityExpression EqualityExpression_510_Var = (EqualityExpression)Expr_509_list.get(0);
		Assert.assertNotNull(EqualityExpression_510_Var);
		final EList<? extends EObject> Expr_510_list = EqualityExpression_510_Var.getExpr();
		Assert.assertNotNull(Expr_510_list);
		Assert.assertEquals(1, Expr_510_list.size());
		final RelationalExpression RelationalExpression_511_Var = (RelationalExpression)Expr_510_list.get(0);
		Assert.assertNotNull(RelationalExpression_511_Var);
		final EList<? extends EObject> Expr_511_list = RelationalExpression_511_Var.getExpr();
		Assert.assertNotNull(Expr_511_list);
		Assert.assertEquals(1, Expr_511_list.size());
		final ShiftExpression ShiftExpression_512_Var = (ShiftExpression)Expr_511_list.get(0);
		Assert.assertNotNull(ShiftExpression_512_Var);
		final EList<? extends EObject> Expr_512_list = ShiftExpression_512_Var.getExpr();
		Assert.assertNotNull(Expr_512_list);
		Assert.assertEquals(1, Expr_512_list.size());
		final AdditiveExpression AdditiveExpression_513_Var = (AdditiveExpression)Expr_512_list.get(0);
		Assert.assertNotNull(AdditiveExpression_513_Var);
		final EList<? extends EObject> Expr_513_list = AdditiveExpression_513_Var.getExpr();
		Assert.assertNotNull(Expr_513_list);
		Assert.assertEquals(1, Expr_513_list.size());
		final MultiplicativeExpression MultiplicativeExpression_514_Var = (MultiplicativeExpression)Expr_513_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_514_Var);
		final EList<? extends EObject> Expr_514_list = MultiplicativeExpression_514_Var.getExpr();
		Assert.assertNotNull(Expr_514_list);
		Assert.assertEquals(1, Expr_514_list.size());
		final CastExpression CastExpression_515_Var = (CastExpression)Expr_514_list.get(0);
		Assert.assertNotNull(CastExpression_515_Var);
		final UnaryExpression UnaryExpression_516_Var = (UnaryExpression)CastExpression_515_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_516_Var);
		final PostfixExpression PostfixExpression_517_Var = (PostfixExpression)UnaryExpression_516_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_517_Var);
		final EList<? extends EObject> Expr_517_list = PostfixExpression_517_Var.getExpr();
		Assert.assertNotNull(Expr_517_list);
		Assert.assertEquals(1, Expr_517_list.size());
		final PrimaryExpression PrimaryExpression_518_Var = (PrimaryExpression)Expr_517_list.get(0);
		Assert.assertNotNull(PrimaryExpression_518_Var);
		Assert.assertEquals("free", PrimaryExpression_518_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_518_list = PostfixExpression_517_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_518_list);
		Assert.assertEquals(1, ArgumentExpressionList_518_list.size());
		final ArgumentExpressionList ArgumentExpressionList_519_Var = (ArgumentExpressionList)ArgumentExpressionList_518_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_519_Var);
		final EList<? extends EObject> Expr_519_list = ArgumentExpressionList_519_Var.getExpr();
		Assert.assertNotNull(Expr_519_list);
		Assert.assertEquals(1, Expr_519_list.size());
		final AssignmentExpression AssignmentExpression_520_Var = (AssignmentExpression)Expr_519_list.get(0);
		Assert.assertNotNull(AssignmentExpression_520_Var);
		final ConditionalExpression ConditionalExpression_521_Var = (ConditionalExpression)AssignmentExpression_520_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_521_Var);
		final LogicalOrExpression LogicalOrExpression_522_Var = (LogicalOrExpression)ConditionalExpression_521_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_522_Var);
		final EList<? extends EObject> Expr_522_list = LogicalOrExpression_522_Var.getExpr();
		Assert.assertNotNull(Expr_522_list);
		Assert.assertEquals(1, Expr_522_list.size());
		final LogicalAndExpression LogicalAndExpression_523_Var = (LogicalAndExpression)Expr_522_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_523_Var);
		final EList<? extends EObject> Expr_523_list = LogicalAndExpression_523_Var.getExpr();
		Assert.assertNotNull(Expr_523_list);
		Assert.assertEquals(1, Expr_523_list.size());
		final InclusiveOrExpression InclusiveOrExpression_524_Var = (InclusiveOrExpression)Expr_523_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_524_Var);
		final EList<? extends EObject> Expr_524_list = InclusiveOrExpression_524_Var.getExpr();
		Assert.assertNotNull(Expr_524_list);
		Assert.assertEquals(1, Expr_524_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_525_Var = (ExclusiveOrExpression)Expr_524_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_525_Var);
		final EList<? extends EObject> Expr_525_list = ExclusiveOrExpression_525_Var.getExpr();
		Assert.assertNotNull(Expr_525_list);
		Assert.assertEquals(1, Expr_525_list.size());
		final AndExpression AndExpression_526_Var = (AndExpression)Expr_525_list.get(0);
		Assert.assertNotNull(AndExpression_526_Var);
		final EList<? extends EObject> Expr_526_list = AndExpression_526_Var.getExpr();
		Assert.assertNotNull(Expr_526_list);
		Assert.assertEquals(1, Expr_526_list.size());
		final EqualityExpression EqualityExpression_527_Var = (EqualityExpression)Expr_526_list.get(0);
		Assert.assertNotNull(EqualityExpression_527_Var);
		final EList<? extends EObject> Expr_527_list = EqualityExpression_527_Var.getExpr();
		Assert.assertNotNull(Expr_527_list);
		Assert.assertEquals(1, Expr_527_list.size());
		final RelationalExpression RelationalExpression_528_Var = (RelationalExpression)Expr_527_list.get(0);
		Assert.assertNotNull(RelationalExpression_528_Var);
		final EList<? extends EObject> Expr_528_list = RelationalExpression_528_Var.getExpr();
		Assert.assertNotNull(Expr_528_list);
		Assert.assertEquals(1, Expr_528_list.size());
		final ShiftExpression ShiftExpression_529_Var = (ShiftExpression)Expr_528_list.get(0);
		Assert.assertNotNull(ShiftExpression_529_Var);
		final EList<? extends EObject> Expr_529_list = ShiftExpression_529_Var.getExpr();
		Assert.assertNotNull(Expr_529_list);
		Assert.assertEquals(1, Expr_529_list.size());
		final AdditiveExpression AdditiveExpression_530_Var = (AdditiveExpression)Expr_529_list.get(0);
		Assert.assertNotNull(AdditiveExpression_530_Var);
		final EList<? extends EObject> Expr_530_list = AdditiveExpression_530_Var.getExpr();
		Assert.assertNotNull(Expr_530_list);
		Assert.assertEquals(1, Expr_530_list.size());
		final MultiplicativeExpression MultiplicativeExpression_531_Var = (MultiplicativeExpression)Expr_530_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_531_Var);
		final EList<? extends EObject> Expr_531_list = MultiplicativeExpression_531_Var.getExpr();
		Assert.assertNotNull(Expr_531_list);
		Assert.assertEquals(1, Expr_531_list.size());
		final CastExpression CastExpression_532_Var = (CastExpression)Expr_531_list.get(0);
		Assert.assertNotNull(CastExpression_532_Var);
		final UnaryExpression UnaryExpression_533_Var = (UnaryExpression)CastExpression_532_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_533_Var);
		final PostfixExpression PostfixExpression_534_Var = (PostfixExpression)UnaryExpression_533_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_534_Var);
		final EList<? extends EObject> Expr_534_list = PostfixExpression_534_Var.getExpr();
		Assert.assertNotNull(Expr_534_list);
		Assert.assertEquals(1, Expr_534_list.size());
		final PrimaryExpression PrimaryExpression_535_Var = (PrimaryExpression)Expr_534_list.get(0);
		Assert.assertNotNull(PrimaryExpression_535_Var);
		Assert.assertEquals("newEmployee", PrimaryExpression_535_Var.getId());
		Assert.assertEquals(";", ExpressionStatement_501_Var.getSemi());
		final Statement Statement_536_Var = (Statement)Statement_294_list.get(5);
		Assert.assertNotNull(Statement_536_Var);
		final JumpStatement JumpStatement_537_Var = (JumpStatement)Statement_536_Var.getStmt();
		Assert.assertNotNull(JumpStatement_537_Var);
		final Expression Expression_538_Var = (Expression)JumpStatement_537_Var.getExpr();
		Assert.assertNotNull(Expression_538_Var);
		final EList<? extends EObject> ExprExpr_538_list = Expression_538_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_538_list);
		Assert.assertEquals(1, ExprExpr_538_list.size());
		final AssignmentExpression AssignmentExpression_539_Var = (AssignmentExpression)ExprExpr_538_list.get(0);
		Assert.assertNotNull(AssignmentExpression_539_Var);
		final ConditionalExpression ConditionalExpression_540_Var = (ConditionalExpression)AssignmentExpression_539_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_540_Var);
		final LogicalOrExpression LogicalOrExpression_541_Var = (LogicalOrExpression)ConditionalExpression_540_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_541_Var);
		final EList<? extends EObject> Expr_541_list = LogicalOrExpression_541_Var.getExpr();
		Assert.assertNotNull(Expr_541_list);
		Assert.assertEquals(1, Expr_541_list.size());
		final LogicalAndExpression LogicalAndExpression_542_Var = (LogicalAndExpression)Expr_541_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_542_Var);
		final EList<? extends EObject> Expr_542_list = LogicalAndExpression_542_Var.getExpr();
		Assert.assertNotNull(Expr_542_list);
		Assert.assertEquals(1, Expr_542_list.size());
		final InclusiveOrExpression InclusiveOrExpression_543_Var = (InclusiveOrExpression)Expr_542_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_543_Var);
		final EList<? extends EObject> Expr_543_list = InclusiveOrExpression_543_Var.getExpr();
		Assert.assertNotNull(Expr_543_list);
		Assert.assertEquals(1, Expr_543_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_544_Var = (ExclusiveOrExpression)Expr_543_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_544_Var);
		final EList<? extends EObject> Expr_544_list = ExclusiveOrExpression_544_Var.getExpr();
		Assert.assertNotNull(Expr_544_list);
		Assert.assertEquals(1, Expr_544_list.size());
		final AndExpression AndExpression_545_Var = (AndExpression)Expr_544_list.get(0);
		Assert.assertNotNull(AndExpression_545_Var);
		final EList<? extends EObject> Expr_545_list = AndExpression_545_Var.getExpr();
		Assert.assertNotNull(Expr_545_list);
		Assert.assertEquals(1, Expr_545_list.size());
		final EqualityExpression EqualityExpression_546_Var = (EqualityExpression)Expr_545_list.get(0);
		Assert.assertNotNull(EqualityExpression_546_Var);
		final EList<? extends EObject> Expr_546_list = EqualityExpression_546_Var.getExpr();
		Assert.assertNotNull(Expr_546_list);
		Assert.assertEquals(1, Expr_546_list.size());
		final RelationalExpression RelationalExpression_547_Var = (RelationalExpression)Expr_546_list.get(0);
		Assert.assertNotNull(RelationalExpression_547_Var);
		final EList<? extends EObject> Expr_547_list = RelationalExpression_547_Var.getExpr();
		Assert.assertNotNull(Expr_547_list);
		Assert.assertEquals(1, Expr_547_list.size());
		final ShiftExpression ShiftExpression_548_Var = (ShiftExpression)Expr_547_list.get(0);
		Assert.assertNotNull(ShiftExpression_548_Var);
		final EList<? extends EObject> Expr_548_list = ShiftExpression_548_Var.getExpr();
		Assert.assertNotNull(Expr_548_list);
		Assert.assertEquals(1, Expr_548_list.size());
		final AdditiveExpression AdditiveExpression_549_Var = (AdditiveExpression)Expr_548_list.get(0);
		Assert.assertNotNull(AdditiveExpression_549_Var);
		final EList<? extends EObject> Expr_549_list = AdditiveExpression_549_Var.getExpr();
		Assert.assertNotNull(Expr_549_list);
		Assert.assertEquals(1, Expr_549_list.size());
		final MultiplicativeExpression MultiplicativeExpression_550_Var = (MultiplicativeExpression)Expr_549_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_550_Var);
		final EList<? extends EObject> Expr_550_list = MultiplicativeExpression_550_Var.getExpr();
		Assert.assertNotNull(Expr_550_list);
		Assert.assertEquals(1, Expr_550_list.size());
		final CastExpression CastExpression_551_Var = (CastExpression)Expr_550_list.get(0);
		Assert.assertNotNull(CastExpression_551_Var);
		final UnaryExpression UnaryExpression_552_Var = (UnaryExpression)CastExpression_551_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_552_Var);
		final PostfixExpression PostfixExpression_553_Var = (PostfixExpression)UnaryExpression_552_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_553_Var);
		final EList<? extends EObject> Expr_553_list = PostfixExpression_553_Var.getExpr();
		Assert.assertNotNull(Expr_553_list);
		Assert.assertEquals(1, Expr_553_list.size());
		final PrimaryExpression PrimaryExpression_554_Var = (PrimaryExpression)Expr_553_list.get(0);
		Assert.assertNotNull(PrimaryExpression_554_Var);
		final Constant Constant_555_Var = (Constant)PrimaryExpression_554_Var.getConst();
		Assert.assertNotNull(Constant_555_Var);
		Assert.assertEquals("0", Constant_555_Var.getDec());
		Assert.assertEquals("return", JumpStatement_537_Var.getReturn());
		Assert.assertEquals(";", JumpStatement_537_Var.getSemi());
	}


}
