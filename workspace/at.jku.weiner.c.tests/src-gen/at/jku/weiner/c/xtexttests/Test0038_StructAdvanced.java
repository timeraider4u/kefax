package at.jku.weiner.c.xtexttests;

import com.google.inject.Inject;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import org.antlr.runtime.Token;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipse.xtext.junit4.util.ParseHelper;
import org.eclipse.xtext.junit4.validation.ValidationTestHelper;
import org.eclipse.xtext.junit4.XtextRunner;
import org.eclipse.xtext.parser.antlr.ITokenDefProvider;
import org.junit.Assert;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import at.jku.weiner.c.tests.CInjectorProvider;
import at.jku.weiner.c.parser.antlr.CParser;
import at.jku.weiner.c.parser.antlr.internal.InternalCLexer;
import at.jku.weiner.c.xtexttests.LexerAndParserTest;

import at.jku.weiner.c.c.Model;
import at.jku.weiner.c.c.TranslationUnit;
import at.jku.weiner.c.c.ExternalDeclaration;
import at.jku.weiner.c.c.Declaration;
import at.jku.weiner.c.c.DeclarationSpecifiers;
import at.jku.weiner.c.c.StorageClassSpecifier;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.StructOrUnionSpecifier;
import at.jku.weiner.c.c.StructOrUnion;
import at.jku.weiner.c.c.StructDeclarationList;
import at.jku.weiner.c.c.StructDeclaration;
import at.jku.weiner.c.c.SpecifierQualifierList;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.StructDeclaratorList;
import at.jku.weiner.c.c.StructDeclarator;
import at.jku.weiner.c.c.Declarator;
import at.jku.weiner.c.c.DirectDeclarator;
import at.jku.weiner.c.c.StructDeclaration;
import at.jku.weiner.c.c.SpecifierQualifierList;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.StructDeclaratorList;
import at.jku.weiner.c.c.StructDeclarator;
import at.jku.weiner.c.c.Declarator;
import at.jku.weiner.c.c.DirectDeclarator;
import at.jku.weiner.c.c.DeclaratorSuffix;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.InitDeclaratorList;
import at.jku.weiner.c.c.InitDeclarator;
import at.jku.weiner.c.c.Declarator;
import at.jku.weiner.c.c.DirectDeclarator;
import at.jku.weiner.c.c.ExternalDeclaration;
import at.jku.weiner.c.c.Declaration;
import at.jku.weiner.c.c.DeclarationSpecifiers;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.StructOrUnionSpecifier;
import at.jku.weiner.c.c.StructOrUnion;
import at.jku.weiner.c.c.InitDeclaratorList;
import at.jku.weiner.c.c.InitDeclarator;
import at.jku.weiner.c.c.Declarator;
import at.jku.weiner.c.c.DirectDeclarator;
import at.jku.weiner.c.c.Initializer;
import at.jku.weiner.c.c.InitializerList;
import at.jku.weiner.c.c.Initializer;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.Initializer;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.ExternalDeclaration;
import at.jku.weiner.c.c.Declaration;
import at.jku.weiner.c.c.DeclarationSpecifiers;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.TypedefName;
import at.jku.weiner.c.c.InitDeclaratorList;
import at.jku.weiner.c.c.InitDeclarator;
import at.jku.weiner.c.c.Declarator;
import at.jku.weiner.c.c.DirectDeclarator;
import at.jku.weiner.c.c.Initializer;
import at.jku.weiner.c.c.InitializerList;
import at.jku.weiner.c.c.Initializer;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.Initializer;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.ExternalDeclaration;
import at.jku.weiner.c.c.FunctionDefHead;
import at.jku.weiner.c.c.DeclarationSpecifiers;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.Declarator;
import at.jku.weiner.c.c.DirectDeclarator;
import at.jku.weiner.c.c.DeclaratorSuffix;
import at.jku.weiner.c.c.DirectDeclaratorLastSuffix;
import at.jku.weiner.c.c.ParameterTypeList;
import at.jku.weiner.c.c.ParameterList;
import at.jku.weiner.c.c.ParameterDeclaration;
import at.jku.weiner.c.c.DeclarationSpecifiers;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.TypedefName;
import at.jku.weiner.c.c.Declarator;
import at.jku.weiner.c.c.DirectDeclarator;
import at.jku.weiner.c.c.Pointer;
import at.jku.weiner.c.c.FunctionDefinition;
import at.jku.weiner.c.c.BodyStatement;
import at.jku.weiner.c.c.BlockList;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.UnaryOperator;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ExternalDeclaration;
import at.jku.weiner.c.c.FunctionDefHead;
import at.jku.weiner.c.c.DeclarationSpecifiers;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.Declarator;
import at.jku.weiner.c.c.DirectDeclarator;
import at.jku.weiner.c.c.DeclaratorSuffix;
import at.jku.weiner.c.c.DirectDeclaratorLastSuffix;
import at.jku.weiner.c.c.ParameterTypeList;
import at.jku.weiner.c.c.ParameterList;
import at.jku.weiner.c.c.ParameterDeclaration;
import at.jku.weiner.c.c.DeclarationSpecifiers;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.FunctionDefinition;
import at.jku.weiner.c.c.BodyStatement;
import at.jku.weiner.c.c.BlockList;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.SelectionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.CompoundStatement;
import at.jku.weiner.c.c.BodyStatement;
import at.jku.weiner.c.c.BlockList;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.JumpStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.UnaryOperator;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.UnaryOperator;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.UnaryOperator;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.JumpStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;

@SuppressWarnings("unused")
@RunWith(XtextRunner.class)
@InjectWith(CInjectorProvider.class)
public class Test0038_StructAdvanced {

	@Inject
	private ParseHelper<Model> parseHelper;
	@Inject
	private ValidationTestHelper valHelper;
	@Inject
	private InternalCLexer lexer;
	@Inject
	private CParser parser;
	@Inject
	private ITokenDefProvider tokenDefProvider;
	
	private LexerAndParserTest testHelper;
	
	@Before
	public void initialize(){
		this.testHelper = new LexerAndParserTest(lexer, parser, tokenDefProvider);
	}
	
	private String getSourceText()
	throws Exception{
		final Path path = Paths.get("res/Test0038_StructAdvanced.c");
		final String content = new String(Files.readAllBytes(path));
		return content;
	}
	
	@Test
	public void checkLexerTokens()
	throws Exception{
		final String text = this.getSourceText();
		//System.out.println(text);
		final String[] expected = new String[] {
			"RULE_LINEDIRECTIVE",
			"RULE_NEWLINE",
			"RULE_LINEDIRECTIVE",
			"RULE_NEWLINE",
			"RULE_LINEDIRECTIVE",
			"RULE_NEWLINE",
			"RULE_NEWLINE",
			"RULE_KW_TYPEDEF",
			"RULE_WHITESPACE",
			"RULE_KW_STRUCT",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_WHITESPACE",
			"RULE_LEFTBRACE",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_KW_INT",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_KW_CHAR",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTBRACKET",
			"RULE_DECIMAL_LITERAL",
			"RULE_RIGHTBRACKET",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_RIGHTBRACE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_NEWLINE",
			"RULE_KW_STRUCT",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_WHITESPACE",
			"RULE_ASSIGN",
			"RULE_WHITESPACE",
			"RULE_LEFTBRACE",
			"RULE_HEX_LITERAL",
			"RULE_COMMA",
			"RULE_WHITESPACE",
			"RULE_STRING_LITERAL",
			"RULE_RIGHTBRACE",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_ID",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_WHITESPACE",
			"RULE_ASSIGN",
			"RULE_WHITESPACE",
			"RULE_LEFTBRACE",
			"RULE_HEX_LITERAL",
			"RULE_COMMA",
			"RULE_WHITESPACE",
			"RULE_STRING_LITERAL",
			"RULE_RIGHTBRACE",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_NEWLINE",
			"RULE_KW_VOID",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_ID",
			"RULE_WHITESPACE",
			"RULE_STAR",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_WHITESPACE",
			"RULE_LEFTBRACE",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_STRING_LITERAL",
			"RULE_COMMA",
			"RULE_WHITESPACE",
			"RULE_LEFTPAREN",
			"RULE_STAR",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_DOT",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_LINE_COMMENT",
			"RULE_NEWLINE",
			"RULE_RIGHTBRACE",
			"RULE_NEWLINE",
			"RULE_NEWLINE",
			"RULE_KW_INT",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_KW_VOID",
			"RULE_RIGHTPAREN",
			"RULE_WHITESPACE",
			"RULE_LEFTBRACE",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_LINE_COMMENT",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_KW_IF",
			"RULE_WHITESPACE",
			"RULE_LEFTPAREN",
			"RULE_ID",
			"RULE_WHITESPACE",
			"RULE_EQUAL",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_WHITESPACE",
			"RULE_LEFTBRACE",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_STRING_LITERAL",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_KW_RETURN",
			"RULE_WHITESPACE",
			"RULE_MINUS",
			"RULE_DECIMAL_LITERAL",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_RIGHTBRACE",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_AND",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_AND",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_LINE_COMMENT",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_LINE_COMMENT",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_KW_RETURN",
			"RULE_WHITESPACE",
			"RULE_DECIMAL_LITERAL",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_RIGHTBRACE",
			"RULE_NEWLINE",
		};
		//final List<Token> actual = testHelper.getTokens(text);
		//testHelper.outputTokens(text);
		testHelper.checkTokenisation(text, expected);
	}
	
	@Test
	public void checkParserResult()
	throws Exception{

		final String text = this.getSourceText();
		final Model Model_0_Var = this.parseHelper.parse(text);
	
		this.valHelper.assertNoErrors(Model_0_Var);
		Assert.assertNotNull(Model_0_Var);
		final EList<? extends EObject> Unit_0_list = Model_0_Var.getUnit();
		Assert.assertNotNull(Unit_0_list);
		Assert.assertEquals(1, Unit_0_list.size());
		final TranslationUnit TranslationUnit_1_Var = (TranslationUnit)Unit_0_list.get(0);
		Assert.assertNotNull(TranslationUnit_1_Var);
		final EList<? extends EObject> External_1_list = TranslationUnit_1_Var.getExternal();
		Assert.assertNotNull(External_1_list);
		Assert.assertEquals(5, External_1_list.size());
		final ExternalDeclaration ExternalDeclaration_2_Var = (ExternalDeclaration)External_1_list.get(0);
		Assert.assertNotNull(ExternalDeclaration_2_Var);
		final Declaration Declaration_3_Var = (Declaration)ExternalDeclaration_2_Var.getDeclaration();
		Assert.assertNotNull(Declaration_3_Var);
		final DeclarationSpecifiers DeclarationSpecifiers_4_Var = (DeclarationSpecifiers)Declaration_3_Var.getSpecifiers();
		Assert.assertNotNull(DeclarationSpecifiers_4_Var);
		final EList<? extends EObject> DeclarationSpecifier_4_list = DeclarationSpecifiers_4_Var.getDeclarationSpecifier();
		Assert.assertNotNull(DeclarationSpecifier_4_list);
		Assert.assertEquals(2, DeclarationSpecifier_4_list.size());
		final StorageClassSpecifier StorageClassSpecifier_5_Var = (StorageClassSpecifier)DeclarationSpecifier_4_list.get(0);
		Assert.assertNotNull(StorageClassSpecifier_5_Var);
		Assert.assertEquals("typedef", StorageClassSpecifier_5_Var.getName());
		final TypeSpecifier TypeSpecifier_6_Var = (TypeSpecifier)DeclarationSpecifier_4_list.get(1);
		Assert.assertNotNull(TypeSpecifier_6_Var);
		final StructOrUnionSpecifier StructOrUnionSpecifier_7_Var = (StructOrUnionSpecifier)TypeSpecifier_6_Var.getSpecifier();
		Assert.assertNotNull(StructOrUnionSpecifier_7_Var);
		final StructOrUnion StructOrUnion_8_Var = (StructOrUnion)StructOrUnionSpecifier_7_Var.getType();
		Assert.assertNotNull(StructOrUnion_8_Var);
		Assert.assertEquals("struct", StructOrUnion_8_Var.getName());
		Assert.assertEquals("empStruct", StructOrUnionSpecifier_7_Var.getId());
		final StructDeclarationList StructDeclarationList_9_Var = (StructDeclarationList)StructOrUnionSpecifier_7_Var.getStructDeclList();
		Assert.assertNotNull(StructDeclarationList_9_Var);
		final EList<? extends EObject> StructDeclaration_9_list = StructDeclarationList_9_Var.getStructDeclaration();
		Assert.assertNotNull(StructDeclaration_9_list);
		Assert.assertEquals(2, StructDeclaration_9_list.size());
		final StructDeclaration StructDeclaration_10_Var = (StructDeclaration)StructDeclaration_9_list.get(0);
		Assert.assertNotNull(StructDeclaration_10_Var);
		final SpecifierQualifierList SpecifierQualifierList_11_Var = (SpecifierQualifierList)StructDeclaration_10_Var.getList();
		Assert.assertNotNull(SpecifierQualifierList_11_Var);
		final EList<? extends EObject> TypeSpecifier_11_list = SpecifierQualifierList_11_Var.getTypeSpecifier();
		Assert.assertNotNull(TypeSpecifier_11_list);
		Assert.assertEquals(1, TypeSpecifier_11_list.size());
		final TypeSpecifier TypeSpecifier_12_Var = (TypeSpecifier)TypeSpecifier_11_list.get(0);
		Assert.assertNotNull(TypeSpecifier_12_Var);
		Assert.assertEquals("int", TypeSpecifier_12_Var.getName());
		final StructDeclaratorList StructDeclaratorList_13_Var = (StructDeclaratorList)StructDeclaration_10_Var.getStructDeclarationList();
		Assert.assertNotNull(StructDeclaratorList_13_Var);
		final EList<? extends EObject> StructDeclarator_13_list = StructDeclaratorList_13_Var.getStructDeclarator();
		Assert.assertNotNull(StructDeclarator_13_list);
		Assert.assertEquals(1, StructDeclarator_13_list.size());
		final StructDeclarator StructDeclarator_14_Var = (StructDeclarator)StructDeclarator_13_list.get(0);
		Assert.assertNotNull(StructDeclarator_14_Var);
		final Declarator Declarator_15_Var = (Declarator)StructDeclarator_14_Var.getDeclarator();
		Assert.assertNotNull(Declarator_15_Var);
		final DirectDeclarator DirectDeclarator_16_Var = (DirectDeclarator)Declarator_15_Var.getDeclarator();
		Assert.assertNotNull(DirectDeclarator_16_Var);
		Assert.assertEquals("id", DirectDeclarator_16_Var.getId());
		final StructDeclaration StructDeclaration_17_Var = (StructDeclaration)StructDeclaration_9_list.get(1);
		Assert.assertNotNull(StructDeclaration_17_Var);
		final SpecifierQualifierList SpecifierQualifierList_18_Var = (SpecifierQualifierList)StructDeclaration_17_Var.getList();
		Assert.assertNotNull(SpecifierQualifierList_18_Var);
		final EList<? extends EObject> TypeSpecifier_18_list = SpecifierQualifierList_18_Var.getTypeSpecifier();
		Assert.assertNotNull(TypeSpecifier_18_list);
		Assert.assertEquals(1, TypeSpecifier_18_list.size());
		final TypeSpecifier TypeSpecifier_19_Var = (TypeSpecifier)TypeSpecifier_18_list.get(0);
		Assert.assertNotNull(TypeSpecifier_19_Var);
		Assert.assertEquals("char", TypeSpecifier_19_Var.getName());
		final StructDeclaratorList StructDeclaratorList_20_Var = (StructDeclaratorList)StructDeclaration_17_Var.getStructDeclarationList();
		Assert.assertNotNull(StructDeclaratorList_20_Var);
		final EList<? extends EObject> StructDeclarator_20_list = StructDeclaratorList_20_Var.getStructDeclarator();
		Assert.assertNotNull(StructDeclarator_20_list);
		Assert.assertEquals(1, StructDeclarator_20_list.size());
		final StructDeclarator StructDeclarator_21_Var = (StructDeclarator)StructDeclarator_20_list.get(0);
		Assert.assertNotNull(StructDeclarator_21_Var);
		final Declarator Declarator_22_Var = (Declarator)StructDeclarator_21_Var.getDeclarator();
		Assert.assertNotNull(Declarator_22_Var);
		final DirectDeclarator DirectDeclarator_23_Var = (DirectDeclarator)Declarator_22_Var.getDeclarator();
		Assert.assertNotNull(DirectDeclarator_23_Var);
		Assert.assertEquals("name", DirectDeclarator_23_Var.getId());
		final EList<? extends EObject> DeclaratorSuffix_23_list = DirectDeclarator_23_Var.getDeclaratorSuffix();
		Assert.assertNotNull(DeclaratorSuffix_23_list);
		Assert.assertEquals(1, DeclaratorSuffix_23_list.size());
		final DeclaratorSuffix DeclaratorSuffix_24_Var = (DeclaratorSuffix)DeclaratorSuffix_23_list.get(0);
		Assert.assertNotNull(DeclaratorSuffix_24_Var);
		final AssignmentExpression AssignmentExpression_25_Var = (AssignmentExpression)DeclaratorSuffix_24_Var.getExpr();
		Assert.assertNotNull(AssignmentExpression_25_Var);
		final ConditionalExpression ConditionalExpression_26_Var = (ConditionalExpression)AssignmentExpression_25_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_26_Var);
		final LogicalOrExpression LogicalOrExpression_27_Var = (LogicalOrExpression)ConditionalExpression_26_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_27_Var);
		final EList<? extends EObject> Expr_27_list = LogicalOrExpression_27_Var.getExpr();
		Assert.assertNotNull(Expr_27_list);
		Assert.assertEquals(1, Expr_27_list.size());
		final LogicalAndExpression LogicalAndExpression_28_Var = (LogicalAndExpression)Expr_27_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_28_Var);
		final EList<? extends EObject> Expr_28_list = LogicalAndExpression_28_Var.getExpr();
		Assert.assertNotNull(Expr_28_list);
		Assert.assertEquals(1, Expr_28_list.size());
		final InclusiveOrExpression InclusiveOrExpression_29_Var = (InclusiveOrExpression)Expr_28_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_29_Var);
		final EList<? extends EObject> Expr_29_list = InclusiveOrExpression_29_Var.getExpr();
		Assert.assertNotNull(Expr_29_list);
		Assert.assertEquals(1, Expr_29_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_30_Var = (ExclusiveOrExpression)Expr_29_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_30_Var);
		final EList<? extends EObject> Expr_30_list = ExclusiveOrExpression_30_Var.getExpr();
		Assert.assertNotNull(Expr_30_list);
		Assert.assertEquals(1, Expr_30_list.size());
		final AndExpression AndExpression_31_Var = (AndExpression)Expr_30_list.get(0);
		Assert.assertNotNull(AndExpression_31_Var);
		final EList<? extends EObject> Expr_31_list = AndExpression_31_Var.getExpr();
		Assert.assertNotNull(Expr_31_list);
		Assert.assertEquals(1, Expr_31_list.size());
		final EqualityExpression EqualityExpression_32_Var = (EqualityExpression)Expr_31_list.get(0);
		Assert.assertNotNull(EqualityExpression_32_Var);
		final EList<? extends EObject> Expr_32_list = EqualityExpression_32_Var.getExpr();
		Assert.assertNotNull(Expr_32_list);
		Assert.assertEquals(1, Expr_32_list.size());
		final RelationalExpression RelationalExpression_33_Var = (RelationalExpression)Expr_32_list.get(0);
		Assert.assertNotNull(RelationalExpression_33_Var);
		final EList<? extends EObject> Expr_33_list = RelationalExpression_33_Var.getExpr();
		Assert.assertNotNull(Expr_33_list);
		Assert.assertEquals(1, Expr_33_list.size());
		final ShiftExpression ShiftExpression_34_Var = (ShiftExpression)Expr_33_list.get(0);
		Assert.assertNotNull(ShiftExpression_34_Var);
		final EList<? extends EObject> Expr_34_list = ShiftExpression_34_Var.getExpr();
		Assert.assertNotNull(Expr_34_list);
		Assert.assertEquals(1, Expr_34_list.size());
		final AdditiveExpression AdditiveExpression_35_Var = (AdditiveExpression)Expr_34_list.get(0);
		Assert.assertNotNull(AdditiveExpression_35_Var);
		final EList<? extends EObject> Expr_35_list = AdditiveExpression_35_Var.getExpr();
		Assert.assertNotNull(Expr_35_list);
		Assert.assertEquals(1, Expr_35_list.size());
		final MultiplicativeExpression MultiplicativeExpression_36_Var = (MultiplicativeExpression)Expr_35_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_36_Var);
		final EList<? extends EObject> Expr_36_list = MultiplicativeExpression_36_Var.getExpr();
		Assert.assertNotNull(Expr_36_list);
		Assert.assertEquals(1, Expr_36_list.size());
		final CastExpression CastExpression_37_Var = (CastExpression)Expr_36_list.get(0);
		Assert.assertNotNull(CastExpression_37_Var);
		final UnaryExpression UnaryExpression_38_Var = (UnaryExpression)CastExpression_37_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_38_Var);
		final PostfixExpression PostfixExpression_39_Var = (PostfixExpression)UnaryExpression_38_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_39_Var);
		final EList<? extends EObject> Expr_39_list = PostfixExpression_39_Var.getExpr();
		Assert.assertNotNull(Expr_39_list);
		Assert.assertEquals(1, Expr_39_list.size());
		final PrimaryExpression PrimaryExpression_40_Var = (PrimaryExpression)Expr_39_list.get(0);
		Assert.assertNotNull(PrimaryExpression_40_Var);
		final Constant Constant_41_Var = (Constant)PrimaryExpression_40_Var.getConst();
		Assert.assertNotNull(Constant_41_Var);
		Assert.assertEquals("250", Constant_41_Var.getDec());
		final EList<? extends EObject> InitDeclaratorList_41_list = Declaration_3_Var.getInitDeclaratorList();
		Assert.assertNotNull(InitDeclaratorList_41_list);
		Assert.assertEquals(1, InitDeclaratorList_41_list.size());
		final InitDeclaratorList InitDeclaratorList_42_Var = (InitDeclaratorList)InitDeclaratorList_41_list.get(0);
		Assert.assertNotNull(InitDeclaratorList_42_Var);
		final EList<? extends EObject> InitDeclarator_42_list = InitDeclaratorList_42_Var.getInitDeclarator();
		Assert.assertNotNull(InitDeclarator_42_list);
		Assert.assertEquals(1, InitDeclarator_42_list.size());
		final InitDeclarator InitDeclarator_43_Var = (InitDeclarator)InitDeclarator_42_list.get(0);
		Assert.assertNotNull(InitDeclarator_43_Var);
		final Declarator Declarator_44_Var = (Declarator)InitDeclarator_43_Var.getDeclarator();
		Assert.assertNotNull(Declarator_44_Var);
		final DirectDeclarator DirectDeclarator_45_Var = (DirectDeclarator)Declarator_44_Var.getDeclarator();
		Assert.assertNotNull(DirectDeclarator_45_Var);
		Assert.assertEquals("employee", DirectDeclarator_45_Var.getId());
		final ExternalDeclaration ExternalDeclaration_46_Var = (ExternalDeclaration)External_1_list.get(1);
		Assert.assertNotNull(ExternalDeclaration_46_Var);
		final Declaration Declaration_47_Var = (Declaration)ExternalDeclaration_46_Var.getDeclaration();
		Assert.assertNotNull(Declaration_47_Var);
		final DeclarationSpecifiers DeclarationSpecifiers_48_Var = (DeclarationSpecifiers)Declaration_47_Var.getSpecifiers();
		Assert.assertNotNull(DeclarationSpecifiers_48_Var);
		final EList<? extends EObject> DeclarationSpecifier_48_list = DeclarationSpecifiers_48_Var.getDeclarationSpecifier();
		Assert.assertNotNull(DeclarationSpecifier_48_list);
		Assert.assertEquals(1, DeclarationSpecifier_48_list.size());
		final TypeSpecifier TypeSpecifier_49_Var = (TypeSpecifier)DeclarationSpecifier_48_list.get(0);
		Assert.assertNotNull(TypeSpecifier_49_Var);
		final StructOrUnionSpecifier StructOrUnionSpecifier_50_Var = (StructOrUnionSpecifier)TypeSpecifier_49_Var.getSpecifier();
		Assert.assertNotNull(StructOrUnionSpecifier_50_Var);
		final StructOrUnion StructOrUnion_51_Var = (StructOrUnion)StructOrUnionSpecifier_50_Var.getType();
		Assert.assertNotNull(StructOrUnion_51_Var);
		Assert.assertEquals("struct", StructOrUnion_51_Var.getName());
		Assert.assertEquals("empStruct", StructOrUnionSpecifier_50_Var.getId());
		final EList<? extends EObject> InitDeclaratorList_51_list = Declaration_47_Var.getInitDeclaratorList();
		Assert.assertNotNull(InitDeclaratorList_51_list);
		Assert.assertEquals(1, InitDeclaratorList_51_list.size());
		final InitDeclaratorList InitDeclaratorList_52_Var = (InitDeclaratorList)InitDeclaratorList_51_list.get(0);
		Assert.assertNotNull(InitDeclaratorList_52_Var);
		final EList<? extends EObject> InitDeclarator_52_list = InitDeclaratorList_52_Var.getInitDeclarator();
		Assert.assertNotNull(InitDeclarator_52_list);
		Assert.assertEquals(1, InitDeclarator_52_list.size());
		final InitDeclarator InitDeclarator_53_Var = (InitDeclarator)InitDeclarator_52_list.get(0);
		Assert.assertNotNull(InitDeclarator_53_Var);
		final Declarator Declarator_54_Var = (Declarator)InitDeclarator_53_Var.getDeclarator();
		Assert.assertNotNull(Declarator_54_Var);
		final DirectDeclarator DirectDeclarator_55_Var = (DirectDeclarator)Declarator_54_Var.getDeclarator();
		Assert.assertNotNull(DirectDeclarator_55_Var);
		Assert.assertEquals("joe", DirectDeclarator_55_Var.getId());
		final Initializer Initializer_56_Var = (Initializer)InitDeclarator_53_Var.getInitializer();
		Assert.assertNotNull(Initializer_56_Var);
		final InitializerList InitializerList_57_Var = (InitializerList)Initializer_56_Var.getList();
		Assert.assertNotNull(InitializerList_57_Var);
		final EList<? extends EObject> Initializer_57_list = InitializerList_57_Var.getInitializer();
		Assert.assertNotNull(Initializer_57_list);
		Assert.assertEquals(2, Initializer_57_list.size());
		final Initializer Initializer_58_Var = (Initializer)Initializer_57_list.get(0);
		Assert.assertNotNull(Initializer_58_Var);
		final AssignmentExpression AssignmentExpression_59_Var = (AssignmentExpression)Initializer_58_Var.getExpr();
		Assert.assertNotNull(AssignmentExpression_59_Var);
		final ConditionalExpression ConditionalExpression_60_Var = (ConditionalExpression)AssignmentExpression_59_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_60_Var);
		final LogicalOrExpression LogicalOrExpression_61_Var = (LogicalOrExpression)ConditionalExpression_60_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_61_Var);
		final EList<? extends EObject> Expr_61_list = LogicalOrExpression_61_Var.getExpr();
		Assert.assertNotNull(Expr_61_list);
		Assert.assertEquals(1, Expr_61_list.size());
		final LogicalAndExpression LogicalAndExpression_62_Var = (LogicalAndExpression)Expr_61_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_62_Var);
		final EList<? extends EObject> Expr_62_list = LogicalAndExpression_62_Var.getExpr();
		Assert.assertNotNull(Expr_62_list);
		Assert.assertEquals(1, Expr_62_list.size());
		final InclusiveOrExpression InclusiveOrExpression_63_Var = (InclusiveOrExpression)Expr_62_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_63_Var);
		final EList<? extends EObject> Expr_63_list = InclusiveOrExpression_63_Var.getExpr();
		Assert.assertNotNull(Expr_63_list);
		Assert.assertEquals(1, Expr_63_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_64_Var = (ExclusiveOrExpression)Expr_63_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_64_Var);
		final EList<? extends EObject> Expr_64_list = ExclusiveOrExpression_64_Var.getExpr();
		Assert.assertNotNull(Expr_64_list);
		Assert.assertEquals(1, Expr_64_list.size());
		final AndExpression AndExpression_65_Var = (AndExpression)Expr_64_list.get(0);
		Assert.assertNotNull(AndExpression_65_Var);
		final EList<? extends EObject> Expr_65_list = AndExpression_65_Var.getExpr();
		Assert.assertNotNull(Expr_65_list);
		Assert.assertEquals(1, Expr_65_list.size());
		final EqualityExpression EqualityExpression_66_Var = (EqualityExpression)Expr_65_list.get(0);
		Assert.assertNotNull(EqualityExpression_66_Var);
		final EList<? extends EObject> Expr_66_list = EqualityExpression_66_Var.getExpr();
		Assert.assertNotNull(Expr_66_list);
		Assert.assertEquals(1, Expr_66_list.size());
		final RelationalExpression RelationalExpression_67_Var = (RelationalExpression)Expr_66_list.get(0);
		Assert.assertNotNull(RelationalExpression_67_Var);
		final EList<? extends EObject> Expr_67_list = RelationalExpression_67_Var.getExpr();
		Assert.assertNotNull(Expr_67_list);
		Assert.assertEquals(1, Expr_67_list.size());
		final ShiftExpression ShiftExpression_68_Var = (ShiftExpression)Expr_67_list.get(0);
		Assert.assertNotNull(ShiftExpression_68_Var);
		final EList<? extends EObject> Expr_68_list = ShiftExpression_68_Var.getExpr();
		Assert.assertNotNull(Expr_68_list);
		Assert.assertEquals(1, Expr_68_list.size());
		final AdditiveExpression AdditiveExpression_69_Var = (AdditiveExpression)Expr_68_list.get(0);
		Assert.assertNotNull(AdditiveExpression_69_Var);
		final EList<? extends EObject> Expr_69_list = AdditiveExpression_69_Var.getExpr();
		Assert.assertNotNull(Expr_69_list);
		Assert.assertEquals(1, Expr_69_list.size());
		final MultiplicativeExpression MultiplicativeExpression_70_Var = (MultiplicativeExpression)Expr_69_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_70_Var);
		final EList<? extends EObject> Expr_70_list = MultiplicativeExpression_70_Var.getExpr();
		Assert.assertNotNull(Expr_70_list);
		Assert.assertEquals(1, Expr_70_list.size());
		final CastExpression CastExpression_71_Var = (CastExpression)Expr_70_list.get(0);
		Assert.assertNotNull(CastExpression_71_Var);
		final UnaryExpression UnaryExpression_72_Var = (UnaryExpression)CastExpression_71_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_72_Var);
		final PostfixExpression PostfixExpression_73_Var = (PostfixExpression)UnaryExpression_72_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_73_Var);
		final EList<? extends EObject> Expr_73_list = PostfixExpression_73_Var.getExpr();
		Assert.assertNotNull(Expr_73_list);
		Assert.assertEquals(1, Expr_73_list.size());
		final PrimaryExpression PrimaryExpression_74_Var = (PrimaryExpression)Expr_73_list.get(0);
		Assert.assertNotNull(PrimaryExpression_74_Var);
		final Constant Constant_75_Var = (Constant)PrimaryExpression_74_Var.getConst();
		Assert.assertNotNull(Constant_75_Var);
		Assert.assertEquals("0x007", Constant_75_Var.getHex());
		final Initializer Initializer_76_Var = (Initializer)Initializer_57_list.get(1);
		Assert.assertNotNull(Initializer_76_Var);
		final AssignmentExpression AssignmentExpression_77_Var = (AssignmentExpression)Initializer_76_Var.getExpr();
		Assert.assertNotNull(AssignmentExpression_77_Var);
		final ConditionalExpression ConditionalExpression_78_Var = (ConditionalExpression)AssignmentExpression_77_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_78_Var);
		final LogicalOrExpression LogicalOrExpression_79_Var = (LogicalOrExpression)ConditionalExpression_78_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_79_Var);
		final EList<? extends EObject> Expr_79_list = LogicalOrExpression_79_Var.getExpr();
		Assert.assertNotNull(Expr_79_list);
		Assert.assertEquals(1, Expr_79_list.size());
		final LogicalAndExpression LogicalAndExpression_80_Var = (LogicalAndExpression)Expr_79_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_80_Var);
		final EList<? extends EObject> Expr_80_list = LogicalAndExpression_80_Var.getExpr();
		Assert.assertNotNull(Expr_80_list);
		Assert.assertEquals(1, Expr_80_list.size());
		final InclusiveOrExpression InclusiveOrExpression_81_Var = (InclusiveOrExpression)Expr_80_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_81_Var);
		final EList<? extends EObject> Expr_81_list = InclusiveOrExpression_81_Var.getExpr();
		Assert.assertNotNull(Expr_81_list);
		Assert.assertEquals(1, Expr_81_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_82_Var = (ExclusiveOrExpression)Expr_81_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_82_Var);
		final EList<? extends EObject> Expr_82_list = ExclusiveOrExpression_82_Var.getExpr();
		Assert.assertNotNull(Expr_82_list);
		Assert.assertEquals(1, Expr_82_list.size());
		final AndExpression AndExpression_83_Var = (AndExpression)Expr_82_list.get(0);
		Assert.assertNotNull(AndExpression_83_Var);
		final EList<? extends EObject> Expr_83_list = AndExpression_83_Var.getExpr();
		Assert.assertNotNull(Expr_83_list);
		Assert.assertEquals(1, Expr_83_list.size());
		final EqualityExpression EqualityExpression_84_Var = (EqualityExpression)Expr_83_list.get(0);
		Assert.assertNotNull(EqualityExpression_84_Var);
		final EList<? extends EObject> Expr_84_list = EqualityExpression_84_Var.getExpr();
		Assert.assertNotNull(Expr_84_list);
		Assert.assertEquals(1, Expr_84_list.size());
		final RelationalExpression RelationalExpression_85_Var = (RelationalExpression)Expr_84_list.get(0);
		Assert.assertNotNull(RelationalExpression_85_Var);
		final EList<? extends EObject> Expr_85_list = RelationalExpression_85_Var.getExpr();
		Assert.assertNotNull(Expr_85_list);
		Assert.assertEquals(1, Expr_85_list.size());
		final ShiftExpression ShiftExpression_86_Var = (ShiftExpression)Expr_85_list.get(0);
		Assert.assertNotNull(ShiftExpression_86_Var);
		final EList<? extends EObject> Expr_86_list = ShiftExpression_86_Var.getExpr();
		Assert.assertNotNull(Expr_86_list);
		Assert.assertEquals(1, Expr_86_list.size());
		final AdditiveExpression AdditiveExpression_87_Var = (AdditiveExpression)Expr_86_list.get(0);
		Assert.assertNotNull(AdditiveExpression_87_Var);
		final EList<? extends EObject> Expr_87_list = AdditiveExpression_87_Var.getExpr();
		Assert.assertNotNull(Expr_87_list);
		Assert.assertEquals(1, Expr_87_list.size());
		final MultiplicativeExpression MultiplicativeExpression_88_Var = (MultiplicativeExpression)Expr_87_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_88_Var);
		final EList<? extends EObject> Expr_88_list = MultiplicativeExpression_88_Var.getExpr();
		Assert.assertNotNull(Expr_88_list);
		Assert.assertEquals(1, Expr_88_list.size());
		final CastExpression CastExpression_89_Var = (CastExpression)Expr_88_list.get(0);
		Assert.assertNotNull(CastExpression_89_Var);
		final UnaryExpression UnaryExpression_90_Var = (UnaryExpression)CastExpression_89_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_90_Var);
		final PostfixExpression PostfixExpression_91_Var = (PostfixExpression)UnaryExpression_90_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_91_Var);
		final EList<? extends EObject> Expr_91_list = PostfixExpression_91_Var.getExpr();
		Assert.assertNotNull(Expr_91_list);
		Assert.assertEquals(1, Expr_91_list.size());
		final PrimaryExpression PrimaryExpression_92_Var = (PrimaryExpression)Expr_91_list.get(0);
		Assert.assertNotNull(PrimaryExpression_92_Var);
		final Constant Constant_93_Var = (Constant)PrimaryExpression_92_Var.getConst();
		Assert.assertNotNull(Constant_93_Var);
		Assert.assertEquals("\"Joe Nobody\"", Constant_93_Var.getStr());
		final ExternalDeclaration ExternalDeclaration_94_Var = (ExternalDeclaration)External_1_list.get(2);
		Assert.assertNotNull(ExternalDeclaration_94_Var);
		final Declaration Declaration_95_Var = (Declaration)ExternalDeclaration_94_Var.getDeclaration();
		Assert.assertNotNull(Declaration_95_Var);
		final DeclarationSpecifiers DeclarationSpecifiers_96_Var = (DeclarationSpecifiers)Declaration_95_Var.getSpecifiers();
		Assert.assertNotNull(DeclarationSpecifiers_96_Var);
		final EList<? extends EObject> DeclarationSpecifier_96_list = DeclarationSpecifiers_96_Var.getDeclarationSpecifier();
		Assert.assertNotNull(DeclarationSpecifier_96_list);
		Assert.assertEquals(1, DeclarationSpecifier_96_list.size());
		final TypeSpecifier TypeSpecifier_97_Var = (TypeSpecifier)DeclarationSpecifier_96_list.get(0);
		Assert.assertNotNull(TypeSpecifier_97_Var);
		final TypedefName TypedefName_98_Var = (TypedefName)TypeSpecifier_97_Var.getType();
		Assert.assertNotNull(TypedefName_98_Var);
		Assert.assertEquals("employee", TypedefName_98_Var.getId());
		final EList<? extends EObject> InitDeclaratorList_98_list = Declaration_95_Var.getInitDeclaratorList();
		Assert.assertNotNull(InitDeclaratorList_98_list);
		Assert.assertEquals(1, InitDeclaratorList_98_list.size());
		final InitDeclaratorList InitDeclaratorList_99_Var = (InitDeclaratorList)InitDeclaratorList_98_list.get(0);
		Assert.assertNotNull(InitDeclaratorList_99_Var);
		final EList<? extends EObject> InitDeclarator_99_list = InitDeclaratorList_99_Var.getInitDeclarator();
		Assert.assertNotNull(InitDeclarator_99_list);
		Assert.assertEquals(1, InitDeclarator_99_list.size());
		final InitDeclarator InitDeclarator_100_Var = (InitDeclarator)InitDeclarator_99_list.get(0);
		Assert.assertNotNull(InitDeclarator_100_Var);
		final Declarator Declarator_101_Var = (Declarator)InitDeclarator_100_Var.getDeclarator();
		Assert.assertNotNull(Declarator_101_Var);
		final DirectDeclarator DirectDeclarator_102_Var = (DirectDeclarator)Declarator_101_Var.getDeclarator();
		Assert.assertNotNull(DirectDeclarator_102_Var);
		Assert.assertEquals("phil", DirectDeclarator_102_Var.getId());
		final Initializer Initializer_103_Var = (Initializer)InitDeclarator_100_Var.getInitializer();
		Assert.assertNotNull(Initializer_103_Var);
		final InitializerList InitializerList_104_Var = (InitializerList)Initializer_103_Var.getList();
		Assert.assertNotNull(InitializerList_104_Var);
		final EList<? extends EObject> Initializer_104_list = InitializerList_104_Var.getInitializer();
		Assert.assertNotNull(Initializer_104_list);
		Assert.assertEquals(2, Initializer_104_list.size());
		final Initializer Initializer_105_Var = (Initializer)Initializer_104_list.get(0);
		Assert.assertNotNull(Initializer_105_Var);
		final AssignmentExpression AssignmentExpression_106_Var = (AssignmentExpression)Initializer_105_Var.getExpr();
		Assert.assertNotNull(AssignmentExpression_106_Var);
		final ConditionalExpression ConditionalExpression_107_Var = (ConditionalExpression)AssignmentExpression_106_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_107_Var);
		final LogicalOrExpression LogicalOrExpression_108_Var = (LogicalOrExpression)ConditionalExpression_107_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_108_Var);
		final EList<? extends EObject> Expr_108_list = LogicalOrExpression_108_Var.getExpr();
		Assert.assertNotNull(Expr_108_list);
		Assert.assertEquals(1, Expr_108_list.size());
		final LogicalAndExpression LogicalAndExpression_109_Var = (LogicalAndExpression)Expr_108_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_109_Var);
		final EList<? extends EObject> Expr_109_list = LogicalAndExpression_109_Var.getExpr();
		Assert.assertNotNull(Expr_109_list);
		Assert.assertEquals(1, Expr_109_list.size());
		final InclusiveOrExpression InclusiveOrExpression_110_Var = (InclusiveOrExpression)Expr_109_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_110_Var);
		final EList<? extends EObject> Expr_110_list = InclusiveOrExpression_110_Var.getExpr();
		Assert.assertNotNull(Expr_110_list);
		Assert.assertEquals(1, Expr_110_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_111_Var = (ExclusiveOrExpression)Expr_110_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_111_Var);
		final EList<? extends EObject> Expr_111_list = ExclusiveOrExpression_111_Var.getExpr();
		Assert.assertNotNull(Expr_111_list);
		Assert.assertEquals(1, Expr_111_list.size());
		final AndExpression AndExpression_112_Var = (AndExpression)Expr_111_list.get(0);
		Assert.assertNotNull(AndExpression_112_Var);
		final EList<? extends EObject> Expr_112_list = AndExpression_112_Var.getExpr();
		Assert.assertNotNull(Expr_112_list);
		Assert.assertEquals(1, Expr_112_list.size());
		final EqualityExpression EqualityExpression_113_Var = (EqualityExpression)Expr_112_list.get(0);
		Assert.assertNotNull(EqualityExpression_113_Var);
		final EList<? extends EObject> Expr_113_list = EqualityExpression_113_Var.getExpr();
		Assert.assertNotNull(Expr_113_list);
		Assert.assertEquals(1, Expr_113_list.size());
		final RelationalExpression RelationalExpression_114_Var = (RelationalExpression)Expr_113_list.get(0);
		Assert.assertNotNull(RelationalExpression_114_Var);
		final EList<? extends EObject> Expr_114_list = RelationalExpression_114_Var.getExpr();
		Assert.assertNotNull(Expr_114_list);
		Assert.assertEquals(1, Expr_114_list.size());
		final ShiftExpression ShiftExpression_115_Var = (ShiftExpression)Expr_114_list.get(0);
		Assert.assertNotNull(ShiftExpression_115_Var);
		final EList<? extends EObject> Expr_115_list = ShiftExpression_115_Var.getExpr();
		Assert.assertNotNull(Expr_115_list);
		Assert.assertEquals(1, Expr_115_list.size());
		final AdditiveExpression AdditiveExpression_116_Var = (AdditiveExpression)Expr_115_list.get(0);
		Assert.assertNotNull(AdditiveExpression_116_Var);
		final EList<? extends EObject> Expr_116_list = AdditiveExpression_116_Var.getExpr();
		Assert.assertNotNull(Expr_116_list);
		Assert.assertEquals(1, Expr_116_list.size());
		final MultiplicativeExpression MultiplicativeExpression_117_Var = (MultiplicativeExpression)Expr_116_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_117_Var);
		final EList<? extends EObject> Expr_117_list = MultiplicativeExpression_117_Var.getExpr();
		Assert.assertNotNull(Expr_117_list);
		Assert.assertEquals(1, Expr_117_list.size());
		final CastExpression CastExpression_118_Var = (CastExpression)Expr_117_list.get(0);
		Assert.assertNotNull(CastExpression_118_Var);
		final UnaryExpression UnaryExpression_119_Var = (UnaryExpression)CastExpression_118_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_119_Var);
		final PostfixExpression PostfixExpression_120_Var = (PostfixExpression)UnaryExpression_119_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_120_Var);
		final EList<? extends EObject> Expr_120_list = PostfixExpression_120_Var.getExpr();
		Assert.assertNotNull(Expr_120_list);
		Assert.assertEquals(1, Expr_120_list.size());
		final PrimaryExpression PrimaryExpression_121_Var = (PrimaryExpression)Expr_120_list.get(0);
		Assert.assertNotNull(PrimaryExpression_121_Var);
		final Constant Constant_122_Var = (Constant)PrimaryExpression_121_Var.getConst();
		Assert.assertNotNull(Constant_122_Var);
		Assert.assertEquals("0x008", Constant_122_Var.getHex());
		final Initializer Initializer_123_Var = (Initializer)Initializer_104_list.get(1);
		Assert.assertNotNull(Initializer_123_Var);
		final AssignmentExpression AssignmentExpression_124_Var = (AssignmentExpression)Initializer_123_Var.getExpr();
		Assert.assertNotNull(AssignmentExpression_124_Var);
		final ConditionalExpression ConditionalExpression_125_Var = (ConditionalExpression)AssignmentExpression_124_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_125_Var);
		final LogicalOrExpression LogicalOrExpression_126_Var = (LogicalOrExpression)ConditionalExpression_125_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_126_Var);
		final EList<? extends EObject> Expr_126_list = LogicalOrExpression_126_Var.getExpr();
		Assert.assertNotNull(Expr_126_list);
		Assert.assertEquals(1, Expr_126_list.size());
		final LogicalAndExpression LogicalAndExpression_127_Var = (LogicalAndExpression)Expr_126_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_127_Var);
		final EList<? extends EObject> Expr_127_list = LogicalAndExpression_127_Var.getExpr();
		Assert.assertNotNull(Expr_127_list);
		Assert.assertEquals(1, Expr_127_list.size());
		final InclusiveOrExpression InclusiveOrExpression_128_Var = (InclusiveOrExpression)Expr_127_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_128_Var);
		final EList<? extends EObject> Expr_128_list = InclusiveOrExpression_128_Var.getExpr();
		Assert.assertNotNull(Expr_128_list);
		Assert.assertEquals(1, Expr_128_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_129_Var = (ExclusiveOrExpression)Expr_128_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_129_Var);
		final EList<? extends EObject> Expr_129_list = ExclusiveOrExpression_129_Var.getExpr();
		Assert.assertNotNull(Expr_129_list);
		Assert.assertEquals(1, Expr_129_list.size());
		final AndExpression AndExpression_130_Var = (AndExpression)Expr_129_list.get(0);
		Assert.assertNotNull(AndExpression_130_Var);
		final EList<? extends EObject> Expr_130_list = AndExpression_130_Var.getExpr();
		Assert.assertNotNull(Expr_130_list);
		Assert.assertEquals(1, Expr_130_list.size());
		final EqualityExpression EqualityExpression_131_Var = (EqualityExpression)Expr_130_list.get(0);
		Assert.assertNotNull(EqualityExpression_131_Var);
		final EList<? extends EObject> Expr_131_list = EqualityExpression_131_Var.getExpr();
		Assert.assertNotNull(Expr_131_list);
		Assert.assertEquals(1, Expr_131_list.size());
		final RelationalExpression RelationalExpression_132_Var = (RelationalExpression)Expr_131_list.get(0);
		Assert.assertNotNull(RelationalExpression_132_Var);
		final EList<? extends EObject> Expr_132_list = RelationalExpression_132_Var.getExpr();
		Assert.assertNotNull(Expr_132_list);
		Assert.assertEquals(1, Expr_132_list.size());
		final ShiftExpression ShiftExpression_133_Var = (ShiftExpression)Expr_132_list.get(0);
		Assert.assertNotNull(ShiftExpression_133_Var);
		final EList<? extends EObject> Expr_133_list = ShiftExpression_133_Var.getExpr();
		Assert.assertNotNull(Expr_133_list);
		Assert.assertEquals(1, Expr_133_list.size());
		final AdditiveExpression AdditiveExpression_134_Var = (AdditiveExpression)Expr_133_list.get(0);
		Assert.assertNotNull(AdditiveExpression_134_Var);
		final EList<? extends EObject> Expr_134_list = AdditiveExpression_134_Var.getExpr();
		Assert.assertNotNull(Expr_134_list);
		Assert.assertEquals(1, Expr_134_list.size());
		final MultiplicativeExpression MultiplicativeExpression_135_Var = (MultiplicativeExpression)Expr_134_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_135_Var);
		final EList<? extends EObject> Expr_135_list = MultiplicativeExpression_135_Var.getExpr();
		Assert.assertNotNull(Expr_135_list);
		Assert.assertEquals(1, Expr_135_list.size());
		final CastExpression CastExpression_136_Var = (CastExpression)Expr_135_list.get(0);
		Assert.assertNotNull(CastExpression_136_Var);
		final UnaryExpression UnaryExpression_137_Var = (UnaryExpression)CastExpression_136_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_137_Var);
		final PostfixExpression PostfixExpression_138_Var = (PostfixExpression)UnaryExpression_137_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_138_Var);
		final EList<? extends EObject> Expr_138_list = PostfixExpression_138_Var.getExpr();
		Assert.assertNotNull(Expr_138_list);
		Assert.assertEquals(1, Expr_138_list.size());
		final PrimaryExpression PrimaryExpression_139_Var = (PrimaryExpression)Expr_138_list.get(0);
		Assert.assertNotNull(PrimaryExpression_139_Var);
		final Constant Constant_140_Var = (Constant)PrimaryExpression_139_Var.getConst();
		Assert.assertNotNull(Constant_140_Var);
		Assert.assertEquals("\"Phil Morrison\"", Constant_140_Var.getStr());
		final ExternalDeclaration ExternalDeclaration_141_Var = (ExternalDeclaration)External_1_list.get(3);
		Assert.assertNotNull(ExternalDeclaration_141_Var);
		final FunctionDefHead FunctionDefHead_142_Var = (FunctionDefHead)ExternalDeclaration_141_Var.getFunctiondefHead();
		Assert.assertNotNull(FunctionDefHead_142_Var);
		final DeclarationSpecifiers DeclarationSpecifiers_143_Var = (DeclarationSpecifiers)FunctionDefHead_142_Var.getFunDeclSpecifiers();
		Assert.assertNotNull(DeclarationSpecifiers_143_Var);
		final EList<? extends EObject> DeclarationSpecifier_143_list = DeclarationSpecifiers_143_Var.getDeclarationSpecifier();
		Assert.assertNotNull(DeclarationSpecifier_143_list);
		Assert.assertEquals(1, DeclarationSpecifier_143_list.size());
		final TypeSpecifier TypeSpecifier_144_Var = (TypeSpecifier)DeclarationSpecifier_143_list.get(0);
		Assert.assertNotNull(TypeSpecifier_144_Var);
		Assert.assertEquals("void", TypeSpecifier_144_Var.getName());
		final Declarator Declarator_145_Var = (Declarator)FunctionDefHead_142_Var.getFunDeclarator();
		Assert.assertNotNull(Declarator_145_Var);
		final DirectDeclarator DirectDeclarator_146_Var = (DirectDeclarator)Declarator_145_Var.getDeclarator();
		Assert.assertNotNull(DirectDeclarator_146_Var);
		Assert.assertEquals("print", DirectDeclarator_146_Var.getId());
		final EList<? extends EObject> DeclaratorSuffix_146_list = DirectDeclarator_146_Var.getDeclaratorSuffix();
		Assert.assertNotNull(DeclaratorSuffix_146_list);
		Assert.assertEquals(1, DeclaratorSuffix_146_list.size());
		final DeclaratorSuffix DeclaratorSuffix_147_Var = (DeclaratorSuffix)DeclaratorSuffix_146_list.get(0);
		Assert.assertNotNull(DeclaratorSuffix_147_Var);
		final DirectDeclaratorLastSuffix DirectDeclaratorLastSuffix_148_Var = (DirectDeclaratorLastSuffix)DeclaratorSuffix_147_Var.getLastSuffix();
		Assert.assertNotNull(DirectDeclaratorLastSuffix_148_Var);
		final EList<? extends EObject> ParameterTypeList_148_list = DirectDeclaratorLastSuffix_148_Var.getParameterTypeList();
		Assert.assertNotNull(ParameterTypeList_148_list);
		Assert.assertEquals(1, ParameterTypeList_148_list.size());
		final ParameterTypeList ParameterTypeList_149_Var = (ParameterTypeList)ParameterTypeList_148_list.get(0);
		Assert.assertNotNull(ParameterTypeList_149_Var);
		final ParameterList ParameterList_150_Var = (ParameterList)ParameterTypeList_149_Var.getList();
		Assert.assertNotNull(ParameterList_150_Var);
		final EList<? extends EObject> ParameterDeclaration_150_list = ParameterList_150_Var.getParameterDeclaration();
		Assert.assertNotNull(ParameterDeclaration_150_list);
		Assert.assertEquals(1, ParameterDeclaration_150_list.size());
		final ParameterDeclaration ParameterDeclaration_151_Var = (ParameterDeclaration)ParameterDeclaration_150_list.get(0);
		Assert.assertNotNull(ParameterDeclaration_151_Var);
		final DeclarationSpecifiers DeclarationSpecifiers_152_Var = (DeclarationSpecifiers)ParameterDeclaration_151_Var.getDeclSpecifiers();
		Assert.assertNotNull(DeclarationSpecifiers_152_Var);
		final EList<? extends EObject> DeclarationSpecifier_152_list = DeclarationSpecifiers_152_Var.getDeclarationSpecifier();
		Assert.assertNotNull(DeclarationSpecifier_152_list);
		Assert.assertEquals(1, DeclarationSpecifier_152_list.size());
		final TypeSpecifier TypeSpecifier_153_Var = (TypeSpecifier)DeclarationSpecifier_152_list.get(0);
		Assert.assertNotNull(TypeSpecifier_153_Var);
		final TypedefName TypedefName_154_Var = (TypedefName)TypeSpecifier_153_Var.getType();
		Assert.assertNotNull(TypedefName_154_Var);
		Assert.assertEquals("employee", TypedefName_154_Var.getId());
		final Declarator Declarator_155_Var = (Declarator)ParameterDeclaration_151_Var.getDeclarator();
		Assert.assertNotNull(Declarator_155_Var);
		final DirectDeclarator DirectDeclarator_156_Var = (DirectDeclarator)Declarator_155_Var.getDeclarator();
		Assert.assertNotNull(DirectDeclarator_156_Var);
		Assert.assertEquals("emp", DirectDeclarator_156_Var.getId());
		final Pointer Pointer_157_Var = (Pointer)Declarator_155_Var.getPointer();
		Assert.assertNotNull(Pointer_157_Var);
		Assert.assertEquals("[*]", Pointer_157_Var.getStar().toString());
		final FunctionDefinition FunctionDefinition_158_Var = (FunctionDefinition)ExternalDeclaration_141_Var.getFunctionDefinition();
		Assert.assertNotNull(FunctionDefinition_158_Var);
		final BodyStatement BodyStatement_159_Var = (BodyStatement)FunctionDefinition_158_Var.getBody();
		Assert.assertNotNull(BodyStatement_159_Var);
		final EList<? extends EObject> BlockList_159_list = BodyStatement_159_Var.getBlockList();
		Assert.assertNotNull(BlockList_159_list);
		Assert.assertEquals(1, BlockList_159_list.size());
		final BlockList BlockList_160_Var = (BlockList)BlockList_159_list.get(0);
		Assert.assertNotNull(BlockList_160_Var);
		final EList<? extends EObject> Statement_160_list = BlockList_160_Var.getStatement();
		Assert.assertNotNull(Statement_160_list);
		Assert.assertEquals(1, Statement_160_list.size());
		final Statement Statement_161_Var = (Statement)Statement_160_list.get(0);
		Assert.assertNotNull(Statement_161_Var);
		final ExpressionStatement ExpressionStatement_162_Var = (ExpressionStatement)Statement_161_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_162_Var);
		final Expression Expression_163_Var = (Expression)ExpressionStatement_162_Var.getExpression();
		Assert.assertNotNull(Expression_163_Var);
		final EList<? extends EObject> ExprExpr_163_list = Expression_163_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_163_list);
		Assert.assertEquals(1, ExprExpr_163_list.size());
		final AssignmentExpression AssignmentExpression_164_Var = (AssignmentExpression)ExprExpr_163_list.get(0);
		Assert.assertNotNull(AssignmentExpression_164_Var);
		final ConditionalExpression ConditionalExpression_165_Var = (ConditionalExpression)AssignmentExpression_164_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_165_Var);
		final LogicalOrExpression LogicalOrExpression_166_Var = (LogicalOrExpression)ConditionalExpression_165_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_166_Var);
		final EList<? extends EObject> Expr_166_list = LogicalOrExpression_166_Var.getExpr();
		Assert.assertNotNull(Expr_166_list);
		Assert.assertEquals(1, Expr_166_list.size());
		final LogicalAndExpression LogicalAndExpression_167_Var = (LogicalAndExpression)Expr_166_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_167_Var);
		final EList<? extends EObject> Expr_167_list = LogicalAndExpression_167_Var.getExpr();
		Assert.assertNotNull(Expr_167_list);
		Assert.assertEquals(1, Expr_167_list.size());
		final InclusiveOrExpression InclusiveOrExpression_168_Var = (InclusiveOrExpression)Expr_167_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_168_Var);
		final EList<? extends EObject> Expr_168_list = InclusiveOrExpression_168_Var.getExpr();
		Assert.assertNotNull(Expr_168_list);
		Assert.assertEquals(1, Expr_168_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_169_Var = (ExclusiveOrExpression)Expr_168_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_169_Var);
		final EList<? extends EObject> Expr_169_list = ExclusiveOrExpression_169_Var.getExpr();
		Assert.assertNotNull(Expr_169_list);
		Assert.assertEquals(1, Expr_169_list.size());
		final AndExpression AndExpression_170_Var = (AndExpression)Expr_169_list.get(0);
		Assert.assertNotNull(AndExpression_170_Var);
		final EList<? extends EObject> Expr_170_list = AndExpression_170_Var.getExpr();
		Assert.assertNotNull(Expr_170_list);
		Assert.assertEquals(1, Expr_170_list.size());
		final EqualityExpression EqualityExpression_171_Var = (EqualityExpression)Expr_170_list.get(0);
		Assert.assertNotNull(EqualityExpression_171_Var);
		final EList<? extends EObject> Expr_171_list = EqualityExpression_171_Var.getExpr();
		Assert.assertNotNull(Expr_171_list);
		Assert.assertEquals(1, Expr_171_list.size());
		final RelationalExpression RelationalExpression_172_Var = (RelationalExpression)Expr_171_list.get(0);
		Assert.assertNotNull(RelationalExpression_172_Var);
		final EList<? extends EObject> Expr_172_list = RelationalExpression_172_Var.getExpr();
		Assert.assertNotNull(Expr_172_list);
		Assert.assertEquals(1, Expr_172_list.size());
		final ShiftExpression ShiftExpression_173_Var = (ShiftExpression)Expr_172_list.get(0);
		Assert.assertNotNull(ShiftExpression_173_Var);
		final EList<? extends EObject> Expr_173_list = ShiftExpression_173_Var.getExpr();
		Assert.assertNotNull(Expr_173_list);
		Assert.assertEquals(1, Expr_173_list.size());
		final AdditiveExpression AdditiveExpression_174_Var = (AdditiveExpression)Expr_173_list.get(0);
		Assert.assertNotNull(AdditiveExpression_174_Var);
		final EList<? extends EObject> Expr_174_list = AdditiveExpression_174_Var.getExpr();
		Assert.assertNotNull(Expr_174_list);
		Assert.assertEquals(1, Expr_174_list.size());
		final MultiplicativeExpression MultiplicativeExpression_175_Var = (MultiplicativeExpression)Expr_174_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_175_Var);
		final EList<? extends EObject> Expr_175_list = MultiplicativeExpression_175_Var.getExpr();
		Assert.assertNotNull(Expr_175_list);
		Assert.assertEquals(1, Expr_175_list.size());
		final CastExpression CastExpression_176_Var = (CastExpression)Expr_175_list.get(0);
		Assert.assertNotNull(CastExpression_176_Var);
		final UnaryExpression UnaryExpression_177_Var = (UnaryExpression)CastExpression_176_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_177_Var);
		final PostfixExpression PostfixExpression_178_Var = (PostfixExpression)UnaryExpression_177_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_178_Var);
		final EList<? extends EObject> Expr_178_list = PostfixExpression_178_Var.getExpr();
		Assert.assertNotNull(Expr_178_list);
		Assert.assertEquals(1, Expr_178_list.size());
		final PrimaryExpression PrimaryExpression_179_Var = (PrimaryExpression)Expr_178_list.get(0);
		Assert.assertNotNull(PrimaryExpression_179_Var);
		Assert.assertEquals("printf", PrimaryExpression_179_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_179_list = PostfixExpression_178_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_179_list);
		Assert.assertEquals(1, ArgumentExpressionList_179_list.size());
		final ArgumentExpressionList ArgumentExpressionList_180_Var = (ArgumentExpressionList)ArgumentExpressionList_179_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_180_Var);
		final EList<? extends EObject> Expr_180_list = ArgumentExpressionList_180_Var.getExpr();
		Assert.assertNotNull(Expr_180_list);
		Assert.assertEquals(2, Expr_180_list.size());
		final AssignmentExpression AssignmentExpression_181_Var = (AssignmentExpression)Expr_180_list.get(0);
		Assert.assertNotNull(AssignmentExpression_181_Var);
		final ConditionalExpression ConditionalExpression_182_Var = (ConditionalExpression)AssignmentExpression_181_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_182_Var);
		final LogicalOrExpression LogicalOrExpression_183_Var = (LogicalOrExpression)ConditionalExpression_182_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_183_Var);
		final EList<? extends EObject> Expr_183_list = LogicalOrExpression_183_Var.getExpr();
		Assert.assertNotNull(Expr_183_list);
		Assert.assertEquals(1, Expr_183_list.size());
		final LogicalAndExpression LogicalAndExpression_184_Var = (LogicalAndExpression)Expr_183_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_184_Var);
		final EList<? extends EObject> Expr_184_list = LogicalAndExpression_184_Var.getExpr();
		Assert.assertNotNull(Expr_184_list);
		Assert.assertEquals(1, Expr_184_list.size());
		final InclusiveOrExpression InclusiveOrExpression_185_Var = (InclusiveOrExpression)Expr_184_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_185_Var);
		final EList<? extends EObject> Expr_185_list = InclusiveOrExpression_185_Var.getExpr();
		Assert.assertNotNull(Expr_185_list);
		Assert.assertEquals(1, Expr_185_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_186_Var = (ExclusiveOrExpression)Expr_185_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_186_Var);
		final EList<? extends EObject> Expr_186_list = ExclusiveOrExpression_186_Var.getExpr();
		Assert.assertNotNull(Expr_186_list);
		Assert.assertEquals(1, Expr_186_list.size());
		final AndExpression AndExpression_187_Var = (AndExpression)Expr_186_list.get(0);
		Assert.assertNotNull(AndExpression_187_Var);
		final EList<? extends EObject> Expr_187_list = AndExpression_187_Var.getExpr();
		Assert.assertNotNull(Expr_187_list);
		Assert.assertEquals(1, Expr_187_list.size());
		final EqualityExpression EqualityExpression_188_Var = (EqualityExpression)Expr_187_list.get(0);
		Assert.assertNotNull(EqualityExpression_188_Var);
		final EList<? extends EObject> Expr_188_list = EqualityExpression_188_Var.getExpr();
		Assert.assertNotNull(Expr_188_list);
		Assert.assertEquals(1, Expr_188_list.size());
		final RelationalExpression RelationalExpression_189_Var = (RelationalExpression)Expr_188_list.get(0);
		Assert.assertNotNull(RelationalExpression_189_Var);
		final EList<? extends EObject> Expr_189_list = RelationalExpression_189_Var.getExpr();
		Assert.assertNotNull(Expr_189_list);
		Assert.assertEquals(1, Expr_189_list.size());
		final ShiftExpression ShiftExpression_190_Var = (ShiftExpression)Expr_189_list.get(0);
		Assert.assertNotNull(ShiftExpression_190_Var);
		final EList<? extends EObject> Expr_190_list = ShiftExpression_190_Var.getExpr();
		Assert.assertNotNull(Expr_190_list);
		Assert.assertEquals(1, Expr_190_list.size());
		final AdditiveExpression AdditiveExpression_191_Var = (AdditiveExpression)Expr_190_list.get(0);
		Assert.assertNotNull(AdditiveExpression_191_Var);
		final EList<? extends EObject> Expr_191_list = AdditiveExpression_191_Var.getExpr();
		Assert.assertNotNull(Expr_191_list);
		Assert.assertEquals(1, Expr_191_list.size());
		final MultiplicativeExpression MultiplicativeExpression_192_Var = (MultiplicativeExpression)Expr_191_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_192_Var);
		final EList<? extends EObject> Expr_192_list = MultiplicativeExpression_192_Var.getExpr();
		Assert.assertNotNull(Expr_192_list);
		Assert.assertEquals(1, Expr_192_list.size());
		final CastExpression CastExpression_193_Var = (CastExpression)Expr_192_list.get(0);
		Assert.assertNotNull(CastExpression_193_Var);
		final UnaryExpression UnaryExpression_194_Var = (UnaryExpression)CastExpression_193_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_194_Var);
		final PostfixExpression PostfixExpression_195_Var = (PostfixExpression)UnaryExpression_194_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_195_Var);
		final EList<? extends EObject> Expr_195_list = PostfixExpression_195_Var.getExpr();
		Assert.assertNotNull(Expr_195_list);
		Assert.assertEquals(1, Expr_195_list.size());
		final PrimaryExpression PrimaryExpression_196_Var = (PrimaryExpression)Expr_195_list.get(0);
		Assert.assertNotNull(PrimaryExpression_196_Var);
		final Constant Constant_197_Var = (Constant)PrimaryExpression_196_Var.getConst();
		Assert.assertNotNull(Constant_197_Var);
		Assert.assertEquals("\"(*employee).id=%d\\n\"", Constant_197_Var.getStr());
		final AssignmentExpression AssignmentExpression_198_Var = (AssignmentExpression)Expr_180_list.get(1);
		Assert.assertNotNull(AssignmentExpression_198_Var);
		final ConditionalExpression ConditionalExpression_199_Var = (ConditionalExpression)AssignmentExpression_198_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_199_Var);
		final LogicalOrExpression LogicalOrExpression_200_Var = (LogicalOrExpression)ConditionalExpression_199_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_200_Var);
		final EList<? extends EObject> Expr_200_list = LogicalOrExpression_200_Var.getExpr();
		Assert.assertNotNull(Expr_200_list);
		Assert.assertEquals(1, Expr_200_list.size());
		final LogicalAndExpression LogicalAndExpression_201_Var = (LogicalAndExpression)Expr_200_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_201_Var);
		final EList<? extends EObject> Expr_201_list = LogicalAndExpression_201_Var.getExpr();
		Assert.assertNotNull(Expr_201_list);
		Assert.assertEquals(1, Expr_201_list.size());
		final InclusiveOrExpression InclusiveOrExpression_202_Var = (InclusiveOrExpression)Expr_201_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_202_Var);
		final EList<? extends EObject> Expr_202_list = InclusiveOrExpression_202_Var.getExpr();
		Assert.assertNotNull(Expr_202_list);
		Assert.assertEquals(1, Expr_202_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_203_Var = (ExclusiveOrExpression)Expr_202_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_203_Var);
		final EList<? extends EObject> Expr_203_list = ExclusiveOrExpression_203_Var.getExpr();
		Assert.assertNotNull(Expr_203_list);
		Assert.assertEquals(1, Expr_203_list.size());
		final AndExpression AndExpression_204_Var = (AndExpression)Expr_203_list.get(0);
		Assert.assertNotNull(AndExpression_204_Var);
		final EList<? extends EObject> Expr_204_list = AndExpression_204_Var.getExpr();
		Assert.assertNotNull(Expr_204_list);
		Assert.assertEquals(1, Expr_204_list.size());
		final EqualityExpression EqualityExpression_205_Var = (EqualityExpression)Expr_204_list.get(0);
		Assert.assertNotNull(EqualityExpression_205_Var);
		final EList<? extends EObject> Expr_205_list = EqualityExpression_205_Var.getExpr();
		Assert.assertNotNull(Expr_205_list);
		Assert.assertEquals(1, Expr_205_list.size());
		final RelationalExpression RelationalExpression_206_Var = (RelationalExpression)Expr_205_list.get(0);
		Assert.assertNotNull(RelationalExpression_206_Var);
		final EList<? extends EObject> Expr_206_list = RelationalExpression_206_Var.getExpr();
		Assert.assertNotNull(Expr_206_list);
		Assert.assertEquals(1, Expr_206_list.size());
		final ShiftExpression ShiftExpression_207_Var = (ShiftExpression)Expr_206_list.get(0);
		Assert.assertNotNull(ShiftExpression_207_Var);
		final EList<? extends EObject> Expr_207_list = ShiftExpression_207_Var.getExpr();
		Assert.assertNotNull(Expr_207_list);
		Assert.assertEquals(1, Expr_207_list.size());
		final AdditiveExpression AdditiveExpression_208_Var = (AdditiveExpression)Expr_207_list.get(0);
		Assert.assertNotNull(AdditiveExpression_208_Var);
		final EList<? extends EObject> Expr_208_list = AdditiveExpression_208_Var.getExpr();
		Assert.assertNotNull(Expr_208_list);
		Assert.assertEquals(1, Expr_208_list.size());
		final MultiplicativeExpression MultiplicativeExpression_209_Var = (MultiplicativeExpression)Expr_208_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_209_Var);
		final EList<? extends EObject> Expr_209_list = MultiplicativeExpression_209_Var.getExpr();
		Assert.assertNotNull(Expr_209_list);
		Assert.assertEquals(1, Expr_209_list.size());
		final CastExpression CastExpression_210_Var = (CastExpression)Expr_209_list.get(0);
		Assert.assertNotNull(CastExpression_210_Var);
		final UnaryExpression UnaryExpression_211_Var = (UnaryExpression)CastExpression_210_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_211_Var);
		final PostfixExpression PostfixExpression_212_Var = (PostfixExpression)UnaryExpression_211_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_212_Var);
		final EList<? extends EObject> Expr_212_list = PostfixExpression_212_Var.getExpr();
		Assert.assertNotNull(Expr_212_list);
		Assert.assertEquals(1, Expr_212_list.size());
		final PrimaryExpression PrimaryExpression_213_Var = (PrimaryExpression)Expr_212_list.get(0);
		Assert.assertNotNull(PrimaryExpression_213_Var);
		final Expression Expression_214_Var = (Expression)PrimaryExpression_213_Var.getExpr();
		Assert.assertNotNull(Expression_214_Var);
		final EList<? extends EObject> ExprExpr_214_list = Expression_214_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_214_list);
		Assert.assertEquals(1, ExprExpr_214_list.size());
		final AssignmentExpression AssignmentExpression_215_Var = (AssignmentExpression)ExprExpr_214_list.get(0);
		Assert.assertNotNull(AssignmentExpression_215_Var);
		final ConditionalExpression ConditionalExpression_216_Var = (ConditionalExpression)AssignmentExpression_215_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_216_Var);
		final LogicalOrExpression LogicalOrExpression_217_Var = (LogicalOrExpression)ConditionalExpression_216_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_217_Var);
		final EList<? extends EObject> Expr_217_list = LogicalOrExpression_217_Var.getExpr();
		Assert.assertNotNull(Expr_217_list);
		Assert.assertEquals(1, Expr_217_list.size());
		final LogicalAndExpression LogicalAndExpression_218_Var = (LogicalAndExpression)Expr_217_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_218_Var);
		final EList<? extends EObject> Expr_218_list = LogicalAndExpression_218_Var.getExpr();
		Assert.assertNotNull(Expr_218_list);
		Assert.assertEquals(1, Expr_218_list.size());
		final InclusiveOrExpression InclusiveOrExpression_219_Var = (InclusiveOrExpression)Expr_218_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_219_Var);
		final EList<? extends EObject> Expr_219_list = InclusiveOrExpression_219_Var.getExpr();
		Assert.assertNotNull(Expr_219_list);
		Assert.assertEquals(1, Expr_219_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_220_Var = (ExclusiveOrExpression)Expr_219_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_220_Var);
		final EList<? extends EObject> Expr_220_list = ExclusiveOrExpression_220_Var.getExpr();
		Assert.assertNotNull(Expr_220_list);
		Assert.assertEquals(1, Expr_220_list.size());
		final AndExpression AndExpression_221_Var = (AndExpression)Expr_220_list.get(0);
		Assert.assertNotNull(AndExpression_221_Var);
		final EList<? extends EObject> Expr_221_list = AndExpression_221_Var.getExpr();
		Assert.assertNotNull(Expr_221_list);
		Assert.assertEquals(1, Expr_221_list.size());
		final EqualityExpression EqualityExpression_222_Var = (EqualityExpression)Expr_221_list.get(0);
		Assert.assertNotNull(EqualityExpression_222_Var);
		final EList<? extends EObject> Expr_222_list = EqualityExpression_222_Var.getExpr();
		Assert.assertNotNull(Expr_222_list);
		Assert.assertEquals(1, Expr_222_list.size());
		final RelationalExpression RelationalExpression_223_Var = (RelationalExpression)Expr_222_list.get(0);
		Assert.assertNotNull(RelationalExpression_223_Var);
		final EList<? extends EObject> Expr_223_list = RelationalExpression_223_Var.getExpr();
		Assert.assertNotNull(Expr_223_list);
		Assert.assertEquals(1, Expr_223_list.size());
		final ShiftExpression ShiftExpression_224_Var = (ShiftExpression)Expr_223_list.get(0);
		Assert.assertNotNull(ShiftExpression_224_Var);
		final EList<? extends EObject> Expr_224_list = ShiftExpression_224_Var.getExpr();
		Assert.assertNotNull(Expr_224_list);
		Assert.assertEquals(1, Expr_224_list.size());
		final AdditiveExpression AdditiveExpression_225_Var = (AdditiveExpression)Expr_224_list.get(0);
		Assert.assertNotNull(AdditiveExpression_225_Var);
		final EList<? extends EObject> Expr_225_list = AdditiveExpression_225_Var.getExpr();
		Assert.assertNotNull(Expr_225_list);
		Assert.assertEquals(1, Expr_225_list.size());
		final MultiplicativeExpression MultiplicativeExpression_226_Var = (MultiplicativeExpression)Expr_225_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_226_Var);
		final EList<? extends EObject> Expr_226_list = MultiplicativeExpression_226_Var.getExpr();
		Assert.assertNotNull(Expr_226_list);
		Assert.assertEquals(1, Expr_226_list.size());
		final CastExpression CastExpression_227_Var = (CastExpression)Expr_226_list.get(0);
		Assert.assertNotNull(CastExpression_227_Var);
		final UnaryExpression UnaryExpression_228_Var = (UnaryExpression)CastExpression_227_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_228_Var);
		final UnaryOperator UnaryOperator_229_Var = (UnaryOperator)UnaryExpression_228_Var.getOp();
		Assert.assertNotNull(UnaryOperator_229_Var);
		Assert.assertEquals("*", UnaryOperator_229_Var.getOp());
		final CastExpression CastExpression_230_Var = (CastExpression)UnaryExpression_228_Var.getExpr();
		Assert.assertNotNull(CastExpression_230_Var);
		final UnaryExpression UnaryExpression_231_Var = (UnaryExpression)CastExpression_230_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_231_Var);
		final PostfixExpression PostfixExpression_232_Var = (PostfixExpression)UnaryExpression_231_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_232_Var);
		final EList<? extends EObject> Expr_232_list = PostfixExpression_232_Var.getExpr();
		Assert.assertNotNull(Expr_232_list);
		Assert.assertEquals(1, Expr_232_list.size());
		final PrimaryExpression PrimaryExpression_233_Var = (PrimaryExpression)Expr_232_list.get(0);
		Assert.assertNotNull(PrimaryExpression_233_Var);
		Assert.assertEquals("emp", PrimaryExpression_233_Var.getId());
		Assert.assertEquals("[.]", PostfixExpression_212_Var.getDot().toString());
		Assert.assertEquals("[id]", PostfixExpression_212_Var.getId().toString());
		Assert.assertEquals(";", ExpressionStatement_162_Var.getSemi());
		final ExternalDeclaration ExternalDeclaration_234_Var = (ExternalDeclaration)External_1_list.get(4);
		Assert.assertNotNull(ExternalDeclaration_234_Var);
		final FunctionDefHead FunctionDefHead_235_Var = (FunctionDefHead)ExternalDeclaration_234_Var.getFunctiondefHead();
		Assert.assertNotNull(FunctionDefHead_235_Var);
		final DeclarationSpecifiers DeclarationSpecifiers_236_Var = (DeclarationSpecifiers)FunctionDefHead_235_Var.getFunDeclSpecifiers();
		Assert.assertNotNull(DeclarationSpecifiers_236_Var);
		final EList<? extends EObject> DeclarationSpecifier_236_list = DeclarationSpecifiers_236_Var.getDeclarationSpecifier();
		Assert.assertNotNull(DeclarationSpecifier_236_list);
		Assert.assertEquals(1, DeclarationSpecifier_236_list.size());
		final TypeSpecifier TypeSpecifier_237_Var = (TypeSpecifier)DeclarationSpecifier_236_list.get(0);
		Assert.assertNotNull(TypeSpecifier_237_Var);
		Assert.assertEquals("int", TypeSpecifier_237_Var.getName());
		final Declarator Declarator_238_Var = (Declarator)FunctionDefHead_235_Var.getFunDeclarator();
		Assert.assertNotNull(Declarator_238_Var);
		final DirectDeclarator DirectDeclarator_239_Var = (DirectDeclarator)Declarator_238_Var.getDeclarator();
		Assert.assertNotNull(DirectDeclarator_239_Var);
		Assert.assertEquals("main", DirectDeclarator_239_Var.getId());
		final EList<? extends EObject> DeclaratorSuffix_239_list = DirectDeclarator_239_Var.getDeclaratorSuffix();
		Assert.assertNotNull(DeclaratorSuffix_239_list);
		Assert.assertEquals(1, DeclaratorSuffix_239_list.size());
		final DeclaratorSuffix DeclaratorSuffix_240_Var = (DeclaratorSuffix)DeclaratorSuffix_239_list.get(0);
		Assert.assertNotNull(DeclaratorSuffix_240_Var);
		final DirectDeclaratorLastSuffix DirectDeclaratorLastSuffix_241_Var = (DirectDeclaratorLastSuffix)DeclaratorSuffix_240_Var.getLastSuffix();
		Assert.assertNotNull(DirectDeclaratorLastSuffix_241_Var);
		final EList<? extends EObject> ParameterTypeList_241_list = DirectDeclaratorLastSuffix_241_Var.getParameterTypeList();
		Assert.assertNotNull(ParameterTypeList_241_list);
		Assert.assertEquals(1, ParameterTypeList_241_list.size());
		final ParameterTypeList ParameterTypeList_242_Var = (ParameterTypeList)ParameterTypeList_241_list.get(0);
		Assert.assertNotNull(ParameterTypeList_242_Var);
		final ParameterList ParameterList_243_Var = (ParameterList)ParameterTypeList_242_Var.getList();
		Assert.assertNotNull(ParameterList_243_Var);
		final EList<? extends EObject> ParameterDeclaration_243_list = ParameterList_243_Var.getParameterDeclaration();
		Assert.assertNotNull(ParameterDeclaration_243_list);
		Assert.assertEquals(1, ParameterDeclaration_243_list.size());
		final ParameterDeclaration ParameterDeclaration_244_Var = (ParameterDeclaration)ParameterDeclaration_243_list.get(0);
		Assert.assertNotNull(ParameterDeclaration_244_Var);
		final DeclarationSpecifiers DeclarationSpecifiers_245_Var = (DeclarationSpecifiers)ParameterDeclaration_244_Var.getDeclSpecifiers();
		Assert.assertNotNull(DeclarationSpecifiers_245_Var);
		final EList<? extends EObject> DeclarationSpecifier_245_list = DeclarationSpecifiers_245_Var.getDeclarationSpecifier();
		Assert.assertNotNull(DeclarationSpecifier_245_list);
		Assert.assertEquals(1, DeclarationSpecifier_245_list.size());
		final TypeSpecifier TypeSpecifier_246_Var = (TypeSpecifier)DeclarationSpecifier_245_list.get(0);
		Assert.assertNotNull(TypeSpecifier_246_Var);
		Assert.assertEquals("void", TypeSpecifier_246_Var.getName());
		final FunctionDefinition FunctionDefinition_247_Var = (FunctionDefinition)ExternalDeclaration_234_Var.getFunctionDefinition();
		Assert.assertNotNull(FunctionDefinition_247_Var);
		final BodyStatement BodyStatement_248_Var = (BodyStatement)FunctionDefinition_247_Var.getBody();
		Assert.assertNotNull(BodyStatement_248_Var);
		final EList<? extends EObject> BlockList_248_list = BodyStatement_248_Var.getBlockList();
		Assert.assertNotNull(BlockList_248_list);
		Assert.assertEquals(1, BlockList_248_list.size());
		final BlockList BlockList_249_Var = (BlockList)BlockList_248_list.get(0);
		Assert.assertNotNull(BlockList_249_Var);
		final EList<? extends EObject> Statement_249_list = BlockList_249_Var.getStatement();
		Assert.assertNotNull(Statement_249_list);
		Assert.assertEquals(6, Statement_249_list.size());
		final Statement Statement_250_Var = (Statement)Statement_249_list.get(0);
		Assert.assertNotNull(Statement_250_Var);
		final SelectionStatement SelectionStatement_251_Var = (SelectionStatement)Statement_250_Var.getStmt();
		Assert.assertNotNull(SelectionStatement_251_Var);
		Assert.assertEquals("if", SelectionStatement_251_Var.getIf());
		final Expression Expression_252_Var = (Expression)SelectionStatement_251_Var.getExpr();
		Assert.assertNotNull(Expression_252_Var);
		final EList<? extends EObject> ExprExpr_252_list = Expression_252_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_252_list);
		Assert.assertEquals(1, ExprExpr_252_list.size());
		final AssignmentExpression AssignmentExpression_253_Var = (AssignmentExpression)ExprExpr_252_list.get(0);
		Assert.assertNotNull(AssignmentExpression_253_Var);
		final ConditionalExpression ConditionalExpression_254_Var = (ConditionalExpression)AssignmentExpression_253_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_254_Var);
		final LogicalOrExpression LogicalOrExpression_255_Var = (LogicalOrExpression)ConditionalExpression_254_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_255_Var);
		final EList<? extends EObject> Expr_255_list = LogicalOrExpression_255_Var.getExpr();
		Assert.assertNotNull(Expr_255_list);
		Assert.assertEquals(1, Expr_255_list.size());
		final LogicalAndExpression LogicalAndExpression_256_Var = (LogicalAndExpression)Expr_255_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_256_Var);
		final EList<? extends EObject> Expr_256_list = LogicalAndExpression_256_Var.getExpr();
		Assert.assertNotNull(Expr_256_list);
		Assert.assertEquals(1, Expr_256_list.size());
		final InclusiveOrExpression InclusiveOrExpression_257_Var = (InclusiveOrExpression)Expr_256_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_257_Var);
		final EList<? extends EObject> Expr_257_list = InclusiveOrExpression_257_Var.getExpr();
		Assert.assertNotNull(Expr_257_list);
		Assert.assertEquals(1, Expr_257_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_258_Var = (ExclusiveOrExpression)Expr_257_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_258_Var);
		final EList<? extends EObject> Expr_258_list = ExclusiveOrExpression_258_Var.getExpr();
		Assert.assertNotNull(Expr_258_list);
		Assert.assertEquals(1, Expr_258_list.size());
		final AndExpression AndExpression_259_Var = (AndExpression)Expr_258_list.get(0);
		Assert.assertNotNull(AndExpression_259_Var);
		final EList<? extends EObject> Expr_259_list = AndExpression_259_Var.getExpr();
		Assert.assertNotNull(Expr_259_list);
		Assert.assertEquals(1, Expr_259_list.size());
		final EqualityExpression EqualityExpression_260_Var = (EqualityExpression)Expr_259_list.get(0);
		Assert.assertNotNull(EqualityExpression_260_Var);
		Assert.assertEquals("[==]", EqualityExpression_260_Var.getOp().toString());
		final EList<? extends EObject> Expr_260_list = EqualityExpression_260_Var.getExpr();
		Assert.assertNotNull(Expr_260_list);
		Assert.assertEquals(2, Expr_260_list.size());
		final RelationalExpression RelationalExpression_261_Var = (RelationalExpression)Expr_260_list.get(0);
		Assert.assertNotNull(RelationalExpression_261_Var);
		final EList<? extends EObject> Expr_261_list = RelationalExpression_261_Var.getExpr();
		Assert.assertNotNull(Expr_261_list);
		Assert.assertEquals(1, Expr_261_list.size());
		final ShiftExpression ShiftExpression_262_Var = (ShiftExpression)Expr_261_list.get(0);
		Assert.assertNotNull(ShiftExpression_262_Var);
		final EList<? extends EObject> Expr_262_list = ShiftExpression_262_Var.getExpr();
		Assert.assertNotNull(Expr_262_list);
		Assert.assertEquals(1, Expr_262_list.size());
		final AdditiveExpression AdditiveExpression_263_Var = (AdditiveExpression)Expr_262_list.get(0);
		Assert.assertNotNull(AdditiveExpression_263_Var);
		final EList<? extends EObject> Expr_263_list = AdditiveExpression_263_Var.getExpr();
		Assert.assertNotNull(Expr_263_list);
		Assert.assertEquals(1, Expr_263_list.size());
		final MultiplicativeExpression MultiplicativeExpression_264_Var = (MultiplicativeExpression)Expr_263_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_264_Var);
		final EList<? extends EObject> Expr_264_list = MultiplicativeExpression_264_Var.getExpr();
		Assert.assertNotNull(Expr_264_list);
		Assert.assertEquals(1, Expr_264_list.size());
		final CastExpression CastExpression_265_Var = (CastExpression)Expr_264_list.get(0);
		Assert.assertNotNull(CastExpression_265_Var);
		final UnaryExpression UnaryExpression_266_Var = (UnaryExpression)CastExpression_265_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_266_Var);
		final PostfixExpression PostfixExpression_267_Var = (PostfixExpression)UnaryExpression_266_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_267_Var);
		final EList<? extends EObject> Expr_267_list = PostfixExpression_267_Var.getExpr();
		Assert.assertNotNull(Expr_267_list);
		Assert.assertEquals(1, Expr_267_list.size());
		final PrimaryExpression PrimaryExpression_268_Var = (PrimaryExpression)Expr_267_list.get(0);
		Assert.assertNotNull(PrimaryExpression_268_Var);
		Assert.assertEquals("newEmployee", PrimaryExpression_268_Var.getId());
		final RelationalExpression RelationalExpression_269_Var = (RelationalExpression)Expr_260_list.get(1);
		Assert.assertNotNull(RelationalExpression_269_Var);
		final EList<? extends EObject> Expr_269_list = RelationalExpression_269_Var.getExpr();
		Assert.assertNotNull(Expr_269_list);
		Assert.assertEquals(1, Expr_269_list.size());
		final ShiftExpression ShiftExpression_270_Var = (ShiftExpression)Expr_269_list.get(0);
		Assert.assertNotNull(ShiftExpression_270_Var);
		final EList<? extends EObject> Expr_270_list = ShiftExpression_270_Var.getExpr();
		Assert.assertNotNull(Expr_270_list);
		Assert.assertEquals(1, Expr_270_list.size());
		final AdditiveExpression AdditiveExpression_271_Var = (AdditiveExpression)Expr_270_list.get(0);
		Assert.assertNotNull(AdditiveExpression_271_Var);
		final EList<? extends EObject> Expr_271_list = AdditiveExpression_271_Var.getExpr();
		Assert.assertNotNull(Expr_271_list);
		Assert.assertEquals(1, Expr_271_list.size());
		final MultiplicativeExpression MultiplicativeExpression_272_Var = (MultiplicativeExpression)Expr_271_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_272_Var);
		final EList<? extends EObject> Expr_272_list = MultiplicativeExpression_272_Var.getExpr();
		Assert.assertNotNull(Expr_272_list);
		Assert.assertEquals(1, Expr_272_list.size());
		final CastExpression CastExpression_273_Var = (CastExpression)Expr_272_list.get(0);
		Assert.assertNotNull(CastExpression_273_Var);
		final UnaryExpression UnaryExpression_274_Var = (UnaryExpression)CastExpression_273_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_274_Var);
		final PostfixExpression PostfixExpression_275_Var = (PostfixExpression)UnaryExpression_274_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_275_Var);
		final EList<? extends EObject> Expr_275_list = PostfixExpression_275_Var.getExpr();
		Assert.assertNotNull(Expr_275_list);
		Assert.assertEquals(1, Expr_275_list.size());
		final PrimaryExpression PrimaryExpression_276_Var = (PrimaryExpression)Expr_275_list.get(0);
		Assert.assertNotNull(PrimaryExpression_276_Var);
		Assert.assertEquals("NULL", PrimaryExpression_276_Var.getId());
		final Statement Statement_277_Var = (Statement)SelectionStatement_251_Var.getIfStatement();
		Assert.assertNotNull(Statement_277_Var);
		final CompoundStatement CompoundStatement_278_Var = (CompoundStatement)Statement_277_Var.getStmt();
		Assert.assertNotNull(CompoundStatement_278_Var);
		final BodyStatement BodyStatement_279_Var = (BodyStatement)CompoundStatement_278_Var.getBody();
		Assert.assertNotNull(BodyStatement_279_Var);
		final EList<? extends EObject> BlockList_279_list = BodyStatement_279_Var.getBlockList();
		Assert.assertNotNull(BlockList_279_list);
		Assert.assertEquals(1, BlockList_279_list.size());
		final BlockList BlockList_280_Var = (BlockList)BlockList_279_list.get(0);
		Assert.assertNotNull(BlockList_280_Var);
		final EList<? extends EObject> Statement_280_list = BlockList_280_Var.getStatement();
		Assert.assertNotNull(Statement_280_list);
		Assert.assertEquals(2, Statement_280_list.size());
		final Statement Statement_281_Var = (Statement)Statement_280_list.get(0);
		Assert.assertNotNull(Statement_281_Var);
		final ExpressionStatement ExpressionStatement_282_Var = (ExpressionStatement)Statement_281_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_282_Var);
		final Expression Expression_283_Var = (Expression)ExpressionStatement_282_Var.getExpression();
		Assert.assertNotNull(Expression_283_Var);
		final EList<? extends EObject> ExprExpr_283_list = Expression_283_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_283_list);
		Assert.assertEquals(1, ExprExpr_283_list.size());
		final AssignmentExpression AssignmentExpression_284_Var = (AssignmentExpression)ExprExpr_283_list.get(0);
		Assert.assertNotNull(AssignmentExpression_284_Var);
		final ConditionalExpression ConditionalExpression_285_Var = (ConditionalExpression)AssignmentExpression_284_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_285_Var);
		final LogicalOrExpression LogicalOrExpression_286_Var = (LogicalOrExpression)ConditionalExpression_285_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_286_Var);
		final EList<? extends EObject> Expr_286_list = LogicalOrExpression_286_Var.getExpr();
		Assert.assertNotNull(Expr_286_list);
		Assert.assertEquals(1, Expr_286_list.size());
		final LogicalAndExpression LogicalAndExpression_287_Var = (LogicalAndExpression)Expr_286_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_287_Var);
		final EList<? extends EObject> Expr_287_list = LogicalAndExpression_287_Var.getExpr();
		Assert.assertNotNull(Expr_287_list);
		Assert.assertEquals(1, Expr_287_list.size());
		final InclusiveOrExpression InclusiveOrExpression_288_Var = (InclusiveOrExpression)Expr_287_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_288_Var);
		final EList<? extends EObject> Expr_288_list = InclusiveOrExpression_288_Var.getExpr();
		Assert.assertNotNull(Expr_288_list);
		Assert.assertEquals(1, Expr_288_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_289_Var = (ExclusiveOrExpression)Expr_288_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_289_Var);
		final EList<? extends EObject> Expr_289_list = ExclusiveOrExpression_289_Var.getExpr();
		Assert.assertNotNull(Expr_289_list);
		Assert.assertEquals(1, Expr_289_list.size());
		final AndExpression AndExpression_290_Var = (AndExpression)Expr_289_list.get(0);
		Assert.assertNotNull(AndExpression_290_Var);
		final EList<? extends EObject> Expr_290_list = AndExpression_290_Var.getExpr();
		Assert.assertNotNull(Expr_290_list);
		Assert.assertEquals(1, Expr_290_list.size());
		final EqualityExpression EqualityExpression_291_Var = (EqualityExpression)Expr_290_list.get(0);
		Assert.assertNotNull(EqualityExpression_291_Var);
		final EList<? extends EObject> Expr_291_list = EqualityExpression_291_Var.getExpr();
		Assert.assertNotNull(Expr_291_list);
		Assert.assertEquals(1, Expr_291_list.size());
		final RelationalExpression RelationalExpression_292_Var = (RelationalExpression)Expr_291_list.get(0);
		Assert.assertNotNull(RelationalExpression_292_Var);
		final EList<? extends EObject> Expr_292_list = RelationalExpression_292_Var.getExpr();
		Assert.assertNotNull(Expr_292_list);
		Assert.assertEquals(1, Expr_292_list.size());
		final ShiftExpression ShiftExpression_293_Var = (ShiftExpression)Expr_292_list.get(0);
		Assert.assertNotNull(ShiftExpression_293_Var);
		final EList<? extends EObject> Expr_293_list = ShiftExpression_293_Var.getExpr();
		Assert.assertNotNull(Expr_293_list);
		Assert.assertEquals(1, Expr_293_list.size());
		final AdditiveExpression AdditiveExpression_294_Var = (AdditiveExpression)Expr_293_list.get(0);
		Assert.assertNotNull(AdditiveExpression_294_Var);
		final EList<? extends EObject> Expr_294_list = AdditiveExpression_294_Var.getExpr();
		Assert.assertNotNull(Expr_294_list);
		Assert.assertEquals(1, Expr_294_list.size());
		final MultiplicativeExpression MultiplicativeExpression_295_Var = (MultiplicativeExpression)Expr_294_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_295_Var);
		final EList<? extends EObject> Expr_295_list = MultiplicativeExpression_295_Var.getExpr();
		Assert.assertNotNull(Expr_295_list);
		Assert.assertEquals(1, Expr_295_list.size());
		final CastExpression CastExpression_296_Var = (CastExpression)Expr_295_list.get(0);
		Assert.assertNotNull(CastExpression_296_Var);
		final UnaryExpression UnaryExpression_297_Var = (UnaryExpression)CastExpression_296_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_297_Var);
		final PostfixExpression PostfixExpression_298_Var = (PostfixExpression)UnaryExpression_297_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_298_Var);
		final EList<? extends EObject> Expr_298_list = PostfixExpression_298_Var.getExpr();
		Assert.assertNotNull(Expr_298_list);
		Assert.assertEquals(1, Expr_298_list.size());
		final PrimaryExpression PrimaryExpression_299_Var = (PrimaryExpression)Expr_298_list.get(0);
		Assert.assertNotNull(PrimaryExpression_299_Var);
		Assert.assertEquals("printf", PrimaryExpression_299_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_299_list = PostfixExpression_298_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_299_list);
		Assert.assertEquals(1, ArgumentExpressionList_299_list.size());
		final ArgumentExpressionList ArgumentExpressionList_300_Var = (ArgumentExpressionList)ArgumentExpressionList_299_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_300_Var);
		final EList<? extends EObject> Expr_300_list = ArgumentExpressionList_300_Var.getExpr();
		Assert.assertNotNull(Expr_300_list);
		Assert.assertEquals(1, Expr_300_list.size());
		final AssignmentExpression AssignmentExpression_301_Var = (AssignmentExpression)Expr_300_list.get(0);
		Assert.assertNotNull(AssignmentExpression_301_Var);
		final ConditionalExpression ConditionalExpression_302_Var = (ConditionalExpression)AssignmentExpression_301_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_302_Var);
		final LogicalOrExpression LogicalOrExpression_303_Var = (LogicalOrExpression)ConditionalExpression_302_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_303_Var);
		final EList<? extends EObject> Expr_303_list = LogicalOrExpression_303_Var.getExpr();
		Assert.assertNotNull(Expr_303_list);
		Assert.assertEquals(1, Expr_303_list.size());
		final LogicalAndExpression LogicalAndExpression_304_Var = (LogicalAndExpression)Expr_303_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_304_Var);
		final EList<? extends EObject> Expr_304_list = LogicalAndExpression_304_Var.getExpr();
		Assert.assertNotNull(Expr_304_list);
		Assert.assertEquals(1, Expr_304_list.size());
		final InclusiveOrExpression InclusiveOrExpression_305_Var = (InclusiveOrExpression)Expr_304_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_305_Var);
		final EList<? extends EObject> Expr_305_list = InclusiveOrExpression_305_Var.getExpr();
		Assert.assertNotNull(Expr_305_list);
		Assert.assertEquals(1, Expr_305_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_306_Var = (ExclusiveOrExpression)Expr_305_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_306_Var);
		final EList<? extends EObject> Expr_306_list = ExclusiveOrExpression_306_Var.getExpr();
		Assert.assertNotNull(Expr_306_list);
		Assert.assertEquals(1, Expr_306_list.size());
		final AndExpression AndExpression_307_Var = (AndExpression)Expr_306_list.get(0);
		Assert.assertNotNull(AndExpression_307_Var);
		final EList<? extends EObject> Expr_307_list = AndExpression_307_Var.getExpr();
		Assert.assertNotNull(Expr_307_list);
		Assert.assertEquals(1, Expr_307_list.size());
		final EqualityExpression EqualityExpression_308_Var = (EqualityExpression)Expr_307_list.get(0);
		Assert.assertNotNull(EqualityExpression_308_Var);
		final EList<? extends EObject> Expr_308_list = EqualityExpression_308_Var.getExpr();
		Assert.assertNotNull(Expr_308_list);
		Assert.assertEquals(1, Expr_308_list.size());
		final RelationalExpression RelationalExpression_309_Var = (RelationalExpression)Expr_308_list.get(0);
		Assert.assertNotNull(RelationalExpression_309_Var);
		final EList<? extends EObject> Expr_309_list = RelationalExpression_309_Var.getExpr();
		Assert.assertNotNull(Expr_309_list);
		Assert.assertEquals(1, Expr_309_list.size());
		final ShiftExpression ShiftExpression_310_Var = (ShiftExpression)Expr_309_list.get(0);
		Assert.assertNotNull(ShiftExpression_310_Var);
		final EList<? extends EObject> Expr_310_list = ShiftExpression_310_Var.getExpr();
		Assert.assertNotNull(Expr_310_list);
		Assert.assertEquals(1, Expr_310_list.size());
		final AdditiveExpression AdditiveExpression_311_Var = (AdditiveExpression)Expr_310_list.get(0);
		Assert.assertNotNull(AdditiveExpression_311_Var);
		final EList<? extends EObject> Expr_311_list = AdditiveExpression_311_Var.getExpr();
		Assert.assertNotNull(Expr_311_list);
		Assert.assertEquals(1, Expr_311_list.size());
		final MultiplicativeExpression MultiplicativeExpression_312_Var = (MultiplicativeExpression)Expr_311_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_312_Var);
		final EList<? extends EObject> Expr_312_list = MultiplicativeExpression_312_Var.getExpr();
		Assert.assertNotNull(Expr_312_list);
		Assert.assertEquals(1, Expr_312_list.size());
		final CastExpression CastExpression_313_Var = (CastExpression)Expr_312_list.get(0);
		Assert.assertNotNull(CastExpression_313_Var);
		final UnaryExpression UnaryExpression_314_Var = (UnaryExpression)CastExpression_313_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_314_Var);
		final PostfixExpression PostfixExpression_315_Var = (PostfixExpression)UnaryExpression_314_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_315_Var);
		final EList<? extends EObject> Expr_315_list = PostfixExpression_315_Var.getExpr();
		Assert.assertNotNull(Expr_315_list);
		Assert.assertEquals(1, Expr_315_list.size());
		final PrimaryExpression PrimaryExpression_316_Var = (PrimaryExpression)Expr_315_list.get(0);
		Assert.assertNotNull(PrimaryExpression_316_Var);
		final Constant Constant_317_Var = (Constant)PrimaryExpression_316_Var.getConst();
		Assert.assertNotNull(Constant_317_Var);
		Assert.assertEquals("\"Could not reserve space for new employee!\\n\"", Constant_317_Var.getStr());
		Assert.assertEquals(";", ExpressionStatement_282_Var.getSemi());
		final Statement Statement_318_Var = (Statement)Statement_280_list.get(1);
		Assert.assertNotNull(Statement_318_Var);
		final JumpStatement JumpStatement_319_Var = (JumpStatement)Statement_318_Var.getStmt();
		Assert.assertNotNull(JumpStatement_319_Var);
		final Expression Expression_320_Var = (Expression)JumpStatement_319_Var.getExpr();
		Assert.assertNotNull(Expression_320_Var);
		final EList<? extends EObject> ExprExpr_320_list = Expression_320_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_320_list);
		Assert.assertEquals(1, ExprExpr_320_list.size());
		final AssignmentExpression AssignmentExpression_321_Var = (AssignmentExpression)ExprExpr_320_list.get(0);
		Assert.assertNotNull(AssignmentExpression_321_Var);
		final ConditionalExpression ConditionalExpression_322_Var = (ConditionalExpression)AssignmentExpression_321_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_322_Var);
		final LogicalOrExpression LogicalOrExpression_323_Var = (LogicalOrExpression)ConditionalExpression_322_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_323_Var);
		final EList<? extends EObject> Expr_323_list = LogicalOrExpression_323_Var.getExpr();
		Assert.assertNotNull(Expr_323_list);
		Assert.assertEquals(1, Expr_323_list.size());
		final LogicalAndExpression LogicalAndExpression_324_Var = (LogicalAndExpression)Expr_323_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_324_Var);
		final EList<? extends EObject> Expr_324_list = LogicalAndExpression_324_Var.getExpr();
		Assert.assertNotNull(Expr_324_list);
		Assert.assertEquals(1, Expr_324_list.size());
		final InclusiveOrExpression InclusiveOrExpression_325_Var = (InclusiveOrExpression)Expr_324_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_325_Var);
		final EList<? extends EObject> Expr_325_list = InclusiveOrExpression_325_Var.getExpr();
		Assert.assertNotNull(Expr_325_list);
		Assert.assertEquals(1, Expr_325_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_326_Var = (ExclusiveOrExpression)Expr_325_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_326_Var);
		final EList<? extends EObject> Expr_326_list = ExclusiveOrExpression_326_Var.getExpr();
		Assert.assertNotNull(Expr_326_list);
		Assert.assertEquals(1, Expr_326_list.size());
		final AndExpression AndExpression_327_Var = (AndExpression)Expr_326_list.get(0);
		Assert.assertNotNull(AndExpression_327_Var);
		final EList<? extends EObject> Expr_327_list = AndExpression_327_Var.getExpr();
		Assert.assertNotNull(Expr_327_list);
		Assert.assertEquals(1, Expr_327_list.size());
		final EqualityExpression EqualityExpression_328_Var = (EqualityExpression)Expr_327_list.get(0);
		Assert.assertNotNull(EqualityExpression_328_Var);
		final EList<? extends EObject> Expr_328_list = EqualityExpression_328_Var.getExpr();
		Assert.assertNotNull(Expr_328_list);
		Assert.assertEquals(1, Expr_328_list.size());
		final RelationalExpression RelationalExpression_329_Var = (RelationalExpression)Expr_328_list.get(0);
		Assert.assertNotNull(RelationalExpression_329_Var);
		final EList<? extends EObject> Expr_329_list = RelationalExpression_329_Var.getExpr();
		Assert.assertNotNull(Expr_329_list);
		Assert.assertEquals(1, Expr_329_list.size());
		final ShiftExpression ShiftExpression_330_Var = (ShiftExpression)Expr_329_list.get(0);
		Assert.assertNotNull(ShiftExpression_330_Var);
		final EList<? extends EObject> Expr_330_list = ShiftExpression_330_Var.getExpr();
		Assert.assertNotNull(Expr_330_list);
		Assert.assertEquals(1, Expr_330_list.size());
		final AdditiveExpression AdditiveExpression_331_Var = (AdditiveExpression)Expr_330_list.get(0);
		Assert.assertNotNull(AdditiveExpression_331_Var);
		final EList<? extends EObject> Expr_331_list = AdditiveExpression_331_Var.getExpr();
		Assert.assertNotNull(Expr_331_list);
		Assert.assertEquals(1, Expr_331_list.size());
		final MultiplicativeExpression MultiplicativeExpression_332_Var = (MultiplicativeExpression)Expr_331_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_332_Var);
		final EList<? extends EObject> Expr_332_list = MultiplicativeExpression_332_Var.getExpr();
		Assert.assertNotNull(Expr_332_list);
		Assert.assertEquals(1, Expr_332_list.size());
		final CastExpression CastExpression_333_Var = (CastExpression)Expr_332_list.get(0);
		Assert.assertNotNull(CastExpression_333_Var);
		final UnaryExpression UnaryExpression_334_Var = (UnaryExpression)CastExpression_333_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_334_Var);
		final UnaryOperator UnaryOperator_335_Var = (UnaryOperator)UnaryExpression_334_Var.getOp();
		Assert.assertNotNull(UnaryOperator_335_Var);
		Assert.assertEquals("-", UnaryOperator_335_Var.getOp());
		final CastExpression CastExpression_336_Var = (CastExpression)UnaryExpression_334_Var.getExpr();
		Assert.assertNotNull(CastExpression_336_Var);
		final UnaryExpression UnaryExpression_337_Var = (UnaryExpression)CastExpression_336_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_337_Var);
		final PostfixExpression PostfixExpression_338_Var = (PostfixExpression)UnaryExpression_337_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_338_Var);
		final EList<? extends EObject> Expr_338_list = PostfixExpression_338_Var.getExpr();
		Assert.assertNotNull(Expr_338_list);
		Assert.assertEquals(1, Expr_338_list.size());
		final PrimaryExpression PrimaryExpression_339_Var = (PrimaryExpression)Expr_338_list.get(0);
		Assert.assertNotNull(PrimaryExpression_339_Var);
		final Constant Constant_340_Var = (Constant)PrimaryExpression_339_Var.getConst();
		Assert.assertNotNull(Constant_340_Var);
		Assert.assertEquals("1", Constant_340_Var.getDec());
		Assert.assertEquals("return", JumpStatement_319_Var.getReturn());
		Assert.assertEquals(";", JumpStatement_319_Var.getSemi());
		final Statement Statement_341_Var = (Statement)Statement_249_list.get(1);
		Assert.assertNotNull(Statement_341_Var);
		final ExpressionStatement ExpressionStatement_342_Var = (ExpressionStatement)Statement_341_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_342_Var);
		final Expression Expression_343_Var = (Expression)ExpressionStatement_342_Var.getExpression();
		Assert.assertNotNull(Expression_343_Var);
		final EList<? extends EObject> ExprExpr_343_list = Expression_343_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_343_list);
		Assert.assertEquals(1, ExprExpr_343_list.size());
		final AssignmentExpression AssignmentExpression_344_Var = (AssignmentExpression)ExprExpr_343_list.get(0);
		Assert.assertNotNull(AssignmentExpression_344_Var);
		final ConditionalExpression ConditionalExpression_345_Var = (ConditionalExpression)AssignmentExpression_344_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_345_Var);
		final LogicalOrExpression LogicalOrExpression_346_Var = (LogicalOrExpression)ConditionalExpression_345_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_346_Var);
		final EList<? extends EObject> Expr_346_list = LogicalOrExpression_346_Var.getExpr();
		Assert.assertNotNull(Expr_346_list);
		Assert.assertEquals(1, Expr_346_list.size());
		final LogicalAndExpression LogicalAndExpression_347_Var = (LogicalAndExpression)Expr_346_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_347_Var);
		final EList<? extends EObject> Expr_347_list = LogicalAndExpression_347_Var.getExpr();
		Assert.assertNotNull(Expr_347_list);
		Assert.assertEquals(1, Expr_347_list.size());
		final InclusiveOrExpression InclusiveOrExpression_348_Var = (InclusiveOrExpression)Expr_347_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_348_Var);
		final EList<? extends EObject> Expr_348_list = InclusiveOrExpression_348_Var.getExpr();
		Assert.assertNotNull(Expr_348_list);
		Assert.assertEquals(1, Expr_348_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_349_Var = (ExclusiveOrExpression)Expr_348_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_349_Var);
		final EList<? extends EObject> Expr_349_list = ExclusiveOrExpression_349_Var.getExpr();
		Assert.assertNotNull(Expr_349_list);
		Assert.assertEquals(1, Expr_349_list.size());
		final AndExpression AndExpression_350_Var = (AndExpression)Expr_349_list.get(0);
		Assert.assertNotNull(AndExpression_350_Var);
		final EList<? extends EObject> Expr_350_list = AndExpression_350_Var.getExpr();
		Assert.assertNotNull(Expr_350_list);
		Assert.assertEquals(1, Expr_350_list.size());
		final EqualityExpression EqualityExpression_351_Var = (EqualityExpression)Expr_350_list.get(0);
		Assert.assertNotNull(EqualityExpression_351_Var);
		final EList<? extends EObject> Expr_351_list = EqualityExpression_351_Var.getExpr();
		Assert.assertNotNull(Expr_351_list);
		Assert.assertEquals(1, Expr_351_list.size());
		final RelationalExpression RelationalExpression_352_Var = (RelationalExpression)Expr_351_list.get(0);
		Assert.assertNotNull(RelationalExpression_352_Var);
		final EList<? extends EObject> Expr_352_list = RelationalExpression_352_Var.getExpr();
		Assert.assertNotNull(Expr_352_list);
		Assert.assertEquals(1, Expr_352_list.size());
		final ShiftExpression ShiftExpression_353_Var = (ShiftExpression)Expr_352_list.get(0);
		Assert.assertNotNull(ShiftExpression_353_Var);
		final EList<? extends EObject> Expr_353_list = ShiftExpression_353_Var.getExpr();
		Assert.assertNotNull(Expr_353_list);
		Assert.assertEquals(1, Expr_353_list.size());
		final AdditiveExpression AdditiveExpression_354_Var = (AdditiveExpression)Expr_353_list.get(0);
		Assert.assertNotNull(AdditiveExpression_354_Var);
		final EList<? extends EObject> Expr_354_list = AdditiveExpression_354_Var.getExpr();
		Assert.assertNotNull(Expr_354_list);
		Assert.assertEquals(1, Expr_354_list.size());
		final MultiplicativeExpression MultiplicativeExpression_355_Var = (MultiplicativeExpression)Expr_354_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_355_Var);
		final EList<? extends EObject> Expr_355_list = MultiplicativeExpression_355_Var.getExpr();
		Assert.assertNotNull(Expr_355_list);
		Assert.assertEquals(1, Expr_355_list.size());
		final CastExpression CastExpression_356_Var = (CastExpression)Expr_355_list.get(0);
		Assert.assertNotNull(CastExpression_356_Var);
		final UnaryExpression UnaryExpression_357_Var = (UnaryExpression)CastExpression_356_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_357_Var);
		final PostfixExpression PostfixExpression_358_Var = (PostfixExpression)UnaryExpression_357_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_358_Var);
		final EList<? extends EObject> Expr_358_list = PostfixExpression_358_Var.getExpr();
		Assert.assertNotNull(Expr_358_list);
		Assert.assertEquals(1, Expr_358_list.size());
		final PrimaryExpression PrimaryExpression_359_Var = (PrimaryExpression)Expr_358_list.get(0);
		Assert.assertNotNull(PrimaryExpression_359_Var);
		Assert.assertEquals("print", PrimaryExpression_359_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_359_list = PostfixExpression_358_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_359_list);
		Assert.assertEquals(1, ArgumentExpressionList_359_list.size());
		final ArgumentExpressionList ArgumentExpressionList_360_Var = (ArgumentExpressionList)ArgumentExpressionList_359_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_360_Var);
		final EList<? extends EObject> Expr_360_list = ArgumentExpressionList_360_Var.getExpr();
		Assert.assertNotNull(Expr_360_list);
		Assert.assertEquals(1, Expr_360_list.size());
		final AssignmentExpression AssignmentExpression_361_Var = (AssignmentExpression)Expr_360_list.get(0);
		Assert.assertNotNull(AssignmentExpression_361_Var);
		final ConditionalExpression ConditionalExpression_362_Var = (ConditionalExpression)AssignmentExpression_361_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_362_Var);
		final LogicalOrExpression LogicalOrExpression_363_Var = (LogicalOrExpression)ConditionalExpression_362_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_363_Var);
		final EList<? extends EObject> Expr_363_list = LogicalOrExpression_363_Var.getExpr();
		Assert.assertNotNull(Expr_363_list);
		Assert.assertEquals(1, Expr_363_list.size());
		final LogicalAndExpression LogicalAndExpression_364_Var = (LogicalAndExpression)Expr_363_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_364_Var);
		final EList<? extends EObject> Expr_364_list = LogicalAndExpression_364_Var.getExpr();
		Assert.assertNotNull(Expr_364_list);
		Assert.assertEquals(1, Expr_364_list.size());
		final InclusiveOrExpression InclusiveOrExpression_365_Var = (InclusiveOrExpression)Expr_364_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_365_Var);
		final EList<? extends EObject> Expr_365_list = InclusiveOrExpression_365_Var.getExpr();
		Assert.assertNotNull(Expr_365_list);
		Assert.assertEquals(1, Expr_365_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_366_Var = (ExclusiveOrExpression)Expr_365_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_366_Var);
		final EList<? extends EObject> Expr_366_list = ExclusiveOrExpression_366_Var.getExpr();
		Assert.assertNotNull(Expr_366_list);
		Assert.assertEquals(1, Expr_366_list.size());
		final AndExpression AndExpression_367_Var = (AndExpression)Expr_366_list.get(0);
		Assert.assertNotNull(AndExpression_367_Var);
		final EList<? extends EObject> Expr_367_list = AndExpression_367_Var.getExpr();
		Assert.assertNotNull(Expr_367_list);
		Assert.assertEquals(1, Expr_367_list.size());
		final EqualityExpression EqualityExpression_368_Var = (EqualityExpression)Expr_367_list.get(0);
		Assert.assertNotNull(EqualityExpression_368_Var);
		final EList<? extends EObject> Expr_368_list = EqualityExpression_368_Var.getExpr();
		Assert.assertNotNull(Expr_368_list);
		Assert.assertEquals(1, Expr_368_list.size());
		final RelationalExpression RelationalExpression_369_Var = (RelationalExpression)Expr_368_list.get(0);
		Assert.assertNotNull(RelationalExpression_369_Var);
		final EList<? extends EObject> Expr_369_list = RelationalExpression_369_Var.getExpr();
		Assert.assertNotNull(Expr_369_list);
		Assert.assertEquals(1, Expr_369_list.size());
		final ShiftExpression ShiftExpression_370_Var = (ShiftExpression)Expr_369_list.get(0);
		Assert.assertNotNull(ShiftExpression_370_Var);
		final EList<? extends EObject> Expr_370_list = ShiftExpression_370_Var.getExpr();
		Assert.assertNotNull(Expr_370_list);
		Assert.assertEquals(1, Expr_370_list.size());
		final AdditiveExpression AdditiveExpression_371_Var = (AdditiveExpression)Expr_370_list.get(0);
		Assert.assertNotNull(AdditiveExpression_371_Var);
		final EList<? extends EObject> Expr_371_list = AdditiveExpression_371_Var.getExpr();
		Assert.assertNotNull(Expr_371_list);
		Assert.assertEquals(1, Expr_371_list.size());
		final MultiplicativeExpression MultiplicativeExpression_372_Var = (MultiplicativeExpression)Expr_371_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_372_Var);
		final EList<? extends EObject> Expr_372_list = MultiplicativeExpression_372_Var.getExpr();
		Assert.assertNotNull(Expr_372_list);
		Assert.assertEquals(1, Expr_372_list.size());
		final CastExpression CastExpression_373_Var = (CastExpression)Expr_372_list.get(0);
		Assert.assertNotNull(CastExpression_373_Var);
		final UnaryExpression UnaryExpression_374_Var = (UnaryExpression)CastExpression_373_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_374_Var);
		final UnaryOperator UnaryOperator_375_Var = (UnaryOperator)UnaryExpression_374_Var.getOp();
		Assert.assertNotNull(UnaryOperator_375_Var);
		Assert.assertEquals("&", UnaryOperator_375_Var.getOp());
		final CastExpression CastExpression_376_Var = (CastExpression)UnaryExpression_374_Var.getExpr();
		Assert.assertNotNull(CastExpression_376_Var);
		final UnaryExpression UnaryExpression_377_Var = (UnaryExpression)CastExpression_376_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_377_Var);
		final PostfixExpression PostfixExpression_378_Var = (PostfixExpression)UnaryExpression_377_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_378_Var);
		final EList<? extends EObject> Expr_378_list = PostfixExpression_378_Var.getExpr();
		Assert.assertNotNull(Expr_378_list);
		Assert.assertEquals(1, Expr_378_list.size());
		final PrimaryExpression PrimaryExpression_379_Var = (PrimaryExpression)Expr_378_list.get(0);
		Assert.assertNotNull(PrimaryExpression_379_Var);
		Assert.assertEquals("joe", PrimaryExpression_379_Var.getId());
		Assert.assertEquals(";", ExpressionStatement_342_Var.getSemi());
		final Statement Statement_380_Var = (Statement)Statement_249_list.get(2);
		Assert.assertNotNull(Statement_380_Var);
		final ExpressionStatement ExpressionStatement_381_Var = (ExpressionStatement)Statement_380_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_381_Var);
		final Expression Expression_382_Var = (Expression)ExpressionStatement_381_Var.getExpression();
		Assert.assertNotNull(Expression_382_Var);
		final EList<? extends EObject> ExprExpr_382_list = Expression_382_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_382_list);
		Assert.assertEquals(1, ExprExpr_382_list.size());
		final AssignmentExpression AssignmentExpression_383_Var = (AssignmentExpression)ExprExpr_382_list.get(0);
		Assert.assertNotNull(AssignmentExpression_383_Var);
		final ConditionalExpression ConditionalExpression_384_Var = (ConditionalExpression)AssignmentExpression_383_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_384_Var);
		final LogicalOrExpression LogicalOrExpression_385_Var = (LogicalOrExpression)ConditionalExpression_384_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_385_Var);
		final EList<? extends EObject> Expr_385_list = LogicalOrExpression_385_Var.getExpr();
		Assert.assertNotNull(Expr_385_list);
		Assert.assertEquals(1, Expr_385_list.size());
		final LogicalAndExpression LogicalAndExpression_386_Var = (LogicalAndExpression)Expr_385_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_386_Var);
		final EList<? extends EObject> Expr_386_list = LogicalAndExpression_386_Var.getExpr();
		Assert.assertNotNull(Expr_386_list);
		Assert.assertEquals(1, Expr_386_list.size());
		final InclusiveOrExpression InclusiveOrExpression_387_Var = (InclusiveOrExpression)Expr_386_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_387_Var);
		final EList<? extends EObject> Expr_387_list = InclusiveOrExpression_387_Var.getExpr();
		Assert.assertNotNull(Expr_387_list);
		Assert.assertEquals(1, Expr_387_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_388_Var = (ExclusiveOrExpression)Expr_387_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_388_Var);
		final EList<? extends EObject> Expr_388_list = ExclusiveOrExpression_388_Var.getExpr();
		Assert.assertNotNull(Expr_388_list);
		Assert.assertEquals(1, Expr_388_list.size());
		final AndExpression AndExpression_389_Var = (AndExpression)Expr_388_list.get(0);
		Assert.assertNotNull(AndExpression_389_Var);
		final EList<? extends EObject> Expr_389_list = AndExpression_389_Var.getExpr();
		Assert.assertNotNull(Expr_389_list);
		Assert.assertEquals(1, Expr_389_list.size());
		final EqualityExpression EqualityExpression_390_Var = (EqualityExpression)Expr_389_list.get(0);
		Assert.assertNotNull(EqualityExpression_390_Var);
		final EList<? extends EObject> Expr_390_list = EqualityExpression_390_Var.getExpr();
		Assert.assertNotNull(Expr_390_list);
		Assert.assertEquals(1, Expr_390_list.size());
		final RelationalExpression RelationalExpression_391_Var = (RelationalExpression)Expr_390_list.get(0);
		Assert.assertNotNull(RelationalExpression_391_Var);
		final EList<? extends EObject> Expr_391_list = RelationalExpression_391_Var.getExpr();
		Assert.assertNotNull(Expr_391_list);
		Assert.assertEquals(1, Expr_391_list.size());
		final ShiftExpression ShiftExpression_392_Var = (ShiftExpression)Expr_391_list.get(0);
		Assert.assertNotNull(ShiftExpression_392_Var);
		final EList<? extends EObject> Expr_392_list = ShiftExpression_392_Var.getExpr();
		Assert.assertNotNull(Expr_392_list);
		Assert.assertEquals(1, Expr_392_list.size());
		final AdditiveExpression AdditiveExpression_393_Var = (AdditiveExpression)Expr_392_list.get(0);
		Assert.assertNotNull(AdditiveExpression_393_Var);
		final EList<? extends EObject> Expr_393_list = AdditiveExpression_393_Var.getExpr();
		Assert.assertNotNull(Expr_393_list);
		Assert.assertEquals(1, Expr_393_list.size());
		final MultiplicativeExpression MultiplicativeExpression_394_Var = (MultiplicativeExpression)Expr_393_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_394_Var);
		final EList<? extends EObject> Expr_394_list = MultiplicativeExpression_394_Var.getExpr();
		Assert.assertNotNull(Expr_394_list);
		Assert.assertEquals(1, Expr_394_list.size());
		final CastExpression CastExpression_395_Var = (CastExpression)Expr_394_list.get(0);
		Assert.assertNotNull(CastExpression_395_Var);
		final UnaryExpression UnaryExpression_396_Var = (UnaryExpression)CastExpression_395_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_396_Var);
		final PostfixExpression PostfixExpression_397_Var = (PostfixExpression)UnaryExpression_396_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_397_Var);
		final EList<? extends EObject> Expr_397_list = PostfixExpression_397_Var.getExpr();
		Assert.assertNotNull(Expr_397_list);
		Assert.assertEquals(1, Expr_397_list.size());
		final PrimaryExpression PrimaryExpression_398_Var = (PrimaryExpression)Expr_397_list.get(0);
		Assert.assertNotNull(PrimaryExpression_398_Var);
		Assert.assertEquals("print", PrimaryExpression_398_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_398_list = PostfixExpression_397_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_398_list);
		Assert.assertEquals(1, ArgumentExpressionList_398_list.size());
		final ArgumentExpressionList ArgumentExpressionList_399_Var = (ArgumentExpressionList)ArgumentExpressionList_398_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_399_Var);
		final EList<? extends EObject> Expr_399_list = ArgumentExpressionList_399_Var.getExpr();
		Assert.assertNotNull(Expr_399_list);
		Assert.assertEquals(1, Expr_399_list.size());
		final AssignmentExpression AssignmentExpression_400_Var = (AssignmentExpression)Expr_399_list.get(0);
		Assert.assertNotNull(AssignmentExpression_400_Var);
		final ConditionalExpression ConditionalExpression_401_Var = (ConditionalExpression)AssignmentExpression_400_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_401_Var);
		final LogicalOrExpression LogicalOrExpression_402_Var = (LogicalOrExpression)ConditionalExpression_401_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_402_Var);
		final EList<? extends EObject> Expr_402_list = LogicalOrExpression_402_Var.getExpr();
		Assert.assertNotNull(Expr_402_list);
		Assert.assertEquals(1, Expr_402_list.size());
		final LogicalAndExpression LogicalAndExpression_403_Var = (LogicalAndExpression)Expr_402_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_403_Var);
		final EList<? extends EObject> Expr_403_list = LogicalAndExpression_403_Var.getExpr();
		Assert.assertNotNull(Expr_403_list);
		Assert.assertEquals(1, Expr_403_list.size());
		final InclusiveOrExpression InclusiveOrExpression_404_Var = (InclusiveOrExpression)Expr_403_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_404_Var);
		final EList<? extends EObject> Expr_404_list = InclusiveOrExpression_404_Var.getExpr();
		Assert.assertNotNull(Expr_404_list);
		Assert.assertEquals(1, Expr_404_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_405_Var = (ExclusiveOrExpression)Expr_404_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_405_Var);
		final EList<? extends EObject> Expr_405_list = ExclusiveOrExpression_405_Var.getExpr();
		Assert.assertNotNull(Expr_405_list);
		Assert.assertEquals(1, Expr_405_list.size());
		final AndExpression AndExpression_406_Var = (AndExpression)Expr_405_list.get(0);
		Assert.assertNotNull(AndExpression_406_Var);
		final EList<? extends EObject> Expr_406_list = AndExpression_406_Var.getExpr();
		Assert.assertNotNull(Expr_406_list);
		Assert.assertEquals(1, Expr_406_list.size());
		final EqualityExpression EqualityExpression_407_Var = (EqualityExpression)Expr_406_list.get(0);
		Assert.assertNotNull(EqualityExpression_407_Var);
		final EList<? extends EObject> Expr_407_list = EqualityExpression_407_Var.getExpr();
		Assert.assertNotNull(Expr_407_list);
		Assert.assertEquals(1, Expr_407_list.size());
		final RelationalExpression RelationalExpression_408_Var = (RelationalExpression)Expr_407_list.get(0);
		Assert.assertNotNull(RelationalExpression_408_Var);
		final EList<? extends EObject> Expr_408_list = RelationalExpression_408_Var.getExpr();
		Assert.assertNotNull(Expr_408_list);
		Assert.assertEquals(1, Expr_408_list.size());
		final ShiftExpression ShiftExpression_409_Var = (ShiftExpression)Expr_408_list.get(0);
		Assert.assertNotNull(ShiftExpression_409_Var);
		final EList<? extends EObject> Expr_409_list = ShiftExpression_409_Var.getExpr();
		Assert.assertNotNull(Expr_409_list);
		Assert.assertEquals(1, Expr_409_list.size());
		final AdditiveExpression AdditiveExpression_410_Var = (AdditiveExpression)Expr_409_list.get(0);
		Assert.assertNotNull(AdditiveExpression_410_Var);
		final EList<? extends EObject> Expr_410_list = AdditiveExpression_410_Var.getExpr();
		Assert.assertNotNull(Expr_410_list);
		Assert.assertEquals(1, Expr_410_list.size());
		final MultiplicativeExpression MultiplicativeExpression_411_Var = (MultiplicativeExpression)Expr_410_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_411_Var);
		final EList<? extends EObject> Expr_411_list = MultiplicativeExpression_411_Var.getExpr();
		Assert.assertNotNull(Expr_411_list);
		Assert.assertEquals(1, Expr_411_list.size());
		final CastExpression CastExpression_412_Var = (CastExpression)Expr_411_list.get(0);
		Assert.assertNotNull(CastExpression_412_Var);
		final UnaryExpression UnaryExpression_413_Var = (UnaryExpression)CastExpression_412_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_413_Var);
		final UnaryOperator UnaryOperator_414_Var = (UnaryOperator)UnaryExpression_413_Var.getOp();
		Assert.assertNotNull(UnaryOperator_414_Var);
		Assert.assertEquals("&", UnaryOperator_414_Var.getOp());
		final CastExpression CastExpression_415_Var = (CastExpression)UnaryExpression_413_Var.getExpr();
		Assert.assertNotNull(CastExpression_415_Var);
		final UnaryExpression UnaryExpression_416_Var = (UnaryExpression)CastExpression_415_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_416_Var);
		final PostfixExpression PostfixExpression_417_Var = (PostfixExpression)UnaryExpression_416_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_417_Var);
		final EList<? extends EObject> Expr_417_list = PostfixExpression_417_Var.getExpr();
		Assert.assertNotNull(Expr_417_list);
		Assert.assertEquals(1, Expr_417_list.size());
		final PrimaryExpression PrimaryExpression_418_Var = (PrimaryExpression)Expr_417_list.get(0);
		Assert.assertNotNull(PrimaryExpression_418_Var);
		Assert.assertEquals("phil", PrimaryExpression_418_Var.getId());
		Assert.assertEquals(";", ExpressionStatement_381_Var.getSemi());
		final Statement Statement_419_Var = (Statement)Statement_249_list.get(3);
		Assert.assertNotNull(Statement_419_Var);
		final ExpressionStatement ExpressionStatement_420_Var = (ExpressionStatement)Statement_419_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_420_Var);
		final Expression Expression_421_Var = (Expression)ExpressionStatement_420_Var.getExpression();
		Assert.assertNotNull(Expression_421_Var);
		final EList<? extends EObject> ExprExpr_421_list = Expression_421_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_421_list);
		Assert.assertEquals(1, ExprExpr_421_list.size());
		final AssignmentExpression AssignmentExpression_422_Var = (AssignmentExpression)ExprExpr_421_list.get(0);
		Assert.assertNotNull(AssignmentExpression_422_Var);
		final ConditionalExpression ConditionalExpression_423_Var = (ConditionalExpression)AssignmentExpression_422_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_423_Var);
		final LogicalOrExpression LogicalOrExpression_424_Var = (LogicalOrExpression)ConditionalExpression_423_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_424_Var);
		final EList<? extends EObject> Expr_424_list = LogicalOrExpression_424_Var.getExpr();
		Assert.assertNotNull(Expr_424_list);
		Assert.assertEquals(1, Expr_424_list.size());
		final LogicalAndExpression LogicalAndExpression_425_Var = (LogicalAndExpression)Expr_424_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_425_Var);
		final EList<? extends EObject> Expr_425_list = LogicalAndExpression_425_Var.getExpr();
		Assert.assertNotNull(Expr_425_list);
		Assert.assertEquals(1, Expr_425_list.size());
		final InclusiveOrExpression InclusiveOrExpression_426_Var = (InclusiveOrExpression)Expr_425_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_426_Var);
		final EList<? extends EObject> Expr_426_list = InclusiveOrExpression_426_Var.getExpr();
		Assert.assertNotNull(Expr_426_list);
		Assert.assertEquals(1, Expr_426_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_427_Var = (ExclusiveOrExpression)Expr_426_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_427_Var);
		final EList<? extends EObject> Expr_427_list = ExclusiveOrExpression_427_Var.getExpr();
		Assert.assertNotNull(Expr_427_list);
		Assert.assertEquals(1, Expr_427_list.size());
		final AndExpression AndExpression_428_Var = (AndExpression)Expr_427_list.get(0);
		Assert.assertNotNull(AndExpression_428_Var);
		final EList<? extends EObject> Expr_428_list = AndExpression_428_Var.getExpr();
		Assert.assertNotNull(Expr_428_list);
		Assert.assertEquals(1, Expr_428_list.size());
		final EqualityExpression EqualityExpression_429_Var = (EqualityExpression)Expr_428_list.get(0);
		Assert.assertNotNull(EqualityExpression_429_Var);
		final EList<? extends EObject> Expr_429_list = EqualityExpression_429_Var.getExpr();
		Assert.assertNotNull(Expr_429_list);
		Assert.assertEquals(1, Expr_429_list.size());
		final RelationalExpression RelationalExpression_430_Var = (RelationalExpression)Expr_429_list.get(0);
		Assert.assertNotNull(RelationalExpression_430_Var);
		final EList<? extends EObject> Expr_430_list = RelationalExpression_430_Var.getExpr();
		Assert.assertNotNull(Expr_430_list);
		Assert.assertEquals(1, Expr_430_list.size());
		final ShiftExpression ShiftExpression_431_Var = (ShiftExpression)Expr_430_list.get(0);
		Assert.assertNotNull(ShiftExpression_431_Var);
		final EList<? extends EObject> Expr_431_list = ShiftExpression_431_Var.getExpr();
		Assert.assertNotNull(Expr_431_list);
		Assert.assertEquals(1, Expr_431_list.size());
		final AdditiveExpression AdditiveExpression_432_Var = (AdditiveExpression)Expr_431_list.get(0);
		Assert.assertNotNull(AdditiveExpression_432_Var);
		final EList<? extends EObject> Expr_432_list = AdditiveExpression_432_Var.getExpr();
		Assert.assertNotNull(Expr_432_list);
		Assert.assertEquals(1, Expr_432_list.size());
		final MultiplicativeExpression MultiplicativeExpression_433_Var = (MultiplicativeExpression)Expr_432_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_433_Var);
		final EList<? extends EObject> Expr_433_list = MultiplicativeExpression_433_Var.getExpr();
		Assert.assertNotNull(Expr_433_list);
		Assert.assertEquals(1, Expr_433_list.size());
		final CastExpression CastExpression_434_Var = (CastExpression)Expr_433_list.get(0);
		Assert.assertNotNull(CastExpression_434_Var);
		final UnaryExpression UnaryExpression_435_Var = (UnaryExpression)CastExpression_434_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_435_Var);
		final PostfixExpression PostfixExpression_436_Var = (PostfixExpression)UnaryExpression_435_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_436_Var);
		final EList<? extends EObject> Expr_436_list = PostfixExpression_436_Var.getExpr();
		Assert.assertNotNull(Expr_436_list);
		Assert.assertEquals(1, Expr_436_list.size());
		final PrimaryExpression PrimaryExpression_437_Var = (PrimaryExpression)Expr_436_list.get(0);
		Assert.assertNotNull(PrimaryExpression_437_Var);
		Assert.assertEquals("print", PrimaryExpression_437_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_437_list = PostfixExpression_436_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_437_list);
		Assert.assertEquals(1, ArgumentExpressionList_437_list.size());
		final ArgumentExpressionList ArgumentExpressionList_438_Var = (ArgumentExpressionList)ArgumentExpressionList_437_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_438_Var);
		final EList<? extends EObject> Expr_438_list = ArgumentExpressionList_438_Var.getExpr();
		Assert.assertNotNull(Expr_438_list);
		Assert.assertEquals(1, Expr_438_list.size());
		final AssignmentExpression AssignmentExpression_439_Var = (AssignmentExpression)Expr_438_list.get(0);
		Assert.assertNotNull(AssignmentExpression_439_Var);
		final ConditionalExpression ConditionalExpression_440_Var = (ConditionalExpression)AssignmentExpression_439_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_440_Var);
		final LogicalOrExpression LogicalOrExpression_441_Var = (LogicalOrExpression)ConditionalExpression_440_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_441_Var);
		final EList<? extends EObject> Expr_441_list = LogicalOrExpression_441_Var.getExpr();
		Assert.assertNotNull(Expr_441_list);
		Assert.assertEquals(1, Expr_441_list.size());
		final LogicalAndExpression LogicalAndExpression_442_Var = (LogicalAndExpression)Expr_441_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_442_Var);
		final EList<? extends EObject> Expr_442_list = LogicalAndExpression_442_Var.getExpr();
		Assert.assertNotNull(Expr_442_list);
		Assert.assertEquals(1, Expr_442_list.size());
		final InclusiveOrExpression InclusiveOrExpression_443_Var = (InclusiveOrExpression)Expr_442_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_443_Var);
		final EList<? extends EObject> Expr_443_list = InclusiveOrExpression_443_Var.getExpr();
		Assert.assertNotNull(Expr_443_list);
		Assert.assertEquals(1, Expr_443_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_444_Var = (ExclusiveOrExpression)Expr_443_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_444_Var);
		final EList<? extends EObject> Expr_444_list = ExclusiveOrExpression_444_Var.getExpr();
		Assert.assertNotNull(Expr_444_list);
		Assert.assertEquals(1, Expr_444_list.size());
		final AndExpression AndExpression_445_Var = (AndExpression)Expr_444_list.get(0);
		Assert.assertNotNull(AndExpression_445_Var);
		final EList<? extends EObject> Expr_445_list = AndExpression_445_Var.getExpr();
		Assert.assertNotNull(Expr_445_list);
		Assert.assertEquals(1, Expr_445_list.size());
		final EqualityExpression EqualityExpression_446_Var = (EqualityExpression)Expr_445_list.get(0);
		Assert.assertNotNull(EqualityExpression_446_Var);
		final EList<? extends EObject> Expr_446_list = EqualityExpression_446_Var.getExpr();
		Assert.assertNotNull(Expr_446_list);
		Assert.assertEquals(1, Expr_446_list.size());
		final RelationalExpression RelationalExpression_447_Var = (RelationalExpression)Expr_446_list.get(0);
		Assert.assertNotNull(RelationalExpression_447_Var);
		final EList<? extends EObject> Expr_447_list = RelationalExpression_447_Var.getExpr();
		Assert.assertNotNull(Expr_447_list);
		Assert.assertEquals(1, Expr_447_list.size());
		final ShiftExpression ShiftExpression_448_Var = (ShiftExpression)Expr_447_list.get(0);
		Assert.assertNotNull(ShiftExpression_448_Var);
		final EList<? extends EObject> Expr_448_list = ShiftExpression_448_Var.getExpr();
		Assert.assertNotNull(Expr_448_list);
		Assert.assertEquals(1, Expr_448_list.size());
		final AdditiveExpression AdditiveExpression_449_Var = (AdditiveExpression)Expr_448_list.get(0);
		Assert.assertNotNull(AdditiveExpression_449_Var);
		final EList<? extends EObject> Expr_449_list = AdditiveExpression_449_Var.getExpr();
		Assert.assertNotNull(Expr_449_list);
		Assert.assertEquals(1, Expr_449_list.size());
		final MultiplicativeExpression MultiplicativeExpression_450_Var = (MultiplicativeExpression)Expr_449_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_450_Var);
		final EList<? extends EObject> Expr_450_list = MultiplicativeExpression_450_Var.getExpr();
		Assert.assertNotNull(Expr_450_list);
		Assert.assertEquals(1, Expr_450_list.size());
		final CastExpression CastExpression_451_Var = (CastExpression)Expr_450_list.get(0);
		Assert.assertNotNull(CastExpression_451_Var);
		final UnaryExpression UnaryExpression_452_Var = (UnaryExpression)CastExpression_451_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_452_Var);
		final PostfixExpression PostfixExpression_453_Var = (PostfixExpression)UnaryExpression_452_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_453_Var);
		final EList<? extends EObject> Expr_453_list = PostfixExpression_453_Var.getExpr();
		Assert.assertNotNull(Expr_453_list);
		Assert.assertEquals(1, Expr_453_list.size());
		final PrimaryExpression PrimaryExpression_454_Var = (PrimaryExpression)Expr_453_list.get(0);
		Assert.assertNotNull(PrimaryExpression_454_Var);
		Assert.assertEquals("newEmployee", PrimaryExpression_454_Var.getId());
		Assert.assertEquals(";", ExpressionStatement_420_Var.getSemi());
		final Statement Statement_455_Var = (Statement)Statement_249_list.get(4);
		Assert.assertNotNull(Statement_455_Var);
		final ExpressionStatement ExpressionStatement_456_Var = (ExpressionStatement)Statement_455_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_456_Var);
		final Expression Expression_457_Var = (Expression)ExpressionStatement_456_Var.getExpression();
		Assert.assertNotNull(Expression_457_Var);
		final EList<? extends EObject> ExprExpr_457_list = Expression_457_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_457_list);
		Assert.assertEquals(1, ExprExpr_457_list.size());
		final AssignmentExpression AssignmentExpression_458_Var = (AssignmentExpression)ExprExpr_457_list.get(0);
		Assert.assertNotNull(AssignmentExpression_458_Var);
		final ConditionalExpression ConditionalExpression_459_Var = (ConditionalExpression)AssignmentExpression_458_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_459_Var);
		final LogicalOrExpression LogicalOrExpression_460_Var = (LogicalOrExpression)ConditionalExpression_459_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_460_Var);
		final EList<? extends EObject> Expr_460_list = LogicalOrExpression_460_Var.getExpr();
		Assert.assertNotNull(Expr_460_list);
		Assert.assertEquals(1, Expr_460_list.size());
		final LogicalAndExpression LogicalAndExpression_461_Var = (LogicalAndExpression)Expr_460_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_461_Var);
		final EList<? extends EObject> Expr_461_list = LogicalAndExpression_461_Var.getExpr();
		Assert.assertNotNull(Expr_461_list);
		Assert.assertEquals(1, Expr_461_list.size());
		final InclusiveOrExpression InclusiveOrExpression_462_Var = (InclusiveOrExpression)Expr_461_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_462_Var);
		final EList<? extends EObject> Expr_462_list = InclusiveOrExpression_462_Var.getExpr();
		Assert.assertNotNull(Expr_462_list);
		Assert.assertEquals(1, Expr_462_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_463_Var = (ExclusiveOrExpression)Expr_462_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_463_Var);
		final EList<? extends EObject> Expr_463_list = ExclusiveOrExpression_463_Var.getExpr();
		Assert.assertNotNull(Expr_463_list);
		Assert.assertEquals(1, Expr_463_list.size());
		final AndExpression AndExpression_464_Var = (AndExpression)Expr_463_list.get(0);
		Assert.assertNotNull(AndExpression_464_Var);
		final EList<? extends EObject> Expr_464_list = AndExpression_464_Var.getExpr();
		Assert.assertNotNull(Expr_464_list);
		Assert.assertEquals(1, Expr_464_list.size());
		final EqualityExpression EqualityExpression_465_Var = (EqualityExpression)Expr_464_list.get(0);
		Assert.assertNotNull(EqualityExpression_465_Var);
		final EList<? extends EObject> Expr_465_list = EqualityExpression_465_Var.getExpr();
		Assert.assertNotNull(Expr_465_list);
		Assert.assertEquals(1, Expr_465_list.size());
		final RelationalExpression RelationalExpression_466_Var = (RelationalExpression)Expr_465_list.get(0);
		Assert.assertNotNull(RelationalExpression_466_Var);
		final EList<? extends EObject> Expr_466_list = RelationalExpression_466_Var.getExpr();
		Assert.assertNotNull(Expr_466_list);
		Assert.assertEquals(1, Expr_466_list.size());
		final ShiftExpression ShiftExpression_467_Var = (ShiftExpression)Expr_466_list.get(0);
		Assert.assertNotNull(ShiftExpression_467_Var);
		final EList<? extends EObject> Expr_467_list = ShiftExpression_467_Var.getExpr();
		Assert.assertNotNull(Expr_467_list);
		Assert.assertEquals(1, Expr_467_list.size());
		final AdditiveExpression AdditiveExpression_468_Var = (AdditiveExpression)Expr_467_list.get(0);
		Assert.assertNotNull(AdditiveExpression_468_Var);
		final EList<? extends EObject> Expr_468_list = AdditiveExpression_468_Var.getExpr();
		Assert.assertNotNull(Expr_468_list);
		Assert.assertEquals(1, Expr_468_list.size());
		final MultiplicativeExpression MultiplicativeExpression_469_Var = (MultiplicativeExpression)Expr_468_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_469_Var);
		final EList<? extends EObject> Expr_469_list = MultiplicativeExpression_469_Var.getExpr();
		Assert.assertNotNull(Expr_469_list);
		Assert.assertEquals(1, Expr_469_list.size());
		final CastExpression CastExpression_470_Var = (CastExpression)Expr_469_list.get(0);
		Assert.assertNotNull(CastExpression_470_Var);
		final UnaryExpression UnaryExpression_471_Var = (UnaryExpression)CastExpression_470_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_471_Var);
		final PostfixExpression PostfixExpression_472_Var = (PostfixExpression)UnaryExpression_471_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_472_Var);
		final EList<? extends EObject> Expr_472_list = PostfixExpression_472_Var.getExpr();
		Assert.assertNotNull(Expr_472_list);
		Assert.assertEquals(1, Expr_472_list.size());
		final PrimaryExpression PrimaryExpression_473_Var = (PrimaryExpression)Expr_472_list.get(0);
		Assert.assertNotNull(PrimaryExpression_473_Var);
		Assert.assertEquals("free", PrimaryExpression_473_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_473_list = PostfixExpression_472_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_473_list);
		Assert.assertEquals(1, ArgumentExpressionList_473_list.size());
		final ArgumentExpressionList ArgumentExpressionList_474_Var = (ArgumentExpressionList)ArgumentExpressionList_473_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_474_Var);
		final EList<? extends EObject> Expr_474_list = ArgumentExpressionList_474_Var.getExpr();
		Assert.assertNotNull(Expr_474_list);
		Assert.assertEquals(1, Expr_474_list.size());
		final AssignmentExpression AssignmentExpression_475_Var = (AssignmentExpression)Expr_474_list.get(0);
		Assert.assertNotNull(AssignmentExpression_475_Var);
		final ConditionalExpression ConditionalExpression_476_Var = (ConditionalExpression)AssignmentExpression_475_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_476_Var);
		final LogicalOrExpression LogicalOrExpression_477_Var = (LogicalOrExpression)ConditionalExpression_476_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_477_Var);
		final EList<? extends EObject> Expr_477_list = LogicalOrExpression_477_Var.getExpr();
		Assert.assertNotNull(Expr_477_list);
		Assert.assertEquals(1, Expr_477_list.size());
		final LogicalAndExpression LogicalAndExpression_478_Var = (LogicalAndExpression)Expr_477_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_478_Var);
		final EList<? extends EObject> Expr_478_list = LogicalAndExpression_478_Var.getExpr();
		Assert.assertNotNull(Expr_478_list);
		Assert.assertEquals(1, Expr_478_list.size());
		final InclusiveOrExpression InclusiveOrExpression_479_Var = (InclusiveOrExpression)Expr_478_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_479_Var);
		final EList<? extends EObject> Expr_479_list = InclusiveOrExpression_479_Var.getExpr();
		Assert.assertNotNull(Expr_479_list);
		Assert.assertEquals(1, Expr_479_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_480_Var = (ExclusiveOrExpression)Expr_479_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_480_Var);
		final EList<? extends EObject> Expr_480_list = ExclusiveOrExpression_480_Var.getExpr();
		Assert.assertNotNull(Expr_480_list);
		Assert.assertEquals(1, Expr_480_list.size());
		final AndExpression AndExpression_481_Var = (AndExpression)Expr_480_list.get(0);
		Assert.assertNotNull(AndExpression_481_Var);
		final EList<? extends EObject> Expr_481_list = AndExpression_481_Var.getExpr();
		Assert.assertNotNull(Expr_481_list);
		Assert.assertEquals(1, Expr_481_list.size());
		final EqualityExpression EqualityExpression_482_Var = (EqualityExpression)Expr_481_list.get(0);
		Assert.assertNotNull(EqualityExpression_482_Var);
		final EList<? extends EObject> Expr_482_list = EqualityExpression_482_Var.getExpr();
		Assert.assertNotNull(Expr_482_list);
		Assert.assertEquals(1, Expr_482_list.size());
		final RelationalExpression RelationalExpression_483_Var = (RelationalExpression)Expr_482_list.get(0);
		Assert.assertNotNull(RelationalExpression_483_Var);
		final EList<? extends EObject> Expr_483_list = RelationalExpression_483_Var.getExpr();
		Assert.assertNotNull(Expr_483_list);
		Assert.assertEquals(1, Expr_483_list.size());
		final ShiftExpression ShiftExpression_484_Var = (ShiftExpression)Expr_483_list.get(0);
		Assert.assertNotNull(ShiftExpression_484_Var);
		final EList<? extends EObject> Expr_484_list = ShiftExpression_484_Var.getExpr();
		Assert.assertNotNull(Expr_484_list);
		Assert.assertEquals(1, Expr_484_list.size());
		final AdditiveExpression AdditiveExpression_485_Var = (AdditiveExpression)Expr_484_list.get(0);
		Assert.assertNotNull(AdditiveExpression_485_Var);
		final EList<? extends EObject> Expr_485_list = AdditiveExpression_485_Var.getExpr();
		Assert.assertNotNull(Expr_485_list);
		Assert.assertEquals(1, Expr_485_list.size());
		final MultiplicativeExpression MultiplicativeExpression_486_Var = (MultiplicativeExpression)Expr_485_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_486_Var);
		final EList<? extends EObject> Expr_486_list = MultiplicativeExpression_486_Var.getExpr();
		Assert.assertNotNull(Expr_486_list);
		Assert.assertEquals(1, Expr_486_list.size());
		final CastExpression CastExpression_487_Var = (CastExpression)Expr_486_list.get(0);
		Assert.assertNotNull(CastExpression_487_Var);
		final UnaryExpression UnaryExpression_488_Var = (UnaryExpression)CastExpression_487_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_488_Var);
		final PostfixExpression PostfixExpression_489_Var = (PostfixExpression)UnaryExpression_488_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_489_Var);
		final EList<? extends EObject> Expr_489_list = PostfixExpression_489_Var.getExpr();
		Assert.assertNotNull(Expr_489_list);
		Assert.assertEquals(1, Expr_489_list.size());
		final PrimaryExpression PrimaryExpression_490_Var = (PrimaryExpression)Expr_489_list.get(0);
		Assert.assertNotNull(PrimaryExpression_490_Var);
		Assert.assertEquals("newEmployee", PrimaryExpression_490_Var.getId());
		Assert.assertEquals(";", ExpressionStatement_456_Var.getSemi());
		final Statement Statement_491_Var = (Statement)Statement_249_list.get(5);
		Assert.assertNotNull(Statement_491_Var);
		final JumpStatement JumpStatement_492_Var = (JumpStatement)Statement_491_Var.getStmt();
		Assert.assertNotNull(JumpStatement_492_Var);
		final Expression Expression_493_Var = (Expression)JumpStatement_492_Var.getExpr();
		Assert.assertNotNull(Expression_493_Var);
		final EList<? extends EObject> ExprExpr_493_list = Expression_493_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_493_list);
		Assert.assertEquals(1, ExprExpr_493_list.size());
		final AssignmentExpression AssignmentExpression_494_Var = (AssignmentExpression)ExprExpr_493_list.get(0);
		Assert.assertNotNull(AssignmentExpression_494_Var);
		final ConditionalExpression ConditionalExpression_495_Var = (ConditionalExpression)AssignmentExpression_494_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_495_Var);
		final LogicalOrExpression LogicalOrExpression_496_Var = (LogicalOrExpression)ConditionalExpression_495_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_496_Var);
		final EList<? extends EObject> Expr_496_list = LogicalOrExpression_496_Var.getExpr();
		Assert.assertNotNull(Expr_496_list);
		Assert.assertEquals(1, Expr_496_list.size());
		final LogicalAndExpression LogicalAndExpression_497_Var = (LogicalAndExpression)Expr_496_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_497_Var);
		final EList<? extends EObject> Expr_497_list = LogicalAndExpression_497_Var.getExpr();
		Assert.assertNotNull(Expr_497_list);
		Assert.assertEquals(1, Expr_497_list.size());
		final InclusiveOrExpression InclusiveOrExpression_498_Var = (InclusiveOrExpression)Expr_497_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_498_Var);
		final EList<? extends EObject> Expr_498_list = InclusiveOrExpression_498_Var.getExpr();
		Assert.assertNotNull(Expr_498_list);
		Assert.assertEquals(1, Expr_498_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_499_Var = (ExclusiveOrExpression)Expr_498_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_499_Var);
		final EList<? extends EObject> Expr_499_list = ExclusiveOrExpression_499_Var.getExpr();
		Assert.assertNotNull(Expr_499_list);
		Assert.assertEquals(1, Expr_499_list.size());
		final AndExpression AndExpression_500_Var = (AndExpression)Expr_499_list.get(0);
		Assert.assertNotNull(AndExpression_500_Var);
		final EList<? extends EObject> Expr_500_list = AndExpression_500_Var.getExpr();
		Assert.assertNotNull(Expr_500_list);
		Assert.assertEquals(1, Expr_500_list.size());
		final EqualityExpression EqualityExpression_501_Var = (EqualityExpression)Expr_500_list.get(0);
		Assert.assertNotNull(EqualityExpression_501_Var);
		final EList<? extends EObject> Expr_501_list = EqualityExpression_501_Var.getExpr();
		Assert.assertNotNull(Expr_501_list);
		Assert.assertEquals(1, Expr_501_list.size());
		final RelationalExpression RelationalExpression_502_Var = (RelationalExpression)Expr_501_list.get(0);
		Assert.assertNotNull(RelationalExpression_502_Var);
		final EList<? extends EObject> Expr_502_list = RelationalExpression_502_Var.getExpr();
		Assert.assertNotNull(Expr_502_list);
		Assert.assertEquals(1, Expr_502_list.size());
		final ShiftExpression ShiftExpression_503_Var = (ShiftExpression)Expr_502_list.get(0);
		Assert.assertNotNull(ShiftExpression_503_Var);
		final EList<? extends EObject> Expr_503_list = ShiftExpression_503_Var.getExpr();
		Assert.assertNotNull(Expr_503_list);
		Assert.assertEquals(1, Expr_503_list.size());
		final AdditiveExpression AdditiveExpression_504_Var = (AdditiveExpression)Expr_503_list.get(0);
		Assert.assertNotNull(AdditiveExpression_504_Var);
		final EList<? extends EObject> Expr_504_list = AdditiveExpression_504_Var.getExpr();
		Assert.assertNotNull(Expr_504_list);
		Assert.assertEquals(1, Expr_504_list.size());
		final MultiplicativeExpression MultiplicativeExpression_505_Var = (MultiplicativeExpression)Expr_504_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_505_Var);
		final EList<? extends EObject> Expr_505_list = MultiplicativeExpression_505_Var.getExpr();
		Assert.assertNotNull(Expr_505_list);
		Assert.assertEquals(1, Expr_505_list.size());
		final CastExpression CastExpression_506_Var = (CastExpression)Expr_505_list.get(0);
		Assert.assertNotNull(CastExpression_506_Var);
		final UnaryExpression UnaryExpression_507_Var = (UnaryExpression)CastExpression_506_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_507_Var);
		final PostfixExpression PostfixExpression_508_Var = (PostfixExpression)UnaryExpression_507_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_508_Var);
		final EList<? extends EObject> Expr_508_list = PostfixExpression_508_Var.getExpr();
		Assert.assertNotNull(Expr_508_list);
		Assert.assertEquals(1, Expr_508_list.size());
		final PrimaryExpression PrimaryExpression_509_Var = (PrimaryExpression)Expr_508_list.get(0);
		Assert.assertNotNull(PrimaryExpression_509_Var);
		final Constant Constant_510_Var = (Constant)PrimaryExpression_509_Var.getConst();
		Assert.assertNotNull(Constant_510_Var);
		Assert.assertEquals("0", Constant_510_Var.getDec());
		Assert.assertEquals("return", JumpStatement_492_Var.getReturn());
		Assert.assertEquals(";", JumpStatement_492_Var.getSemi());
	}


}
