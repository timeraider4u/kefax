package at.jku.weiner.c.xtexttests;

import com.google.inject.Inject;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import org.antlr.runtime.Token;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipse.xtext.junit4.util.ParseHelper;
import org.eclipse.xtext.junit4.validation.ValidationTestHelper;
import org.eclipse.xtext.junit4.XtextRunner;
import org.eclipse.xtext.parser.antlr.ITokenDefProvider;
import org.junit.Assert;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import at.jku.weiner.c.tests.CInjectorProvider;
import at.jku.weiner.c.parser.antlr.CParser;
import at.jku.weiner.c.parser.antlr.internal.InternalCLexer;
import at.jku.weiner.c.xtexttests.LexerAndParserTest;

import at.jku.weiner.c.c.Model;
import at.jku.weiner.c.c.TranslationUnit;
import at.jku.weiner.c.c.ExternalDeclaration;
import at.jku.weiner.c.c.Declaration;
import at.jku.weiner.c.c.DeclarationSpecifiers;
import at.jku.weiner.c.c.StorageClassSpecifier;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.StructOrUnionSpecifier;
import at.jku.weiner.c.c.StructOrUnion;
import at.jku.weiner.c.c.StructDeclarationList;
import at.jku.weiner.c.c.StructDeclaration;
import at.jku.weiner.c.c.SpecifierQualifierList;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.StructDeclaratorList;
import at.jku.weiner.c.c.StructDeclarator;
import at.jku.weiner.c.c.Declarator;
import at.jku.weiner.c.c.DirectDeclarator;
import at.jku.weiner.c.c.StructDeclaration;
import at.jku.weiner.c.c.SpecifierQualifierList;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.StructDeclaratorList;
import at.jku.weiner.c.c.StructDeclarator;
import at.jku.weiner.c.c.Declarator;
import at.jku.weiner.c.c.DirectDeclarator;
import at.jku.weiner.c.c.DeclaratorSuffix;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.InitDeclaratorList;
import at.jku.weiner.c.c.InitDeclarator;
import at.jku.weiner.c.c.Declarator;
import at.jku.weiner.c.c.DirectDeclarator;
import at.jku.weiner.c.c.ExternalDeclaration;
import at.jku.weiner.c.c.Declaration;
import at.jku.weiner.c.c.DeclarationSpecifiers;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.StructOrUnionSpecifier;
import at.jku.weiner.c.c.StructOrUnion;
import at.jku.weiner.c.c.InitDeclaratorList;
import at.jku.weiner.c.c.InitDeclarator;
import at.jku.weiner.c.c.Declarator;
import at.jku.weiner.c.c.DirectDeclarator;
import at.jku.weiner.c.c.Initializer;
import at.jku.weiner.c.c.InitializerList;
import at.jku.weiner.c.c.Initializer;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.Initializer;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.ExternalDeclaration;
import at.jku.weiner.c.c.Declaration;
import at.jku.weiner.c.c.DeclarationSpecifiers;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.TypedefName;
import at.jku.weiner.c.c.InitDeclaratorList;
import at.jku.weiner.c.c.InitDeclarator;
import at.jku.weiner.c.c.Declarator;
import at.jku.weiner.c.c.DirectDeclarator;
import at.jku.weiner.c.c.Initializer;
import at.jku.weiner.c.c.InitializerList;
import at.jku.weiner.c.c.Initializer;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.Initializer;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.ExternalDeclaration;
import at.jku.weiner.c.c.FunctionDefHead;
import at.jku.weiner.c.c.DeclarationSpecifiers;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.Declarator;
import at.jku.weiner.c.c.DirectDeclarator;
import at.jku.weiner.c.c.DeclaratorSuffix;
import at.jku.weiner.c.c.DirectDeclaratorLastSuffix;
import at.jku.weiner.c.c.ParameterTypeList;
import at.jku.weiner.c.c.ParameterList;
import at.jku.weiner.c.c.ParameterDeclaration;
import at.jku.weiner.c.c.DeclarationSpecifiers;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.TypedefName;
import at.jku.weiner.c.c.Declarator;
import at.jku.weiner.c.c.DirectDeclarator;
import at.jku.weiner.c.c.Pointer;
import at.jku.weiner.c.c.FunctionDefinition;
import at.jku.weiner.c.c.BodyStatement;
import at.jku.weiner.c.c.BlockList;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.UnaryOperator;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ExternalDeclaration;
import at.jku.weiner.c.c.FunctionDefHead;
import at.jku.weiner.c.c.DeclarationSpecifiers;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.Declarator;
import at.jku.weiner.c.c.DirectDeclarator;
import at.jku.weiner.c.c.DeclaratorSuffix;
import at.jku.weiner.c.c.DirectDeclaratorLastSuffix;
import at.jku.weiner.c.c.ParameterTypeList;
import at.jku.weiner.c.c.ParameterList;
import at.jku.weiner.c.c.ParameterDeclaration;
import at.jku.weiner.c.c.DeclarationSpecifiers;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.FunctionDefinition;
import at.jku.weiner.c.c.BodyStatement;
import at.jku.weiner.c.c.BlockList;
import at.jku.weiner.c.c.Declaration;
import at.jku.weiner.c.c.DeclarationSpecifiers;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.TypedefName;
import at.jku.weiner.c.c.InitDeclaratorList;
import at.jku.weiner.c.c.InitDeclarator;
import at.jku.weiner.c.c.Declarator;
import at.jku.weiner.c.c.Pointer;
import at.jku.weiner.c.c.DirectDeclarator;
import at.jku.weiner.c.c.Initializer;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.TypeName;
import at.jku.weiner.c.c.SpecifierQualifierList;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.TypedefName;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.SelectionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.CompoundStatement;
import at.jku.weiner.c.c.BodyStatement;
import at.jku.weiner.c.c.BlockList;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.JumpStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.UnaryOperator;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.UnaryOperator;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.UnaryOperator;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.AssignmentOperator;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.ExpressionStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.ArgumentExpressionList;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.JumpStatement;
import at.jku.weiner.c.c.Expression;
import at.jku.weiner.c.c.AssignmentExpression;
import at.jku.weiner.c.c.ConditionalExpression;
import at.jku.weiner.c.c.LogicalOrExpression;
import at.jku.weiner.c.c.LogicalAndExpression;
import at.jku.weiner.c.c.InclusiveOrExpression;
import at.jku.weiner.c.c.ExclusiveOrExpression;
import at.jku.weiner.c.c.AndExpression;
import at.jku.weiner.c.c.EqualityExpression;
import at.jku.weiner.c.c.RelationalExpression;
import at.jku.weiner.c.c.ShiftExpression;
import at.jku.weiner.c.c.AdditiveExpression;
import at.jku.weiner.c.c.MultiplicativeExpression;
import at.jku.weiner.c.c.CastExpression;
import at.jku.weiner.c.c.UnaryExpression;
import at.jku.weiner.c.c.PostfixExpression;
import at.jku.weiner.c.c.PrimaryExpression;
import at.jku.weiner.c.c.Constant;

@SuppressWarnings("unused")
@RunWith(XtextRunner.class)
@InjectWith(CInjectorProvider.class)
public class Test0038_StructAdvanced {

	@Inject
	private ParseHelper<Model> parseHelper;
	@Inject
	private ValidationTestHelper valHelper;
	@Inject
	private InternalCLexer lexer;
	@Inject
	private CParser parser;
	@Inject
	private ITokenDefProvider tokenDefProvider;
	
	private LexerAndParserTest testHelper;
	
	@Before
	public void initialize(){
		this.testHelper = new LexerAndParserTest(lexer, parser, tokenDefProvider);
	}
	
	private String getSourceText()
	throws Exception{
		final Path path = Paths.get("res/Test0038_StructAdvanced.c");
		final String content = new String(Files.readAllBytes(path));
		return content;
	}
	
	@Test
	public void checkLexerTokens()
	throws Exception{
		final String text = this.getSourceText();
		//System.out.println(text);
		final String[] expected = new String[] {
			"RULE_LINEDIRECTIVE",
			"RULE_NEWLINE",
			"RULE_LINEDIRECTIVE",
			"RULE_NEWLINE",
			"RULE_LINEDIRECTIVE",
			"RULE_NEWLINE",
			"RULE_NEWLINE",
			"RULE_KW_TYPEDEF",
			"RULE_WHITESPACE",
			"RULE_KW_STRUCT",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_WHITESPACE",
			"RULE_LEFTBRACE",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_KW_INT",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_KW_CHAR",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTBRACKET",
			"RULE_DECIMAL_LITERAL",
			"RULE_RIGHTBRACKET",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_RIGHTBRACE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_NEWLINE",
			"RULE_KW_STRUCT",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_WHITESPACE",
			"RULE_ASSIGN",
			"RULE_WHITESPACE",
			"RULE_LEFTBRACE",
			"RULE_HEX_LITERAL",
			"RULE_COMMA",
			"RULE_WHITESPACE",
			"RULE_STRING_LITERAL",
			"RULE_RIGHTBRACE",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_ID",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_WHITESPACE",
			"RULE_ASSIGN",
			"RULE_WHITESPACE",
			"RULE_LEFTBRACE",
			"RULE_HEX_LITERAL",
			"RULE_COMMA",
			"RULE_WHITESPACE",
			"RULE_STRING_LITERAL",
			"RULE_RIGHTBRACE",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_NEWLINE",
			"RULE_KW_VOID",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_ID",
			"RULE_WHITESPACE",
			"RULE_STAR",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_WHITESPACE",
			"RULE_LEFTBRACE",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_STRING_LITERAL",
			"RULE_COMMA",
			"RULE_WHITESPACE",
			"RULE_LEFTPAREN",
			"RULE_STAR",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_DOT",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_STRING_LITERAL",
			"RULE_COMMA",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_ARROW",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_RIGHTBRACE",
			"RULE_NEWLINE",
			"RULE_NEWLINE",
			"RULE_KW_INT",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_KW_VOID",
			"RULE_RIGHTPAREN",
			"RULE_WHITESPACE",
			"RULE_LEFTBRACE",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_WHITESPACE",
			"RULE_STAR",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_WHITESPACE",
			"RULE_ASSIGN",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_KW_SIZEOF",
			"RULE_LEFTPAREN",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_KW_IF",
			"RULE_WHITESPACE",
			"RULE_LEFTPAREN",
			"RULE_ID",
			"RULE_WHITESPACE",
			"RULE_EQUAL",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_WHITESPACE",
			"RULE_LEFTBRACE",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_STRING_LITERAL",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_KW_RETURN",
			"RULE_WHITESPACE",
			"RULE_MINUS",
			"RULE_DECIMAL_LITERAL",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_RIGHTBRACE",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_AND",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_AND",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_ARROW",
			"RULE_ID",
			"RULE_WHITESPACE",
			"RULE_ASSIGN",
			"RULE_WHITESPACE",
			"RULE_HEX_LITERAL",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_ID",
			"RULE_ARROW",
			"RULE_ID",
			"RULE_COMMA",
			"RULE_WHITESPACE",
			"RULE_STRING_LITERAL",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_ID",
			"RULE_LEFTPAREN",
			"RULE_ID",
			"RULE_RIGHTPAREN",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_WHITESPACE",
			"RULE_KW_RETURN",
			"RULE_WHITESPACE",
			"RULE_DECIMAL_LITERAL",
			"RULE_SEMI",
			"RULE_NEWLINE",
			"RULE_RIGHTBRACE",
			"RULE_NEWLINE",
		};
		//final List<Token> actual = testHelper.getTokens(text);
		//testHelper.outputTokens(text);
		testHelper.checkTokenisation(text, expected);
	}
	
	@Test
	public void checkParserResult()
	throws Exception{

		final String text = this.getSourceText();
		final Model Model_0_Var = this.parseHelper.parse(text);
	
		this.valHelper.assertNoErrors(Model_0_Var);
		Assert.assertNotNull(Model_0_Var);
		final EList<? extends EObject> Unit_0_list = Model_0_Var.getUnit();
		Assert.assertNotNull(Unit_0_list);
		Assert.assertEquals(1, Unit_0_list.size());
		final TranslationUnit TranslationUnit_1_Var = (TranslationUnit)Unit_0_list.get(0);
		Assert.assertNotNull(TranslationUnit_1_Var);
		final EList<? extends EObject> External_1_list = TranslationUnit_1_Var.getExternal();
		Assert.assertNotNull(External_1_list);
		Assert.assertEquals(5, External_1_list.size());
		final ExternalDeclaration ExternalDeclaration_2_Var = (ExternalDeclaration)External_1_list.get(0);
		Assert.assertNotNull(ExternalDeclaration_2_Var);
		final Declaration Declaration_3_Var = (Declaration)ExternalDeclaration_2_Var.getDeclaration();
		Assert.assertNotNull(Declaration_3_Var);
		final DeclarationSpecifiers DeclarationSpecifiers_4_Var = (DeclarationSpecifiers)Declaration_3_Var.getSpecifiers();
		Assert.assertNotNull(DeclarationSpecifiers_4_Var);
		final EList<? extends EObject> DeclarationSpecifier_4_list = DeclarationSpecifiers_4_Var.getDeclarationSpecifier();
		Assert.assertNotNull(DeclarationSpecifier_4_list);
		Assert.assertEquals(2, DeclarationSpecifier_4_list.size());
		final StorageClassSpecifier StorageClassSpecifier_5_Var = (StorageClassSpecifier)DeclarationSpecifier_4_list.get(0);
		Assert.assertNotNull(StorageClassSpecifier_5_Var);
		Assert.assertEquals("typedef", StorageClassSpecifier_5_Var.getName());
		final TypeSpecifier TypeSpecifier_6_Var = (TypeSpecifier)DeclarationSpecifier_4_list.get(1);
		Assert.assertNotNull(TypeSpecifier_6_Var);
		final StructOrUnionSpecifier StructOrUnionSpecifier_7_Var = (StructOrUnionSpecifier)TypeSpecifier_6_Var.getSpecifier();
		Assert.assertNotNull(StructOrUnionSpecifier_7_Var);
		final StructOrUnion StructOrUnion_8_Var = (StructOrUnion)StructOrUnionSpecifier_7_Var.getType();
		Assert.assertNotNull(StructOrUnion_8_Var);
		Assert.assertEquals("struct", StructOrUnion_8_Var.getName());
		Assert.assertEquals("empStruct", StructOrUnionSpecifier_7_Var.getId());
		final StructDeclarationList StructDeclarationList_9_Var = (StructDeclarationList)StructOrUnionSpecifier_7_Var.getStructDeclList();
		Assert.assertNotNull(StructDeclarationList_9_Var);
		final EList<? extends EObject> StructDeclaration_9_list = StructDeclarationList_9_Var.getStructDeclaration();
		Assert.assertNotNull(StructDeclaration_9_list);
		Assert.assertEquals(2, StructDeclaration_9_list.size());
		final StructDeclaration StructDeclaration_10_Var = (StructDeclaration)StructDeclaration_9_list.get(0);
		Assert.assertNotNull(StructDeclaration_10_Var);
		final SpecifierQualifierList SpecifierQualifierList_11_Var = (SpecifierQualifierList)StructDeclaration_10_Var.getList();
		Assert.assertNotNull(SpecifierQualifierList_11_Var);
		final EList<? extends EObject> TypeSpecifier_11_list = SpecifierQualifierList_11_Var.getTypeSpecifier();
		Assert.assertNotNull(TypeSpecifier_11_list);
		Assert.assertEquals(1, TypeSpecifier_11_list.size());
		final TypeSpecifier TypeSpecifier_12_Var = (TypeSpecifier)TypeSpecifier_11_list.get(0);
		Assert.assertNotNull(TypeSpecifier_12_Var);
		Assert.assertEquals("int", TypeSpecifier_12_Var.getName());
		final StructDeclaratorList StructDeclaratorList_13_Var = (StructDeclaratorList)StructDeclaration_10_Var.getStructDeclarationList();
		Assert.assertNotNull(StructDeclaratorList_13_Var);
		final EList<? extends EObject> StructDeclarator_13_list = StructDeclaratorList_13_Var.getStructDeclarator();
		Assert.assertNotNull(StructDeclarator_13_list);
		Assert.assertEquals(1, StructDeclarator_13_list.size());
		final StructDeclarator StructDeclarator_14_Var = (StructDeclarator)StructDeclarator_13_list.get(0);
		Assert.assertNotNull(StructDeclarator_14_Var);
		final Declarator Declarator_15_Var = (Declarator)StructDeclarator_14_Var.getDeclarator();
		Assert.assertNotNull(Declarator_15_Var);
		final DirectDeclarator DirectDeclarator_16_Var = (DirectDeclarator)Declarator_15_Var.getDeclarator();
		Assert.assertNotNull(DirectDeclarator_16_Var);
		Assert.assertEquals("id", DirectDeclarator_16_Var.getId());
		final StructDeclaration StructDeclaration_17_Var = (StructDeclaration)StructDeclaration_9_list.get(1);
		Assert.assertNotNull(StructDeclaration_17_Var);
		final SpecifierQualifierList SpecifierQualifierList_18_Var = (SpecifierQualifierList)StructDeclaration_17_Var.getList();
		Assert.assertNotNull(SpecifierQualifierList_18_Var);
		final EList<? extends EObject> TypeSpecifier_18_list = SpecifierQualifierList_18_Var.getTypeSpecifier();
		Assert.assertNotNull(TypeSpecifier_18_list);
		Assert.assertEquals(1, TypeSpecifier_18_list.size());
		final TypeSpecifier TypeSpecifier_19_Var = (TypeSpecifier)TypeSpecifier_18_list.get(0);
		Assert.assertNotNull(TypeSpecifier_19_Var);
		Assert.assertEquals("char", TypeSpecifier_19_Var.getName());
		final StructDeclaratorList StructDeclaratorList_20_Var = (StructDeclaratorList)StructDeclaration_17_Var.getStructDeclarationList();
		Assert.assertNotNull(StructDeclaratorList_20_Var);
		final EList<? extends EObject> StructDeclarator_20_list = StructDeclaratorList_20_Var.getStructDeclarator();
		Assert.assertNotNull(StructDeclarator_20_list);
		Assert.assertEquals(1, StructDeclarator_20_list.size());
		final StructDeclarator StructDeclarator_21_Var = (StructDeclarator)StructDeclarator_20_list.get(0);
		Assert.assertNotNull(StructDeclarator_21_Var);
		final Declarator Declarator_22_Var = (Declarator)StructDeclarator_21_Var.getDeclarator();
		Assert.assertNotNull(Declarator_22_Var);
		final DirectDeclarator DirectDeclarator_23_Var = (DirectDeclarator)Declarator_22_Var.getDeclarator();
		Assert.assertNotNull(DirectDeclarator_23_Var);
		Assert.assertEquals("name", DirectDeclarator_23_Var.getId());
		final EList<? extends EObject> DeclaratorSuffix_23_list = DirectDeclarator_23_Var.getDeclaratorSuffix();
		Assert.assertNotNull(DeclaratorSuffix_23_list);
		Assert.assertEquals(1, DeclaratorSuffix_23_list.size());
		final DeclaratorSuffix DeclaratorSuffix_24_Var = (DeclaratorSuffix)DeclaratorSuffix_23_list.get(0);
		Assert.assertNotNull(DeclaratorSuffix_24_Var);
		final AssignmentExpression AssignmentExpression_25_Var = (AssignmentExpression)DeclaratorSuffix_24_Var.getExpr();
		Assert.assertNotNull(AssignmentExpression_25_Var);
		final ConditionalExpression ConditionalExpression_26_Var = (ConditionalExpression)AssignmentExpression_25_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_26_Var);
		final LogicalOrExpression LogicalOrExpression_27_Var = (LogicalOrExpression)ConditionalExpression_26_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_27_Var);
		final EList<? extends EObject> Expr_27_list = LogicalOrExpression_27_Var.getExpr();
		Assert.assertNotNull(Expr_27_list);
		Assert.assertEquals(1, Expr_27_list.size());
		final LogicalAndExpression LogicalAndExpression_28_Var = (LogicalAndExpression)Expr_27_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_28_Var);
		final EList<? extends EObject> Expr_28_list = LogicalAndExpression_28_Var.getExpr();
		Assert.assertNotNull(Expr_28_list);
		Assert.assertEquals(1, Expr_28_list.size());
		final InclusiveOrExpression InclusiveOrExpression_29_Var = (InclusiveOrExpression)Expr_28_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_29_Var);
		final EList<? extends EObject> Expr_29_list = InclusiveOrExpression_29_Var.getExpr();
		Assert.assertNotNull(Expr_29_list);
		Assert.assertEquals(1, Expr_29_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_30_Var = (ExclusiveOrExpression)Expr_29_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_30_Var);
		final EList<? extends EObject> Expr_30_list = ExclusiveOrExpression_30_Var.getExpr();
		Assert.assertNotNull(Expr_30_list);
		Assert.assertEquals(1, Expr_30_list.size());
		final AndExpression AndExpression_31_Var = (AndExpression)Expr_30_list.get(0);
		Assert.assertNotNull(AndExpression_31_Var);
		final EList<? extends EObject> Expr_31_list = AndExpression_31_Var.getExpr();
		Assert.assertNotNull(Expr_31_list);
		Assert.assertEquals(1, Expr_31_list.size());
		final EqualityExpression EqualityExpression_32_Var = (EqualityExpression)Expr_31_list.get(0);
		Assert.assertNotNull(EqualityExpression_32_Var);
		final EList<? extends EObject> Expr_32_list = EqualityExpression_32_Var.getExpr();
		Assert.assertNotNull(Expr_32_list);
		Assert.assertEquals(1, Expr_32_list.size());
		final RelationalExpression RelationalExpression_33_Var = (RelationalExpression)Expr_32_list.get(0);
		Assert.assertNotNull(RelationalExpression_33_Var);
		final EList<? extends EObject> Expr_33_list = RelationalExpression_33_Var.getExpr();
		Assert.assertNotNull(Expr_33_list);
		Assert.assertEquals(1, Expr_33_list.size());
		final ShiftExpression ShiftExpression_34_Var = (ShiftExpression)Expr_33_list.get(0);
		Assert.assertNotNull(ShiftExpression_34_Var);
		final EList<? extends EObject> Expr_34_list = ShiftExpression_34_Var.getExpr();
		Assert.assertNotNull(Expr_34_list);
		Assert.assertEquals(1, Expr_34_list.size());
		final AdditiveExpression AdditiveExpression_35_Var = (AdditiveExpression)Expr_34_list.get(0);
		Assert.assertNotNull(AdditiveExpression_35_Var);
		final EList<? extends EObject> Expr_35_list = AdditiveExpression_35_Var.getExpr();
		Assert.assertNotNull(Expr_35_list);
		Assert.assertEquals(1, Expr_35_list.size());
		final MultiplicativeExpression MultiplicativeExpression_36_Var = (MultiplicativeExpression)Expr_35_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_36_Var);
		final EList<? extends EObject> Expr_36_list = MultiplicativeExpression_36_Var.getExpr();
		Assert.assertNotNull(Expr_36_list);
		Assert.assertEquals(1, Expr_36_list.size());
		final CastExpression CastExpression_37_Var = (CastExpression)Expr_36_list.get(0);
		Assert.assertNotNull(CastExpression_37_Var);
		final UnaryExpression UnaryExpression_38_Var = (UnaryExpression)CastExpression_37_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_38_Var);
		final PostfixExpression PostfixExpression_39_Var = (PostfixExpression)UnaryExpression_38_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_39_Var);
		final EList<? extends EObject> Expr_39_list = PostfixExpression_39_Var.getExpr();
		Assert.assertNotNull(Expr_39_list);
		Assert.assertEquals(1, Expr_39_list.size());
		final PrimaryExpression PrimaryExpression_40_Var = (PrimaryExpression)Expr_39_list.get(0);
		Assert.assertNotNull(PrimaryExpression_40_Var);
		final Constant Constant_41_Var = (Constant)PrimaryExpression_40_Var.getConst();
		Assert.assertNotNull(Constant_41_Var);
		Assert.assertEquals("250", Constant_41_Var.getDec());
		final EList<? extends EObject> InitDeclaratorList_41_list = Declaration_3_Var.getInitDeclaratorList();
		Assert.assertNotNull(InitDeclaratorList_41_list);
		Assert.assertEquals(1, InitDeclaratorList_41_list.size());
		final InitDeclaratorList InitDeclaratorList_42_Var = (InitDeclaratorList)InitDeclaratorList_41_list.get(0);
		Assert.assertNotNull(InitDeclaratorList_42_Var);
		final EList<? extends EObject> InitDeclarator_42_list = InitDeclaratorList_42_Var.getInitDeclarator();
		Assert.assertNotNull(InitDeclarator_42_list);
		Assert.assertEquals(1, InitDeclarator_42_list.size());
		final InitDeclarator InitDeclarator_43_Var = (InitDeclarator)InitDeclarator_42_list.get(0);
		Assert.assertNotNull(InitDeclarator_43_Var);
		final Declarator Declarator_44_Var = (Declarator)InitDeclarator_43_Var.getDeclarator();
		Assert.assertNotNull(Declarator_44_Var);
		final DirectDeclarator DirectDeclarator_45_Var = (DirectDeclarator)Declarator_44_Var.getDeclarator();
		Assert.assertNotNull(DirectDeclarator_45_Var);
		Assert.assertEquals("employee", DirectDeclarator_45_Var.getId());
		final ExternalDeclaration ExternalDeclaration_46_Var = (ExternalDeclaration)External_1_list.get(1);
		Assert.assertNotNull(ExternalDeclaration_46_Var);
		final Declaration Declaration_47_Var = (Declaration)ExternalDeclaration_46_Var.getDeclaration();
		Assert.assertNotNull(Declaration_47_Var);
		final DeclarationSpecifiers DeclarationSpecifiers_48_Var = (DeclarationSpecifiers)Declaration_47_Var.getSpecifiers();
		Assert.assertNotNull(DeclarationSpecifiers_48_Var);
		final EList<? extends EObject> DeclarationSpecifier_48_list = DeclarationSpecifiers_48_Var.getDeclarationSpecifier();
		Assert.assertNotNull(DeclarationSpecifier_48_list);
		Assert.assertEquals(1, DeclarationSpecifier_48_list.size());
		final TypeSpecifier TypeSpecifier_49_Var = (TypeSpecifier)DeclarationSpecifier_48_list.get(0);
		Assert.assertNotNull(TypeSpecifier_49_Var);
		final StructOrUnionSpecifier StructOrUnionSpecifier_50_Var = (StructOrUnionSpecifier)TypeSpecifier_49_Var.getSpecifier();
		Assert.assertNotNull(StructOrUnionSpecifier_50_Var);
		final StructOrUnion StructOrUnion_51_Var = (StructOrUnion)StructOrUnionSpecifier_50_Var.getType();
		Assert.assertNotNull(StructOrUnion_51_Var);
		Assert.assertEquals("struct", StructOrUnion_51_Var.getName());
		Assert.assertEquals("empStruct", StructOrUnionSpecifier_50_Var.getId());
		final EList<? extends EObject> InitDeclaratorList_51_list = Declaration_47_Var.getInitDeclaratorList();
		Assert.assertNotNull(InitDeclaratorList_51_list);
		Assert.assertEquals(1, InitDeclaratorList_51_list.size());
		final InitDeclaratorList InitDeclaratorList_52_Var = (InitDeclaratorList)InitDeclaratorList_51_list.get(0);
		Assert.assertNotNull(InitDeclaratorList_52_Var);
		final EList<? extends EObject> InitDeclarator_52_list = InitDeclaratorList_52_Var.getInitDeclarator();
		Assert.assertNotNull(InitDeclarator_52_list);
		Assert.assertEquals(1, InitDeclarator_52_list.size());
		final InitDeclarator InitDeclarator_53_Var = (InitDeclarator)InitDeclarator_52_list.get(0);
		Assert.assertNotNull(InitDeclarator_53_Var);
		final Declarator Declarator_54_Var = (Declarator)InitDeclarator_53_Var.getDeclarator();
		Assert.assertNotNull(Declarator_54_Var);
		final DirectDeclarator DirectDeclarator_55_Var = (DirectDeclarator)Declarator_54_Var.getDeclarator();
		Assert.assertNotNull(DirectDeclarator_55_Var);
		Assert.assertEquals("joe", DirectDeclarator_55_Var.getId());
		final Initializer Initializer_56_Var = (Initializer)InitDeclarator_53_Var.getInitializer();
		Assert.assertNotNull(Initializer_56_Var);
		final InitializerList InitializerList_57_Var = (InitializerList)Initializer_56_Var.getList();
		Assert.assertNotNull(InitializerList_57_Var);
		final EList<? extends EObject> Initializer_57_list = InitializerList_57_Var.getInitializer();
		Assert.assertNotNull(Initializer_57_list);
		Assert.assertEquals(2, Initializer_57_list.size());
		final Initializer Initializer_58_Var = (Initializer)Initializer_57_list.get(0);
		Assert.assertNotNull(Initializer_58_Var);
		final AssignmentExpression AssignmentExpression_59_Var = (AssignmentExpression)Initializer_58_Var.getExpr();
		Assert.assertNotNull(AssignmentExpression_59_Var);
		final ConditionalExpression ConditionalExpression_60_Var = (ConditionalExpression)AssignmentExpression_59_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_60_Var);
		final LogicalOrExpression LogicalOrExpression_61_Var = (LogicalOrExpression)ConditionalExpression_60_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_61_Var);
		final EList<? extends EObject> Expr_61_list = LogicalOrExpression_61_Var.getExpr();
		Assert.assertNotNull(Expr_61_list);
		Assert.assertEquals(1, Expr_61_list.size());
		final LogicalAndExpression LogicalAndExpression_62_Var = (LogicalAndExpression)Expr_61_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_62_Var);
		final EList<? extends EObject> Expr_62_list = LogicalAndExpression_62_Var.getExpr();
		Assert.assertNotNull(Expr_62_list);
		Assert.assertEquals(1, Expr_62_list.size());
		final InclusiveOrExpression InclusiveOrExpression_63_Var = (InclusiveOrExpression)Expr_62_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_63_Var);
		final EList<? extends EObject> Expr_63_list = InclusiveOrExpression_63_Var.getExpr();
		Assert.assertNotNull(Expr_63_list);
		Assert.assertEquals(1, Expr_63_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_64_Var = (ExclusiveOrExpression)Expr_63_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_64_Var);
		final EList<? extends EObject> Expr_64_list = ExclusiveOrExpression_64_Var.getExpr();
		Assert.assertNotNull(Expr_64_list);
		Assert.assertEquals(1, Expr_64_list.size());
		final AndExpression AndExpression_65_Var = (AndExpression)Expr_64_list.get(0);
		Assert.assertNotNull(AndExpression_65_Var);
		final EList<? extends EObject> Expr_65_list = AndExpression_65_Var.getExpr();
		Assert.assertNotNull(Expr_65_list);
		Assert.assertEquals(1, Expr_65_list.size());
		final EqualityExpression EqualityExpression_66_Var = (EqualityExpression)Expr_65_list.get(0);
		Assert.assertNotNull(EqualityExpression_66_Var);
		final EList<? extends EObject> Expr_66_list = EqualityExpression_66_Var.getExpr();
		Assert.assertNotNull(Expr_66_list);
		Assert.assertEquals(1, Expr_66_list.size());
		final RelationalExpression RelationalExpression_67_Var = (RelationalExpression)Expr_66_list.get(0);
		Assert.assertNotNull(RelationalExpression_67_Var);
		final EList<? extends EObject> Expr_67_list = RelationalExpression_67_Var.getExpr();
		Assert.assertNotNull(Expr_67_list);
		Assert.assertEquals(1, Expr_67_list.size());
		final ShiftExpression ShiftExpression_68_Var = (ShiftExpression)Expr_67_list.get(0);
		Assert.assertNotNull(ShiftExpression_68_Var);
		final EList<? extends EObject> Expr_68_list = ShiftExpression_68_Var.getExpr();
		Assert.assertNotNull(Expr_68_list);
		Assert.assertEquals(1, Expr_68_list.size());
		final AdditiveExpression AdditiveExpression_69_Var = (AdditiveExpression)Expr_68_list.get(0);
		Assert.assertNotNull(AdditiveExpression_69_Var);
		final EList<? extends EObject> Expr_69_list = AdditiveExpression_69_Var.getExpr();
		Assert.assertNotNull(Expr_69_list);
		Assert.assertEquals(1, Expr_69_list.size());
		final MultiplicativeExpression MultiplicativeExpression_70_Var = (MultiplicativeExpression)Expr_69_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_70_Var);
		final EList<? extends EObject> Expr_70_list = MultiplicativeExpression_70_Var.getExpr();
		Assert.assertNotNull(Expr_70_list);
		Assert.assertEquals(1, Expr_70_list.size());
		final CastExpression CastExpression_71_Var = (CastExpression)Expr_70_list.get(0);
		Assert.assertNotNull(CastExpression_71_Var);
		final UnaryExpression UnaryExpression_72_Var = (UnaryExpression)CastExpression_71_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_72_Var);
		final PostfixExpression PostfixExpression_73_Var = (PostfixExpression)UnaryExpression_72_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_73_Var);
		final EList<? extends EObject> Expr_73_list = PostfixExpression_73_Var.getExpr();
		Assert.assertNotNull(Expr_73_list);
		Assert.assertEquals(1, Expr_73_list.size());
		final PrimaryExpression PrimaryExpression_74_Var = (PrimaryExpression)Expr_73_list.get(0);
		Assert.assertNotNull(PrimaryExpression_74_Var);
		final Constant Constant_75_Var = (Constant)PrimaryExpression_74_Var.getConst();
		Assert.assertNotNull(Constant_75_Var);
		Assert.assertEquals("0x007", Constant_75_Var.getHex());
		final Initializer Initializer_76_Var = (Initializer)Initializer_57_list.get(1);
		Assert.assertNotNull(Initializer_76_Var);
		final AssignmentExpression AssignmentExpression_77_Var = (AssignmentExpression)Initializer_76_Var.getExpr();
		Assert.assertNotNull(AssignmentExpression_77_Var);
		final ConditionalExpression ConditionalExpression_78_Var = (ConditionalExpression)AssignmentExpression_77_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_78_Var);
		final LogicalOrExpression LogicalOrExpression_79_Var = (LogicalOrExpression)ConditionalExpression_78_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_79_Var);
		final EList<? extends EObject> Expr_79_list = LogicalOrExpression_79_Var.getExpr();
		Assert.assertNotNull(Expr_79_list);
		Assert.assertEquals(1, Expr_79_list.size());
		final LogicalAndExpression LogicalAndExpression_80_Var = (LogicalAndExpression)Expr_79_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_80_Var);
		final EList<? extends EObject> Expr_80_list = LogicalAndExpression_80_Var.getExpr();
		Assert.assertNotNull(Expr_80_list);
		Assert.assertEquals(1, Expr_80_list.size());
		final InclusiveOrExpression InclusiveOrExpression_81_Var = (InclusiveOrExpression)Expr_80_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_81_Var);
		final EList<? extends EObject> Expr_81_list = InclusiveOrExpression_81_Var.getExpr();
		Assert.assertNotNull(Expr_81_list);
		Assert.assertEquals(1, Expr_81_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_82_Var = (ExclusiveOrExpression)Expr_81_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_82_Var);
		final EList<? extends EObject> Expr_82_list = ExclusiveOrExpression_82_Var.getExpr();
		Assert.assertNotNull(Expr_82_list);
		Assert.assertEquals(1, Expr_82_list.size());
		final AndExpression AndExpression_83_Var = (AndExpression)Expr_82_list.get(0);
		Assert.assertNotNull(AndExpression_83_Var);
		final EList<? extends EObject> Expr_83_list = AndExpression_83_Var.getExpr();
		Assert.assertNotNull(Expr_83_list);
		Assert.assertEquals(1, Expr_83_list.size());
		final EqualityExpression EqualityExpression_84_Var = (EqualityExpression)Expr_83_list.get(0);
		Assert.assertNotNull(EqualityExpression_84_Var);
		final EList<? extends EObject> Expr_84_list = EqualityExpression_84_Var.getExpr();
		Assert.assertNotNull(Expr_84_list);
		Assert.assertEquals(1, Expr_84_list.size());
		final RelationalExpression RelationalExpression_85_Var = (RelationalExpression)Expr_84_list.get(0);
		Assert.assertNotNull(RelationalExpression_85_Var);
		final EList<? extends EObject> Expr_85_list = RelationalExpression_85_Var.getExpr();
		Assert.assertNotNull(Expr_85_list);
		Assert.assertEquals(1, Expr_85_list.size());
		final ShiftExpression ShiftExpression_86_Var = (ShiftExpression)Expr_85_list.get(0);
		Assert.assertNotNull(ShiftExpression_86_Var);
		final EList<? extends EObject> Expr_86_list = ShiftExpression_86_Var.getExpr();
		Assert.assertNotNull(Expr_86_list);
		Assert.assertEquals(1, Expr_86_list.size());
		final AdditiveExpression AdditiveExpression_87_Var = (AdditiveExpression)Expr_86_list.get(0);
		Assert.assertNotNull(AdditiveExpression_87_Var);
		final EList<? extends EObject> Expr_87_list = AdditiveExpression_87_Var.getExpr();
		Assert.assertNotNull(Expr_87_list);
		Assert.assertEquals(1, Expr_87_list.size());
		final MultiplicativeExpression MultiplicativeExpression_88_Var = (MultiplicativeExpression)Expr_87_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_88_Var);
		final EList<? extends EObject> Expr_88_list = MultiplicativeExpression_88_Var.getExpr();
		Assert.assertNotNull(Expr_88_list);
		Assert.assertEquals(1, Expr_88_list.size());
		final CastExpression CastExpression_89_Var = (CastExpression)Expr_88_list.get(0);
		Assert.assertNotNull(CastExpression_89_Var);
		final UnaryExpression UnaryExpression_90_Var = (UnaryExpression)CastExpression_89_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_90_Var);
		final PostfixExpression PostfixExpression_91_Var = (PostfixExpression)UnaryExpression_90_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_91_Var);
		final EList<? extends EObject> Expr_91_list = PostfixExpression_91_Var.getExpr();
		Assert.assertNotNull(Expr_91_list);
		Assert.assertEquals(1, Expr_91_list.size());
		final PrimaryExpression PrimaryExpression_92_Var = (PrimaryExpression)Expr_91_list.get(0);
		Assert.assertNotNull(PrimaryExpression_92_Var);
		final Constant Constant_93_Var = (Constant)PrimaryExpression_92_Var.getConst();
		Assert.assertNotNull(Constant_93_Var);
		Assert.assertEquals("\"Joe Nobody\"", Constant_93_Var.getStr());
		final ExternalDeclaration ExternalDeclaration_94_Var = (ExternalDeclaration)External_1_list.get(2);
		Assert.assertNotNull(ExternalDeclaration_94_Var);
		final Declaration Declaration_95_Var = (Declaration)ExternalDeclaration_94_Var.getDeclaration();
		Assert.assertNotNull(Declaration_95_Var);
		final DeclarationSpecifiers DeclarationSpecifiers_96_Var = (DeclarationSpecifiers)Declaration_95_Var.getSpecifiers();
		Assert.assertNotNull(DeclarationSpecifiers_96_Var);
		final EList<? extends EObject> DeclarationSpecifier_96_list = DeclarationSpecifiers_96_Var.getDeclarationSpecifier();
		Assert.assertNotNull(DeclarationSpecifier_96_list);
		Assert.assertEquals(1, DeclarationSpecifier_96_list.size());
		final TypeSpecifier TypeSpecifier_97_Var = (TypeSpecifier)DeclarationSpecifier_96_list.get(0);
		Assert.assertNotNull(TypeSpecifier_97_Var);
		final TypedefName TypedefName_98_Var = (TypedefName)TypeSpecifier_97_Var.getType();
		Assert.assertNotNull(TypedefName_98_Var);
		Assert.assertEquals("employee", TypedefName_98_Var.getId());
		final EList<? extends EObject> InitDeclaratorList_98_list = Declaration_95_Var.getInitDeclaratorList();
		Assert.assertNotNull(InitDeclaratorList_98_list);
		Assert.assertEquals(1, InitDeclaratorList_98_list.size());
		final InitDeclaratorList InitDeclaratorList_99_Var = (InitDeclaratorList)InitDeclaratorList_98_list.get(0);
		Assert.assertNotNull(InitDeclaratorList_99_Var);
		final EList<? extends EObject> InitDeclarator_99_list = InitDeclaratorList_99_Var.getInitDeclarator();
		Assert.assertNotNull(InitDeclarator_99_list);
		Assert.assertEquals(1, InitDeclarator_99_list.size());
		final InitDeclarator InitDeclarator_100_Var = (InitDeclarator)InitDeclarator_99_list.get(0);
		Assert.assertNotNull(InitDeclarator_100_Var);
		final Declarator Declarator_101_Var = (Declarator)InitDeclarator_100_Var.getDeclarator();
		Assert.assertNotNull(Declarator_101_Var);
		final DirectDeclarator DirectDeclarator_102_Var = (DirectDeclarator)Declarator_101_Var.getDeclarator();
		Assert.assertNotNull(DirectDeclarator_102_Var);
		Assert.assertEquals("phil", DirectDeclarator_102_Var.getId());
		final Initializer Initializer_103_Var = (Initializer)InitDeclarator_100_Var.getInitializer();
		Assert.assertNotNull(Initializer_103_Var);
		final InitializerList InitializerList_104_Var = (InitializerList)Initializer_103_Var.getList();
		Assert.assertNotNull(InitializerList_104_Var);
		final EList<? extends EObject> Initializer_104_list = InitializerList_104_Var.getInitializer();
		Assert.assertNotNull(Initializer_104_list);
		Assert.assertEquals(2, Initializer_104_list.size());
		final Initializer Initializer_105_Var = (Initializer)Initializer_104_list.get(0);
		Assert.assertNotNull(Initializer_105_Var);
		final AssignmentExpression AssignmentExpression_106_Var = (AssignmentExpression)Initializer_105_Var.getExpr();
		Assert.assertNotNull(AssignmentExpression_106_Var);
		final ConditionalExpression ConditionalExpression_107_Var = (ConditionalExpression)AssignmentExpression_106_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_107_Var);
		final LogicalOrExpression LogicalOrExpression_108_Var = (LogicalOrExpression)ConditionalExpression_107_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_108_Var);
		final EList<? extends EObject> Expr_108_list = LogicalOrExpression_108_Var.getExpr();
		Assert.assertNotNull(Expr_108_list);
		Assert.assertEquals(1, Expr_108_list.size());
		final LogicalAndExpression LogicalAndExpression_109_Var = (LogicalAndExpression)Expr_108_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_109_Var);
		final EList<? extends EObject> Expr_109_list = LogicalAndExpression_109_Var.getExpr();
		Assert.assertNotNull(Expr_109_list);
		Assert.assertEquals(1, Expr_109_list.size());
		final InclusiveOrExpression InclusiveOrExpression_110_Var = (InclusiveOrExpression)Expr_109_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_110_Var);
		final EList<? extends EObject> Expr_110_list = InclusiveOrExpression_110_Var.getExpr();
		Assert.assertNotNull(Expr_110_list);
		Assert.assertEquals(1, Expr_110_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_111_Var = (ExclusiveOrExpression)Expr_110_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_111_Var);
		final EList<? extends EObject> Expr_111_list = ExclusiveOrExpression_111_Var.getExpr();
		Assert.assertNotNull(Expr_111_list);
		Assert.assertEquals(1, Expr_111_list.size());
		final AndExpression AndExpression_112_Var = (AndExpression)Expr_111_list.get(0);
		Assert.assertNotNull(AndExpression_112_Var);
		final EList<? extends EObject> Expr_112_list = AndExpression_112_Var.getExpr();
		Assert.assertNotNull(Expr_112_list);
		Assert.assertEquals(1, Expr_112_list.size());
		final EqualityExpression EqualityExpression_113_Var = (EqualityExpression)Expr_112_list.get(0);
		Assert.assertNotNull(EqualityExpression_113_Var);
		final EList<? extends EObject> Expr_113_list = EqualityExpression_113_Var.getExpr();
		Assert.assertNotNull(Expr_113_list);
		Assert.assertEquals(1, Expr_113_list.size());
		final RelationalExpression RelationalExpression_114_Var = (RelationalExpression)Expr_113_list.get(0);
		Assert.assertNotNull(RelationalExpression_114_Var);
		final EList<? extends EObject> Expr_114_list = RelationalExpression_114_Var.getExpr();
		Assert.assertNotNull(Expr_114_list);
		Assert.assertEquals(1, Expr_114_list.size());
		final ShiftExpression ShiftExpression_115_Var = (ShiftExpression)Expr_114_list.get(0);
		Assert.assertNotNull(ShiftExpression_115_Var);
		final EList<? extends EObject> Expr_115_list = ShiftExpression_115_Var.getExpr();
		Assert.assertNotNull(Expr_115_list);
		Assert.assertEquals(1, Expr_115_list.size());
		final AdditiveExpression AdditiveExpression_116_Var = (AdditiveExpression)Expr_115_list.get(0);
		Assert.assertNotNull(AdditiveExpression_116_Var);
		final EList<? extends EObject> Expr_116_list = AdditiveExpression_116_Var.getExpr();
		Assert.assertNotNull(Expr_116_list);
		Assert.assertEquals(1, Expr_116_list.size());
		final MultiplicativeExpression MultiplicativeExpression_117_Var = (MultiplicativeExpression)Expr_116_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_117_Var);
		final EList<? extends EObject> Expr_117_list = MultiplicativeExpression_117_Var.getExpr();
		Assert.assertNotNull(Expr_117_list);
		Assert.assertEquals(1, Expr_117_list.size());
		final CastExpression CastExpression_118_Var = (CastExpression)Expr_117_list.get(0);
		Assert.assertNotNull(CastExpression_118_Var);
		final UnaryExpression UnaryExpression_119_Var = (UnaryExpression)CastExpression_118_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_119_Var);
		final PostfixExpression PostfixExpression_120_Var = (PostfixExpression)UnaryExpression_119_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_120_Var);
		final EList<? extends EObject> Expr_120_list = PostfixExpression_120_Var.getExpr();
		Assert.assertNotNull(Expr_120_list);
		Assert.assertEquals(1, Expr_120_list.size());
		final PrimaryExpression PrimaryExpression_121_Var = (PrimaryExpression)Expr_120_list.get(0);
		Assert.assertNotNull(PrimaryExpression_121_Var);
		final Constant Constant_122_Var = (Constant)PrimaryExpression_121_Var.getConst();
		Assert.assertNotNull(Constant_122_Var);
		Assert.assertEquals("0x008", Constant_122_Var.getHex());
		final Initializer Initializer_123_Var = (Initializer)Initializer_104_list.get(1);
		Assert.assertNotNull(Initializer_123_Var);
		final AssignmentExpression AssignmentExpression_124_Var = (AssignmentExpression)Initializer_123_Var.getExpr();
		Assert.assertNotNull(AssignmentExpression_124_Var);
		final ConditionalExpression ConditionalExpression_125_Var = (ConditionalExpression)AssignmentExpression_124_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_125_Var);
		final LogicalOrExpression LogicalOrExpression_126_Var = (LogicalOrExpression)ConditionalExpression_125_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_126_Var);
		final EList<? extends EObject> Expr_126_list = LogicalOrExpression_126_Var.getExpr();
		Assert.assertNotNull(Expr_126_list);
		Assert.assertEquals(1, Expr_126_list.size());
		final LogicalAndExpression LogicalAndExpression_127_Var = (LogicalAndExpression)Expr_126_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_127_Var);
		final EList<? extends EObject> Expr_127_list = LogicalAndExpression_127_Var.getExpr();
		Assert.assertNotNull(Expr_127_list);
		Assert.assertEquals(1, Expr_127_list.size());
		final InclusiveOrExpression InclusiveOrExpression_128_Var = (InclusiveOrExpression)Expr_127_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_128_Var);
		final EList<? extends EObject> Expr_128_list = InclusiveOrExpression_128_Var.getExpr();
		Assert.assertNotNull(Expr_128_list);
		Assert.assertEquals(1, Expr_128_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_129_Var = (ExclusiveOrExpression)Expr_128_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_129_Var);
		final EList<? extends EObject> Expr_129_list = ExclusiveOrExpression_129_Var.getExpr();
		Assert.assertNotNull(Expr_129_list);
		Assert.assertEquals(1, Expr_129_list.size());
		final AndExpression AndExpression_130_Var = (AndExpression)Expr_129_list.get(0);
		Assert.assertNotNull(AndExpression_130_Var);
		final EList<? extends EObject> Expr_130_list = AndExpression_130_Var.getExpr();
		Assert.assertNotNull(Expr_130_list);
		Assert.assertEquals(1, Expr_130_list.size());
		final EqualityExpression EqualityExpression_131_Var = (EqualityExpression)Expr_130_list.get(0);
		Assert.assertNotNull(EqualityExpression_131_Var);
		final EList<? extends EObject> Expr_131_list = EqualityExpression_131_Var.getExpr();
		Assert.assertNotNull(Expr_131_list);
		Assert.assertEquals(1, Expr_131_list.size());
		final RelationalExpression RelationalExpression_132_Var = (RelationalExpression)Expr_131_list.get(0);
		Assert.assertNotNull(RelationalExpression_132_Var);
		final EList<? extends EObject> Expr_132_list = RelationalExpression_132_Var.getExpr();
		Assert.assertNotNull(Expr_132_list);
		Assert.assertEquals(1, Expr_132_list.size());
		final ShiftExpression ShiftExpression_133_Var = (ShiftExpression)Expr_132_list.get(0);
		Assert.assertNotNull(ShiftExpression_133_Var);
		final EList<? extends EObject> Expr_133_list = ShiftExpression_133_Var.getExpr();
		Assert.assertNotNull(Expr_133_list);
		Assert.assertEquals(1, Expr_133_list.size());
		final AdditiveExpression AdditiveExpression_134_Var = (AdditiveExpression)Expr_133_list.get(0);
		Assert.assertNotNull(AdditiveExpression_134_Var);
		final EList<? extends EObject> Expr_134_list = AdditiveExpression_134_Var.getExpr();
		Assert.assertNotNull(Expr_134_list);
		Assert.assertEquals(1, Expr_134_list.size());
		final MultiplicativeExpression MultiplicativeExpression_135_Var = (MultiplicativeExpression)Expr_134_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_135_Var);
		final EList<? extends EObject> Expr_135_list = MultiplicativeExpression_135_Var.getExpr();
		Assert.assertNotNull(Expr_135_list);
		Assert.assertEquals(1, Expr_135_list.size());
		final CastExpression CastExpression_136_Var = (CastExpression)Expr_135_list.get(0);
		Assert.assertNotNull(CastExpression_136_Var);
		final UnaryExpression UnaryExpression_137_Var = (UnaryExpression)CastExpression_136_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_137_Var);
		final PostfixExpression PostfixExpression_138_Var = (PostfixExpression)UnaryExpression_137_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_138_Var);
		final EList<? extends EObject> Expr_138_list = PostfixExpression_138_Var.getExpr();
		Assert.assertNotNull(Expr_138_list);
		Assert.assertEquals(1, Expr_138_list.size());
		final PrimaryExpression PrimaryExpression_139_Var = (PrimaryExpression)Expr_138_list.get(0);
		Assert.assertNotNull(PrimaryExpression_139_Var);
		final Constant Constant_140_Var = (Constant)PrimaryExpression_139_Var.getConst();
		Assert.assertNotNull(Constant_140_Var);
		Assert.assertEquals("\"Phil Morrison\"", Constant_140_Var.getStr());
		final ExternalDeclaration ExternalDeclaration_141_Var = (ExternalDeclaration)External_1_list.get(3);
		Assert.assertNotNull(ExternalDeclaration_141_Var);
		final FunctionDefHead FunctionDefHead_142_Var = (FunctionDefHead)ExternalDeclaration_141_Var.getFunctiondefHead();
		Assert.assertNotNull(FunctionDefHead_142_Var);
		final DeclarationSpecifiers DeclarationSpecifiers_143_Var = (DeclarationSpecifiers)FunctionDefHead_142_Var.getFunDeclSpecifiers();
		Assert.assertNotNull(DeclarationSpecifiers_143_Var);
		final EList<? extends EObject> DeclarationSpecifier_143_list = DeclarationSpecifiers_143_Var.getDeclarationSpecifier();
		Assert.assertNotNull(DeclarationSpecifier_143_list);
		Assert.assertEquals(1, DeclarationSpecifier_143_list.size());
		final TypeSpecifier TypeSpecifier_144_Var = (TypeSpecifier)DeclarationSpecifier_143_list.get(0);
		Assert.assertNotNull(TypeSpecifier_144_Var);
		Assert.assertEquals("void", TypeSpecifier_144_Var.getName());
		final Declarator Declarator_145_Var = (Declarator)FunctionDefHead_142_Var.getFunDeclarator();
		Assert.assertNotNull(Declarator_145_Var);
		final DirectDeclarator DirectDeclarator_146_Var = (DirectDeclarator)Declarator_145_Var.getDeclarator();
		Assert.assertNotNull(DirectDeclarator_146_Var);
		Assert.assertEquals("print", DirectDeclarator_146_Var.getId());
		final EList<? extends EObject> DeclaratorSuffix_146_list = DirectDeclarator_146_Var.getDeclaratorSuffix();
		Assert.assertNotNull(DeclaratorSuffix_146_list);
		Assert.assertEquals(1, DeclaratorSuffix_146_list.size());
		final DeclaratorSuffix DeclaratorSuffix_147_Var = (DeclaratorSuffix)DeclaratorSuffix_146_list.get(0);
		Assert.assertNotNull(DeclaratorSuffix_147_Var);
		final DirectDeclaratorLastSuffix DirectDeclaratorLastSuffix_148_Var = (DirectDeclaratorLastSuffix)DeclaratorSuffix_147_Var.getLastSuffix();
		Assert.assertNotNull(DirectDeclaratorLastSuffix_148_Var);
		final EList<? extends EObject> ParameterTypeList_148_list = DirectDeclaratorLastSuffix_148_Var.getParameterTypeList();
		Assert.assertNotNull(ParameterTypeList_148_list);
		Assert.assertEquals(1, ParameterTypeList_148_list.size());
		final ParameterTypeList ParameterTypeList_149_Var = (ParameterTypeList)ParameterTypeList_148_list.get(0);
		Assert.assertNotNull(ParameterTypeList_149_Var);
		final ParameterList ParameterList_150_Var = (ParameterList)ParameterTypeList_149_Var.getList();
		Assert.assertNotNull(ParameterList_150_Var);
		final EList<? extends EObject> ParameterDeclaration_150_list = ParameterList_150_Var.getParameterDeclaration();
		Assert.assertNotNull(ParameterDeclaration_150_list);
		Assert.assertEquals(1, ParameterDeclaration_150_list.size());
		final ParameterDeclaration ParameterDeclaration_151_Var = (ParameterDeclaration)ParameterDeclaration_150_list.get(0);
		Assert.assertNotNull(ParameterDeclaration_151_Var);
		final DeclarationSpecifiers DeclarationSpecifiers_152_Var = (DeclarationSpecifiers)ParameterDeclaration_151_Var.getDeclSpecifiers();
		Assert.assertNotNull(DeclarationSpecifiers_152_Var);
		final EList<? extends EObject> DeclarationSpecifier_152_list = DeclarationSpecifiers_152_Var.getDeclarationSpecifier();
		Assert.assertNotNull(DeclarationSpecifier_152_list);
		Assert.assertEquals(1, DeclarationSpecifier_152_list.size());
		final TypeSpecifier TypeSpecifier_153_Var = (TypeSpecifier)DeclarationSpecifier_152_list.get(0);
		Assert.assertNotNull(TypeSpecifier_153_Var);
		final TypedefName TypedefName_154_Var = (TypedefName)TypeSpecifier_153_Var.getType();
		Assert.assertNotNull(TypedefName_154_Var);
		Assert.assertEquals("employee", TypedefName_154_Var.getId());
		final Declarator Declarator_155_Var = (Declarator)ParameterDeclaration_151_Var.getDeclarator();
		Assert.assertNotNull(Declarator_155_Var);
		final DirectDeclarator DirectDeclarator_156_Var = (DirectDeclarator)Declarator_155_Var.getDeclarator();
		Assert.assertNotNull(DirectDeclarator_156_Var);
		Assert.assertEquals("emp", DirectDeclarator_156_Var.getId());
		final Pointer Pointer_157_Var = (Pointer)Declarator_155_Var.getPointer();
		Assert.assertNotNull(Pointer_157_Var);
		Assert.assertEquals("[*]", Pointer_157_Var.getStar().toString());
		final FunctionDefinition FunctionDefinition_158_Var = (FunctionDefinition)ExternalDeclaration_141_Var.getFunctionDefinition();
		Assert.assertNotNull(FunctionDefinition_158_Var);
		final BodyStatement BodyStatement_159_Var = (BodyStatement)FunctionDefinition_158_Var.getBody();
		Assert.assertNotNull(BodyStatement_159_Var);
		final EList<? extends EObject> BlockList_159_list = BodyStatement_159_Var.getBlockList();
		Assert.assertNotNull(BlockList_159_list);
		Assert.assertEquals(1, BlockList_159_list.size());
		final BlockList BlockList_160_Var = (BlockList)BlockList_159_list.get(0);
		Assert.assertNotNull(BlockList_160_Var);
		final EList<? extends EObject> Statement_160_list = BlockList_160_Var.getStatement();
		Assert.assertNotNull(Statement_160_list);
		Assert.assertEquals(2, Statement_160_list.size());
		final Statement Statement_161_Var = (Statement)Statement_160_list.get(0);
		Assert.assertNotNull(Statement_161_Var);
		final ExpressionStatement ExpressionStatement_162_Var = (ExpressionStatement)Statement_161_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_162_Var);
		final Expression Expression_163_Var = (Expression)ExpressionStatement_162_Var.getExpression();
		Assert.assertNotNull(Expression_163_Var);
		final EList<? extends EObject> ExprExpr_163_list = Expression_163_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_163_list);
		Assert.assertEquals(1, ExprExpr_163_list.size());
		final AssignmentExpression AssignmentExpression_164_Var = (AssignmentExpression)ExprExpr_163_list.get(0);
		Assert.assertNotNull(AssignmentExpression_164_Var);
		final ConditionalExpression ConditionalExpression_165_Var = (ConditionalExpression)AssignmentExpression_164_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_165_Var);
		final LogicalOrExpression LogicalOrExpression_166_Var = (LogicalOrExpression)ConditionalExpression_165_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_166_Var);
		final EList<? extends EObject> Expr_166_list = LogicalOrExpression_166_Var.getExpr();
		Assert.assertNotNull(Expr_166_list);
		Assert.assertEquals(1, Expr_166_list.size());
		final LogicalAndExpression LogicalAndExpression_167_Var = (LogicalAndExpression)Expr_166_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_167_Var);
		final EList<? extends EObject> Expr_167_list = LogicalAndExpression_167_Var.getExpr();
		Assert.assertNotNull(Expr_167_list);
		Assert.assertEquals(1, Expr_167_list.size());
		final InclusiveOrExpression InclusiveOrExpression_168_Var = (InclusiveOrExpression)Expr_167_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_168_Var);
		final EList<? extends EObject> Expr_168_list = InclusiveOrExpression_168_Var.getExpr();
		Assert.assertNotNull(Expr_168_list);
		Assert.assertEquals(1, Expr_168_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_169_Var = (ExclusiveOrExpression)Expr_168_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_169_Var);
		final EList<? extends EObject> Expr_169_list = ExclusiveOrExpression_169_Var.getExpr();
		Assert.assertNotNull(Expr_169_list);
		Assert.assertEquals(1, Expr_169_list.size());
		final AndExpression AndExpression_170_Var = (AndExpression)Expr_169_list.get(0);
		Assert.assertNotNull(AndExpression_170_Var);
		final EList<? extends EObject> Expr_170_list = AndExpression_170_Var.getExpr();
		Assert.assertNotNull(Expr_170_list);
		Assert.assertEquals(1, Expr_170_list.size());
		final EqualityExpression EqualityExpression_171_Var = (EqualityExpression)Expr_170_list.get(0);
		Assert.assertNotNull(EqualityExpression_171_Var);
		final EList<? extends EObject> Expr_171_list = EqualityExpression_171_Var.getExpr();
		Assert.assertNotNull(Expr_171_list);
		Assert.assertEquals(1, Expr_171_list.size());
		final RelationalExpression RelationalExpression_172_Var = (RelationalExpression)Expr_171_list.get(0);
		Assert.assertNotNull(RelationalExpression_172_Var);
		final EList<? extends EObject> Expr_172_list = RelationalExpression_172_Var.getExpr();
		Assert.assertNotNull(Expr_172_list);
		Assert.assertEquals(1, Expr_172_list.size());
		final ShiftExpression ShiftExpression_173_Var = (ShiftExpression)Expr_172_list.get(0);
		Assert.assertNotNull(ShiftExpression_173_Var);
		final EList<? extends EObject> Expr_173_list = ShiftExpression_173_Var.getExpr();
		Assert.assertNotNull(Expr_173_list);
		Assert.assertEquals(1, Expr_173_list.size());
		final AdditiveExpression AdditiveExpression_174_Var = (AdditiveExpression)Expr_173_list.get(0);
		Assert.assertNotNull(AdditiveExpression_174_Var);
		final EList<? extends EObject> Expr_174_list = AdditiveExpression_174_Var.getExpr();
		Assert.assertNotNull(Expr_174_list);
		Assert.assertEquals(1, Expr_174_list.size());
		final MultiplicativeExpression MultiplicativeExpression_175_Var = (MultiplicativeExpression)Expr_174_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_175_Var);
		final EList<? extends EObject> Expr_175_list = MultiplicativeExpression_175_Var.getExpr();
		Assert.assertNotNull(Expr_175_list);
		Assert.assertEquals(1, Expr_175_list.size());
		final CastExpression CastExpression_176_Var = (CastExpression)Expr_175_list.get(0);
		Assert.assertNotNull(CastExpression_176_Var);
		final UnaryExpression UnaryExpression_177_Var = (UnaryExpression)CastExpression_176_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_177_Var);
		final PostfixExpression PostfixExpression_178_Var = (PostfixExpression)UnaryExpression_177_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_178_Var);
		final EList<? extends EObject> Expr_178_list = PostfixExpression_178_Var.getExpr();
		Assert.assertNotNull(Expr_178_list);
		Assert.assertEquals(1, Expr_178_list.size());
		final PrimaryExpression PrimaryExpression_179_Var = (PrimaryExpression)Expr_178_list.get(0);
		Assert.assertNotNull(PrimaryExpression_179_Var);
		Assert.assertEquals("printf", PrimaryExpression_179_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_179_list = PostfixExpression_178_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_179_list);
		Assert.assertEquals(1, ArgumentExpressionList_179_list.size());
		final ArgumentExpressionList ArgumentExpressionList_180_Var = (ArgumentExpressionList)ArgumentExpressionList_179_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_180_Var);
		final EList<? extends EObject> Expr_180_list = ArgumentExpressionList_180_Var.getExpr();
		Assert.assertNotNull(Expr_180_list);
		Assert.assertEquals(2, Expr_180_list.size());
		final AssignmentExpression AssignmentExpression_181_Var = (AssignmentExpression)Expr_180_list.get(0);
		Assert.assertNotNull(AssignmentExpression_181_Var);
		final ConditionalExpression ConditionalExpression_182_Var = (ConditionalExpression)AssignmentExpression_181_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_182_Var);
		final LogicalOrExpression LogicalOrExpression_183_Var = (LogicalOrExpression)ConditionalExpression_182_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_183_Var);
		final EList<? extends EObject> Expr_183_list = LogicalOrExpression_183_Var.getExpr();
		Assert.assertNotNull(Expr_183_list);
		Assert.assertEquals(1, Expr_183_list.size());
		final LogicalAndExpression LogicalAndExpression_184_Var = (LogicalAndExpression)Expr_183_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_184_Var);
		final EList<? extends EObject> Expr_184_list = LogicalAndExpression_184_Var.getExpr();
		Assert.assertNotNull(Expr_184_list);
		Assert.assertEquals(1, Expr_184_list.size());
		final InclusiveOrExpression InclusiveOrExpression_185_Var = (InclusiveOrExpression)Expr_184_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_185_Var);
		final EList<? extends EObject> Expr_185_list = InclusiveOrExpression_185_Var.getExpr();
		Assert.assertNotNull(Expr_185_list);
		Assert.assertEquals(1, Expr_185_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_186_Var = (ExclusiveOrExpression)Expr_185_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_186_Var);
		final EList<? extends EObject> Expr_186_list = ExclusiveOrExpression_186_Var.getExpr();
		Assert.assertNotNull(Expr_186_list);
		Assert.assertEquals(1, Expr_186_list.size());
		final AndExpression AndExpression_187_Var = (AndExpression)Expr_186_list.get(0);
		Assert.assertNotNull(AndExpression_187_Var);
		final EList<? extends EObject> Expr_187_list = AndExpression_187_Var.getExpr();
		Assert.assertNotNull(Expr_187_list);
		Assert.assertEquals(1, Expr_187_list.size());
		final EqualityExpression EqualityExpression_188_Var = (EqualityExpression)Expr_187_list.get(0);
		Assert.assertNotNull(EqualityExpression_188_Var);
		final EList<? extends EObject> Expr_188_list = EqualityExpression_188_Var.getExpr();
		Assert.assertNotNull(Expr_188_list);
		Assert.assertEquals(1, Expr_188_list.size());
		final RelationalExpression RelationalExpression_189_Var = (RelationalExpression)Expr_188_list.get(0);
		Assert.assertNotNull(RelationalExpression_189_Var);
		final EList<? extends EObject> Expr_189_list = RelationalExpression_189_Var.getExpr();
		Assert.assertNotNull(Expr_189_list);
		Assert.assertEquals(1, Expr_189_list.size());
		final ShiftExpression ShiftExpression_190_Var = (ShiftExpression)Expr_189_list.get(0);
		Assert.assertNotNull(ShiftExpression_190_Var);
		final EList<? extends EObject> Expr_190_list = ShiftExpression_190_Var.getExpr();
		Assert.assertNotNull(Expr_190_list);
		Assert.assertEquals(1, Expr_190_list.size());
		final AdditiveExpression AdditiveExpression_191_Var = (AdditiveExpression)Expr_190_list.get(0);
		Assert.assertNotNull(AdditiveExpression_191_Var);
		final EList<? extends EObject> Expr_191_list = AdditiveExpression_191_Var.getExpr();
		Assert.assertNotNull(Expr_191_list);
		Assert.assertEquals(1, Expr_191_list.size());
		final MultiplicativeExpression MultiplicativeExpression_192_Var = (MultiplicativeExpression)Expr_191_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_192_Var);
		final EList<? extends EObject> Expr_192_list = MultiplicativeExpression_192_Var.getExpr();
		Assert.assertNotNull(Expr_192_list);
		Assert.assertEquals(1, Expr_192_list.size());
		final CastExpression CastExpression_193_Var = (CastExpression)Expr_192_list.get(0);
		Assert.assertNotNull(CastExpression_193_Var);
		final UnaryExpression UnaryExpression_194_Var = (UnaryExpression)CastExpression_193_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_194_Var);
		final PostfixExpression PostfixExpression_195_Var = (PostfixExpression)UnaryExpression_194_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_195_Var);
		final EList<? extends EObject> Expr_195_list = PostfixExpression_195_Var.getExpr();
		Assert.assertNotNull(Expr_195_list);
		Assert.assertEquals(1, Expr_195_list.size());
		final PrimaryExpression PrimaryExpression_196_Var = (PrimaryExpression)Expr_195_list.get(0);
		Assert.assertNotNull(PrimaryExpression_196_Var);
		final Constant Constant_197_Var = (Constant)PrimaryExpression_196_Var.getConst();
		Assert.assertNotNull(Constant_197_Var);
		Assert.assertEquals("\"(*employee).id=%d\\n\"", Constant_197_Var.getStr());
		final AssignmentExpression AssignmentExpression_198_Var = (AssignmentExpression)Expr_180_list.get(1);
		Assert.assertNotNull(AssignmentExpression_198_Var);
		final ConditionalExpression ConditionalExpression_199_Var = (ConditionalExpression)AssignmentExpression_198_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_199_Var);
		final LogicalOrExpression LogicalOrExpression_200_Var = (LogicalOrExpression)ConditionalExpression_199_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_200_Var);
		final EList<? extends EObject> Expr_200_list = LogicalOrExpression_200_Var.getExpr();
		Assert.assertNotNull(Expr_200_list);
		Assert.assertEquals(1, Expr_200_list.size());
		final LogicalAndExpression LogicalAndExpression_201_Var = (LogicalAndExpression)Expr_200_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_201_Var);
		final EList<? extends EObject> Expr_201_list = LogicalAndExpression_201_Var.getExpr();
		Assert.assertNotNull(Expr_201_list);
		Assert.assertEquals(1, Expr_201_list.size());
		final InclusiveOrExpression InclusiveOrExpression_202_Var = (InclusiveOrExpression)Expr_201_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_202_Var);
		final EList<? extends EObject> Expr_202_list = InclusiveOrExpression_202_Var.getExpr();
		Assert.assertNotNull(Expr_202_list);
		Assert.assertEquals(1, Expr_202_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_203_Var = (ExclusiveOrExpression)Expr_202_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_203_Var);
		final EList<? extends EObject> Expr_203_list = ExclusiveOrExpression_203_Var.getExpr();
		Assert.assertNotNull(Expr_203_list);
		Assert.assertEquals(1, Expr_203_list.size());
		final AndExpression AndExpression_204_Var = (AndExpression)Expr_203_list.get(0);
		Assert.assertNotNull(AndExpression_204_Var);
		final EList<? extends EObject> Expr_204_list = AndExpression_204_Var.getExpr();
		Assert.assertNotNull(Expr_204_list);
		Assert.assertEquals(1, Expr_204_list.size());
		final EqualityExpression EqualityExpression_205_Var = (EqualityExpression)Expr_204_list.get(0);
		Assert.assertNotNull(EqualityExpression_205_Var);
		final EList<? extends EObject> Expr_205_list = EqualityExpression_205_Var.getExpr();
		Assert.assertNotNull(Expr_205_list);
		Assert.assertEquals(1, Expr_205_list.size());
		final RelationalExpression RelationalExpression_206_Var = (RelationalExpression)Expr_205_list.get(0);
		Assert.assertNotNull(RelationalExpression_206_Var);
		final EList<? extends EObject> Expr_206_list = RelationalExpression_206_Var.getExpr();
		Assert.assertNotNull(Expr_206_list);
		Assert.assertEquals(1, Expr_206_list.size());
		final ShiftExpression ShiftExpression_207_Var = (ShiftExpression)Expr_206_list.get(0);
		Assert.assertNotNull(ShiftExpression_207_Var);
		final EList<? extends EObject> Expr_207_list = ShiftExpression_207_Var.getExpr();
		Assert.assertNotNull(Expr_207_list);
		Assert.assertEquals(1, Expr_207_list.size());
		final AdditiveExpression AdditiveExpression_208_Var = (AdditiveExpression)Expr_207_list.get(0);
		Assert.assertNotNull(AdditiveExpression_208_Var);
		final EList<? extends EObject> Expr_208_list = AdditiveExpression_208_Var.getExpr();
		Assert.assertNotNull(Expr_208_list);
		Assert.assertEquals(1, Expr_208_list.size());
		final MultiplicativeExpression MultiplicativeExpression_209_Var = (MultiplicativeExpression)Expr_208_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_209_Var);
		final EList<? extends EObject> Expr_209_list = MultiplicativeExpression_209_Var.getExpr();
		Assert.assertNotNull(Expr_209_list);
		Assert.assertEquals(1, Expr_209_list.size());
		final CastExpression CastExpression_210_Var = (CastExpression)Expr_209_list.get(0);
		Assert.assertNotNull(CastExpression_210_Var);
		final UnaryExpression UnaryExpression_211_Var = (UnaryExpression)CastExpression_210_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_211_Var);
		final PostfixExpression PostfixExpression_212_Var = (PostfixExpression)UnaryExpression_211_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_212_Var);
		final EList<? extends EObject> Expr_212_list = PostfixExpression_212_Var.getExpr();
		Assert.assertNotNull(Expr_212_list);
		Assert.assertEquals(1, Expr_212_list.size());
		final PrimaryExpression PrimaryExpression_213_Var = (PrimaryExpression)Expr_212_list.get(0);
		Assert.assertNotNull(PrimaryExpression_213_Var);
		final Expression Expression_214_Var = (Expression)PrimaryExpression_213_Var.getExpr();
		Assert.assertNotNull(Expression_214_Var);
		final EList<? extends EObject> ExprExpr_214_list = Expression_214_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_214_list);
		Assert.assertEquals(1, ExprExpr_214_list.size());
		final AssignmentExpression AssignmentExpression_215_Var = (AssignmentExpression)ExprExpr_214_list.get(0);
		Assert.assertNotNull(AssignmentExpression_215_Var);
		final ConditionalExpression ConditionalExpression_216_Var = (ConditionalExpression)AssignmentExpression_215_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_216_Var);
		final LogicalOrExpression LogicalOrExpression_217_Var = (LogicalOrExpression)ConditionalExpression_216_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_217_Var);
		final EList<? extends EObject> Expr_217_list = LogicalOrExpression_217_Var.getExpr();
		Assert.assertNotNull(Expr_217_list);
		Assert.assertEquals(1, Expr_217_list.size());
		final LogicalAndExpression LogicalAndExpression_218_Var = (LogicalAndExpression)Expr_217_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_218_Var);
		final EList<? extends EObject> Expr_218_list = LogicalAndExpression_218_Var.getExpr();
		Assert.assertNotNull(Expr_218_list);
		Assert.assertEquals(1, Expr_218_list.size());
		final InclusiveOrExpression InclusiveOrExpression_219_Var = (InclusiveOrExpression)Expr_218_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_219_Var);
		final EList<? extends EObject> Expr_219_list = InclusiveOrExpression_219_Var.getExpr();
		Assert.assertNotNull(Expr_219_list);
		Assert.assertEquals(1, Expr_219_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_220_Var = (ExclusiveOrExpression)Expr_219_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_220_Var);
		final EList<? extends EObject> Expr_220_list = ExclusiveOrExpression_220_Var.getExpr();
		Assert.assertNotNull(Expr_220_list);
		Assert.assertEquals(1, Expr_220_list.size());
		final AndExpression AndExpression_221_Var = (AndExpression)Expr_220_list.get(0);
		Assert.assertNotNull(AndExpression_221_Var);
		final EList<? extends EObject> Expr_221_list = AndExpression_221_Var.getExpr();
		Assert.assertNotNull(Expr_221_list);
		Assert.assertEquals(1, Expr_221_list.size());
		final EqualityExpression EqualityExpression_222_Var = (EqualityExpression)Expr_221_list.get(0);
		Assert.assertNotNull(EqualityExpression_222_Var);
		final EList<? extends EObject> Expr_222_list = EqualityExpression_222_Var.getExpr();
		Assert.assertNotNull(Expr_222_list);
		Assert.assertEquals(1, Expr_222_list.size());
		final RelationalExpression RelationalExpression_223_Var = (RelationalExpression)Expr_222_list.get(0);
		Assert.assertNotNull(RelationalExpression_223_Var);
		final EList<? extends EObject> Expr_223_list = RelationalExpression_223_Var.getExpr();
		Assert.assertNotNull(Expr_223_list);
		Assert.assertEquals(1, Expr_223_list.size());
		final ShiftExpression ShiftExpression_224_Var = (ShiftExpression)Expr_223_list.get(0);
		Assert.assertNotNull(ShiftExpression_224_Var);
		final EList<? extends EObject> Expr_224_list = ShiftExpression_224_Var.getExpr();
		Assert.assertNotNull(Expr_224_list);
		Assert.assertEquals(1, Expr_224_list.size());
		final AdditiveExpression AdditiveExpression_225_Var = (AdditiveExpression)Expr_224_list.get(0);
		Assert.assertNotNull(AdditiveExpression_225_Var);
		final EList<? extends EObject> Expr_225_list = AdditiveExpression_225_Var.getExpr();
		Assert.assertNotNull(Expr_225_list);
		Assert.assertEquals(1, Expr_225_list.size());
		final MultiplicativeExpression MultiplicativeExpression_226_Var = (MultiplicativeExpression)Expr_225_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_226_Var);
		final EList<? extends EObject> Expr_226_list = MultiplicativeExpression_226_Var.getExpr();
		Assert.assertNotNull(Expr_226_list);
		Assert.assertEquals(1, Expr_226_list.size());
		final CastExpression CastExpression_227_Var = (CastExpression)Expr_226_list.get(0);
		Assert.assertNotNull(CastExpression_227_Var);
		final UnaryExpression UnaryExpression_228_Var = (UnaryExpression)CastExpression_227_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_228_Var);
		final UnaryOperator UnaryOperator_229_Var = (UnaryOperator)UnaryExpression_228_Var.getOp();
		Assert.assertNotNull(UnaryOperator_229_Var);
		Assert.assertEquals("*", UnaryOperator_229_Var.getOp());
		final CastExpression CastExpression_230_Var = (CastExpression)UnaryExpression_228_Var.getExpr();
		Assert.assertNotNull(CastExpression_230_Var);
		final UnaryExpression UnaryExpression_231_Var = (UnaryExpression)CastExpression_230_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_231_Var);
		final PostfixExpression PostfixExpression_232_Var = (PostfixExpression)UnaryExpression_231_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_232_Var);
		final EList<? extends EObject> Expr_232_list = PostfixExpression_232_Var.getExpr();
		Assert.assertNotNull(Expr_232_list);
		Assert.assertEquals(1, Expr_232_list.size());
		final PrimaryExpression PrimaryExpression_233_Var = (PrimaryExpression)Expr_232_list.get(0);
		Assert.assertNotNull(PrimaryExpression_233_Var);
		Assert.assertEquals("emp", PrimaryExpression_233_Var.getId());
		Assert.assertEquals("[.]", PostfixExpression_212_Var.getDot().toString());
		Assert.assertEquals("[id]", PostfixExpression_212_Var.getId().toString());
		Assert.assertEquals(";", ExpressionStatement_162_Var.getSemi());
		final Statement Statement_234_Var = (Statement)Statement_160_list.get(1);
		Assert.assertNotNull(Statement_234_Var);
		final ExpressionStatement ExpressionStatement_235_Var = (ExpressionStatement)Statement_234_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_235_Var);
		final Expression Expression_236_Var = (Expression)ExpressionStatement_235_Var.getExpression();
		Assert.assertNotNull(Expression_236_Var);
		final EList<? extends EObject> ExprExpr_236_list = Expression_236_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_236_list);
		Assert.assertEquals(1, ExprExpr_236_list.size());
		final AssignmentExpression AssignmentExpression_237_Var = (AssignmentExpression)ExprExpr_236_list.get(0);
		Assert.assertNotNull(AssignmentExpression_237_Var);
		final ConditionalExpression ConditionalExpression_238_Var = (ConditionalExpression)AssignmentExpression_237_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_238_Var);
		final LogicalOrExpression LogicalOrExpression_239_Var = (LogicalOrExpression)ConditionalExpression_238_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_239_Var);
		final EList<? extends EObject> Expr_239_list = LogicalOrExpression_239_Var.getExpr();
		Assert.assertNotNull(Expr_239_list);
		Assert.assertEquals(1, Expr_239_list.size());
		final LogicalAndExpression LogicalAndExpression_240_Var = (LogicalAndExpression)Expr_239_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_240_Var);
		final EList<? extends EObject> Expr_240_list = LogicalAndExpression_240_Var.getExpr();
		Assert.assertNotNull(Expr_240_list);
		Assert.assertEquals(1, Expr_240_list.size());
		final InclusiveOrExpression InclusiveOrExpression_241_Var = (InclusiveOrExpression)Expr_240_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_241_Var);
		final EList<? extends EObject> Expr_241_list = InclusiveOrExpression_241_Var.getExpr();
		Assert.assertNotNull(Expr_241_list);
		Assert.assertEquals(1, Expr_241_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_242_Var = (ExclusiveOrExpression)Expr_241_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_242_Var);
		final EList<? extends EObject> Expr_242_list = ExclusiveOrExpression_242_Var.getExpr();
		Assert.assertNotNull(Expr_242_list);
		Assert.assertEquals(1, Expr_242_list.size());
		final AndExpression AndExpression_243_Var = (AndExpression)Expr_242_list.get(0);
		Assert.assertNotNull(AndExpression_243_Var);
		final EList<? extends EObject> Expr_243_list = AndExpression_243_Var.getExpr();
		Assert.assertNotNull(Expr_243_list);
		Assert.assertEquals(1, Expr_243_list.size());
		final EqualityExpression EqualityExpression_244_Var = (EqualityExpression)Expr_243_list.get(0);
		Assert.assertNotNull(EqualityExpression_244_Var);
		final EList<? extends EObject> Expr_244_list = EqualityExpression_244_Var.getExpr();
		Assert.assertNotNull(Expr_244_list);
		Assert.assertEquals(1, Expr_244_list.size());
		final RelationalExpression RelationalExpression_245_Var = (RelationalExpression)Expr_244_list.get(0);
		Assert.assertNotNull(RelationalExpression_245_Var);
		final EList<? extends EObject> Expr_245_list = RelationalExpression_245_Var.getExpr();
		Assert.assertNotNull(Expr_245_list);
		Assert.assertEquals(1, Expr_245_list.size());
		final ShiftExpression ShiftExpression_246_Var = (ShiftExpression)Expr_245_list.get(0);
		Assert.assertNotNull(ShiftExpression_246_Var);
		final EList<? extends EObject> Expr_246_list = ShiftExpression_246_Var.getExpr();
		Assert.assertNotNull(Expr_246_list);
		Assert.assertEquals(1, Expr_246_list.size());
		final AdditiveExpression AdditiveExpression_247_Var = (AdditiveExpression)Expr_246_list.get(0);
		Assert.assertNotNull(AdditiveExpression_247_Var);
		final EList<? extends EObject> Expr_247_list = AdditiveExpression_247_Var.getExpr();
		Assert.assertNotNull(Expr_247_list);
		Assert.assertEquals(1, Expr_247_list.size());
		final MultiplicativeExpression MultiplicativeExpression_248_Var = (MultiplicativeExpression)Expr_247_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_248_Var);
		final EList<? extends EObject> Expr_248_list = MultiplicativeExpression_248_Var.getExpr();
		Assert.assertNotNull(Expr_248_list);
		Assert.assertEquals(1, Expr_248_list.size());
		final CastExpression CastExpression_249_Var = (CastExpression)Expr_248_list.get(0);
		Assert.assertNotNull(CastExpression_249_Var);
		final UnaryExpression UnaryExpression_250_Var = (UnaryExpression)CastExpression_249_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_250_Var);
		final PostfixExpression PostfixExpression_251_Var = (PostfixExpression)UnaryExpression_250_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_251_Var);
		final EList<? extends EObject> Expr_251_list = PostfixExpression_251_Var.getExpr();
		Assert.assertNotNull(Expr_251_list);
		Assert.assertEquals(1, Expr_251_list.size());
		final PrimaryExpression PrimaryExpression_252_Var = (PrimaryExpression)Expr_251_list.get(0);
		Assert.assertNotNull(PrimaryExpression_252_Var);
		Assert.assertEquals("printf", PrimaryExpression_252_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_252_list = PostfixExpression_251_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_252_list);
		Assert.assertEquals(1, ArgumentExpressionList_252_list.size());
		final ArgumentExpressionList ArgumentExpressionList_253_Var = (ArgumentExpressionList)ArgumentExpressionList_252_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_253_Var);
		final EList<? extends EObject> Expr_253_list = ArgumentExpressionList_253_Var.getExpr();
		Assert.assertNotNull(Expr_253_list);
		Assert.assertEquals(2, Expr_253_list.size());
		final AssignmentExpression AssignmentExpression_254_Var = (AssignmentExpression)Expr_253_list.get(0);
		Assert.assertNotNull(AssignmentExpression_254_Var);
		final ConditionalExpression ConditionalExpression_255_Var = (ConditionalExpression)AssignmentExpression_254_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_255_Var);
		final LogicalOrExpression LogicalOrExpression_256_Var = (LogicalOrExpression)ConditionalExpression_255_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_256_Var);
		final EList<? extends EObject> Expr_256_list = LogicalOrExpression_256_Var.getExpr();
		Assert.assertNotNull(Expr_256_list);
		Assert.assertEquals(1, Expr_256_list.size());
		final LogicalAndExpression LogicalAndExpression_257_Var = (LogicalAndExpression)Expr_256_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_257_Var);
		final EList<? extends EObject> Expr_257_list = LogicalAndExpression_257_Var.getExpr();
		Assert.assertNotNull(Expr_257_list);
		Assert.assertEquals(1, Expr_257_list.size());
		final InclusiveOrExpression InclusiveOrExpression_258_Var = (InclusiveOrExpression)Expr_257_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_258_Var);
		final EList<? extends EObject> Expr_258_list = InclusiveOrExpression_258_Var.getExpr();
		Assert.assertNotNull(Expr_258_list);
		Assert.assertEquals(1, Expr_258_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_259_Var = (ExclusiveOrExpression)Expr_258_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_259_Var);
		final EList<? extends EObject> Expr_259_list = ExclusiveOrExpression_259_Var.getExpr();
		Assert.assertNotNull(Expr_259_list);
		Assert.assertEquals(1, Expr_259_list.size());
		final AndExpression AndExpression_260_Var = (AndExpression)Expr_259_list.get(0);
		Assert.assertNotNull(AndExpression_260_Var);
		final EList<? extends EObject> Expr_260_list = AndExpression_260_Var.getExpr();
		Assert.assertNotNull(Expr_260_list);
		Assert.assertEquals(1, Expr_260_list.size());
		final EqualityExpression EqualityExpression_261_Var = (EqualityExpression)Expr_260_list.get(0);
		Assert.assertNotNull(EqualityExpression_261_Var);
		final EList<? extends EObject> Expr_261_list = EqualityExpression_261_Var.getExpr();
		Assert.assertNotNull(Expr_261_list);
		Assert.assertEquals(1, Expr_261_list.size());
		final RelationalExpression RelationalExpression_262_Var = (RelationalExpression)Expr_261_list.get(0);
		Assert.assertNotNull(RelationalExpression_262_Var);
		final EList<? extends EObject> Expr_262_list = RelationalExpression_262_Var.getExpr();
		Assert.assertNotNull(Expr_262_list);
		Assert.assertEquals(1, Expr_262_list.size());
		final ShiftExpression ShiftExpression_263_Var = (ShiftExpression)Expr_262_list.get(0);
		Assert.assertNotNull(ShiftExpression_263_Var);
		final EList<? extends EObject> Expr_263_list = ShiftExpression_263_Var.getExpr();
		Assert.assertNotNull(Expr_263_list);
		Assert.assertEquals(1, Expr_263_list.size());
		final AdditiveExpression AdditiveExpression_264_Var = (AdditiveExpression)Expr_263_list.get(0);
		Assert.assertNotNull(AdditiveExpression_264_Var);
		final EList<? extends EObject> Expr_264_list = AdditiveExpression_264_Var.getExpr();
		Assert.assertNotNull(Expr_264_list);
		Assert.assertEquals(1, Expr_264_list.size());
		final MultiplicativeExpression MultiplicativeExpression_265_Var = (MultiplicativeExpression)Expr_264_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_265_Var);
		final EList<? extends EObject> Expr_265_list = MultiplicativeExpression_265_Var.getExpr();
		Assert.assertNotNull(Expr_265_list);
		Assert.assertEquals(1, Expr_265_list.size());
		final CastExpression CastExpression_266_Var = (CastExpression)Expr_265_list.get(0);
		Assert.assertNotNull(CastExpression_266_Var);
		final UnaryExpression UnaryExpression_267_Var = (UnaryExpression)CastExpression_266_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_267_Var);
		final PostfixExpression PostfixExpression_268_Var = (PostfixExpression)UnaryExpression_267_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_268_Var);
		final EList<? extends EObject> Expr_268_list = PostfixExpression_268_Var.getExpr();
		Assert.assertNotNull(Expr_268_list);
		Assert.assertEquals(1, Expr_268_list.size());
		final PrimaryExpression PrimaryExpression_269_Var = (PrimaryExpression)Expr_268_list.get(0);
		Assert.assertNotNull(PrimaryExpression_269_Var);
		final Constant Constant_270_Var = (Constant)PrimaryExpression_269_Var.getConst();
		Assert.assertNotNull(Constant_270_Var);
		Assert.assertEquals("\"employee->name=%s\\n\"", Constant_270_Var.getStr());
		final AssignmentExpression AssignmentExpression_271_Var = (AssignmentExpression)Expr_253_list.get(1);
		Assert.assertNotNull(AssignmentExpression_271_Var);
		final ConditionalExpression ConditionalExpression_272_Var = (ConditionalExpression)AssignmentExpression_271_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_272_Var);
		final LogicalOrExpression LogicalOrExpression_273_Var = (LogicalOrExpression)ConditionalExpression_272_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_273_Var);
		final EList<? extends EObject> Expr_273_list = LogicalOrExpression_273_Var.getExpr();
		Assert.assertNotNull(Expr_273_list);
		Assert.assertEquals(1, Expr_273_list.size());
		final LogicalAndExpression LogicalAndExpression_274_Var = (LogicalAndExpression)Expr_273_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_274_Var);
		final EList<? extends EObject> Expr_274_list = LogicalAndExpression_274_Var.getExpr();
		Assert.assertNotNull(Expr_274_list);
		Assert.assertEquals(1, Expr_274_list.size());
		final InclusiveOrExpression InclusiveOrExpression_275_Var = (InclusiveOrExpression)Expr_274_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_275_Var);
		final EList<? extends EObject> Expr_275_list = InclusiveOrExpression_275_Var.getExpr();
		Assert.assertNotNull(Expr_275_list);
		Assert.assertEquals(1, Expr_275_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_276_Var = (ExclusiveOrExpression)Expr_275_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_276_Var);
		final EList<? extends EObject> Expr_276_list = ExclusiveOrExpression_276_Var.getExpr();
		Assert.assertNotNull(Expr_276_list);
		Assert.assertEquals(1, Expr_276_list.size());
		final AndExpression AndExpression_277_Var = (AndExpression)Expr_276_list.get(0);
		Assert.assertNotNull(AndExpression_277_Var);
		final EList<? extends EObject> Expr_277_list = AndExpression_277_Var.getExpr();
		Assert.assertNotNull(Expr_277_list);
		Assert.assertEquals(1, Expr_277_list.size());
		final EqualityExpression EqualityExpression_278_Var = (EqualityExpression)Expr_277_list.get(0);
		Assert.assertNotNull(EqualityExpression_278_Var);
		final EList<? extends EObject> Expr_278_list = EqualityExpression_278_Var.getExpr();
		Assert.assertNotNull(Expr_278_list);
		Assert.assertEquals(1, Expr_278_list.size());
		final RelationalExpression RelationalExpression_279_Var = (RelationalExpression)Expr_278_list.get(0);
		Assert.assertNotNull(RelationalExpression_279_Var);
		final EList<? extends EObject> Expr_279_list = RelationalExpression_279_Var.getExpr();
		Assert.assertNotNull(Expr_279_list);
		Assert.assertEquals(1, Expr_279_list.size());
		final ShiftExpression ShiftExpression_280_Var = (ShiftExpression)Expr_279_list.get(0);
		Assert.assertNotNull(ShiftExpression_280_Var);
		final EList<? extends EObject> Expr_280_list = ShiftExpression_280_Var.getExpr();
		Assert.assertNotNull(Expr_280_list);
		Assert.assertEquals(1, Expr_280_list.size());
		final AdditiveExpression AdditiveExpression_281_Var = (AdditiveExpression)Expr_280_list.get(0);
		Assert.assertNotNull(AdditiveExpression_281_Var);
		final EList<? extends EObject> Expr_281_list = AdditiveExpression_281_Var.getExpr();
		Assert.assertNotNull(Expr_281_list);
		Assert.assertEquals(1, Expr_281_list.size());
		final MultiplicativeExpression MultiplicativeExpression_282_Var = (MultiplicativeExpression)Expr_281_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_282_Var);
		final EList<? extends EObject> Expr_282_list = MultiplicativeExpression_282_Var.getExpr();
		Assert.assertNotNull(Expr_282_list);
		Assert.assertEquals(1, Expr_282_list.size());
		final CastExpression CastExpression_283_Var = (CastExpression)Expr_282_list.get(0);
		Assert.assertNotNull(CastExpression_283_Var);
		final UnaryExpression UnaryExpression_284_Var = (UnaryExpression)CastExpression_283_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_284_Var);
		final PostfixExpression PostfixExpression_285_Var = (PostfixExpression)UnaryExpression_284_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_285_Var);
		final EList<? extends EObject> Expr_285_list = PostfixExpression_285_Var.getExpr();
		Assert.assertNotNull(Expr_285_list);
		Assert.assertEquals(1, Expr_285_list.size());
		final PrimaryExpression PrimaryExpression_286_Var = (PrimaryExpression)Expr_285_list.get(0);
		Assert.assertNotNull(PrimaryExpression_286_Var);
		Assert.assertEquals("emp", PrimaryExpression_286_Var.getId());
		Assert.assertEquals("[]", PostfixExpression_285_Var.getDot().toString());
		Assert.assertEquals("[->]", PostfixExpression_285_Var.getArrow().toString());
		Assert.assertEquals("[name]", PostfixExpression_285_Var.getId().toString());
		Assert.assertEquals(";", ExpressionStatement_235_Var.getSemi());
		final ExternalDeclaration ExternalDeclaration_287_Var = (ExternalDeclaration)External_1_list.get(4);
		Assert.assertNotNull(ExternalDeclaration_287_Var);
		final FunctionDefHead FunctionDefHead_288_Var = (FunctionDefHead)ExternalDeclaration_287_Var.getFunctiondefHead();
		Assert.assertNotNull(FunctionDefHead_288_Var);
		final DeclarationSpecifiers DeclarationSpecifiers_289_Var = (DeclarationSpecifiers)FunctionDefHead_288_Var.getFunDeclSpecifiers();
		Assert.assertNotNull(DeclarationSpecifiers_289_Var);
		final EList<? extends EObject> DeclarationSpecifier_289_list = DeclarationSpecifiers_289_Var.getDeclarationSpecifier();
		Assert.assertNotNull(DeclarationSpecifier_289_list);
		Assert.assertEquals(1, DeclarationSpecifier_289_list.size());
		final TypeSpecifier TypeSpecifier_290_Var = (TypeSpecifier)DeclarationSpecifier_289_list.get(0);
		Assert.assertNotNull(TypeSpecifier_290_Var);
		Assert.assertEquals("int", TypeSpecifier_290_Var.getName());
		final Declarator Declarator_291_Var = (Declarator)FunctionDefHead_288_Var.getFunDeclarator();
		Assert.assertNotNull(Declarator_291_Var);
		final DirectDeclarator DirectDeclarator_292_Var = (DirectDeclarator)Declarator_291_Var.getDeclarator();
		Assert.assertNotNull(DirectDeclarator_292_Var);
		Assert.assertEquals("main", DirectDeclarator_292_Var.getId());
		final EList<? extends EObject> DeclaratorSuffix_292_list = DirectDeclarator_292_Var.getDeclaratorSuffix();
		Assert.assertNotNull(DeclaratorSuffix_292_list);
		Assert.assertEquals(1, DeclaratorSuffix_292_list.size());
		final DeclaratorSuffix DeclaratorSuffix_293_Var = (DeclaratorSuffix)DeclaratorSuffix_292_list.get(0);
		Assert.assertNotNull(DeclaratorSuffix_293_Var);
		final DirectDeclaratorLastSuffix DirectDeclaratorLastSuffix_294_Var = (DirectDeclaratorLastSuffix)DeclaratorSuffix_293_Var.getLastSuffix();
		Assert.assertNotNull(DirectDeclaratorLastSuffix_294_Var);
		final EList<? extends EObject> ParameterTypeList_294_list = DirectDeclaratorLastSuffix_294_Var.getParameterTypeList();
		Assert.assertNotNull(ParameterTypeList_294_list);
		Assert.assertEquals(1, ParameterTypeList_294_list.size());
		final ParameterTypeList ParameterTypeList_295_Var = (ParameterTypeList)ParameterTypeList_294_list.get(0);
		Assert.assertNotNull(ParameterTypeList_295_Var);
		final ParameterList ParameterList_296_Var = (ParameterList)ParameterTypeList_295_Var.getList();
		Assert.assertNotNull(ParameterList_296_Var);
		final EList<? extends EObject> ParameterDeclaration_296_list = ParameterList_296_Var.getParameterDeclaration();
		Assert.assertNotNull(ParameterDeclaration_296_list);
		Assert.assertEquals(1, ParameterDeclaration_296_list.size());
		final ParameterDeclaration ParameterDeclaration_297_Var = (ParameterDeclaration)ParameterDeclaration_296_list.get(0);
		Assert.assertNotNull(ParameterDeclaration_297_Var);
		final DeclarationSpecifiers DeclarationSpecifiers_298_Var = (DeclarationSpecifiers)ParameterDeclaration_297_Var.getDeclSpecifiers();
		Assert.assertNotNull(DeclarationSpecifiers_298_Var);
		final EList<? extends EObject> DeclarationSpecifier_298_list = DeclarationSpecifiers_298_Var.getDeclarationSpecifier();
		Assert.assertNotNull(DeclarationSpecifier_298_list);
		Assert.assertEquals(1, DeclarationSpecifier_298_list.size());
		final TypeSpecifier TypeSpecifier_299_Var = (TypeSpecifier)DeclarationSpecifier_298_list.get(0);
		Assert.assertNotNull(TypeSpecifier_299_Var);
		Assert.assertEquals("void", TypeSpecifier_299_Var.getName());
		final FunctionDefinition FunctionDefinition_300_Var = (FunctionDefinition)ExternalDeclaration_287_Var.getFunctionDefinition();
		Assert.assertNotNull(FunctionDefinition_300_Var);
		final BodyStatement BodyStatement_301_Var = (BodyStatement)FunctionDefinition_300_Var.getBody();
		Assert.assertNotNull(BodyStatement_301_Var);
		final EList<? extends EObject> BlockList_301_list = BodyStatement_301_Var.getBlockList();
		Assert.assertNotNull(BlockList_301_list);
		Assert.assertEquals(1, BlockList_301_list.size());
		final BlockList BlockList_302_Var = (BlockList)BlockList_301_list.get(0);
		Assert.assertNotNull(BlockList_302_Var);
		final EList<? extends EObject> Declaration_302_list = BlockList_302_Var.getDeclaration();
		Assert.assertNotNull(Declaration_302_list);
		Assert.assertEquals(1, Declaration_302_list.size());
		final Declaration Declaration_303_Var = (Declaration)Declaration_302_list.get(0);
		Assert.assertNotNull(Declaration_303_Var);
		final DeclarationSpecifiers DeclarationSpecifiers_304_Var = (DeclarationSpecifiers)Declaration_303_Var.getSpecifiers();
		Assert.assertNotNull(DeclarationSpecifiers_304_Var);
		final EList<? extends EObject> DeclarationSpecifier_304_list = DeclarationSpecifiers_304_Var.getDeclarationSpecifier();
		Assert.assertNotNull(DeclarationSpecifier_304_list);
		Assert.assertEquals(1, DeclarationSpecifier_304_list.size());
		final TypeSpecifier TypeSpecifier_305_Var = (TypeSpecifier)DeclarationSpecifier_304_list.get(0);
		Assert.assertNotNull(TypeSpecifier_305_Var);
		final TypedefName TypedefName_306_Var = (TypedefName)TypeSpecifier_305_Var.getType();
		Assert.assertNotNull(TypedefName_306_Var);
		Assert.assertEquals("employee", TypedefName_306_Var.getId());
		final EList<? extends EObject> InitDeclaratorList_306_list = Declaration_303_Var.getInitDeclaratorList();
		Assert.assertNotNull(InitDeclaratorList_306_list);
		Assert.assertEquals(1, InitDeclaratorList_306_list.size());
		final InitDeclaratorList InitDeclaratorList_307_Var = (InitDeclaratorList)InitDeclaratorList_306_list.get(0);
		Assert.assertNotNull(InitDeclaratorList_307_Var);
		final EList<? extends EObject> InitDeclarator_307_list = InitDeclaratorList_307_Var.getInitDeclarator();
		Assert.assertNotNull(InitDeclarator_307_list);
		Assert.assertEquals(1, InitDeclarator_307_list.size());
		final InitDeclarator InitDeclarator_308_Var = (InitDeclarator)InitDeclarator_307_list.get(0);
		Assert.assertNotNull(InitDeclarator_308_Var);
		final Declarator Declarator_309_Var = (Declarator)InitDeclarator_308_Var.getDeclarator();
		Assert.assertNotNull(Declarator_309_Var);
		final Pointer Pointer_310_Var = (Pointer)Declarator_309_Var.getPointer();
		Assert.assertNotNull(Pointer_310_Var);
		Assert.assertEquals("[*]", Pointer_310_Var.getStar().toString());
		final DirectDeclarator DirectDeclarator_311_Var = (DirectDeclarator)Declarator_309_Var.getDeclarator();
		Assert.assertNotNull(DirectDeclarator_311_Var);
		Assert.assertEquals("newEmployee", DirectDeclarator_311_Var.getId());
		final Initializer Initializer_312_Var = (Initializer)InitDeclarator_308_Var.getInitializer();
		Assert.assertNotNull(Initializer_312_Var);
		final AssignmentExpression AssignmentExpression_313_Var = (AssignmentExpression)Initializer_312_Var.getExpr();
		Assert.assertNotNull(AssignmentExpression_313_Var);
		final ConditionalExpression ConditionalExpression_314_Var = (ConditionalExpression)AssignmentExpression_313_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_314_Var);
		final LogicalOrExpression LogicalOrExpression_315_Var = (LogicalOrExpression)ConditionalExpression_314_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_315_Var);
		final EList<? extends EObject> Expr_315_list = LogicalOrExpression_315_Var.getExpr();
		Assert.assertNotNull(Expr_315_list);
		Assert.assertEquals(1, Expr_315_list.size());
		final LogicalAndExpression LogicalAndExpression_316_Var = (LogicalAndExpression)Expr_315_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_316_Var);
		final EList<? extends EObject> Expr_316_list = LogicalAndExpression_316_Var.getExpr();
		Assert.assertNotNull(Expr_316_list);
		Assert.assertEquals(1, Expr_316_list.size());
		final InclusiveOrExpression InclusiveOrExpression_317_Var = (InclusiveOrExpression)Expr_316_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_317_Var);
		final EList<? extends EObject> Expr_317_list = InclusiveOrExpression_317_Var.getExpr();
		Assert.assertNotNull(Expr_317_list);
		Assert.assertEquals(1, Expr_317_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_318_Var = (ExclusiveOrExpression)Expr_317_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_318_Var);
		final EList<? extends EObject> Expr_318_list = ExclusiveOrExpression_318_Var.getExpr();
		Assert.assertNotNull(Expr_318_list);
		Assert.assertEquals(1, Expr_318_list.size());
		final AndExpression AndExpression_319_Var = (AndExpression)Expr_318_list.get(0);
		Assert.assertNotNull(AndExpression_319_Var);
		final EList<? extends EObject> Expr_319_list = AndExpression_319_Var.getExpr();
		Assert.assertNotNull(Expr_319_list);
		Assert.assertEquals(1, Expr_319_list.size());
		final EqualityExpression EqualityExpression_320_Var = (EqualityExpression)Expr_319_list.get(0);
		Assert.assertNotNull(EqualityExpression_320_Var);
		final EList<? extends EObject> Expr_320_list = EqualityExpression_320_Var.getExpr();
		Assert.assertNotNull(Expr_320_list);
		Assert.assertEquals(1, Expr_320_list.size());
		final RelationalExpression RelationalExpression_321_Var = (RelationalExpression)Expr_320_list.get(0);
		Assert.assertNotNull(RelationalExpression_321_Var);
		final EList<? extends EObject> Expr_321_list = RelationalExpression_321_Var.getExpr();
		Assert.assertNotNull(Expr_321_list);
		Assert.assertEquals(1, Expr_321_list.size());
		final ShiftExpression ShiftExpression_322_Var = (ShiftExpression)Expr_321_list.get(0);
		Assert.assertNotNull(ShiftExpression_322_Var);
		final EList<? extends EObject> Expr_322_list = ShiftExpression_322_Var.getExpr();
		Assert.assertNotNull(Expr_322_list);
		Assert.assertEquals(1, Expr_322_list.size());
		final AdditiveExpression AdditiveExpression_323_Var = (AdditiveExpression)Expr_322_list.get(0);
		Assert.assertNotNull(AdditiveExpression_323_Var);
		final EList<? extends EObject> Expr_323_list = AdditiveExpression_323_Var.getExpr();
		Assert.assertNotNull(Expr_323_list);
		Assert.assertEquals(1, Expr_323_list.size());
		final MultiplicativeExpression MultiplicativeExpression_324_Var = (MultiplicativeExpression)Expr_323_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_324_Var);
		final EList<? extends EObject> Expr_324_list = MultiplicativeExpression_324_Var.getExpr();
		Assert.assertNotNull(Expr_324_list);
		Assert.assertEquals(1, Expr_324_list.size());
		final CastExpression CastExpression_325_Var = (CastExpression)Expr_324_list.get(0);
		Assert.assertNotNull(CastExpression_325_Var);
		final UnaryExpression UnaryExpression_326_Var = (UnaryExpression)CastExpression_325_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_326_Var);
		final PostfixExpression PostfixExpression_327_Var = (PostfixExpression)UnaryExpression_326_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_327_Var);
		final EList<? extends EObject> Expr_327_list = PostfixExpression_327_Var.getExpr();
		Assert.assertNotNull(Expr_327_list);
		Assert.assertEquals(1, Expr_327_list.size());
		final PrimaryExpression PrimaryExpression_328_Var = (PrimaryExpression)Expr_327_list.get(0);
		Assert.assertNotNull(PrimaryExpression_328_Var);
		Assert.assertEquals("malloc", PrimaryExpression_328_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_328_list = PostfixExpression_327_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_328_list);
		Assert.assertEquals(1, ArgumentExpressionList_328_list.size());
		final ArgumentExpressionList ArgumentExpressionList_329_Var = (ArgumentExpressionList)ArgumentExpressionList_328_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_329_Var);
		final EList<? extends EObject> Expr_329_list = ArgumentExpressionList_329_Var.getExpr();
		Assert.assertNotNull(Expr_329_list);
		Assert.assertEquals(1, Expr_329_list.size());
		final AssignmentExpression AssignmentExpression_330_Var = (AssignmentExpression)Expr_329_list.get(0);
		Assert.assertNotNull(AssignmentExpression_330_Var);
		final ConditionalExpression ConditionalExpression_331_Var = (ConditionalExpression)AssignmentExpression_330_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_331_Var);
		final LogicalOrExpression LogicalOrExpression_332_Var = (LogicalOrExpression)ConditionalExpression_331_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_332_Var);
		final EList<? extends EObject> Expr_332_list = LogicalOrExpression_332_Var.getExpr();
		Assert.assertNotNull(Expr_332_list);
		Assert.assertEquals(1, Expr_332_list.size());
		final LogicalAndExpression LogicalAndExpression_333_Var = (LogicalAndExpression)Expr_332_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_333_Var);
		final EList<? extends EObject> Expr_333_list = LogicalAndExpression_333_Var.getExpr();
		Assert.assertNotNull(Expr_333_list);
		Assert.assertEquals(1, Expr_333_list.size());
		final InclusiveOrExpression InclusiveOrExpression_334_Var = (InclusiveOrExpression)Expr_333_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_334_Var);
		final EList<? extends EObject> Expr_334_list = InclusiveOrExpression_334_Var.getExpr();
		Assert.assertNotNull(Expr_334_list);
		Assert.assertEquals(1, Expr_334_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_335_Var = (ExclusiveOrExpression)Expr_334_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_335_Var);
		final EList<? extends EObject> Expr_335_list = ExclusiveOrExpression_335_Var.getExpr();
		Assert.assertNotNull(Expr_335_list);
		Assert.assertEquals(1, Expr_335_list.size());
		final AndExpression AndExpression_336_Var = (AndExpression)Expr_335_list.get(0);
		Assert.assertNotNull(AndExpression_336_Var);
		final EList<? extends EObject> Expr_336_list = AndExpression_336_Var.getExpr();
		Assert.assertNotNull(Expr_336_list);
		Assert.assertEquals(1, Expr_336_list.size());
		final EqualityExpression EqualityExpression_337_Var = (EqualityExpression)Expr_336_list.get(0);
		Assert.assertNotNull(EqualityExpression_337_Var);
		final EList<? extends EObject> Expr_337_list = EqualityExpression_337_Var.getExpr();
		Assert.assertNotNull(Expr_337_list);
		Assert.assertEquals(1, Expr_337_list.size());
		final RelationalExpression RelationalExpression_338_Var = (RelationalExpression)Expr_337_list.get(0);
		Assert.assertNotNull(RelationalExpression_338_Var);
		final EList<? extends EObject> Expr_338_list = RelationalExpression_338_Var.getExpr();
		Assert.assertNotNull(Expr_338_list);
		Assert.assertEquals(1, Expr_338_list.size());
		final ShiftExpression ShiftExpression_339_Var = (ShiftExpression)Expr_338_list.get(0);
		Assert.assertNotNull(ShiftExpression_339_Var);
		final EList<? extends EObject> Expr_339_list = ShiftExpression_339_Var.getExpr();
		Assert.assertNotNull(Expr_339_list);
		Assert.assertEquals(1, Expr_339_list.size());
		final AdditiveExpression AdditiveExpression_340_Var = (AdditiveExpression)Expr_339_list.get(0);
		Assert.assertNotNull(AdditiveExpression_340_Var);
		final EList<? extends EObject> Expr_340_list = AdditiveExpression_340_Var.getExpr();
		Assert.assertNotNull(Expr_340_list);
		Assert.assertEquals(1, Expr_340_list.size());
		final MultiplicativeExpression MultiplicativeExpression_341_Var = (MultiplicativeExpression)Expr_340_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_341_Var);
		final EList<? extends EObject> Expr_341_list = MultiplicativeExpression_341_Var.getExpr();
		Assert.assertNotNull(Expr_341_list);
		Assert.assertEquals(1, Expr_341_list.size());
		final CastExpression CastExpression_342_Var = (CastExpression)Expr_341_list.get(0);
		Assert.assertNotNull(CastExpression_342_Var);
		final UnaryExpression UnaryExpression_343_Var = (UnaryExpression)CastExpression_342_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_343_Var);
		Assert.assertEquals("sizeof", UnaryExpression_343_Var.getSizeOf());
		final TypeName TypeName_344_Var = (TypeName)UnaryExpression_343_Var.getTypeName();
		Assert.assertNotNull(TypeName_344_Var);
		final SpecifierQualifierList SpecifierQualifierList_345_Var = (SpecifierQualifierList)TypeName_344_Var.getList();
		Assert.assertNotNull(SpecifierQualifierList_345_Var);
		final EList<? extends EObject> TypeSpecifier_345_list = SpecifierQualifierList_345_Var.getTypeSpecifier();
		Assert.assertNotNull(TypeSpecifier_345_list);
		Assert.assertEquals(1, TypeSpecifier_345_list.size());
		final TypeSpecifier TypeSpecifier_346_Var = (TypeSpecifier)TypeSpecifier_345_list.get(0);
		Assert.assertNotNull(TypeSpecifier_346_Var);
		final TypedefName TypedefName_347_Var = (TypedefName)TypeSpecifier_346_Var.getType();
		Assert.assertNotNull(TypedefName_347_Var);
		Assert.assertEquals("employee", TypedefName_347_Var.getId());
		final EList<? extends EObject> Statement_347_list = BlockList_302_Var.getStatement();
		Assert.assertNotNull(Statement_347_list);
		Assert.assertEquals(8, Statement_347_list.size());
		final Statement Statement_348_Var = (Statement)Statement_347_list.get(0);
		Assert.assertNotNull(Statement_348_Var);
		final SelectionStatement SelectionStatement_349_Var = (SelectionStatement)Statement_348_Var.getStmt();
		Assert.assertNotNull(SelectionStatement_349_Var);
		Assert.assertEquals("if", SelectionStatement_349_Var.getIf());
		final Expression Expression_350_Var = (Expression)SelectionStatement_349_Var.getExpr();
		Assert.assertNotNull(Expression_350_Var);
		final EList<? extends EObject> ExprExpr_350_list = Expression_350_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_350_list);
		Assert.assertEquals(1, ExprExpr_350_list.size());
		final AssignmentExpression AssignmentExpression_351_Var = (AssignmentExpression)ExprExpr_350_list.get(0);
		Assert.assertNotNull(AssignmentExpression_351_Var);
		final ConditionalExpression ConditionalExpression_352_Var = (ConditionalExpression)AssignmentExpression_351_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_352_Var);
		final LogicalOrExpression LogicalOrExpression_353_Var = (LogicalOrExpression)ConditionalExpression_352_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_353_Var);
		final EList<? extends EObject> Expr_353_list = LogicalOrExpression_353_Var.getExpr();
		Assert.assertNotNull(Expr_353_list);
		Assert.assertEquals(1, Expr_353_list.size());
		final LogicalAndExpression LogicalAndExpression_354_Var = (LogicalAndExpression)Expr_353_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_354_Var);
		final EList<? extends EObject> Expr_354_list = LogicalAndExpression_354_Var.getExpr();
		Assert.assertNotNull(Expr_354_list);
		Assert.assertEquals(1, Expr_354_list.size());
		final InclusiveOrExpression InclusiveOrExpression_355_Var = (InclusiveOrExpression)Expr_354_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_355_Var);
		final EList<? extends EObject> Expr_355_list = InclusiveOrExpression_355_Var.getExpr();
		Assert.assertNotNull(Expr_355_list);
		Assert.assertEquals(1, Expr_355_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_356_Var = (ExclusiveOrExpression)Expr_355_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_356_Var);
		final EList<? extends EObject> Expr_356_list = ExclusiveOrExpression_356_Var.getExpr();
		Assert.assertNotNull(Expr_356_list);
		Assert.assertEquals(1, Expr_356_list.size());
		final AndExpression AndExpression_357_Var = (AndExpression)Expr_356_list.get(0);
		Assert.assertNotNull(AndExpression_357_Var);
		final EList<? extends EObject> Expr_357_list = AndExpression_357_Var.getExpr();
		Assert.assertNotNull(Expr_357_list);
		Assert.assertEquals(1, Expr_357_list.size());
		final EqualityExpression EqualityExpression_358_Var = (EqualityExpression)Expr_357_list.get(0);
		Assert.assertNotNull(EqualityExpression_358_Var);
		Assert.assertEquals("[==]", EqualityExpression_358_Var.getOp().toString());
		final EList<? extends EObject> Expr_358_list = EqualityExpression_358_Var.getExpr();
		Assert.assertNotNull(Expr_358_list);
		Assert.assertEquals(2, Expr_358_list.size());
		final RelationalExpression RelationalExpression_359_Var = (RelationalExpression)Expr_358_list.get(0);
		Assert.assertNotNull(RelationalExpression_359_Var);
		final EList<? extends EObject> Expr_359_list = RelationalExpression_359_Var.getExpr();
		Assert.assertNotNull(Expr_359_list);
		Assert.assertEquals(1, Expr_359_list.size());
		final ShiftExpression ShiftExpression_360_Var = (ShiftExpression)Expr_359_list.get(0);
		Assert.assertNotNull(ShiftExpression_360_Var);
		final EList<? extends EObject> Expr_360_list = ShiftExpression_360_Var.getExpr();
		Assert.assertNotNull(Expr_360_list);
		Assert.assertEquals(1, Expr_360_list.size());
		final AdditiveExpression AdditiveExpression_361_Var = (AdditiveExpression)Expr_360_list.get(0);
		Assert.assertNotNull(AdditiveExpression_361_Var);
		final EList<? extends EObject> Expr_361_list = AdditiveExpression_361_Var.getExpr();
		Assert.assertNotNull(Expr_361_list);
		Assert.assertEquals(1, Expr_361_list.size());
		final MultiplicativeExpression MultiplicativeExpression_362_Var = (MultiplicativeExpression)Expr_361_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_362_Var);
		final EList<? extends EObject> Expr_362_list = MultiplicativeExpression_362_Var.getExpr();
		Assert.assertNotNull(Expr_362_list);
		Assert.assertEquals(1, Expr_362_list.size());
		final CastExpression CastExpression_363_Var = (CastExpression)Expr_362_list.get(0);
		Assert.assertNotNull(CastExpression_363_Var);
		final UnaryExpression UnaryExpression_364_Var = (UnaryExpression)CastExpression_363_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_364_Var);
		final PostfixExpression PostfixExpression_365_Var = (PostfixExpression)UnaryExpression_364_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_365_Var);
		final EList<? extends EObject> Expr_365_list = PostfixExpression_365_Var.getExpr();
		Assert.assertNotNull(Expr_365_list);
		Assert.assertEquals(1, Expr_365_list.size());
		final PrimaryExpression PrimaryExpression_366_Var = (PrimaryExpression)Expr_365_list.get(0);
		Assert.assertNotNull(PrimaryExpression_366_Var);
		Assert.assertEquals("newEmployee", PrimaryExpression_366_Var.getId());
		final RelationalExpression RelationalExpression_367_Var = (RelationalExpression)Expr_358_list.get(1);
		Assert.assertNotNull(RelationalExpression_367_Var);
		final EList<? extends EObject> Expr_367_list = RelationalExpression_367_Var.getExpr();
		Assert.assertNotNull(Expr_367_list);
		Assert.assertEquals(1, Expr_367_list.size());
		final ShiftExpression ShiftExpression_368_Var = (ShiftExpression)Expr_367_list.get(0);
		Assert.assertNotNull(ShiftExpression_368_Var);
		final EList<? extends EObject> Expr_368_list = ShiftExpression_368_Var.getExpr();
		Assert.assertNotNull(Expr_368_list);
		Assert.assertEquals(1, Expr_368_list.size());
		final AdditiveExpression AdditiveExpression_369_Var = (AdditiveExpression)Expr_368_list.get(0);
		Assert.assertNotNull(AdditiveExpression_369_Var);
		final EList<? extends EObject> Expr_369_list = AdditiveExpression_369_Var.getExpr();
		Assert.assertNotNull(Expr_369_list);
		Assert.assertEquals(1, Expr_369_list.size());
		final MultiplicativeExpression MultiplicativeExpression_370_Var = (MultiplicativeExpression)Expr_369_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_370_Var);
		final EList<? extends EObject> Expr_370_list = MultiplicativeExpression_370_Var.getExpr();
		Assert.assertNotNull(Expr_370_list);
		Assert.assertEquals(1, Expr_370_list.size());
		final CastExpression CastExpression_371_Var = (CastExpression)Expr_370_list.get(0);
		Assert.assertNotNull(CastExpression_371_Var);
		final UnaryExpression UnaryExpression_372_Var = (UnaryExpression)CastExpression_371_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_372_Var);
		final PostfixExpression PostfixExpression_373_Var = (PostfixExpression)UnaryExpression_372_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_373_Var);
		final EList<? extends EObject> Expr_373_list = PostfixExpression_373_Var.getExpr();
		Assert.assertNotNull(Expr_373_list);
		Assert.assertEquals(1, Expr_373_list.size());
		final PrimaryExpression PrimaryExpression_374_Var = (PrimaryExpression)Expr_373_list.get(0);
		Assert.assertNotNull(PrimaryExpression_374_Var);
		Assert.assertEquals("NULL", PrimaryExpression_374_Var.getId());
		final Statement Statement_375_Var = (Statement)SelectionStatement_349_Var.getIfStatement();
		Assert.assertNotNull(Statement_375_Var);
		final CompoundStatement CompoundStatement_376_Var = (CompoundStatement)Statement_375_Var.getStmt();
		Assert.assertNotNull(CompoundStatement_376_Var);
		final BodyStatement BodyStatement_377_Var = (BodyStatement)CompoundStatement_376_Var.getBody();
		Assert.assertNotNull(BodyStatement_377_Var);
		final EList<? extends EObject> BlockList_377_list = BodyStatement_377_Var.getBlockList();
		Assert.assertNotNull(BlockList_377_list);
		Assert.assertEquals(1, BlockList_377_list.size());
		final BlockList BlockList_378_Var = (BlockList)BlockList_377_list.get(0);
		Assert.assertNotNull(BlockList_378_Var);
		final EList<? extends EObject> Statement_378_list = BlockList_378_Var.getStatement();
		Assert.assertNotNull(Statement_378_list);
		Assert.assertEquals(2, Statement_378_list.size());
		final Statement Statement_379_Var = (Statement)Statement_378_list.get(0);
		Assert.assertNotNull(Statement_379_Var);
		final ExpressionStatement ExpressionStatement_380_Var = (ExpressionStatement)Statement_379_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_380_Var);
		final Expression Expression_381_Var = (Expression)ExpressionStatement_380_Var.getExpression();
		Assert.assertNotNull(Expression_381_Var);
		final EList<? extends EObject> ExprExpr_381_list = Expression_381_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_381_list);
		Assert.assertEquals(1, ExprExpr_381_list.size());
		final AssignmentExpression AssignmentExpression_382_Var = (AssignmentExpression)ExprExpr_381_list.get(0);
		Assert.assertNotNull(AssignmentExpression_382_Var);
		final ConditionalExpression ConditionalExpression_383_Var = (ConditionalExpression)AssignmentExpression_382_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_383_Var);
		final LogicalOrExpression LogicalOrExpression_384_Var = (LogicalOrExpression)ConditionalExpression_383_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_384_Var);
		final EList<? extends EObject> Expr_384_list = LogicalOrExpression_384_Var.getExpr();
		Assert.assertNotNull(Expr_384_list);
		Assert.assertEquals(1, Expr_384_list.size());
		final LogicalAndExpression LogicalAndExpression_385_Var = (LogicalAndExpression)Expr_384_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_385_Var);
		final EList<? extends EObject> Expr_385_list = LogicalAndExpression_385_Var.getExpr();
		Assert.assertNotNull(Expr_385_list);
		Assert.assertEquals(1, Expr_385_list.size());
		final InclusiveOrExpression InclusiveOrExpression_386_Var = (InclusiveOrExpression)Expr_385_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_386_Var);
		final EList<? extends EObject> Expr_386_list = InclusiveOrExpression_386_Var.getExpr();
		Assert.assertNotNull(Expr_386_list);
		Assert.assertEquals(1, Expr_386_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_387_Var = (ExclusiveOrExpression)Expr_386_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_387_Var);
		final EList<? extends EObject> Expr_387_list = ExclusiveOrExpression_387_Var.getExpr();
		Assert.assertNotNull(Expr_387_list);
		Assert.assertEquals(1, Expr_387_list.size());
		final AndExpression AndExpression_388_Var = (AndExpression)Expr_387_list.get(0);
		Assert.assertNotNull(AndExpression_388_Var);
		final EList<? extends EObject> Expr_388_list = AndExpression_388_Var.getExpr();
		Assert.assertNotNull(Expr_388_list);
		Assert.assertEquals(1, Expr_388_list.size());
		final EqualityExpression EqualityExpression_389_Var = (EqualityExpression)Expr_388_list.get(0);
		Assert.assertNotNull(EqualityExpression_389_Var);
		final EList<? extends EObject> Expr_389_list = EqualityExpression_389_Var.getExpr();
		Assert.assertNotNull(Expr_389_list);
		Assert.assertEquals(1, Expr_389_list.size());
		final RelationalExpression RelationalExpression_390_Var = (RelationalExpression)Expr_389_list.get(0);
		Assert.assertNotNull(RelationalExpression_390_Var);
		final EList<? extends EObject> Expr_390_list = RelationalExpression_390_Var.getExpr();
		Assert.assertNotNull(Expr_390_list);
		Assert.assertEquals(1, Expr_390_list.size());
		final ShiftExpression ShiftExpression_391_Var = (ShiftExpression)Expr_390_list.get(0);
		Assert.assertNotNull(ShiftExpression_391_Var);
		final EList<? extends EObject> Expr_391_list = ShiftExpression_391_Var.getExpr();
		Assert.assertNotNull(Expr_391_list);
		Assert.assertEquals(1, Expr_391_list.size());
		final AdditiveExpression AdditiveExpression_392_Var = (AdditiveExpression)Expr_391_list.get(0);
		Assert.assertNotNull(AdditiveExpression_392_Var);
		final EList<? extends EObject> Expr_392_list = AdditiveExpression_392_Var.getExpr();
		Assert.assertNotNull(Expr_392_list);
		Assert.assertEquals(1, Expr_392_list.size());
		final MultiplicativeExpression MultiplicativeExpression_393_Var = (MultiplicativeExpression)Expr_392_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_393_Var);
		final EList<? extends EObject> Expr_393_list = MultiplicativeExpression_393_Var.getExpr();
		Assert.assertNotNull(Expr_393_list);
		Assert.assertEquals(1, Expr_393_list.size());
		final CastExpression CastExpression_394_Var = (CastExpression)Expr_393_list.get(0);
		Assert.assertNotNull(CastExpression_394_Var);
		final UnaryExpression UnaryExpression_395_Var = (UnaryExpression)CastExpression_394_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_395_Var);
		final PostfixExpression PostfixExpression_396_Var = (PostfixExpression)UnaryExpression_395_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_396_Var);
		final EList<? extends EObject> Expr_396_list = PostfixExpression_396_Var.getExpr();
		Assert.assertNotNull(Expr_396_list);
		Assert.assertEquals(1, Expr_396_list.size());
		final PrimaryExpression PrimaryExpression_397_Var = (PrimaryExpression)Expr_396_list.get(0);
		Assert.assertNotNull(PrimaryExpression_397_Var);
		Assert.assertEquals("printf", PrimaryExpression_397_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_397_list = PostfixExpression_396_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_397_list);
		Assert.assertEquals(1, ArgumentExpressionList_397_list.size());
		final ArgumentExpressionList ArgumentExpressionList_398_Var = (ArgumentExpressionList)ArgumentExpressionList_397_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_398_Var);
		final EList<? extends EObject> Expr_398_list = ArgumentExpressionList_398_Var.getExpr();
		Assert.assertNotNull(Expr_398_list);
		Assert.assertEquals(1, Expr_398_list.size());
		final AssignmentExpression AssignmentExpression_399_Var = (AssignmentExpression)Expr_398_list.get(0);
		Assert.assertNotNull(AssignmentExpression_399_Var);
		final ConditionalExpression ConditionalExpression_400_Var = (ConditionalExpression)AssignmentExpression_399_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_400_Var);
		final LogicalOrExpression LogicalOrExpression_401_Var = (LogicalOrExpression)ConditionalExpression_400_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_401_Var);
		final EList<? extends EObject> Expr_401_list = LogicalOrExpression_401_Var.getExpr();
		Assert.assertNotNull(Expr_401_list);
		Assert.assertEquals(1, Expr_401_list.size());
		final LogicalAndExpression LogicalAndExpression_402_Var = (LogicalAndExpression)Expr_401_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_402_Var);
		final EList<? extends EObject> Expr_402_list = LogicalAndExpression_402_Var.getExpr();
		Assert.assertNotNull(Expr_402_list);
		Assert.assertEquals(1, Expr_402_list.size());
		final InclusiveOrExpression InclusiveOrExpression_403_Var = (InclusiveOrExpression)Expr_402_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_403_Var);
		final EList<? extends EObject> Expr_403_list = InclusiveOrExpression_403_Var.getExpr();
		Assert.assertNotNull(Expr_403_list);
		Assert.assertEquals(1, Expr_403_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_404_Var = (ExclusiveOrExpression)Expr_403_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_404_Var);
		final EList<? extends EObject> Expr_404_list = ExclusiveOrExpression_404_Var.getExpr();
		Assert.assertNotNull(Expr_404_list);
		Assert.assertEquals(1, Expr_404_list.size());
		final AndExpression AndExpression_405_Var = (AndExpression)Expr_404_list.get(0);
		Assert.assertNotNull(AndExpression_405_Var);
		final EList<? extends EObject> Expr_405_list = AndExpression_405_Var.getExpr();
		Assert.assertNotNull(Expr_405_list);
		Assert.assertEquals(1, Expr_405_list.size());
		final EqualityExpression EqualityExpression_406_Var = (EqualityExpression)Expr_405_list.get(0);
		Assert.assertNotNull(EqualityExpression_406_Var);
		final EList<? extends EObject> Expr_406_list = EqualityExpression_406_Var.getExpr();
		Assert.assertNotNull(Expr_406_list);
		Assert.assertEquals(1, Expr_406_list.size());
		final RelationalExpression RelationalExpression_407_Var = (RelationalExpression)Expr_406_list.get(0);
		Assert.assertNotNull(RelationalExpression_407_Var);
		final EList<? extends EObject> Expr_407_list = RelationalExpression_407_Var.getExpr();
		Assert.assertNotNull(Expr_407_list);
		Assert.assertEquals(1, Expr_407_list.size());
		final ShiftExpression ShiftExpression_408_Var = (ShiftExpression)Expr_407_list.get(0);
		Assert.assertNotNull(ShiftExpression_408_Var);
		final EList<? extends EObject> Expr_408_list = ShiftExpression_408_Var.getExpr();
		Assert.assertNotNull(Expr_408_list);
		Assert.assertEquals(1, Expr_408_list.size());
		final AdditiveExpression AdditiveExpression_409_Var = (AdditiveExpression)Expr_408_list.get(0);
		Assert.assertNotNull(AdditiveExpression_409_Var);
		final EList<? extends EObject> Expr_409_list = AdditiveExpression_409_Var.getExpr();
		Assert.assertNotNull(Expr_409_list);
		Assert.assertEquals(1, Expr_409_list.size());
		final MultiplicativeExpression MultiplicativeExpression_410_Var = (MultiplicativeExpression)Expr_409_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_410_Var);
		final EList<? extends EObject> Expr_410_list = MultiplicativeExpression_410_Var.getExpr();
		Assert.assertNotNull(Expr_410_list);
		Assert.assertEquals(1, Expr_410_list.size());
		final CastExpression CastExpression_411_Var = (CastExpression)Expr_410_list.get(0);
		Assert.assertNotNull(CastExpression_411_Var);
		final UnaryExpression UnaryExpression_412_Var = (UnaryExpression)CastExpression_411_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_412_Var);
		final PostfixExpression PostfixExpression_413_Var = (PostfixExpression)UnaryExpression_412_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_413_Var);
		final EList<? extends EObject> Expr_413_list = PostfixExpression_413_Var.getExpr();
		Assert.assertNotNull(Expr_413_list);
		Assert.assertEquals(1, Expr_413_list.size());
		final PrimaryExpression PrimaryExpression_414_Var = (PrimaryExpression)Expr_413_list.get(0);
		Assert.assertNotNull(PrimaryExpression_414_Var);
		final Constant Constant_415_Var = (Constant)PrimaryExpression_414_Var.getConst();
		Assert.assertNotNull(Constant_415_Var);
		Assert.assertEquals("\"Could not reserve space for new employee!\\n\"", Constant_415_Var.getStr());
		Assert.assertEquals(";", ExpressionStatement_380_Var.getSemi());
		final Statement Statement_416_Var = (Statement)Statement_378_list.get(1);
		Assert.assertNotNull(Statement_416_Var);
		final JumpStatement JumpStatement_417_Var = (JumpStatement)Statement_416_Var.getStmt();
		Assert.assertNotNull(JumpStatement_417_Var);
		final Expression Expression_418_Var = (Expression)JumpStatement_417_Var.getExpr();
		Assert.assertNotNull(Expression_418_Var);
		final EList<? extends EObject> ExprExpr_418_list = Expression_418_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_418_list);
		Assert.assertEquals(1, ExprExpr_418_list.size());
		final AssignmentExpression AssignmentExpression_419_Var = (AssignmentExpression)ExprExpr_418_list.get(0);
		Assert.assertNotNull(AssignmentExpression_419_Var);
		final ConditionalExpression ConditionalExpression_420_Var = (ConditionalExpression)AssignmentExpression_419_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_420_Var);
		final LogicalOrExpression LogicalOrExpression_421_Var = (LogicalOrExpression)ConditionalExpression_420_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_421_Var);
		final EList<? extends EObject> Expr_421_list = LogicalOrExpression_421_Var.getExpr();
		Assert.assertNotNull(Expr_421_list);
		Assert.assertEquals(1, Expr_421_list.size());
		final LogicalAndExpression LogicalAndExpression_422_Var = (LogicalAndExpression)Expr_421_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_422_Var);
		final EList<? extends EObject> Expr_422_list = LogicalAndExpression_422_Var.getExpr();
		Assert.assertNotNull(Expr_422_list);
		Assert.assertEquals(1, Expr_422_list.size());
		final InclusiveOrExpression InclusiveOrExpression_423_Var = (InclusiveOrExpression)Expr_422_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_423_Var);
		final EList<? extends EObject> Expr_423_list = InclusiveOrExpression_423_Var.getExpr();
		Assert.assertNotNull(Expr_423_list);
		Assert.assertEquals(1, Expr_423_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_424_Var = (ExclusiveOrExpression)Expr_423_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_424_Var);
		final EList<? extends EObject> Expr_424_list = ExclusiveOrExpression_424_Var.getExpr();
		Assert.assertNotNull(Expr_424_list);
		Assert.assertEquals(1, Expr_424_list.size());
		final AndExpression AndExpression_425_Var = (AndExpression)Expr_424_list.get(0);
		Assert.assertNotNull(AndExpression_425_Var);
		final EList<? extends EObject> Expr_425_list = AndExpression_425_Var.getExpr();
		Assert.assertNotNull(Expr_425_list);
		Assert.assertEquals(1, Expr_425_list.size());
		final EqualityExpression EqualityExpression_426_Var = (EqualityExpression)Expr_425_list.get(0);
		Assert.assertNotNull(EqualityExpression_426_Var);
		final EList<? extends EObject> Expr_426_list = EqualityExpression_426_Var.getExpr();
		Assert.assertNotNull(Expr_426_list);
		Assert.assertEquals(1, Expr_426_list.size());
		final RelationalExpression RelationalExpression_427_Var = (RelationalExpression)Expr_426_list.get(0);
		Assert.assertNotNull(RelationalExpression_427_Var);
		final EList<? extends EObject> Expr_427_list = RelationalExpression_427_Var.getExpr();
		Assert.assertNotNull(Expr_427_list);
		Assert.assertEquals(1, Expr_427_list.size());
		final ShiftExpression ShiftExpression_428_Var = (ShiftExpression)Expr_427_list.get(0);
		Assert.assertNotNull(ShiftExpression_428_Var);
		final EList<? extends EObject> Expr_428_list = ShiftExpression_428_Var.getExpr();
		Assert.assertNotNull(Expr_428_list);
		Assert.assertEquals(1, Expr_428_list.size());
		final AdditiveExpression AdditiveExpression_429_Var = (AdditiveExpression)Expr_428_list.get(0);
		Assert.assertNotNull(AdditiveExpression_429_Var);
		final EList<? extends EObject> Expr_429_list = AdditiveExpression_429_Var.getExpr();
		Assert.assertNotNull(Expr_429_list);
		Assert.assertEquals(1, Expr_429_list.size());
		final MultiplicativeExpression MultiplicativeExpression_430_Var = (MultiplicativeExpression)Expr_429_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_430_Var);
		final EList<? extends EObject> Expr_430_list = MultiplicativeExpression_430_Var.getExpr();
		Assert.assertNotNull(Expr_430_list);
		Assert.assertEquals(1, Expr_430_list.size());
		final CastExpression CastExpression_431_Var = (CastExpression)Expr_430_list.get(0);
		Assert.assertNotNull(CastExpression_431_Var);
		final UnaryExpression UnaryExpression_432_Var = (UnaryExpression)CastExpression_431_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_432_Var);
		final UnaryOperator UnaryOperator_433_Var = (UnaryOperator)UnaryExpression_432_Var.getOp();
		Assert.assertNotNull(UnaryOperator_433_Var);
		Assert.assertEquals("-", UnaryOperator_433_Var.getOp());
		final CastExpression CastExpression_434_Var = (CastExpression)UnaryExpression_432_Var.getExpr();
		Assert.assertNotNull(CastExpression_434_Var);
		final UnaryExpression UnaryExpression_435_Var = (UnaryExpression)CastExpression_434_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_435_Var);
		final PostfixExpression PostfixExpression_436_Var = (PostfixExpression)UnaryExpression_435_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_436_Var);
		final EList<? extends EObject> Expr_436_list = PostfixExpression_436_Var.getExpr();
		Assert.assertNotNull(Expr_436_list);
		Assert.assertEquals(1, Expr_436_list.size());
		final PrimaryExpression PrimaryExpression_437_Var = (PrimaryExpression)Expr_436_list.get(0);
		Assert.assertNotNull(PrimaryExpression_437_Var);
		final Constant Constant_438_Var = (Constant)PrimaryExpression_437_Var.getConst();
		Assert.assertNotNull(Constant_438_Var);
		Assert.assertEquals("1", Constant_438_Var.getDec());
		Assert.assertEquals("return", JumpStatement_417_Var.getReturn());
		Assert.assertEquals(";", JumpStatement_417_Var.getSemi());
		final Statement Statement_439_Var = (Statement)Statement_347_list.get(1);
		Assert.assertNotNull(Statement_439_Var);
		final ExpressionStatement ExpressionStatement_440_Var = (ExpressionStatement)Statement_439_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_440_Var);
		final Expression Expression_441_Var = (Expression)ExpressionStatement_440_Var.getExpression();
		Assert.assertNotNull(Expression_441_Var);
		final EList<? extends EObject> ExprExpr_441_list = Expression_441_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_441_list);
		Assert.assertEquals(1, ExprExpr_441_list.size());
		final AssignmentExpression AssignmentExpression_442_Var = (AssignmentExpression)ExprExpr_441_list.get(0);
		Assert.assertNotNull(AssignmentExpression_442_Var);
		final ConditionalExpression ConditionalExpression_443_Var = (ConditionalExpression)AssignmentExpression_442_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_443_Var);
		final LogicalOrExpression LogicalOrExpression_444_Var = (LogicalOrExpression)ConditionalExpression_443_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_444_Var);
		final EList<? extends EObject> Expr_444_list = LogicalOrExpression_444_Var.getExpr();
		Assert.assertNotNull(Expr_444_list);
		Assert.assertEquals(1, Expr_444_list.size());
		final LogicalAndExpression LogicalAndExpression_445_Var = (LogicalAndExpression)Expr_444_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_445_Var);
		final EList<? extends EObject> Expr_445_list = LogicalAndExpression_445_Var.getExpr();
		Assert.assertNotNull(Expr_445_list);
		Assert.assertEquals(1, Expr_445_list.size());
		final InclusiveOrExpression InclusiveOrExpression_446_Var = (InclusiveOrExpression)Expr_445_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_446_Var);
		final EList<? extends EObject> Expr_446_list = InclusiveOrExpression_446_Var.getExpr();
		Assert.assertNotNull(Expr_446_list);
		Assert.assertEquals(1, Expr_446_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_447_Var = (ExclusiveOrExpression)Expr_446_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_447_Var);
		final EList<? extends EObject> Expr_447_list = ExclusiveOrExpression_447_Var.getExpr();
		Assert.assertNotNull(Expr_447_list);
		Assert.assertEquals(1, Expr_447_list.size());
		final AndExpression AndExpression_448_Var = (AndExpression)Expr_447_list.get(0);
		Assert.assertNotNull(AndExpression_448_Var);
		final EList<? extends EObject> Expr_448_list = AndExpression_448_Var.getExpr();
		Assert.assertNotNull(Expr_448_list);
		Assert.assertEquals(1, Expr_448_list.size());
		final EqualityExpression EqualityExpression_449_Var = (EqualityExpression)Expr_448_list.get(0);
		Assert.assertNotNull(EqualityExpression_449_Var);
		final EList<? extends EObject> Expr_449_list = EqualityExpression_449_Var.getExpr();
		Assert.assertNotNull(Expr_449_list);
		Assert.assertEquals(1, Expr_449_list.size());
		final RelationalExpression RelationalExpression_450_Var = (RelationalExpression)Expr_449_list.get(0);
		Assert.assertNotNull(RelationalExpression_450_Var);
		final EList<? extends EObject> Expr_450_list = RelationalExpression_450_Var.getExpr();
		Assert.assertNotNull(Expr_450_list);
		Assert.assertEquals(1, Expr_450_list.size());
		final ShiftExpression ShiftExpression_451_Var = (ShiftExpression)Expr_450_list.get(0);
		Assert.assertNotNull(ShiftExpression_451_Var);
		final EList<? extends EObject> Expr_451_list = ShiftExpression_451_Var.getExpr();
		Assert.assertNotNull(Expr_451_list);
		Assert.assertEquals(1, Expr_451_list.size());
		final AdditiveExpression AdditiveExpression_452_Var = (AdditiveExpression)Expr_451_list.get(0);
		Assert.assertNotNull(AdditiveExpression_452_Var);
		final EList<? extends EObject> Expr_452_list = AdditiveExpression_452_Var.getExpr();
		Assert.assertNotNull(Expr_452_list);
		Assert.assertEquals(1, Expr_452_list.size());
		final MultiplicativeExpression MultiplicativeExpression_453_Var = (MultiplicativeExpression)Expr_452_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_453_Var);
		final EList<? extends EObject> Expr_453_list = MultiplicativeExpression_453_Var.getExpr();
		Assert.assertNotNull(Expr_453_list);
		Assert.assertEquals(1, Expr_453_list.size());
		final CastExpression CastExpression_454_Var = (CastExpression)Expr_453_list.get(0);
		Assert.assertNotNull(CastExpression_454_Var);
		final UnaryExpression UnaryExpression_455_Var = (UnaryExpression)CastExpression_454_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_455_Var);
		final PostfixExpression PostfixExpression_456_Var = (PostfixExpression)UnaryExpression_455_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_456_Var);
		final EList<? extends EObject> Expr_456_list = PostfixExpression_456_Var.getExpr();
		Assert.assertNotNull(Expr_456_list);
		Assert.assertEquals(1, Expr_456_list.size());
		final PrimaryExpression PrimaryExpression_457_Var = (PrimaryExpression)Expr_456_list.get(0);
		Assert.assertNotNull(PrimaryExpression_457_Var);
		Assert.assertEquals("print", PrimaryExpression_457_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_457_list = PostfixExpression_456_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_457_list);
		Assert.assertEquals(1, ArgumentExpressionList_457_list.size());
		final ArgumentExpressionList ArgumentExpressionList_458_Var = (ArgumentExpressionList)ArgumentExpressionList_457_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_458_Var);
		final EList<? extends EObject> Expr_458_list = ArgumentExpressionList_458_Var.getExpr();
		Assert.assertNotNull(Expr_458_list);
		Assert.assertEquals(1, Expr_458_list.size());
		final AssignmentExpression AssignmentExpression_459_Var = (AssignmentExpression)Expr_458_list.get(0);
		Assert.assertNotNull(AssignmentExpression_459_Var);
		final ConditionalExpression ConditionalExpression_460_Var = (ConditionalExpression)AssignmentExpression_459_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_460_Var);
		final LogicalOrExpression LogicalOrExpression_461_Var = (LogicalOrExpression)ConditionalExpression_460_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_461_Var);
		final EList<? extends EObject> Expr_461_list = LogicalOrExpression_461_Var.getExpr();
		Assert.assertNotNull(Expr_461_list);
		Assert.assertEquals(1, Expr_461_list.size());
		final LogicalAndExpression LogicalAndExpression_462_Var = (LogicalAndExpression)Expr_461_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_462_Var);
		final EList<? extends EObject> Expr_462_list = LogicalAndExpression_462_Var.getExpr();
		Assert.assertNotNull(Expr_462_list);
		Assert.assertEquals(1, Expr_462_list.size());
		final InclusiveOrExpression InclusiveOrExpression_463_Var = (InclusiveOrExpression)Expr_462_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_463_Var);
		final EList<? extends EObject> Expr_463_list = InclusiveOrExpression_463_Var.getExpr();
		Assert.assertNotNull(Expr_463_list);
		Assert.assertEquals(1, Expr_463_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_464_Var = (ExclusiveOrExpression)Expr_463_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_464_Var);
		final EList<? extends EObject> Expr_464_list = ExclusiveOrExpression_464_Var.getExpr();
		Assert.assertNotNull(Expr_464_list);
		Assert.assertEquals(1, Expr_464_list.size());
		final AndExpression AndExpression_465_Var = (AndExpression)Expr_464_list.get(0);
		Assert.assertNotNull(AndExpression_465_Var);
		final EList<? extends EObject> Expr_465_list = AndExpression_465_Var.getExpr();
		Assert.assertNotNull(Expr_465_list);
		Assert.assertEquals(1, Expr_465_list.size());
		final EqualityExpression EqualityExpression_466_Var = (EqualityExpression)Expr_465_list.get(0);
		Assert.assertNotNull(EqualityExpression_466_Var);
		final EList<? extends EObject> Expr_466_list = EqualityExpression_466_Var.getExpr();
		Assert.assertNotNull(Expr_466_list);
		Assert.assertEquals(1, Expr_466_list.size());
		final RelationalExpression RelationalExpression_467_Var = (RelationalExpression)Expr_466_list.get(0);
		Assert.assertNotNull(RelationalExpression_467_Var);
		final EList<? extends EObject> Expr_467_list = RelationalExpression_467_Var.getExpr();
		Assert.assertNotNull(Expr_467_list);
		Assert.assertEquals(1, Expr_467_list.size());
		final ShiftExpression ShiftExpression_468_Var = (ShiftExpression)Expr_467_list.get(0);
		Assert.assertNotNull(ShiftExpression_468_Var);
		final EList<? extends EObject> Expr_468_list = ShiftExpression_468_Var.getExpr();
		Assert.assertNotNull(Expr_468_list);
		Assert.assertEquals(1, Expr_468_list.size());
		final AdditiveExpression AdditiveExpression_469_Var = (AdditiveExpression)Expr_468_list.get(0);
		Assert.assertNotNull(AdditiveExpression_469_Var);
		final EList<? extends EObject> Expr_469_list = AdditiveExpression_469_Var.getExpr();
		Assert.assertNotNull(Expr_469_list);
		Assert.assertEquals(1, Expr_469_list.size());
		final MultiplicativeExpression MultiplicativeExpression_470_Var = (MultiplicativeExpression)Expr_469_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_470_Var);
		final EList<? extends EObject> Expr_470_list = MultiplicativeExpression_470_Var.getExpr();
		Assert.assertNotNull(Expr_470_list);
		Assert.assertEquals(1, Expr_470_list.size());
		final CastExpression CastExpression_471_Var = (CastExpression)Expr_470_list.get(0);
		Assert.assertNotNull(CastExpression_471_Var);
		final UnaryExpression UnaryExpression_472_Var = (UnaryExpression)CastExpression_471_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_472_Var);
		final UnaryOperator UnaryOperator_473_Var = (UnaryOperator)UnaryExpression_472_Var.getOp();
		Assert.assertNotNull(UnaryOperator_473_Var);
		Assert.assertEquals("&", UnaryOperator_473_Var.getOp());
		final CastExpression CastExpression_474_Var = (CastExpression)UnaryExpression_472_Var.getExpr();
		Assert.assertNotNull(CastExpression_474_Var);
		final UnaryExpression UnaryExpression_475_Var = (UnaryExpression)CastExpression_474_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_475_Var);
		final PostfixExpression PostfixExpression_476_Var = (PostfixExpression)UnaryExpression_475_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_476_Var);
		final EList<? extends EObject> Expr_476_list = PostfixExpression_476_Var.getExpr();
		Assert.assertNotNull(Expr_476_list);
		Assert.assertEquals(1, Expr_476_list.size());
		final PrimaryExpression PrimaryExpression_477_Var = (PrimaryExpression)Expr_476_list.get(0);
		Assert.assertNotNull(PrimaryExpression_477_Var);
		Assert.assertEquals("joe", PrimaryExpression_477_Var.getId());
		Assert.assertEquals(";", ExpressionStatement_440_Var.getSemi());
		final Statement Statement_478_Var = (Statement)Statement_347_list.get(2);
		Assert.assertNotNull(Statement_478_Var);
		final ExpressionStatement ExpressionStatement_479_Var = (ExpressionStatement)Statement_478_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_479_Var);
		final Expression Expression_480_Var = (Expression)ExpressionStatement_479_Var.getExpression();
		Assert.assertNotNull(Expression_480_Var);
		final EList<? extends EObject> ExprExpr_480_list = Expression_480_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_480_list);
		Assert.assertEquals(1, ExprExpr_480_list.size());
		final AssignmentExpression AssignmentExpression_481_Var = (AssignmentExpression)ExprExpr_480_list.get(0);
		Assert.assertNotNull(AssignmentExpression_481_Var);
		final ConditionalExpression ConditionalExpression_482_Var = (ConditionalExpression)AssignmentExpression_481_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_482_Var);
		final LogicalOrExpression LogicalOrExpression_483_Var = (LogicalOrExpression)ConditionalExpression_482_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_483_Var);
		final EList<? extends EObject> Expr_483_list = LogicalOrExpression_483_Var.getExpr();
		Assert.assertNotNull(Expr_483_list);
		Assert.assertEquals(1, Expr_483_list.size());
		final LogicalAndExpression LogicalAndExpression_484_Var = (LogicalAndExpression)Expr_483_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_484_Var);
		final EList<? extends EObject> Expr_484_list = LogicalAndExpression_484_Var.getExpr();
		Assert.assertNotNull(Expr_484_list);
		Assert.assertEquals(1, Expr_484_list.size());
		final InclusiveOrExpression InclusiveOrExpression_485_Var = (InclusiveOrExpression)Expr_484_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_485_Var);
		final EList<? extends EObject> Expr_485_list = InclusiveOrExpression_485_Var.getExpr();
		Assert.assertNotNull(Expr_485_list);
		Assert.assertEquals(1, Expr_485_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_486_Var = (ExclusiveOrExpression)Expr_485_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_486_Var);
		final EList<? extends EObject> Expr_486_list = ExclusiveOrExpression_486_Var.getExpr();
		Assert.assertNotNull(Expr_486_list);
		Assert.assertEquals(1, Expr_486_list.size());
		final AndExpression AndExpression_487_Var = (AndExpression)Expr_486_list.get(0);
		Assert.assertNotNull(AndExpression_487_Var);
		final EList<? extends EObject> Expr_487_list = AndExpression_487_Var.getExpr();
		Assert.assertNotNull(Expr_487_list);
		Assert.assertEquals(1, Expr_487_list.size());
		final EqualityExpression EqualityExpression_488_Var = (EqualityExpression)Expr_487_list.get(0);
		Assert.assertNotNull(EqualityExpression_488_Var);
		final EList<? extends EObject> Expr_488_list = EqualityExpression_488_Var.getExpr();
		Assert.assertNotNull(Expr_488_list);
		Assert.assertEquals(1, Expr_488_list.size());
		final RelationalExpression RelationalExpression_489_Var = (RelationalExpression)Expr_488_list.get(0);
		Assert.assertNotNull(RelationalExpression_489_Var);
		final EList<? extends EObject> Expr_489_list = RelationalExpression_489_Var.getExpr();
		Assert.assertNotNull(Expr_489_list);
		Assert.assertEquals(1, Expr_489_list.size());
		final ShiftExpression ShiftExpression_490_Var = (ShiftExpression)Expr_489_list.get(0);
		Assert.assertNotNull(ShiftExpression_490_Var);
		final EList<? extends EObject> Expr_490_list = ShiftExpression_490_Var.getExpr();
		Assert.assertNotNull(Expr_490_list);
		Assert.assertEquals(1, Expr_490_list.size());
		final AdditiveExpression AdditiveExpression_491_Var = (AdditiveExpression)Expr_490_list.get(0);
		Assert.assertNotNull(AdditiveExpression_491_Var);
		final EList<? extends EObject> Expr_491_list = AdditiveExpression_491_Var.getExpr();
		Assert.assertNotNull(Expr_491_list);
		Assert.assertEquals(1, Expr_491_list.size());
		final MultiplicativeExpression MultiplicativeExpression_492_Var = (MultiplicativeExpression)Expr_491_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_492_Var);
		final EList<? extends EObject> Expr_492_list = MultiplicativeExpression_492_Var.getExpr();
		Assert.assertNotNull(Expr_492_list);
		Assert.assertEquals(1, Expr_492_list.size());
		final CastExpression CastExpression_493_Var = (CastExpression)Expr_492_list.get(0);
		Assert.assertNotNull(CastExpression_493_Var);
		final UnaryExpression UnaryExpression_494_Var = (UnaryExpression)CastExpression_493_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_494_Var);
		final PostfixExpression PostfixExpression_495_Var = (PostfixExpression)UnaryExpression_494_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_495_Var);
		final EList<? extends EObject> Expr_495_list = PostfixExpression_495_Var.getExpr();
		Assert.assertNotNull(Expr_495_list);
		Assert.assertEquals(1, Expr_495_list.size());
		final PrimaryExpression PrimaryExpression_496_Var = (PrimaryExpression)Expr_495_list.get(0);
		Assert.assertNotNull(PrimaryExpression_496_Var);
		Assert.assertEquals("print", PrimaryExpression_496_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_496_list = PostfixExpression_495_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_496_list);
		Assert.assertEquals(1, ArgumentExpressionList_496_list.size());
		final ArgumentExpressionList ArgumentExpressionList_497_Var = (ArgumentExpressionList)ArgumentExpressionList_496_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_497_Var);
		final EList<? extends EObject> Expr_497_list = ArgumentExpressionList_497_Var.getExpr();
		Assert.assertNotNull(Expr_497_list);
		Assert.assertEquals(1, Expr_497_list.size());
		final AssignmentExpression AssignmentExpression_498_Var = (AssignmentExpression)Expr_497_list.get(0);
		Assert.assertNotNull(AssignmentExpression_498_Var);
		final ConditionalExpression ConditionalExpression_499_Var = (ConditionalExpression)AssignmentExpression_498_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_499_Var);
		final LogicalOrExpression LogicalOrExpression_500_Var = (LogicalOrExpression)ConditionalExpression_499_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_500_Var);
		final EList<? extends EObject> Expr_500_list = LogicalOrExpression_500_Var.getExpr();
		Assert.assertNotNull(Expr_500_list);
		Assert.assertEquals(1, Expr_500_list.size());
		final LogicalAndExpression LogicalAndExpression_501_Var = (LogicalAndExpression)Expr_500_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_501_Var);
		final EList<? extends EObject> Expr_501_list = LogicalAndExpression_501_Var.getExpr();
		Assert.assertNotNull(Expr_501_list);
		Assert.assertEquals(1, Expr_501_list.size());
		final InclusiveOrExpression InclusiveOrExpression_502_Var = (InclusiveOrExpression)Expr_501_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_502_Var);
		final EList<? extends EObject> Expr_502_list = InclusiveOrExpression_502_Var.getExpr();
		Assert.assertNotNull(Expr_502_list);
		Assert.assertEquals(1, Expr_502_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_503_Var = (ExclusiveOrExpression)Expr_502_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_503_Var);
		final EList<? extends EObject> Expr_503_list = ExclusiveOrExpression_503_Var.getExpr();
		Assert.assertNotNull(Expr_503_list);
		Assert.assertEquals(1, Expr_503_list.size());
		final AndExpression AndExpression_504_Var = (AndExpression)Expr_503_list.get(0);
		Assert.assertNotNull(AndExpression_504_Var);
		final EList<? extends EObject> Expr_504_list = AndExpression_504_Var.getExpr();
		Assert.assertNotNull(Expr_504_list);
		Assert.assertEquals(1, Expr_504_list.size());
		final EqualityExpression EqualityExpression_505_Var = (EqualityExpression)Expr_504_list.get(0);
		Assert.assertNotNull(EqualityExpression_505_Var);
		final EList<? extends EObject> Expr_505_list = EqualityExpression_505_Var.getExpr();
		Assert.assertNotNull(Expr_505_list);
		Assert.assertEquals(1, Expr_505_list.size());
		final RelationalExpression RelationalExpression_506_Var = (RelationalExpression)Expr_505_list.get(0);
		Assert.assertNotNull(RelationalExpression_506_Var);
		final EList<? extends EObject> Expr_506_list = RelationalExpression_506_Var.getExpr();
		Assert.assertNotNull(Expr_506_list);
		Assert.assertEquals(1, Expr_506_list.size());
		final ShiftExpression ShiftExpression_507_Var = (ShiftExpression)Expr_506_list.get(0);
		Assert.assertNotNull(ShiftExpression_507_Var);
		final EList<? extends EObject> Expr_507_list = ShiftExpression_507_Var.getExpr();
		Assert.assertNotNull(Expr_507_list);
		Assert.assertEquals(1, Expr_507_list.size());
		final AdditiveExpression AdditiveExpression_508_Var = (AdditiveExpression)Expr_507_list.get(0);
		Assert.assertNotNull(AdditiveExpression_508_Var);
		final EList<? extends EObject> Expr_508_list = AdditiveExpression_508_Var.getExpr();
		Assert.assertNotNull(Expr_508_list);
		Assert.assertEquals(1, Expr_508_list.size());
		final MultiplicativeExpression MultiplicativeExpression_509_Var = (MultiplicativeExpression)Expr_508_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_509_Var);
		final EList<? extends EObject> Expr_509_list = MultiplicativeExpression_509_Var.getExpr();
		Assert.assertNotNull(Expr_509_list);
		Assert.assertEquals(1, Expr_509_list.size());
		final CastExpression CastExpression_510_Var = (CastExpression)Expr_509_list.get(0);
		Assert.assertNotNull(CastExpression_510_Var);
		final UnaryExpression UnaryExpression_511_Var = (UnaryExpression)CastExpression_510_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_511_Var);
		final UnaryOperator UnaryOperator_512_Var = (UnaryOperator)UnaryExpression_511_Var.getOp();
		Assert.assertNotNull(UnaryOperator_512_Var);
		Assert.assertEquals("&", UnaryOperator_512_Var.getOp());
		final CastExpression CastExpression_513_Var = (CastExpression)UnaryExpression_511_Var.getExpr();
		Assert.assertNotNull(CastExpression_513_Var);
		final UnaryExpression UnaryExpression_514_Var = (UnaryExpression)CastExpression_513_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_514_Var);
		final PostfixExpression PostfixExpression_515_Var = (PostfixExpression)UnaryExpression_514_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_515_Var);
		final EList<? extends EObject> Expr_515_list = PostfixExpression_515_Var.getExpr();
		Assert.assertNotNull(Expr_515_list);
		Assert.assertEquals(1, Expr_515_list.size());
		final PrimaryExpression PrimaryExpression_516_Var = (PrimaryExpression)Expr_515_list.get(0);
		Assert.assertNotNull(PrimaryExpression_516_Var);
		Assert.assertEquals("phil", PrimaryExpression_516_Var.getId());
		Assert.assertEquals(";", ExpressionStatement_479_Var.getSemi());
		final Statement Statement_517_Var = (Statement)Statement_347_list.get(3);
		Assert.assertNotNull(Statement_517_Var);
		final ExpressionStatement ExpressionStatement_518_Var = (ExpressionStatement)Statement_517_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_518_Var);
		final Expression Expression_519_Var = (Expression)ExpressionStatement_518_Var.getExpression();
		Assert.assertNotNull(Expression_519_Var);
		final EList<? extends EObject> ExprExpr_519_list = Expression_519_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_519_list);
		Assert.assertEquals(1, ExprExpr_519_list.size());
		final AssignmentExpression AssignmentExpression_520_Var = (AssignmentExpression)ExprExpr_519_list.get(0);
		Assert.assertNotNull(AssignmentExpression_520_Var);
		final UnaryExpression UnaryExpression_521_Var = (UnaryExpression)AssignmentExpression_520_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_521_Var);
		final PostfixExpression PostfixExpression_522_Var = (PostfixExpression)UnaryExpression_521_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_522_Var);
		final EList<? extends EObject> Expr_522_list = PostfixExpression_522_Var.getExpr();
		Assert.assertNotNull(Expr_522_list);
		Assert.assertEquals(1, Expr_522_list.size());
		final PrimaryExpression PrimaryExpression_523_Var = (PrimaryExpression)Expr_522_list.get(0);
		Assert.assertNotNull(PrimaryExpression_523_Var);
		Assert.assertEquals("newEmployee", PrimaryExpression_523_Var.getId());
		Assert.assertEquals("[->]", PostfixExpression_522_Var.getArrow().toString());
		Assert.assertEquals("[id]", PostfixExpression_522_Var.getId().toString());
		final AssignmentOperator AssignmentOperator_524_Var = (AssignmentOperator)AssignmentExpression_520_Var.getOp();
		Assert.assertNotNull(AssignmentOperator_524_Var);
		Assert.assertEquals("=", AssignmentOperator_524_Var.getOp());
		final AssignmentExpression AssignmentExpression_525_Var = (AssignmentExpression)AssignmentExpression_520_Var.getAssignmentExpr();
		Assert.assertNotNull(AssignmentExpression_525_Var);
		final ConditionalExpression ConditionalExpression_526_Var = (ConditionalExpression)AssignmentExpression_525_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_526_Var);
		final LogicalOrExpression LogicalOrExpression_527_Var = (LogicalOrExpression)ConditionalExpression_526_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_527_Var);
		final EList<? extends EObject> Expr_527_list = LogicalOrExpression_527_Var.getExpr();
		Assert.assertNotNull(Expr_527_list);
		Assert.assertEquals(1, Expr_527_list.size());
		final LogicalAndExpression LogicalAndExpression_528_Var = (LogicalAndExpression)Expr_527_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_528_Var);
		final EList<? extends EObject> Expr_528_list = LogicalAndExpression_528_Var.getExpr();
		Assert.assertNotNull(Expr_528_list);
		Assert.assertEquals(1, Expr_528_list.size());
		final InclusiveOrExpression InclusiveOrExpression_529_Var = (InclusiveOrExpression)Expr_528_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_529_Var);
		final EList<? extends EObject> Expr_529_list = InclusiveOrExpression_529_Var.getExpr();
		Assert.assertNotNull(Expr_529_list);
		Assert.assertEquals(1, Expr_529_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_530_Var = (ExclusiveOrExpression)Expr_529_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_530_Var);
		final EList<? extends EObject> Expr_530_list = ExclusiveOrExpression_530_Var.getExpr();
		Assert.assertNotNull(Expr_530_list);
		Assert.assertEquals(1, Expr_530_list.size());
		final AndExpression AndExpression_531_Var = (AndExpression)Expr_530_list.get(0);
		Assert.assertNotNull(AndExpression_531_Var);
		final EList<? extends EObject> Expr_531_list = AndExpression_531_Var.getExpr();
		Assert.assertNotNull(Expr_531_list);
		Assert.assertEquals(1, Expr_531_list.size());
		final EqualityExpression EqualityExpression_532_Var = (EqualityExpression)Expr_531_list.get(0);
		Assert.assertNotNull(EqualityExpression_532_Var);
		final EList<? extends EObject> Expr_532_list = EqualityExpression_532_Var.getExpr();
		Assert.assertNotNull(Expr_532_list);
		Assert.assertEquals(1, Expr_532_list.size());
		final RelationalExpression RelationalExpression_533_Var = (RelationalExpression)Expr_532_list.get(0);
		Assert.assertNotNull(RelationalExpression_533_Var);
		final EList<? extends EObject> Expr_533_list = RelationalExpression_533_Var.getExpr();
		Assert.assertNotNull(Expr_533_list);
		Assert.assertEquals(1, Expr_533_list.size());
		final ShiftExpression ShiftExpression_534_Var = (ShiftExpression)Expr_533_list.get(0);
		Assert.assertNotNull(ShiftExpression_534_Var);
		final EList<? extends EObject> Expr_534_list = ShiftExpression_534_Var.getExpr();
		Assert.assertNotNull(Expr_534_list);
		Assert.assertEquals(1, Expr_534_list.size());
		final AdditiveExpression AdditiveExpression_535_Var = (AdditiveExpression)Expr_534_list.get(0);
		Assert.assertNotNull(AdditiveExpression_535_Var);
		final EList<? extends EObject> Expr_535_list = AdditiveExpression_535_Var.getExpr();
		Assert.assertNotNull(Expr_535_list);
		Assert.assertEquals(1, Expr_535_list.size());
		final MultiplicativeExpression MultiplicativeExpression_536_Var = (MultiplicativeExpression)Expr_535_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_536_Var);
		final EList<? extends EObject> Expr_536_list = MultiplicativeExpression_536_Var.getExpr();
		Assert.assertNotNull(Expr_536_list);
		Assert.assertEquals(1, Expr_536_list.size());
		final CastExpression CastExpression_537_Var = (CastExpression)Expr_536_list.get(0);
		Assert.assertNotNull(CastExpression_537_Var);
		final UnaryExpression UnaryExpression_538_Var = (UnaryExpression)CastExpression_537_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_538_Var);
		final PostfixExpression PostfixExpression_539_Var = (PostfixExpression)UnaryExpression_538_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_539_Var);
		final EList<? extends EObject> Expr_539_list = PostfixExpression_539_Var.getExpr();
		Assert.assertNotNull(Expr_539_list);
		Assert.assertEquals(1, Expr_539_list.size());
		final PrimaryExpression PrimaryExpression_540_Var = (PrimaryExpression)Expr_539_list.get(0);
		Assert.assertNotNull(PrimaryExpression_540_Var);
		final Constant Constant_541_Var = (Constant)PrimaryExpression_540_Var.getConst();
		Assert.assertNotNull(Constant_541_Var);
		Assert.assertEquals("0x009", Constant_541_Var.getHex());
		Assert.assertEquals(";", ExpressionStatement_518_Var.getSemi());
		final Statement Statement_542_Var = (Statement)Statement_347_list.get(4);
		Assert.assertNotNull(Statement_542_Var);
		final ExpressionStatement ExpressionStatement_543_Var = (ExpressionStatement)Statement_542_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_543_Var);
		final Expression Expression_544_Var = (Expression)ExpressionStatement_543_Var.getExpression();
		Assert.assertNotNull(Expression_544_Var);
		final EList<? extends EObject> ExprExpr_544_list = Expression_544_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_544_list);
		Assert.assertEquals(1, ExprExpr_544_list.size());
		final AssignmentExpression AssignmentExpression_545_Var = (AssignmentExpression)ExprExpr_544_list.get(0);
		Assert.assertNotNull(AssignmentExpression_545_Var);
		final ConditionalExpression ConditionalExpression_546_Var = (ConditionalExpression)AssignmentExpression_545_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_546_Var);
		final LogicalOrExpression LogicalOrExpression_547_Var = (LogicalOrExpression)ConditionalExpression_546_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_547_Var);
		final EList<? extends EObject> Expr_547_list = LogicalOrExpression_547_Var.getExpr();
		Assert.assertNotNull(Expr_547_list);
		Assert.assertEquals(1, Expr_547_list.size());
		final LogicalAndExpression LogicalAndExpression_548_Var = (LogicalAndExpression)Expr_547_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_548_Var);
		final EList<? extends EObject> Expr_548_list = LogicalAndExpression_548_Var.getExpr();
		Assert.assertNotNull(Expr_548_list);
		Assert.assertEquals(1, Expr_548_list.size());
		final InclusiveOrExpression InclusiveOrExpression_549_Var = (InclusiveOrExpression)Expr_548_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_549_Var);
		final EList<? extends EObject> Expr_549_list = InclusiveOrExpression_549_Var.getExpr();
		Assert.assertNotNull(Expr_549_list);
		Assert.assertEquals(1, Expr_549_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_550_Var = (ExclusiveOrExpression)Expr_549_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_550_Var);
		final EList<? extends EObject> Expr_550_list = ExclusiveOrExpression_550_Var.getExpr();
		Assert.assertNotNull(Expr_550_list);
		Assert.assertEquals(1, Expr_550_list.size());
		final AndExpression AndExpression_551_Var = (AndExpression)Expr_550_list.get(0);
		Assert.assertNotNull(AndExpression_551_Var);
		final EList<? extends EObject> Expr_551_list = AndExpression_551_Var.getExpr();
		Assert.assertNotNull(Expr_551_list);
		Assert.assertEquals(1, Expr_551_list.size());
		final EqualityExpression EqualityExpression_552_Var = (EqualityExpression)Expr_551_list.get(0);
		Assert.assertNotNull(EqualityExpression_552_Var);
		final EList<? extends EObject> Expr_552_list = EqualityExpression_552_Var.getExpr();
		Assert.assertNotNull(Expr_552_list);
		Assert.assertEquals(1, Expr_552_list.size());
		final RelationalExpression RelationalExpression_553_Var = (RelationalExpression)Expr_552_list.get(0);
		Assert.assertNotNull(RelationalExpression_553_Var);
		final EList<? extends EObject> Expr_553_list = RelationalExpression_553_Var.getExpr();
		Assert.assertNotNull(Expr_553_list);
		Assert.assertEquals(1, Expr_553_list.size());
		final ShiftExpression ShiftExpression_554_Var = (ShiftExpression)Expr_553_list.get(0);
		Assert.assertNotNull(ShiftExpression_554_Var);
		final EList<? extends EObject> Expr_554_list = ShiftExpression_554_Var.getExpr();
		Assert.assertNotNull(Expr_554_list);
		Assert.assertEquals(1, Expr_554_list.size());
		final AdditiveExpression AdditiveExpression_555_Var = (AdditiveExpression)Expr_554_list.get(0);
		Assert.assertNotNull(AdditiveExpression_555_Var);
		final EList<? extends EObject> Expr_555_list = AdditiveExpression_555_Var.getExpr();
		Assert.assertNotNull(Expr_555_list);
		Assert.assertEquals(1, Expr_555_list.size());
		final MultiplicativeExpression MultiplicativeExpression_556_Var = (MultiplicativeExpression)Expr_555_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_556_Var);
		final EList<? extends EObject> Expr_556_list = MultiplicativeExpression_556_Var.getExpr();
		Assert.assertNotNull(Expr_556_list);
		Assert.assertEquals(1, Expr_556_list.size());
		final CastExpression CastExpression_557_Var = (CastExpression)Expr_556_list.get(0);
		Assert.assertNotNull(CastExpression_557_Var);
		final UnaryExpression UnaryExpression_558_Var = (UnaryExpression)CastExpression_557_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_558_Var);
		final PostfixExpression PostfixExpression_559_Var = (PostfixExpression)UnaryExpression_558_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_559_Var);
		final EList<? extends EObject> Expr_559_list = PostfixExpression_559_Var.getExpr();
		Assert.assertNotNull(Expr_559_list);
		Assert.assertEquals(1, Expr_559_list.size());
		final PrimaryExpression PrimaryExpression_560_Var = (PrimaryExpression)Expr_559_list.get(0);
		Assert.assertNotNull(PrimaryExpression_560_Var);
		Assert.assertEquals("strcpy", PrimaryExpression_560_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_560_list = PostfixExpression_559_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_560_list);
		Assert.assertEquals(1, ArgumentExpressionList_560_list.size());
		final ArgumentExpressionList ArgumentExpressionList_561_Var = (ArgumentExpressionList)ArgumentExpressionList_560_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_561_Var);
		final EList<? extends EObject> Expr_561_list = ArgumentExpressionList_561_Var.getExpr();
		Assert.assertNotNull(Expr_561_list);
		Assert.assertEquals(2, Expr_561_list.size());
		final AssignmentExpression AssignmentExpression_562_Var = (AssignmentExpression)Expr_561_list.get(0);
		Assert.assertNotNull(AssignmentExpression_562_Var);
		final ConditionalExpression ConditionalExpression_563_Var = (ConditionalExpression)AssignmentExpression_562_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_563_Var);
		final LogicalOrExpression LogicalOrExpression_564_Var = (LogicalOrExpression)ConditionalExpression_563_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_564_Var);
		final EList<? extends EObject> Expr_564_list = LogicalOrExpression_564_Var.getExpr();
		Assert.assertNotNull(Expr_564_list);
		Assert.assertEquals(1, Expr_564_list.size());
		final LogicalAndExpression LogicalAndExpression_565_Var = (LogicalAndExpression)Expr_564_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_565_Var);
		final EList<? extends EObject> Expr_565_list = LogicalAndExpression_565_Var.getExpr();
		Assert.assertNotNull(Expr_565_list);
		Assert.assertEquals(1, Expr_565_list.size());
		final InclusiveOrExpression InclusiveOrExpression_566_Var = (InclusiveOrExpression)Expr_565_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_566_Var);
		final EList<? extends EObject> Expr_566_list = InclusiveOrExpression_566_Var.getExpr();
		Assert.assertNotNull(Expr_566_list);
		Assert.assertEquals(1, Expr_566_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_567_Var = (ExclusiveOrExpression)Expr_566_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_567_Var);
		final EList<? extends EObject> Expr_567_list = ExclusiveOrExpression_567_Var.getExpr();
		Assert.assertNotNull(Expr_567_list);
		Assert.assertEquals(1, Expr_567_list.size());
		final AndExpression AndExpression_568_Var = (AndExpression)Expr_567_list.get(0);
		Assert.assertNotNull(AndExpression_568_Var);
		final EList<? extends EObject> Expr_568_list = AndExpression_568_Var.getExpr();
		Assert.assertNotNull(Expr_568_list);
		Assert.assertEquals(1, Expr_568_list.size());
		final EqualityExpression EqualityExpression_569_Var = (EqualityExpression)Expr_568_list.get(0);
		Assert.assertNotNull(EqualityExpression_569_Var);
		final EList<? extends EObject> Expr_569_list = EqualityExpression_569_Var.getExpr();
		Assert.assertNotNull(Expr_569_list);
		Assert.assertEquals(1, Expr_569_list.size());
		final RelationalExpression RelationalExpression_570_Var = (RelationalExpression)Expr_569_list.get(0);
		Assert.assertNotNull(RelationalExpression_570_Var);
		final EList<? extends EObject> Expr_570_list = RelationalExpression_570_Var.getExpr();
		Assert.assertNotNull(Expr_570_list);
		Assert.assertEquals(1, Expr_570_list.size());
		final ShiftExpression ShiftExpression_571_Var = (ShiftExpression)Expr_570_list.get(0);
		Assert.assertNotNull(ShiftExpression_571_Var);
		final EList<? extends EObject> Expr_571_list = ShiftExpression_571_Var.getExpr();
		Assert.assertNotNull(Expr_571_list);
		Assert.assertEquals(1, Expr_571_list.size());
		final AdditiveExpression AdditiveExpression_572_Var = (AdditiveExpression)Expr_571_list.get(0);
		Assert.assertNotNull(AdditiveExpression_572_Var);
		final EList<? extends EObject> Expr_572_list = AdditiveExpression_572_Var.getExpr();
		Assert.assertNotNull(Expr_572_list);
		Assert.assertEquals(1, Expr_572_list.size());
		final MultiplicativeExpression MultiplicativeExpression_573_Var = (MultiplicativeExpression)Expr_572_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_573_Var);
		final EList<? extends EObject> Expr_573_list = MultiplicativeExpression_573_Var.getExpr();
		Assert.assertNotNull(Expr_573_list);
		Assert.assertEquals(1, Expr_573_list.size());
		final CastExpression CastExpression_574_Var = (CastExpression)Expr_573_list.get(0);
		Assert.assertNotNull(CastExpression_574_Var);
		final UnaryExpression UnaryExpression_575_Var = (UnaryExpression)CastExpression_574_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_575_Var);
		final PostfixExpression PostfixExpression_576_Var = (PostfixExpression)UnaryExpression_575_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_576_Var);
		final EList<? extends EObject> Expr_576_list = PostfixExpression_576_Var.getExpr();
		Assert.assertNotNull(Expr_576_list);
		Assert.assertEquals(1, Expr_576_list.size());
		final PrimaryExpression PrimaryExpression_577_Var = (PrimaryExpression)Expr_576_list.get(0);
		Assert.assertNotNull(PrimaryExpression_577_Var);
		Assert.assertEquals("newEmployee", PrimaryExpression_577_Var.getId());
		Assert.assertEquals("[->]", PostfixExpression_576_Var.getArrow().toString());
		Assert.assertEquals("[name]", PostfixExpression_576_Var.getId().toString());
		final AssignmentExpression AssignmentExpression_578_Var = (AssignmentExpression)Expr_561_list.get(1);
		Assert.assertNotNull(AssignmentExpression_578_Var);
		final ConditionalExpression ConditionalExpression_579_Var = (ConditionalExpression)AssignmentExpression_578_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_579_Var);
		final LogicalOrExpression LogicalOrExpression_580_Var = (LogicalOrExpression)ConditionalExpression_579_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_580_Var);
		final EList<? extends EObject> Expr_580_list = LogicalOrExpression_580_Var.getExpr();
		Assert.assertNotNull(Expr_580_list);
		Assert.assertEquals(1, Expr_580_list.size());
		final LogicalAndExpression LogicalAndExpression_581_Var = (LogicalAndExpression)Expr_580_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_581_Var);
		final EList<? extends EObject> Expr_581_list = LogicalAndExpression_581_Var.getExpr();
		Assert.assertNotNull(Expr_581_list);
		Assert.assertEquals(1, Expr_581_list.size());
		final InclusiveOrExpression InclusiveOrExpression_582_Var = (InclusiveOrExpression)Expr_581_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_582_Var);
		final EList<? extends EObject> Expr_582_list = InclusiveOrExpression_582_Var.getExpr();
		Assert.assertNotNull(Expr_582_list);
		Assert.assertEquals(1, Expr_582_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_583_Var = (ExclusiveOrExpression)Expr_582_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_583_Var);
		final EList<? extends EObject> Expr_583_list = ExclusiveOrExpression_583_Var.getExpr();
		Assert.assertNotNull(Expr_583_list);
		Assert.assertEquals(1, Expr_583_list.size());
		final AndExpression AndExpression_584_Var = (AndExpression)Expr_583_list.get(0);
		Assert.assertNotNull(AndExpression_584_Var);
		final EList<? extends EObject> Expr_584_list = AndExpression_584_Var.getExpr();
		Assert.assertNotNull(Expr_584_list);
		Assert.assertEquals(1, Expr_584_list.size());
		final EqualityExpression EqualityExpression_585_Var = (EqualityExpression)Expr_584_list.get(0);
		Assert.assertNotNull(EqualityExpression_585_Var);
		final EList<? extends EObject> Expr_585_list = EqualityExpression_585_Var.getExpr();
		Assert.assertNotNull(Expr_585_list);
		Assert.assertEquals(1, Expr_585_list.size());
		final RelationalExpression RelationalExpression_586_Var = (RelationalExpression)Expr_585_list.get(0);
		Assert.assertNotNull(RelationalExpression_586_Var);
		final EList<? extends EObject> Expr_586_list = RelationalExpression_586_Var.getExpr();
		Assert.assertNotNull(Expr_586_list);
		Assert.assertEquals(1, Expr_586_list.size());
		final ShiftExpression ShiftExpression_587_Var = (ShiftExpression)Expr_586_list.get(0);
		Assert.assertNotNull(ShiftExpression_587_Var);
		final EList<? extends EObject> Expr_587_list = ShiftExpression_587_Var.getExpr();
		Assert.assertNotNull(Expr_587_list);
		Assert.assertEquals(1, Expr_587_list.size());
		final AdditiveExpression AdditiveExpression_588_Var = (AdditiveExpression)Expr_587_list.get(0);
		Assert.assertNotNull(AdditiveExpression_588_Var);
		final EList<? extends EObject> Expr_588_list = AdditiveExpression_588_Var.getExpr();
		Assert.assertNotNull(Expr_588_list);
		Assert.assertEquals(1, Expr_588_list.size());
		final MultiplicativeExpression MultiplicativeExpression_589_Var = (MultiplicativeExpression)Expr_588_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_589_Var);
		final EList<? extends EObject> Expr_589_list = MultiplicativeExpression_589_Var.getExpr();
		Assert.assertNotNull(Expr_589_list);
		Assert.assertEquals(1, Expr_589_list.size());
		final CastExpression CastExpression_590_Var = (CastExpression)Expr_589_list.get(0);
		Assert.assertNotNull(CastExpression_590_Var);
		final UnaryExpression UnaryExpression_591_Var = (UnaryExpression)CastExpression_590_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_591_Var);
		final PostfixExpression PostfixExpression_592_Var = (PostfixExpression)UnaryExpression_591_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_592_Var);
		final EList<? extends EObject> Expr_592_list = PostfixExpression_592_Var.getExpr();
		Assert.assertNotNull(Expr_592_list);
		Assert.assertEquals(1, Expr_592_list.size());
		final PrimaryExpression PrimaryExpression_593_Var = (PrimaryExpression)Expr_592_list.get(0);
		Assert.assertNotNull(PrimaryExpression_593_Var);
		final Constant Constant_594_Var = (Constant)PrimaryExpression_593_Var.getConst();
		Assert.assertNotNull(Constant_594_Var);
		Assert.assertEquals("\"Billy The Kid\"", Constant_594_Var.getStr());
		Assert.assertEquals(";", ExpressionStatement_543_Var.getSemi());
		final Statement Statement_595_Var = (Statement)Statement_347_list.get(5);
		Assert.assertNotNull(Statement_595_Var);
		final ExpressionStatement ExpressionStatement_596_Var = (ExpressionStatement)Statement_595_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_596_Var);
		final Expression Expression_597_Var = (Expression)ExpressionStatement_596_Var.getExpression();
		Assert.assertNotNull(Expression_597_Var);
		final EList<? extends EObject> ExprExpr_597_list = Expression_597_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_597_list);
		Assert.assertEquals(1, ExprExpr_597_list.size());
		final AssignmentExpression AssignmentExpression_598_Var = (AssignmentExpression)ExprExpr_597_list.get(0);
		Assert.assertNotNull(AssignmentExpression_598_Var);
		final ConditionalExpression ConditionalExpression_599_Var = (ConditionalExpression)AssignmentExpression_598_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_599_Var);
		final LogicalOrExpression LogicalOrExpression_600_Var = (LogicalOrExpression)ConditionalExpression_599_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_600_Var);
		final EList<? extends EObject> Expr_600_list = LogicalOrExpression_600_Var.getExpr();
		Assert.assertNotNull(Expr_600_list);
		Assert.assertEquals(1, Expr_600_list.size());
		final LogicalAndExpression LogicalAndExpression_601_Var = (LogicalAndExpression)Expr_600_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_601_Var);
		final EList<? extends EObject> Expr_601_list = LogicalAndExpression_601_Var.getExpr();
		Assert.assertNotNull(Expr_601_list);
		Assert.assertEquals(1, Expr_601_list.size());
		final InclusiveOrExpression InclusiveOrExpression_602_Var = (InclusiveOrExpression)Expr_601_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_602_Var);
		final EList<? extends EObject> Expr_602_list = InclusiveOrExpression_602_Var.getExpr();
		Assert.assertNotNull(Expr_602_list);
		Assert.assertEquals(1, Expr_602_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_603_Var = (ExclusiveOrExpression)Expr_602_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_603_Var);
		final EList<? extends EObject> Expr_603_list = ExclusiveOrExpression_603_Var.getExpr();
		Assert.assertNotNull(Expr_603_list);
		Assert.assertEquals(1, Expr_603_list.size());
		final AndExpression AndExpression_604_Var = (AndExpression)Expr_603_list.get(0);
		Assert.assertNotNull(AndExpression_604_Var);
		final EList<? extends EObject> Expr_604_list = AndExpression_604_Var.getExpr();
		Assert.assertNotNull(Expr_604_list);
		Assert.assertEquals(1, Expr_604_list.size());
		final EqualityExpression EqualityExpression_605_Var = (EqualityExpression)Expr_604_list.get(0);
		Assert.assertNotNull(EqualityExpression_605_Var);
		final EList<? extends EObject> Expr_605_list = EqualityExpression_605_Var.getExpr();
		Assert.assertNotNull(Expr_605_list);
		Assert.assertEquals(1, Expr_605_list.size());
		final RelationalExpression RelationalExpression_606_Var = (RelationalExpression)Expr_605_list.get(0);
		Assert.assertNotNull(RelationalExpression_606_Var);
		final EList<? extends EObject> Expr_606_list = RelationalExpression_606_Var.getExpr();
		Assert.assertNotNull(Expr_606_list);
		Assert.assertEquals(1, Expr_606_list.size());
		final ShiftExpression ShiftExpression_607_Var = (ShiftExpression)Expr_606_list.get(0);
		Assert.assertNotNull(ShiftExpression_607_Var);
		final EList<? extends EObject> Expr_607_list = ShiftExpression_607_Var.getExpr();
		Assert.assertNotNull(Expr_607_list);
		Assert.assertEquals(1, Expr_607_list.size());
		final AdditiveExpression AdditiveExpression_608_Var = (AdditiveExpression)Expr_607_list.get(0);
		Assert.assertNotNull(AdditiveExpression_608_Var);
		final EList<? extends EObject> Expr_608_list = AdditiveExpression_608_Var.getExpr();
		Assert.assertNotNull(Expr_608_list);
		Assert.assertEquals(1, Expr_608_list.size());
		final MultiplicativeExpression MultiplicativeExpression_609_Var = (MultiplicativeExpression)Expr_608_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_609_Var);
		final EList<? extends EObject> Expr_609_list = MultiplicativeExpression_609_Var.getExpr();
		Assert.assertNotNull(Expr_609_list);
		Assert.assertEquals(1, Expr_609_list.size());
		final CastExpression CastExpression_610_Var = (CastExpression)Expr_609_list.get(0);
		Assert.assertNotNull(CastExpression_610_Var);
		final UnaryExpression UnaryExpression_611_Var = (UnaryExpression)CastExpression_610_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_611_Var);
		final PostfixExpression PostfixExpression_612_Var = (PostfixExpression)UnaryExpression_611_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_612_Var);
		final EList<? extends EObject> Expr_612_list = PostfixExpression_612_Var.getExpr();
		Assert.assertNotNull(Expr_612_list);
		Assert.assertEquals(1, Expr_612_list.size());
		final PrimaryExpression PrimaryExpression_613_Var = (PrimaryExpression)Expr_612_list.get(0);
		Assert.assertNotNull(PrimaryExpression_613_Var);
		Assert.assertEquals("print", PrimaryExpression_613_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_613_list = PostfixExpression_612_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_613_list);
		Assert.assertEquals(1, ArgumentExpressionList_613_list.size());
		final ArgumentExpressionList ArgumentExpressionList_614_Var = (ArgumentExpressionList)ArgumentExpressionList_613_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_614_Var);
		final EList<? extends EObject> Expr_614_list = ArgumentExpressionList_614_Var.getExpr();
		Assert.assertNotNull(Expr_614_list);
		Assert.assertEquals(1, Expr_614_list.size());
		final AssignmentExpression AssignmentExpression_615_Var = (AssignmentExpression)Expr_614_list.get(0);
		Assert.assertNotNull(AssignmentExpression_615_Var);
		final ConditionalExpression ConditionalExpression_616_Var = (ConditionalExpression)AssignmentExpression_615_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_616_Var);
		final LogicalOrExpression LogicalOrExpression_617_Var = (LogicalOrExpression)ConditionalExpression_616_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_617_Var);
		final EList<? extends EObject> Expr_617_list = LogicalOrExpression_617_Var.getExpr();
		Assert.assertNotNull(Expr_617_list);
		Assert.assertEquals(1, Expr_617_list.size());
		final LogicalAndExpression LogicalAndExpression_618_Var = (LogicalAndExpression)Expr_617_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_618_Var);
		final EList<? extends EObject> Expr_618_list = LogicalAndExpression_618_Var.getExpr();
		Assert.assertNotNull(Expr_618_list);
		Assert.assertEquals(1, Expr_618_list.size());
		final InclusiveOrExpression InclusiveOrExpression_619_Var = (InclusiveOrExpression)Expr_618_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_619_Var);
		final EList<? extends EObject> Expr_619_list = InclusiveOrExpression_619_Var.getExpr();
		Assert.assertNotNull(Expr_619_list);
		Assert.assertEquals(1, Expr_619_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_620_Var = (ExclusiveOrExpression)Expr_619_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_620_Var);
		final EList<? extends EObject> Expr_620_list = ExclusiveOrExpression_620_Var.getExpr();
		Assert.assertNotNull(Expr_620_list);
		Assert.assertEquals(1, Expr_620_list.size());
		final AndExpression AndExpression_621_Var = (AndExpression)Expr_620_list.get(0);
		Assert.assertNotNull(AndExpression_621_Var);
		final EList<? extends EObject> Expr_621_list = AndExpression_621_Var.getExpr();
		Assert.assertNotNull(Expr_621_list);
		Assert.assertEquals(1, Expr_621_list.size());
		final EqualityExpression EqualityExpression_622_Var = (EqualityExpression)Expr_621_list.get(0);
		Assert.assertNotNull(EqualityExpression_622_Var);
		final EList<? extends EObject> Expr_622_list = EqualityExpression_622_Var.getExpr();
		Assert.assertNotNull(Expr_622_list);
		Assert.assertEquals(1, Expr_622_list.size());
		final RelationalExpression RelationalExpression_623_Var = (RelationalExpression)Expr_622_list.get(0);
		Assert.assertNotNull(RelationalExpression_623_Var);
		final EList<? extends EObject> Expr_623_list = RelationalExpression_623_Var.getExpr();
		Assert.assertNotNull(Expr_623_list);
		Assert.assertEquals(1, Expr_623_list.size());
		final ShiftExpression ShiftExpression_624_Var = (ShiftExpression)Expr_623_list.get(0);
		Assert.assertNotNull(ShiftExpression_624_Var);
		final EList<? extends EObject> Expr_624_list = ShiftExpression_624_Var.getExpr();
		Assert.assertNotNull(Expr_624_list);
		Assert.assertEquals(1, Expr_624_list.size());
		final AdditiveExpression AdditiveExpression_625_Var = (AdditiveExpression)Expr_624_list.get(0);
		Assert.assertNotNull(AdditiveExpression_625_Var);
		final EList<? extends EObject> Expr_625_list = AdditiveExpression_625_Var.getExpr();
		Assert.assertNotNull(Expr_625_list);
		Assert.assertEquals(1, Expr_625_list.size());
		final MultiplicativeExpression MultiplicativeExpression_626_Var = (MultiplicativeExpression)Expr_625_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_626_Var);
		final EList<? extends EObject> Expr_626_list = MultiplicativeExpression_626_Var.getExpr();
		Assert.assertNotNull(Expr_626_list);
		Assert.assertEquals(1, Expr_626_list.size());
		final CastExpression CastExpression_627_Var = (CastExpression)Expr_626_list.get(0);
		Assert.assertNotNull(CastExpression_627_Var);
		final UnaryExpression UnaryExpression_628_Var = (UnaryExpression)CastExpression_627_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_628_Var);
		final PostfixExpression PostfixExpression_629_Var = (PostfixExpression)UnaryExpression_628_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_629_Var);
		final EList<? extends EObject> Expr_629_list = PostfixExpression_629_Var.getExpr();
		Assert.assertNotNull(Expr_629_list);
		Assert.assertEquals(1, Expr_629_list.size());
		final PrimaryExpression PrimaryExpression_630_Var = (PrimaryExpression)Expr_629_list.get(0);
		Assert.assertNotNull(PrimaryExpression_630_Var);
		Assert.assertEquals("newEmployee", PrimaryExpression_630_Var.getId());
		Assert.assertEquals(";", ExpressionStatement_596_Var.getSemi());
		final Statement Statement_631_Var = (Statement)Statement_347_list.get(6);
		Assert.assertNotNull(Statement_631_Var);
		final ExpressionStatement ExpressionStatement_632_Var = (ExpressionStatement)Statement_631_Var.getStmt();
		Assert.assertNotNull(ExpressionStatement_632_Var);
		final Expression Expression_633_Var = (Expression)ExpressionStatement_632_Var.getExpression();
		Assert.assertNotNull(Expression_633_Var);
		final EList<? extends EObject> ExprExpr_633_list = Expression_633_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_633_list);
		Assert.assertEquals(1, ExprExpr_633_list.size());
		final AssignmentExpression AssignmentExpression_634_Var = (AssignmentExpression)ExprExpr_633_list.get(0);
		Assert.assertNotNull(AssignmentExpression_634_Var);
		final ConditionalExpression ConditionalExpression_635_Var = (ConditionalExpression)AssignmentExpression_634_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_635_Var);
		final LogicalOrExpression LogicalOrExpression_636_Var = (LogicalOrExpression)ConditionalExpression_635_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_636_Var);
		final EList<? extends EObject> Expr_636_list = LogicalOrExpression_636_Var.getExpr();
		Assert.assertNotNull(Expr_636_list);
		Assert.assertEquals(1, Expr_636_list.size());
		final LogicalAndExpression LogicalAndExpression_637_Var = (LogicalAndExpression)Expr_636_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_637_Var);
		final EList<? extends EObject> Expr_637_list = LogicalAndExpression_637_Var.getExpr();
		Assert.assertNotNull(Expr_637_list);
		Assert.assertEquals(1, Expr_637_list.size());
		final InclusiveOrExpression InclusiveOrExpression_638_Var = (InclusiveOrExpression)Expr_637_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_638_Var);
		final EList<? extends EObject> Expr_638_list = InclusiveOrExpression_638_Var.getExpr();
		Assert.assertNotNull(Expr_638_list);
		Assert.assertEquals(1, Expr_638_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_639_Var = (ExclusiveOrExpression)Expr_638_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_639_Var);
		final EList<? extends EObject> Expr_639_list = ExclusiveOrExpression_639_Var.getExpr();
		Assert.assertNotNull(Expr_639_list);
		Assert.assertEquals(1, Expr_639_list.size());
		final AndExpression AndExpression_640_Var = (AndExpression)Expr_639_list.get(0);
		Assert.assertNotNull(AndExpression_640_Var);
		final EList<? extends EObject> Expr_640_list = AndExpression_640_Var.getExpr();
		Assert.assertNotNull(Expr_640_list);
		Assert.assertEquals(1, Expr_640_list.size());
		final EqualityExpression EqualityExpression_641_Var = (EqualityExpression)Expr_640_list.get(0);
		Assert.assertNotNull(EqualityExpression_641_Var);
		final EList<? extends EObject> Expr_641_list = EqualityExpression_641_Var.getExpr();
		Assert.assertNotNull(Expr_641_list);
		Assert.assertEquals(1, Expr_641_list.size());
		final RelationalExpression RelationalExpression_642_Var = (RelationalExpression)Expr_641_list.get(0);
		Assert.assertNotNull(RelationalExpression_642_Var);
		final EList<? extends EObject> Expr_642_list = RelationalExpression_642_Var.getExpr();
		Assert.assertNotNull(Expr_642_list);
		Assert.assertEquals(1, Expr_642_list.size());
		final ShiftExpression ShiftExpression_643_Var = (ShiftExpression)Expr_642_list.get(0);
		Assert.assertNotNull(ShiftExpression_643_Var);
		final EList<? extends EObject> Expr_643_list = ShiftExpression_643_Var.getExpr();
		Assert.assertNotNull(Expr_643_list);
		Assert.assertEquals(1, Expr_643_list.size());
		final AdditiveExpression AdditiveExpression_644_Var = (AdditiveExpression)Expr_643_list.get(0);
		Assert.assertNotNull(AdditiveExpression_644_Var);
		final EList<? extends EObject> Expr_644_list = AdditiveExpression_644_Var.getExpr();
		Assert.assertNotNull(Expr_644_list);
		Assert.assertEquals(1, Expr_644_list.size());
		final MultiplicativeExpression MultiplicativeExpression_645_Var = (MultiplicativeExpression)Expr_644_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_645_Var);
		final EList<? extends EObject> Expr_645_list = MultiplicativeExpression_645_Var.getExpr();
		Assert.assertNotNull(Expr_645_list);
		Assert.assertEquals(1, Expr_645_list.size());
		final CastExpression CastExpression_646_Var = (CastExpression)Expr_645_list.get(0);
		Assert.assertNotNull(CastExpression_646_Var);
		final UnaryExpression UnaryExpression_647_Var = (UnaryExpression)CastExpression_646_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_647_Var);
		final PostfixExpression PostfixExpression_648_Var = (PostfixExpression)UnaryExpression_647_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_648_Var);
		final EList<? extends EObject> Expr_648_list = PostfixExpression_648_Var.getExpr();
		Assert.assertNotNull(Expr_648_list);
		Assert.assertEquals(1, Expr_648_list.size());
		final PrimaryExpression PrimaryExpression_649_Var = (PrimaryExpression)Expr_648_list.get(0);
		Assert.assertNotNull(PrimaryExpression_649_Var);
		Assert.assertEquals("free", PrimaryExpression_649_Var.getId());
		final EList<? extends EObject> ArgumentExpressionList_649_list = PostfixExpression_648_Var.getArgumentExpressionList();
		Assert.assertNotNull(ArgumentExpressionList_649_list);
		Assert.assertEquals(1, ArgumentExpressionList_649_list.size());
		final ArgumentExpressionList ArgumentExpressionList_650_Var = (ArgumentExpressionList)ArgumentExpressionList_649_list.get(0);
		Assert.assertNotNull(ArgumentExpressionList_650_Var);
		final EList<? extends EObject> Expr_650_list = ArgumentExpressionList_650_Var.getExpr();
		Assert.assertNotNull(Expr_650_list);
		Assert.assertEquals(1, Expr_650_list.size());
		final AssignmentExpression AssignmentExpression_651_Var = (AssignmentExpression)Expr_650_list.get(0);
		Assert.assertNotNull(AssignmentExpression_651_Var);
		final ConditionalExpression ConditionalExpression_652_Var = (ConditionalExpression)AssignmentExpression_651_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_652_Var);
		final LogicalOrExpression LogicalOrExpression_653_Var = (LogicalOrExpression)ConditionalExpression_652_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_653_Var);
		final EList<? extends EObject> Expr_653_list = LogicalOrExpression_653_Var.getExpr();
		Assert.assertNotNull(Expr_653_list);
		Assert.assertEquals(1, Expr_653_list.size());
		final LogicalAndExpression LogicalAndExpression_654_Var = (LogicalAndExpression)Expr_653_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_654_Var);
		final EList<? extends EObject> Expr_654_list = LogicalAndExpression_654_Var.getExpr();
		Assert.assertNotNull(Expr_654_list);
		Assert.assertEquals(1, Expr_654_list.size());
		final InclusiveOrExpression InclusiveOrExpression_655_Var = (InclusiveOrExpression)Expr_654_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_655_Var);
		final EList<? extends EObject> Expr_655_list = InclusiveOrExpression_655_Var.getExpr();
		Assert.assertNotNull(Expr_655_list);
		Assert.assertEquals(1, Expr_655_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_656_Var = (ExclusiveOrExpression)Expr_655_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_656_Var);
		final EList<? extends EObject> Expr_656_list = ExclusiveOrExpression_656_Var.getExpr();
		Assert.assertNotNull(Expr_656_list);
		Assert.assertEquals(1, Expr_656_list.size());
		final AndExpression AndExpression_657_Var = (AndExpression)Expr_656_list.get(0);
		Assert.assertNotNull(AndExpression_657_Var);
		final EList<? extends EObject> Expr_657_list = AndExpression_657_Var.getExpr();
		Assert.assertNotNull(Expr_657_list);
		Assert.assertEquals(1, Expr_657_list.size());
		final EqualityExpression EqualityExpression_658_Var = (EqualityExpression)Expr_657_list.get(0);
		Assert.assertNotNull(EqualityExpression_658_Var);
		final EList<? extends EObject> Expr_658_list = EqualityExpression_658_Var.getExpr();
		Assert.assertNotNull(Expr_658_list);
		Assert.assertEquals(1, Expr_658_list.size());
		final RelationalExpression RelationalExpression_659_Var = (RelationalExpression)Expr_658_list.get(0);
		Assert.assertNotNull(RelationalExpression_659_Var);
		final EList<? extends EObject> Expr_659_list = RelationalExpression_659_Var.getExpr();
		Assert.assertNotNull(Expr_659_list);
		Assert.assertEquals(1, Expr_659_list.size());
		final ShiftExpression ShiftExpression_660_Var = (ShiftExpression)Expr_659_list.get(0);
		Assert.assertNotNull(ShiftExpression_660_Var);
		final EList<? extends EObject> Expr_660_list = ShiftExpression_660_Var.getExpr();
		Assert.assertNotNull(Expr_660_list);
		Assert.assertEquals(1, Expr_660_list.size());
		final AdditiveExpression AdditiveExpression_661_Var = (AdditiveExpression)Expr_660_list.get(0);
		Assert.assertNotNull(AdditiveExpression_661_Var);
		final EList<? extends EObject> Expr_661_list = AdditiveExpression_661_Var.getExpr();
		Assert.assertNotNull(Expr_661_list);
		Assert.assertEquals(1, Expr_661_list.size());
		final MultiplicativeExpression MultiplicativeExpression_662_Var = (MultiplicativeExpression)Expr_661_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_662_Var);
		final EList<? extends EObject> Expr_662_list = MultiplicativeExpression_662_Var.getExpr();
		Assert.assertNotNull(Expr_662_list);
		Assert.assertEquals(1, Expr_662_list.size());
		final CastExpression CastExpression_663_Var = (CastExpression)Expr_662_list.get(0);
		Assert.assertNotNull(CastExpression_663_Var);
		final UnaryExpression UnaryExpression_664_Var = (UnaryExpression)CastExpression_663_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_664_Var);
		final PostfixExpression PostfixExpression_665_Var = (PostfixExpression)UnaryExpression_664_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_665_Var);
		final EList<? extends EObject> Expr_665_list = PostfixExpression_665_Var.getExpr();
		Assert.assertNotNull(Expr_665_list);
		Assert.assertEquals(1, Expr_665_list.size());
		final PrimaryExpression PrimaryExpression_666_Var = (PrimaryExpression)Expr_665_list.get(0);
		Assert.assertNotNull(PrimaryExpression_666_Var);
		Assert.assertEquals("newEmployee", PrimaryExpression_666_Var.getId());
		Assert.assertEquals(";", ExpressionStatement_632_Var.getSemi());
		final Statement Statement_667_Var = (Statement)Statement_347_list.get(7);
		Assert.assertNotNull(Statement_667_Var);
		final JumpStatement JumpStatement_668_Var = (JumpStatement)Statement_667_Var.getStmt();
		Assert.assertNotNull(JumpStatement_668_Var);
		final Expression Expression_669_Var = (Expression)JumpStatement_668_Var.getExpr();
		Assert.assertNotNull(Expression_669_Var);
		final EList<? extends EObject> ExprExpr_669_list = Expression_669_Var.getExprExpr();
		Assert.assertNotNull(ExprExpr_669_list);
		Assert.assertEquals(1, ExprExpr_669_list.size());
		final AssignmentExpression AssignmentExpression_670_Var = (AssignmentExpression)ExprExpr_669_list.get(0);
		Assert.assertNotNull(AssignmentExpression_670_Var);
		final ConditionalExpression ConditionalExpression_671_Var = (ConditionalExpression)AssignmentExpression_670_Var.getExpr();
		Assert.assertNotNull(ConditionalExpression_671_Var);
		final LogicalOrExpression LogicalOrExpression_672_Var = (LogicalOrExpression)ConditionalExpression_671_Var.getExpr();
		Assert.assertNotNull(LogicalOrExpression_672_Var);
		final EList<? extends EObject> Expr_672_list = LogicalOrExpression_672_Var.getExpr();
		Assert.assertNotNull(Expr_672_list);
		Assert.assertEquals(1, Expr_672_list.size());
		final LogicalAndExpression LogicalAndExpression_673_Var = (LogicalAndExpression)Expr_672_list.get(0);
		Assert.assertNotNull(LogicalAndExpression_673_Var);
		final EList<? extends EObject> Expr_673_list = LogicalAndExpression_673_Var.getExpr();
		Assert.assertNotNull(Expr_673_list);
		Assert.assertEquals(1, Expr_673_list.size());
		final InclusiveOrExpression InclusiveOrExpression_674_Var = (InclusiveOrExpression)Expr_673_list.get(0);
		Assert.assertNotNull(InclusiveOrExpression_674_Var);
		final EList<? extends EObject> Expr_674_list = InclusiveOrExpression_674_Var.getExpr();
		Assert.assertNotNull(Expr_674_list);
		Assert.assertEquals(1, Expr_674_list.size());
		final ExclusiveOrExpression ExclusiveOrExpression_675_Var = (ExclusiveOrExpression)Expr_674_list.get(0);
		Assert.assertNotNull(ExclusiveOrExpression_675_Var);
		final EList<? extends EObject> Expr_675_list = ExclusiveOrExpression_675_Var.getExpr();
		Assert.assertNotNull(Expr_675_list);
		Assert.assertEquals(1, Expr_675_list.size());
		final AndExpression AndExpression_676_Var = (AndExpression)Expr_675_list.get(0);
		Assert.assertNotNull(AndExpression_676_Var);
		final EList<? extends EObject> Expr_676_list = AndExpression_676_Var.getExpr();
		Assert.assertNotNull(Expr_676_list);
		Assert.assertEquals(1, Expr_676_list.size());
		final EqualityExpression EqualityExpression_677_Var = (EqualityExpression)Expr_676_list.get(0);
		Assert.assertNotNull(EqualityExpression_677_Var);
		final EList<? extends EObject> Expr_677_list = EqualityExpression_677_Var.getExpr();
		Assert.assertNotNull(Expr_677_list);
		Assert.assertEquals(1, Expr_677_list.size());
		final RelationalExpression RelationalExpression_678_Var = (RelationalExpression)Expr_677_list.get(0);
		Assert.assertNotNull(RelationalExpression_678_Var);
		final EList<? extends EObject> Expr_678_list = RelationalExpression_678_Var.getExpr();
		Assert.assertNotNull(Expr_678_list);
		Assert.assertEquals(1, Expr_678_list.size());
		final ShiftExpression ShiftExpression_679_Var = (ShiftExpression)Expr_678_list.get(0);
		Assert.assertNotNull(ShiftExpression_679_Var);
		final EList<? extends EObject> Expr_679_list = ShiftExpression_679_Var.getExpr();
		Assert.assertNotNull(Expr_679_list);
		Assert.assertEquals(1, Expr_679_list.size());
		final AdditiveExpression AdditiveExpression_680_Var = (AdditiveExpression)Expr_679_list.get(0);
		Assert.assertNotNull(AdditiveExpression_680_Var);
		final EList<? extends EObject> Expr_680_list = AdditiveExpression_680_Var.getExpr();
		Assert.assertNotNull(Expr_680_list);
		Assert.assertEquals(1, Expr_680_list.size());
		final MultiplicativeExpression MultiplicativeExpression_681_Var = (MultiplicativeExpression)Expr_680_list.get(0);
		Assert.assertNotNull(MultiplicativeExpression_681_Var);
		final EList<? extends EObject> Expr_681_list = MultiplicativeExpression_681_Var.getExpr();
		Assert.assertNotNull(Expr_681_list);
		Assert.assertEquals(1, Expr_681_list.size());
		final CastExpression CastExpression_682_Var = (CastExpression)Expr_681_list.get(0);
		Assert.assertNotNull(CastExpression_682_Var);
		final UnaryExpression UnaryExpression_683_Var = (UnaryExpression)CastExpression_682_Var.getExpr();
		Assert.assertNotNull(UnaryExpression_683_Var);
		final PostfixExpression PostfixExpression_684_Var = (PostfixExpression)UnaryExpression_683_Var.getExpr();
		Assert.assertNotNull(PostfixExpression_684_Var);
		final EList<? extends EObject> Expr_684_list = PostfixExpression_684_Var.getExpr();
		Assert.assertNotNull(Expr_684_list);
		Assert.assertEquals(1, Expr_684_list.size());
		final PrimaryExpression PrimaryExpression_685_Var = (PrimaryExpression)Expr_684_list.get(0);
		Assert.assertNotNull(PrimaryExpression_685_Var);
		final Constant Constant_686_Var = (Constant)PrimaryExpression_685_Var.getConst();
		Assert.assertNotNull(Constant_686_Var);
		Assert.assertEquals("0", Constant_686_Var.getDec());
		Assert.assertEquals("return", JumpStatement_668_Var.getReturn());
		Assert.assertEquals(";", JumpStatement_668_Var.getSemi());
	}


}
