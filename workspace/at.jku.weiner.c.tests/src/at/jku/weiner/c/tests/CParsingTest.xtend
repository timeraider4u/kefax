/*
 * generated by Xtext 2.9.0-SNAPSHOT
 */
package at.jku.weiner.c.tests

import com.google.inject.Inject
import org.eclipse.xtext.junit4.InjectWith
import org.eclipse.xtext.junit4.XtextRunner
import org.eclipse.xtext.junit4.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import org.eclipse.xtext.junit4.validation.ValidationTestHelper
import org.junit.Ignore
import at.jku.weiner.c.c.TranslationUnit
import at.jku.weiner.c.c.TypeSpecifier

@RunWith(XtextRunner)
@InjectWith(CInjectorProvider)

class CParsingTest{

	@Inject extension ParseHelper<TranslationUnit> parseHelper;
	@Inject extension ValidationTestHelper;

	

	@Test 
	def void test3() {
		System.out.println("");
		System.out.println("loadModel3()");
		val text = '''
			int i;
			int j;
		''';
		
		val result = parseHelper.parse(text);
		Assert.assertNotNull(result)
		val i = result.external.get(0).declaration.initDeclaratorList.get(0).initDeclarator.get(0).declarator.declarator.id;
		Assert.assertEquals("i", i);
		
		val spec = result.external.get(0).declaration.specifiers.declarationSpecifier.get(0);
		val type = spec as TypeSpecifier;
		Assert.assertEquals("int", type.name);
		
		parseHelper.parse(text).assertNoErrors();
		text.parse.assertNoErrors();
		Assert.assertNotNull(result)
		//Assert.assertNotNull(result.unit);
		//Assert.assertEquals(1, result.unit.size);
		//var unit = result.unit.get(0);
		//Assert.assertNotNull(unit);
		//Assert.assertNotNull(unit.external);
		//Assert.assertEquals(2, unit.external.size);
		Assert.assertNotNull(result.external);
		Assert.assertEquals(2, result.external.size);
	}
	
}
