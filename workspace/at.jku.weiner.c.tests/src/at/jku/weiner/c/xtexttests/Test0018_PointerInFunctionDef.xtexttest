//----------------------------------------------------------------------
//----------------------------------------------------------------------
package at.jku.weiner.c
language c
//----------------------------------------------------------------------
source file="res/Test0018_PointerInFunctionDef.c"
//----------------------------------------------------------------------
lexer-tokens
KW_VOID WHITESPACE ID LEFTPAREN
KW_INT WHITESPACE ID COMMA WHITESPACE
KW_CHAR WHITESPACE STAR STAR WHITESPACE ID COMMA WHITESPACE
KW_FLOAT WHITESPACE ID COMMA WHITESPACE
KW_INT WHITESPACE ID
RIGHTPAREN WHITESPACE LEFTBRACE NEWLINE
WHITESPACE LEFTPAREN ID LEFTBRACKET DECIMAL_LITERAL RIGHTBRACKET RIGHTPAREN
WHITESPACE
ASSIGN WHITESPACE ID LEFTBRACKET ID RIGHTBRACKET WHITESPACE
//PLUS WHITESPACE DECIMAL_LITERAL SEMI NEWLINE
PLUS WHITESPACE BIN_LITERAL SEMI NEWLINE
RIGHTBRACE NEWLINE
//----------------------------------------------------------------------
(Model unit+=
	(TranslationUnit 
		external+=
		(ExternalDeclaration 
			functiondefHead=
			(FunctionDefHead
				funDeclSpecifiers=
				(FunctionDeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						name++"void"
					)
				),
				funDeclarator=
				(Declarator
					declarator=
					(DirectDeclarator
						id++"do1",
						declaratorSuffix+=
						(DeclaratorSuffix
							lastSuffix=
							(DirectDeclaratorLastSuffix
								parameterTypeList+=
								(ParameterTypeList
									list=
									(ParameterList
										parameterDeclaration+=
										(ParameterDeclaration
											declSpecifiers=
											(DeclarationSpecifiers
												declarationSpecifier+=
												(TypeSpecifier
													name++"int"
												)
											),
											declarator=
											(Declarator
												declarator=
												(DirectDeclarator
													id++"argc"
												),
												// this is no pointer
												// so our array of pointers is empty ;-)
												pointer=
												(Pointer 
													star+*"[]"
												)
											)
										),
										(ParameterDeclaration
											declSpecifiers=
											(DeclarationSpecifiers
												declarationSpecifier+=
												(TypeSpecifier
													name++"char"
												)
											),
											declarator=
											(Declarator
												declarator=
												(DirectDeclarator
													id++"argv"
												),
												pointer=
												(Pointer 
													star+*"[*, *]"
												)
											)
										),
										(ParameterDeclaration
											declSpecifiers=
											(DeclarationSpecifiers
												declarationSpecifier+=
												(TypeSpecifier
													name++"float"
												)
											),
											declarator=
											(Declarator
												declarator=
												(DirectDeclarator
													id++"f"
												)
											)
										),
										(ParameterDeclaration
											declSpecifiers=
											(DeclarationSpecifiers
												declarationSpecifier+=
												(TypeSpecifier
													name++"int"
												)
											),
											declarator=
											(Declarator
												declarator=
												(DirectDeclarator
													id++"i"
												)
											)
										)
									)
								)
							)
						)
					)
				)
			), // end functionDefHead
			functionDefinition=
			(FunctionDefinition
				body=
				(BodyStatement
					blockList+=
					(BlockList
						statement+=
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(Expression
									exprExpr+=
									(AssignmentExpression
										expr=
										(UnaryExpression
											expr=
											(PostfixExpression
												expr+=
												(PrimaryExpression
													expr=
													// ( ... )
													(Expression
														exprExpr+=
														(AssignmentExpression
															expr=
															(ConditionalExpression
																expr=
																(LogicalOrExpression
																	expr+=
																	(LogicalAndExpression
																		expr+=
																		(InclusiveOrExpression
																			expr+=
																			(ExclusiveOrExpression
																				expr+=
																				(AndExpression
																					expr+=
																					(EqualityExpression
																						expr+=
																						(RelationalExpression
																							expr+=
																							(ShiftExpression
																								expr+=
																								(AdditiveExpression
																									expr+=
																									(MultiplicativeExpression
																										expr+=
																										(CastExpression
																											expr=
																											(UnaryExpression
																												expr=
																												(PostfixExpression
																													expr+=
																													(PrimaryExpression
																														id++"argv"
																													),
																													// [9]
																													suffix+=
																													(PostfixExpressionSuffixArray
																														arrayExpr=
																														(Expression
																															exprExpr+=
																															(AssignmentExpression
																																expr=
																																(ConditionalExpression
																																	expr=
																																	(LogicalOrExpression
																																		expr+=
																																		(LogicalAndExpression
																																			expr+=
																																			(InclusiveOrExpression
																																				expr+=
																																				(ExclusiveOrExpression
																																					expr+=
																																					(AndExpression
																																						expr+=
																																						(EqualityExpression
																																							expr+=
																																							(RelationalExpression
																																								expr+=
																																								(ShiftExpression
																																									expr+=
																																									(AdditiveExpression
																																										expr+=
																																										(MultiplicativeExpression
																																											expr+=
																																											(CastExpression
																																												expr=
																																												(UnaryExpression
																																													expr=
																																													(PostfixExpression
																																														expr+=
																																														(PrimaryExpression
																																															const=
																																															(Constant
																																																dec++"9"
																																															)
																																														)
																																													)
																																												)
																																											)
																																										)
																																									)
																																								)
																																							)
																																							
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													) //end expression (array expression)
																												)
																											)
																										)
																									)
																								)
																							)
																						)
																						
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													) //end expression
												)
											) // end postfix expression
										), // end unary expression
										op=
										(AssignmentOperator
											op++"="
										),
										assignmentExpr=
										(AssignmentExpression
											expr=
											(ConditionalExpression
												expr=
												(LogicalOrExpression
													expr+=
													(LogicalAndExpression
														expr+=
														(InclusiveOrExpression
															expr+=
															(ExclusiveOrExpression
																expr+=
																(AndExpression
																	expr+=
																	(EqualityExpression
																		expr+=
																		(RelationalExpression
																			expr+=
																			(ShiftExpression
																				expr+=
																				(AdditiveExpression
																					expr+=
																					(MultiplicativeExpression
																						expr+=
																						(CastExpression
																							expr=
																							(UnaryExpression
																								expr=
																								(PostfixExpression
																									expr+=
																									(PrimaryExpression
																										id++"argv"
																									),
																									// [i]
																									suffix+=
																									(PostfixExpressionSuffixArray
																										arrayExpr=
																										(Expression
																											exprExpr+=
																											(AssignmentExpression
																												expr=
																												(ConditionalExpression
																													expr=
																													(LogicalOrExpression
																														expr+=
																														(LogicalAndExpression
																															expr+=
																															(InclusiveOrExpression
																																expr+=
																																(ExclusiveOrExpression
																																	expr+=
																																	(AndExpression
																																		expr+=
																																		(EqualityExpression
																																			expr+=
																																			(RelationalExpression
																																				expr+=
																																				(ShiftExpression
																																					expr+=
																																					(AdditiveExpression
																																						expr+=
																																						(MultiplicativeExpression
																																							expr+=
																																							(CastExpression
																																								expr=
																																								(UnaryExpression
																																									expr=
																																									(PostfixExpression
																																										expr+=
																																										(PrimaryExpression
																																											id++"i"
																																										)
																																									)
																																								)
																																							)
																																						)
																																					)
																																				)
																																			)
																																			
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										)
																									) //end expression
																								)
																							)
																						)
																					),
																					(MultiplicativeExpression
																						expr+=
																						(CastExpression
																							expr=
																							(UnaryExpression
																								expr=
																								(PostfixExpression
																									expr+=
																									(PrimaryExpression
																										const=
																										(Constant
																											bin++"0b011"
																										)
																									)
																								)
																							)
																						)																					
																					),
																					op+*"[+]"
																				)
																			)
																		)
																		
																	)
																)
															)
														)
													)
												)
											) // end conditional expression
										) // end assignment expression
									) // end assignment expression
								) // end expression
							) // end expression statement
						) // end statement
					) // end block list
				) // end body statement
			) // end function definition
		) // end external declaration
		
	)
)
//----------------------------------------------------------------------
output file="bin/Test0018_PointerInFunctionDef.c"
expected file isSameAsInputFile
replacePatterns file="res/Patterns.txt"
//----------------------------------------------------------------------
//----------------------------------------------------------------------
