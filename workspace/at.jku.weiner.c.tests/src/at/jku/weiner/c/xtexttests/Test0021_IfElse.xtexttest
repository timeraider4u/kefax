//----------------------------------------------------------------------
//----------------------------------------------------------------------
package at.jku.weiner.c
language c
//----------------------------------------------------------------------
source file="res/Test0021_IfElse.c"
//----------------------------------------------------------------------
lexer-tokens
KW_INT WHITESPACE ID LEFTPAREN KW_INT WHITESPACE ID RIGHTPAREN 
WHITESPACE LEFTBRACE NEWLINE
	WHITESPACE KW_IF WHITESPACE LEFTPAREN ID WHITESPACE GREATER WHITESPACE 
	DECIMAL_LITERAL RIGHTPAREN NEWLINE
	WHITESPACE KW_RETURN WHITESPACE DECIMAL_LITERAL SEMI NEWLINE
	
	WHITESPACE BLOCK_COMMENT NEWLINE
	
	WHITESPACE KW_ELSE WHITESPACE KW_IF WHITESPACE LEFTPAREN ID 
	WHITESPACE EQUAL WHITESPACE DECIMAL_LITERAL RIGHTPAREN 
	WHITESPACE LEFTBRACE NEWLINE
	WHITESPACE KW_RETURN WHITESPACE DECIMAL_LITERAL SEMI NEWLINE
	WHITESPACE RIGHTBRACE NEWLINE
	
	WHITESPACE BLOCK_COMMENT NEWLINE	  
	
	WHITESPACE KW_ELSE WHITESPACE LEFTBRACE NEWLINE
	WHITESPACE KW_RETURN WHITESPACE DECIMAL_LITERAL SEMI NEWLINE
	WHITESPACE RIGHTBRACE NEWLINE
RIGHTBRACE NEWLINE
//----------------------------------------------------------------------
(Model unit+=
	(TranslationUnit 
		external+=
		(ExternalDeclaration 
			functiondefHead=
			(FunctionDefHead
				funDeclSpecifiers=
				(FunctionDeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						name++"int"
					)
				),
				funDeclarator=
				(Declarator
					declarator=
					(DirectDeclarator
						id++"doSomething",
						declaratorSuffix+=
						(DeclaratorSuffix
							lastSuffix=
							(DirectDeclaratorLastSuffix
								parameterTypeList+=
								(ParameterTypeList
									list=
									(ParameterList
										parameterDeclaration+=
										(ParameterDeclaration
											declSpecifiers=
											(DeclarationSpecifiers
												declarationSpecifier+=
												(TypeSpecifier
													name++"int"
												)
											),
											declarator=
											(Declarator
												declarator=
												(DirectDeclarator
													id++"argc"
												)
											)
										)
									) // end parameter list
								)
							)
						) // DeclaratorSuffix
					)
				)
			),
			functionDefinition=
			(FunctionDefinition
				body=
				(BodyStatement
					blockList+=
					(BlockList
						statement+=
						(Statement
							stmt=
							(SelectionStatement
								if++"if",
								expr=
								(Expression
									exprExpr+=
									(AssignmentExpression
										expr=
										(ConditionalExpression
											expr=
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		op+*"[>]",
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									id++"argc"
																								)
																							)
																						)
																					)
																				)
																			)
																		),
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									const=
																									(Constant
																										dec++"0"
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										)
									)
								), // end expression
								ifStatement=
								(Statement
									stmt=
									(JumpStatement
										expr=
										(Expression
											exprExpr+=
											(AssignmentExpression
												expr=
												(ConditionalExpression
													expr=
													(LogicalOrExpression
														expr+=
														(LogicalAndExpression
															expr+=
															(InclusiveOrExpression
																expr+=
																(ExclusiveOrExpression
																	expr+=
																	(AndExpression
																		expr+=
																		(EqualityExpression
																			expr+=
																			(RelationalExpression
																				expr+=
																				(ShiftExpression
																					expr+=
																					(AdditiveExpression
																						expr+=
																						(MultiplicativeExpression
																							expr+=
																							(CastExpression
																								expr=
																								(UnaryExpression
																									expr=
																									(PostfixExpression
																										expr+=
																										(PrimaryExpression
																											const=
																											(Constant
																												dec++"0"
																											)
																										)
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										), // end expression
										return++"return",
										semi++";"
									)// end jump statement
								), // end ifStatement=Statement
								// else if ...
								elseStatement=
								(Statement
									stmt=
									(SelectionStatement
										if++"if",
										expr=
										(Expression
											exprExpr+=
											(AssignmentExpression
												expr=
												(ConditionalExpression
													expr=
													(LogicalOrExpression
														expr+=
														(LogicalAndExpression
															expr+=
															(InclusiveOrExpression
																expr+=
																(ExclusiveOrExpression
																	expr+=
																	(AndExpression
																		expr+=
																		(EqualityExpression
																			op+*"[==]",
																			expr+=
																			(RelationalExpression
																				expr+=
																				(ShiftExpression
																					expr+=
																					(AdditiveExpression
																						expr+=
																						(MultiplicativeExpression
																							expr+=
																							(CastExpression
																								expr=
																								(UnaryExpression
																									expr=
																									(PostfixExpression
																										expr+=
																										(PrimaryExpression
																											id++"argc"
																										)
																									)
																								)
																							)
																						)
																					)
																				)
																			),
																			(RelationalExpression
																				expr+=
																				(ShiftExpression
																					expr+=
																					(AdditiveExpression
																						expr+=
																						(MultiplicativeExpression
																							expr+=
																							(CastExpression
																								expr=
																								(UnaryExpression
																									expr=
																									(PostfixExpression
																										expr+=
																										(PrimaryExpression
																											const=
																											(Constant
																												dec++"1"	
																											)
																										)
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										), // end expression
										else++"else",
										ifStatement=
										(Statement
											stmt=
											(CompoundStatement
												body=
												(BodyStatement
													blockList+=
													(BlockList
														statement+=
														(Statement
															stmt=
															(JumpStatement
																expr=
																(Expression
																	exprExpr+=
																	(AssignmentExpression
																		expr=
																		(ConditionalExpression
																			expr=
																			(LogicalOrExpression
																				expr+=
																				(LogicalAndExpression
																					expr+=
																					(InclusiveOrExpression
																						expr+=
																						(ExclusiveOrExpression
																							expr+=
																							(AndExpression
																								expr+=
																								(EqualityExpression
																									expr+=
																									(RelationalExpression
																										expr+=
																										(ShiftExpression
																											expr+=
																											(AdditiveExpression
																												expr+=
																												(MultiplicativeExpression
																													expr+=
																													(CastExpression
																														expr=
																														(UnaryExpression
																															expr=
																															(PostfixExpression
																																expr+=
																																(PrimaryExpression
																																	const=
																																	(Constant
																																		dec++"1"
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										)
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																), // end expression
																return++"return",
																semi++";"
															)// end jump statement
														)
													)
												)
											) // end compound statement
										), // end ifStatement=Statement
										elseStatement=
										(Statement
											stmt=
											(CompoundStatement
												body=
												(BodyStatement
													blockList+=
													(BlockList
														statement+=
														(Statement
															stmt=
															(JumpStatement
																expr=
																(Expression
																	exprExpr+=
																	(AssignmentExpression
																		expr=
																		(ConditionalExpression
																			expr=
																			(LogicalOrExpression
																				expr+=
																				(LogicalAndExpression
																					expr+=
																					(InclusiveOrExpression
																						expr+=
																						(ExclusiveOrExpression
																							expr+=
																							(AndExpression
																								expr+=
																								(EqualityExpression
																									expr+=
																									(RelationalExpression
																										expr+=
																										(ShiftExpression
																											expr+=
																											(AdditiveExpression
																												expr+=
																												(MultiplicativeExpression
																													expr+=
																													(CastExpression
																														expr=
																														(UnaryExpression
																															expr=
																															(PostfixExpression
																																expr+=
																																(PrimaryExpression
																																	const=
																																	(Constant
																																		dec++"2"
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										)
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																), // end expression
																return++"return",
																semi++";"
															)// end jump statement
														)
													)
												)
											) // end compound statement
										) // end elseStatement=Statement
									) // selection statement
								) // elseStatement=Statement
							)// end selection statement
						)//end statement
					)
				)
			)
		)// end external declaration		
	)
)
//----------------------------------------------------------------------
output file="bin/Test0021_IfElse.c"
expected file isSameAsInputFile
replacePatterns file="res/Patterns.txt"
//----------------------------------------------------------------------
//----------------------------------------------------------------------
