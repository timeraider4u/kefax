//----------------------------------------------------------------------
//----------------------------------------------------------------------
package at.jku.weiner.c
language c
//----------------------------------------------------------------------
source file="res/Test0025_Switch.c"
//----------------------------------------------------------------------
lexer-tokens
KW_INT WHITESPACE ID LEFTPAREN KW_INT WHITESPACE ID RIGHTPAREN 
WHITESPACE LEFTBRACE NEWLINE
	WHITESPACE KW_SWITCH WHITESPACE LEFTPAREN ID RIGHTPAREN 
	WHITESPACE LEFTBRACE NEWLINE 

		WHITESPACE KW_CASE WHITESPACE DECIMAL_LITERAL COLON  NEWLINE
		WHITESPACE KW_RETURN WHITESPACE DECIMAL_LITERAL SEMI NEWLINE
			
		WHITESPACE KW_CASE WHITESPACE DECIMAL_LITERAL COLON
		WHITESPACE LEFTBRACE NEWLINE
		WHITESPACE KW_BREAK SEMI NEWLINE
		WHITESPACE RIGHTBRACE NEWLINE
				
		WHITESPACE KW_DEFAULT COLON WHITESPACE LEFTBRACE NEWLINE
		WHITESPACE KW_RETURN WHITESPACE DECIMAL_LITERAL SEMI NEWLINE
		WHITESPACE RIGHTBRACE NEWLINE
	WHITESPACE RIGHTBRACE NEWLINE
	WHITESPACE KW_RETURN WHITESPACE DECIMAL_LITERAL SEMI NEWLINE
RIGHTBRACE NEWLINE
//----------------------------------------------------------------------
(Model unit+=
	(TranslationUnit 
		external+=
		(ExternalDeclaration 
			functiondefHead=
			(FunctionDefHead
				funDeclSpecifiers=
				(FunctionDeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						name++"int"
					)
				),
				funDeclarator=
				(Declarator
					declarator=
					(DirectDeclarator
						id++"doSomething",
						declaratorSuffix+=
						(DeclaratorSuffix
							lastSuffix=
							(DirectDeclaratorLastSuffix
								parameterTypeList+=
								(ParameterTypeList
									list=
									(ParameterList
										parameterDeclaration+=
										(ParameterDeclaration
											declSpecifiers=
											(DeclarationSpecifiers
												declarationSpecifier+=
												(TypeSpecifier
													name++"int"
												)
											),
											declarator=
											(Declarator
												declarator=
												(DirectDeclarator
													id++"argc"
												)
											)
										)
									) // end parameter list
								)
							)
						) // DeclaratorSuffix
					)
				)
			),
			functionDefinition=
			(FunctionDefinition
				body=
				(BodyStatement
					blockList+=
					(BlockList
						statement+=
						(Statement
							stmt=
							(SelectionStatement
								switch++"switch",
								expr=
								(Expression
									exprExpr+=
									(AssignmentExpression
										expr=
										(ConditionalExpression
											expr=
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									id++"argc"
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										)
									)
								), // end expression
								switchStatement=
								(Statement
									stmt=
									(CompoundStatement
										body=
										(BodyStatement
											blockList+=
											(BlockList
												statement+=
												// case 0: ...
												(Statement
													stmt=	
													(LabeledStatement
														case++"case",
														expr=
														(ConstantExpression
															expr=
															(ConditionalExpression
																expr=
																(LogicalOrExpression
																	expr+=
																	(LogicalAndExpression
																		expr+=
																		(InclusiveOrExpression
																			expr+=
																			(ExclusiveOrExpression
																				expr+=
																				(AndExpression
																					expr+=
																					(EqualityExpression
																						expr+=
																						(RelationalExpression
																							expr+=
																							(ShiftExpression
																								expr+=
																								(AdditiveExpression
																									expr+=
																									(MultiplicativeExpression
																										expr+=
																										(CastExpression
																											expr=
																											(UnaryExpression
																												expr=
																												(PostfixExpression
																													expr+=
																													(PrimaryExpression
																														const=
																														(Constant
																															dec++"0"
																														)
																													)
																												)
																											)
																										)
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															) // end conditional expression of case-expr
														), // end constant expression of case
														lStmt=
														(Statement
															stmt=
															(JumpStatement
																return++"return",
																expr=
																(Expression
																	exprExpr+=
																	(AssignmentExpression
																		expr=
																		(ConditionalExpression
																			expr=
																			(LogicalOrExpression
																				expr+=
																				(LogicalAndExpression
																					expr+=
																					(InclusiveOrExpression
																						expr+=
																						(ExclusiveOrExpression
																							expr+=
																							(AndExpression
																								expr+=
																								(EqualityExpression
																									expr+=
																									(RelationalExpression
																										expr+=
																										(ShiftExpression
																											expr+=
																											(AdditiveExpression
																												expr+=
																												(MultiplicativeExpression
																													expr+=
																													(CastExpression
																														expr=
																														(UnaryExpression
																															expr=
																															(PostfixExpression
																																expr+=
																																(PrimaryExpression
																																	const=
																																	(Constant
																																		dec++"0"	
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										)
																									)
																									
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																), // end expression
																semi++";"
															) // end jump statement
														)
													) // end labeled statement
												), // end statement
												// case 1: ...
												(Statement
													stmt=	
													(LabeledStatement
														case++"case",
														expr=
														(ConstantExpression
															expr=
															(ConditionalExpression
																expr=
																(LogicalOrExpression
																	expr+=
																	(LogicalAndExpression
																		expr+=
																		(InclusiveOrExpression
																			expr+=
																			(ExclusiveOrExpression
																				expr+=
																				(AndExpression
																					expr+=
																					(EqualityExpression
																						expr+=
																						(RelationalExpression
																							expr+=
																							(ShiftExpression
																								expr+=
																								(AdditiveExpression
																									expr+=
																									(MultiplicativeExpression
																										expr+=
																										(CastExpression
																											expr=
																											(UnaryExpression
																												expr=
																												(PostfixExpression
																													expr+=
																													(PrimaryExpression
																														const=
																														(Constant
																															dec++"1"
																														)
																													)
																												)
																											)
																										)
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															) // end conditional expression of case-expr
														), // end constant expression of case
														lStmt=
														(Statement
															stmt=
															(CompoundStatement
																body=
																(BodyStatement
																	blockList+=
																	(BlockList
																		statement+=
																		(Statement
																			stmt=	
																			(JumpStatement
																				break++"break",
																				semi++";"
																			) // end jump statement
																		)
																	)
																)
															)
														)
													) // end labeled statement
												), // end statement
												// default: ...
												(Statement
													stmt=	
													(LabeledStatement
														default++"default",
														lStmt=
														(Statement
															stmt=
															(CompoundStatement
																body=
																(BodyStatement
																	blockList+=
																	(BlockList
																		statement+=
																		(Statement
																			stmt=	
																			(JumpStatement
																				return++"return",
																				expr=
																				(Expression
																					exprExpr+=
																					(AssignmentExpression
																						expr=
																						(ConditionalExpression
																							expr=
																							(LogicalOrExpression
																								expr+=
																								(LogicalAndExpression
																									expr+=
																									(InclusiveOrExpression
																										expr+=
																										(ExclusiveOrExpression
																											expr+=
																											(AndExpression
																												expr+=
																												(EqualityExpression
																													expr+=
																													(RelationalExpression
																														expr+=
																														(ShiftExpression
																															expr+=
																															(AdditiveExpression
																																expr+=
																																(MultiplicativeExpression
																																	expr+=
																																	(CastExpression
																																		expr=
																																		(UnaryExpression
																																			expr=
																																			(PostfixExpression
																																				expr+=
																																				(PrimaryExpression
																																					const=
																																					(Constant
																																						dec++"2"	
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																													
																												)
																											)
																										)
																									)
																								)
																							)
																						)
																					)
																				), // end expression
																				semi++";"
																			) // end jump statement
																		)
																	)
																)
															)
														)
													) // end labeled statement
												) // end statement
											)
										
										)
									) // end compound statement of switch
								) // switch
							)// end selection statement
						),//end of switch statement
						// return ...;
						(Statement
							stmt=
							(JumpStatement
								expr=
								(Expression
									exprExpr+=
									(AssignmentExpression
										expr=
										(ConditionalExpression
											expr=
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									const=
																									(Constant
																										dec++"1"
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										)
									)
								), // end expression
								return++"return",
								semi++";"
							)// end jump statement
						)//end statement
					)
				)
			)
		)// end external declaration		
	)
)
//----------------------------------------------------------------------
output file="bin/Test0025_Switch.c"
expected file isSameAsInputFile
replacePatterns file="res/Patterns.txt"
//----------------------------------------------------------------------
//----------------------------------------------------------------------
