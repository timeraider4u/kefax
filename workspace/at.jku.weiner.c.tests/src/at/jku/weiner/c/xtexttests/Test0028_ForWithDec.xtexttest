package at.jku.weiner.c
language c
//----------------------------------------------------------------------
source file="res/Test0028_ForWithDec.c"
//----------------------------------------------------------------------
lexer-tokens
KW_VOID WHITESPACE ID LEFTPAREN
KW_INT WHITESPACE ID RIGHTPAREN WHITESPACE LEFTBRACE NEWLINE
	WHITESPACE KW_FOR WHITESPACE LEFTPAREN 
	KW_INT WHITESPACE ID ASSIGN DECIMAL_LITERAL SEMI
	WHITESPACE ID WHITESPACE LESS WHITESPACE DECIMAL_LITERAL SEMI
	WHITESPACE ID PLUSPLUS RIGHTPAREN WHITESPACE LEFTBRACE NEWLINE
		WHITESPACE KW_CONTINUE SEMI NEWLINE
	WHITESPACE RIGHTBRACE NEWLINE
RIGHTBRACE NEWLINE
//----------------------------------------------------------------------
(Model unit+=
	(TranslationUnit 
		external+=
		(ExternalDeclaration 
			functiondefHead=
			(FunctionDefHead
				funDeclSpecifiers=
				(FunctionDeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						name++"void"
					)
				),
				funDeclarator=
				(Declarator
					declarator=
					(DirectDeclarator
						id++"a",
						declaratorSuffix+=
						(DeclaratorSuffix
							lastSuffix=
							(DirectDeclaratorLastSuffix
								parameterTypeList+=
								(ParameterTypeList
									list=
									(ParameterList
										parameterDeclaration+=
										(ParameterDeclaration
											declSpecifiers=
											(DeclarationSpecifiers
												declarationSpecifier+=
												(TypeSpecifier
													name++"int"
												)
											),
											declarator=
											(Declarator
												declarator=
												(DirectDeclarator
													id++"num"
												)
											)
										) 
									) // end parameter list
								)
							)
						) // DeclaratorSuffix
					)
				)
			),
			functionDefinition=
			(FunctionDefinition
				body=
				(BodyStatement
					blockList+=
					(BlockList
						statement+=
						(Statement
							stmt=
							(IterationStatement
								for++"for",
								// int i=0
								initDecl=
								(Declaration
									specifiers=
									(DeclarationSpecifiers
										declarationSpecifier+=
										(TypeSpecifier
											name++"int"
										)
									),
									initDeclaratorList+=
									(InitDeclaratorList
										initDeclarator+=
										(InitDeclarator
											declarator=
											(Declarator
												declarator=
												(DirectDeclarator
													id++"i"
												)
											),
											initializer=
											(Initializer
												expr=
												(AssignmentExpression
													expr=
													(ConditionalExpression
														expr=
														(LogicalOrExpression
															expr+=
															(LogicalAndExpression
																expr+=
																(InclusiveOrExpression
																	expr+=
																	(ExclusiveOrExpression
																		expr+=
																		(AndExpression
																			expr+=
																			(EqualityExpression
																				expr+=
																				(RelationalExpression
																					expr+=
																					(ShiftExpression
																						expr+=
																						(AdditiveExpression
																							expr+=
																							(MultiplicativeExpression
																								expr+=
																								(CastExpression
																									expr=
																									(UnaryExpression
																										expr=
																										(PostfixExpression
																											expr+=
																											(PrimaryExpression
																												const=
																												(Constant
																													dec++"0"
																												)
																											)
																										)
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												) // end assignment expression
											)
										)
									),
									semi++";"
								), // end init declaration
								// i < 5
								expr=
								(Expression
									exprExpr+=
									(AssignmentExpression
										expr=
										(ConditionalExpression
											expr=
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		op+*"[<]",
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									id++"i"
																								)
																							)
																						)
																					)
																				)
																			)
																		),
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									const=
																									(Constant
																										dec++"5"
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										)
									)
								), // end loop criteria expression
								// i++
								incExpr=
								(Expression
									exprExpr+=
									(AssignmentExpression
										expr=
										(ConditionalExpression
											expr=
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									id++"i"
																								),
																								plusplus+*"[++]"
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										)
									)
								), // end increment expression
								statement=
								(Statement
									stmt=
									(CompoundStatement
										body=
										(BodyStatement
											blockList+=
											(BlockList
												statement+=
												(Statement
													stmt=
													(JumpStatement
														continue++"continue"
													)
												)
											)
										)
									) // end compound statement
								) // end statement
							) // end iteration statement
						) // end statement
					) // end block list
				) // end body statement
			)
		) // end external declaration
	)
)
//----------------------------------------------------------------------
output file="bin/Test0028_ForWithDec.c"
expected file isSameAsInputFile
