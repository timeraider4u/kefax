package at.jku.weiner.c
language c
//----------------------------------------------------------------------
source file="res/Test0029_Assembler.c"
//----------------------------------------------------------------------
lexer-tokens
BLOCK_COMMENT NEWLINE
KW_EXTERN WHITESPACE KW_INT WHITESPACE ID SEMI NEWLINE
NEWLINE
KW_INT WHITESPACE ID LEFTPAREN
	KW_INT WHITESPACE ID COMMA WHITESPACE
	KW_INT WHITESPACE STAR ID COMMA WHITESPACE
	KW_INT WHITESPACE ID
RIGHTPAREN NEWLINE
LEFTBRACE NEWLINE
	WHITESPACE KW_INT WHITESPACE ID SEMI NEWLINE
	WHITESPACE KW_ASM2 WHITESPACE KW_VOLATILE LEFTPAREN NEWLINE
		WHITESPACE STRING_LITERAL WHITESPACE BLOCK_COMMENT NEWLINE
		WHITESPACE COLON WHITESPACE STRING_LITERAL 
			WHITESPACE LEFTPAREN ID RIGHTPAREN COMMA 
			WHITESPACE BLOCK_COMMENT NEWLINE
		WHITESPACE STRING_LITERAL 
			WHITESPACE LEFTPAREN ID RIGHTPAREN COMMA
			WHITESPACE BLOCK_COMMENT NEWLINE
		WHITESPACE STRING_LITERAL 
			WHITESPACE LEFTPAREN ID RIGHTPAREN COMMA
			WHITESPACE BLOCK_COMMENT NEWLINE
		WHITESPACE STRING_LITERAL 
			WHITESPACE LEFTPAREN ID RIGHTPAREN
			WHITESPACE BLOCK_COMMENT NEWLINE
		WHITESPACE COLON WHITESPACE STRING_LITERAL 
			WHITESPACE LEFTPAREN DECIMAL_LITERAL RIGHTPAREN
			WHITESPACE BLOCK_COMMENT NEWLINE
		WHITESPACE COLON WHITESPACE STRING_LITERAL COMMA
			WHITESPACE STRING_LITERAL WHITESPACE BLOCK_COMMENT NEWLINE
	WHITESPACE RIGHTPAREN SEMI NEWLINE
	WHITESPACE BLOCK_COMMENT NEWLINE
	WHITESPACE KW_IF WHITESPACE LEFTPAREN
		MINUS DECIMAL_LITERAL WHITESPACE 
		LESSEQUAL WHITESPACE ID WHITESPACE
		ANDAND WHITESPACE ID WHITESPACE LESS
		WHITESPACE DECIMAL_LITERAL 
	RIGHTPAREN WHITESPACE LEFTBRACE NEWLINE
		WHITESPACE ID WHITESPACE ASSIGN WHITESPACE
			MINUS ID SEMI NEWLINE
		WHITESPACE ID WHITESPACE ASSIGN WHITESPACE
			MINUS DECIMAL_LITERAL SEMI NEWLINE
	WHITESPACE RIGHTBRACE NEWLINE
	WHITESPACE KW_RETURN WHITESPACE ID SEMI NEWLINE
RIGHTBRACE NEWLINE	
//----------------------------------------------------------------------
(Model unit+=
	(TranslationUnit 
		external+=
		(ExternalDeclaration
			declaration=
			(Declaration
				specifiers=
				(DeclarationSpecifiers
					declarationSpecifier+=
					(StorageClassSpecifier
						name++"extern"
					),
					(TypeSpecifier
						name++"int"
					)
				),
				initDeclaratorList+=
				(InitDeclaratorList
					initDeclarator+=
					(InitDeclarator
						declarator=
						(Declarator
							declarator=
							(DirectDeclarator
								id++"errno"
							)
						)
					)
				),
				semi++";"
			)
		), // end external declaration (extern int errno;)
		(ExternalDeclaration 
			functiondefHead=
			(FunctionDefHead
				funDeclSpecifiers=
				(FunctionDeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						name++"int"
					)
				),
				funDeclarator=
				(Declarator
					declarator=
					(DirectDeclarator
						id++"funcname",
						declaratorSuffix+=
						(DeclaratorSuffix
							lastSuffix=
							(DirectDeclaratorLastSuffix
								parameterTypeList+=
								(ParameterTypeList
									list=
									(ParameterList
										parameterDeclaration+=
										(ParameterDeclaration
											declSpecifiers=
											(DeclarationSpecifiers
												declarationSpecifier+=
												(TypeSpecifier
													name++"int"
												)
											),
											declarator=
											(Declarator
												declarator=
												(DirectDeclarator
													id++"arg1"
												)
											)
										),
										(ParameterDeclaration
											declSpecifiers=
											(DeclarationSpecifiers
												declarationSpecifier+=
												(TypeSpecifier
													name++"int"
												)
											),
											declarator=
											(Declarator
												declarator=
												(DirectDeclarator
													id++"arg2"
												),
												pointer=
												(Pointer 
													star+*"[*]"
												)
											)
										),
										(ParameterDeclaration
											declSpecifiers=
											(DeclarationSpecifiers
												declarationSpecifier+=
												(TypeSpecifier
													name++"int"
												)
											),
											declarator=
											(Declarator
												declarator=
												(DirectDeclarator
													id++"arg3"
												)
											)
										)
									) // end parameter list
								)
							)
						) // DeclaratorSuffix
					)
				)
			),
			functionDefinition=
			(FunctionDefinition
				body=
				(BodyStatement
					blockList+=
					(BlockList
						declaration+=
						(Declaration
							specifiers=
							(DeclarationSpecifiers
								declarationSpecifier+=
								(TypeSpecifier
									name++"int"
								)
							),
							initDeclaratorList+=
							(InitDeclaratorList
								initDeclarator+=
								(InitDeclarator
									declarator=
									(Declarator
										declarator=
										(DirectDeclarator
											id++"res"
										)
									)
								)
							),
							semi++";"
						), // end declaration
						statement+=
						// __asm (...)
						(Statement
							stmt=
							(AsmStatement
								expr+=
								// "int $0x80"
								(LogicalOrExpression
									expr+=
									(LogicalAndExpression
										expr+=
										(InclusiveOrExpression
											expr+=
											(ExclusiveOrExpression
												expr+=
												(AndExpression
													expr+=
													(EqualityExpression
														expr+=
														(RelationalExpression
															expr+=
															(ShiftExpression
																expr+=
																(AdditiveExpression
																	expr+=
																	(MultiplicativeExpression
																		expr+=
																		(CastExpression
																			expr=
																			(UnaryExpression
																				expr=
																				(PostfixExpression
																					expr+=
																					(PrimaryExpression
																						const=
																						(Constant
																							str++"\\\"int $0x80\\\""
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										)
									)
								), // end LogicalOrExpression
								// : "=a" (res),
								(LogicalOrExpression
									expr+=
									(LogicalAndExpression
										expr+=
										(InclusiveOrExpression
											expr+=
											(ExclusiveOrExpression
												expr+=
												(AndExpression
													expr+=
													(EqualityExpression
														expr+=
														(RelationalExpression
															expr+=
															(ShiftExpression
																expr+=
																(AdditiveExpression
																	expr+=
																	(MultiplicativeExpression
																		expr+=
																		(CastExpression
																			expr=
																			(UnaryExpression
																				expr=
																				(PostfixExpression
																					expr+=
																					(PrimaryExpression
																						const=
																						(Constant
																							str++"\\\"=a\\\""
																						)
																					),
																					argumentExpressionList+=
																					(ArgumentExpressionList
																						expr+=
																						(AssignmentExpression
																							expr=
																							(ConditionalExpression
																								expr=
																								(LogicalOrExpression
																									expr+=
																									(LogicalAndExpression
																										expr+=
																										(InclusiveOrExpression
																											expr+=
																											(ExclusiveOrExpression
																												expr+=
																												(AndExpression
																													expr+=
																													(EqualityExpression
																														expr+=
																														(RelationalExpression
																															expr+=
																															(ShiftExpression
																																expr+=
																																(AdditiveExpression
																																	expr+=
																																	(MultiplicativeExpression
																																		expr+=
																																		(CastExpression
																																			expr=
																																			(UnaryExpression
																																				expr=
																																				(PostfixExpression
																																					expr+=
																																					(PrimaryExpression
																																						id++"res"
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										)
																									)
																								) // end LogicalOrExpression
																							)
																						) // end assignment expression
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										)
									)
								), // end LogicalOrExpression
								// : "+b" (arg1),
								(LogicalOrExpression
									expr+=
									(LogicalAndExpression
										expr+=
										(InclusiveOrExpression
											expr+=
											(ExclusiveOrExpression
												expr+=
												(AndExpression
													expr+=
													(EqualityExpression
														expr+=
														(RelationalExpression
															expr+=
															(ShiftExpression
																expr+=
																(AdditiveExpression
																	expr+=
																	(MultiplicativeExpression
																		expr+=
																		(CastExpression
																			expr=
																			(UnaryExpression
																				expr=
																				(PostfixExpression
																					expr+=
																					(PrimaryExpression
																						const=
																						(Constant
																							str++"\\\"+b\\\""
																						)
																					),
																					argumentExpressionList+=
																					(ArgumentExpressionList
																						expr+=
																						(AssignmentExpression
																							expr=
																							(ConditionalExpression
																								expr=
																								(LogicalOrExpression
																									expr+=
																									(LogicalAndExpression
																										expr+=
																										(InclusiveOrExpression
																											expr+=
																											(ExclusiveOrExpression
																												expr+=
																												(AndExpression
																													expr+=
																													(EqualityExpression
																														expr+=
																														(RelationalExpression
																															expr+=
																															(ShiftExpression
																																expr+=
																																(AdditiveExpression
																																	expr+=
																																	(MultiplicativeExpression
																																		expr+=
																																		(CastExpression
																																			expr=
																																			(UnaryExpression
																																				expr=
																																				(PostfixExpression
																																					expr+=
																																					(PrimaryExpression
																																						id++"arg1"
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										)
																									)
																								) // end LogicalOrExpression
																							)
																						) // end assignment expression
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										)
									)
								), // end LogicalOrExpression
								// : "+c" (arg2),
								(LogicalOrExpression
									expr+=
									(LogicalAndExpression
										expr+=
										(InclusiveOrExpression
											expr+=
											(ExclusiveOrExpression
												expr+=
												(AndExpression
													expr+=
													(EqualityExpression
														expr+=
														(RelationalExpression
															expr+=
															(ShiftExpression
																expr+=
																(AdditiveExpression
																	expr+=
																	(MultiplicativeExpression
																		expr+=
																		(CastExpression
																			expr=
																			(UnaryExpression
																				expr=
																				(PostfixExpression
																					expr+=
																					(PrimaryExpression
																						const=
																						(Constant
																							str++"\\\"+c\\\""
																						)
																					),
																					argumentExpressionList+=
																					(ArgumentExpressionList
																						expr+=
																						(AssignmentExpression
																							expr=
																							(ConditionalExpression
																								expr=
																								(LogicalOrExpression
																									expr+=
																									(LogicalAndExpression
																										expr+=
																										(InclusiveOrExpression
																											expr+=
																											(ExclusiveOrExpression
																												expr+=
																												(AndExpression
																													expr+=
																													(EqualityExpression
																														expr+=
																														(RelationalExpression
																															expr+=
																															(ShiftExpression
																																expr+=
																																(AdditiveExpression
																																	expr+=
																																	(MultiplicativeExpression
																																		expr+=
																																		(CastExpression
																																			expr=
																																			(UnaryExpression
																																				expr=
																																				(PostfixExpression
																																					expr+=
																																					(PrimaryExpression
																																						id++"arg2"
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										)
																									)
																								) // end LogicalOrExpression
																							)
																						) // end assignment expression
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										)
									)
								), // end LogicalOrExpression
								// : "+d" (arg3),
								(LogicalOrExpression
									expr+=
									(LogicalAndExpression
										expr+=
										(InclusiveOrExpression
											expr+=
											(ExclusiveOrExpression
												expr+=
												(AndExpression
													expr+=
													(EqualityExpression
														expr+=
														(RelationalExpression
															expr+=
															(ShiftExpression
																expr+=
																(AdditiveExpression
																	expr+=
																	(MultiplicativeExpression
																		expr+=
																		(CastExpression
																			expr=
																			(UnaryExpression
																				expr=
																				(PostfixExpression
																					expr+=
																					(PrimaryExpression
																						const=
																						(Constant
																							str++"\\\"+d\\\""
																						)
																					),
																					argumentExpressionList+=
																					(ArgumentExpressionList
																						expr+=
																						(AssignmentExpression
																							expr=
																							(ConditionalExpression
																								expr=
																								(LogicalOrExpression
																									expr+=
																									(LogicalAndExpression
																										expr+=
																										(InclusiveOrExpression
																											expr+=
																											(ExclusiveOrExpression
																												expr+=
																												(AndExpression
																													expr+=
																													(EqualityExpression
																														expr+=
																														(RelationalExpression
																															expr+=
																															(ShiftExpression
																																expr+=
																																(AdditiveExpression
																																	expr+=
																																	(MultiplicativeExpression
																																		expr+=
																																		(CastExpression
																																			expr=
																																			(UnaryExpression
																																				expr=
																																				(PostfixExpression
																																					expr+=
																																					(PrimaryExpression
																																						id++"arg3"
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										)
																									)
																								) // end LogicalOrExpression
																							)
																						) // end assignment expression
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										)
									)
								), // end LogicalOrExpression
								// : "a" (128),
								(LogicalOrExpression
									expr+=
									(LogicalAndExpression
										expr+=
										(InclusiveOrExpression
											expr+=
											(ExclusiveOrExpression
												expr+=
												(AndExpression
													expr+=
													(EqualityExpression
														expr+=
														(RelationalExpression
															expr+=
															(ShiftExpression
																expr+=
																(AdditiveExpression
																	expr+=
																	(MultiplicativeExpression
																		expr+=
																		(CastExpression
																			expr=
																			(UnaryExpression
																				expr=
																				(PostfixExpression
																					expr+=
																					(PrimaryExpression
																						const=
																						(Constant
																							str++"\\\"a\\\""
																						)
																					),
																					argumentExpressionList+=
																					(ArgumentExpressionList
																						expr+=
																						(AssignmentExpression
																							expr=
																							(ConditionalExpression
																								expr=
																								(LogicalOrExpression
																									expr+=
																									(LogicalAndExpression
																										expr+=
																										(InclusiveOrExpression
																											expr+=
																											(ExclusiveOrExpression
																												expr+=
																												(AndExpression
																													expr+=
																													(EqualityExpression
																														expr+=
																														(RelationalExpression
																															expr+=
																															(ShiftExpression
																																expr+=
																																(AdditiveExpression
																																	expr+=
																																	(MultiplicativeExpression
																																		expr+=
																																		(CastExpression
																																			expr=
																																			(UnaryExpression
																																				expr=
																																				(PostfixExpression
																																					expr+=
																																					(PrimaryExpression
																																						const=
																																						(Constant
																																							dec++"128"
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										)
																									)
																								) // end LogicalOrExpression
																							)
																						) // end assignment expression
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										)
									)
								), // end LogicalOrExpression
								// "memory"
								(LogicalOrExpression
									expr+=
									(LogicalAndExpression
										expr+=
										(InclusiveOrExpression
											expr+=
											(ExclusiveOrExpression
												expr+=
												(AndExpression
													expr+=
													(EqualityExpression
														expr+=
														(RelationalExpression
															expr+=
															(ShiftExpression
																expr+=
																(AdditiveExpression
																	expr+=
																	(MultiplicativeExpression
																		expr+=
																		(CastExpression
																			expr=
																			(UnaryExpression
																				expr=
																				(PostfixExpression
																					expr+=
																					(PrimaryExpression
																						const=
																						(Constant
																							str++"\\\"memory\\\""
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										)
									)
								), // end LogicalOrExpression
								// "cc"
								(LogicalOrExpression
									expr+=
									(LogicalAndExpression
										expr+=
										(InclusiveOrExpression
											expr+=
											(ExclusiveOrExpression
												expr+=
												(AndExpression
													expr+=
													(EqualityExpression
														expr+=
														(RelationalExpression
															expr+=
															(ShiftExpression
																expr+=
																(AdditiveExpression
																	expr+=
																	(MultiplicativeExpression
																		expr+=
																		(CastExpression
																			expr=
																			(UnaryExpression
																				expr=
																				(PostfixExpression
																					expr+=
																					(PrimaryExpression
																						const=
																						(Constant
																							str++"\\\"cc\\\""
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										)
									)
								), // end LogicalOrExpression
								semi++";"
							) // end AsmStatement
						),
						// if (...) { }
						(Statement
							stmt=
							(SelectionStatement
								if++"if",
								expr=
								(Expression
									exprExpr+=
									(AssignmentExpression
										expr=
										(ConditionalExpression
											expr=
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		op+*"[<=]",
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(CastExpression
																								expr=
																								(UnaryExpression
																									expr=
																								
																									(PostfixExpression
																										expr+=
																										(PrimaryExpression
																											const=
																											(Constant
																												dec++"125"
																											)
																										)
																									)
																								
																								)
																							),
																							op=
																							(UnaryOperator
																								op++"-"
																							)
																						)
																					)
																				)
																			)
																		),
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									id++"res"
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													), // end inclusive or expression
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		op+*"[<]",
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									id++"res"
																								)
																							)
																						)
																					)
																				)
																			)
																		),
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									const=
																									(Constant
																										dec++"0"
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													) // end inclusive or expression
												) // end logical and expression
											)
										)
									)
								), // end expression
								ifStatement=
								(Statement
									stmt=
									(CompoundStatement
										body=
										(BodyStatement
											blockList+=
											(BlockList
												statement+=
												// errno = -res;
												(Statement
													stmt=
													(ExpressionStatement
														expression=
														(Expression
															exprExpr+=
															(AssignmentExpression
																expr=
																(UnaryExpression
																	expr=
																	(PostfixExpression
																		expr+=
																		(PrimaryExpression
																			id++"errno"
																		)
																	)
																), // end unary expression
																op=
																(AssignmentOperator
																	op++"="
																),
																assignmentExpr=
																(AssignmentExpression
																	expr=
																	(ConditionalExpression
																		expr=
																		(LogicalOrExpression
																			expr+=
																			(LogicalAndExpression
																				expr+=
																				(InclusiveOrExpression
																					expr+=
																					(ExclusiveOrExpression
																						expr+=
																						(AndExpression
																							expr+=
																							(EqualityExpression
																								expr+=
																								(RelationalExpression
																									expr+=
																									(ShiftExpression
																										expr+=
																										(AdditiveExpression
																											expr+=
																											(MultiplicativeExpression
																												expr+=
																												(CastExpression
																													expr=
																													(UnaryExpression
																														op=
																														(UnaryOperator
																															op++"-"
																														),
																														expr=
																														(CastExpression
																															expr=
																															(UnaryExpression
																																expr=
																																(PostfixExpression
																																	expr+=
																																	(PrimaryExpression
																																		id++"res"
																																	)
																																)
																															
																															)
																														)
																													)
																												)
																											)
																										)
																									)
																								)
																								
																							)
																						)
																					)
																				)
																			)
																		)
																	) // end conditional expression
																) // end assignment expression
															) // end assignment expression
															
														)//end expression
													)
												), // end statement (errno = ...)
												// res = -1;
												(Statement
													stmt=
													(ExpressionStatement
														expression=
														(Expression
															exprExpr+=
															(AssignmentExpression
																expr=
																(UnaryExpression
																	expr=
																	(PostfixExpression
																		expr+=
																		(PrimaryExpression
																			id++"res"
																		)
																	)
																), // end unary expression
																op=
																(AssignmentOperator
																	op++"="
																),
																assignmentExpr=
																(AssignmentExpression
																	expr=
																	(ConditionalExpression
																		expr=
																		(LogicalOrExpression
																			expr+=
																			(LogicalAndExpression
																				expr+=
																				(InclusiveOrExpression
																					expr+=
																					(ExclusiveOrExpression
																						expr+=
																						(AndExpression
																							expr+=
																							(EqualityExpression
																								expr+=
																								(RelationalExpression
																									expr+=
																									(ShiftExpression
																										expr+=
																										(AdditiveExpression
																											expr+=
																											(MultiplicativeExpression
																												expr+=
																												(CastExpression
																													expr=
																													(UnaryExpression
																														op=
																														(UnaryOperator
																															op++"-"
																														),
																														expr=
																														(CastExpression
																															expr=
																															(UnaryExpression
																																expr=
																																(PostfixExpression
																																	expr+=
																																	(PrimaryExpression
																																		const=
																																		(Constant
																																			dec++"1"
																																		)
																																	)
																																)
																															
																															)
																														)
																													)
																												)
																											)
																										)
																									)
																								)
																								
																							)
																						)
																					)
																				)
																			)
																		)
																	) // end conditional expression
																) // end assignment expression
															) // end assignment expression
															
														)//end expression
													)
												) // end statement (res = ...)
											)
										)
									) // end compound statement
								) // end ifStatement=Statement
							) // end SelectionStatement
						), // end Statement
						// return res;
						(Statement
							stmt=
							(JumpStatement
								expr=
								(Expression
									exprExpr+=
									(AssignmentExpression
										expr=
										(ConditionalExpression
											expr=
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									id++"res"
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										)
									)
								), // end expression
							return++"return",
							semi++";"
							) // end jump statement
						) // end statement
					) // end block list
				) // end body statement
			) // end function definition			
		) // end external declaration of function
	)
)
