package at.jku.weiner.c
language c
//----------------------------------------------------------------------
source file="res/Test0034_Union.c"
//----------------------------------------------------------------------
lexer-tokens
LINEDIRECTIVE NEWLINE
NEWLINE

KW_INT WHITESPACE ID LEFTPAREN KW_VOID RIGHTPAREN WHITESPACE LEFTBRACE NEWLINE
	// unsigned long size = (unsigned long)sizeof(number);
	WHITESPACE LINE_COMMENT NEWLINE
	// printf(s)
	WHITESPACE ID LEFTPAREN STRING_LITERAL COMMA WHITESPACE ID RIGHTPAREN SEMI NEWLINE
	WHITESPACE LINE_COMMENT NEWLINE
	//WHITESPACE ID LEFTPAREN STRING_LITERAL COMMA WHITESPACE 
	//	KW_SIZEOF LEFTPAREN ID DOT ID RIGHTPAREN RIGHTPAREN SEMI NEWLINE
	WHITESPACE ID LEFTPAREN STRING_LITERAL COMMA WHITESPACE 
		KW_SIZEOF LEFTPAREN KW_FLOAT RIGHTPAREN RIGHTPAREN SEMI NEWLINE
	// number.numChar = 65;
	WHITESPACE LINE_COMMENT NEWLINE
	// printf(s)
	WHITESPACE ID LEFTPAREN STRING_LITERAL COMMA WHITESPACE ID DOT ID RIGHTPAREN SEMI NEWLINE
	WHITESPACE ID LEFTPAREN STRING_LITERAL COMMA WHITESPACE ID DOT ID RIGHTPAREN SEMI NEWLINE
	WHITESPACE ID LEFTPAREN STRING_LITERAL COMMA WHITESPACE ID DOT ID RIGHTPAREN SEMI NEWLINE
	// number.numFloat = 0.56789;
	WHITESPACE LINE_COMMENT NEWLINE
	// printf(s)
	WHITESPACE ID LEFTPAREN STRING_LITERAL COMMA WHITESPACE ID DOT ID RIGHTPAREN SEMI NEWLINE
	WHITESPACE ID LEFTPAREN STRING_LITERAL COMMA WHITESPACE ID DOT ID RIGHTPAREN SEMI NEWLINE
	// return
	WHITESPACE KW_RETURN WHITESPACE DECIMAL_LITERAL SEMI NEWLINE
RIGHTBRACE NEWLINE
//----------------------------------------------------------------------
(Model unit+=
	(TranslationUnit 
		external+=
		// int main(...)
		(ExternalDeclaration 
			functiondefHead=
			(FunctionDefHead
				funDeclSpecifiers=
				(DeclarationSpecifiers
					declarationSpecifier+=
					(TypeSpecifier
						name++"int"
					)
				),
				funDeclarator=
				(Declarator
					declarator=
					(DirectDeclarator
						id++"main",
						declaratorSuffix+=
						(DeclaratorSuffix
							lastSuffix=
							(DirectDeclaratorLastSuffix
								parameterTypeList+=
								(ParameterTypeList
									list=
									(ParameterList
										parameterDeclaration+=
										(ParameterDeclaration
											declSpecifiers=
											(DeclarationSpecifiers
												declarationSpecifier+=
												(TypeSpecifier
													name++"void"
												)
											)
										) 
									) // end parameter list
								)
							)
						) // DeclaratorSuffix
					)
				)
			),
			functionDefinition=
			(FunctionDefinition
				body=
				(BodyStatement
					blockList+=
					(BlockList
						statement+=
						// printf(..., size);
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(Expression
									exprExpr+=
									(AssignmentExpression
										expr=
										(ConditionalExpression
											expr=
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									id++"printf"
																								),
																								argumentExpressionList+=
																								(ArgumentExpressionList
																									expr+=
																									(AssignmentExpression
																										expr=
																										(ConditionalExpression
																											expr=
																											(LogicalOrExpression
																												expr+=
																												(LogicalAndExpression
																													expr+=
																													(InclusiveOrExpression
																														expr+=
																														(ExclusiveOrExpression
																															expr+=
																															(AndExpression
																																expr+=
																																(EqualityExpression
																																	expr+=
																																	(RelationalExpression
																																		expr+=
																																		(ShiftExpression
																																			expr+=
																																			(AdditiveExpression
																																				expr+=
																																				(MultiplicativeExpression
																																					expr+=
																																					(CastExpression
																																						expr=
																																						(UnaryExpression
																																							expr=
																																							(PostfixExpression
																																								expr+=
																																								(PrimaryExpression
																																									const=
																																									(Constant
																																										str++"\\\"sizeof(number)=%lu\\\\n\\\""
																																									)
																																								)
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										)
																									), // end assignment expression
																									(AssignmentExpression
																										expr=
																										(ConditionalExpression
																											expr=
																											(LogicalOrExpression
																												expr+=
																												(LogicalAndExpression
																													expr+=
																													(InclusiveOrExpression
																														expr+=
																														(ExclusiveOrExpression
																															expr+=
																															(AndExpression
																																expr+=
																																(EqualityExpression
																																	expr+=
																																	(RelationalExpression
																																		expr+=
																																		(ShiftExpression
																																			expr+=
																																			(AdditiveExpression
																																				expr+=
																																				(MultiplicativeExpression
																																					expr+=
																																					(CastExpression
																																						expr=
																																						(UnaryExpression
																																							expr=
																																							(PostfixExpression
																																								expr+=
																																								(PrimaryExpression
																																									id++"size"
																																								)
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										)
																									) // end assignment expression
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																	
																)
															)
														)
													)
												)
											)
										)
									)
								), // end expression
								semi++";"
							) // end expression statement
						), // end statement
						// printf(..., sizeof(float);
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(Expression
									exprExpr+=
									(AssignmentExpression
										expr=
										(ConditionalExpression
											expr=
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									id++"printf"
																								),
																								argumentExpressionList+=
																								(ArgumentExpressionList
																									expr+=
																									(AssignmentExpression
																										expr=
																										(ConditionalExpression
																											expr=
																											(LogicalOrExpression
																												expr+=
																												(LogicalAndExpression
																													expr+=
																													(InclusiveOrExpression
																														expr+=
																														(ExclusiveOrExpression
																															expr+=
																															(AndExpression
																																expr+=
																																(EqualityExpression
																																	expr+=
																																	(RelationalExpression
																																		expr+=
																																		(ShiftExpression
																																			expr+=
																																			(AdditiveExpression
																																				expr+=
																																				(MultiplicativeExpression
																																					expr+=
																																					(CastExpression
																																						expr=
																																						(UnaryExpression
																																							expr=
																																							(PostfixExpression
																																								expr+=
																																								(PrimaryExpression
																																									const=
																																									(Constant
																																										str++"\\\"sizeof(float)=%lu\\\\n\\\""
																																									)
																																								)
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										)
																									), // end assignment expression
																									(AssignmentExpression
																										expr=
																										(ConditionalExpression
																											expr=
																											(LogicalOrExpression
																												expr+=
																												(LogicalAndExpression
																													expr+=
																													(InclusiveOrExpression
																														expr+=
																														(ExclusiveOrExpression
																															expr+=
																															(AndExpression
																																expr+=
																																(EqualityExpression
																																	expr+=
																																	(RelationalExpression
																																		expr+=
																																		(ShiftExpression
																																			expr+=
																																			(AdditiveExpression
																																				expr+=
																																				(MultiplicativeExpression
																																					expr+=
																																					(CastExpression
																																						expr=
																																						(UnaryExpression
																																							sizeOf++"sizeof",
																																							typeName=
																																							(TypeName
																																								list=
																																								(SpecifierQualifierList
																																									typeSpecifier+=
																																									(TypeSpecifier
																																										name++"float"
																																									)
																																								)
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										)
																									) // end assignment expression
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																	
																)
															)
														)
													)
												)
											)
										)
									)
								), // end expression
								semi++";"
							) // end expression statement
						), // end statement
						// printf(..., number.numFloat);
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(Expression
									exprExpr+=
									(AssignmentExpression
										expr=
										(ConditionalExpression
											expr=
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									id++"printf"
																								),
																								argumentExpressionList+=
																								(ArgumentExpressionList
																									expr+=
																									(AssignmentExpression
																										expr=
																										(ConditionalExpression
																											expr=
																											(LogicalOrExpression
																												expr+=
																												(LogicalAndExpression
																													expr+=
																													(InclusiveOrExpression
																														expr+=
																														(ExclusiveOrExpression
																															expr+=
																															(AndExpression
																																expr+=
																																(EqualityExpression
																																	expr+=
																																	(RelationalExpression
																																		expr+=
																																		(ShiftExpression
																																			expr+=
																																			(AdditiveExpression
																																				expr+=
																																				(MultiplicativeExpression
																																					expr+=
																																					(CastExpression
																																						expr=
																																						(UnaryExpression
																																							expr=
																																							(PostfixExpression
																																								expr+=
																																								(PrimaryExpression
																																									const=
																																									(Constant
																																										str++"\\\"number.numChar(as decimal)=%d\\\\n\\\""
																																									)
																																								)
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										)
																									), // end assignment expression
																									(AssignmentExpression
																										expr=
																										(ConditionalExpression
																											expr=
																											(LogicalOrExpression
																												expr+=
																												(LogicalAndExpression
																													expr+=
																													(InclusiveOrExpression
																														expr+=
																														(ExclusiveOrExpression
																															expr+=
																															(AndExpression
																																expr+=
																																(EqualityExpression
																																	expr+=
																																	(RelationalExpression
																																		expr+=
																																		(ShiftExpression
																																			expr+=
																																			(AdditiveExpression
																																				expr+=
																																				(MultiplicativeExpression
																																					expr+=
																																					(CastExpression
																																						expr=
																																						(UnaryExpression
																																							expr=
																																							(PostfixExpression
																																								expr+=
																																								(PrimaryExpression
																																									id++"number"
																																								),
																																								dot+*"[.]",
																																								id+*"[numChar]"
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										)
																									) // end assignment expression
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																	
																)
															)
														)
													)
												)
											)
										)
									)
								), // end expression
								semi++";"
							) // end expression statement
						), // end statement
						// printf(..., number.numFloat);
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(Expression
									exprExpr+=
									(AssignmentExpression
										expr=
										(ConditionalExpression
											expr=
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									id++"printf"
																								),
																								argumentExpressionList+=
																								(ArgumentExpressionList
																									expr+=
																									(AssignmentExpression
																										expr=
																										(ConditionalExpression
																											expr=
																											(LogicalOrExpression
																												expr+=
																												(LogicalAndExpression
																													expr+=
																													(InclusiveOrExpression
																														expr+=
																														(ExclusiveOrExpression
																															expr+=
																															(AndExpression
																																expr+=
																																(EqualityExpression
																																	expr+=
																																	(RelationalExpression
																																		expr+=
																																		(ShiftExpression
																																			expr+=
																																			(AdditiveExpression
																																				expr+=
																																				(MultiplicativeExpression
																																					expr+=
																																					(CastExpression
																																						expr=
																																						(UnaryExpression
																																							expr=
																																							(PostfixExpression
																																								expr+=
																																								(PrimaryExpression
																																									const=
																																									(Constant
																																										str++"\\\"number.numChar(as char)=%c\\\\n\\\""
																																									)
																																								)
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										)
																									), // end assignment expression
																									(AssignmentExpression
																										expr=
																										(ConditionalExpression
																											expr=
																											(LogicalOrExpression
																												expr+=
																												(LogicalAndExpression
																													expr+=
																													(InclusiveOrExpression
																														expr+=
																														(ExclusiveOrExpression
																															expr+=
																															(AndExpression
																																expr+=
																																(EqualityExpression
																																	expr+=
																																	(RelationalExpression
																																		expr+=
																																		(ShiftExpression
																																			expr+=
																																			(AdditiveExpression
																																				expr+=
																																				(MultiplicativeExpression
																																					expr+=
																																					(CastExpression
																																						expr=
																																						(UnaryExpression
																																							expr=
																																							(PostfixExpression
																																								expr+=
																																								(PrimaryExpression
																																									id++"number"
																																								),
																																								dot+*"[.]",
																																								id+*"[numChar]"
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										)
																									) // end assignment expression
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																	
																)
															)
														)
													)
												)
											)
										)
									)
								), // end expression
								semi++";"
							) // end expression statement
						), // end statement
						// printf(..., number.numFloat);
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(Expression
									exprExpr+=
									(AssignmentExpression
										expr=
										(ConditionalExpression
											expr=
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									id++"printf"
																								),
																								argumentExpressionList+=
																								(ArgumentExpressionList
																									expr+=
																									(AssignmentExpression
																										expr=
																										(ConditionalExpression
																											expr=
																											(LogicalOrExpression
																												expr+=
																												(LogicalAndExpression
																													expr+=
																													(InclusiveOrExpression
																														expr+=
																														(ExclusiveOrExpression
																															expr+=
																															(AndExpression
																																expr+=
																																(EqualityExpression
																																	expr+=
																																	(RelationalExpression
																																		expr+=
																																		(ShiftExpression
																																			expr+=
																																			(AdditiveExpression
																																				expr+=
																																				(MultiplicativeExpression
																																					expr+=
																																					(CastExpression
																																						expr=
																																						(UnaryExpression
																																							expr=
																																							(PostfixExpression
																																								expr+=
																																								(PrimaryExpression
																																									const=
																																									(Constant
																																										str++"\\\"number.numFloat=%f\\\\n\\\""
																																									)
																																								)
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										)
																									), // end assignment expression
																									(AssignmentExpression
																										expr=
																										(ConditionalExpression
																											expr=
																											(LogicalOrExpression
																												expr+=
																												(LogicalAndExpression
																													expr+=
																													(InclusiveOrExpression
																														expr+=
																														(ExclusiveOrExpression
																															expr+=
																															(AndExpression
																																expr+=
																																(EqualityExpression
																																	expr+=
																																	(RelationalExpression
																																		expr+=
																																		(ShiftExpression
																																			expr+=
																																			(AdditiveExpression
																																				expr+=
																																				(MultiplicativeExpression
																																					expr+=
																																					(CastExpression
																																						expr=
																																						(UnaryExpression
																																							expr=
																																							(PostfixExpression
																																								expr+=
																																								(PrimaryExpression
																																									id++"number"
																																								),
																																								dot+*"[.]",
																																								id+*"[numFloat]"
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										)
																									) // end assignment expression
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																	
																)
															)
														)
													)
												)
											)
										)
									)
								), // end expression
								semi++";"
							) // end expression statement
						), // end statement
						
						// number.numFloat = 0.56789;
						
						// printf(..., number.numFloat);
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(Expression
									exprExpr+=
									(AssignmentExpression
										expr=
										(ConditionalExpression
											expr=
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									id++"printf"
																								),
																								argumentExpressionList+=
																								(ArgumentExpressionList
																									expr+=
																									(AssignmentExpression
																										expr=
																										(ConditionalExpression
																											expr=
																											(LogicalOrExpression
																												expr+=
																												(LogicalAndExpression
																													expr+=
																													(InclusiveOrExpression
																														expr+=
																														(ExclusiveOrExpression
																															expr+=
																															(AndExpression
																																expr+=
																																(EqualityExpression
																																	expr+=
																																	(RelationalExpression
																																		expr+=
																																		(ShiftExpression
																																			expr+=
																																			(AdditiveExpression
																																				expr+=
																																				(MultiplicativeExpression
																																					expr+=
																																					(CastExpression
																																						expr=
																																						(UnaryExpression
																																							expr=
																																							(PostfixExpression
																																								expr+=
																																								(PrimaryExpression
																																									const=
																																									(Constant
																																										str++"\\\"number.numChar(as decimal)=%d\\\\n\\\""
																																									)
																																								)
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										)
																									), // end assignment expression
																									(AssignmentExpression
																										expr=
																										(ConditionalExpression
																											expr=
																											(LogicalOrExpression
																												expr+=
																												(LogicalAndExpression
																													expr+=
																													(InclusiveOrExpression
																														expr+=
																														(ExclusiveOrExpression
																															expr+=
																															(AndExpression
																																expr+=
																																(EqualityExpression
																																	expr+=
																																	(RelationalExpression
																																		expr+=
																																		(ShiftExpression
																																			expr+=
																																			(AdditiveExpression
																																				expr+=
																																				(MultiplicativeExpression
																																					expr+=
																																					(CastExpression
																																						expr=
																																						(UnaryExpression
																																							expr=
																																							(PostfixExpression
																																								expr+=
																																								(PrimaryExpression
																																									id++"number"
																																								),
																																								dot+*"[.]",
																																								id+*"[numChar]"
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										)
																									) // end assignment expression
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																	
																)
															)
														)
													)
												)
											)
										)
									)
								), // end expression
								semi++";"
							) // end expression statement
						), // end statement
						// printf(..., number.numFloat);
						(Statement
							stmt=
							(ExpressionStatement
								expression=
								(Expression
									exprExpr+=
									(AssignmentExpression
										expr=
										(ConditionalExpression
											expr=
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									id++"printf"
																								),
																								argumentExpressionList+=
																								(ArgumentExpressionList
																									expr+=
																									(AssignmentExpression
																										expr=
																										(ConditionalExpression
																											expr=
																											(LogicalOrExpression
																												expr+=
																												(LogicalAndExpression
																													expr+=
																													(InclusiveOrExpression
																														expr+=
																														(ExclusiveOrExpression
																															expr+=
																															(AndExpression
																																expr+=
																																(EqualityExpression
																																	expr+=
																																	(RelationalExpression
																																		expr+=
																																		(ShiftExpression
																																			expr+=
																																			(AdditiveExpression
																																				expr+=
																																				(MultiplicativeExpression
																																					expr+=
																																					(CastExpression
																																						expr=
																																						(UnaryExpression
																																							expr=
																																							(PostfixExpression
																																								expr+=
																																								(PrimaryExpression
																																									const=
																																									(Constant
																																										str++"\\\"number.numFloat=%f\\\\n\\\""
																																									)
																																								)
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										)
																									), // end assignment expression
																									(AssignmentExpression
																										expr=
																										(ConditionalExpression
																											expr=
																											(LogicalOrExpression
																												expr+=
																												(LogicalAndExpression
																													expr+=
																													(InclusiveOrExpression
																														expr+=
																														(ExclusiveOrExpression
																															expr+=
																															(AndExpression
																																expr+=
																																(EqualityExpression
																																	expr+=
																																	(RelationalExpression
																																		expr+=
																																		(ShiftExpression
																																			expr+=
																																			(AdditiveExpression
																																				expr+=
																																				(MultiplicativeExpression
																																					expr+=
																																					(CastExpression
																																						expr=
																																						(UnaryExpression
																																							expr=
																																							(PostfixExpression
																																								expr+=
																																								(PrimaryExpression
																																									id++"number"
																																								),
																																								dot+*"[.]",
																																								id+*"[numFloat]"
																																							)
																																						)
																																					)
																																				)
																																			)
																																		)
																																	)
																																)
																															)
																														)
																													)
																												)
																											)
																										)
																									) // end assignment expression
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																	
																)
															)
														)
													)
												)
											)
										)
									)
								), // end expression
								semi++";"
							) // end expression statement
						), // end statement
						// return statement
						(Statement
							stmt=
							(JumpStatement
								expr=
								(Expression
									exprExpr+=
									(AssignmentExpression
										expr=
										(ConditionalExpression
											expr=
											(LogicalOrExpression
												expr+=
												(LogicalAndExpression
													expr+=
													(InclusiveOrExpression
														expr+=
														(ExclusiveOrExpression
															expr+=
															(AndExpression
																expr+=
																(EqualityExpression
																	expr+=
																	(RelationalExpression
																		expr+=
																		(ShiftExpression
																			expr+=
																			(AdditiveExpression
																				expr+=
																				(MultiplicativeExpression
																					expr+=
																					(CastExpression
																						expr=
																						(UnaryExpression
																							expr=
																							(PostfixExpression
																								expr+=
																								(PrimaryExpression
																									const=
																									(Constant
																										dec++"0"
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																	
																)
															)
														)
													)
												)
											)
										)
									)
								), // end expression
								return++"return",
								semi++";"
							) // end jump statement
						) // end second statement
					) // end block list
				) // end body statement
			)
		) // end external declaration
	)
)
