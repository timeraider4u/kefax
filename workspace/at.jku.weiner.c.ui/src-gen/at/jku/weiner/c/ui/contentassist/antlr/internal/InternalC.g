/*
 * generated by Xtext 2.9.0-SNAPSHOT
 */
grammar InternalC;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	 memoize=true;
	
	 k=2;
	
	
	 forceHoisting=true;
	
}

@lexer::header {
package at.jku.weiner.c.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package at.jku.weiner.c.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import at.jku.weiner.c.services.CGrammarAccess;

}

@parser::members {
 
 	private CGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(CGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)
{ after(grammarAccess.getModelAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTranslationUnit
entryRuleTranslationUnit 
:
{ before(grammarAccess.getTranslationUnitRule()); }
	 ruleTranslationUnit
{ after(grammarAccess.getTranslationUnitRule()); } 
	 EOF 
;

// Rule TranslationUnit
ruleTranslationUnit
    @init {
		int stackSize = keepStackSize();
		if ( state.backtracking==0 ) {at.jku.weiner.c.Scope.createNewScope("TranslationUnit");}
    }
	@after {
    		at.jku.weiner.c.Scope.removeScope(0);
     }:

(
{ before(grammarAccess.getTranslationUnitAccess().getGroup()); }
(rule__TranslationUnit__Group__0)
{ after(grammarAccess.getTranslationUnitAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExternalDeclaration
entryRuleExternalDeclaration 
:
{ before(grammarAccess.getExternalDeclarationRule()); }
	 ruleExternalDeclaration
{ after(grammarAccess.getExternalDeclarationRule()); } 
	 EOF 
;

// Rule ExternalDeclaration
ruleExternalDeclaration
    @init {
		int stackSize = keepStackSize();
		if ( state.backtracking==0 ) {at.jku.weiner.c.Log.log("ExternalDeclaration-enter");}
    }
	@after {
    		at.jku.weiner.c.Log.log("ExternalDeclaration-leave");
     }:

(
{ before(grammarAccess.getExternalDeclarationAccess().getGroup()); }
(rule__ExternalDeclaration__Group__0)
{ after(grammarAccess.getExternalDeclarationAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionDefHead
entryRuleFunctionDefHead 
:
{ before(grammarAccess.getFunctionDefHeadRule()); }
	 ruleFunctionDefHead
{ after(grammarAccess.getFunctionDefHeadRule()); } 
	 EOF 
;

// Rule FunctionDefHead
ruleFunctionDefHead
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getFunctionDefHeadAccess().getGroup()); }
(rule__FunctionDefHead__Group__0)
{ after(grammarAccess.getFunctionDefHeadAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionDefinition
entryRuleFunctionDefinition 
:
{ before(grammarAccess.getFunctionDefinitionRule()); }
	 ruleFunctionDefinition
{ after(grammarAccess.getFunctionDefinitionRule()); } 
	 EOF 
;

// Rule FunctionDefinition
ruleFunctionDefinition
    @init {
		int stackSize = keepStackSize();
		if ( state.backtracking==0 ) {at.jku.weiner.c.Scope.createNewScope("FunctionDefinition");}
    }
	@after {
    		at.jku.weiner.c.Scope.removeScope();
     }:

(
{ before(grammarAccess.getFunctionDefinitionAccess().getGroup()); }
(rule__FunctionDefinition__Group__0)
{ after(grammarAccess.getFunctionDefinitionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeclaration
entryRuleDeclaration 
:
{ before(grammarAccess.getDeclarationRule()); }
	 ruleDeclaration
{ after(grammarAccess.getDeclarationRule()); } 
	 EOF 
;

// Rule Declaration
ruleDeclaration
    @init {
		int stackSize = keepStackSize();
		if ( state.backtracking==0 ) {at.jku.weiner.c.Scope.setTypedef(false);}
    }
	@after {
    		at.jku.weiner.c.Log.log("Declaration-leave");
     }:

(
{ before(grammarAccess.getDeclarationAccess().getGroup()); }
(rule__Declaration__Group__0)
{ after(grammarAccess.getDeclarationAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionDeclarationSpecifiers
entryRuleFunctionDeclarationSpecifiers 
:
{ before(grammarAccess.getFunctionDeclarationSpecifiersRule()); }
	 ruleFunctionDeclarationSpecifiers
{ after(grammarAccess.getFunctionDeclarationSpecifiersRule()); } 
	 EOF 
;

// Rule FunctionDeclarationSpecifiers
ruleFunctionDeclarationSpecifiers
    @init {
		int stackSize = keepStackSize();
		if ( state.backtracking==0 ) {at.jku.weiner.c.Log.log("DeclarationSpecifiers-enter");}
    }
	@after {
    		at.jku.weiner.c.Log.log("DeclarationSpecifiers-leave");
     }:

(
{ before(grammarAccess.getFunctionDeclarationSpecifiersAccess().getGroup()); }
(rule__FunctionDeclarationSpecifiers__Group__0)
{ after(grammarAccess.getFunctionDeclarationSpecifiersAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeclarationSpecifiers
entryRuleDeclarationSpecifiers 
:
{ before(grammarAccess.getDeclarationSpecifiersRule()); }
	 ruleDeclarationSpecifiers
{ after(grammarAccess.getDeclarationSpecifiersRule()); } 
	 EOF 
;

// Rule DeclarationSpecifiers
ruleDeclarationSpecifiers
    @init {
		int stackSize = keepStackSize();
		if ( state.backtracking==0 ) {at.jku.weiner.c.Log.log("DeclarationSpecifiers-enter");}
    }
	@after {
    		at.jku.weiner.c.Log.log("DeclarationSpecifiers-leave");
     }:

(
{ before(grammarAccess.getDeclarationSpecifiersAccess().getGroup()); }
(rule__DeclarationSpecifiers__Group__0)
{ after(grammarAccess.getDeclarationSpecifiersAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInitDeclaratorList
entryRuleInitDeclaratorList 
:
{ before(grammarAccess.getInitDeclaratorListRule()); }
	 ruleInitDeclaratorList
{ after(grammarAccess.getInitDeclaratorListRule()); } 
	 EOF 
;

// Rule InitDeclaratorList
ruleInitDeclaratorList
    @init {
		int stackSize = keepStackSize();
		if ( state.backtracking==0 ) {at.jku.weiner.c.Log.log("InitDeclaratorList-enter");}
    }
	@after {
    		at.jku.weiner.c.Log.log("InitDeclaratorList-leave");
     }:

(
{ before(grammarAccess.getInitDeclaratorListAccess().getGroup()); }
(rule__InitDeclaratorList__Group__0)
{ after(grammarAccess.getInitDeclaratorListAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInitDeclarator
entryRuleInitDeclarator 
:
{ before(grammarAccess.getInitDeclaratorRule()); }
	 ruleInitDeclarator
{ after(grammarAccess.getInitDeclaratorRule()); } 
	 EOF 
;

// Rule InitDeclarator
ruleInitDeclarator
    @init {
		int stackSize = keepStackSize();
		if ( state.backtracking==0 ) {at.jku.weiner.c.Log.log("InitDeclarator-enter");}
    }
	@after {
    		at.jku.weiner.c.Log.log("InitDeclarator-leave");
     }:

(
{ before(grammarAccess.getInitDeclaratorAccess().getGroup()); }
(rule__InitDeclarator__Group__0)
{ after(grammarAccess.getInitDeclaratorAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStorageClassSpecifier
entryRuleStorageClassSpecifier 
:
{ before(grammarAccess.getStorageClassSpecifierRule()); }
	 ruleStorageClassSpecifier
{ after(grammarAccess.getStorageClassSpecifierRule()); } 
	 EOF 
;

// Rule StorageClassSpecifier
ruleStorageClassSpecifier
    @init {
		int stackSize = keepStackSize();
		if ( state.backtracking==0 ) {at.jku.weiner.c.Log.log("StorageClassSpecifier-enter");}
    }
	@after {
    		at.jku.weiner.c.Log.log("StorageClassSpecifier-leave");
     }:

(
{ before(grammarAccess.getStorageClassSpecifierAccess().getGroup()); }
(rule__StorageClassSpecifier__Group__0)
{ after(grammarAccess.getStorageClassSpecifierAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeSpecifier
entryRuleTypeSpecifier 
:
{ before(grammarAccess.getTypeSpecifierRule()); }
	 ruleTypeSpecifier
{ after(grammarAccess.getTypeSpecifierRule()); } 
	 EOF 
;

// Rule TypeSpecifier
ruleTypeSpecifier
    @init {
		int stackSize = keepStackSize();
		if ( state.backtracking==0 ) {at.jku.weiner.c.Log.log("TypeSpecifier-enter");}
    }
	@after {
    		at.jku.weiner.c.Log.log("TypeSpecifier-leave");
     }:

(
{ before(grammarAccess.getTypeSpecifierAccess().getAlternatives()); }
(rule__TypeSpecifier__Alternatives)
{ after(grammarAccess.getTypeSpecifierAccess().getAlternatives()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypedefName
entryRuleTypedefName 
:
{ before(grammarAccess.getTypedefNameRule()); }
	 ruleTypedefName
{ after(grammarAccess.getTypedefNameRule()); } 
	 EOF 
;

// Rule TypedefName
ruleTypedefName
    @init {
		int stackSize = keepStackSize();
		if ( state.backtracking==0 ) {at.jku.weiner.c.Log.log("TypedefName-enter");}
    }
	@after {
    		at.jku.weiner.c.Log.log("TypedefName-leave");
     }:

(
{ before(grammarAccess.getTypedefNameAccess().getGroup()); }
(rule__TypedefName__Group__0)
{ after(grammarAccess.getTypedefNameAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStructOrUnionSpecifier
entryRuleStructOrUnionSpecifier 
:
{ before(grammarAccess.getStructOrUnionSpecifierRule()); }
	 ruleStructOrUnionSpecifier
{ after(grammarAccess.getStructOrUnionSpecifierRule()); } 
	 EOF 
;

// Rule StructOrUnionSpecifier
ruleStructOrUnionSpecifier
    @init {
		int stackSize = keepStackSize();
		if ( state.backtracking==0 ) {at.jku.weiner.c.Scope.createNewScope("StructOrUnion");}
    }
	@after {
    		at.jku.weiner.c.Scope.removeScope();
     }:

(
{ before(grammarAccess.getStructOrUnionSpecifierAccess().getGroup()); }
(rule__StructOrUnionSpecifier__Group__0)
{ after(grammarAccess.getStructOrUnionSpecifierAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStructOrUnion
entryRuleStructOrUnion 
:
{ before(grammarAccess.getStructOrUnionRule()); }
	 ruleStructOrUnion
{ after(grammarAccess.getStructOrUnionRule()); } 
	 EOF 
;

// Rule StructOrUnion
ruleStructOrUnion
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getStructOrUnionAccess().getAlternatives()); }
(rule__StructOrUnion__Alternatives)
{ after(grammarAccess.getStructOrUnionAccess().getAlternatives()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStructDeclarationList
entryRuleStructDeclarationList 
:
{ before(grammarAccess.getStructDeclarationListRule()); }
	 ruleStructDeclarationList
{ after(grammarAccess.getStructDeclarationListRule()); } 
	 EOF 
;

// Rule StructDeclarationList
ruleStructDeclarationList
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
(
{ before(grammarAccess.getStructDeclarationListAccess().getStructDeclarationAssignment()); }
(rule__StructDeclarationList__StructDeclarationAssignment)
{ after(grammarAccess.getStructDeclarationListAccess().getStructDeclarationAssignment()); }
)
(
{ before(grammarAccess.getStructDeclarationListAccess().getStructDeclarationAssignment()); }
(rule__StructDeclarationList__StructDeclarationAssignment)*
{ after(grammarAccess.getStructDeclarationListAccess().getStructDeclarationAssignment()); }
)
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStructDeclaration
entryRuleStructDeclaration 
:
{ before(grammarAccess.getStructDeclarationRule()); }
	 ruleStructDeclaration
{ after(grammarAccess.getStructDeclarationRule()); } 
	 EOF 
;

// Rule StructDeclaration
ruleStructDeclaration
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getStructDeclarationAccess().getGroup()); }
(rule__StructDeclaration__Group__0)
{ after(grammarAccess.getStructDeclarationAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSpecifierQualifierList
entryRuleSpecifierQualifierList 
:
{ before(grammarAccess.getSpecifierQualifierListRule()); }
	 ruleSpecifierQualifierList
{ after(grammarAccess.getSpecifierQualifierListRule()); } 
	 EOF 
;

// Rule SpecifierQualifierList
ruleSpecifierQualifierList
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getSpecifierQualifierListAccess().getGroup()); }
(rule__SpecifierQualifierList__Group__0)
{ after(grammarAccess.getSpecifierQualifierListAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStructDeclaratorList
entryRuleStructDeclaratorList 
:
{ before(grammarAccess.getStructDeclaratorListRule()); }
	 ruleStructDeclaratorList
{ after(grammarAccess.getStructDeclaratorListRule()); } 
	 EOF 
;

// Rule StructDeclaratorList
ruleStructDeclaratorList
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getStructDeclaratorListAccess().getGroup()); }
(rule__StructDeclaratorList__Group__0)
{ after(grammarAccess.getStructDeclaratorListAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStructDeclarator
entryRuleStructDeclarator 
:
{ before(grammarAccess.getStructDeclaratorRule()); }
	 ruleStructDeclarator
{ after(grammarAccess.getStructDeclaratorRule()); } 
	 EOF 
;

// Rule StructDeclarator
ruleStructDeclarator
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getStructDeclaratorAccess().getAlternatives()); }
(rule__StructDeclarator__Alternatives)
{ after(grammarAccess.getStructDeclaratorAccess().getAlternatives()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumSpecifier
entryRuleEnumSpecifier 
:
{ before(grammarAccess.getEnumSpecifierRule()); }
	 ruleEnumSpecifier
{ after(grammarAccess.getEnumSpecifierRule()); } 
	 EOF 
;

// Rule EnumSpecifier
ruleEnumSpecifier
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getEnumSpecifierAccess().getGroup()); }
(rule__EnumSpecifier__Group__0)
{ after(grammarAccess.getEnumSpecifierAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumeratorList
entryRuleEnumeratorList 
:
{ before(grammarAccess.getEnumeratorListRule()); }
	 ruleEnumeratorList
{ after(grammarAccess.getEnumeratorListRule()); } 
	 EOF 
;

// Rule EnumeratorList
ruleEnumeratorList
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getEnumeratorListAccess().getGroup()); }
(rule__EnumeratorList__Group__0)
{ after(grammarAccess.getEnumeratorListAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumerator
entryRuleEnumerator 
:
{ before(grammarAccess.getEnumeratorRule()); }
	 ruleEnumerator
{ after(grammarAccess.getEnumeratorRule()); } 
	 EOF 
;

// Rule Enumerator
ruleEnumerator
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getEnumeratorAccess().getGroup()); }
(rule__Enumerator__Group__0)
{ after(grammarAccess.getEnumeratorAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeQualifier
entryRuleTypeQualifier 
:
{ before(grammarAccess.getTypeQualifierRule()); }
	 ruleTypeQualifier
{ after(grammarAccess.getTypeQualifierRule()); } 
	 EOF 
;

// Rule TypeQualifier
ruleTypeQualifier
    @init {
		int stackSize = keepStackSize();
		if ( state.backtracking==0 ) {at.jku.weiner.c.Log.log("TypeQualifier-enter");}
    }
	@after {
    		at.jku.weiner.c.Log.log("TypeQualifier-leave");
     }:

(
{ before(grammarAccess.getTypeQualifierAccess().getGroup()); }
(rule__TypeQualifier__Group__0)
{ after(grammarAccess.getTypeQualifierAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionSpecifier
entryRuleFunctionSpecifier 
:
{ before(grammarAccess.getFunctionSpecifierRule()); }
	 ruleFunctionSpecifier
{ after(grammarAccess.getFunctionSpecifierRule()); } 
	 EOF 
;

// Rule FunctionSpecifier
ruleFunctionSpecifier
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getFunctionSpecifierAccess().getGroup()); }
(rule__FunctionSpecifier__Group__0)
{ after(grammarAccess.getFunctionSpecifierAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeclarator
entryRuleDeclarator 
:
{ before(grammarAccess.getDeclaratorRule()); }
	 ruleDeclarator
{ after(grammarAccess.getDeclaratorRule()); } 
	 EOF 
;

// Rule Declarator
ruleDeclarator
    @init {
		int stackSize = keepStackSize();
		if ( state.backtracking==0 ) {at.jku.weiner.c.Log.log("Declarator-enter");}
    }
	@after {
    		at.jku.weiner.c.Log.log("Declarator-leave");
     }:

(
{ before(grammarAccess.getDeclaratorAccess().getGroup()); }
(rule__Declarator__Group__0)
{ after(grammarAccess.getDeclaratorAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDirectDeclarator
entryRuleDirectDeclarator 
:
{ before(grammarAccess.getDirectDeclaratorRule()); }
	 ruleDirectDeclarator
{ after(grammarAccess.getDirectDeclaratorRule()); } 
	 EOF 
;

// Rule DirectDeclarator
ruleDirectDeclarator
    @init {
		int stackSize = keepStackSize();
		if ( state.backtracking==0 ) {at.jku.weiner.c.Log.log("DirectDeclarator-enter");}
    }
	@after {
    		at.jku.weiner.c.Log.log("DirectDeclarator-leave");
     }:

(
{ before(grammarAccess.getDirectDeclaratorAccess().getGroup()); }
(rule__DirectDeclarator__Group__0)
{ after(grammarAccess.getDirectDeclaratorAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeclaratorSuffix
entryRuleDeclaratorSuffix 
:
{ before(grammarAccess.getDeclaratorSuffixRule()); }
	 ruleDeclaratorSuffix
{ after(grammarAccess.getDeclaratorSuffixRule()); } 
	 EOF 
;

// Rule DeclaratorSuffix
ruleDeclaratorSuffix
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getDeclaratorSuffixAccess().getGroup()); }
(rule__DeclaratorSuffix__Group__0)
{ after(grammarAccess.getDeclaratorSuffixAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDirectDeclaratorLastSuffix
entryRuleDirectDeclaratorLastSuffix 
:
{ before(grammarAccess.getDirectDeclaratorLastSuffixRule()); }
	 ruleDirectDeclaratorLastSuffix
{ after(grammarAccess.getDirectDeclaratorLastSuffixRule()); } 
	 EOF 
;

// Rule DirectDeclaratorLastSuffix
ruleDirectDeclaratorLastSuffix
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getDirectDeclaratorLastSuffixAccess().getGroup()); }
(rule__DirectDeclaratorLastSuffix__Group__0)
{ after(grammarAccess.getDirectDeclaratorLastSuffixAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePointer
entryRulePointer 
:
{ before(grammarAccess.getPointerRule()); }
	 rulePointer
{ after(grammarAccess.getPointerRule()); } 
	 EOF 
;

// Rule Pointer
rulePointer
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getPointerAccess().getGroup()); }
(rule__Pointer__Group__0)
{ after(grammarAccess.getPointerAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeQualifierList
entryRuleTypeQualifierList 
:
{ before(grammarAccess.getTypeQualifierListRule()); }
	 ruleTypeQualifierList
{ after(grammarAccess.getTypeQualifierListRule()); } 
	 EOF 
;

// Rule TypeQualifierList
ruleTypeQualifierList
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getTypeQualifierListAccess().getGroup()); }
(rule__TypeQualifierList__Group__0)
{ after(grammarAccess.getTypeQualifierListAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameterTypeList
entryRuleParameterTypeList 
:
{ before(grammarAccess.getParameterTypeListRule()); }
	 ruleParameterTypeList
{ after(grammarAccess.getParameterTypeListRule()); } 
	 EOF 
;

// Rule ParameterTypeList
ruleParameterTypeList
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getParameterTypeListAccess().getGroup()); }
(rule__ParameterTypeList__Group__0)
{ after(grammarAccess.getParameterTypeListAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameterList
entryRuleParameterList 
:
{ before(grammarAccess.getParameterListRule()); }
	 ruleParameterList
{ after(grammarAccess.getParameterListRule()); } 
	 EOF 
;

// Rule ParameterList
ruleParameterList
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getParameterListAccess().getGroup()); }
(rule__ParameterList__Group__0)
{ after(grammarAccess.getParameterListAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameterDeclaration
entryRuleParameterDeclaration 
:
{ before(grammarAccess.getParameterDeclarationRule()); }
	 ruleParameterDeclaration
{ after(grammarAccess.getParameterDeclarationRule()); } 
	 EOF 
;

// Rule ParameterDeclaration
ruleParameterDeclaration
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getParameterDeclarationAccess().getGroup()); }
(rule__ParameterDeclaration__Group__0)
{ after(grammarAccess.getParameterDeclarationAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIdentifierList
entryRuleIdentifierList 
:
{ before(grammarAccess.getIdentifierListRule()); }
	 ruleIdentifierList
{ after(grammarAccess.getIdentifierListRule()); } 
	 EOF 
;

// Rule IdentifierList
ruleIdentifierList
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getIdentifierListAccess().getGroup()); }
(rule__IdentifierList__Group__0)
{ after(grammarAccess.getIdentifierListAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMyIdentifier
entryRuleMyIdentifier 
:
{ before(grammarAccess.getMyIdentifierRule()); }
	 ruleMyIdentifier
{ after(grammarAccess.getMyIdentifierRule()); } 
	 EOF 
;

// Rule MyIdentifier
ruleMyIdentifier
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getMyIdentifierAccess().getGroup()); }
(rule__MyIdentifier__Group__0)
{ after(grammarAccess.getMyIdentifierAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeName
entryRuleTypeName 
:
{ before(grammarAccess.getTypeNameRule()); }
	 ruleTypeName
{ after(grammarAccess.getTypeNameRule()); } 
	 EOF 
;

// Rule TypeName
ruleTypeName
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getTypeNameAccess().getGroup()); }
(rule__TypeName__Group__0)
{ after(grammarAccess.getTypeNameAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInitializer
entryRuleInitializer 
:
{ before(grammarAccess.getInitializerRule()); }
	 ruleInitializer
{ after(grammarAccess.getInitializerRule()); } 
	 EOF 
;

// Rule Initializer
ruleInitializer
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getInitializerAccess().getGroup()); }
(rule__Initializer__Group__0)
{ after(grammarAccess.getInitializerAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInitializerList
entryRuleInitializerList 
:
{ before(grammarAccess.getInitializerListRule()); }
	 ruleInitializerList
{ after(grammarAccess.getInitializerListRule()); } 
	 EOF 
;

// Rule InitializerList
ruleInitializerList
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getInitializerListAccess().getGroup()); }
(rule__InitializerList__Group__0)
{ after(grammarAccess.getInitializerListAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBlockList
entryRuleBlockList 
:
{ before(grammarAccess.getBlockListRule()); }
	 ruleBlockList
{ after(grammarAccess.getBlockListRule()); } 
	 EOF 
;

// Rule BlockList
ruleBlockList
    @init {
		int stackSize = keepStackSize();
		if ( state.backtracking==0 ) {at.jku.weiner.c.Log.log("BlockList-enter");}
    }
	@after {
    		at.jku.weiner.c.Log.log("BlockList-enter");
     }:

(
{ before(grammarAccess.getBlockListAccess().getGroup()); }
(rule__BlockList__Group__0)
{ after(grammarAccess.getBlockListAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStatement
entryRuleStatement 
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getStatementAccess().getGroup()); }
(rule__Statement__Group__0)
{ after(grammarAccess.getStatementAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLabeledStatement
entryRuleLabeledStatement 
:
{ before(grammarAccess.getLabeledStatementRule()); }
	 ruleLabeledStatement
{ after(grammarAccess.getLabeledStatementRule()); } 
	 EOF 
;

// Rule LabeledStatement
ruleLabeledStatement
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getLabeledStatementAccess().getGroup()); }
(rule__LabeledStatement__Group__0)
{ after(grammarAccess.getLabeledStatementAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCompoundStatement
entryRuleCompoundStatement 
:
{ before(grammarAccess.getCompoundStatementRule()); }
	 ruleCompoundStatement
{ after(grammarAccess.getCompoundStatementRule()); } 
	 EOF 
;

// Rule CompoundStatement
ruleCompoundStatement
    @init {
		int stackSize = keepStackSize();
		if ( state.backtracking==0 ) {at.jku.weiner.c.Scope.createNewScope("CompoundStatement");}
    }
	@after {
    		at.jku.weiner.c.Scope.removeScope();
     }:

(
{ before(grammarAccess.getCompoundStatementAccess().getGroup()); }
(rule__CompoundStatement__Group__0)
{ after(grammarAccess.getCompoundStatementAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBodyStatement
entryRuleBodyStatement 
:
{ before(grammarAccess.getBodyStatementRule()); }
	 ruleBodyStatement
{ after(grammarAccess.getBodyStatementRule()); } 
	 EOF 
;

// Rule BodyStatement
ruleBodyStatement
    @init {
		int stackSize = keepStackSize();
		if ( state.backtracking==0 ) {at.jku.weiner.c.Log.log("BodyStatement-enter");}
    }
	@after {
    		at.jku.weiner.c.Log.log("BodyStatement-leave");
     }:

(
{ before(grammarAccess.getBodyStatementAccess().getGroup()); }
(rule__BodyStatement__Group__0)
{ after(grammarAccess.getBodyStatementAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpressionStatement
entryRuleExpressionStatement 
:
{ before(grammarAccess.getExpressionStatementRule()); }
	 ruleExpressionStatement
{ after(grammarAccess.getExpressionStatementRule()); } 
	 EOF 
;

// Rule ExpressionStatement
ruleExpressionStatement
    @init {
		int stackSize = keepStackSize();
		if ( state.backtracking==0 ) {at.jku.weiner.c.Log.log("ExpressionStatement-enter");}
    }
	@after {
    		at.jku.weiner.c.Log.log("ExpressionStatement-enter");
     }:

(
{ before(grammarAccess.getExpressionStatementAccess().getGroup()); }
(rule__ExpressionStatement__Group__0)
{ after(grammarAccess.getExpressionStatementAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSelectionStatement
entryRuleSelectionStatement 
:
{ before(grammarAccess.getSelectionStatementRule()); }
	 ruleSelectionStatement
{ after(grammarAccess.getSelectionStatementRule()); } 
	 EOF 
;

// Rule SelectionStatement
ruleSelectionStatement
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getSelectionStatementAccess().getGroup()); }
(rule__SelectionStatement__Group__0)
{ after(grammarAccess.getSelectionStatementAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIterationStatement
entryRuleIterationStatement 
:
{ before(grammarAccess.getIterationStatementRule()); }
	 ruleIterationStatement
{ after(grammarAccess.getIterationStatementRule()); } 
	 EOF 
;

// Rule IterationStatement
ruleIterationStatement
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getIterationStatementAccess().getGroup()); }
(rule__IterationStatement__Group__0)
{ after(grammarAccess.getIterationStatementAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJumpStatement
entryRuleJumpStatement 
:
{ before(grammarAccess.getJumpStatementRule()); }
	 ruleJumpStatement
{ after(grammarAccess.getJumpStatementRule()); } 
	 EOF 
;

// Rule JumpStatement
ruleJumpStatement
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getJumpStatementAccess().getGroup()); }
(rule__JumpStatement__Group__0)
{ after(grammarAccess.getJumpStatementAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAsmStatement
entryRuleAsmStatement 
:
{ before(grammarAccess.getAsmStatementRule()); }
	 ruleAsmStatement
{ after(grammarAccess.getAsmStatementRule()); } 
	 EOF 
;

// Rule AsmStatement
ruleAsmStatement
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getAsmStatementAccess().getGroup()); }
(rule__AsmStatement__Group__0)
{ after(grammarAccess.getAsmStatementAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAsmLineWithColon
entryRuleAsmLineWithColon 
:
{ before(grammarAccess.getAsmLineWithColonRule()); }
	 ruleAsmLineWithColon
{ after(grammarAccess.getAsmLineWithColonRule()); } 
	 EOF 
;

// Rule AsmLineWithColon
ruleAsmLineWithColon
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getAsmLineWithColonAccess().getGroup()); }
(rule__AsmLineWithColon__Group__0)
{ after(grammarAccess.getAsmLineWithColonAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAsmLineWithComma
entryRuleAsmLineWithComma 
:
{ before(grammarAccess.getAsmLineWithCommaRule()); }
	 ruleAsmLineWithComma
{ after(grammarAccess.getAsmLineWithCommaRule()); } 
	 EOF 
;

// Rule AsmLineWithComma
ruleAsmLineWithComma
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getAsmLineWithCommaAccess().getGroup()); }
(rule__AsmLineWithComma__Group__0)
{ after(grammarAccess.getAsmLineWithCommaAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
		if ( state.backtracking==0 ) {at.jku.weiner.c.Log.error("Expression-enter");}
    }
	@after {
    		at.jku.weiner.c.Log.error("Expression-leave");
     }:

(
{ before(grammarAccess.getExpressionAccess().getGroup()); }
(rule__Expression__Group__0)
{ after(grammarAccess.getExpressionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignmentExpression
entryRuleAssignmentExpression 
:
{ before(grammarAccess.getAssignmentExpressionRule()); }
	 ruleAssignmentExpression
{ after(grammarAccess.getAssignmentExpressionRule()); } 
	 EOF 
;

// Rule AssignmentExpression
ruleAssignmentExpression
    @init {
		int stackSize = keepStackSize();
		if ( state.backtracking==0 ) {at.jku.weiner.c.Log.error("AssignmentExpression-enter");}
    }
	@after {
    		at.jku.weiner.c.Log.error("AssignmentExpression-leave");
     }:

(
{ before(grammarAccess.getAssignmentExpressionAccess().getGroup()); }
(rule__AssignmentExpression__Group__0)
{ after(grammarAccess.getAssignmentExpressionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLvalue
entryRuleLvalue 
:
{ before(grammarAccess.getLvalueRule()); }
	 ruleLvalue
{ after(grammarAccess.getLvalueRule()); } 
	 EOF 
;

// Rule Lvalue
ruleLvalue
    @init {
		int stackSize = keepStackSize();
		if ( state.backtracking==0 ) {at.jku.weiner.c.Log.error("Lvalue-enter");}
    }
	@after {
    		at.jku.weiner.c.Log.error("Lvalue-leave");
     }:

(
{ before(grammarAccess.getLvalueAccess().getUnaryExpressionParserRuleCall()); }
	ruleUnaryExpression
{ after(grammarAccess.getLvalueAccess().getUnaryExpressionParserRuleCall()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignmentOperator
entryRuleAssignmentOperator 
:
{ before(grammarAccess.getAssignmentOperatorRule()); }
	 ruleAssignmentOperator
{ after(grammarAccess.getAssignmentOperatorRule()); } 
	 EOF 
;

// Rule AssignmentOperator
ruleAssignmentOperator
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getAssignmentOperatorAccess().getGroup()); }
(rule__AssignmentOperator__Group__0)
{ after(grammarAccess.getAssignmentOperatorAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConditionalExpression
entryRuleConditionalExpression 
:
{ before(grammarAccess.getConditionalExpressionRule()); }
	 ruleConditionalExpression
{ after(grammarAccess.getConditionalExpressionRule()); } 
	 EOF 
;

// Rule ConditionalExpression
ruleConditionalExpression
    @init {
		int stackSize = keepStackSize();
		if ( state.backtracking==0 ) {at.jku.weiner.c.Log.error("ConditionalExpression-enter");}
    }
	@after {
    		at.jku.weiner.c.Log.error("ConditionalExpression-leave");
     }:

(
{ before(grammarAccess.getConditionalExpressionAccess().getGroup()); }
(rule__ConditionalExpression__Group__0)
{ after(grammarAccess.getConditionalExpressionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogicalOrExpression
entryRuleLogicalOrExpression 
:
{ before(grammarAccess.getLogicalOrExpressionRule()); }
	 ruleLogicalOrExpression
{ after(grammarAccess.getLogicalOrExpressionRule()); } 
	 EOF 
;

// Rule LogicalOrExpression
ruleLogicalOrExpression
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getLogicalOrExpressionAccess().getGroup()); }
(rule__LogicalOrExpression__Group__0)
{ after(grammarAccess.getLogicalOrExpressionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogicalAndExpression
entryRuleLogicalAndExpression 
:
{ before(grammarAccess.getLogicalAndExpressionRule()); }
	 ruleLogicalAndExpression
{ after(grammarAccess.getLogicalAndExpressionRule()); } 
	 EOF 
;

// Rule LogicalAndExpression
ruleLogicalAndExpression
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getLogicalAndExpressionAccess().getGroup()); }
(rule__LogicalAndExpression__Group__0)
{ after(grammarAccess.getLogicalAndExpressionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInclusiveOrExpression
entryRuleInclusiveOrExpression 
:
{ before(grammarAccess.getInclusiveOrExpressionRule()); }
	 ruleInclusiveOrExpression
{ after(grammarAccess.getInclusiveOrExpressionRule()); } 
	 EOF 
;

// Rule InclusiveOrExpression
ruleInclusiveOrExpression
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getInclusiveOrExpressionAccess().getGroup()); }
(rule__InclusiveOrExpression__Group__0)
{ after(grammarAccess.getInclusiveOrExpressionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExclusiveOrExpression
entryRuleExclusiveOrExpression 
:
{ before(grammarAccess.getExclusiveOrExpressionRule()); }
	 ruleExclusiveOrExpression
{ after(grammarAccess.getExclusiveOrExpressionRule()); } 
	 EOF 
;

// Rule ExclusiveOrExpression
ruleExclusiveOrExpression
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getExclusiveOrExpressionAccess().getGroup()); }
(rule__ExclusiveOrExpression__Group__0)
{ after(grammarAccess.getExclusiveOrExpressionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAndExpression
entryRuleAndExpression 
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
(rule__AndExpression__Group__0)
{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression 
:
{ before(grammarAccess.getEqualityExpressionRule()); }
	 ruleEqualityExpression
{ after(grammarAccess.getEqualityExpressionRule()); } 
	 EOF 
;

// Rule EqualityExpression
ruleEqualityExpression
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getEqualityExpressionAccess().getGroup()); }
(rule__EqualityExpression__Group__0)
{ after(grammarAccess.getEqualityExpressionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression 
:
{ before(grammarAccess.getRelationalExpressionRule()); }
	 ruleRelationalExpression
{ after(grammarAccess.getRelationalExpressionRule()); } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup()); }
(rule__RelationalExpression__Group__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleShiftExpression
entryRuleShiftExpression 
:
{ before(grammarAccess.getShiftExpressionRule()); }
	 ruleShiftExpression
{ after(grammarAccess.getShiftExpressionRule()); } 
	 EOF 
;

// Rule ShiftExpression
ruleShiftExpression
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getShiftExpressionAccess().getGroup()); }
(rule__ShiftExpression__Group__0)
{ after(grammarAccess.getShiftExpressionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression 
:
{ before(grammarAccess.getAdditiveExpressionRule()); }
	 ruleAdditiveExpression
{ after(grammarAccess.getAdditiveExpressionRule()); } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
(rule__AdditiveExpression__Group__0)
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression 
:
{ before(grammarAccess.getMultiplicativeExpressionRule()); }
	 ruleMultiplicativeExpression
{ after(grammarAccess.getMultiplicativeExpressionRule()); } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
(rule__MultiplicativeExpression__Group__0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCastExpression
entryRuleCastExpression 
:
{ before(grammarAccess.getCastExpressionRule()); }
	 ruleCastExpression
{ after(grammarAccess.getCastExpressionRule()); } 
	 EOF 
;

// Rule CastExpression
ruleCastExpression
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getCastExpressionAccess().getGroup()); }
(rule__CastExpression__Group__0)
{ after(grammarAccess.getCastExpressionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression 
:
{ before(grammarAccess.getUnaryExpressionRule()); }
	 ruleUnaryExpression
{ after(grammarAccess.getUnaryExpressionRule()); } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression
    @init {
		int stackSize = keepStackSize();
		if ( state.backtracking==0 ) {at.jku.weiner.c.Log.error("UnaryExpression-enter");}
    }
	@after {
    		at.jku.weiner.c.Log.error("UnaryExpression-leave");
     }:

(
{ before(grammarAccess.getUnaryExpressionAccess().getGroup()); }
(rule__UnaryExpression__Group__0)
{ after(grammarAccess.getUnaryExpressionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryOperator
entryRuleUnaryOperator 
:
{ before(grammarAccess.getUnaryOperatorRule()); }
	 ruleUnaryOperator
{ after(grammarAccess.getUnaryOperatorRule()); } 
	 EOF 
;

// Rule UnaryOperator
ruleUnaryOperator
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getUnaryOperatorAccess().getGroup()); }
(rule__UnaryOperator__Group__0)
{ after(grammarAccess.getUnaryOperatorAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePostfixExpression
entryRulePostfixExpression 
:
{ before(grammarAccess.getPostfixExpressionRule()); }
	 rulePostfixExpression
{ after(grammarAccess.getPostfixExpressionRule()); } 
	 EOF 
;

// Rule PostfixExpression
rulePostfixExpression
    @init {
		int stackSize = keepStackSize();
		if ( state.backtracking==0 ) {at.jku.weiner.c.Log.error("PostfixExpression-enter");}
    }
	@after {
    		at.jku.weiner.c.Log.error("PostfixExpression-leave");
     }:

(
{ before(grammarAccess.getPostfixExpressionAccess().getGroup()); }
(rule__PostfixExpression__Group__0)
{ after(grammarAccess.getPostfixExpressionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArgumentExpressionList
entryRuleArgumentExpressionList 
:
{ before(grammarAccess.getArgumentExpressionListRule()); }
	 ruleArgumentExpressionList
{ after(grammarAccess.getArgumentExpressionListRule()); } 
	 EOF 
;

// Rule ArgumentExpressionList
ruleArgumentExpressionList
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getArgumentExpressionListAccess().getGroup()); }
(rule__ArgumentExpressionList__Group__0)
{ after(grammarAccess.getArgumentExpressionListAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression 
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression
    @init {
		int stackSize = keepStackSize();
		if ( state.backtracking==0 ) {at.jku.weiner.c.Log.error("PrimaryExpression-enter");}
    }
	@after {
    		at.jku.weiner.c.Log.error("PrimaryExpression-leave");
     }:

(
{ before(grammarAccess.getPrimaryExpressionAccess().getGroup()); }
(rule__PrimaryExpression__Group__0)
{ after(grammarAccess.getPrimaryExpressionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstant
entryRuleConstant 
:
{ before(grammarAccess.getConstantRule()); }
	 ruleConstant
{ after(grammarAccess.getConstantRule()); } 
	 EOF 
;

// Rule Constant
ruleConstant
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getConstantAccess().getGroup()); }
(rule__Constant__Group__0)
{ after(grammarAccess.getConstantAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstantExpression
entryRuleConstantExpression 
:
{ before(grammarAccess.getConstantExpressionRule()); }
	 ruleConstantExpression
{ after(grammarAccess.getConstantExpressionRule()); } 
	 EOF 
;

// Rule ConstantExpression
ruleConstantExpression
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getConstantExpressionAccess().getGroup()); }
(rule__ConstantExpression__Group__0)
{ after(grammarAccess.getConstantExpressionAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}




rule__ExternalDeclaration__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getExternalDeclarationAccess().getGroup_1_0()); }
(rule__ExternalDeclaration__Group_1_0__0)
{ after(grammarAccess.getExternalDeclarationAccess().getGroup_1_0()); }
)



    |
(
{ before(grammarAccess.getExternalDeclarationAccess().getDeclarationAssignment_1_1()); }
(rule__ExternalDeclaration__DeclarationAssignment_1_1)
{ after(grammarAccess.getExternalDeclarationAccess().getDeclarationAssignment_1_1()); }
)



    |
(
{ before(grammarAccess.getExternalDeclarationAccess().getSemiAssignment_1_2()); }
(rule__ExternalDeclaration__SemiAssignment_1_2)
{ after(grammarAccess.getExternalDeclarationAccess().getSemiAssignment_1_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclarationSpecifiers__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getFunctionDeclarationSpecifiersAccess().getDeclarationSpecifierAssignment_1_0()); }
(rule__FunctionDeclarationSpecifiers__DeclarationSpecifierAssignment_1_0)
{ after(grammarAccess.getFunctionDeclarationSpecifiersAccess().getDeclarationSpecifierAssignment_1_0()); }
)



    |
(
{ before(grammarAccess.getFunctionDeclarationSpecifiersAccess().getDeclarationSpecifierAssignment_1_1()); }
(rule__FunctionDeclarationSpecifiers__DeclarationSpecifierAssignment_1_1)
{ after(grammarAccess.getFunctionDeclarationSpecifiersAccess().getDeclarationSpecifierAssignment_1_1()); }
)



    |
(
{ before(grammarAccess.getFunctionDeclarationSpecifiersAccess().getDeclarationSpecifierAssignment_1_2()); }
(rule__FunctionDeclarationSpecifiers__DeclarationSpecifierAssignment_1_2)
{ after(grammarAccess.getFunctionDeclarationSpecifiersAccess().getDeclarationSpecifierAssignment_1_2()); }
)



    |
(
{ before(grammarAccess.getFunctionDeclarationSpecifiersAccess().getDeclarationSpecifierAssignment_1_3()); }
(rule__FunctionDeclarationSpecifiers__DeclarationSpecifierAssignment_1_3)
{ after(grammarAccess.getFunctionDeclarationSpecifiersAccess().getDeclarationSpecifierAssignment_1_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationSpecifiers__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDeclarationSpecifiersAccess().getDeclarationSpecifierAssignment_1_0()); }
(rule__DeclarationSpecifiers__DeclarationSpecifierAssignment_1_0)
{ after(grammarAccess.getDeclarationSpecifiersAccess().getDeclarationSpecifierAssignment_1_0()); }
)



    |
(
{ before(grammarAccess.getDeclarationSpecifiersAccess().getDeclarationSpecifierAssignment_1_1()); }
(rule__DeclarationSpecifiers__DeclarationSpecifierAssignment_1_1)
{ after(grammarAccess.getDeclarationSpecifiersAccess().getDeclarationSpecifierAssignment_1_1()); }
)



    |
(
{ before(grammarAccess.getDeclarationSpecifiersAccess().getDeclarationSpecifierAssignment_1_2()); }
(rule__DeclarationSpecifiers__DeclarationSpecifierAssignment_1_2)
{ after(grammarAccess.getDeclarationSpecifiersAccess().getDeclarationSpecifierAssignment_1_2()); }
)



    |
(
{ before(grammarAccess.getDeclarationSpecifiersAccess().getDeclarationSpecifierAssignment_1_3()); }
(rule__DeclarationSpecifiers__DeclarationSpecifierAssignment_1_3)
{ after(grammarAccess.getDeclarationSpecifiersAccess().getDeclarationSpecifierAssignment_1_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__StorageClassSpecifier__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getStorageClassSpecifierAccess().getNameAssignment_1_0()); }
(rule__StorageClassSpecifier__NameAssignment_1_0)
{ after(grammarAccess.getStorageClassSpecifierAccess().getNameAssignment_1_0()); }
)

{at.jku.weiner.c.Scope.setTypedef(true);}


    |
(
{ before(grammarAccess.getStorageClassSpecifierAccess().getNameAssignment_1_1()); }
(rule__StorageClassSpecifier__NameAssignment_1_1)
{ after(grammarAccess.getStorageClassSpecifierAccess().getNameAssignment_1_1()); }
)



    |
(
{ before(grammarAccess.getStorageClassSpecifierAccess().getNameAssignment_1_2()); }
(rule__StorageClassSpecifier__NameAssignment_1_2)
{ after(grammarAccess.getStorageClassSpecifierAccess().getNameAssignment_1_2()); }
)



    |
(
{ before(grammarAccess.getStorageClassSpecifierAccess().getNameAssignment_1_3()); }
(rule__StorageClassSpecifier__NameAssignment_1_3)
{ after(grammarAccess.getStorageClassSpecifierAccess().getNameAssignment_1_3()); }
)



    |
(
{ before(grammarAccess.getStorageClassSpecifierAccess().getNameAssignment_1_4()); }
(rule__StorageClassSpecifier__NameAssignment_1_4)
{ after(grammarAccess.getStorageClassSpecifierAccess().getNameAssignment_1_4()); }
)



    |
(
{ before(grammarAccess.getStorageClassSpecifierAccess().getNameAssignment_1_5()); }
(rule__StorageClassSpecifier__NameAssignment_1_5)
{ after(grammarAccess.getStorageClassSpecifierAccess().getNameAssignment_1_5()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpecifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getTypeSpecifierAccess().getGroup_0()); }
(rule__TypeSpecifier__Group_0__0)
{ after(grammarAccess.getTypeSpecifierAccess().getGroup_0()); }
)



    |
(
{ before(grammarAccess.getTypeSpecifierAccess().getNameAssignment_1()); }
(rule__TypeSpecifier__NameAssignment_1)
{ after(grammarAccess.getTypeSpecifierAccess().getNameAssignment_1()); }
)



    |
(
{ before(grammarAccess.getTypeSpecifierAccess().getNameAssignment_2()); }
(rule__TypeSpecifier__NameAssignment_2)
{ after(grammarAccess.getTypeSpecifierAccess().getNameAssignment_2()); }
)



    |
(
{ before(grammarAccess.getTypeSpecifierAccess().getNameAssignment_3()); }
(rule__TypeSpecifier__NameAssignment_3)
{ after(grammarAccess.getTypeSpecifierAccess().getNameAssignment_3()); }
)

{at.jku.weiner.c.Log.log("found kw_int");}


    |
(
{ before(grammarAccess.getTypeSpecifierAccess().getNameAssignment_4()); }
(rule__TypeSpecifier__NameAssignment_4)
{ after(grammarAccess.getTypeSpecifierAccess().getNameAssignment_4()); }
)



    |
(
{ before(grammarAccess.getTypeSpecifierAccess().getNameAssignment_5()); }
(rule__TypeSpecifier__NameAssignment_5)
{ after(grammarAccess.getTypeSpecifierAccess().getNameAssignment_5()); }
)



    |
(
{ before(grammarAccess.getTypeSpecifierAccess().getNameAssignment_6()); }
(rule__TypeSpecifier__NameAssignment_6)
{ after(grammarAccess.getTypeSpecifierAccess().getNameAssignment_6()); }
)

{at.jku.weiner.c.Log.log("found kw_double");}


    |
(
{ before(grammarAccess.getTypeSpecifierAccess().getNameAssignment_7()); }
(rule__TypeSpecifier__NameAssignment_7)
{ after(grammarAccess.getTypeSpecifierAccess().getNameAssignment_7()); }
)



    |
(
{ before(grammarAccess.getTypeSpecifierAccess().getNameAssignment_8()); }
(rule__TypeSpecifier__NameAssignment_8)
{ after(grammarAccess.getTypeSpecifierAccess().getNameAssignment_8()); }
)



    |
(
{ before(grammarAccess.getTypeSpecifierAccess().getNameAssignment_9()); }
(rule__TypeSpecifier__NameAssignment_9)
{ after(grammarAccess.getTypeSpecifierAccess().getNameAssignment_9()); }
)



    |
(
{ before(grammarAccess.getTypeSpecifierAccess().getNameAssignment_10()); }
(rule__TypeSpecifier__NameAssignment_10)
{ after(grammarAccess.getTypeSpecifierAccess().getNameAssignment_10()); }
)



    |
(
{ before(grammarAccess.getTypeSpecifierAccess().getNameAssignment_11()); }
(rule__TypeSpecifier__NameAssignment_11)
{ after(grammarAccess.getTypeSpecifierAccess().getNameAssignment_11()); }
)



    |
(
{ before(grammarAccess.getTypeSpecifierAccess().getNameAssignment_12()); }
(rule__TypeSpecifier__NameAssignment_12)
{ after(grammarAccess.getTypeSpecifierAccess().getNameAssignment_12()); }
)



    |
(
{ before(grammarAccess.getTypeSpecifierAccess().getNameAssignment_13()); }
(rule__TypeSpecifier__NameAssignment_13)
{ after(grammarAccess.getTypeSpecifierAccess().getNameAssignment_13()); }
)



    |
(
{ before(grammarAccess.getTypeSpecifierAccess().getSpecifierAssignment_14()); }
(rule__TypeSpecifier__SpecifierAssignment_14)
{ after(grammarAccess.getTypeSpecifierAccess().getSpecifierAssignment_14()); }
)



    |
(
{ before(grammarAccess.getTypeSpecifierAccess().getTypeAssignment_15()); }
(rule__TypeSpecifier__TypeAssignment_15)
{ after(grammarAccess.getTypeSpecifierAccess().getTypeAssignment_15()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__StructOrUnionSpecifier__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getStructOrUnionSpecifierAccess().getGroup_2_0()); }
(rule__StructOrUnionSpecifier__Group_2_0__0)
{ after(grammarAccess.getStructOrUnionSpecifierAccess().getGroup_2_0()); }
)



    |
(
{ before(grammarAccess.getStructOrUnionSpecifierAccess().getIdAssignment_2_1()); }
(rule__StructOrUnionSpecifier__IdAssignment_2_1)
{ after(grammarAccess.getStructOrUnionSpecifierAccess().getIdAssignment_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__StructOrUnion__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getStructOrUnionAccess().getGroup_0()); }
(rule__StructOrUnion__Group_0__0)
{ after(grammarAccess.getStructOrUnionAccess().getGroup_0()); }
)



    |
(
{ before(grammarAccess.getStructOrUnionAccess().getNameAssignment_1()); }
(rule__StructOrUnion__NameAssignment_1)
{ after(grammarAccess.getStructOrUnionAccess().getNameAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__SpecifierQualifierList__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getSpecifierQualifierListAccess().getTypeSpecifierAssignment_1_0()); }
(rule__SpecifierQualifierList__TypeSpecifierAssignment_1_0)
{ after(grammarAccess.getSpecifierQualifierListAccess().getTypeSpecifierAssignment_1_0()); }
)



    |
(
{ before(grammarAccess.getSpecifierQualifierListAccess().getTypeQualifierAssignment_1_1()); }
(rule__SpecifierQualifierList__TypeQualifierAssignment_1_1)
{ after(grammarAccess.getSpecifierQualifierListAccess().getTypeQualifierAssignment_1_1()); }
)



    |
(
{ before(grammarAccess.getSpecifierQualifierListAccess().getStructOrUnionSpecifierAssignment_1_2()); }
(rule__SpecifierQualifierList__StructOrUnionSpecifierAssignment_1_2)
{ after(grammarAccess.getSpecifierQualifierListAccess().getStructOrUnionSpecifierAssignment_1_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__StructDeclarator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getStructDeclaratorAccess().getGroup_0()); }
(rule__StructDeclarator__Group_0__0)
{ after(grammarAccess.getStructDeclaratorAccess().getGroup_0()); }
)



    |
(
{ before(grammarAccess.getStructDeclaratorAccess().getGroup_1()); }
(rule__StructDeclarator__Group_1__0)
{ after(grammarAccess.getStructDeclaratorAccess().getGroup_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__EnumSpecifier__Alternatives_1_1
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getEnumSpecifierAccess().getGroup_1_1_0()); }
(rule__EnumSpecifier__Group_1_1_0__0)
{ after(grammarAccess.getEnumSpecifierAccess().getGroup_1_1_0()); }
)



    |
(
{ before(grammarAccess.getEnumSpecifierAccess().getGroup_1_1_1()); }
(rule__EnumSpecifier__Group_1_1_1__0)
{ after(grammarAccess.getEnumSpecifierAccess().getGroup_1_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__TypeQualifier__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getTypeQualifierAccess().getTypeAssignment_1_0()); }
(rule__TypeQualifier__TypeAssignment_1_0)
{ after(grammarAccess.getTypeQualifierAccess().getTypeAssignment_1_0()); }
)



    |
(
{ before(grammarAccess.getTypeQualifierAccess().getTypeAssignment_1_1()); }
(rule__TypeQualifier__TypeAssignment_1_1)
{ after(grammarAccess.getTypeQualifierAccess().getTypeAssignment_1_1()); }
)



    |
(
{ before(grammarAccess.getTypeQualifierAccess().getTypeAssignment_1_2()); }
(rule__TypeQualifier__TypeAssignment_1_2)
{ after(grammarAccess.getTypeQualifierAccess().getTypeAssignment_1_2()); }
)



    |
(
{ before(grammarAccess.getTypeQualifierAccess().getTypeAssignment_1_3()); }
(rule__TypeQualifier__TypeAssignment_1_3)
{ after(grammarAccess.getTypeQualifierAccess().getTypeAssignment_1_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionSpecifier__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getFunctionSpecifierAccess().getNameAssignment_1_0()); }
(rule__FunctionSpecifier__NameAssignment_1_0)
{ after(grammarAccess.getFunctionSpecifierAccess().getNameAssignment_1_0()); }
)



    |
(
{ before(grammarAccess.getFunctionSpecifierAccess().getNameAssignment_1_1()); }
(rule__FunctionSpecifier__NameAssignment_1_1)
{ after(grammarAccess.getFunctionSpecifierAccess().getNameAssignment_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__DirectDeclarator__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
{at.jku.weiner.c.Scope.setTemp(input);}

(
{ before(grammarAccess.getDirectDeclaratorAccess().getIdAssignment_1_0()); }
(rule__DirectDeclarator__IdAssignment_1_0)
{ after(grammarAccess.getDirectDeclaratorAccess().getIdAssignment_1_0()); }
)

{at.jku.weiner.c.Scope.addTypedefIfIsTypedef();}


    |
(
{ before(grammarAccess.getDirectDeclaratorAccess().getGroup_1_1()); }
(rule__DirectDeclarator__Group_1_1__0)
{ after(grammarAccess.getDirectDeclaratorAccess().getGroup_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaratorSuffix__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDeclaratorSuffixAccess().getGroup_1_0()); }
(rule__DeclaratorSuffix__Group_1_0__0)
{ after(grammarAccess.getDeclaratorSuffixAccess().getGroup_1_0()); }
)



    |
(
{ before(grammarAccess.getDeclaratorSuffixAccess().getGroup_1_1()); }
(rule__DeclaratorSuffix__Group_1_1__0)
{ after(grammarAccess.getDeclaratorSuffixAccess().getGroup_1_1()); }
)



    |
(
{ before(grammarAccess.getDeclaratorSuffixAccess().getGroup_1_2()); }
(rule__DeclaratorSuffix__Group_1_2__0)
{ after(grammarAccess.getDeclaratorSuffixAccess().getGroup_1_2()); }
)



    |
(
{ before(grammarAccess.getDeclaratorSuffixAccess().getGroup_1_3()); }
(rule__DeclaratorSuffix__Group_1_3__0)
{ after(grammarAccess.getDeclaratorSuffixAccess().getGroup_1_3()); }
)



    |
(
{ before(grammarAccess.getDeclaratorSuffixAccess().getLastSuffixAssignment_1_4()); }
(rule__DeclaratorSuffix__LastSuffixAssignment_1_4)
{ after(grammarAccess.getDeclaratorSuffixAccess().getLastSuffixAssignment_1_4()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__DirectDeclaratorLastSuffix__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDirectDeclaratorLastSuffixAccess().getParameterTypeListAssignment_2_0()); }
(rule__DirectDeclaratorLastSuffix__ParameterTypeListAssignment_2_0)
{ after(grammarAccess.getDirectDeclaratorLastSuffixAccess().getParameterTypeListAssignment_2_0()); }
)



    |
(
{ before(grammarAccess.getDirectDeclaratorLastSuffixAccess().getIdentifierListAssignment_2_1()); }
(rule__DirectDeclaratorLastSuffix__IdentifierListAssignment_2_1)?
{ after(grammarAccess.getDirectDeclaratorLastSuffixAccess().getIdentifierListAssignment_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__Pointer__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPointerAccess().getStarAssignment_1_0_0()); }
(rule__Pointer__StarAssignment_1_0_0)
{ after(grammarAccess.getPointerAccess().getStarAssignment_1_0_0()); }
)



    |
(
{ before(grammarAccess.getPointerAccess().getCaretAssignment_1_0_1()); }
(rule__Pointer__CaretAssignment_1_0_1)
{ after(grammarAccess.getPointerAccess().getCaretAssignment_1_0_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__Initializer__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInitializerAccess().getExprAssignment_1_0()); }
(rule__Initializer__ExprAssignment_1_0)
{ after(grammarAccess.getInitializerAccess().getExprAssignment_1_0()); }
)



    |
(
{ before(grammarAccess.getInitializerAccess().getGroup_1_1()); }
(rule__Initializer__Group_1_1__0)
{ after(grammarAccess.getInitializerAccess().getGroup_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__BlockList__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getBlockListAccess().getDeclarationAssignment_1_0()); }
(rule__BlockList__DeclarationAssignment_1_0)
{ after(grammarAccess.getBlockListAccess().getDeclarationAssignment_1_0()); }
)



    |
(
{ before(grammarAccess.getBlockListAccess().getStatementAssignment_1_1()); }
(rule__BlockList__StatementAssignment_1_1)
{ after(grammarAccess.getBlockListAccess().getStatementAssignment_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getStatementAccess().getStmtAssignment_1_0()); }
(rule__Statement__StmtAssignment_1_0)
{ after(grammarAccess.getStatementAccess().getStmtAssignment_1_0()); }
)



    |
(
{ before(grammarAccess.getStatementAccess().getStmtAssignment_1_1()); }
(rule__Statement__StmtAssignment_1_1)
{ after(grammarAccess.getStatementAccess().getStmtAssignment_1_1()); }
)



    |
(
{ before(grammarAccess.getStatementAccess().getStmtAssignment_1_2()); }
(rule__Statement__StmtAssignment_1_2)
{ after(grammarAccess.getStatementAccess().getStmtAssignment_1_2()); }
)



    |
(
{ before(grammarAccess.getStatementAccess().getStmtAssignment_1_3()); }
(rule__Statement__StmtAssignment_1_3)
{ after(grammarAccess.getStatementAccess().getStmtAssignment_1_3()); }
)



    |
(
{ before(grammarAccess.getStatementAccess().getStmtAssignment_1_4()); }
(rule__Statement__StmtAssignment_1_4)
{ after(grammarAccess.getStatementAccess().getStmtAssignment_1_4()); }
)



    |
(
{ before(grammarAccess.getStatementAccess().getStmtAssignment_1_5()); }
(rule__Statement__StmtAssignment_1_5)
{ after(grammarAccess.getStatementAccess().getStmtAssignment_1_5()); }
)



    |
(
{ before(grammarAccess.getStatementAccess().getStmtAssignment_1_6()); }
(rule__Statement__StmtAssignment_1_6)
{ after(grammarAccess.getStatementAccess().getStmtAssignment_1_6()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledStatement__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLabeledStatementAccess().getGroup_1_0()); }
(rule__LabeledStatement__Group_1_0__0)
{ after(grammarAccess.getLabeledStatementAccess().getGroup_1_0()); }
)



    |
(
{ before(grammarAccess.getLabeledStatementAccess().getGroup_1_1()); }
(rule__LabeledStatement__Group_1_1__0)
{ after(grammarAccess.getLabeledStatementAccess().getGroup_1_1()); }
)



    |
(
{ before(grammarAccess.getLabeledStatementAccess().getGroup_1_2()); }
(rule__LabeledStatement__Group_1_2__0)
{ after(grammarAccess.getLabeledStatementAccess().getGroup_1_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionStatement__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getSelectionStatementAccess().getGroup_1_0()); }
(rule__SelectionStatement__Group_1_0__0)
{ after(grammarAccess.getSelectionStatementAccess().getGroup_1_0()); }
)



    |
(
{ before(grammarAccess.getSelectionStatementAccess().getGroup_1_1()); }
(rule__SelectionStatement__Group_1_1__0)
{ after(grammarAccess.getSelectionStatementAccess().getGroup_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIterationStatementAccess().getGroup_1_0()); }
(rule__IterationStatement__Group_1_0__0)
{ after(grammarAccess.getIterationStatementAccess().getGroup_1_0()); }
)



    |
(
{ before(grammarAccess.getIterationStatementAccess().getGroup_1_1()); }
(rule__IterationStatement__Group_1_1__0)
{ after(grammarAccess.getIterationStatementAccess().getGroup_1_1()); }
)



    |
(
{ before(grammarAccess.getIterationStatementAccess().getGroup_1_2()); }
(rule__IterationStatement__Group_1_2__0)
{ after(grammarAccess.getIterationStatementAccess().getGroup_1_2()); }
)



    |
(
{ before(grammarAccess.getIterationStatementAccess().getGroup_1_3()); }
(rule__IterationStatement__Group_1_3__0)
{ after(grammarAccess.getIterationStatementAccess().getGroup_1_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__JumpStatement__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getJumpStatementAccess().getGroup_1_0()); }
(rule__JumpStatement__Group_1_0__0)
{ after(grammarAccess.getJumpStatementAccess().getGroup_1_0()); }
)



    |
(
{ before(grammarAccess.getJumpStatementAccess().getGroup_1_1()); }
(rule__JumpStatement__Group_1_1__0)
{ after(grammarAccess.getJumpStatementAccess().getGroup_1_1()); }
)



    |
(
{ before(grammarAccess.getJumpStatementAccess().getGroup_1_2()); }
(rule__JumpStatement__Group_1_2__0)
{ after(grammarAccess.getJumpStatementAccess().getGroup_1_2()); }
)



    |
(
{ before(grammarAccess.getJumpStatementAccess().getGroup_1_3()); }
(rule__JumpStatement__Group_1_3__0)
{ after(grammarAccess.getJumpStatementAccess().getGroup_1_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__AsmStatement__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAsmStatementAccess().getAsmAssignment_1_0()); }
(rule__AsmStatement__AsmAssignment_1_0)
{ after(grammarAccess.getAsmStatementAccess().getAsmAssignment_1_0()); }
)



    |
(
{ before(grammarAccess.getAsmStatementAccess().getAsmAssignment_1_1()); }
(rule__AsmStatement__AsmAssignment_1_1)
{ after(grammarAccess.getAsmStatementAccess().getAsmAssignment_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__AsmStatement__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAsmStatementAccess().getVolatileAssignment_2_0()); }
(rule__AsmStatement__VolatileAssignment_2_0)
{ after(grammarAccess.getAsmStatementAccess().getVolatileAssignment_2_0()); }
)



    |
(
{ before(grammarAccess.getAsmStatementAccess().getVolatileAssignment_2_1()); }
(rule__AsmStatement__VolatileAssignment_2_1)
{ after(grammarAccess.getAsmStatementAccess().getVolatileAssignment_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAssignmentExpressionAccess().getGroup_1_0()); }
(rule__AssignmentExpression__Group_1_0__0)
{ after(grammarAccess.getAssignmentExpressionAccess().getGroup_1_0()); }
)



    |
(
{ before(grammarAccess.getAssignmentExpressionAccess().getExprAssignment_1_1()); }
(rule__AssignmentExpression__ExprAssignment_1_1)
{ after(grammarAccess.getAssignmentExpressionAccess().getExprAssignment_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentOperator__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAssignmentOperatorAccess().getOpAssignment_1_0()); }
(rule__AssignmentOperator__OpAssignment_1_0)
{ after(grammarAccess.getAssignmentOperatorAccess().getOpAssignment_1_0()); }
)



    |
(
{ before(grammarAccess.getAssignmentOperatorAccess().getOpAssignment_1_1()); }
(rule__AssignmentOperator__OpAssignment_1_1)
{ after(grammarAccess.getAssignmentOperatorAccess().getOpAssignment_1_1()); }
)



    |
(
{ before(grammarAccess.getAssignmentOperatorAccess().getOpAssignment_1_2()); }
(rule__AssignmentOperator__OpAssignment_1_2)
{ after(grammarAccess.getAssignmentOperatorAccess().getOpAssignment_1_2()); }
)



    |
(
{ before(grammarAccess.getAssignmentOperatorAccess().getOpAssignment_1_3()); }
(rule__AssignmentOperator__OpAssignment_1_3)
{ after(grammarAccess.getAssignmentOperatorAccess().getOpAssignment_1_3()); }
)



    |
(
{ before(grammarAccess.getAssignmentOperatorAccess().getOpAssignment_1_4()); }
(rule__AssignmentOperator__OpAssignment_1_4)
{ after(grammarAccess.getAssignmentOperatorAccess().getOpAssignment_1_4()); }
)



    |
(
{ before(grammarAccess.getAssignmentOperatorAccess().getOpAssignment_1_5()); }
(rule__AssignmentOperator__OpAssignment_1_5)
{ after(grammarAccess.getAssignmentOperatorAccess().getOpAssignment_1_5()); }
)



    |
(
{ before(grammarAccess.getAssignmentOperatorAccess().getOpAssignment_1_6()); }
(rule__AssignmentOperator__OpAssignment_1_6)
{ after(grammarAccess.getAssignmentOperatorAccess().getOpAssignment_1_6()); }
)



    |
(
{ before(grammarAccess.getAssignmentOperatorAccess().getOpAssignment_1_7()); }
(rule__AssignmentOperator__OpAssignment_1_7)
{ after(grammarAccess.getAssignmentOperatorAccess().getOpAssignment_1_7()); }
)



    |
(
{ before(grammarAccess.getAssignmentOperatorAccess().getOpAssignment_1_8()); }
(rule__AssignmentOperator__OpAssignment_1_8)
{ after(grammarAccess.getAssignmentOperatorAccess().getOpAssignment_1_8()); }
)



    |
(
{ before(grammarAccess.getAssignmentOperatorAccess().getOpAssignment_1_9()); }
(rule__AssignmentOperator__OpAssignment_1_9)
{ after(grammarAccess.getAssignmentOperatorAccess().getOpAssignment_1_9()); }
)



    |
(
{ before(grammarAccess.getAssignmentOperatorAccess().getOpAssignment_1_10()); }
(rule__AssignmentOperator__OpAssignment_1_10)
{ after(grammarAccess.getAssignmentOperatorAccess().getOpAssignment_1_10()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Alternatives_2_0
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getEqualityExpressionAccess().getOpAssignment_2_0_0()); }
(rule__EqualityExpression__OpAssignment_2_0_0)
{ after(grammarAccess.getEqualityExpressionAccess().getOpAssignment_2_0_0()); }
)



    |
(
{ before(grammarAccess.getEqualityExpressionAccess().getOpAssignment_2_0_1()); }
(rule__EqualityExpression__OpAssignment_2_0_1)
{ after(grammarAccess.getEqualityExpressionAccess().getOpAssignment_2_0_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Alternatives_2_0
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getRelationalExpressionAccess().getOpAssignment_2_0_0()); }
(rule__RelationalExpression__OpAssignment_2_0_0)
{ after(grammarAccess.getRelationalExpressionAccess().getOpAssignment_2_0_0()); }
)



    |
(
{ before(grammarAccess.getRelationalExpressionAccess().getOpAssignment_2_0_1()); }
(rule__RelationalExpression__OpAssignment_2_0_1)
{ after(grammarAccess.getRelationalExpressionAccess().getOpAssignment_2_0_1()); }
)



    |
(
{ before(grammarAccess.getRelationalExpressionAccess().getOpAssignment_2_0_2()); }
(rule__RelationalExpression__OpAssignment_2_0_2)
{ after(grammarAccess.getRelationalExpressionAccess().getOpAssignment_2_0_2()); }
)



    |
(
{ before(grammarAccess.getRelationalExpressionAccess().getOpAssignment_2_0_3()); }
(rule__RelationalExpression__OpAssignment_2_0_3)
{ after(grammarAccess.getRelationalExpressionAccess().getOpAssignment_2_0_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Alternatives_2_0
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getShiftExpressionAccess().getOpAssignment_2_0_0()); }
(rule__ShiftExpression__OpAssignment_2_0_0)
{ after(grammarAccess.getShiftExpressionAccess().getOpAssignment_2_0_0()); }
)



    |
(
{ before(grammarAccess.getShiftExpressionAccess().getOpAssignment_2_0_1()); }
(rule__ShiftExpression__OpAssignment_2_0_1)
{ after(grammarAccess.getShiftExpressionAccess().getOpAssignment_2_0_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Alternatives_2_0
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAdditiveExpressionAccess().getOpAssignment_2_0_0()); }
(rule__AdditiveExpression__OpAssignment_2_0_0)
{ after(grammarAccess.getAdditiveExpressionAccess().getOpAssignment_2_0_0()); }
)



    |
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOpAssignment_2_0_1()); }
(rule__AdditiveExpression__OpAssignment_2_0_1)
{ after(grammarAccess.getAdditiveExpressionAccess().getOpAssignment_2_0_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Alternatives_2_0
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_2_0_0()); }
(rule__MultiplicativeExpression__OpAssignment_2_0_0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_2_0_0()); }
)



    |
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_2_0_1()); }
(rule__MultiplicativeExpression__OpAssignment_2_0_1)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_2_0_1()); }
)



    |
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_2_0_2()); }
(rule__MultiplicativeExpression__OpAssignment_2_0_2)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_2_0_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__CastExpression__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getCastExpressionAccess().getExprAssignment_1_0()); }
(rule__CastExpression__ExprAssignment_1_0)
{ after(grammarAccess.getCastExpressionAccess().getExprAssignment_1_0()); }
)



    |
(
{ before(grammarAccess.getCastExpressionAccess().getGroup_1_1()); }
(rule__CastExpression__Group_1_1__0)
{ after(grammarAccess.getCastExpressionAccess().getGroup_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getUnaryExpressionAccess().getExprAssignment_1_0()); }
(rule__UnaryExpression__ExprAssignment_1_0)
{ after(grammarAccess.getUnaryExpressionAccess().getExprAssignment_1_0()); }
)



    |
(
{ before(grammarAccess.getUnaryExpressionAccess().getGroup_1_1()); }
(rule__UnaryExpression__Group_1_1__0)
{ after(grammarAccess.getUnaryExpressionAccess().getGroup_1_1()); }
)



    |
(
{ before(grammarAccess.getUnaryExpressionAccess().getGroup_1_2()); }
(rule__UnaryExpression__Group_1_2__0)
{ after(grammarAccess.getUnaryExpressionAccess().getGroup_1_2()); }
)



    |
(
{ before(grammarAccess.getUnaryExpressionAccess().getGroup_1_3()); }
(rule__UnaryExpression__Group_1_3__0)
{ after(grammarAccess.getUnaryExpressionAccess().getGroup_1_3()); }
)



    |
(
{ before(grammarAccess.getUnaryExpressionAccess().getGroup_1_4()); }
(rule__UnaryExpression__Group_1_4__0)
{ after(grammarAccess.getUnaryExpressionAccess().getGroup_1_4()); }
)



    |
(
{ before(grammarAccess.getUnaryExpressionAccess().getGroup_1_5()); }
(rule__UnaryExpression__Group_1_5__0)
{ after(grammarAccess.getUnaryExpressionAccess().getGroup_1_5()); }
)



    |
(
{ before(grammarAccess.getUnaryExpressionAccess().getGroup_1_6()); }
(rule__UnaryExpression__Group_1_6__0)
{ after(grammarAccess.getUnaryExpressionAccess().getGroup_1_6()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperator__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getUnaryOperatorAccess().getOpAssignment_1_0()); }
(rule__UnaryOperator__OpAssignment_1_0)
{ after(grammarAccess.getUnaryOperatorAccess().getOpAssignment_1_0()); }
)



    |
(
{ before(grammarAccess.getUnaryOperatorAccess().getOpAssignment_1_1()); }
(rule__UnaryOperator__OpAssignment_1_1)
{ after(grammarAccess.getUnaryOperatorAccess().getOpAssignment_1_1()); }
)



    |
(
{ before(grammarAccess.getUnaryOperatorAccess().getOpAssignment_1_2()); }
(rule__UnaryOperator__OpAssignment_1_2)
{ after(grammarAccess.getUnaryOperatorAccess().getOpAssignment_1_2()); }
)



    |
(
{ before(grammarAccess.getUnaryOperatorAccess().getOpAssignment_1_3()); }
(rule__UnaryOperator__OpAssignment_1_3)
{ after(grammarAccess.getUnaryOperatorAccess().getOpAssignment_1_3()); }
)



    |
(
{ before(grammarAccess.getUnaryOperatorAccess().getOpAssignment_1_4()); }
(rule__UnaryOperator__OpAssignment_1_4)
{ after(grammarAccess.getUnaryOperatorAccess().getOpAssignment_1_4()); }
)



    |
(
{ before(grammarAccess.getUnaryOperatorAccess().getOpAssignment_1_5()); }
(rule__UnaryOperator__OpAssignment_1_5)
{ after(grammarAccess.getUnaryOperatorAccess().getOpAssignment_1_5()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpression__Alternatives_1_1
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPostfixExpressionAccess().getGroup_1_1_0()); }
(rule__PostfixExpression__Group_1_1_0__0)
{ after(grammarAccess.getPostfixExpressionAccess().getGroup_1_1_0()); }
)



    |
(
{ before(grammarAccess.getPostfixExpressionAccess().getGroup_1_1_1()); }
(rule__PostfixExpression__Group_1_1_1__0)
{ after(grammarAccess.getPostfixExpressionAccess().getGroup_1_1_1()); }
)



    |
(
{ before(grammarAccess.getPostfixExpressionAccess().getGroup_1_1_2()); }
(rule__PostfixExpression__Group_1_1_2__0)
{ after(grammarAccess.getPostfixExpressionAccess().getGroup_1_1_2()); }
)



    |
(
{ before(grammarAccess.getPostfixExpressionAccess().getGroup_1_1_3()); }
(rule__PostfixExpression__Group_1_1_3__0)
{ after(grammarAccess.getPostfixExpressionAccess().getGroup_1_1_3()); }
)



    |
(
{ before(grammarAccess.getPostfixExpressionAccess().getPlusplusAssignment_1_1_4()); }
(rule__PostfixExpression__PlusplusAssignment_1_1_4)
{ after(grammarAccess.getPostfixExpressionAccess().getPlusplusAssignment_1_1_4()); }
)



    |
(
{ before(grammarAccess.getPostfixExpressionAccess().getMinusminusAssignment_1_1_5()); }
(rule__PostfixExpression__MinusminusAssignment_1_1_5)
{ after(grammarAccess.getPostfixExpressionAccess().getMinusminusAssignment_1_1_5()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPrimaryExpressionAccess().getIdAssignment_1_0()); }
(rule__PrimaryExpression__IdAssignment_1_0)
{ after(grammarAccess.getPrimaryExpressionAccess().getIdAssignment_1_0()); }
)



    |
(
{ before(grammarAccess.getPrimaryExpressionAccess().getConstAssignment_1_1()); }
(rule__PrimaryExpression__ConstAssignment_1_1)
{ after(grammarAccess.getPrimaryExpressionAccess().getConstAssignment_1_1()); }
)



    |
(
{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_1_2()); }
(rule__PrimaryExpression__Group_1_2__0)
{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_1_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getConstantAccess().getHexAssignment_1_0()); }
(rule__Constant__HexAssignment_1_0)
{ after(grammarAccess.getConstantAccess().getHexAssignment_1_0()); }
)



    |
(
{ before(grammarAccess.getConstantAccess().getOctAssignment_1_1()); }
(rule__Constant__OctAssignment_1_1)
{ after(grammarAccess.getConstantAccess().getOctAssignment_1_1()); }
)



    |
(
{ before(grammarAccess.getConstantAccess().getDecAssignment_1_2()); }
(rule__Constant__DecAssignment_1_2)
{ after(grammarAccess.getConstantAccess().getDecAssignment_1_2()); }
)



    |
(
{ before(grammarAccess.getConstantAccess().getChAssignment_1_3()); }
(rule__Constant__ChAssignment_1_3)
{ after(grammarAccess.getConstantAccess().getChAssignment_1_3()); }
)



    |
(
{ before(grammarAccess.getConstantAccess().getStrAssignment_1_4()); }
(rule__Constant__StrAssignment_1_4)
{ after(grammarAccess.getConstantAccess().getStrAssignment_1_4()); }
)



    |
(
{ before(grammarAccess.getConstantAccess().getFloatAssignment_1_5()); }
(rule__Constant__FloatAssignment_1_5)
{ after(grammarAccess.getConstantAccess().getFloatAssignment_1_5()); }
)



    |
(
{ before(grammarAccess.getConstantAccess().getBinAssignment_1_6()); }
(rule__Constant__BinAssignment_1_6)
{ after(grammarAccess.getConstantAccess().getBinAssignment_1_6()); }
)



;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getModelAccess().getModelAction_0()); }
(

)
{ after(grammarAccess.getModelAccess().getModelAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getModelAccess().getUnitAssignment_1()); }
(rule__Model__UnitAssignment_1)
{ after(grammarAccess.getModelAccess().getUnitAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__TranslationUnit__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TranslationUnit__Group__0__Impl
	rule__TranslationUnit__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TranslationUnit__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getTranslationUnitAccess().getTranslationUnitAction_0()); }
(

)
{ after(grammarAccess.getTranslationUnitAccess().getTranslationUnitAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__TranslationUnit__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TranslationUnit__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TranslationUnit__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getTranslationUnitAccess().getExternalAssignment_1()); }
(rule__TranslationUnit__ExternalAssignment_1)*
{ after(grammarAccess.getTranslationUnitAccess().getExternalAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__ExternalDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExternalDeclaration__Group__0__Impl
	rule__ExternalDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getExternalDeclarationAccess().getExternalDeclarationAction_0()); }
(

)
{ after(grammarAccess.getExternalDeclarationAccess().getExternalDeclarationAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ExternalDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExternalDeclaration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getExternalDeclarationAccess().getAlternatives_1()); }
(rule__ExternalDeclaration__Alternatives_1)
{ after(grammarAccess.getExternalDeclarationAccess().getAlternatives_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__ExternalDeclaration__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExternalDeclaration__Group_1_0__0__Impl
	rule__ExternalDeclaration__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalDeclaration__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getExternalDeclarationAccess().getGroup_1_0_0()); }
(rule__ExternalDeclaration__Group_1_0_0__0)
{ after(grammarAccess.getExternalDeclarationAccess().getGroup_1_0_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ExternalDeclaration__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExternalDeclaration__Group_1_0__1__Impl
	rule__ExternalDeclaration__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalDeclaration__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getExternalDeclarationAccess().getFunctionDefinitionAssignment_1_0_1()); }
(rule__ExternalDeclaration__FunctionDefinitionAssignment_1_0_1)
{ after(grammarAccess.getExternalDeclarationAccess().getFunctionDefinitionAssignment_1_0_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ExternalDeclaration__Group_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExternalDeclaration__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalDeclaration__Group_1_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getExternalDeclarationAccess().getRIGHTBRACETerminalRuleCall_1_0_2()); }
	RULE_RIGHTBRACE
{ after(grammarAccess.getExternalDeclarationAccess().getRIGHTBRACETerminalRuleCall_1_0_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__ExternalDeclaration__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExternalDeclaration__Group_1_0_0__0__Impl
	rule__ExternalDeclaration__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalDeclaration__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getExternalDeclarationAccess().getFunctiondefHeadAssignment_1_0_0_0()); }
(rule__ExternalDeclaration__FunctiondefHeadAssignment_1_0_0_0)
{ after(grammarAccess.getExternalDeclarationAccess().getFunctiondefHeadAssignment_1_0_0_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ExternalDeclaration__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExternalDeclaration__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalDeclaration__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getExternalDeclarationAccess().getLEFTBRACETerminalRuleCall_1_0_0_1()); }
	RULE_LEFTBRACE
{ after(grammarAccess.getExternalDeclarationAccess().getLEFTBRACETerminalRuleCall_1_0_0_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionDefHead__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDefHead__Group__0__Impl
	rule__FunctionDefHead__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefHead__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getFunctionDefHeadAccess().getFunctionDefHeadAction_0()); }
(

)
{ after(grammarAccess.getFunctionDefHeadAccess().getFunctionDefHeadAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDefHead__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDefHead__Group__1__Impl
	rule__FunctionDefHead__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefHead__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getFunctionDefHeadAccess().getFunDeclSpecifiersAssignment_1()); }
(rule__FunctionDefHead__FunDeclSpecifiersAssignment_1)?
{ after(grammarAccess.getFunctionDefHeadAccess().getFunDeclSpecifiersAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDefHead__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDefHead__Group__2__Impl
	rule__FunctionDefHead__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefHead__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getFunctionDefHeadAccess().getFunDeclaratorAssignment_2()); }
(rule__FunctionDefHead__FunDeclaratorAssignment_2)
{ after(grammarAccess.getFunctionDefHeadAccess().getFunDeclaratorAssignment_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDefHead__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDefHead__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefHead__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getFunctionDefHeadAccess().getFunDeclarationAssignment_3()); }
(rule__FunctionDefHead__FunDeclarationAssignment_3)*
{ after(grammarAccess.getFunctionDefHeadAccess().getFunDeclarationAssignment_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}










rule__FunctionDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDefinition__Group__0__Impl
	rule__FunctionDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getFunctionDefinitionAccess().getFunctionDefinitionAction_0()); }
(

)
{ after(grammarAccess.getFunctionDefinitionAccess().getFunctionDefinitionAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDefinition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getFunctionDefinitionAccess().getBodyAssignment_1()); }
(rule__FunctionDefinition__BodyAssignment_1)
{ after(grammarAccess.getFunctionDefinitionAccess().getBodyAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__Declaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declaration__Group__0__Impl
	rule__Declaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDeclarationAccess().getDeclarationAction_0()); }
(

)
{ after(grammarAccess.getDeclarationAccess().getDeclarationAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Declaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declaration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDeclarationAccess().getGroup_1()); }
(rule__Declaration__Group_1__0)
{ after(grammarAccess.getDeclarationAccess().getGroup_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__Declaration__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declaration__Group_1__0__Impl
	rule__Declaration__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDeclarationAccess().getSpecifiersAssignment_1_0()); }
(rule__Declaration__SpecifiersAssignment_1_0)
{ after(grammarAccess.getDeclarationAccess().getSpecifiersAssignment_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Declaration__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declaration__Group_1__1__Impl
	rule__Declaration__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDeclarationAccess().getInitDeclaratorListAssignment_1_1()); }
(rule__Declaration__InitDeclaratorListAssignment_1_1)?
{ after(grammarAccess.getDeclarationAccess().getInitDeclaratorListAssignment_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Declaration__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declaration__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDeclarationAccess().getSemiAssignment_1_2()); }
(rule__Declaration__SemiAssignment_1_2)
{ after(grammarAccess.getDeclarationAccess().getSemiAssignment_1_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__FunctionDeclarationSpecifiers__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclarationSpecifiers__Group__0__Impl
	rule__FunctionDeclarationSpecifiers__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclarationSpecifiers__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getFunctionDeclarationSpecifiersAccess().getFunctionDeclarationSpecifiersAction_0()); }
(

)
{ after(grammarAccess.getFunctionDeclarationSpecifiersAccess().getFunctionDeclarationSpecifiersAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclarationSpecifiers__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclarationSpecifiers__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclarationSpecifiers__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
(
{ before(grammarAccess.getFunctionDeclarationSpecifiersAccess().getAlternatives_1()); }
(rule__FunctionDeclarationSpecifiers__Alternatives_1)
{ after(grammarAccess.getFunctionDeclarationSpecifiersAccess().getAlternatives_1()); }
)
(
{ before(grammarAccess.getFunctionDeclarationSpecifiersAccess().getAlternatives_1()); }
(rule__FunctionDeclarationSpecifiers__Alternatives_1)*
{ after(grammarAccess.getFunctionDeclarationSpecifiersAccess().getAlternatives_1()); }
)
)



;
finally {
	restoreStackSize(stackSize);
}






rule__DeclarationSpecifiers__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclarationSpecifiers__Group__0__Impl
	rule__DeclarationSpecifiers__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationSpecifiers__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDeclarationSpecifiersAccess().getDeclarationSpecifiersAction_0()); }
(

)
{ after(grammarAccess.getDeclarationSpecifiersAccess().getDeclarationSpecifiersAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DeclarationSpecifiers__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclarationSpecifiers__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationSpecifiers__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
(
{ before(grammarAccess.getDeclarationSpecifiersAccess().getAlternatives_1()); }
(rule__DeclarationSpecifiers__Alternatives_1)
{ after(grammarAccess.getDeclarationSpecifiersAccess().getAlternatives_1()); }
)
(
{ before(grammarAccess.getDeclarationSpecifiersAccess().getAlternatives_1()); }
(rule__DeclarationSpecifiers__Alternatives_1)*
{ after(grammarAccess.getDeclarationSpecifiersAccess().getAlternatives_1()); }
)
)



;
finally {
	restoreStackSize(stackSize);
}






rule__InitDeclaratorList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InitDeclaratorList__Group__0__Impl
	rule__InitDeclaratorList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InitDeclaratorList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInitDeclaratorListAccess().getInitDeclaratorListAction_0()); }
(

)
{ after(grammarAccess.getInitDeclaratorListAccess().getInitDeclaratorListAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__InitDeclaratorList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InitDeclaratorList__Group__1__Impl
	rule__InitDeclaratorList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InitDeclaratorList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInitDeclaratorListAccess().getInitDeclaratorAssignment_1()); }
(rule__InitDeclaratorList__InitDeclaratorAssignment_1)
{ after(grammarAccess.getInitDeclaratorListAccess().getInitDeclaratorAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__InitDeclaratorList__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InitDeclaratorList__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InitDeclaratorList__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInitDeclaratorListAccess().getGroup_2()); }
(rule__InitDeclaratorList__Group_2__0)*
{ after(grammarAccess.getInitDeclaratorListAccess().getGroup_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__InitDeclaratorList__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InitDeclaratorList__Group_2__0__Impl
	rule__InitDeclaratorList__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InitDeclaratorList__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInitDeclaratorListAccess().getCOMMATerminalRuleCall_2_0()); }
	RULE_COMMA
{ after(grammarAccess.getInitDeclaratorListAccess().getCOMMATerminalRuleCall_2_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__InitDeclaratorList__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InitDeclaratorList__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InitDeclaratorList__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInitDeclaratorListAccess().getInitDeclaratorAssignment_2_1()); }
(rule__InitDeclaratorList__InitDeclaratorAssignment_2_1)
{ after(grammarAccess.getInitDeclaratorListAccess().getInitDeclaratorAssignment_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__InitDeclarator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InitDeclarator__Group__0__Impl
	rule__InitDeclarator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InitDeclarator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInitDeclaratorAccess().getInitDeclaratorAction_0()); }
(

)
{ after(grammarAccess.getInitDeclaratorAccess().getInitDeclaratorAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__InitDeclarator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InitDeclarator__Group__1__Impl
	rule__InitDeclarator__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InitDeclarator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInitDeclaratorAccess().getDeclaratorAssignment_1()); }
(rule__InitDeclarator__DeclaratorAssignment_1)
{ after(grammarAccess.getInitDeclaratorAccess().getDeclaratorAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__InitDeclarator__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InitDeclarator__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InitDeclarator__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInitDeclaratorAccess().getGroup_2()); }
(rule__InitDeclarator__Group_2__0)?
{ after(grammarAccess.getInitDeclaratorAccess().getGroup_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__InitDeclarator__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InitDeclarator__Group_2__0__Impl
	rule__InitDeclarator__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InitDeclarator__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInitDeclaratorAccess().getASSIGNTerminalRuleCall_2_0()); }
	RULE_ASSIGN
{ after(grammarAccess.getInitDeclaratorAccess().getASSIGNTerminalRuleCall_2_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__InitDeclarator__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InitDeclarator__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InitDeclarator__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInitDeclaratorAccess().getInitializerAssignment_2_1()); }
(rule__InitDeclarator__InitializerAssignment_2_1)
{ after(grammarAccess.getInitDeclaratorAccess().getInitializerAssignment_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__StorageClassSpecifier__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StorageClassSpecifier__Group__0__Impl
	rule__StorageClassSpecifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StorageClassSpecifier__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getStorageClassSpecifierAccess().getStorageClassSpecifierAction_0()); }
(

)
{ after(grammarAccess.getStorageClassSpecifierAccess().getStorageClassSpecifierAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__StorageClassSpecifier__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StorageClassSpecifier__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StorageClassSpecifier__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getStorageClassSpecifierAccess().getAlternatives_1()); }
(rule__StorageClassSpecifier__Alternatives_1)
{ after(grammarAccess.getStorageClassSpecifierAccess().getAlternatives_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__TypeSpecifier__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeSpecifier__Group_0__0__Impl
	rule__TypeSpecifier__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpecifier__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getTypeSpecifierAccess().getTypeSpecifierAction_0_0()); }
(

)
{ after(grammarAccess.getTypeSpecifierAccess().getTypeSpecifierAction_0_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__TypeSpecifier__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeSpecifier__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpecifier__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getTypeSpecifierAccess().getNameAssignment_0_1()); }
(rule__TypeSpecifier__NameAssignment_0_1)
{ after(grammarAccess.getTypeSpecifierAccess().getNameAssignment_0_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__TypedefName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypedefName__Group__0__Impl
	rule__TypedefName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedefName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getTypedefNameAccess().getTypedefNameAction_0()); }
(

)
{ after(grammarAccess.getTypedefNameAccess().getTypedefNameAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__TypedefName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypedefName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedefName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
{at.jku.weiner.c.Scope.isTypeName(input.LT(1).getText())}?

(
{ before(grammarAccess.getTypedefNameAccess().getIdAssignment_1()); }
(rule__TypedefName__IdAssignment_1)
{ after(grammarAccess.getTypedefNameAccess().getIdAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__StructOrUnionSpecifier__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructOrUnionSpecifier__Group__0__Impl
	rule__StructOrUnionSpecifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StructOrUnionSpecifier__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getStructOrUnionSpecifierAccess().getStructOrUnionSpecifierAction_0()); }
(

)
{ after(grammarAccess.getStructOrUnionSpecifierAccess().getStructOrUnionSpecifierAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__StructOrUnionSpecifier__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructOrUnionSpecifier__Group__1__Impl
	rule__StructOrUnionSpecifier__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StructOrUnionSpecifier__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getStructOrUnionSpecifierAccess().getTypeAssignment_1()); }
(rule__StructOrUnionSpecifier__TypeAssignment_1)
{ after(grammarAccess.getStructOrUnionSpecifierAccess().getTypeAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__StructOrUnionSpecifier__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructOrUnionSpecifier__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StructOrUnionSpecifier__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getStructOrUnionSpecifierAccess().getAlternatives_2()); }
(rule__StructOrUnionSpecifier__Alternatives_2)
{ after(grammarAccess.getStructOrUnionSpecifierAccess().getAlternatives_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__StructOrUnionSpecifier__Group_2_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructOrUnionSpecifier__Group_2_0__0__Impl
	rule__StructOrUnionSpecifier__Group_2_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StructOrUnionSpecifier__Group_2_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getStructOrUnionSpecifierAccess().getIdAssignment_2_0_0()); }
(rule__StructOrUnionSpecifier__IdAssignment_2_0_0)?
{ after(grammarAccess.getStructOrUnionSpecifierAccess().getIdAssignment_2_0_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__StructOrUnionSpecifier__Group_2_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructOrUnionSpecifier__Group_2_0__1__Impl
	rule__StructOrUnionSpecifier__Group_2_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StructOrUnionSpecifier__Group_2_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getStructOrUnionSpecifierAccess().getLEFTBRACETerminalRuleCall_2_0_1()); }
	RULE_LEFTBRACE
{ after(grammarAccess.getStructOrUnionSpecifierAccess().getLEFTBRACETerminalRuleCall_2_0_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__StructOrUnionSpecifier__Group_2_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructOrUnionSpecifier__Group_2_0__2__Impl
	rule__StructOrUnionSpecifier__Group_2_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StructOrUnionSpecifier__Group_2_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getStructOrUnionSpecifierAccess().getStructDeclListAssignment_2_0_2()); }
(rule__StructOrUnionSpecifier__StructDeclListAssignment_2_0_2)
{ after(grammarAccess.getStructOrUnionSpecifierAccess().getStructDeclListAssignment_2_0_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__StructOrUnionSpecifier__Group_2_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructOrUnionSpecifier__Group_2_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StructOrUnionSpecifier__Group_2_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getStructOrUnionSpecifierAccess().getRIGHTBRACETerminalRuleCall_2_0_3()); }
	RULE_RIGHTBRACE
{ after(grammarAccess.getStructOrUnionSpecifierAccess().getRIGHTBRACETerminalRuleCall_2_0_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}










rule__StructOrUnion__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructOrUnion__Group_0__0__Impl
	rule__StructOrUnion__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StructOrUnion__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getStructOrUnionAccess().getStructOrUnionAction_0_0()); }
(

)
{ after(grammarAccess.getStructOrUnionAccess().getStructOrUnionAction_0_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__StructOrUnion__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructOrUnion__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StructOrUnion__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getStructOrUnionAccess().getNameAssignment_0_1()); }
(rule__StructOrUnion__NameAssignment_0_1)
{ after(grammarAccess.getStructOrUnionAccess().getNameAssignment_0_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__StructDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructDeclaration__Group__0__Impl
	rule__StructDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getStructDeclarationAccess().getListAssignment_0()); }
(rule__StructDeclaration__ListAssignment_0)
{ after(grammarAccess.getStructDeclarationAccess().getListAssignment_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__StructDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructDeclaration__Group__1__Impl
	rule__StructDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getStructDeclarationAccess().getStructDeclarationListAssignment_1()); }
(rule__StructDeclaration__StructDeclarationListAssignment_1)?
{ after(grammarAccess.getStructDeclarationAccess().getStructDeclarationListAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__StructDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructDeclaration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getStructDeclarationAccess().getSEMITerminalRuleCall_2()); }
	RULE_SEMI
{ after(grammarAccess.getStructDeclarationAccess().getSEMITerminalRuleCall_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__SpecifierQualifierList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SpecifierQualifierList__Group__0__Impl
	rule__SpecifierQualifierList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecifierQualifierList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getSpecifierQualifierListAccess().getSpecifierQualifierListAction_0()); }
(

)
{ after(grammarAccess.getSpecifierQualifierListAccess().getSpecifierQualifierListAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__SpecifierQualifierList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SpecifierQualifierList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecifierQualifierList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
(
{ before(grammarAccess.getSpecifierQualifierListAccess().getAlternatives_1()); }
(rule__SpecifierQualifierList__Alternatives_1)
{ after(grammarAccess.getSpecifierQualifierListAccess().getAlternatives_1()); }
)
(
{ before(grammarAccess.getSpecifierQualifierListAccess().getAlternatives_1()); }
(rule__SpecifierQualifierList__Alternatives_1)*
{ after(grammarAccess.getSpecifierQualifierListAccess().getAlternatives_1()); }
)
)



;
finally {
	restoreStackSize(stackSize);
}






rule__StructDeclaratorList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructDeclaratorList__Group__0__Impl
	rule__StructDeclaratorList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDeclaratorList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getStructDeclaratorListAccess().getStructDeclaratorAssignment_0()); }
(rule__StructDeclaratorList__StructDeclaratorAssignment_0)
{ after(grammarAccess.getStructDeclaratorListAccess().getStructDeclaratorAssignment_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__StructDeclaratorList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructDeclaratorList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDeclaratorList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getStructDeclaratorListAccess().getGroup_1()); }
(rule__StructDeclaratorList__Group_1__0)*
{ after(grammarAccess.getStructDeclaratorListAccess().getGroup_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__StructDeclaratorList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructDeclaratorList__Group_1__0__Impl
	rule__StructDeclaratorList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDeclaratorList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getStructDeclaratorListAccess().getCOMMATerminalRuleCall_1_0()); }
	RULE_COMMA
{ after(grammarAccess.getStructDeclaratorListAccess().getCOMMATerminalRuleCall_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__StructDeclaratorList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructDeclaratorList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDeclaratorList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getStructDeclaratorListAccess().getStructDeclaratorAssignment_1_1()); }
(rule__StructDeclaratorList__StructDeclaratorAssignment_1_1)
{ after(grammarAccess.getStructDeclaratorListAccess().getStructDeclaratorAssignment_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__StructDeclarator__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructDeclarator__Group_0__0__Impl
	rule__StructDeclarator__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDeclarator__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getStructDeclaratorAccess().getDeclaratorAssignment_0_0()); }
(rule__StructDeclarator__DeclaratorAssignment_0_0)
{ after(grammarAccess.getStructDeclaratorAccess().getDeclaratorAssignment_0_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__StructDeclarator__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructDeclarator__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDeclarator__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getStructDeclaratorAccess().getGroup_0_1()); }
(rule__StructDeclarator__Group_0_1__0)?
{ after(grammarAccess.getStructDeclaratorAccess().getGroup_0_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__StructDeclarator__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructDeclarator__Group_0_1__0__Impl
	rule__StructDeclarator__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDeclarator__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getStructDeclaratorAccess().getCOLONTerminalRuleCall_0_1_0()); }
	RULE_COLON
{ after(grammarAccess.getStructDeclaratorAccess().getCOLONTerminalRuleCall_0_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__StructDeclarator__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructDeclarator__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDeclarator__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getStructDeclaratorAccess().getConstExprAssignment_0_1_1()); }
(rule__StructDeclarator__ConstExprAssignment_0_1_1)
{ after(grammarAccess.getStructDeclaratorAccess().getConstExprAssignment_0_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__StructDeclarator__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructDeclarator__Group_1__0__Impl
	rule__StructDeclarator__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDeclarator__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getStructDeclaratorAccess().getCOLONTerminalRuleCall_1_0()); }
	RULE_COLON
{ after(grammarAccess.getStructDeclaratorAccess().getCOLONTerminalRuleCall_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__StructDeclarator__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructDeclarator__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDeclarator__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getStructDeclaratorAccess().getConstExprAssignment_1_1()); }
(rule__StructDeclarator__ConstExprAssignment_1_1)
{ after(grammarAccess.getStructDeclaratorAccess().getConstExprAssignment_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__EnumSpecifier__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumSpecifier__Group__0__Impl
	rule__EnumSpecifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumSpecifier__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getEnumSpecifierAccess().getEnumSpecifierAction_0()); }
(

)
{ after(grammarAccess.getEnumSpecifierAccess().getEnumSpecifierAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__EnumSpecifier__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumSpecifier__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumSpecifier__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getEnumSpecifierAccess().getGroup_1()); }
(rule__EnumSpecifier__Group_1__0)
{ after(grammarAccess.getEnumSpecifierAccess().getGroup_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__EnumSpecifier__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumSpecifier__Group_1__0__Impl
	rule__EnumSpecifier__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumSpecifier__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getEnumSpecifierAccess().getKW_ENUMTerminalRuleCall_1_0()); }
	RULE_KW_ENUM
{ after(grammarAccess.getEnumSpecifierAccess().getKW_ENUMTerminalRuleCall_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__EnumSpecifier__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumSpecifier__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumSpecifier__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getEnumSpecifierAccess().getAlternatives_1_1()); }
(rule__EnumSpecifier__Alternatives_1_1)
{ after(grammarAccess.getEnumSpecifierAccess().getAlternatives_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__EnumSpecifier__Group_1_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumSpecifier__Group_1_1_0__0__Impl
	rule__EnumSpecifier__Group_1_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumSpecifier__Group_1_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getEnumSpecifierAccess().getLEFTBRACETerminalRuleCall_1_1_0_0()); }
	RULE_LEFTBRACE
{ after(grammarAccess.getEnumSpecifierAccess().getLEFTBRACETerminalRuleCall_1_1_0_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__EnumSpecifier__Group_1_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumSpecifier__Group_1_1_0__1__Impl
	rule__EnumSpecifier__Group_1_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumSpecifier__Group_1_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getEnumSpecifierAccess().getEnumListAssignment_1_1_0_1()); }
(rule__EnumSpecifier__EnumListAssignment_1_1_0_1)
{ after(grammarAccess.getEnumSpecifierAccess().getEnumListAssignment_1_1_0_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__EnumSpecifier__Group_1_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumSpecifier__Group_1_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumSpecifier__Group_1_1_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getEnumSpecifierAccess().getRIGHTBRACETerminalRuleCall_1_1_0_2()); }
	RULE_RIGHTBRACE
{ after(grammarAccess.getEnumSpecifierAccess().getRIGHTBRACETerminalRuleCall_1_1_0_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__EnumSpecifier__Group_1_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumSpecifier__Group_1_1_1__0__Impl
	rule__EnumSpecifier__Group_1_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumSpecifier__Group_1_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getEnumSpecifierAccess().getIdAssignment_1_1_1_0()); }
(rule__EnumSpecifier__IdAssignment_1_1_1_0)
{ after(grammarAccess.getEnumSpecifierAccess().getIdAssignment_1_1_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__EnumSpecifier__Group_1_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumSpecifier__Group_1_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumSpecifier__Group_1_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getEnumSpecifierAccess().getGroup_1_1_1_1()); }
(rule__EnumSpecifier__Group_1_1_1_1__0)?
{ after(grammarAccess.getEnumSpecifierAccess().getGroup_1_1_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__EnumSpecifier__Group_1_1_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumSpecifier__Group_1_1_1_1__0__Impl
	rule__EnumSpecifier__Group_1_1_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumSpecifier__Group_1_1_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getEnumSpecifierAccess().getLEFTBRACETerminalRuleCall_1_1_1_1_0()); }
	RULE_LEFTBRACE
{ after(grammarAccess.getEnumSpecifierAccess().getLEFTBRACETerminalRuleCall_1_1_1_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__EnumSpecifier__Group_1_1_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumSpecifier__Group_1_1_1_1__1__Impl
	rule__EnumSpecifier__Group_1_1_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumSpecifier__Group_1_1_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getEnumSpecifierAccess().getEnumListAssignment_1_1_1_1_1()); }
(rule__EnumSpecifier__EnumListAssignment_1_1_1_1_1)
{ after(grammarAccess.getEnumSpecifierAccess().getEnumListAssignment_1_1_1_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__EnumSpecifier__Group_1_1_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumSpecifier__Group_1_1_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumSpecifier__Group_1_1_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getEnumSpecifierAccess().getRIGHTBRACETerminalRuleCall_1_1_1_1_2()); }
	RULE_RIGHTBRACE
{ after(grammarAccess.getEnumSpecifierAccess().getRIGHTBRACETerminalRuleCall_1_1_1_1_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__EnumeratorList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumeratorList__Group__0__Impl
	rule__EnumeratorList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumeratorList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getEnumeratorListAccess().getEnumeratorAssignment_0()); }
(rule__EnumeratorList__EnumeratorAssignment_0)
{ after(grammarAccess.getEnumeratorListAccess().getEnumeratorAssignment_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__EnumeratorList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumeratorList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumeratorList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getEnumeratorListAccess().getGroup_1()); }
(rule__EnumeratorList__Group_1__0)*
{ after(grammarAccess.getEnumeratorListAccess().getGroup_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__EnumeratorList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumeratorList__Group_1__0__Impl
	rule__EnumeratorList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumeratorList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getEnumeratorListAccess().getCOMMATerminalRuleCall_1_0()); }
	RULE_COMMA
{ after(grammarAccess.getEnumeratorListAccess().getCOMMATerminalRuleCall_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__EnumeratorList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumeratorList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumeratorList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getEnumeratorListAccess().getEnumeratorAssignment_1_1()); }
(rule__EnumeratorList__EnumeratorAssignment_1_1)
{ after(grammarAccess.getEnumeratorListAccess().getEnumeratorAssignment_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__Enumerator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumerator__Group__0__Impl
	rule__Enumerator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumerator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getEnumeratorAccess().getEnumeratorAction_0()); }
(

)
{ after(grammarAccess.getEnumeratorAccess().getEnumeratorAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Enumerator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumerator__Group__1__Impl
	rule__Enumerator__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumerator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getEnumeratorAccess().getIdAssignment_1()); }
(rule__Enumerator__IdAssignment_1)
{ after(grammarAccess.getEnumeratorAccess().getIdAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Enumerator__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumerator__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumerator__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getEnumeratorAccess().getGroup_2()); }
(rule__Enumerator__Group_2__0)?
{ after(grammarAccess.getEnumeratorAccess().getGroup_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__Enumerator__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumerator__Group_2__0__Impl
	rule__Enumerator__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumerator__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getEnumeratorAccess().getASSIGNTerminalRuleCall_2_0()); }
	RULE_ASSIGN
{ after(grammarAccess.getEnumeratorAccess().getASSIGNTerminalRuleCall_2_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Enumerator__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumerator__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumerator__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getEnumeratorAccess().getExprAssignment_2_1()); }
(rule__Enumerator__ExprAssignment_2_1)
{ after(grammarAccess.getEnumeratorAccess().getExprAssignment_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__TypeQualifier__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeQualifier__Group__0__Impl
	rule__TypeQualifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeQualifier__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getTypeQualifierAccess().getTypeQualifierAction_0()); }
(

)
{ after(grammarAccess.getTypeQualifierAccess().getTypeQualifierAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__TypeQualifier__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeQualifier__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeQualifier__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getTypeQualifierAccess().getAlternatives_1()); }
(rule__TypeQualifier__Alternatives_1)
{ after(grammarAccess.getTypeQualifierAccess().getAlternatives_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionSpecifier__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionSpecifier__Group__0__Impl
	rule__FunctionSpecifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionSpecifier__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getFunctionSpecifierAccess().getFunctionSpecifierAction_0()); }
(

)
{ after(grammarAccess.getFunctionSpecifierAccess().getFunctionSpecifierAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionSpecifier__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionSpecifier__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionSpecifier__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getFunctionSpecifierAccess().getAlternatives_1()); }
(rule__FunctionSpecifier__Alternatives_1)
{ after(grammarAccess.getFunctionSpecifierAccess().getAlternatives_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__Declarator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declarator__Group__0__Impl
	rule__Declarator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDeclaratorAccess().getDeclaratorAction_0()); }
(

)
{ after(grammarAccess.getDeclaratorAccess().getDeclaratorAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Declarator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declarator__Group__1__Impl
	rule__Declarator__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDeclaratorAccess().getPointerAssignment_1()); }
(rule__Declarator__PointerAssignment_1)?
{ after(grammarAccess.getDeclaratorAccess().getPointerAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Declarator__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declarator__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDeclaratorAccess().getDeclaratorAssignment_2()); }
(rule__Declarator__DeclaratorAssignment_2)
{ after(grammarAccess.getDeclaratorAccess().getDeclaratorAssignment_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__DirectDeclarator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DirectDeclarator__Group__0__Impl
	rule__DirectDeclarator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectDeclarator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDirectDeclaratorAccess().getDirectDeclaratorAction_0()); }
(

)
{ after(grammarAccess.getDirectDeclaratorAccess().getDirectDeclaratorAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DirectDeclarator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DirectDeclarator__Group__1__Impl
	rule__DirectDeclarator__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectDeclarator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDirectDeclaratorAccess().getAlternatives_1()); }
(rule__DirectDeclarator__Alternatives_1)
{ after(grammarAccess.getDirectDeclaratorAccess().getAlternatives_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DirectDeclarator__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DirectDeclarator__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectDeclarator__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDirectDeclaratorAccess().getDeclaratorSuffixAssignment_2()); }
(rule__DirectDeclarator__DeclaratorSuffixAssignment_2)*
{ after(grammarAccess.getDirectDeclaratorAccess().getDeclaratorSuffixAssignment_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__DirectDeclarator__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DirectDeclarator__Group_1_1__0__Impl
	rule__DirectDeclarator__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectDeclarator__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDirectDeclaratorAccess().getLEFTPARENTerminalRuleCall_1_1_0()); }
	RULE_LEFTPAREN
{ after(grammarAccess.getDirectDeclaratorAccess().getLEFTPARENTerminalRuleCall_1_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DirectDeclarator__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DirectDeclarator__Group_1_1__1__Impl
	rule__DirectDeclarator__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectDeclarator__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDirectDeclaratorAccess().getDeclaratorAssignment_1_1_1()); }
(rule__DirectDeclarator__DeclaratorAssignment_1_1_1)
{ after(grammarAccess.getDirectDeclaratorAccess().getDeclaratorAssignment_1_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DirectDeclarator__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DirectDeclarator__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectDeclarator__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDirectDeclaratorAccess().getRIGHTPARENTerminalRuleCall_1_1_2()); }
	RULE_RIGHTPAREN
{ after(grammarAccess.getDirectDeclaratorAccess().getRIGHTPARENTerminalRuleCall_1_1_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__DeclaratorSuffix__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclaratorSuffix__Group__0__Impl
	rule__DeclaratorSuffix__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaratorSuffix__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDeclaratorSuffixAccess().getDeclaratorSuffixAction_0()); }
(

)
{ after(grammarAccess.getDeclaratorSuffixAccess().getDeclaratorSuffixAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DeclaratorSuffix__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclaratorSuffix__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaratorSuffix__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDeclaratorSuffixAccess().getAlternatives_1()); }
(rule__DeclaratorSuffix__Alternatives_1)
{ after(grammarAccess.getDeclaratorSuffixAccess().getAlternatives_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__DeclaratorSuffix__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclaratorSuffix__Group_1_0__0__Impl
	rule__DeclaratorSuffix__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaratorSuffix__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDeclaratorSuffixAccess().getLEFTBRACKETTerminalRuleCall_1_0_0()); }
	RULE_LEFTBRACKET
{ after(grammarAccess.getDeclaratorSuffixAccess().getLEFTBRACKETTerminalRuleCall_1_0_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DeclaratorSuffix__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclaratorSuffix__Group_1_0__1__Impl
	rule__DeclaratorSuffix__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaratorSuffix__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDeclaratorSuffixAccess().getStaticAssignment_1_0_1()); }
(rule__DeclaratorSuffix__StaticAssignment_1_0_1)
{ after(grammarAccess.getDeclaratorSuffixAccess().getStaticAssignment_1_0_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DeclaratorSuffix__Group_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclaratorSuffix__Group_1_0__2__Impl
	rule__DeclaratorSuffix__Group_1_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaratorSuffix__Group_1_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDeclaratorSuffixAccess().getTypeQualifierListAssignment_1_0_2()); }
(rule__DeclaratorSuffix__TypeQualifierListAssignment_1_0_2)?
{ after(grammarAccess.getDeclaratorSuffixAccess().getTypeQualifierListAssignment_1_0_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DeclaratorSuffix__Group_1_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclaratorSuffix__Group_1_0__3__Impl
	rule__DeclaratorSuffix__Group_1_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaratorSuffix__Group_1_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDeclaratorSuffixAccess().getExprAssignment_1_0_3()); }
(rule__DeclaratorSuffix__ExprAssignment_1_0_3)?
{ after(grammarAccess.getDeclaratorSuffixAccess().getExprAssignment_1_0_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DeclaratorSuffix__Group_1_0__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclaratorSuffix__Group_1_0__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaratorSuffix__Group_1_0__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDeclaratorSuffixAccess().getRIGHTBRACKETTerminalRuleCall_1_0_4()); }
	RULE_RIGHTBRACKET
{ after(grammarAccess.getDeclaratorSuffixAccess().getRIGHTBRACKETTerminalRuleCall_1_0_4()); }
)



;
finally {
	restoreStackSize(stackSize);
}












rule__DeclaratorSuffix__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclaratorSuffix__Group_1_1__0__Impl
	rule__DeclaratorSuffix__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaratorSuffix__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDeclaratorSuffixAccess().getLEFTBRACKETTerminalRuleCall_1_1_0()); }
	RULE_LEFTBRACKET
{ after(grammarAccess.getDeclaratorSuffixAccess().getLEFTBRACKETTerminalRuleCall_1_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DeclaratorSuffix__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclaratorSuffix__Group_1_1__1__Impl
	rule__DeclaratorSuffix__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaratorSuffix__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDeclaratorSuffixAccess().getTypeQualifierListAssignment_1_1_1()); }
(rule__DeclaratorSuffix__TypeQualifierListAssignment_1_1_1)?
{ after(grammarAccess.getDeclaratorSuffixAccess().getTypeQualifierListAssignment_1_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DeclaratorSuffix__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclaratorSuffix__Group_1_1__2__Impl
	rule__DeclaratorSuffix__Group_1_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaratorSuffix__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDeclaratorSuffixAccess().getExprAssignment_1_1_2()); }
(rule__DeclaratorSuffix__ExprAssignment_1_1_2)
{ after(grammarAccess.getDeclaratorSuffixAccess().getExprAssignment_1_1_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DeclaratorSuffix__Group_1_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclaratorSuffix__Group_1_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaratorSuffix__Group_1_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDeclaratorSuffixAccess().getRIGHTBRACKETTerminalRuleCall_1_1_3()); }
	RULE_RIGHTBRACKET
{ after(grammarAccess.getDeclaratorSuffixAccess().getRIGHTBRACKETTerminalRuleCall_1_1_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}










rule__DeclaratorSuffix__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclaratorSuffix__Group_1_2__0__Impl
	rule__DeclaratorSuffix__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaratorSuffix__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDeclaratorSuffixAccess().getLEFTBRACKETTerminalRuleCall_1_2_0()); }
	RULE_LEFTBRACKET
{ after(grammarAccess.getDeclaratorSuffixAccess().getLEFTBRACKETTerminalRuleCall_1_2_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DeclaratorSuffix__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclaratorSuffix__Group_1_2__1__Impl
	rule__DeclaratorSuffix__Group_1_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaratorSuffix__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDeclaratorSuffixAccess().getTypeQualifierListAssignment_1_2_1()); }
(rule__DeclaratorSuffix__TypeQualifierListAssignment_1_2_1)
{ after(grammarAccess.getDeclaratorSuffixAccess().getTypeQualifierListAssignment_1_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DeclaratorSuffix__Group_1_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclaratorSuffix__Group_1_2__2__Impl
	rule__DeclaratorSuffix__Group_1_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaratorSuffix__Group_1_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDeclaratorSuffixAccess().getStaticAssignment_1_2_2()); }
(rule__DeclaratorSuffix__StaticAssignment_1_2_2)
{ after(grammarAccess.getDeclaratorSuffixAccess().getStaticAssignment_1_2_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DeclaratorSuffix__Group_1_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclaratorSuffix__Group_1_2__3__Impl
	rule__DeclaratorSuffix__Group_1_2__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaratorSuffix__Group_1_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDeclaratorSuffixAccess().getExprAssignment_1_2_3()); }
(rule__DeclaratorSuffix__ExprAssignment_1_2_3)
{ after(grammarAccess.getDeclaratorSuffixAccess().getExprAssignment_1_2_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DeclaratorSuffix__Group_1_2__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclaratorSuffix__Group_1_2__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaratorSuffix__Group_1_2__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDeclaratorSuffixAccess().getRIGHTBRACKETTerminalRuleCall_1_2_4()); }
	RULE_RIGHTBRACKET
{ after(grammarAccess.getDeclaratorSuffixAccess().getRIGHTBRACKETTerminalRuleCall_1_2_4()); }
)



;
finally {
	restoreStackSize(stackSize);
}












rule__DeclaratorSuffix__Group_1_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclaratorSuffix__Group_1_3__0__Impl
	rule__DeclaratorSuffix__Group_1_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaratorSuffix__Group_1_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDeclaratorSuffixAccess().getLEFTBRACKETTerminalRuleCall_1_3_0()); }
	RULE_LEFTBRACKET
{ after(grammarAccess.getDeclaratorSuffixAccess().getLEFTBRACKETTerminalRuleCall_1_3_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DeclaratorSuffix__Group_1_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclaratorSuffix__Group_1_3__1__Impl
	rule__DeclaratorSuffix__Group_1_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaratorSuffix__Group_1_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDeclaratorSuffixAccess().getTypeQualifierListAssignment_1_3_1()); }
(rule__DeclaratorSuffix__TypeQualifierListAssignment_1_3_1)?
{ after(grammarAccess.getDeclaratorSuffixAccess().getTypeQualifierListAssignment_1_3_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DeclaratorSuffix__Group_1_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclaratorSuffix__Group_1_3__2__Impl
	rule__DeclaratorSuffix__Group_1_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaratorSuffix__Group_1_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDeclaratorSuffixAccess().getStarAssignment_1_3_2()); }
(rule__DeclaratorSuffix__StarAssignment_1_3_2)
{ after(grammarAccess.getDeclaratorSuffixAccess().getStarAssignment_1_3_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DeclaratorSuffix__Group_1_3__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclaratorSuffix__Group_1_3__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaratorSuffix__Group_1_3__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDeclaratorSuffixAccess().getRIGHTBRACKETTerminalRuleCall_1_3_3()); }
	RULE_RIGHTBRACKET
{ after(grammarAccess.getDeclaratorSuffixAccess().getRIGHTBRACKETTerminalRuleCall_1_3_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}










rule__DirectDeclaratorLastSuffix__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DirectDeclaratorLastSuffix__Group__0__Impl
	rule__DirectDeclaratorLastSuffix__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectDeclaratorLastSuffix__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDirectDeclaratorLastSuffixAccess().getDirectDeclaratorLastSuffixAction_0()); }
(

)
{ after(grammarAccess.getDirectDeclaratorLastSuffixAccess().getDirectDeclaratorLastSuffixAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DirectDeclaratorLastSuffix__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DirectDeclaratorLastSuffix__Group__1__Impl
	rule__DirectDeclaratorLastSuffix__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectDeclaratorLastSuffix__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDirectDeclaratorLastSuffixAccess().getLEFTPARENTerminalRuleCall_1()); }
	RULE_LEFTPAREN
{ after(grammarAccess.getDirectDeclaratorLastSuffixAccess().getLEFTPARENTerminalRuleCall_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DirectDeclaratorLastSuffix__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DirectDeclaratorLastSuffix__Group__2__Impl
	rule__DirectDeclaratorLastSuffix__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectDeclaratorLastSuffix__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDirectDeclaratorLastSuffixAccess().getAlternatives_2()); }
(rule__DirectDeclaratorLastSuffix__Alternatives_2)
{ after(grammarAccess.getDirectDeclaratorLastSuffixAccess().getAlternatives_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DirectDeclaratorLastSuffix__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DirectDeclaratorLastSuffix__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectDeclaratorLastSuffix__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDirectDeclaratorLastSuffixAccess().getRIGHTPARENTerminalRuleCall_3()); }
	RULE_RIGHTPAREN
{ after(grammarAccess.getDirectDeclaratorLastSuffixAccess().getRIGHTPARENTerminalRuleCall_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}










rule__Pointer__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pointer__Group__0__Impl
	rule__Pointer__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pointer__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPointerAccess().getPointerAction_0()); }
(

)
{ after(grammarAccess.getPointerAccess().getPointerAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Pointer__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pointer__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pointer__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPointerAccess().getGroup_1()); }
(rule__Pointer__Group_1__0)*
{ after(grammarAccess.getPointerAccess().getGroup_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__Pointer__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pointer__Group_1__0__Impl
	rule__Pointer__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pointer__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPointerAccess().getAlternatives_1_0()); }
(rule__Pointer__Alternatives_1_0)
{ after(grammarAccess.getPointerAccess().getAlternatives_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Pointer__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pointer__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pointer__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPointerAccess().getTypeQualifierListAssignment_1_1()); }
(rule__Pointer__TypeQualifierListAssignment_1_1)?
{ after(grammarAccess.getPointerAccess().getTypeQualifierListAssignment_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__TypeQualifierList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeQualifierList__Group__0__Impl
	rule__TypeQualifierList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeQualifierList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getTypeQualifierListAccess().getTypeQualifierListAction_0()); }
(

)
{ after(grammarAccess.getTypeQualifierListAccess().getTypeQualifierListAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__TypeQualifierList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeQualifierList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeQualifierList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
(
{ before(grammarAccess.getTypeQualifierListAccess().getTypeQualifierAssignment_1()); }
(rule__TypeQualifierList__TypeQualifierAssignment_1)
{ after(grammarAccess.getTypeQualifierListAccess().getTypeQualifierAssignment_1()); }
)
(
{ before(grammarAccess.getTypeQualifierListAccess().getTypeQualifierAssignment_1()); }
(rule__TypeQualifierList__TypeQualifierAssignment_1)*
{ after(grammarAccess.getTypeQualifierListAccess().getTypeQualifierAssignment_1()); }
)
)



;
finally {
	restoreStackSize(stackSize);
}






rule__ParameterTypeList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterTypeList__Group__0__Impl
	rule__ParameterTypeList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterTypeList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getParameterTypeListAccess().getParameterTypeListAction_0()); }
(

)
{ after(grammarAccess.getParameterTypeListAccess().getParameterTypeListAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterTypeList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterTypeList__Group__1__Impl
	rule__ParameterTypeList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterTypeList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getParameterTypeListAccess().getListAssignment_1()); }
(rule__ParameterTypeList__ListAssignment_1)
{ after(grammarAccess.getParameterTypeListAccess().getListAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterTypeList__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterTypeList__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterTypeList__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getParameterTypeListAccess().getGroup_2()); }
(rule__ParameterTypeList__Group_2__0)?
{ after(grammarAccess.getParameterTypeListAccess().getGroup_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__ParameterTypeList__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterTypeList__Group_2__0__Impl
	rule__ParameterTypeList__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterTypeList__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getParameterTypeListAccess().getCOMMATerminalRuleCall_2_0()); }
	RULE_COMMA
{ after(grammarAccess.getParameterTypeListAccess().getCOMMATerminalRuleCall_2_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterTypeList__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterTypeList__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterTypeList__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getParameterTypeListAccess().getELLIPSISTerminalRuleCall_2_1()); }
	RULE_ELLIPSIS
{ after(grammarAccess.getParameterTypeListAccess().getELLIPSISTerminalRuleCall_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__ParameterList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterList__Group__0__Impl
	rule__ParameterList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getParameterListAccess().getParameterListAction_0()); }
(

)
{ after(grammarAccess.getParameterListAccess().getParameterListAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterList__Group__1__Impl
	rule__ParameterList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getParameterListAccess().getParameterDeclarationAssignment_1()); }
(rule__ParameterList__ParameterDeclarationAssignment_1)
{ after(grammarAccess.getParameterListAccess().getParameterDeclarationAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterList__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterList__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getParameterListAccess().getGroup_2()); }
(rule__ParameterList__Group_2__0)*
{ after(grammarAccess.getParameterListAccess().getGroup_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__ParameterList__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterList__Group_2__0__Impl
	rule__ParameterList__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getParameterListAccess().getCOMMATerminalRuleCall_2_0()); }
	RULE_COMMA
{ after(grammarAccess.getParameterListAccess().getCOMMATerminalRuleCall_2_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterList__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterList__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getParameterListAccess().getParameterDeclarationAssignment_2_1()); }
(rule__ParameterList__ParameterDeclarationAssignment_2_1)
{ after(grammarAccess.getParameterListAccess().getParameterDeclarationAssignment_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__ParameterDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterDeclaration__Group__0__Impl
	rule__ParameterDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getParameterDeclarationAccess().getParameterDeclarationAction_0()); }
(

)
{ after(grammarAccess.getParameterDeclarationAccess().getParameterDeclarationAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterDeclaration__Group__1__Impl
	rule__ParameterDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getParameterDeclarationAccess().getDeclSpecifiersAssignment_1()); }
(rule__ParameterDeclaration__DeclSpecifiersAssignment_1)
{ after(grammarAccess.getParameterDeclarationAccess().getDeclSpecifiersAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterDeclaration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getParameterDeclarationAccess().getDeclaratorAssignment_2()); }
(rule__ParameterDeclaration__DeclaratorAssignment_2)?
{ after(grammarAccess.getParameterDeclarationAccess().getDeclaratorAssignment_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__IdentifierList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IdentifierList__Group__0__Impl
	rule__IdentifierList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIdentifierListAccess().getIdentifierListAction_0()); }
(

)
{ after(grammarAccess.getIdentifierListAccess().getIdentifierListAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IdentifierList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IdentifierList__Group__1__Impl
	rule__IdentifierList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIdentifierListAccess().getIdAssignment_1()); }
(rule__IdentifierList__IdAssignment_1)
{ after(grammarAccess.getIdentifierListAccess().getIdAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IdentifierList__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IdentifierList__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIdentifierListAccess().getGroup_2()); }
(rule__IdentifierList__Group_2__0)*
{ after(grammarAccess.getIdentifierListAccess().getGroup_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__IdentifierList__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IdentifierList__Group_2__0__Impl
	rule__IdentifierList__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIdentifierListAccess().getCOMMATerminalRuleCall_2_0()); }
	RULE_COMMA
{ after(grammarAccess.getIdentifierListAccess().getCOMMATerminalRuleCall_2_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IdentifierList__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IdentifierList__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIdentifierListAccess().getIdAssignment_2_1()); }
(rule__IdentifierList__IdAssignment_2_1)
{ after(grammarAccess.getIdentifierListAccess().getIdAssignment_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__MyIdentifier__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyIdentifier__Group__0__Impl
	rule__MyIdentifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MyIdentifier__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getMyIdentifierAccess().getMyIdentifierAction_0()); }
(

)
{ after(grammarAccess.getMyIdentifierAccess().getMyIdentifierAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__MyIdentifier__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyIdentifier__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MyIdentifier__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getMyIdentifierAccess().getIdAssignment_1()); }
(rule__MyIdentifier__IdAssignment_1)
{ after(grammarAccess.getMyIdentifierAccess().getIdAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__TypeName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeName__Group__0__Impl
	rule__TypeName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getTypeNameAccess().getTypeNameAction_0()); }
(

)
{ after(grammarAccess.getTypeNameAccess().getTypeNameAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__TypeName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getTypeNameAccess().getListAssignment_1()); }
(rule__TypeName__ListAssignment_1)
{ after(grammarAccess.getTypeNameAccess().getListAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__Initializer__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Initializer__Group__0__Impl
	rule__Initializer__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Initializer__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInitializerAccess().getInitializerAction_0()); }
(

)
{ after(grammarAccess.getInitializerAccess().getInitializerAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Initializer__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Initializer__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Initializer__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInitializerAccess().getAlternatives_1()); }
(rule__Initializer__Alternatives_1)
{ after(grammarAccess.getInitializerAccess().getAlternatives_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__Initializer__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Initializer__Group_1_1__0__Impl
	rule__Initializer__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Initializer__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInitializerAccess().getLEFTBRACETerminalRuleCall_1_1_0()); }
	RULE_LEFTBRACE
{ after(grammarAccess.getInitializerAccess().getLEFTBRACETerminalRuleCall_1_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Initializer__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Initializer__Group_1_1__1__Impl
	rule__Initializer__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Initializer__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInitializerAccess().getListAssignment_1_1_1()); }
(rule__Initializer__ListAssignment_1_1_1)
{ after(grammarAccess.getInitializerAccess().getListAssignment_1_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Initializer__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Initializer__Group_1_1__2__Impl
	rule__Initializer__Group_1_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Initializer__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInitializerAccess().getCOMMATerminalRuleCall_1_1_2()); }
(	RULE_COMMA)?
{ after(grammarAccess.getInitializerAccess().getCOMMATerminalRuleCall_1_1_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Initializer__Group_1_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Initializer__Group_1_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Initializer__Group_1_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInitializerAccess().getRIGHTBRACETerminalRuleCall_1_1_3()); }
	RULE_RIGHTBRACE
{ after(grammarAccess.getInitializerAccess().getRIGHTBRACETerminalRuleCall_1_1_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}










rule__InitializerList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InitializerList__Group__0__Impl
	rule__InitializerList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InitializerList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInitializerListAccess().getInitializerListAction_0()); }
(

)
{ after(grammarAccess.getInitializerListAccess().getInitializerListAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__InitializerList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InitializerList__Group__1__Impl
	rule__InitializerList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InitializerList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInitializerListAccess().getInitializerAssignment_1()); }
(rule__InitializerList__InitializerAssignment_1)
{ after(grammarAccess.getInitializerListAccess().getInitializerAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__InitializerList__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InitializerList__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InitializerList__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInitializerListAccess().getGroup_2()); }
(rule__InitializerList__Group_2__0)*
{ after(grammarAccess.getInitializerListAccess().getGroup_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__InitializerList__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InitializerList__Group_2__0__Impl
	rule__InitializerList__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InitializerList__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInitializerListAccess().getCOMMATerminalRuleCall_2_0()); }
	RULE_COMMA
{ after(grammarAccess.getInitializerListAccess().getCOMMATerminalRuleCall_2_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__InitializerList__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InitializerList__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InitializerList__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInitializerListAccess().getInitializerAssignment_2_1()); }
(rule__InitializerList__InitializerAssignment_2_1)
{ after(grammarAccess.getInitializerListAccess().getInitializerAssignment_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__BlockList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockList__Group__0__Impl
	rule__BlockList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getBlockListAccess().getBlockListAction_0()); }
(

)
{ after(grammarAccess.getBlockListAccess().getBlockListAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__BlockList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
(
{ before(grammarAccess.getBlockListAccess().getAlternatives_1()); }
(rule__BlockList__Alternatives_1)
{ after(grammarAccess.getBlockListAccess().getAlternatives_1()); }
)
(
{ before(grammarAccess.getBlockListAccess().getAlternatives_1()); }
(rule__BlockList__Alternatives_1)*
{ after(grammarAccess.getBlockListAccess().getAlternatives_1()); }
)
)



;
finally {
	restoreStackSize(stackSize);
}






rule__Statement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group__0__Impl
	rule__Statement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getStatementAccess().getStatementAction_0()); }
(

)
{ after(grammarAccess.getStatementAccess().getStatementAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getStatementAccess().getAlternatives_1()); }
(rule__Statement__Alternatives_1)
{ after(grammarAccess.getStatementAccess().getAlternatives_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__LabeledStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LabeledStatement__Group__0__Impl
	rule__LabeledStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLabeledStatementAccess().getLabeledStatementAction_0()); }
(

)
{ after(grammarAccess.getLabeledStatementAccess().getLabeledStatementAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__LabeledStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LabeledStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLabeledStatementAccess().getAlternatives_1()); }
(rule__LabeledStatement__Alternatives_1)
{ after(grammarAccess.getLabeledStatementAccess().getAlternatives_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__LabeledStatement__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LabeledStatement__Group_1_0__0__Impl
	rule__LabeledStatement__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledStatement__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLabeledStatementAccess().getIdAssignment_1_0_0()); }
(rule__LabeledStatement__IdAssignment_1_0_0)
{ after(grammarAccess.getLabeledStatementAccess().getIdAssignment_1_0_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__LabeledStatement__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LabeledStatement__Group_1_0__1__Impl
	rule__LabeledStatement__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledStatement__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLabeledStatementAccess().getCOLONTerminalRuleCall_1_0_1()); }
	RULE_COLON
{ after(grammarAccess.getLabeledStatementAccess().getCOLONTerminalRuleCall_1_0_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__LabeledStatement__Group_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LabeledStatement__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledStatement__Group_1_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLabeledStatementAccess().getLStmtAssignment_1_0_2()); }
(rule__LabeledStatement__LStmtAssignment_1_0_2)
{ after(grammarAccess.getLabeledStatementAccess().getLStmtAssignment_1_0_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__LabeledStatement__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LabeledStatement__Group_1_1__0__Impl
	rule__LabeledStatement__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledStatement__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLabeledStatementAccess().getCaseAssignment_1_1_0()); }
(rule__LabeledStatement__CaseAssignment_1_1_0)
{ after(grammarAccess.getLabeledStatementAccess().getCaseAssignment_1_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__LabeledStatement__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LabeledStatement__Group_1_1__1__Impl
	rule__LabeledStatement__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledStatement__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLabeledStatementAccess().getExprAssignment_1_1_1()); }
(rule__LabeledStatement__ExprAssignment_1_1_1)
{ after(grammarAccess.getLabeledStatementAccess().getExprAssignment_1_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__LabeledStatement__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LabeledStatement__Group_1_1__2__Impl
	rule__LabeledStatement__Group_1_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledStatement__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLabeledStatementAccess().getCOLONTerminalRuleCall_1_1_2()); }
	RULE_COLON
{ after(grammarAccess.getLabeledStatementAccess().getCOLONTerminalRuleCall_1_1_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__LabeledStatement__Group_1_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LabeledStatement__Group_1_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledStatement__Group_1_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLabeledStatementAccess().getLStmtAssignment_1_1_3()); }
(rule__LabeledStatement__LStmtAssignment_1_1_3)
{ after(grammarAccess.getLabeledStatementAccess().getLStmtAssignment_1_1_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}










rule__LabeledStatement__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LabeledStatement__Group_1_2__0__Impl
	rule__LabeledStatement__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledStatement__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLabeledStatementAccess().getDefaultAssignment_1_2_0()); }
(rule__LabeledStatement__DefaultAssignment_1_2_0)
{ after(grammarAccess.getLabeledStatementAccess().getDefaultAssignment_1_2_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__LabeledStatement__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LabeledStatement__Group_1_2__1__Impl
	rule__LabeledStatement__Group_1_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledStatement__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLabeledStatementAccess().getCOLONTerminalRuleCall_1_2_1()); }
	RULE_COLON
{ after(grammarAccess.getLabeledStatementAccess().getCOLONTerminalRuleCall_1_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__LabeledStatement__Group_1_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LabeledStatement__Group_1_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledStatement__Group_1_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLabeledStatementAccess().getLStmtAssignment_1_2_2()); }
(rule__LabeledStatement__LStmtAssignment_1_2_2)
{ after(grammarAccess.getLabeledStatementAccess().getLStmtAssignment_1_2_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__CompoundStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompoundStatement__Group__0__Impl
	rule__CompoundStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getCompoundStatementAccess().getCompoundStatementAction_0()); }
(

)
{ after(grammarAccess.getCompoundStatementAccess().getCompoundStatementAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__CompoundStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompoundStatement__Group__1__Impl
	rule__CompoundStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getCompoundStatementAccess().getLEFTBRACETerminalRuleCall_1()); }
	RULE_LEFTBRACE
{ after(grammarAccess.getCompoundStatementAccess().getLEFTBRACETerminalRuleCall_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__CompoundStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompoundStatement__Group__2__Impl
	rule__CompoundStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getCompoundStatementAccess().getBodyAssignment_2()); }
(rule__CompoundStatement__BodyAssignment_2)
{ after(grammarAccess.getCompoundStatementAccess().getBodyAssignment_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__CompoundStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompoundStatement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getCompoundStatementAccess().getRIGHTBRACETerminalRuleCall_3()); }
	RULE_RIGHTBRACE
{ after(grammarAccess.getCompoundStatementAccess().getRIGHTBRACETerminalRuleCall_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}










rule__BodyStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BodyStatement__Group__0__Impl
	rule__BodyStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BodyStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getBodyStatementAccess().getBodyStatementAction_0()); }
(

)
{ after(grammarAccess.getBodyStatementAccess().getBodyStatementAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__BodyStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BodyStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BodyStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getBodyStatementAccess().getBlockListAssignment_1()); }
(rule__BodyStatement__BlockListAssignment_1)?
{ after(grammarAccess.getBodyStatementAccess().getBlockListAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__ExpressionStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionStatement__Group__0__Impl
	rule__ExpressionStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getExpressionStatementAccess().getExpressionStatementAction_0()); }
(

)
{ after(grammarAccess.getExpressionStatementAccess().getExpressionStatementAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionStatement__Group__1__Impl
	rule__ExpressionStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getExpressionStatementAccess().getExpressionAssignment_1()); }
(rule__ExpressionStatement__ExpressionAssignment_1)?
{ after(grammarAccess.getExpressionStatementAccess().getExpressionAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getExpressionStatementAccess().getSemiAssignment_2()); }
(rule__ExpressionStatement__SemiAssignment_2)
{ after(grammarAccess.getExpressionStatementAccess().getSemiAssignment_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__SelectionStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectionStatement__Group__0__Impl
	rule__SelectionStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getSelectionStatementAccess().getSelectionStatementAction_0()); }
(

)
{ after(grammarAccess.getSelectionStatementAccess().getSelectionStatementAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__SelectionStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectionStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getSelectionStatementAccess().getAlternatives_1()); }
(rule__SelectionStatement__Alternatives_1)
{ after(grammarAccess.getSelectionStatementAccess().getAlternatives_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__SelectionStatement__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectionStatement__Group_1_0__0__Impl
	rule__SelectionStatement__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionStatement__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getSelectionStatementAccess().getIfAssignment_1_0_0()); }
(rule__SelectionStatement__IfAssignment_1_0_0)
{ after(grammarAccess.getSelectionStatementAccess().getIfAssignment_1_0_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__SelectionStatement__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectionStatement__Group_1_0__1__Impl
	rule__SelectionStatement__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionStatement__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getSelectionStatementAccess().getLEFTPARENTerminalRuleCall_1_0_1()); }
	RULE_LEFTPAREN
{ after(grammarAccess.getSelectionStatementAccess().getLEFTPARENTerminalRuleCall_1_0_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__SelectionStatement__Group_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectionStatement__Group_1_0__2__Impl
	rule__SelectionStatement__Group_1_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionStatement__Group_1_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getSelectionStatementAccess().getExprAssignment_1_0_2()); }
(rule__SelectionStatement__ExprAssignment_1_0_2)
{ after(grammarAccess.getSelectionStatementAccess().getExprAssignment_1_0_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__SelectionStatement__Group_1_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectionStatement__Group_1_0__3__Impl
	rule__SelectionStatement__Group_1_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionStatement__Group_1_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getSelectionStatementAccess().getRIGHTPARENTerminalRuleCall_1_0_3()); }
	RULE_RIGHTPAREN
{ after(grammarAccess.getSelectionStatementAccess().getRIGHTPARENTerminalRuleCall_1_0_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__SelectionStatement__Group_1_0__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectionStatement__Group_1_0__4__Impl
	rule__SelectionStatement__Group_1_0__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionStatement__Group_1_0__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getSelectionStatementAccess().getIfStatementAssignment_1_0_4()); }
(rule__SelectionStatement__IfStatementAssignment_1_0_4)
{ after(grammarAccess.getSelectionStatementAccess().getIfStatementAssignment_1_0_4()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__SelectionStatement__Group_1_0__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectionStatement__Group_1_0__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionStatement__Group_1_0__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getSelectionStatementAccess().getGroup_1_0_5()); }
(rule__SelectionStatement__Group_1_0_5__0)?
{ after(grammarAccess.getSelectionStatementAccess().getGroup_1_0_5()); }
)



;
finally {
	restoreStackSize(stackSize);
}














rule__SelectionStatement__Group_1_0_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectionStatement__Group_1_0_5__0__Impl
	rule__SelectionStatement__Group_1_0_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionStatement__Group_1_0_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getSelectionStatementAccess().getElseAssignment_1_0_5_0()); }
(rule__SelectionStatement__ElseAssignment_1_0_5_0)
{ after(grammarAccess.getSelectionStatementAccess().getElseAssignment_1_0_5_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__SelectionStatement__Group_1_0_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectionStatement__Group_1_0_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionStatement__Group_1_0_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getSelectionStatementAccess().getElseStatementAssignment_1_0_5_1()); }
(rule__SelectionStatement__ElseStatementAssignment_1_0_5_1)
{ after(grammarAccess.getSelectionStatementAccess().getElseStatementAssignment_1_0_5_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__SelectionStatement__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectionStatement__Group_1_1__0__Impl
	rule__SelectionStatement__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionStatement__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getSelectionStatementAccess().getSwitchAssignment_1_1_0()); }
(rule__SelectionStatement__SwitchAssignment_1_1_0)
{ after(grammarAccess.getSelectionStatementAccess().getSwitchAssignment_1_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__SelectionStatement__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectionStatement__Group_1_1__1__Impl
	rule__SelectionStatement__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionStatement__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getSelectionStatementAccess().getLEFTPARENTerminalRuleCall_1_1_1()); }
	RULE_LEFTPAREN
{ after(grammarAccess.getSelectionStatementAccess().getLEFTPARENTerminalRuleCall_1_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__SelectionStatement__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectionStatement__Group_1_1__2__Impl
	rule__SelectionStatement__Group_1_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionStatement__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getSelectionStatementAccess().getExprAssignment_1_1_2()); }
(rule__SelectionStatement__ExprAssignment_1_1_2)
{ after(grammarAccess.getSelectionStatementAccess().getExprAssignment_1_1_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__SelectionStatement__Group_1_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectionStatement__Group_1_1__3__Impl
	rule__SelectionStatement__Group_1_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionStatement__Group_1_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getSelectionStatementAccess().getRIGHTPARENTerminalRuleCall_1_1_3()); }
	RULE_RIGHTPAREN
{ after(grammarAccess.getSelectionStatementAccess().getRIGHTPARENTerminalRuleCall_1_1_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__SelectionStatement__Group_1_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectionStatement__Group_1_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionStatement__Group_1_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getSelectionStatementAccess().getSwitchStatementAssignment_1_1_4()); }
(rule__SelectionStatement__SwitchStatementAssignment_1_1_4)
{ after(grammarAccess.getSelectionStatementAccess().getSwitchStatementAssignment_1_1_4()); }
)



;
finally {
	restoreStackSize(stackSize);
}












rule__IterationStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group__0__Impl
	rule__IterationStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIterationStatementAccess().getIterationStatementAction_0()); }
(

)
{ after(grammarAccess.getIterationStatementAccess().getIterationStatementAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IterationStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIterationStatementAccess().getAlternatives_1()); }
(rule__IterationStatement__Alternatives_1)
{ after(grammarAccess.getIterationStatementAccess().getAlternatives_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__IterationStatement__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_1_0__0__Impl
	rule__IterationStatement__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIterationStatementAccess().getWhileAssignment_1_0_0()); }
(rule__IterationStatement__WhileAssignment_1_0_0)
{ after(grammarAccess.getIterationStatementAccess().getWhileAssignment_1_0_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IterationStatement__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_1_0__1__Impl
	rule__IterationStatement__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIterationStatementAccess().getLEFTPARENTerminalRuleCall_1_0_1()); }
	RULE_LEFTPAREN
{ after(grammarAccess.getIterationStatementAccess().getLEFTPARENTerminalRuleCall_1_0_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IterationStatement__Group_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_1_0__2__Impl
	rule__IterationStatement__Group_1_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_1_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIterationStatementAccess().getExprAssignment_1_0_2()); }
(rule__IterationStatement__ExprAssignment_1_0_2)
{ after(grammarAccess.getIterationStatementAccess().getExprAssignment_1_0_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IterationStatement__Group_1_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_1_0__3__Impl
	rule__IterationStatement__Group_1_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_1_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIterationStatementAccess().getRIGHTPARENTerminalRuleCall_1_0_3()); }
	RULE_RIGHTPAREN
{ after(grammarAccess.getIterationStatementAccess().getRIGHTPARENTerminalRuleCall_1_0_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IterationStatement__Group_1_0__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_1_0__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_1_0__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIterationStatementAccess().getStatementAssignment_1_0_4()); }
(rule__IterationStatement__StatementAssignment_1_0_4)
{ after(grammarAccess.getIterationStatementAccess().getStatementAssignment_1_0_4()); }
)



;
finally {
	restoreStackSize(stackSize);
}












rule__IterationStatement__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_1_1__0__Impl
	rule__IterationStatement__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIterationStatementAccess().getDoAssignment_1_1_0()); }
(rule__IterationStatement__DoAssignment_1_1_0)
{ after(grammarAccess.getIterationStatementAccess().getDoAssignment_1_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IterationStatement__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_1_1__1__Impl
	rule__IterationStatement__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIterationStatementAccess().getStatementAssignment_1_1_1()); }
(rule__IterationStatement__StatementAssignment_1_1_1)
{ after(grammarAccess.getIterationStatementAccess().getStatementAssignment_1_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IterationStatement__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_1_1__2__Impl
	rule__IterationStatement__Group_1_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIterationStatementAccess().getKW_WHILETerminalRuleCall_1_1_2()); }
	RULE_KW_WHILE
{ after(grammarAccess.getIterationStatementAccess().getKW_WHILETerminalRuleCall_1_1_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IterationStatement__Group_1_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_1_1__3__Impl
	rule__IterationStatement__Group_1_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_1_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIterationStatementAccess().getLEFTPARENTerminalRuleCall_1_1_3()); }
	RULE_LEFTPAREN
{ after(grammarAccess.getIterationStatementAccess().getLEFTPARENTerminalRuleCall_1_1_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IterationStatement__Group_1_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_1_1__4__Impl
	rule__IterationStatement__Group_1_1__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_1_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIterationStatementAccess().getExprAssignment_1_1_4()); }
(rule__IterationStatement__ExprAssignment_1_1_4)
{ after(grammarAccess.getIterationStatementAccess().getExprAssignment_1_1_4()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IterationStatement__Group_1_1__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_1_1__5__Impl
	rule__IterationStatement__Group_1_1__6
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_1_1__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIterationStatementAccess().getRIGHTPARENTerminalRuleCall_1_1_5()); }
	RULE_RIGHTPAREN
{ after(grammarAccess.getIterationStatementAccess().getRIGHTPARENTerminalRuleCall_1_1_5()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IterationStatement__Group_1_1__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_1_1__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_1_1__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIterationStatementAccess().getSemiAssignment_1_1_6()); }
(rule__IterationStatement__SemiAssignment_1_1_6)
{ after(grammarAccess.getIterationStatementAccess().getSemiAssignment_1_1_6()); }
)



;
finally {
	restoreStackSize(stackSize);
}
















rule__IterationStatement__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_1_2__0__Impl
	rule__IterationStatement__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIterationStatementAccess().getForAssignment_1_2_0()); }
(rule__IterationStatement__ForAssignment_1_2_0)
{ after(grammarAccess.getIterationStatementAccess().getForAssignment_1_2_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IterationStatement__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_1_2__1__Impl
	rule__IterationStatement__Group_1_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIterationStatementAccess().getLEFTPARENTerminalRuleCall_1_2_1()); }
	RULE_LEFTPAREN
{ after(grammarAccess.getIterationStatementAccess().getLEFTPARENTerminalRuleCall_1_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IterationStatement__Group_1_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_1_2__2__Impl
	rule__IterationStatement__Group_1_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_1_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIterationStatementAccess().getInitExprAssignment_1_2_2()); }
(rule__IterationStatement__InitExprAssignment_1_2_2)?
{ after(grammarAccess.getIterationStatementAccess().getInitExprAssignment_1_2_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IterationStatement__Group_1_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_1_2__3__Impl
	rule__IterationStatement__Group_1_2__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_1_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIterationStatementAccess().getSEMITerminalRuleCall_1_2_3()); }
	RULE_SEMI
{ after(grammarAccess.getIterationStatementAccess().getSEMITerminalRuleCall_1_2_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IterationStatement__Group_1_2__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_1_2__4__Impl
	rule__IterationStatement__Group_1_2__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_1_2__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIterationStatementAccess().getExprAssignment_1_2_4()); }
(rule__IterationStatement__ExprAssignment_1_2_4)?
{ after(grammarAccess.getIterationStatementAccess().getExprAssignment_1_2_4()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IterationStatement__Group_1_2__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_1_2__5__Impl
	rule__IterationStatement__Group_1_2__6
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_1_2__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIterationStatementAccess().getSEMITerminalRuleCall_1_2_5()); }
	RULE_SEMI
{ after(grammarAccess.getIterationStatementAccess().getSEMITerminalRuleCall_1_2_5()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IterationStatement__Group_1_2__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_1_2__6__Impl
	rule__IterationStatement__Group_1_2__7
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_1_2__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIterationStatementAccess().getIncExprAssignment_1_2_6()); }
(rule__IterationStatement__IncExprAssignment_1_2_6)?
{ after(grammarAccess.getIterationStatementAccess().getIncExprAssignment_1_2_6()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IterationStatement__Group_1_2__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_1_2__7__Impl
	rule__IterationStatement__Group_1_2__8
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_1_2__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIterationStatementAccess().getRIGHTPARENTerminalRuleCall_1_2_7()); }
	RULE_RIGHTPAREN
{ after(grammarAccess.getIterationStatementAccess().getRIGHTPARENTerminalRuleCall_1_2_7()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IterationStatement__Group_1_2__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_1_2__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_1_2__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIterationStatementAccess().getStatementAssignment_1_2_8()); }
(rule__IterationStatement__StatementAssignment_1_2_8)
{ after(grammarAccess.getIterationStatementAccess().getStatementAssignment_1_2_8()); }
)



;
finally {
	restoreStackSize(stackSize);
}




















rule__IterationStatement__Group_1_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_1_3__0__Impl
	rule__IterationStatement__Group_1_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_1_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIterationStatementAccess().getForAssignment_1_3_0()); }
(rule__IterationStatement__ForAssignment_1_3_0)
{ after(grammarAccess.getIterationStatementAccess().getForAssignment_1_3_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IterationStatement__Group_1_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_1_3__1__Impl
	rule__IterationStatement__Group_1_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_1_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIterationStatementAccess().getLEFTPARENTerminalRuleCall_1_3_1()); }
	RULE_LEFTPAREN
{ after(grammarAccess.getIterationStatementAccess().getLEFTPARENTerminalRuleCall_1_3_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IterationStatement__Group_1_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_1_3__2__Impl
	rule__IterationStatement__Group_1_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_1_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIterationStatementAccess().getInitDeclAssignment_1_3_2()); }
(rule__IterationStatement__InitDeclAssignment_1_3_2)
{ after(grammarAccess.getIterationStatementAccess().getInitDeclAssignment_1_3_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IterationStatement__Group_1_3__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_1_3__3__Impl
	rule__IterationStatement__Group_1_3__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_1_3__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIterationStatementAccess().getExprAssignment_1_3_3()); }
(rule__IterationStatement__ExprAssignment_1_3_3)?
{ after(grammarAccess.getIterationStatementAccess().getExprAssignment_1_3_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IterationStatement__Group_1_3__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_1_3__4__Impl
	rule__IterationStatement__Group_1_3__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_1_3__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIterationStatementAccess().getSEMITerminalRuleCall_1_3_4()); }
	RULE_SEMI
{ after(grammarAccess.getIterationStatementAccess().getSEMITerminalRuleCall_1_3_4()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IterationStatement__Group_1_3__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_1_3__5__Impl
	rule__IterationStatement__Group_1_3__6
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_1_3__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIterationStatementAccess().getIncExprAssignment_1_3_5()); }
(rule__IterationStatement__IncExprAssignment_1_3_5)?
{ after(grammarAccess.getIterationStatementAccess().getIncExprAssignment_1_3_5()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IterationStatement__Group_1_3__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_1_3__6__Impl
	rule__IterationStatement__Group_1_3__7
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_1_3__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIterationStatementAccess().getRIGHTPARENTerminalRuleCall_1_3_6()); }
	RULE_RIGHTPAREN
{ after(grammarAccess.getIterationStatementAccess().getRIGHTPARENTerminalRuleCall_1_3_6()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IterationStatement__Group_1_3__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_1_3__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_1_3__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIterationStatementAccess().getStatementAssignment_1_3_7()); }
(rule__IterationStatement__StatementAssignment_1_3_7)
{ after(grammarAccess.getIterationStatementAccess().getStatementAssignment_1_3_7()); }
)



;
finally {
	restoreStackSize(stackSize);
}


















rule__JumpStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JumpStatement__Group__0__Impl
	rule__JumpStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JumpStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getJumpStatementAccess().getJumpStatementAction_0()); }
(

)
{ after(grammarAccess.getJumpStatementAccess().getJumpStatementAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__JumpStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JumpStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JumpStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getJumpStatementAccess().getAlternatives_1()); }
(rule__JumpStatement__Alternatives_1)
{ after(grammarAccess.getJumpStatementAccess().getAlternatives_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__JumpStatement__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JumpStatement__Group_1_0__0__Impl
	rule__JumpStatement__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JumpStatement__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getJumpStatementAccess().getContinueAssignment_1_0_0()); }
(rule__JumpStatement__ContinueAssignment_1_0_0)
{ after(grammarAccess.getJumpStatementAccess().getContinueAssignment_1_0_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__JumpStatement__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JumpStatement__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JumpStatement__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getJumpStatementAccess().getSemiAssignment_1_0_1()); }
(rule__JumpStatement__SemiAssignment_1_0_1)
{ after(grammarAccess.getJumpStatementAccess().getSemiAssignment_1_0_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__JumpStatement__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JumpStatement__Group_1_1__0__Impl
	rule__JumpStatement__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JumpStatement__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getJumpStatementAccess().getBreakAssignment_1_1_0()); }
(rule__JumpStatement__BreakAssignment_1_1_0)
{ after(grammarAccess.getJumpStatementAccess().getBreakAssignment_1_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__JumpStatement__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JumpStatement__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JumpStatement__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getJumpStatementAccess().getSemiAssignment_1_1_1()); }
(rule__JumpStatement__SemiAssignment_1_1_1)
{ after(grammarAccess.getJumpStatementAccess().getSemiAssignment_1_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__JumpStatement__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JumpStatement__Group_1_2__0__Impl
	rule__JumpStatement__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JumpStatement__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getJumpStatementAccess().getReturnAssignment_1_2_0()); }
(rule__JumpStatement__ReturnAssignment_1_2_0)
{ after(grammarAccess.getJumpStatementAccess().getReturnAssignment_1_2_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__JumpStatement__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JumpStatement__Group_1_2__1__Impl
	rule__JumpStatement__Group_1_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__JumpStatement__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getJumpStatementAccess().getExprAssignment_1_2_1()); }
(rule__JumpStatement__ExprAssignment_1_2_1)?
{ after(grammarAccess.getJumpStatementAccess().getExprAssignment_1_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__JumpStatement__Group_1_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JumpStatement__Group_1_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JumpStatement__Group_1_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getJumpStatementAccess().getSemiAssignment_1_2_2()); }
(rule__JumpStatement__SemiAssignment_1_2_2)
{ after(grammarAccess.getJumpStatementAccess().getSemiAssignment_1_2_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__JumpStatement__Group_1_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JumpStatement__Group_1_3__0__Impl
	rule__JumpStatement__Group_1_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JumpStatement__Group_1_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getJumpStatementAccess().getGotoAssignment_1_3_0()); }
(rule__JumpStatement__GotoAssignment_1_3_0)
{ after(grammarAccess.getJumpStatementAccess().getGotoAssignment_1_3_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__JumpStatement__Group_1_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JumpStatement__Group_1_3__1__Impl
	rule__JumpStatement__Group_1_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__JumpStatement__Group_1_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getJumpStatementAccess().getExprAssignment_1_3_1()); }
(rule__JumpStatement__ExprAssignment_1_3_1)
{ after(grammarAccess.getJumpStatementAccess().getExprAssignment_1_3_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__JumpStatement__Group_1_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JumpStatement__Group_1_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JumpStatement__Group_1_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getJumpStatementAccess().getSemiAssignment_1_3_2()); }
(rule__JumpStatement__SemiAssignment_1_3_2)
{ after(grammarAccess.getJumpStatementAccess().getSemiAssignment_1_3_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__AsmStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AsmStatement__Group__0__Impl
	rule__AsmStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AsmStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAsmStatementAccess().getAsmStatementAction_0()); }
(

)
{ after(grammarAccess.getAsmStatementAccess().getAsmStatementAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__AsmStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AsmStatement__Group__1__Impl
	rule__AsmStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AsmStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAsmStatementAccess().getAlternatives_1()); }
(rule__AsmStatement__Alternatives_1)
{ after(grammarAccess.getAsmStatementAccess().getAlternatives_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__AsmStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AsmStatement__Group__2__Impl
	rule__AsmStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AsmStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAsmStatementAccess().getAlternatives_2()); }
(rule__AsmStatement__Alternatives_2)?
{ after(grammarAccess.getAsmStatementAccess().getAlternatives_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__AsmStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AsmStatement__Group__3__Impl
	rule__AsmStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AsmStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAsmStatementAccess().getLEFTPARENTerminalRuleCall_3()); }
	RULE_LEFTPAREN
{ after(grammarAccess.getAsmStatementAccess().getLEFTPARENTerminalRuleCall_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__AsmStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AsmStatement__Group__4__Impl
	rule__AsmStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__AsmStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
(
{ before(grammarAccess.getAsmStatementAccess().getGroup_4()); }
(rule__AsmStatement__Group_4__0)
{ after(grammarAccess.getAsmStatementAccess().getGroup_4()); }
)
(
{ before(grammarAccess.getAsmStatementAccess().getGroup_4()); }
(rule__AsmStatement__Group_4__0)*
{ after(grammarAccess.getAsmStatementAccess().getGroup_4()); }
)
)



;
finally {
	restoreStackSize(stackSize);
}


rule__AsmStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AsmStatement__Group__5__Impl
	rule__AsmStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__AsmStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAsmStatementAccess().getRIGHTPARENTerminalRuleCall_5()); }
	RULE_RIGHTPAREN
{ after(grammarAccess.getAsmStatementAccess().getRIGHTPARENTerminalRuleCall_5()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__AsmStatement__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AsmStatement__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AsmStatement__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAsmStatementAccess().getSemiAssignment_6()); }
(rule__AsmStatement__SemiAssignment_6)
{ after(grammarAccess.getAsmStatementAccess().getSemiAssignment_6()); }
)



;
finally {
	restoreStackSize(stackSize);
}
















rule__AsmStatement__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AsmStatement__Group_4__0__Impl
	rule__AsmStatement__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AsmStatement__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAsmStatementAccess().getAsmLineAssignment_4_0()); }
(rule__AsmStatement__AsmLineAssignment_4_0)
{ after(grammarAccess.getAsmStatementAccess().getAsmLineAssignment_4_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__AsmStatement__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AsmStatement__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AsmStatement__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAsmStatementAccess().getAsmLineAssignment_4_1()); }
(rule__AsmStatement__AsmLineAssignment_4_1)*
{ after(grammarAccess.getAsmStatementAccess().getAsmLineAssignment_4_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__AsmLineWithColon__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AsmLineWithColon__Group__0__Impl
	rule__AsmLineWithColon__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AsmLineWithColon__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAsmLineWithColonAccess().getAsmLineWithColonAction_0()); }
(

)
{ after(grammarAccess.getAsmLineWithColonAccess().getAsmLineWithColonAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__AsmLineWithColon__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AsmLineWithColon__Group__1__Impl
	rule__AsmLineWithColon__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AsmLineWithColon__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAsmLineWithColonAccess().getColonAssignment_1()); }
(rule__AsmLineWithColon__ColonAssignment_1)?
{ after(grammarAccess.getAsmLineWithColonAccess().getColonAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__AsmLineWithColon__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AsmLineWithColon__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AsmLineWithColon__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAsmLineWithColonAccess().getExprAssignment_2()); }
(rule__AsmLineWithColon__ExprAssignment_2)
{ after(grammarAccess.getAsmLineWithColonAccess().getExprAssignment_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__AsmLineWithComma__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AsmLineWithComma__Group__0__Impl
	rule__AsmLineWithComma__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AsmLineWithComma__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAsmLineWithCommaAccess().getAsmLineWithCommaAction_0()); }
(

)
{ after(grammarAccess.getAsmLineWithCommaAccess().getAsmLineWithCommaAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__AsmLineWithComma__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AsmLineWithComma__Group__1__Impl
	rule__AsmLineWithComma__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AsmLineWithComma__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAsmLineWithCommaAccess().getCOMMATerminalRuleCall_1()); }
	RULE_COMMA
{ after(grammarAccess.getAsmLineWithCommaAccess().getCOMMATerminalRuleCall_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__AsmLineWithComma__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AsmLineWithComma__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AsmLineWithComma__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAsmLineWithCommaAccess().getExprAssignment_2()); }
(rule__AsmLineWithComma__ExprAssignment_2)
{ after(grammarAccess.getAsmLineWithCommaAccess().getExprAssignment_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__Expression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group__0__Impl
	rule__Expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getExpressionAccess().getExpressionAction_0()); }
(

)
{ after(grammarAccess.getExpressionAccess().getExpressionAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group__1__Impl
	rule__Expression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getExpressionAccess().getExprExprAssignment_1()); }
(rule__Expression__ExprExprAssignment_1)
{ after(grammarAccess.getExpressionAccess().getExprExprAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getExpressionAccess().getGroup_2()); }
(rule__Expression__Group_2__0)*
{ after(grammarAccess.getExpressionAccess().getGroup_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__Expression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_2__0__Impl
	rule__Expression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getExpressionAccess().getCOMMATerminalRuleCall_2_0()); }
	RULE_COMMA
{ after(grammarAccess.getExpressionAccess().getCOMMATerminalRuleCall_2_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getExpressionAccess().getExprExprAssignment_2_1()); }
(rule__Expression__ExprExprAssignment_2_1)
{ after(grammarAccess.getExpressionAccess().getExprExprAssignment_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__AssignmentExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentExpression__Group__0__Impl
	rule__AssignmentExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionAction_0()); }
(

)
{ after(grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__AssignmentExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAssignmentExpressionAccess().getAlternatives_1()); }
(rule__AssignmentExpression__Alternatives_1)
{ after(grammarAccess.getAssignmentExpressionAccess().getAlternatives_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__AssignmentExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentExpression__Group_1_0__0__Impl
	rule__AssignmentExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAssignmentExpressionAccess().getExprAssignment_1_0_0()); }
(rule__AssignmentExpression__ExprAssignment_1_0_0)
{ after(grammarAccess.getAssignmentExpressionAccess().getExprAssignment_1_0_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__AssignmentExpression__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentExpression__Group_1_0__1__Impl
	rule__AssignmentExpression__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAssignmentExpressionAccess().getOpAssignment_1_0_1()); }
(rule__AssignmentExpression__OpAssignment_1_0_1)
{ after(grammarAccess.getAssignmentExpressionAccess().getOpAssignment_1_0_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__AssignmentExpression__Group_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentExpression__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__Group_1_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAssignmentExpressionAccess().getAssignmentExprAssignment_1_0_2()); }
(rule__AssignmentExpression__AssignmentExprAssignment_1_0_2)
{ after(grammarAccess.getAssignmentExpressionAccess().getAssignmentExprAssignment_1_0_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__AssignmentOperator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentOperator__Group__0__Impl
	rule__AssignmentOperator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentOperator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAssignmentOperatorAccess().getAssignmentOperatorAction_0()); }
(

)
{ after(grammarAccess.getAssignmentOperatorAccess().getAssignmentOperatorAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__AssignmentOperator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentOperator__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentOperator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAssignmentOperatorAccess().getAlternatives_1()); }
(rule__AssignmentOperator__Alternatives_1)
{ after(grammarAccess.getAssignmentOperatorAccess().getAlternatives_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__ConditionalExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group__0__Impl
	rule__ConditionalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getConditionalExpressionAccess().getConditionalExpressionAction_0()); }
(

)
{ after(grammarAccess.getConditionalExpressionAccess().getConditionalExpressionAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group__1__Impl
	rule__ConditionalExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getConditionalExpressionAccess().getExprAssignment_1()); }
(rule__ConditionalExpression__ExprAssignment_1)
{ after(grammarAccess.getConditionalExpressionAccess().getExprAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getConditionalExpressionAccess().getGroup_2()); }
(rule__ConditionalExpression__Group_2__0)?
{ after(grammarAccess.getConditionalExpressionAccess().getGroup_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__ConditionalExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group_2__0__Impl
	rule__ConditionalExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getConditionalExpressionAccess().getQUESTIONTerminalRuleCall_2_0()); }
	RULE_QUESTION
{ after(grammarAccess.getConditionalExpressionAccess().getQUESTIONTerminalRuleCall_2_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group_2__1__Impl
	rule__ConditionalExpression__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getConditionalExpressionAccess().getQExprAssignment_2_1()); }
(rule__ConditionalExpression__QExprAssignment_2_1)
{ after(grammarAccess.getConditionalExpressionAccess().getQExprAssignment_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group_2__2__Impl
	rule__ConditionalExpression__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getConditionalExpressionAccess().getCOLONTerminalRuleCall_2_2()); }
	RULE_COLON
{ after(grammarAccess.getConditionalExpressionAccess().getCOLONTerminalRuleCall_2_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getConditionalExpressionAccess().getCExprAssignment_2_3()); }
(rule__ConditionalExpression__CExprAssignment_2_3)
{ after(grammarAccess.getConditionalExpressionAccess().getCExprAssignment_2_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}










rule__LogicalOrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group__0__Impl
	rule__LogicalOrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLogicalOrExpressionAccess().getLogicalOrExpressionAction_0()); }
(

)
{ after(grammarAccess.getLogicalOrExpressionAccess().getLogicalOrExpressionAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalOrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group__1__Impl
	rule__LogicalOrExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLogicalOrExpressionAccess().getExprAssignment_1()); }
(rule__LogicalOrExpression__ExprAssignment_1)
{ after(grammarAccess.getLogicalOrExpressionAccess().getExprAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalOrExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLogicalOrExpressionAccess().getGroup_2()); }
(rule__LogicalOrExpression__Group_2__0)*
{ after(grammarAccess.getLogicalOrExpressionAccess().getGroup_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__LogicalOrExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group_2__0__Impl
	rule__LogicalOrExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLogicalOrExpressionAccess().getORORTerminalRuleCall_2_0()); }
	RULE_OROR
{ after(grammarAccess.getLogicalOrExpressionAccess().getORORTerminalRuleCall_2_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalOrExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLogicalOrExpressionAccess().getExprAssignment_2_1()); }
(rule__LogicalOrExpression__ExprAssignment_2_1)
{ after(grammarAccess.getLogicalOrExpressionAccess().getExprAssignment_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalAndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group__0__Impl
	rule__LogicalAndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLogicalAndExpressionAccess().getLogicalAndExpressionAction_0()); }
(

)
{ after(grammarAccess.getLogicalAndExpressionAccess().getLogicalAndExpressionAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalAndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group__1__Impl
	rule__LogicalAndExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLogicalAndExpressionAccess().getExprAssignment_1()); }
(rule__LogicalAndExpression__ExprAssignment_1)
{ after(grammarAccess.getLogicalAndExpressionAccess().getExprAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalAndExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLogicalAndExpressionAccess().getGroup_2()); }
(rule__LogicalAndExpression__Group_2__0)*
{ after(grammarAccess.getLogicalAndExpressionAccess().getGroup_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__LogicalAndExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group_2__0__Impl
	rule__LogicalAndExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLogicalAndExpressionAccess().getANDANDTerminalRuleCall_2_0()); }
	RULE_ANDAND
{ after(grammarAccess.getLogicalAndExpressionAccess().getANDANDTerminalRuleCall_2_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalAndExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getLogicalAndExpressionAccess().getExprAssignment_2_1()); }
(rule__LogicalAndExpression__ExprAssignment_2_1)
{ after(grammarAccess.getLogicalAndExpressionAccess().getExprAssignment_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__InclusiveOrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InclusiveOrExpression__Group__0__Impl
	rule__InclusiveOrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InclusiveOrExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInclusiveOrExpressionAccess().getInclusiveOrExpressionAction_0()); }
(

)
{ after(grammarAccess.getInclusiveOrExpressionAccess().getInclusiveOrExpressionAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__InclusiveOrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InclusiveOrExpression__Group__1__Impl
	rule__InclusiveOrExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InclusiveOrExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInclusiveOrExpressionAccess().getExprAssignment_1()); }
(rule__InclusiveOrExpression__ExprAssignment_1)
{ after(grammarAccess.getInclusiveOrExpressionAccess().getExprAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__InclusiveOrExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InclusiveOrExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InclusiveOrExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInclusiveOrExpressionAccess().getGroup_2()); }
(rule__InclusiveOrExpression__Group_2__0)*
{ after(grammarAccess.getInclusiveOrExpressionAccess().getGroup_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__InclusiveOrExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InclusiveOrExpression__Group_2__0__Impl
	rule__InclusiveOrExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InclusiveOrExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInclusiveOrExpressionAccess().getORTerminalRuleCall_2_0()); }
	RULE_OR
{ after(grammarAccess.getInclusiveOrExpressionAccess().getORTerminalRuleCall_2_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__InclusiveOrExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InclusiveOrExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InclusiveOrExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInclusiveOrExpressionAccess().getExprAssignment_2_1()); }
(rule__InclusiveOrExpression__ExprAssignment_2_1)
{ after(grammarAccess.getInclusiveOrExpressionAccess().getExprAssignment_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__ExclusiveOrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExclusiveOrExpression__Group__0__Impl
	rule__ExclusiveOrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExclusiveOrExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getExclusiveOrExpressionAccess().getExclusiveOrExpressionAction_0()); }
(

)
{ after(grammarAccess.getExclusiveOrExpressionAccess().getExclusiveOrExpressionAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ExclusiveOrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExclusiveOrExpression__Group__1__Impl
	rule__ExclusiveOrExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExclusiveOrExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getExclusiveOrExpressionAccess().getExprAssignment_1()); }
(rule__ExclusiveOrExpression__ExprAssignment_1)
{ after(grammarAccess.getExclusiveOrExpressionAccess().getExprAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ExclusiveOrExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExclusiveOrExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExclusiveOrExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getExclusiveOrExpressionAccess().getGroup_2()); }
(rule__ExclusiveOrExpression__Group_2__0)*
{ after(grammarAccess.getExclusiveOrExpressionAccess().getGroup_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__ExclusiveOrExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExclusiveOrExpression__Group_2__0__Impl
	rule__ExclusiveOrExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExclusiveOrExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getExclusiveOrExpressionAccess().getCARETTerminalRuleCall_2_0()); }
	RULE_CARET
{ after(grammarAccess.getExclusiveOrExpressionAccess().getCARETTerminalRuleCall_2_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ExclusiveOrExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExclusiveOrExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExclusiveOrExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getExclusiveOrExpressionAccess().getExprAssignment_2_1()); }
(rule__ExclusiveOrExpression__ExprAssignment_2_1)
{ after(grammarAccess.getExclusiveOrExpressionAccess().getExprAssignment_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAndExpressionAccess().getAndExpressionAction_0()); }
(

)
{ after(grammarAccess.getAndExpressionAccess().getAndExpressionAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__1__Impl
	rule__AndExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAndExpressionAccess().getExprAssignment_1()); }
(rule__AndExpression__ExprAssignment_1)
{ after(grammarAccess.getAndExpressionAccess().getExprAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAndExpressionAccess().getGroup_2()); }
(rule__AndExpression__Group_2__0)*
{ after(grammarAccess.getAndExpressionAccess().getGroup_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__AndExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_2__0__Impl
	rule__AndExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAndExpressionAccess().getANDTerminalRuleCall_2_0()); }
	RULE_AND
{ after(grammarAccess.getAndExpressionAccess().getANDTerminalRuleCall_2_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAndExpressionAccess().getExprAssignment_2_1()); }
(rule__AndExpression__ExprAssignment_2_1)
{ after(grammarAccess.getAndExpressionAccess().getExprAssignment_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__EqualityExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group__0__Impl
	rule__EqualityExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getEqualityExpressionAccess().getEqualityExpressionAction_0()); }
(

)
{ after(grammarAccess.getEqualityExpressionAccess().getEqualityExpressionAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group__1__Impl
	rule__EqualityExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getEqualityExpressionAccess().getExprAssignment_1()); }
(rule__EqualityExpression__ExprAssignment_1)
{ after(grammarAccess.getEqualityExpressionAccess().getExprAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getEqualityExpressionAccess().getGroup_2()); }
(rule__EqualityExpression__Group_2__0)*
{ after(grammarAccess.getEqualityExpressionAccess().getGroup_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__EqualityExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group_2__0__Impl
	rule__EqualityExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getEqualityExpressionAccess().getAlternatives_2_0()); }
(rule__EqualityExpression__Alternatives_2_0)
{ after(grammarAccess.getEqualityExpressionAccess().getAlternatives_2_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getEqualityExpressionAccess().getExprAssignment_2_1()); }
(rule__EqualityExpression__ExprAssignment_2_1)
{ after(grammarAccess.getEqualityExpressionAccess().getExprAssignment_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group__0__Impl
	rule__RelationalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getRelationalExpressionAccess().getRelationalExpressionAction_0()); }
(

)
{ after(grammarAccess.getRelationalExpressionAccess().getRelationalExpressionAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group__1__Impl
	rule__RelationalExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getRelationalExpressionAccess().getExprAssignment_1()); }
(rule__RelationalExpression__ExprAssignment_1)
{ after(grammarAccess.getRelationalExpressionAccess().getExprAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup_2()); }
(rule__RelationalExpression__Group_2__0)*
{ after(grammarAccess.getRelationalExpressionAccess().getGroup_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__RelationalExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_2__0__Impl
	rule__RelationalExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getRelationalExpressionAccess().getAlternatives_2_0()); }
(rule__RelationalExpression__Alternatives_2_0)
{ after(grammarAccess.getRelationalExpressionAccess().getAlternatives_2_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getRelationalExpressionAccess().getExprAssignment_2_1()); }
(rule__RelationalExpression__ExprAssignment_2_1)
{ after(grammarAccess.getRelationalExpressionAccess().getExprAssignment_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__ShiftExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftExpression__Group__0__Impl
	rule__ShiftExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getShiftExpressionAccess().getShiftExpressionAction_0()); }
(

)
{ after(grammarAccess.getShiftExpressionAccess().getShiftExpressionAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ShiftExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftExpression__Group__1__Impl
	rule__ShiftExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getShiftExpressionAccess().getExprAssignment_1()); }
(rule__ShiftExpression__ExprAssignment_1)
{ after(grammarAccess.getShiftExpressionAccess().getExprAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ShiftExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getShiftExpressionAccess().getGroup_2()); }
(rule__ShiftExpression__Group_2__0)*
{ after(grammarAccess.getShiftExpressionAccess().getGroup_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__ShiftExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftExpression__Group_2__0__Impl
	rule__ShiftExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getShiftExpressionAccess().getAlternatives_2_0()); }
(rule__ShiftExpression__Alternatives_2_0)
{ after(grammarAccess.getShiftExpressionAccess().getAlternatives_2_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ShiftExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getShiftExpressionAccess().getExprAssignment_2_1()); }
(rule__ShiftExpression__ExprAssignment_2_1)
{ after(grammarAccess.getShiftExpressionAccess().getExprAssignment_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group__0__Impl
	rule__AdditiveExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionAction_0()); }
(

)
{ after(grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group__1__Impl
	rule__AdditiveExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAdditiveExpressionAccess().getExprAssignment_1()); }
(rule__AdditiveExpression__ExprAssignment_1)
{ after(grammarAccess.getAdditiveExpressionAccess().getExprAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup_2()); }
(rule__AdditiveExpression__Group_2__0)*
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__AdditiveExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_2__0__Impl
	rule__AdditiveExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAdditiveExpressionAccess().getAlternatives_2_0()); }
(rule__AdditiveExpression__Alternatives_2_0)
{ after(grammarAccess.getAdditiveExpressionAccess().getAlternatives_2_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAdditiveExpressionAccess().getExprAssignment_2_1()); }
(rule__AdditiveExpression__ExprAssignment_2_1)
{ after(grammarAccess.getAdditiveExpressionAccess().getExprAssignment_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicativeExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group__0__Impl
	rule__MultiplicativeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionAction_0()); }
(

)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group__1__Impl
	rule__MultiplicativeExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getExprAssignment_1()); }
(rule__MultiplicativeExpression__ExprAssignment_1)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getExprAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_2()); }
(rule__MultiplicativeExpression__Group_2__0)*
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__MultiplicativeExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_2__0__Impl
	rule__MultiplicativeExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getAlternatives_2_0()); }
(rule__MultiplicativeExpression__Alternatives_2_0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getAlternatives_2_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getExprAssignment_2_1()); }
(rule__MultiplicativeExpression__ExprAssignment_2_1)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getExprAssignment_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__CastExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastExpression__Group__0__Impl
	rule__CastExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CastExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getCastExpressionAccess().getCastExpressionAction_0()); }
(

)
{ after(grammarAccess.getCastExpressionAccess().getCastExpressionAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__CastExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CastExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getCastExpressionAccess().getAlternatives_1()); }
(rule__CastExpression__Alternatives_1)
{ after(grammarAccess.getCastExpressionAccess().getAlternatives_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__CastExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastExpression__Group_1_1__0__Impl
	rule__CastExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CastExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getCastExpressionAccess().getLEFTPARENTerminalRuleCall_1_1_0()); }
	RULE_LEFTPAREN
{ after(grammarAccess.getCastExpressionAccess().getLEFTPARENTerminalRuleCall_1_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__CastExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastExpression__Group_1_1__1__Impl
	rule__CastExpression__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CastExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getCastExpressionAccess().getTypeAssignment_1_1_1()); }
(rule__CastExpression__TypeAssignment_1_1_1)
{ after(grammarAccess.getCastExpressionAccess().getTypeAssignment_1_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__CastExpression__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastExpression__Group_1_1__2__Impl
	rule__CastExpression__Group_1_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CastExpression__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getCastExpressionAccess().getRIGHTPARENTerminalRuleCall_1_1_2()); }
	RULE_RIGHTPAREN
{ after(grammarAccess.getCastExpressionAccess().getRIGHTPARENTerminalRuleCall_1_1_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__CastExpression__Group_1_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastExpression__Group_1_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CastExpression__Group_1_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getCastExpressionAccess().getExprAssignment_1_1_3()); }
(rule__CastExpression__ExprAssignment_1_1_3)
{ after(grammarAccess.getCastExpressionAccess().getExprAssignment_1_1_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}










rule__UnaryExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group__0__Impl
	rule__UnaryExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getUnaryExpressionAccess().getUnaryExpressionAction_0()); }
(

)
{ after(grammarAccess.getUnaryExpressionAccess().getUnaryExpressionAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getUnaryExpressionAccess().getAlternatives_1()); }
(rule__UnaryExpression__Alternatives_1)
{ after(grammarAccess.getUnaryExpressionAccess().getAlternatives_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__UnaryExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_1_1__0__Impl
	rule__UnaryExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getUnaryExpressionAccess().getPlusplusAssignment_1_1_0()); }
(rule__UnaryExpression__PlusplusAssignment_1_1_0)
{ after(grammarAccess.getUnaryExpressionAccess().getPlusplusAssignment_1_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getUnaryExpressionAccess().getExprAssignment_1_1_1()); }
(rule__UnaryExpression__ExprAssignment_1_1_1)
{ after(grammarAccess.getUnaryExpressionAccess().getExprAssignment_1_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__UnaryExpression__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_1_2__0__Impl
	rule__UnaryExpression__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getUnaryExpressionAccess().getMinusminusAssignment_1_2_0()); }
(rule__UnaryExpression__MinusminusAssignment_1_2_0)
{ after(grammarAccess.getUnaryExpressionAccess().getMinusminusAssignment_1_2_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getUnaryExpressionAccess().getExprAssignment_1_2_1()); }
(rule__UnaryExpression__ExprAssignment_1_2_1)
{ after(grammarAccess.getUnaryExpressionAccess().getExprAssignment_1_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__UnaryExpression__Group_1_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_1_3__0__Impl
	rule__UnaryExpression__Group_1_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_1_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getUnaryExpressionAccess().getOpAssignment_1_3_0()); }
(rule__UnaryExpression__OpAssignment_1_3_0)
{ after(grammarAccess.getUnaryExpressionAccess().getOpAssignment_1_3_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group_1_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_1_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_1_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getUnaryExpressionAccess().getExprAssignment_1_3_1()); }
(rule__UnaryExpression__ExprAssignment_1_3_1)
{ after(grammarAccess.getUnaryExpressionAccess().getExprAssignment_1_3_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__UnaryExpression__Group_1_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_1_4__0__Impl
	rule__UnaryExpression__Group_1_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_1_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getUnaryExpressionAccess().getSizeOfAssignment_1_4_0()); }
(rule__UnaryExpression__SizeOfAssignment_1_4_0)
{ after(grammarAccess.getUnaryExpressionAccess().getSizeOfAssignment_1_4_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group_1_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_1_4__1__Impl
	rule__UnaryExpression__Group_1_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_1_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getUnaryExpressionAccess().getLEFTPARENTerminalRuleCall_1_4_1()); }
	RULE_LEFTPAREN
{ after(grammarAccess.getUnaryExpressionAccess().getLEFTPARENTerminalRuleCall_1_4_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group_1_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_1_4__2__Impl
	rule__UnaryExpression__Group_1_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_1_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getUnaryExpressionAccess().getTypeNameAssignment_1_4_2()); }
(rule__UnaryExpression__TypeNameAssignment_1_4_2)
{ after(grammarAccess.getUnaryExpressionAccess().getTypeNameAssignment_1_4_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group_1_4__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_1_4__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_1_4__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getUnaryExpressionAccess().getRIGHTPARENTerminalRuleCall_1_4_3()); }
	RULE_RIGHTPAREN
{ after(grammarAccess.getUnaryExpressionAccess().getRIGHTPARENTerminalRuleCall_1_4_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}










rule__UnaryExpression__Group_1_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_1_5__0__Impl
	rule__UnaryExpression__Group_1_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_1_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getUnaryExpressionAccess().getSizeOfAssignment_1_5_0()); }
(rule__UnaryExpression__SizeOfAssignment_1_5_0)
{ after(grammarAccess.getUnaryExpressionAccess().getSizeOfAssignment_1_5_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group_1_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_1_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_1_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getUnaryExpressionAccess().getExprAssignment_1_5_1()); }
(rule__UnaryExpression__ExprAssignment_1_5_1)
{ after(grammarAccess.getUnaryExpressionAccess().getExprAssignment_1_5_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__UnaryExpression__Group_1_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_1_6__0__Impl
	rule__UnaryExpression__Group_1_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_1_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getUnaryExpressionAccess().getAndandAssignment_1_6_0()); }
(rule__UnaryExpression__AndandAssignment_1_6_0)
{ after(grammarAccess.getUnaryExpressionAccess().getAndandAssignment_1_6_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group_1_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_1_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_1_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getUnaryExpressionAccess().getIdAssignment_1_6_1()); }
(rule__UnaryExpression__IdAssignment_1_6_1)
{ after(grammarAccess.getUnaryExpressionAccess().getIdAssignment_1_6_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__UnaryOperator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryOperator__Group__0__Impl
	rule__UnaryOperator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getUnaryOperatorAccess().getUnaryOperatorAction_0()); }
(

)
{ after(grammarAccess.getUnaryOperatorAccess().getUnaryOperatorAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryOperator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryOperator__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getUnaryOperatorAccess().getAlternatives_1()); }
(rule__UnaryOperator__Alternatives_1)
{ after(grammarAccess.getUnaryOperatorAccess().getAlternatives_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__PostfixExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixExpression__Group__0__Impl
	rule__PostfixExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPostfixExpressionAccess().getPostfixExpressionAction_0()); }
(

)
{ after(grammarAccess.getPostfixExpressionAccess().getPostfixExpressionAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__PostfixExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPostfixExpressionAccess().getGroup_1()); }
(rule__PostfixExpression__Group_1__0)
{ after(grammarAccess.getPostfixExpressionAccess().getGroup_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__PostfixExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixExpression__Group_1__0__Impl
	rule__PostfixExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPostfixExpressionAccess().getExprAssignment_1_0()); }
(rule__PostfixExpression__ExprAssignment_1_0)
{ after(grammarAccess.getPostfixExpressionAccess().getExprAssignment_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__PostfixExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPostfixExpressionAccess().getAlternatives_1_1()); }
(rule__PostfixExpression__Alternatives_1_1)*
{ after(grammarAccess.getPostfixExpressionAccess().getAlternatives_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__PostfixExpression__Group_1_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixExpression__Group_1_1_0__0__Impl
	rule__PostfixExpression__Group_1_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpression__Group_1_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPostfixExpressionAccess().getLEFTBRACKETTerminalRuleCall_1_1_0_0()); }
	RULE_LEFTBRACKET
{ after(grammarAccess.getPostfixExpressionAccess().getLEFTBRACKETTerminalRuleCall_1_1_0_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__PostfixExpression__Group_1_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixExpression__Group_1_1_0__1__Impl
	rule__PostfixExpression__Group_1_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpression__Group_1_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPostfixExpressionAccess().getArrayExprAssignment_1_1_0_1()); }
(rule__PostfixExpression__ArrayExprAssignment_1_1_0_1)
{ after(grammarAccess.getPostfixExpressionAccess().getArrayExprAssignment_1_1_0_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__PostfixExpression__Group_1_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixExpression__Group_1_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpression__Group_1_1_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPostfixExpressionAccess().getRIGHTBRACKETTerminalRuleCall_1_1_0_2()); }
	RULE_RIGHTBRACKET
{ after(grammarAccess.getPostfixExpressionAccess().getRIGHTBRACKETTerminalRuleCall_1_1_0_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__PostfixExpression__Group_1_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixExpression__Group_1_1_1__0__Impl
	rule__PostfixExpression__Group_1_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpression__Group_1_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPostfixExpressionAccess().getLEFTPARENTerminalRuleCall_1_1_1_0()); }
	RULE_LEFTPAREN
{ after(grammarAccess.getPostfixExpressionAccess().getLEFTPARENTerminalRuleCall_1_1_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__PostfixExpression__Group_1_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixExpression__Group_1_1_1__1__Impl
	rule__PostfixExpression__Group_1_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpression__Group_1_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPostfixExpressionAccess().getArgumentExpressionListAssignment_1_1_1_1()); }
(rule__PostfixExpression__ArgumentExpressionListAssignment_1_1_1_1)?
{ after(grammarAccess.getPostfixExpressionAccess().getArgumentExpressionListAssignment_1_1_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__PostfixExpression__Group_1_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixExpression__Group_1_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpression__Group_1_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPostfixExpressionAccess().getRIGHTPARENTerminalRuleCall_1_1_1_2()); }
	RULE_RIGHTPAREN
{ after(grammarAccess.getPostfixExpressionAccess().getRIGHTPARENTerminalRuleCall_1_1_1_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__PostfixExpression__Group_1_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixExpression__Group_1_1_2__0__Impl
	rule__PostfixExpression__Group_1_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpression__Group_1_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPostfixExpressionAccess().getDotAssignment_1_1_2_0()); }
(rule__PostfixExpression__DotAssignment_1_1_2_0)
{ after(grammarAccess.getPostfixExpressionAccess().getDotAssignment_1_1_2_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__PostfixExpression__Group_1_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixExpression__Group_1_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpression__Group_1_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPostfixExpressionAccess().getIdAssignment_1_1_2_1()); }
(rule__PostfixExpression__IdAssignment_1_1_2_1)
{ after(grammarAccess.getPostfixExpressionAccess().getIdAssignment_1_1_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__PostfixExpression__Group_1_1_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixExpression__Group_1_1_3__0__Impl
	rule__PostfixExpression__Group_1_1_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpression__Group_1_1_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPostfixExpressionAccess().getArrowAssignment_1_1_3_0()); }
(rule__PostfixExpression__ArrowAssignment_1_1_3_0)
{ after(grammarAccess.getPostfixExpressionAccess().getArrowAssignment_1_1_3_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__PostfixExpression__Group_1_1_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixExpression__Group_1_1_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpression__Group_1_1_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPostfixExpressionAccess().getIdAssignment_1_1_3_1()); }
(rule__PostfixExpression__IdAssignment_1_1_3_1)
{ after(grammarAccess.getPostfixExpressionAccess().getIdAssignment_1_1_3_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__ArgumentExpressionList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArgumentExpressionList__Group__0__Impl
	rule__ArgumentExpressionList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentExpressionList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getArgumentExpressionListAccess().getExprAssignment_0()); }
(rule__ArgumentExpressionList__ExprAssignment_0)
{ after(grammarAccess.getArgumentExpressionListAccess().getExprAssignment_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ArgumentExpressionList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArgumentExpressionList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentExpressionList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getArgumentExpressionListAccess().getGroup_1()); }
(rule__ArgumentExpressionList__Group_1__0)*
{ after(grammarAccess.getArgumentExpressionListAccess().getGroup_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__ArgumentExpressionList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArgumentExpressionList__Group_1__0__Impl
	rule__ArgumentExpressionList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentExpressionList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getArgumentExpressionListAccess().getCOMMATerminalRuleCall_1_0()); }
	RULE_COMMA
{ after(grammarAccess.getArgumentExpressionListAccess().getCOMMATerminalRuleCall_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ArgumentExpressionList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArgumentExpressionList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentExpressionList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getArgumentExpressionListAccess().getExprAssignment_1_1()); }
(rule__ArgumentExpressionList__ExprAssignment_1_1)
{ after(grammarAccess.getArgumentExpressionListAccess().getExprAssignment_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__PrimaryExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group__0__Impl
	rule__PrimaryExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPrimaryExpressionAccess().getPrimaryExpressionAction_0()); }
(

)
{ after(grammarAccess.getPrimaryExpressionAccess().getPrimaryExpressionAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives_1()); }
(rule__PrimaryExpression__Alternatives_1)
{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__PrimaryExpression__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_1_2__0__Impl
	rule__PrimaryExpression__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPrimaryExpressionAccess().getLEFTPARENTerminalRuleCall_1_2_0()); }
	RULE_LEFTPAREN
{ after(grammarAccess.getPrimaryExpressionAccess().getLEFTPARENTerminalRuleCall_1_2_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_1_2__1__Impl
	rule__PrimaryExpression__Group_1_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPrimaryExpressionAccess().getExprAssignment_1_2_1()); }
(rule__PrimaryExpression__ExprAssignment_1_2_1)
{ after(grammarAccess.getPrimaryExpressionAccess().getExprAssignment_1_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_1_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_1_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPrimaryExpressionAccess().getRIGHTPARENTerminalRuleCall_1_2_2()); }
	RULE_RIGHTPAREN
{ after(grammarAccess.getPrimaryExpressionAccess().getRIGHTPARENTerminalRuleCall_1_2_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__Constant__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constant__Group__0__Impl
	rule__Constant__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getConstantAccess().getConstantAction_0()); }
(

)
{ after(grammarAccess.getConstantAccess().getConstantAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Constant__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constant__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getConstantAccess().getAlternatives_1()); }
(rule__Constant__Alternatives_1)
{ after(grammarAccess.getConstantAccess().getAlternatives_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__ConstantExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantExpression__Group__0__Impl
	rule__ConstantExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getConstantExpressionAccess().getConstantExpressionAction_0()); }
(

)
{ after(grammarAccess.getConstantExpressionAccess().getConstantExpressionAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ConstantExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getConstantExpressionAccess().getExprAssignment_1()); }
(rule__ConstantExpression__ExprAssignment_1)
{ after(grammarAccess.getConstantExpressionAccess().getExprAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}







rule__Model__UnitAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getUnitTranslationUnitParserRuleCall_1_0()); }
	ruleTranslationUnit{ after(grammarAccess.getModelAccess().getUnitTranslationUnitParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TranslationUnit__ExternalAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTranslationUnitAccess().getExternalExternalDeclarationParserRuleCall_1_0()); }
	ruleExternalDeclaration{ after(grammarAccess.getTranslationUnitAccess().getExternalExternalDeclarationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalDeclaration__FunctiondefHeadAssignment_1_0_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExternalDeclarationAccess().getFunctiondefHeadFunctionDefHeadParserRuleCall_1_0_0_0_0()); }
	ruleFunctionDefHead{ after(grammarAccess.getExternalDeclarationAccess().getFunctiondefHeadFunctionDefHeadParserRuleCall_1_0_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalDeclaration__FunctionDefinitionAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExternalDeclarationAccess().getFunctionDefinitionFunctionDefinitionParserRuleCall_1_0_1_0()); }
	ruleFunctionDefinition{ after(grammarAccess.getExternalDeclarationAccess().getFunctionDefinitionFunctionDefinitionParserRuleCall_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalDeclaration__DeclarationAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExternalDeclarationAccess().getDeclarationDeclarationParserRuleCall_1_1_0()); }
	ruleDeclaration{ after(grammarAccess.getExternalDeclarationAccess().getDeclarationDeclarationParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalDeclaration__SemiAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExternalDeclarationAccess().getSemiSEMITerminalRuleCall_1_2_0()); }
	RULE_SEMI{ after(grammarAccess.getExternalDeclarationAccess().getSemiSEMITerminalRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefHead__FunDeclSpecifiersAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefHeadAccess().getFunDeclSpecifiersFunctionDeclarationSpecifiersParserRuleCall_1_0()); }
	ruleFunctionDeclarationSpecifiers{ after(grammarAccess.getFunctionDefHeadAccess().getFunDeclSpecifiersFunctionDeclarationSpecifiersParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefHead__FunDeclaratorAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefHeadAccess().getFunDeclaratorDeclaratorParserRuleCall_2_0()); }
	ruleDeclarator{ after(grammarAccess.getFunctionDefHeadAccess().getFunDeclaratorDeclaratorParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefHead__FunDeclarationAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefHeadAccess().getFunDeclarationDeclarationParserRuleCall_3_0()); }
	ruleDeclaration{ after(grammarAccess.getFunctionDefHeadAccess().getFunDeclarationDeclarationParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__BodyAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getBodyBodyStatementParserRuleCall_1_0()); }
	ruleBodyStatement{ after(grammarAccess.getFunctionDefinitionAccess().getBodyBodyStatementParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__SpecifiersAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getSpecifiersDeclarationSpecifiersParserRuleCall_1_0_0()); }
	ruleDeclarationSpecifiers{ after(grammarAccess.getDeclarationAccess().getSpecifiersDeclarationSpecifiersParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__InitDeclaratorListAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getInitDeclaratorListInitDeclaratorListParserRuleCall_1_1_0()); }
	ruleInitDeclaratorList{ after(grammarAccess.getDeclarationAccess().getInitDeclaratorListInitDeclaratorListParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__SemiAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getSemiSEMITerminalRuleCall_1_2_0()); }
	RULE_SEMI{ after(grammarAccess.getDeclarationAccess().getSemiSEMITerminalRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclarationSpecifiers__DeclarationSpecifierAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationSpecifiersAccess().getDeclarationSpecifierStorageClassSpecifierParserRuleCall_1_0_0()); }
	ruleStorageClassSpecifier{ after(grammarAccess.getFunctionDeclarationSpecifiersAccess().getDeclarationSpecifierStorageClassSpecifierParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclarationSpecifiers__DeclarationSpecifierAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationSpecifiersAccess().getDeclarationSpecifierTypeSpecifierParserRuleCall_1_1_0()); }
	ruleTypeSpecifier{ after(grammarAccess.getFunctionDeclarationSpecifiersAccess().getDeclarationSpecifierTypeSpecifierParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclarationSpecifiers__DeclarationSpecifierAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationSpecifiersAccess().getDeclarationSpecifierTypeQualifierParserRuleCall_1_2_0()); }
	ruleTypeQualifier{ after(grammarAccess.getFunctionDeclarationSpecifiersAccess().getDeclarationSpecifierTypeQualifierParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclarationSpecifiers__DeclarationSpecifierAssignment_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationSpecifiersAccess().getDeclarationSpecifierFunctionSpecifierParserRuleCall_1_3_0()); }
	ruleFunctionSpecifier{ after(grammarAccess.getFunctionDeclarationSpecifiersAccess().getDeclarationSpecifierFunctionSpecifierParserRuleCall_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationSpecifiers__DeclarationSpecifierAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationSpecifiersAccess().getDeclarationSpecifierStorageClassSpecifierParserRuleCall_1_0_0()); }
	ruleStorageClassSpecifier{ after(grammarAccess.getDeclarationSpecifiersAccess().getDeclarationSpecifierStorageClassSpecifierParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationSpecifiers__DeclarationSpecifierAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationSpecifiersAccess().getDeclarationSpecifierTypeSpecifierParserRuleCall_1_1_0()); }
	ruleTypeSpecifier{ after(grammarAccess.getDeclarationSpecifiersAccess().getDeclarationSpecifierTypeSpecifierParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationSpecifiers__DeclarationSpecifierAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationSpecifiersAccess().getDeclarationSpecifierTypeQualifierParserRuleCall_1_2_0()); }
	ruleTypeQualifier{ after(grammarAccess.getDeclarationSpecifiersAccess().getDeclarationSpecifierTypeQualifierParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationSpecifiers__DeclarationSpecifierAssignment_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationSpecifiersAccess().getDeclarationSpecifierStructOrUnionSpecifierParserRuleCall_1_3_0()); }
	ruleStructOrUnionSpecifier{ after(grammarAccess.getDeclarationSpecifiersAccess().getDeclarationSpecifierStructOrUnionSpecifierParserRuleCall_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InitDeclaratorList__InitDeclaratorAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitDeclaratorListAccess().getInitDeclaratorInitDeclaratorParserRuleCall_1_0()); }
	ruleInitDeclarator{ after(grammarAccess.getInitDeclaratorListAccess().getInitDeclaratorInitDeclaratorParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InitDeclaratorList__InitDeclaratorAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitDeclaratorListAccess().getInitDeclaratorInitDeclaratorParserRuleCall_2_1_0()); }
	ruleInitDeclarator{ after(grammarAccess.getInitDeclaratorListAccess().getInitDeclaratorInitDeclaratorParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InitDeclarator__DeclaratorAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitDeclaratorAccess().getDeclaratorDeclaratorParserRuleCall_1_0()); }
	ruleDeclarator{ after(grammarAccess.getInitDeclaratorAccess().getDeclaratorDeclaratorParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InitDeclarator__InitializerAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitDeclaratorAccess().getInitializerInitializerParserRuleCall_2_1_0()); }
	ruleInitializer{ after(grammarAccess.getInitDeclaratorAccess().getInitializerInitializerParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StorageClassSpecifier__NameAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStorageClassSpecifierAccess().getNameKW_TYPEDEFTerminalRuleCall_1_0_0()); }
	RULE_KW_TYPEDEF{ after(grammarAccess.getStorageClassSpecifierAccess().getNameKW_TYPEDEFTerminalRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StorageClassSpecifier__NameAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStorageClassSpecifierAccess().getNameKW_EXTERNTerminalRuleCall_1_1_0()); }
	RULE_KW_EXTERN{ after(grammarAccess.getStorageClassSpecifierAccess().getNameKW_EXTERNTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StorageClassSpecifier__NameAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStorageClassSpecifierAccess().getNameKW_STATICTerminalRuleCall_1_2_0()); }
	RULE_KW_STATIC{ after(grammarAccess.getStorageClassSpecifierAccess().getNameKW_STATICTerminalRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StorageClassSpecifier__NameAssignment_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStorageClassSpecifierAccess().getNameKW_THREADLOCALTerminalRuleCall_1_3_0()); }
	RULE_KW_THREADLOCAL{ after(grammarAccess.getStorageClassSpecifierAccess().getNameKW_THREADLOCALTerminalRuleCall_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StorageClassSpecifier__NameAssignment_1_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStorageClassSpecifierAccess().getNameKW_AUTOTerminalRuleCall_1_4_0()); }
	RULE_KW_AUTO{ after(grammarAccess.getStorageClassSpecifierAccess().getNameKW_AUTOTerminalRuleCall_1_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StorageClassSpecifier__NameAssignment_1_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStorageClassSpecifierAccess().getNameKW_REGISTERTerminalRuleCall_1_5_0()); }
	RULE_KW_REGISTER{ after(grammarAccess.getStorageClassSpecifierAccess().getNameKW_REGISTERTerminalRuleCall_1_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpecifier__NameAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeSpecifierAccess().getNameKW_VOIDTerminalRuleCall_0_1_0()); }
	RULE_KW_VOID{ after(grammarAccess.getTypeSpecifierAccess().getNameKW_VOIDTerminalRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpecifier__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeSpecifierAccess().getNameKW_CHARTerminalRuleCall_1_0()); }
	RULE_KW_CHAR{ after(grammarAccess.getTypeSpecifierAccess().getNameKW_CHARTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpecifier__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeSpecifierAccess().getNameKW_SHORTTerminalRuleCall_2_0()); }
	RULE_KW_SHORT{ after(grammarAccess.getTypeSpecifierAccess().getNameKW_SHORTTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpecifier__NameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeSpecifierAccess().getNameKW_INTTerminalRuleCall_3_0()); }
	RULE_KW_INT{ after(grammarAccess.getTypeSpecifierAccess().getNameKW_INTTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpecifier__NameAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeSpecifierAccess().getNameKW_LONGTerminalRuleCall_4_0()); }
	RULE_KW_LONG{ after(grammarAccess.getTypeSpecifierAccess().getNameKW_LONGTerminalRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpecifier__NameAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeSpecifierAccess().getNameKW_FLOATTerminalRuleCall_5_0()); }
	RULE_KW_FLOAT{ after(grammarAccess.getTypeSpecifierAccess().getNameKW_FLOATTerminalRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpecifier__NameAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeSpecifierAccess().getNameKW_DOUBLETerminalRuleCall_6_0()); }
	RULE_KW_DOUBLE{ after(grammarAccess.getTypeSpecifierAccess().getNameKW_DOUBLETerminalRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpecifier__NameAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeSpecifierAccess().getNameKW_SIGNEDTerminalRuleCall_7_0()); }
	RULE_KW_SIGNED{ after(grammarAccess.getTypeSpecifierAccess().getNameKW_SIGNEDTerminalRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpecifier__NameAssignment_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeSpecifierAccess().getNameKW_UNSIGNEDTerminalRuleCall_8_0()); }
	RULE_KW_UNSIGNED{ after(grammarAccess.getTypeSpecifierAccess().getNameKW_UNSIGNEDTerminalRuleCall_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpecifier__NameAssignment_9
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeSpecifierAccess().getNameKW_BOOLTerminalRuleCall_9_0()); }
	RULE_KW_BOOL{ after(grammarAccess.getTypeSpecifierAccess().getNameKW_BOOLTerminalRuleCall_9_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpecifier__NameAssignment_10
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeSpecifierAccess().getNameKW_COMPLEXTerminalRuleCall_10_0()); }
	RULE_KW_COMPLEX{ after(grammarAccess.getTypeSpecifierAccess().getNameKW_COMPLEXTerminalRuleCall_10_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpecifier__NameAssignment_11
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeSpecifierAccess().getName__m128Keyword_11_0()); }

(
{ before(grammarAccess.getTypeSpecifierAccess().getName__m128Keyword_11_0()); }

	'__m128' 

{ after(grammarAccess.getTypeSpecifierAccess().getName__m128Keyword_11_0()); }
)



{ after(grammarAccess.getTypeSpecifierAccess().getName__m128Keyword_11_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpecifier__NameAssignment_12
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeSpecifierAccess().getName__m128dKeyword_12_0()); }

(
{ before(grammarAccess.getTypeSpecifierAccess().getName__m128dKeyword_12_0()); }

	'__m128d' 

{ after(grammarAccess.getTypeSpecifierAccess().getName__m128dKeyword_12_0()); }
)



{ after(grammarAccess.getTypeSpecifierAccess().getName__m128dKeyword_12_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpecifier__NameAssignment_13
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeSpecifierAccess().getName__m128iKeyword_13_0()); }

(
{ before(grammarAccess.getTypeSpecifierAccess().getName__m128iKeyword_13_0()); }

	'__m128i' 

{ after(grammarAccess.getTypeSpecifierAccess().getName__m128iKeyword_13_0()); }
)



{ after(grammarAccess.getTypeSpecifierAccess().getName__m128iKeyword_13_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpecifier__SpecifierAssignment_14
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeSpecifierAccess().getSpecifierEnumSpecifierParserRuleCall_14_0()); }
	ruleEnumSpecifier{ after(grammarAccess.getTypeSpecifierAccess().getSpecifierEnumSpecifierParserRuleCall_14_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpecifier__TypeAssignment_15
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeSpecifierAccess().getTypeTypedefNameParserRuleCall_15_0()); }
	ruleTypedefName{ after(grammarAccess.getTypeSpecifierAccess().getTypeTypedefNameParserRuleCall_15_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypedefName__IdAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedefNameAccess().getIdIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getTypedefNameAccess().getIdIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StructOrUnionSpecifier__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructOrUnionSpecifierAccess().getTypeStructOrUnionParserRuleCall_1_0()); }
	ruleStructOrUnion{ after(grammarAccess.getStructOrUnionSpecifierAccess().getTypeStructOrUnionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StructOrUnionSpecifier__IdAssignment_2_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructOrUnionSpecifierAccess().getIdIDTerminalRuleCall_2_0_0_0()); }
	RULE_ID{ after(grammarAccess.getStructOrUnionSpecifierAccess().getIdIDTerminalRuleCall_2_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StructOrUnionSpecifier__StructDeclListAssignment_2_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructOrUnionSpecifierAccess().getStructDeclListStructDeclarationListParserRuleCall_2_0_2_0()); }
	ruleStructDeclarationList{ after(grammarAccess.getStructOrUnionSpecifierAccess().getStructDeclListStructDeclarationListParserRuleCall_2_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StructOrUnionSpecifier__IdAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructOrUnionSpecifierAccess().getIdIDTerminalRuleCall_2_1_0()); }
	RULE_ID{ after(grammarAccess.getStructOrUnionSpecifierAccess().getIdIDTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StructOrUnion__NameAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructOrUnionAccess().getNameKW_STRUCTTerminalRuleCall_0_1_0()); }
	RULE_KW_STRUCT{ after(grammarAccess.getStructOrUnionAccess().getNameKW_STRUCTTerminalRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StructOrUnion__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructOrUnionAccess().getNameKW_UNIONTerminalRuleCall_1_0()); }
	RULE_KW_UNION{ after(grammarAccess.getStructOrUnionAccess().getNameKW_UNIONTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StructDeclarationList__StructDeclarationAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructDeclarationListAccess().getStructDeclarationStructDeclarationParserRuleCall_0()); }
	ruleStructDeclaration{ after(grammarAccess.getStructDeclarationListAccess().getStructDeclarationStructDeclarationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StructDeclaration__ListAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructDeclarationAccess().getListSpecifierQualifierListParserRuleCall_0_0()); }
	ruleSpecifierQualifierList{ after(grammarAccess.getStructDeclarationAccess().getListSpecifierQualifierListParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StructDeclaration__StructDeclarationListAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructDeclarationAccess().getStructDeclarationListStructDeclaratorListParserRuleCall_1_0()); }
	ruleStructDeclaratorList{ after(grammarAccess.getStructDeclarationAccess().getStructDeclarationListStructDeclaratorListParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SpecifierQualifierList__TypeSpecifierAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpecifierQualifierListAccess().getTypeSpecifierTypeSpecifierParserRuleCall_1_0_0()); }
	ruleTypeSpecifier{ after(grammarAccess.getSpecifierQualifierListAccess().getTypeSpecifierTypeSpecifierParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SpecifierQualifierList__TypeQualifierAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpecifierQualifierListAccess().getTypeQualifierTypeQualifierParserRuleCall_1_1_0()); }
	ruleTypeQualifier{ after(grammarAccess.getSpecifierQualifierListAccess().getTypeQualifierTypeQualifierParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SpecifierQualifierList__StructOrUnionSpecifierAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpecifierQualifierListAccess().getStructOrUnionSpecifierStructOrUnionSpecifierParserRuleCall_1_2_0()); }
	ruleStructOrUnionSpecifier{ after(grammarAccess.getSpecifierQualifierListAccess().getStructOrUnionSpecifierStructOrUnionSpecifierParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StructDeclaratorList__StructDeclaratorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructDeclaratorListAccess().getStructDeclaratorStructDeclaratorParserRuleCall_0_0()); }
	ruleStructDeclarator{ after(grammarAccess.getStructDeclaratorListAccess().getStructDeclaratorStructDeclaratorParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StructDeclaratorList__StructDeclaratorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructDeclaratorListAccess().getStructDeclaratorStructDeclaratorParserRuleCall_1_1_0()); }
	ruleStructDeclarator{ after(grammarAccess.getStructDeclaratorListAccess().getStructDeclaratorStructDeclaratorParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StructDeclarator__DeclaratorAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructDeclaratorAccess().getDeclaratorDeclaratorParserRuleCall_0_0_0()); }
	ruleDeclarator{ after(grammarAccess.getStructDeclaratorAccess().getDeclaratorDeclaratorParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StructDeclarator__ConstExprAssignment_0_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructDeclaratorAccess().getConstExprConstantExpressionParserRuleCall_0_1_1_0()); }
	ruleConstantExpression{ after(grammarAccess.getStructDeclaratorAccess().getConstExprConstantExpressionParserRuleCall_0_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StructDeclarator__ConstExprAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructDeclaratorAccess().getConstExprConstantExpressionParserRuleCall_1_1_0()); }
	ruleConstantExpression{ after(grammarAccess.getStructDeclaratorAccess().getConstExprConstantExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumSpecifier__EnumListAssignment_1_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumSpecifierAccess().getEnumListEnumeratorListParserRuleCall_1_1_0_1_0()); }
	ruleEnumeratorList{ after(grammarAccess.getEnumSpecifierAccess().getEnumListEnumeratorListParserRuleCall_1_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumSpecifier__IdAssignment_1_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumSpecifierAccess().getIdIDTerminalRuleCall_1_1_1_0_0()); }
	RULE_ID{ after(grammarAccess.getEnumSpecifierAccess().getIdIDTerminalRuleCall_1_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumSpecifier__EnumListAssignment_1_1_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumSpecifierAccess().getEnumListEnumeratorListParserRuleCall_1_1_1_1_1_0()); }
	ruleEnumeratorList{ after(grammarAccess.getEnumSpecifierAccess().getEnumListEnumeratorListParserRuleCall_1_1_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumeratorList__EnumeratorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumeratorListAccess().getEnumeratorEnumeratorParserRuleCall_0_0()); }
	ruleEnumerator{ after(grammarAccess.getEnumeratorListAccess().getEnumeratorEnumeratorParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumeratorList__EnumeratorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumeratorListAccess().getEnumeratorEnumeratorParserRuleCall_1_1_0()); }
	ruleEnumerator{ after(grammarAccess.getEnumeratorListAccess().getEnumeratorEnumeratorParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Enumerator__IdAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumeratorAccess().getIdIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getEnumeratorAccess().getIdIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Enumerator__ExprAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumeratorAccess().getExprConstantExpressionParserRuleCall_2_1_0()); }
	ruleConstantExpression{ after(grammarAccess.getEnumeratorAccess().getExprConstantExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeQualifier__TypeAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeQualifierAccess().getTypeKW_CONSTTerminalRuleCall_1_0_0()); }
	RULE_KW_CONST{ after(grammarAccess.getTypeQualifierAccess().getTypeKW_CONSTTerminalRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeQualifier__TypeAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeQualifierAccess().getTypeKW_RESTRICTTerminalRuleCall_1_1_0()); }
	RULE_KW_RESTRICT{ after(grammarAccess.getTypeQualifierAccess().getTypeKW_RESTRICTTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeQualifier__TypeAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeQualifierAccess().getTypeKW_VOLATILETerminalRuleCall_1_2_0()); }
	RULE_KW_VOLATILE{ after(grammarAccess.getTypeQualifierAccess().getTypeKW_VOLATILETerminalRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeQualifier__TypeAssignment_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeQualifierAccess().getTypeKW_ATOMICTerminalRuleCall_1_3_0()); }
	RULE_KW_ATOMIC{ after(grammarAccess.getTypeQualifierAccess().getTypeKW_ATOMICTerminalRuleCall_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionSpecifier__NameAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionSpecifierAccess().getNameKW_INLINETerminalRuleCall_1_0_0()); }
	RULE_KW_INLINE{ after(grammarAccess.getFunctionSpecifierAccess().getNameKW_INLINETerminalRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionSpecifier__NameAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionSpecifierAccess().getNameKW_NORETURNTerminalRuleCall_1_1_0()); }
	RULE_KW_NORETURN{ after(grammarAccess.getFunctionSpecifierAccess().getNameKW_NORETURNTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__PointerAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorAccess().getPointerPointerParserRuleCall_1_0()); }
	rulePointer{ after(grammarAccess.getDeclaratorAccess().getPointerPointerParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__DeclaratorAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorAccess().getDeclaratorDirectDeclaratorParserRuleCall_2_0()); }
	ruleDirectDeclarator{ after(grammarAccess.getDeclaratorAccess().getDeclaratorDirectDeclaratorParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DirectDeclarator__IdAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDirectDeclaratorAccess().getIdIDTerminalRuleCall_1_0_0()); }
	RULE_ID{ after(grammarAccess.getDirectDeclaratorAccess().getIdIDTerminalRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DirectDeclarator__DeclaratorAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDirectDeclaratorAccess().getDeclaratorDeclaratorParserRuleCall_1_1_1_0()); }
	ruleDeclarator{ after(grammarAccess.getDirectDeclaratorAccess().getDeclaratorDeclaratorParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DirectDeclarator__DeclaratorSuffixAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDirectDeclaratorAccess().getDeclaratorSuffixDeclaratorSuffixParserRuleCall_2_0()); }
	ruleDeclaratorSuffix{ after(grammarAccess.getDirectDeclaratorAccess().getDeclaratorSuffixDeclaratorSuffixParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaratorSuffix__StaticAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorSuffixAccess().getStaticKW_STATICTerminalRuleCall_1_0_1_0()); }
	RULE_KW_STATIC{ after(grammarAccess.getDeclaratorSuffixAccess().getStaticKW_STATICTerminalRuleCall_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaratorSuffix__TypeQualifierListAssignment_1_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorSuffixAccess().getTypeQualifierListTypeQualifierListParserRuleCall_1_0_2_0()); }
	ruleTypeQualifierList{ after(grammarAccess.getDeclaratorSuffixAccess().getTypeQualifierListTypeQualifierListParserRuleCall_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaratorSuffix__ExprAssignment_1_0_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorSuffixAccess().getExprAssignmentExpressionParserRuleCall_1_0_3_0()); }
	ruleAssignmentExpression{ after(grammarAccess.getDeclaratorSuffixAccess().getExprAssignmentExpressionParserRuleCall_1_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaratorSuffix__TypeQualifierListAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorSuffixAccess().getTypeQualifierListTypeQualifierListParserRuleCall_1_1_1_0()); }
	ruleTypeQualifierList{ after(grammarAccess.getDeclaratorSuffixAccess().getTypeQualifierListTypeQualifierListParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaratorSuffix__ExprAssignment_1_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorSuffixAccess().getExprAssignmentExpressionParserRuleCall_1_1_2_0()); }
	ruleAssignmentExpression{ after(grammarAccess.getDeclaratorSuffixAccess().getExprAssignmentExpressionParserRuleCall_1_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaratorSuffix__TypeQualifierListAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorSuffixAccess().getTypeQualifierListTypeQualifierListParserRuleCall_1_2_1_0()); }
	ruleTypeQualifierList{ after(grammarAccess.getDeclaratorSuffixAccess().getTypeQualifierListTypeQualifierListParserRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaratorSuffix__StaticAssignment_1_2_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorSuffixAccess().getStaticKW_STATICTerminalRuleCall_1_2_2_0()); }
	RULE_KW_STATIC{ after(grammarAccess.getDeclaratorSuffixAccess().getStaticKW_STATICTerminalRuleCall_1_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaratorSuffix__ExprAssignment_1_2_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorSuffixAccess().getExprAssignmentExpressionParserRuleCall_1_2_3_0()); }
	ruleAssignmentExpression{ after(grammarAccess.getDeclaratorSuffixAccess().getExprAssignmentExpressionParserRuleCall_1_2_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaratorSuffix__TypeQualifierListAssignment_1_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorSuffixAccess().getTypeQualifierListTypeQualifierListParserRuleCall_1_3_1_0()); }
	ruleTypeQualifierList{ after(grammarAccess.getDeclaratorSuffixAccess().getTypeQualifierListTypeQualifierListParserRuleCall_1_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaratorSuffix__StarAssignment_1_3_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorSuffixAccess().getStarSTARTerminalRuleCall_1_3_2_0()); }
	RULE_STAR{ after(grammarAccess.getDeclaratorSuffixAccess().getStarSTARTerminalRuleCall_1_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaratorSuffix__LastSuffixAssignment_1_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorSuffixAccess().getLastSuffixDirectDeclaratorLastSuffixParserRuleCall_1_4_0()); }
	ruleDirectDeclaratorLastSuffix{ after(grammarAccess.getDeclaratorSuffixAccess().getLastSuffixDirectDeclaratorLastSuffixParserRuleCall_1_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DirectDeclaratorLastSuffix__ParameterTypeListAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDirectDeclaratorLastSuffixAccess().getParameterTypeListParameterTypeListParserRuleCall_2_0_0()); }
	ruleParameterTypeList{ after(grammarAccess.getDirectDeclaratorLastSuffixAccess().getParameterTypeListParameterTypeListParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DirectDeclaratorLastSuffix__IdentifierListAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDirectDeclaratorLastSuffixAccess().getIdentifierListIdentifierListParserRuleCall_2_1_0()); }
	ruleIdentifierList{ after(grammarAccess.getDirectDeclaratorLastSuffixAccess().getIdentifierListIdentifierListParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Pointer__StarAssignment_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPointerAccess().getStarSTARTerminalRuleCall_1_0_0_0()); }
	RULE_STAR{ after(grammarAccess.getPointerAccess().getStarSTARTerminalRuleCall_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Pointer__CaretAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPointerAccess().getCaretCARETTerminalRuleCall_1_0_1_0()); }
	RULE_CARET{ after(grammarAccess.getPointerAccess().getCaretCARETTerminalRuleCall_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Pointer__TypeQualifierListAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPointerAccess().getTypeQualifierListTypeQualifierListParserRuleCall_1_1_0()); }
	ruleTypeQualifierList{ after(grammarAccess.getPointerAccess().getTypeQualifierListTypeQualifierListParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeQualifierList__TypeQualifierAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeQualifierListAccess().getTypeQualifierTypeQualifierParserRuleCall_1_0()); }
	ruleTypeQualifier{ after(grammarAccess.getTypeQualifierListAccess().getTypeQualifierTypeQualifierParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterTypeList__ListAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterTypeListAccess().getListParameterListParserRuleCall_1_0()); }
	ruleParameterList{ after(grammarAccess.getParameterTypeListAccess().getListParameterListParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__ParameterDeclarationAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterListAccess().getParameterDeclarationParameterDeclarationParserRuleCall_1_0()); }
	ruleParameterDeclaration{ after(grammarAccess.getParameterListAccess().getParameterDeclarationParameterDeclarationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__ParameterDeclarationAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterListAccess().getParameterDeclarationParameterDeclarationParserRuleCall_2_1_0()); }
	ruleParameterDeclaration{ after(grammarAccess.getParameterListAccess().getParameterDeclarationParameterDeclarationParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__DeclSpecifiersAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationAccess().getDeclSpecifiersDeclarationSpecifiersParserRuleCall_1_0()); }
	ruleDeclarationSpecifiers{ after(grammarAccess.getParameterDeclarationAccess().getDeclSpecifiersDeclarationSpecifiersParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__DeclaratorAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationAccess().getDeclaratorDeclaratorParserRuleCall_2_0()); }
	ruleDeclarator{ after(grammarAccess.getParameterDeclarationAccess().getDeclaratorDeclaratorParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__IdAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentifierListAccess().getIdMyIdentifierParserRuleCall_1_0()); }
	ruleMyIdentifier{ after(grammarAccess.getIdentifierListAccess().getIdMyIdentifierParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__IdAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentifierListAccess().getIdMyIdentifierParserRuleCall_2_1_0()); }
	ruleMyIdentifier{ after(grammarAccess.getIdentifierListAccess().getIdMyIdentifierParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MyIdentifier__IdAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyIdentifierAccess().getIdIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getMyIdentifierAccess().getIdIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeName__ListAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeNameAccess().getListSpecifierQualifierListParserRuleCall_1_0()); }
	ruleSpecifierQualifierList{ after(grammarAccess.getTypeNameAccess().getListSpecifierQualifierListParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Initializer__ExprAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitializerAccess().getExprAssignmentExpressionParserRuleCall_1_0_0()); }
	ruleAssignmentExpression{ after(grammarAccess.getInitializerAccess().getExprAssignmentExpressionParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Initializer__ListAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitializerAccess().getListInitializerListParserRuleCall_1_1_1_0()); }
	ruleInitializerList{ after(grammarAccess.getInitializerAccess().getListInitializerListParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InitializerList__InitializerAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitializerListAccess().getInitializerInitializerParserRuleCall_1_0()); }
	ruleInitializer{ after(grammarAccess.getInitializerListAccess().getInitializerInitializerParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InitializerList__InitializerAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitializerListAccess().getInitializerInitializerParserRuleCall_2_1_0()); }
	ruleInitializer{ after(grammarAccess.getInitializerListAccess().getInitializerInitializerParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BlockList__DeclarationAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockListAccess().getDeclarationDeclarationParserRuleCall_1_0_0()); }
	ruleDeclaration{ after(grammarAccess.getBlockListAccess().getDeclarationDeclarationParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BlockList__StatementAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockListAccess().getStatementStatementParserRuleCall_1_1_0()); }
	ruleStatement{ after(grammarAccess.getBlockListAccess().getStatementStatementParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__StmtAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getStmtLabeledStatementParserRuleCall_1_0_0()); }
	ruleLabeledStatement{ after(grammarAccess.getStatementAccess().getStmtLabeledStatementParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__StmtAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getStmtCompoundStatementParserRuleCall_1_1_0()); }
	ruleCompoundStatement{ after(grammarAccess.getStatementAccess().getStmtCompoundStatementParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__StmtAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getStmtExpressionStatementParserRuleCall_1_2_0()); }
	ruleExpressionStatement{ after(grammarAccess.getStatementAccess().getStmtExpressionStatementParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__StmtAssignment_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getStmtSelectionStatementParserRuleCall_1_3_0()); }
	ruleSelectionStatement{ after(grammarAccess.getStatementAccess().getStmtSelectionStatementParserRuleCall_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__StmtAssignment_1_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getStmtIterationStatementParserRuleCall_1_4_0()); }
	ruleIterationStatement{ after(grammarAccess.getStatementAccess().getStmtIterationStatementParserRuleCall_1_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__StmtAssignment_1_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getStmtJumpStatementParserRuleCall_1_5_0()); }
	ruleJumpStatement{ after(grammarAccess.getStatementAccess().getStmtJumpStatementParserRuleCall_1_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__StmtAssignment_1_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getStmtAsmStatementParserRuleCall_1_6_0()); }
	ruleAsmStatement{ after(grammarAccess.getStatementAccess().getStmtAsmStatementParserRuleCall_1_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledStatement__IdAssignment_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabeledStatementAccess().getIdIDTerminalRuleCall_1_0_0_0()); }
	RULE_ID{ after(grammarAccess.getLabeledStatementAccess().getIdIDTerminalRuleCall_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledStatement__LStmtAssignment_1_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabeledStatementAccess().getLStmtStatementParserRuleCall_1_0_2_0()); }
	ruleStatement{ after(grammarAccess.getLabeledStatementAccess().getLStmtStatementParserRuleCall_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledStatement__CaseAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabeledStatementAccess().getCaseKW_CASETerminalRuleCall_1_1_0_0()); }
	RULE_KW_CASE{ after(grammarAccess.getLabeledStatementAccess().getCaseKW_CASETerminalRuleCall_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledStatement__ExprAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabeledStatementAccess().getExprConstantExpressionParserRuleCall_1_1_1_0()); }
	ruleConstantExpression{ after(grammarAccess.getLabeledStatementAccess().getExprConstantExpressionParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledStatement__LStmtAssignment_1_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabeledStatementAccess().getLStmtStatementParserRuleCall_1_1_3_0()); }
	ruleStatement{ after(grammarAccess.getLabeledStatementAccess().getLStmtStatementParserRuleCall_1_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledStatement__DefaultAssignment_1_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabeledStatementAccess().getDefaultKW_DEFAULTTerminalRuleCall_1_2_0_0()); }
	RULE_KW_DEFAULT{ after(grammarAccess.getLabeledStatementAccess().getDefaultKW_DEFAULTTerminalRuleCall_1_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledStatement__LStmtAssignment_1_2_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabeledStatementAccess().getLStmtStatementParserRuleCall_1_2_2_0()); }
	ruleStatement{ after(grammarAccess.getLabeledStatementAccess().getLStmtStatementParserRuleCall_1_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundStatement__BodyAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStatementAccess().getBodyBodyStatementParserRuleCall_2_0()); }
	ruleBodyStatement{ after(grammarAccess.getCompoundStatementAccess().getBodyBodyStatementParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BodyStatement__BlockListAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBodyStatementAccess().getBlockListBlockListParserRuleCall_1_0()); }
	ruleBlockList{ after(grammarAccess.getBodyStatementAccess().getBlockListBlockListParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__ExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getExpressionExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getExpressionStatementAccess().getExpressionExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__SemiAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getSemiSEMITerminalRuleCall_2_0()); }
	RULE_SEMI{ after(grammarAccess.getExpressionStatementAccess().getSemiSEMITerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionStatement__IfAssignment_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionStatementAccess().getIfKW_IFTerminalRuleCall_1_0_0_0()); }
	RULE_KW_IF{ after(grammarAccess.getSelectionStatementAccess().getIfKW_IFTerminalRuleCall_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionStatement__ExprAssignment_1_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionStatementAccess().getExprExpressionParserRuleCall_1_0_2_0()); }
	ruleExpression{ after(grammarAccess.getSelectionStatementAccess().getExprExpressionParserRuleCall_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionStatement__IfStatementAssignment_1_0_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionStatementAccess().getIfStatementStatementParserRuleCall_1_0_4_0()); }
	ruleStatement{ after(grammarAccess.getSelectionStatementAccess().getIfStatementStatementParserRuleCall_1_0_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionStatement__ElseAssignment_1_0_5_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionStatementAccess().getElseKW_ELSETerminalRuleCall_1_0_5_0_0()); }
	RULE_KW_ELSE{ after(grammarAccess.getSelectionStatementAccess().getElseKW_ELSETerminalRuleCall_1_0_5_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionStatement__ElseStatementAssignment_1_0_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionStatementAccess().getElseStatementStatementParserRuleCall_1_0_5_1_0()); }
	ruleStatement{ after(grammarAccess.getSelectionStatementAccess().getElseStatementStatementParserRuleCall_1_0_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionStatement__SwitchAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionStatementAccess().getSwitchKW_SWITCHTerminalRuleCall_1_1_0_0()); }
	RULE_KW_SWITCH{ after(grammarAccess.getSelectionStatementAccess().getSwitchKW_SWITCHTerminalRuleCall_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionStatement__ExprAssignment_1_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionStatementAccess().getExprExpressionParserRuleCall_1_1_2_0()); }
	ruleExpression{ after(grammarAccess.getSelectionStatementAccess().getExprExpressionParserRuleCall_1_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionStatement__SwitchStatementAssignment_1_1_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionStatementAccess().getSwitchStatementStatementParserRuleCall_1_1_4_0()); }
	ruleStatement{ after(grammarAccess.getSelectionStatementAccess().getSwitchStatementStatementParserRuleCall_1_1_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__WhileAssignment_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterationStatementAccess().getWhileKW_WHILETerminalRuleCall_1_0_0_0()); }
	RULE_KW_WHILE{ after(grammarAccess.getIterationStatementAccess().getWhileKW_WHILETerminalRuleCall_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__ExprAssignment_1_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterationStatementAccess().getExprExpressionParserRuleCall_1_0_2_0()); }
	ruleExpression{ after(grammarAccess.getIterationStatementAccess().getExprExpressionParserRuleCall_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__StatementAssignment_1_0_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterationStatementAccess().getStatementStatementParserRuleCall_1_0_4_0()); }
	ruleStatement{ after(grammarAccess.getIterationStatementAccess().getStatementStatementParserRuleCall_1_0_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__DoAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterationStatementAccess().getDoKW_DOTerminalRuleCall_1_1_0_0()); }
	RULE_KW_DO{ after(grammarAccess.getIterationStatementAccess().getDoKW_DOTerminalRuleCall_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__StatementAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterationStatementAccess().getStatementStatementParserRuleCall_1_1_1_0()); }
	ruleStatement{ after(grammarAccess.getIterationStatementAccess().getStatementStatementParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__ExprAssignment_1_1_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterationStatementAccess().getExprExpressionParserRuleCall_1_1_4_0()); }
	ruleExpression{ after(grammarAccess.getIterationStatementAccess().getExprExpressionParserRuleCall_1_1_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__SemiAssignment_1_1_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterationStatementAccess().getSemiSEMITerminalRuleCall_1_1_6_0()); }
	RULE_SEMI{ after(grammarAccess.getIterationStatementAccess().getSemiSEMITerminalRuleCall_1_1_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__ForAssignment_1_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterationStatementAccess().getForKW_FORTerminalRuleCall_1_2_0_0()); }
	RULE_KW_FOR{ after(grammarAccess.getIterationStatementAccess().getForKW_FORTerminalRuleCall_1_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__InitExprAssignment_1_2_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterationStatementAccess().getInitExprExpressionParserRuleCall_1_2_2_0()); }
	ruleExpression{ after(grammarAccess.getIterationStatementAccess().getInitExprExpressionParserRuleCall_1_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__ExprAssignment_1_2_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterationStatementAccess().getExprExpressionParserRuleCall_1_2_4_0()); }
	ruleExpression{ after(grammarAccess.getIterationStatementAccess().getExprExpressionParserRuleCall_1_2_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__IncExprAssignment_1_2_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterationStatementAccess().getIncExprExpressionParserRuleCall_1_2_6_0()); }
	ruleExpression{ after(grammarAccess.getIterationStatementAccess().getIncExprExpressionParserRuleCall_1_2_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__StatementAssignment_1_2_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterationStatementAccess().getStatementStatementParserRuleCall_1_2_8_0()); }
	ruleStatement{ after(grammarAccess.getIterationStatementAccess().getStatementStatementParserRuleCall_1_2_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__ForAssignment_1_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterationStatementAccess().getForKW_FORTerminalRuleCall_1_3_0_0()); }
	RULE_KW_FOR{ after(grammarAccess.getIterationStatementAccess().getForKW_FORTerminalRuleCall_1_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__InitDeclAssignment_1_3_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterationStatementAccess().getInitDeclDeclarationParserRuleCall_1_3_2_0()); }
	ruleDeclaration{ after(grammarAccess.getIterationStatementAccess().getInitDeclDeclarationParserRuleCall_1_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__ExprAssignment_1_3_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterationStatementAccess().getExprExpressionParserRuleCall_1_3_3_0()); }
	ruleExpression{ after(grammarAccess.getIterationStatementAccess().getExprExpressionParserRuleCall_1_3_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__IncExprAssignment_1_3_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterationStatementAccess().getIncExprExpressionParserRuleCall_1_3_5_0()); }
	ruleExpression{ after(grammarAccess.getIterationStatementAccess().getIncExprExpressionParserRuleCall_1_3_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__StatementAssignment_1_3_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterationStatementAccess().getStatementStatementParserRuleCall_1_3_7_0()); }
	ruleStatement{ after(grammarAccess.getIterationStatementAccess().getStatementStatementParserRuleCall_1_3_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JumpStatement__ContinueAssignment_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJumpStatementAccess().getContinueKW_CONTINUETerminalRuleCall_1_0_0_0()); }
	RULE_KW_CONTINUE{ after(grammarAccess.getJumpStatementAccess().getContinueKW_CONTINUETerminalRuleCall_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JumpStatement__SemiAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJumpStatementAccess().getSemiSEMITerminalRuleCall_1_0_1_0()); }
	RULE_SEMI{ after(grammarAccess.getJumpStatementAccess().getSemiSEMITerminalRuleCall_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JumpStatement__BreakAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJumpStatementAccess().getBreakKW_BREAKTerminalRuleCall_1_1_0_0()); }
	RULE_KW_BREAK{ after(grammarAccess.getJumpStatementAccess().getBreakKW_BREAKTerminalRuleCall_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JumpStatement__SemiAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJumpStatementAccess().getSemiSEMITerminalRuleCall_1_1_1_0()); }
	RULE_SEMI{ after(grammarAccess.getJumpStatementAccess().getSemiSEMITerminalRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JumpStatement__ReturnAssignment_1_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJumpStatementAccess().getReturnKW_RETURNTerminalRuleCall_1_2_0_0()); }
	RULE_KW_RETURN{ after(grammarAccess.getJumpStatementAccess().getReturnKW_RETURNTerminalRuleCall_1_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JumpStatement__ExprAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJumpStatementAccess().getExprExpressionParserRuleCall_1_2_1_0()); }
	ruleExpression{ after(grammarAccess.getJumpStatementAccess().getExprExpressionParserRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JumpStatement__SemiAssignment_1_2_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJumpStatementAccess().getSemiSEMITerminalRuleCall_1_2_2_0()); }
	RULE_SEMI{ after(grammarAccess.getJumpStatementAccess().getSemiSEMITerminalRuleCall_1_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JumpStatement__GotoAssignment_1_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJumpStatementAccess().getGotoKW_GOTOTerminalRuleCall_1_3_0_0()); }
	RULE_KW_GOTO{ after(grammarAccess.getJumpStatementAccess().getGotoKW_GOTOTerminalRuleCall_1_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JumpStatement__ExprAssignment_1_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJumpStatementAccess().getExprUnaryExpressionParserRuleCall_1_3_1_0()); }
	ruleUnaryExpression{ after(grammarAccess.getJumpStatementAccess().getExprUnaryExpressionParserRuleCall_1_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JumpStatement__SemiAssignment_1_3_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJumpStatementAccess().getSemiSEMITerminalRuleCall_1_3_2_0()); }
	RULE_SEMI{ after(grammarAccess.getJumpStatementAccess().getSemiSEMITerminalRuleCall_1_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AsmStatement__AsmAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAsmStatementAccess().getAsmKW_ASM1TerminalRuleCall_1_0_0()); }
	RULE_KW_ASM1{ after(grammarAccess.getAsmStatementAccess().getAsmKW_ASM1TerminalRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AsmStatement__AsmAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAsmStatementAccess().getAsmKW_ASM2TerminalRuleCall_1_1_0()); }
	RULE_KW_ASM2{ after(grammarAccess.getAsmStatementAccess().getAsmKW_ASM2TerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AsmStatement__VolatileAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAsmStatementAccess().getVolatileKW_VOLATILETerminalRuleCall_2_0_0()); }
	RULE_KW_VOLATILE{ after(grammarAccess.getAsmStatementAccess().getVolatileKW_VOLATILETerminalRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AsmStatement__VolatileAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAsmStatementAccess().getVolatileKW_VOLATILE2TerminalRuleCall_2_1_0()); }
	RULE_KW_VOLATILE2{ after(grammarAccess.getAsmStatementAccess().getVolatileKW_VOLATILE2TerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AsmStatement__AsmLineAssignment_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAsmStatementAccess().getAsmLineAsmLineWithColonParserRuleCall_4_0_0()); }
	ruleAsmLineWithColon{ after(grammarAccess.getAsmStatementAccess().getAsmLineAsmLineWithColonParserRuleCall_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AsmStatement__AsmLineAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAsmStatementAccess().getAsmLineAsmLineWithCommaParserRuleCall_4_1_0()); }
	ruleAsmLineWithComma{ after(grammarAccess.getAsmStatementAccess().getAsmLineAsmLineWithCommaParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AsmStatement__SemiAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAsmStatementAccess().getSemiSEMITerminalRuleCall_6_0()); }
	RULE_SEMI{ after(grammarAccess.getAsmStatementAccess().getSemiSEMITerminalRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AsmLineWithColon__ColonAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAsmLineWithColonAccess().getColonCOLONTerminalRuleCall_1_0()); }
	RULE_COLON{ after(grammarAccess.getAsmLineWithColonAccess().getColonCOLONTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AsmLineWithColon__ExprAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAsmLineWithColonAccess().getExprLogicalOrExpressionParserRuleCall_2_0()); }
	ruleLogicalOrExpression{ after(grammarAccess.getAsmLineWithColonAccess().getExprLogicalOrExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AsmLineWithComma__ExprAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAsmLineWithCommaAccess().getExprLogicalOrExpressionParserRuleCall_2_0()); }
	ruleLogicalOrExpression{ after(grammarAccess.getAsmLineWithCommaAccess().getExprLogicalOrExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__ExprExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getExprExprAssignmentExpressionParserRuleCall_1_0()); }
	ruleAssignmentExpression{ after(grammarAccess.getExpressionAccess().getExprExprAssignmentExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__ExprExprAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getExprExprAssignmentExpressionParserRuleCall_2_1_0()); }
	ruleAssignmentExpression{ after(grammarAccess.getExpressionAccess().getExprExprAssignmentExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__ExprAssignment_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentExpressionAccess().getExprLvalueParserRuleCall_1_0_0_0()); }
	ruleLvalue{ after(grammarAccess.getAssignmentExpressionAccess().getExprLvalueParserRuleCall_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__OpAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentExpressionAccess().getOpAssignmentOperatorParserRuleCall_1_0_1_0()); }
	ruleAssignmentOperator{ after(grammarAccess.getAssignmentExpressionAccess().getOpAssignmentOperatorParserRuleCall_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__AssignmentExprAssignment_1_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentExpressionAccess().getAssignmentExprAssignmentExpressionParserRuleCall_1_0_2_0()); }
	ruleAssignmentExpression{ after(grammarAccess.getAssignmentExpressionAccess().getAssignmentExprAssignmentExpressionParserRuleCall_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__ExprAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentExpressionAccess().getExprConditionalExpressionParserRuleCall_1_1_0()); }
	ruleConditionalExpression{ after(grammarAccess.getAssignmentExpressionAccess().getExprConditionalExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentOperator__OpAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentOperatorAccess().getOpASSIGNTerminalRuleCall_1_0_0()); }
	RULE_ASSIGN{ after(grammarAccess.getAssignmentOperatorAccess().getOpASSIGNTerminalRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentOperator__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentOperatorAccess().getOpSTARASSIGNTerminalRuleCall_1_1_0()); }
	RULE_STARASSIGN{ after(grammarAccess.getAssignmentOperatorAccess().getOpSTARASSIGNTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentOperator__OpAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentOperatorAccess().getOpDIVASSIGNTerminalRuleCall_1_2_0()); }
	RULE_DIVASSIGN{ after(grammarAccess.getAssignmentOperatorAccess().getOpDIVASSIGNTerminalRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentOperator__OpAssignment_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentOperatorAccess().getOpMODASSIGNTerminalRuleCall_1_3_0()); }
	RULE_MODASSIGN{ after(grammarAccess.getAssignmentOperatorAccess().getOpMODASSIGNTerminalRuleCall_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentOperator__OpAssignment_1_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentOperatorAccess().getOpPLUSASSIGNTerminalRuleCall_1_4_0()); }
	RULE_PLUSASSIGN{ after(grammarAccess.getAssignmentOperatorAccess().getOpPLUSASSIGNTerminalRuleCall_1_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentOperator__OpAssignment_1_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentOperatorAccess().getOpMINUSASSIGNTerminalRuleCall_1_5_0()); }
	RULE_MINUSASSIGN{ after(grammarAccess.getAssignmentOperatorAccess().getOpMINUSASSIGNTerminalRuleCall_1_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentOperator__OpAssignment_1_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentOperatorAccess().getOpLEFTSHIFTASSIGNTerminalRuleCall_1_6_0()); }
	RULE_LEFTSHIFTASSIGN{ after(grammarAccess.getAssignmentOperatorAccess().getOpLEFTSHIFTASSIGNTerminalRuleCall_1_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentOperator__OpAssignment_1_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentOperatorAccess().getOpRIGHTSHIFTASSIGNTerminalRuleCall_1_7_0()); }
	RULE_RIGHTSHIFTASSIGN{ after(grammarAccess.getAssignmentOperatorAccess().getOpRIGHTSHIFTASSIGNTerminalRuleCall_1_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentOperator__OpAssignment_1_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentOperatorAccess().getOpANDASSIGNTerminalRuleCall_1_8_0()); }
	RULE_ANDASSIGN{ after(grammarAccess.getAssignmentOperatorAccess().getOpANDASSIGNTerminalRuleCall_1_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentOperator__OpAssignment_1_9
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentOperatorAccess().getOpXORASSIGNTerminalRuleCall_1_9_0()); }
	RULE_XORASSIGN{ after(grammarAccess.getAssignmentOperatorAccess().getOpXORASSIGNTerminalRuleCall_1_9_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentOperator__OpAssignment_1_10
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentOperatorAccess().getOpORASSIGNTerminalRuleCall_1_10_0()); }
	RULE_ORASSIGN{ after(grammarAccess.getAssignmentOperatorAccess().getOpORASSIGNTerminalRuleCall_1_10_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getExprLogicalOrExpressionParserRuleCall_1_0()); }
	ruleLogicalOrExpression{ after(grammarAccess.getConditionalExpressionAccess().getExprLogicalOrExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__QExprAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getQExprExpressionParserRuleCall_2_1_0()); }
	ruleExpression{ after(grammarAccess.getConditionalExpressionAccess().getQExprExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__CExprAssignment_2_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getCExprConditionalExpressionParserRuleCall_2_3_0()); }
	ruleConditionalExpression{ after(grammarAccess.getConditionalExpressionAccess().getCExprConditionalExpressionParserRuleCall_2_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getExprLogicalAndExpressionParserRuleCall_1_0()); }
	ruleLogicalAndExpression{ after(grammarAccess.getLogicalOrExpressionAccess().getExprLogicalAndExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__ExprAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getExprLogicalAndExpressionParserRuleCall_2_1_0()); }
	ruleLogicalAndExpression{ after(grammarAccess.getLogicalOrExpressionAccess().getExprLogicalAndExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getExprInclusiveOrExpressionParserRuleCall_1_0()); }
	ruleInclusiveOrExpression{ after(grammarAccess.getLogicalAndExpressionAccess().getExprInclusiveOrExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__ExprAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getExprInclusiveOrExpressionParserRuleCall_2_1_0()); }
	ruleInclusiveOrExpression{ after(grammarAccess.getLogicalAndExpressionAccess().getExprInclusiveOrExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InclusiveOrExpression__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInclusiveOrExpressionAccess().getExprExclusiveOrExpressionParserRuleCall_1_0()); }
	ruleExclusiveOrExpression{ after(grammarAccess.getInclusiveOrExpressionAccess().getExprExclusiveOrExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InclusiveOrExpression__ExprAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInclusiveOrExpressionAccess().getExprExclusiveOrExpressionParserRuleCall_2_1_0()); }
	ruleExclusiveOrExpression{ after(grammarAccess.getInclusiveOrExpressionAccess().getExprExclusiveOrExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExclusiveOrExpression__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExclusiveOrExpressionAccess().getExprAndExpressionParserRuleCall_1_0()); }
	ruleAndExpression{ after(grammarAccess.getExclusiveOrExpressionAccess().getExprAndExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExclusiveOrExpression__ExprAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExclusiveOrExpressionAccess().getExprAndExpressionParserRuleCall_2_1_0()); }
	ruleAndExpression{ after(grammarAccess.getExclusiveOrExpressionAccess().getExprAndExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getExprEqualityExpressionParserRuleCall_1_0()); }
	ruleEqualityExpression{ after(grammarAccess.getAndExpressionAccess().getExprEqualityExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__ExprAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getExprEqualityExpressionParserRuleCall_2_1_0()); }
	ruleEqualityExpression{ after(grammarAccess.getAndExpressionAccess().getExprEqualityExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getExprRelationalExpressionParserRuleCall_1_0()); }
	ruleRelationalExpression{ after(grammarAccess.getEqualityExpressionAccess().getExprRelationalExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__OpAssignment_2_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getOpEQUALTerminalRuleCall_2_0_0_0()); }
	RULE_EQUAL{ after(grammarAccess.getEqualityExpressionAccess().getOpEQUALTerminalRuleCall_2_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__OpAssignment_2_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getOpNOTEQUALTerminalRuleCall_2_0_1_0()); }
	RULE_NOTEQUAL{ after(grammarAccess.getEqualityExpressionAccess().getOpNOTEQUALTerminalRuleCall_2_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__ExprAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getExprRelationalExpressionParserRuleCall_2_1_0()); }
	ruleRelationalExpression{ after(grammarAccess.getEqualityExpressionAccess().getExprRelationalExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getExprShiftExpressionParserRuleCall_1_0()); }
	ruleShiftExpression{ after(grammarAccess.getRelationalExpressionAccess().getExprShiftExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__OpAssignment_2_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOpLESSTerminalRuleCall_2_0_0_0()); }
	RULE_LESS{ after(grammarAccess.getRelationalExpressionAccess().getOpLESSTerminalRuleCall_2_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__OpAssignment_2_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOpGREATERTerminalRuleCall_2_0_1_0()); }
	RULE_GREATER{ after(grammarAccess.getRelationalExpressionAccess().getOpGREATERTerminalRuleCall_2_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__OpAssignment_2_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOpLESSEQUALTerminalRuleCall_2_0_2_0()); }
	RULE_LESSEQUAL{ after(grammarAccess.getRelationalExpressionAccess().getOpLESSEQUALTerminalRuleCall_2_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__OpAssignment_2_0_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOpGREATEREQUALTerminalRuleCall_2_0_3_0()); }
	RULE_GREATEREQUAL{ after(grammarAccess.getRelationalExpressionAccess().getOpGREATEREQUALTerminalRuleCall_2_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__ExprAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getExprShiftExpressionParserRuleCall_2_1_0()); }
	ruleShiftExpression{ after(grammarAccess.getRelationalExpressionAccess().getExprShiftExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftExpressionAccess().getExprAdditiveExpressionParserRuleCall_1_0()); }
	ruleAdditiveExpression{ after(grammarAccess.getShiftExpressionAccess().getExprAdditiveExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__OpAssignment_2_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftExpressionAccess().getOpLEFTSHIFTTerminalRuleCall_2_0_0_0()); }
	RULE_LEFTSHIFT{ after(grammarAccess.getShiftExpressionAccess().getOpLEFTSHIFTTerminalRuleCall_2_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__OpAssignment_2_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftExpressionAccess().getOpRIGHTSHIFTTerminalRuleCall_2_0_1_0()); }
	RULE_RIGHTSHIFT{ after(grammarAccess.getShiftExpressionAccess().getOpRIGHTSHIFTTerminalRuleCall_2_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__ExprAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftExpressionAccess().getExprAdditiveExpressionParserRuleCall_2_1_0()); }
	ruleAdditiveExpression{ after(grammarAccess.getShiftExpressionAccess().getExprAdditiveExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getExprMultiplicativeExpressionParserRuleCall_1_0()); }
	ruleMultiplicativeExpression{ after(grammarAccess.getAdditiveExpressionAccess().getExprMultiplicativeExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__OpAssignment_2_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOpPLUSTerminalRuleCall_2_0_0_0()); }
	RULE_PLUS{ after(grammarAccess.getAdditiveExpressionAccess().getOpPLUSTerminalRuleCall_2_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__OpAssignment_2_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOpMINUSTerminalRuleCall_2_0_1_0()); }
	RULE_MINUS{ after(grammarAccess.getAdditiveExpressionAccess().getOpMINUSTerminalRuleCall_2_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__ExprAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getExprMultiplicativeExpressionParserRuleCall_2_1_0()); }
	ruleMultiplicativeExpression{ after(grammarAccess.getAdditiveExpressionAccess().getExprMultiplicativeExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getExprCastExpressionParserRuleCall_1_0()); }
	ruleCastExpression{ after(grammarAccess.getMultiplicativeExpressionAccess().getExprCastExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__OpAssignment_2_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpSTARTerminalRuleCall_2_0_0_0()); }
	RULE_STAR{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpSTARTerminalRuleCall_2_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__OpAssignment_2_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpDIVTerminalRuleCall_2_0_1_0()); }
	RULE_DIV{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpDIVTerminalRuleCall_2_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__OpAssignment_2_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpMODTerminalRuleCall_2_0_2_0()); }
	RULE_MOD{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpMODTerminalRuleCall_2_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__ExprAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getExprCastExpressionParserRuleCall_2_1_0()); }
	ruleCastExpression{ after(grammarAccess.getMultiplicativeExpressionAccess().getExprCastExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CastExpression__ExprAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastExpressionAccess().getExprUnaryExpressionParserRuleCall_1_0_0()); }
	ruleUnaryExpression{ after(grammarAccess.getCastExpressionAccess().getExprUnaryExpressionParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CastExpression__TypeAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastExpressionAccess().getTypeTypeNameParserRuleCall_1_1_1_0()); }
	ruleTypeName{ after(grammarAccess.getCastExpressionAccess().getTypeTypeNameParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CastExpression__ExprAssignment_1_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastExpressionAccess().getExprCastExpressionParserRuleCall_1_1_3_0()); }
	ruleCastExpression{ after(grammarAccess.getCastExpressionAccess().getExprCastExpressionParserRuleCall_1_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__ExprAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getExprPostfixExpressionParserRuleCall_1_0_0()); }
	rulePostfixExpression{ after(grammarAccess.getUnaryExpressionAccess().getExprPostfixExpressionParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__PlusplusAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getPlusplusPLUSPLUSTerminalRuleCall_1_1_0_0()); }
	RULE_PLUSPLUS{ after(grammarAccess.getUnaryExpressionAccess().getPlusplusPLUSPLUSTerminalRuleCall_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__ExprAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getExprUnaryExpressionParserRuleCall_1_1_1_0()); }
	ruleUnaryExpression{ after(grammarAccess.getUnaryExpressionAccess().getExprUnaryExpressionParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__MinusminusAssignment_1_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getMinusminusMINUSMINUSTerminalRuleCall_1_2_0_0()); }
	RULE_MINUSMINUS{ after(grammarAccess.getUnaryExpressionAccess().getMinusminusMINUSMINUSTerminalRuleCall_1_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__ExprAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getExprUnaryExpressionParserRuleCall_1_2_1_0()); }
	ruleUnaryExpression{ after(grammarAccess.getUnaryExpressionAccess().getExprUnaryExpressionParserRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__OpAssignment_1_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getOpUnaryOperatorParserRuleCall_1_3_0_0()); }
	ruleUnaryOperator{ after(grammarAccess.getUnaryExpressionAccess().getOpUnaryOperatorParserRuleCall_1_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__ExprAssignment_1_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getExprCastExpressionParserRuleCall_1_3_1_0()); }
	ruleCastExpression{ after(grammarAccess.getUnaryExpressionAccess().getExprCastExpressionParserRuleCall_1_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__SizeOfAssignment_1_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getSizeOfKW_SIZEOFTerminalRuleCall_1_4_0_0()); }
	RULE_KW_SIZEOF{ after(grammarAccess.getUnaryExpressionAccess().getSizeOfKW_SIZEOFTerminalRuleCall_1_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__TypeNameAssignment_1_4_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getTypeNameTypeNameParserRuleCall_1_4_2_0()); }
	ruleTypeName{ after(grammarAccess.getUnaryExpressionAccess().getTypeNameTypeNameParserRuleCall_1_4_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__SizeOfAssignment_1_5_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getSizeOfKW_SIZEOFTerminalRuleCall_1_5_0_0()); }
	RULE_KW_SIZEOF{ after(grammarAccess.getUnaryExpressionAccess().getSizeOfKW_SIZEOFTerminalRuleCall_1_5_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__ExprAssignment_1_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getExprUnaryExpressionParserRuleCall_1_5_1_0()); }
	ruleUnaryExpression{ after(grammarAccess.getUnaryExpressionAccess().getExprUnaryExpressionParserRuleCall_1_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__AndandAssignment_1_6_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getAndandANDANDTerminalRuleCall_1_6_0_0()); }
	RULE_ANDAND{ after(grammarAccess.getUnaryExpressionAccess().getAndandANDANDTerminalRuleCall_1_6_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__IdAssignment_1_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getIdIDTerminalRuleCall_1_6_1_0()); }
	RULE_ID{ after(grammarAccess.getUnaryExpressionAccess().getIdIDTerminalRuleCall_1_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperator__OpAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperatorAccess().getOpANDTerminalRuleCall_1_0_0()); }
	RULE_AND{ after(grammarAccess.getUnaryOperatorAccess().getOpANDTerminalRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperator__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperatorAccess().getOpSTARTerminalRuleCall_1_1_0()); }
	RULE_STAR{ after(grammarAccess.getUnaryOperatorAccess().getOpSTARTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperator__OpAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperatorAccess().getOpPLUSTerminalRuleCall_1_2_0()); }
	RULE_PLUS{ after(grammarAccess.getUnaryOperatorAccess().getOpPLUSTerminalRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperator__OpAssignment_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperatorAccess().getOpMINUSTerminalRuleCall_1_3_0()); }
	RULE_MINUS{ after(grammarAccess.getUnaryOperatorAccess().getOpMINUSTerminalRuleCall_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperator__OpAssignment_1_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperatorAccess().getOpTILDETerminalRuleCall_1_4_0()); }
	RULE_TILDE{ after(grammarAccess.getUnaryOperatorAccess().getOpTILDETerminalRuleCall_1_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperator__OpAssignment_1_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperatorAccess().getOpNOTTerminalRuleCall_1_5_0()); }
	RULE_NOT{ after(grammarAccess.getUnaryOperatorAccess().getOpNOTTerminalRuleCall_1_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpression__ExprAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixExpressionAccess().getExprPrimaryExpressionParserRuleCall_1_0_0()); }
	rulePrimaryExpression{ after(grammarAccess.getPostfixExpressionAccess().getExprPrimaryExpressionParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpression__ArrayExprAssignment_1_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixExpressionAccess().getArrayExprExpressionParserRuleCall_1_1_0_1_0()); }
	ruleExpression{ after(grammarAccess.getPostfixExpressionAccess().getArrayExprExpressionParserRuleCall_1_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpression__ArgumentExpressionListAssignment_1_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixExpressionAccess().getArgumentExpressionListArgumentExpressionListParserRuleCall_1_1_1_1_0()); }
	ruleArgumentExpressionList{ after(grammarAccess.getPostfixExpressionAccess().getArgumentExpressionListArgumentExpressionListParserRuleCall_1_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpression__DotAssignment_1_1_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixExpressionAccess().getDotDOTTerminalRuleCall_1_1_2_0_0()); }
	RULE_DOT{ after(grammarAccess.getPostfixExpressionAccess().getDotDOTTerminalRuleCall_1_1_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpression__IdAssignment_1_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixExpressionAccess().getIdIDTerminalRuleCall_1_1_2_1_0()); }
	RULE_ID{ after(grammarAccess.getPostfixExpressionAccess().getIdIDTerminalRuleCall_1_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpression__ArrowAssignment_1_1_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixExpressionAccess().getArrowARROWTerminalRuleCall_1_1_3_0_0()); }
	RULE_ARROW{ after(grammarAccess.getPostfixExpressionAccess().getArrowARROWTerminalRuleCall_1_1_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpression__IdAssignment_1_1_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixExpressionAccess().getIdIDTerminalRuleCall_1_1_3_1_0()); }
	RULE_ID{ after(grammarAccess.getPostfixExpressionAccess().getIdIDTerminalRuleCall_1_1_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpression__PlusplusAssignment_1_1_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixExpressionAccess().getPlusplusPLUSPLUSTerminalRuleCall_1_1_4_0()); }
	RULE_PLUSPLUS{ after(grammarAccess.getPostfixExpressionAccess().getPlusplusPLUSPLUSTerminalRuleCall_1_1_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpression__MinusminusAssignment_1_1_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixExpressionAccess().getMinusminusMINUSMINUSTerminalRuleCall_1_1_5_0()); }
	RULE_MINUSMINUS{ after(grammarAccess.getPostfixExpressionAccess().getMinusminusMINUSMINUSTerminalRuleCall_1_1_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentExpressionList__ExprAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentExpressionListAccess().getExprAssignmentExpressionParserRuleCall_0_0()); }
	ruleAssignmentExpression{ after(grammarAccess.getArgumentExpressionListAccess().getExprAssignmentExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentExpressionList__ExprAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentExpressionListAccess().getExprAssignmentExpressionParserRuleCall_1_1_0()); }
	ruleAssignmentExpression{ after(grammarAccess.getArgumentExpressionListAccess().getExprAssignmentExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__IdAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getIdIDTerminalRuleCall_1_0_0()); }
	RULE_ID{ after(grammarAccess.getPrimaryExpressionAccess().getIdIDTerminalRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__ConstAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getConstConstantParserRuleCall_1_1_0()); }
	ruleConstant{ after(grammarAccess.getPrimaryExpressionAccess().getConstConstantParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__ExprAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getExprExpressionParserRuleCall_1_2_1_0()); }
	ruleExpression{ after(grammarAccess.getPrimaryExpressionAccess().getExprExpressionParserRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__HexAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getHexHEX_LITERALTerminalRuleCall_1_0_0()); }
	RULE_HEX_LITERAL{ after(grammarAccess.getConstantAccess().getHexHEX_LITERALTerminalRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__OctAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getOctOCTAL_LITERALTerminalRuleCall_1_1_0()); }
	RULE_OCTAL_LITERAL{ after(grammarAccess.getConstantAccess().getOctOCTAL_LITERALTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__DecAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getDecDECIMAL_LITERALTerminalRuleCall_1_2_0()); }
	RULE_DECIMAL_LITERAL{ after(grammarAccess.getConstantAccess().getDecDECIMAL_LITERALTerminalRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__ChAssignment_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getChCHAR_LITERALTerminalRuleCall_1_3_0()); }
	RULE_CHAR_LITERAL{ after(grammarAccess.getConstantAccess().getChCHAR_LITERALTerminalRuleCall_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__StrAssignment_1_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getStrSTRING_LITERALTerminalRuleCall_1_4_0()); }
	RULE_STRING_LITERAL{ after(grammarAccess.getConstantAccess().getStrSTRING_LITERALTerminalRuleCall_1_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__FloatAssignment_1_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getFloatFLOAT_LITERALTerminalRuleCall_1_5_0()); }
	RULE_FLOAT_LITERAL{ after(grammarAccess.getConstantAccess().getFloatFLOAT_LITERALTerminalRuleCall_1_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__BinAssignment_1_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getBinBIN_LITERALTerminalRuleCall_1_6_0()); }
	RULE_BIN_LITERAL{ after(grammarAccess.getConstantAccess().getBinBIN_LITERALTerminalRuleCall_1_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantExpression__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantExpressionAccess().getExprConditionalExpressionParserRuleCall_1_0()); }
	ruleConditionalExpression{ after(grammarAccess.getConstantExpressionAccess().getExprConditionalExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


fragment RULE_KW_UNDERSCORE : '_';

RULE_KW_AUTO : 'auto';

RULE_KW_BREAK : 'break';

RULE_KW_CASE : 'case';

RULE_KW_CHAR : 'char';

RULE_KW_CONST : 'const';

RULE_KW_CONTINUE : 'continue';

RULE_KW_DEFAULT : 'default';

RULE_KW_DO : 'do';

RULE_KW_DOUBLE : 'double';

RULE_KW_ELSE : 'else';

RULE_KW_ENUM : 'enum';

RULE_KW_EXTERN : 'extern';

RULE_KW_FLOAT : 'float';

RULE_KW_FOR : 'for';

RULE_KW_GOTO : 'goto';

RULE_KW_IF : 'if';

RULE_KW_INLINE : 'inline';

RULE_KW_INT : 'int';

RULE_KW_LONG : 'long';

RULE_KW_REGISTER : 'register';

RULE_KW_RESTRICT : 'restrict';

RULE_KW_RETURN : 'return';

RULE_KW_SHORT : 'short';

RULE_KW_SIGNED : 'signed';

RULE_KW_SIZEOF : 'sizeof';

RULE_KW_STATIC : 'static';

RULE_KW_STRUCT : 'struct';

RULE_KW_SWITCH : 'switch';

RULE_KW_TYPEDEF : 'typedef';

RULE_KW_UNION : 'union';

RULE_KW_UNSIGNED : 'unsigned';

RULE_KW_VOID : 'void';

RULE_KW_VOLATILE : 'volatile';

RULE_KW_WHILE : 'while';

RULE_KW_ALIGNAS : '_Alignas';

RULE_KW_ALIGNOF : '_Alignof';

RULE_KW_ASM1 : RULE_KW_UNDERSCORE RULE_KW_UNDERSCORE 'asm';

RULE_KW_ASM2 : RULE_KW_ASM1 RULE_KW_UNDERSCORE RULE_KW_UNDERSCORE;

RULE_KW_ATOMIC : '_Atomic';

RULE_KW_BOOL : '_Bool';

RULE_KW_COMPLEX : '_Complex';

RULE_KW_GENERIC : '_Generic';

RULE_KW_IMAGINARY : '_Imaginary';

RULE_KW_NORETURN : '_Noreturn';

RULE_KW_STATICASSERT : '_Static_assert';

RULE_KW_THREADLOCAL : '_Thread_local';

RULE_KW_PRAGMA : 'pragma';

RULE_KW_VOLATILE2 : RULE_KW_UNDERSCORE RULE_KW_UNDERSCORE RULE_KW_VOLATILE RULE_KW_UNDERSCORE RULE_KW_UNDERSCORE;

RULE_LEFTPAREN : '(';

RULE_RIGHTPAREN : ')';

RULE_LEFTBRACKET : '[';

RULE_RIGHTBRACKET : ']';

RULE_LEFTBRACE : '{';

RULE_RIGHTBRACE : '}';

RULE_LESS : '<';

RULE_LESSEQUAL : RULE_LESS RULE_ASSIGN;

RULE_GREATER : '>';

RULE_GREATEREQUAL : RULE_GREATER RULE_ASSIGN;

RULE_LEFTSHIFT : RULE_LESS RULE_LESS;

RULE_RIGHTSHIFT : RULE_GREATER RULE_GREATER;

RULE_PLUS : '+';

RULE_PLUSPLUS : RULE_PLUS RULE_PLUS;

RULE_MINUS : '-';

RULE_MINUSMINUS : RULE_MINUS RULE_MINUS;

RULE_STAR : '*';

RULE_DIV : '/';

RULE_MOD : '%';

RULE_AND : '&';

RULE_ANDAND : RULE_AND RULE_AND;

RULE_OR : '|';

RULE_OROR : RULE_OR RULE_OR;

RULE_CARET : '^';

RULE_NOT : '!';

RULE_TILDE : '~';

RULE_QUESTION : '?';

RULE_COLON : ':';

RULE_SEMI : ';';

RULE_COMMA : ',';

RULE_ASSIGN : '=';

RULE_STARASSIGN : RULE_STAR RULE_ASSIGN;

RULE_DIVASSIGN : RULE_DIV RULE_ASSIGN;

RULE_MODASSIGN : RULE_MOD RULE_ASSIGN;

RULE_PLUSASSIGN : RULE_PLUS RULE_ASSIGN;

RULE_MINUSASSIGN : RULE_MINUS RULE_ASSIGN;

RULE_LEFTSHIFTASSIGN : RULE_LEFTSHIFT RULE_ASSIGN;

RULE_RIGHTSHIFTASSIGN : RULE_RIGHTSHIFT RULE_ASSIGN;

RULE_ANDASSIGN : RULE_AND RULE_ASSIGN;

RULE_XORASSIGN : RULE_CARET RULE_ASSIGN;

RULE_ORASSIGN : RULE_OR RULE_ASSIGN;

RULE_EQUAL : RULE_ASSIGN RULE_ASSIGN;

RULE_NOTEQUAL : RULE_NOT RULE_ASSIGN;

RULE_ARROW : RULE_MINUS RULE_GREATER;

RULE_DOT : '.';

RULE_ELLIPSIS : RULE_DOT RULE_DOT RULE_DOT;

fragment RULE_SINGLEQUOTE : '\'';

fragment RULE_DOUBLEQUOTE : '"';

fragment RULE_BACKSLASH : '\\';

RULE_ID : RULE_IDENTIFIER;

fragment RULE_IDENTIFIER : RULE_LETTER (RULE_LETTER|'0'..'9')*;

fragment RULE_LETTER : ('$'|'A'..'Z'|'a'..'z'|RULE_KW_UNDERSCORE);

RULE_CHAR_LITERAL : RULE_SINGLEQUOTE (RULE_ESCAPE_SEQUENCE|~((RULE_SINGLEQUOTE|RULE_BACKSLASH))) RULE_SINGLEQUOTE;

RULE_STRING_LITERAL : RULE_DOUBLEQUOTE (RULE_ESCAPE_SEQUENCE|~((RULE_BACKSLASH|RULE_DOUBLEQUOTE)))* RULE_DOUBLEQUOTE;

RULE_HEX_LITERAL : '0' ('x'|'X') RULE_HEX_DIGIT+ RULE_INTEGER_TYPE_SUFFIX?;

RULE_DECIMAL_LITERAL : ('0'|'1'..'9' ('0'..'9')*) RULE_INTEGER_TYPE_SUFFIX?;

RULE_OCTAL_LITERAL : '0' ('0'..'7')+ RULE_INTEGER_TYPE_SUFFIX?;

RULE_BIN_LITERAL : ('0b'|'0B') ('0'..'1')+;

fragment RULE_HEX_DIGIT : ('0'..'9'|'a'..'f'|'A'..'F');

fragment RULE_INTEGER_TYPE_SUFFIX : (('u'|'U')? ('l'|'L')|('u'|'U') ('l'|'L')?);

RULE_FLOAT_LITERAL : (('0'..'9')+ RULE_DOT ('0'..'9')* RULE_EXPONENT? RULE_FLOAT_TYPE_SUFFIX?|RULE_DOT ('0'..'9')+ RULE_EXPONENT? RULE_FLOAT_TYPE_SUFFIX?|('0'..'9')+ RULE_EXPONENT RULE_FLOAT_TYPE_SUFFIX?|('0'..'9')+ RULE_EXPONENT? RULE_FLOAT_TYPE_SUFFIX);

fragment RULE_EXPONENT : ('e'|'E') ('+'|'-')? ('0'..'9')+;

fragment RULE_FLOAT_TYPE_SUFFIX : ('f'|'F'|'d'|'D');

fragment RULE_ESCAPE_SEQUENCE : (RULE_BACKSLASH ('b'|'t'|'n'|'f'|'r'|'"'|RULE_SINGLEQUOTE|RULE_BACKSLASH)|RULE_OCTAL_ESCAPE);

fragment RULE_OCTAL_ESCAPE : (RULE_BACKSLASH '0'..'3' '0'..'7' '0'..'7'|RULE_BACKSLASH '0'..'7' '0'..'7'|RULE_BACKSLASH '0'..'7');

fragment RULE_UNICODE_ESCAPE : RULE_BACKSLASH 'u' RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT;

RULE_LINEDIRECTIVE : '#' (~(RULE_NEWLINE)|RULE_BACKSLASH RULE_NEWLINE)*;

RULE_WHITESPACE : (' '|'\t')+;

RULE_BLOCK_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_LINE_COMMENT : '//' ~(RULE_NEWLINE)*;

RULE_NEWLINE : ('\r'|'\n');


