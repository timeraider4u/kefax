/*
 * generated by Xtext 2.9.0-SNAPSHOT
 */
package at.jku.weiner.c.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractParserRuleElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUnitTranslationUnitParserRuleCall_1_0 = (RuleCall)cUnitAssignment_1.eContents().get(0);
		
		/// *** parser *** / Model:
		//	{Model} unit+=TranslationUnit?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Model} unit+=TranslationUnit?
		public Group getGroup() { return cGroup; }
		
		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }
		
		//unit+=TranslationUnit?
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }
		
		//TranslationUnit
		public RuleCall getUnitTranslationUnitParserRuleCall_1_0() { return cUnitTranslationUnitParserRuleCall_1_0; }
	}
	public class TranslationUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.TranslationUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTranslationUnitAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExternalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExternalExternalDeclarationParserRuleCall_1_0 = (RuleCall)cExternalAssignment_1.eContents().get(0);
		
		//TranslationUnit initRuleAction { at.jku.weiner.c.Scope.createNewScope("TranslationUnit"); } afterRuleAction {
		//at.jku.weiner.c.Scope.removeScope(); }:
		//	{TranslationUnit} external+=ExternalDeclaration+;
		@Override public ParserRule getRule() { return rule; }
		
		//{TranslationUnit} external+=ExternalDeclaration+
		public Group getGroup() { return cGroup; }
		
		//{TranslationUnit}
		public Action getTranslationUnitAction_0() { return cTranslationUnitAction_0; }
		
		//external+=ExternalDeclaration+
		public Assignment getExternalAssignment_1() { return cExternalAssignment_1; }
		
		//ExternalDeclaration
		public RuleCall getExternalExternalDeclarationParserRuleCall_1_0() { return cExternalExternalDeclarationParserRuleCall_1_0; }
	}
	public class ExternalDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.ExternalDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExternalDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Assignment cFunctiondefHeadAssignment_1_0_0_0 = (Assignment)cGroup_1_0_0.eContents().get(0);
		private final RuleCall cFunctiondefHeadFunctionDefHeadParserRuleCall_1_0_0_0_0 = (RuleCall)cFunctiondefHeadAssignment_1_0_0_0.eContents().get(0);
		private final RuleCall cLEFTBRACETerminalRuleCall_1_0_0_1 = (RuleCall)cGroup_1_0_0.eContents().get(1);
		private final Assignment cFunctionDefinitionAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cFunctionDefinitionFunctionDefinitionParserRuleCall_1_0_1_0 = (RuleCall)cFunctionDefinitionAssignment_1_0_1.eContents().get(0);
		private final RuleCall cRIGHTBRACETerminalRuleCall_1_0_2 = (RuleCall)cGroup_1_0.eContents().get(2);
		private final Assignment cDeclarationAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cDeclarationDeclarationParserRuleCall_1_1_0 = (RuleCall)cDeclarationAssignment_1_1.eContents().get(0);
		private final Assignment cSemiAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cSemiSEMITerminalRuleCall_1_2_0 = (RuleCall)cSemiAssignment_1_2.eContents().get(0);
		
		//ExternalDeclaration initRuleAction { at.jku.weiner.c.Log.log("ExternalDeclaration-enter"); } afterRuleAction {
		//at.jku.weiner.c.Log.log("ExternalDeclaration-leave"); }:
		//	{ExternalDeclaration} ((=>
		//	functiondefHead=FunctionDefHead
		//	LEFTBRACE) functionDefinition=FunctionDefinition
		//	RIGHTBRACE
		//	| declaration=Declaration
		//	| semi=SEMI);
		@Override public ParserRule getRule() { return rule; }
		
		//{ExternalDeclaration} ((=> functiondefHead=FunctionDefHead LEFTBRACE) functionDefinition=FunctionDefinition RIGHTBRACE |
		//declaration=Declaration | semi=SEMI)
		public Group getGroup() { return cGroup; }
		
		//{ExternalDeclaration}
		public Action getExternalDeclarationAction_0() { return cExternalDeclarationAction_0; }
		
		//((=> functiondefHead=FunctionDefHead LEFTBRACE) functionDefinition=FunctionDefinition RIGHTBRACE |
		//declaration=Declaration | semi=SEMI)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//(=> functiondefHead=FunctionDefHead LEFTBRACE) functionDefinition=FunctionDefinition RIGHTBRACE
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//(=> functiondefHead=FunctionDefHead LEFTBRACE)
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//=> functiondefHead=FunctionDefHead
		public Assignment getFunctiondefHeadAssignment_1_0_0_0() { return cFunctiondefHeadAssignment_1_0_0_0; }
		
		//FunctionDefHead
		public RuleCall getFunctiondefHeadFunctionDefHeadParserRuleCall_1_0_0_0_0() { return cFunctiondefHeadFunctionDefHeadParserRuleCall_1_0_0_0_0; }
		
		//LEFTBRACE
		public RuleCall getLEFTBRACETerminalRuleCall_1_0_0_1() { return cLEFTBRACETerminalRuleCall_1_0_0_1; }
		
		//functionDefinition=FunctionDefinition
		public Assignment getFunctionDefinitionAssignment_1_0_1() { return cFunctionDefinitionAssignment_1_0_1; }
		
		//FunctionDefinition
		public RuleCall getFunctionDefinitionFunctionDefinitionParserRuleCall_1_0_1_0() { return cFunctionDefinitionFunctionDefinitionParserRuleCall_1_0_1_0; }
		
		//RIGHTBRACE
		public RuleCall getRIGHTBRACETerminalRuleCall_1_0_2() { return cRIGHTBRACETerminalRuleCall_1_0_2; }
		
		//declaration=Declaration
		public Assignment getDeclarationAssignment_1_1() { return cDeclarationAssignment_1_1; }
		
		//Declaration
		public RuleCall getDeclarationDeclarationParserRuleCall_1_1_0() { return cDeclarationDeclarationParserRuleCall_1_1_0; }
		
		//semi=SEMI
		public Assignment getSemiAssignment_1_2() { return cSemiAssignment_1_2; }
		
		//SEMI
		public RuleCall getSemiSEMITerminalRuleCall_1_2_0() { return cSemiSEMITerminalRuleCall_1_2_0; }
	}
	public class FunctionDefHeadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.FunctionDefHead");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionDefHeadAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFunDeclSpecifiersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunDeclSpecifiersDeclarationSpecifiersParserRuleCall_1_0 = (RuleCall)cFunDeclSpecifiersAssignment_1.eContents().get(0);
		private final Assignment cFunDeclaratorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFunDeclaratorDeclaratorParserRuleCall_2_0 = (RuleCall)cFunDeclaratorAssignment_2.eContents().get(0);
		private final Assignment cFunDeclarationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFunDeclarationDeclarationParserRuleCall_3_0 = (RuleCall)cFunDeclarationAssignment_3.eContents().get(0);
		
		//FunctionDefHead:
		//	{FunctionDefHead} funDeclSpecifiers=DeclarationSpecifiers?
		//	funDeclarator=Declarator
		//	funDeclaration+=Declaration*;
		@Override public ParserRule getRule() { return rule; }
		
		//{FunctionDefHead} funDeclSpecifiers=DeclarationSpecifiers? funDeclarator=Declarator funDeclaration+=Declaration*
		public Group getGroup() { return cGroup; }
		
		//{FunctionDefHead}
		public Action getFunctionDefHeadAction_0() { return cFunctionDefHeadAction_0; }
		
		//funDeclSpecifiers=DeclarationSpecifiers?
		public Assignment getFunDeclSpecifiersAssignment_1() { return cFunDeclSpecifiersAssignment_1; }
		
		//DeclarationSpecifiers
		public RuleCall getFunDeclSpecifiersDeclarationSpecifiersParserRuleCall_1_0() { return cFunDeclSpecifiersDeclarationSpecifiersParserRuleCall_1_0; }
		
		//funDeclarator=Declarator
		public Assignment getFunDeclaratorAssignment_2() { return cFunDeclaratorAssignment_2; }
		
		//Declarator
		public RuleCall getFunDeclaratorDeclaratorParserRuleCall_2_0() { return cFunDeclaratorDeclaratorParserRuleCall_2_0; }
		
		//funDeclaration+=Declaration*
		public Assignment getFunDeclarationAssignment_3() { return cFunDeclarationAssignment_3; }
		
		//Declaration
		public RuleCall getFunDeclarationDeclarationParserRuleCall_3_0() { return cFunDeclarationDeclarationParserRuleCall_3_0; }
	}
	public class FunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.FunctionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyBodyStatementParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		
		//FunctionDefinition initRuleAction { at.jku.weiner.c.Scope.createNewScope("FunctionDefinition"); } afterRuleAction {
		//at.jku.weiner.c.Scope.removeScope(); }:
		//	{FunctionDefinition} body=BodyStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//{FunctionDefinition} body=BodyStatement
		public Group getGroup() { return cGroup; }
		
		//{FunctionDefinition}
		public Action getFunctionDefinitionAction_0() { return cFunctionDefinitionAction_0; }
		
		//body=BodyStatement
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }
		
		//BodyStatement
		public RuleCall getBodyBodyStatementParserRuleCall_1_0() { return cBodyBodyStatementParserRuleCall_1_0; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.Declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cSpecifiersAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cSpecifiersDeclarationSpecifiersParserRuleCall_1_0_0 = (RuleCall)cSpecifiersAssignment_1_0.eContents().get(0);
		private final Assignment cInitDeclaratorListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cInitDeclaratorListInitDeclaratorListParserRuleCall_1_1_0 = (RuleCall)cInitDeclaratorListAssignment_1_1.eContents().get(0);
		private final Assignment cSemiAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSemiSEMITerminalRuleCall_1_2_0 = (RuleCall)cSemiAssignment_1_2.eContents().get(0);
		
		////
		//// ambiguity:
		//// 1.)declarationSpecifiers->declarationSpecifier->typeSpecifier->typedefName->IDENTIFIER
		//// 2.)initDeclaratorList->initDeclarator->declarator->directDeclarator->IDENTIFIER
		//Declaration initRuleAction { at.jku.weiner.c.Scope.setTypedef(false); } afterRuleAction {
		//at.jku.weiner.c.Log.log("Declaration-leave"); }:
		//	{Declaration} (specifiers=DeclarationSpecifiers
		//	initDeclaratorList+=InitDeclaratorList?
		//	semi=SEMI
		//	//|	staticAssertDeclaration
		//);
		@Override public ParserRule getRule() { return rule; }
		
		//{Declaration} (specifiers=DeclarationSpecifiers initDeclaratorList+=InitDeclaratorList? semi=SEMI //|	staticAssertDeclaration
		//)
		public Group getGroup() { return cGroup; }
		
		//{Declaration}
		public Action getDeclarationAction_0() { return cDeclarationAction_0; }
		
		//(specifiers=DeclarationSpecifiers initDeclaratorList+=InitDeclaratorList? semi=SEMI //|	staticAssertDeclaration
		//)
		public Group getGroup_1() { return cGroup_1; }
		
		//specifiers=DeclarationSpecifiers
		public Assignment getSpecifiersAssignment_1_0() { return cSpecifiersAssignment_1_0; }
		
		//DeclarationSpecifiers
		public RuleCall getSpecifiersDeclarationSpecifiersParserRuleCall_1_0_0() { return cSpecifiersDeclarationSpecifiersParserRuleCall_1_0_0; }
		
		//initDeclaratorList+=InitDeclaratorList?
		public Assignment getInitDeclaratorListAssignment_1_1() { return cInitDeclaratorListAssignment_1_1; }
		
		//InitDeclaratorList
		public RuleCall getInitDeclaratorListInitDeclaratorListParserRuleCall_1_1_0() { return cInitDeclaratorListInitDeclaratorListParserRuleCall_1_1_0; }
		
		//semi=SEMI
		public Assignment getSemiAssignment_1_2() { return cSemiAssignment_1_2; }
		
		//SEMI
		public RuleCall getSemiSEMITerminalRuleCall_1_2_0() { return cSemiSEMITerminalRuleCall_1_2_0; }
	}
	public class DeclarationSpecifiersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.DeclarationSpecifiers");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeclarationSpecifiersAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cDeclarationSpecifierAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cDeclarationSpecifierStorageClassSpecifierParserRuleCall_1_0_0 = (RuleCall)cDeclarationSpecifierAssignment_1_0.eContents().get(0);
		private final Assignment cDeclarationSpecifierAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cDeclarationSpecifierTypeSpecifierParserRuleCall_1_1_0 = (RuleCall)cDeclarationSpecifierAssignment_1_1.eContents().get(0);
		private final Assignment cDeclarationSpecifierAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cDeclarationSpecifierTypeQualifierParserRuleCall_1_2_0 = (RuleCall)cDeclarationSpecifierAssignment_1_2.eContents().get(0);
		
		//DeclarationSpecifiers initRuleAction { at.jku.weiner.c.Log.log("DeclarationSpecifiers-enter"); } afterRuleAction {
		//at.jku.weiner.c.Log.log("DeclarationSpecifiers-leave"); }:
		//	{DeclarationSpecifiers} (declarationSpecifier+=StorageClassSpecifier
		//	| declarationSpecifier+=TypeSpecifier
		//	| declarationSpecifier+=TypeQualifier
		//	//|	declarationSpecifier+=functionSpecifier
		//	//|	declarationSpecifier+=alignmentSpecifier
		//)+;
		@Override public ParserRule getRule() { return rule; }
		
		//{DeclarationSpecifiers} (declarationSpecifier+=StorageClassSpecifier | declarationSpecifier+=TypeSpecifier |
		//declarationSpecifier+=TypeQualifier //|	declarationSpecifier+=functionSpecifier
		////|	declarationSpecifier+=alignmentSpecifier
		//)+
		public Group getGroup() { return cGroup; }
		
		//{DeclarationSpecifiers}
		public Action getDeclarationSpecifiersAction_0() { return cDeclarationSpecifiersAction_0; }
		
		//(declarationSpecifier+=StorageClassSpecifier | declarationSpecifier+=TypeSpecifier | declarationSpecifier+=TypeQualifier //|	declarationSpecifier+=functionSpecifier
		////|	declarationSpecifier+=alignmentSpecifier
		//)+
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//declarationSpecifier+=StorageClassSpecifier
		public Assignment getDeclarationSpecifierAssignment_1_0() { return cDeclarationSpecifierAssignment_1_0; }
		
		//StorageClassSpecifier
		public RuleCall getDeclarationSpecifierStorageClassSpecifierParserRuleCall_1_0_0() { return cDeclarationSpecifierStorageClassSpecifierParserRuleCall_1_0_0; }
		
		//declarationSpecifier+=TypeSpecifier
		public Assignment getDeclarationSpecifierAssignment_1_1() { return cDeclarationSpecifierAssignment_1_1; }
		
		//TypeSpecifier
		public RuleCall getDeclarationSpecifierTypeSpecifierParserRuleCall_1_1_0() { return cDeclarationSpecifierTypeSpecifierParserRuleCall_1_1_0; }
		
		//declarationSpecifier+=TypeQualifier
		public Assignment getDeclarationSpecifierAssignment_1_2() { return cDeclarationSpecifierAssignment_1_2; }
		
		//TypeQualifier
		public RuleCall getDeclarationSpecifierTypeQualifierParserRuleCall_1_2_0() { return cDeclarationSpecifierTypeQualifierParserRuleCall_1_2_0; }
	}
	public class InitDeclaratorListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.InitDeclaratorList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInitDeclaratorListAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cInitDeclaratorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInitDeclaratorInitDeclaratorParserRuleCall_1_0 = (RuleCall)cInitDeclaratorAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cCOMMATerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cInitDeclarator2Assignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInitDeclarator2InitDeclaratorParserRuleCall_2_1_0 = (RuleCall)cInitDeclarator2Assignment_2_1.eContents().get(0);
		
		//InitDeclaratorList initRuleAction { at.jku.weiner.c.Log.log("InitDeclaratorList-enter"); } afterRuleAction {
		//at.jku.weiner.c.Log.log("InitDeclaratorList-leave"); }:
		//	{InitDeclaratorList} initDeclarator+=InitDeclarator (COMMA initDeclarator2+=InitDeclarator)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{InitDeclaratorList} initDeclarator+=InitDeclarator (COMMA initDeclarator2+=InitDeclarator)*
		public Group getGroup() { return cGroup; }
		
		//{InitDeclaratorList}
		public Action getInitDeclaratorListAction_0() { return cInitDeclaratorListAction_0; }
		
		//initDeclarator+=InitDeclarator
		public Assignment getInitDeclaratorAssignment_1() { return cInitDeclaratorAssignment_1; }
		
		//InitDeclarator
		public RuleCall getInitDeclaratorInitDeclaratorParserRuleCall_1_0() { return cInitDeclaratorInitDeclaratorParserRuleCall_1_0; }
		
		//(COMMA initDeclarator2+=InitDeclarator)*
		public Group getGroup_2() { return cGroup_2; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_2_0() { return cCOMMATerminalRuleCall_2_0; }
		
		//initDeclarator2+=InitDeclarator
		public Assignment getInitDeclarator2Assignment_2_1() { return cInitDeclarator2Assignment_2_1; }
		
		//InitDeclarator
		public RuleCall getInitDeclarator2InitDeclaratorParserRuleCall_2_1_0() { return cInitDeclarator2InitDeclaratorParserRuleCall_2_1_0; }
	}
	public class InitDeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.InitDeclarator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInitDeclaratorAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDeclaratorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeclaratorDeclaratorParserRuleCall_1_0 = (RuleCall)cDeclaratorAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cASSIGNTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cInitializerAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInitializerInitializerParserRuleCall_2_1_0 = (RuleCall)cInitializerAssignment_2_1.eContents().get(0);
		
		//InitDeclarator initRuleAction { at.jku.weiner.c.Log.log("InitDeclarator-enter"); } afterRuleAction {
		//at.jku.weiner.c.Log.log("InitDeclarator-leave"); }:
		//	{InitDeclarator} declarator=Declarator (ASSIGN initializer=Initializer)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{InitDeclarator} declarator=Declarator (ASSIGN initializer=Initializer)?
		public Group getGroup() { return cGroup; }
		
		//{InitDeclarator}
		public Action getInitDeclaratorAction_0() { return cInitDeclaratorAction_0; }
		
		//declarator=Declarator
		public Assignment getDeclaratorAssignment_1() { return cDeclaratorAssignment_1; }
		
		//Declarator
		public RuleCall getDeclaratorDeclaratorParserRuleCall_1_0() { return cDeclaratorDeclaratorParserRuleCall_1_0; }
		
		//(ASSIGN initializer=Initializer)?
		public Group getGroup_2() { return cGroup_2; }
		
		//ASSIGN
		public RuleCall getASSIGNTerminalRuleCall_2_0() { return cASSIGNTerminalRuleCall_2_0; }
		
		//initializer=Initializer
		public Assignment getInitializerAssignment_2_1() { return cInitializerAssignment_2_1; }
		
		//Initializer
		public RuleCall getInitializerInitializerParserRuleCall_2_1_0() { return cInitializerInitializerParserRuleCall_2_1_0; }
	}
	public class StorageClassSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.StorageClassSpecifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStorageClassSpecifierAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cClassAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cClassKW_TYPEDEFTerminalRuleCall_1_0_0 = (RuleCall)cClassAssignment_1_0.eContents().get(0);
		private final Assignment cClassAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cClassKW_EXTERNTerminalRuleCall_1_1_0 = (RuleCall)cClassAssignment_1_1.eContents().get(0);
		private final Assignment cClassAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cClassKW_STATICTerminalRuleCall_1_2_0 = (RuleCall)cClassAssignment_1_2.eContents().get(0);
		private final Assignment cClassAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cClassKW_THREADLOCALTerminalRuleCall_1_3_0 = (RuleCall)cClassAssignment_1_3.eContents().get(0);
		private final Assignment cClassAssignment_1_4 = (Assignment)cAlternatives_1.eContents().get(4);
		private final RuleCall cClassKW_AUTOTerminalRuleCall_1_4_0 = (RuleCall)cClassAssignment_1_4.eContents().get(0);
		private final Assignment cClassAssignment_1_5 = (Assignment)cAlternatives_1.eContents().get(5);
		private final RuleCall cClassKW_REGISTERTerminalRuleCall_1_5_0 = (RuleCall)cClassAssignment_1_5.eContents().get(0);
		
		//StorageClassSpecifier initRuleAction { at.jku.weiner.c.Log.log("StorageClassSpecifier-enter"); } afterRuleAction {
		//at.jku.weiner.c.Log.log("StorageClassSpecifier-leave"); }:
		//	{StorageClassSpecifier} (class=KW_TYPEDEF
		//	postAction{ { at.jku.weiner.c.Scope.setTypedef(true); } } | class=KW_EXTERN
		//	| class=KW_STATIC
		//	| class=KW_THREADLOCAL
		//	| class=KW_AUTO
		//	| class=KW_REGISTER);
		@Override public ParserRule getRule() { return rule; }
		
		//{StorageClassSpecifier} (class=KW_TYPEDEF postAction{ { at.jku.weiner.c.Scope.setTypedef(true); } } | class=KW_EXTERN |
		//class=KW_STATIC | class=KW_THREADLOCAL | class=KW_AUTO | class=KW_REGISTER)
		public Group getGroup() { return cGroup; }
		
		//{StorageClassSpecifier}
		public Action getStorageClassSpecifierAction_0() { return cStorageClassSpecifierAction_0; }
		
		//(class=KW_TYPEDEF postAction{ { at.jku.weiner.c.Scope.setTypedef(true); } } | class=KW_EXTERN | class=KW_STATIC |
		//class=KW_THREADLOCAL | class=KW_AUTO | class=KW_REGISTER)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//class=KW_TYPEDEF postAction{ { at.jku.weiner.c.Scope.setTypedef(true); } }
		public Assignment getClassAssignment_1_0() { return cClassAssignment_1_0; }
		
		//KW_TYPEDEF
		public RuleCall getClassKW_TYPEDEFTerminalRuleCall_1_0_0() { return cClassKW_TYPEDEFTerminalRuleCall_1_0_0; }
		
		//class=KW_EXTERN
		public Assignment getClassAssignment_1_1() { return cClassAssignment_1_1; }
		
		//KW_EXTERN
		public RuleCall getClassKW_EXTERNTerminalRuleCall_1_1_0() { return cClassKW_EXTERNTerminalRuleCall_1_1_0; }
		
		//class=KW_STATIC
		public Assignment getClassAssignment_1_2() { return cClassAssignment_1_2; }
		
		//KW_STATIC
		public RuleCall getClassKW_STATICTerminalRuleCall_1_2_0() { return cClassKW_STATICTerminalRuleCall_1_2_0; }
		
		//class=KW_THREADLOCAL
		public Assignment getClassAssignment_1_3() { return cClassAssignment_1_3; }
		
		//KW_THREADLOCAL
		public RuleCall getClassKW_THREADLOCALTerminalRuleCall_1_3_0() { return cClassKW_THREADLOCALTerminalRuleCall_1_3_0; }
		
		//class=KW_AUTO
		public Assignment getClassAssignment_1_4() { return cClassAssignment_1_4; }
		
		//KW_AUTO
		public RuleCall getClassKW_AUTOTerminalRuleCall_1_4_0() { return cClassKW_AUTOTerminalRuleCall_1_4_0; }
		
		//class=KW_REGISTER
		public Assignment getClassAssignment_1_5() { return cClassAssignment_1_5; }
		
		//KW_REGISTER
		public RuleCall getClassKW_REGISTERTerminalRuleCall_1_5_0() { return cClassKW_REGISTERTerminalRuleCall_1_5_0; }
	}
	public class TypeSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.TypeSpecifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cTypeSpecifierAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameKW_VOIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNameKW_CHARTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cNameKW_SHORTTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cNameKW_INTTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cNameKW_LONGTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Assignment cNameAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cNameKW_FLOATTerminalRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Assignment cNameAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cNameKW_DOUBLETerminalRuleCall_6_0 = (RuleCall)cNameAssignment_6.eContents().get(0);
		private final Assignment cNameAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cNameKW_SIGNEDTerminalRuleCall_7_0 = (RuleCall)cNameAssignment_7.eContents().get(0);
		private final Assignment cNameAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final RuleCall cNameKW_UNSIGNEDTerminalRuleCall_8_0 = (RuleCall)cNameAssignment_8.eContents().get(0);
		private final Assignment cNameAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final RuleCall cNameKW_BOOLTerminalRuleCall_9_0 = (RuleCall)cNameAssignment_9.eContents().get(0);
		private final Assignment cNameAssignment_10 = (Assignment)cAlternatives.eContents().get(10);
		private final RuleCall cNameKW_COMPLEXTerminalRuleCall_10_0 = (RuleCall)cNameAssignment_10.eContents().get(0);
		private final Assignment cNameAssignment_11 = (Assignment)cAlternatives.eContents().get(11);
		private final Keyword cName__m128Keyword_11_0 = (Keyword)cNameAssignment_11.eContents().get(0);
		private final Assignment cNameAssignment_12 = (Assignment)cAlternatives.eContents().get(12);
		private final Keyword cName__m128dKeyword_12_0 = (Keyword)cNameAssignment_12.eContents().get(0);
		private final Assignment cNameAssignment_13 = (Assignment)cAlternatives.eContents().get(13);
		private final Keyword cName__m128iKeyword_13_0 = (Keyword)cNameAssignment_13.eContents().get(0);
		private final Assignment cTypeAssignment_14 = (Assignment)cAlternatives.eContents().get(14);
		private final RuleCall cTypeTypedefNameParserRuleCall_14_0 = (RuleCall)cTypeAssignment_14.eContents().get(0);
		
		//TypeSpecifier initRuleAction { at.jku.weiner.c.Log.log("TypeSpecifier-enter"); } afterRuleAction {
		//at.jku.weiner.c.Log.log("TypeSpecifier-leave"); }:
		//	{TypeSpecifier} name=KW_VOID
		//	| name=KW_CHAR
		//	| name=KW_SHORT
		//	| name=KW_INT postAction{ { at.jku.weiner.c.Log.log("found kw_int"); } } | name=KW_LONG
		//	| name=KW_FLOAT
		//	| name=KW_DOUBLE postAction{ { at.jku.weiner.c.Log.log("found kw_double"); } } | name=KW_SIGNED
		//	| name=KW_UNSIGNED
		//	| name=KW_BOOL
		//	| name=KW_COMPLEX
		//	| name='__m128'
		//	| name='__m128d'
		//	| name='__m128i'
		//	// |	'__extension__' LEFTPAREN ('__m128' | '__m128d' | '__m128i') RIGHTPAREN
		//	//  |	specifier=atomicTypeSpecifier
		//	// |	specifier=structOrUnionSpecifier
		//	// |	specifier=enumSpecifier
		//	| type=TypedefName
		//	// |	'__typeof__' LEFTPAREN constExrp=constantExpression RIGHTPAREN // GCC extension
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{TypeSpecifier} name=KW_VOID | name=KW_CHAR | name=KW_SHORT | name=KW_INT postAction{ {
		//at.jku.weiner.c.Log.log("found kw_int"); } } | name=KW_LONG | name=KW_FLOAT | name=KW_DOUBLE postAction{ {
		//at.jku.weiner.c.Log.log("found kw_double"); } } | name=KW_SIGNED | name=KW_UNSIGNED | name=KW_BOOL | name=KW_COMPLEX |
		//name='__m128' | name='__m128d' | name='__m128i' // |	'__extension__' LEFTPAREN ('__m128' | '__m128d' | '__m128i') RIGHTPAREN
		////  |	specifier=atomicTypeSpecifier
		//// |	specifier=structOrUnionSpecifier
		//// |	specifier=enumSpecifier
		//| type=TypedefName
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{TypeSpecifier} name=KW_VOID
		public Group getGroup_0() { return cGroup_0; }
		
		//{TypeSpecifier}
		public Action getTypeSpecifierAction_0_0() { return cTypeSpecifierAction_0_0; }
		
		//name=KW_VOID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//KW_VOID
		public RuleCall getNameKW_VOIDTerminalRuleCall_0_1_0() { return cNameKW_VOIDTerminalRuleCall_0_1_0; }
		
		//name=KW_CHAR
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//KW_CHAR
		public RuleCall getNameKW_CHARTerminalRuleCall_1_0() { return cNameKW_CHARTerminalRuleCall_1_0; }
		
		//name=KW_SHORT
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//KW_SHORT
		public RuleCall getNameKW_SHORTTerminalRuleCall_2_0() { return cNameKW_SHORTTerminalRuleCall_2_0; }
		
		//name=KW_INT postAction{ { at.jku.weiner.c.Log.log("found kw_int"); } }
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//KW_INT
		public RuleCall getNameKW_INTTerminalRuleCall_3_0() { return cNameKW_INTTerminalRuleCall_3_0; }
		
		//name=KW_LONG
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//KW_LONG
		public RuleCall getNameKW_LONGTerminalRuleCall_4_0() { return cNameKW_LONGTerminalRuleCall_4_0; }
		
		//name=KW_FLOAT
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }
		
		//KW_FLOAT
		public RuleCall getNameKW_FLOATTerminalRuleCall_5_0() { return cNameKW_FLOATTerminalRuleCall_5_0; }
		
		//name=KW_DOUBLE postAction{ { at.jku.weiner.c.Log.log("found kw_double"); } }
		public Assignment getNameAssignment_6() { return cNameAssignment_6; }
		
		//KW_DOUBLE
		public RuleCall getNameKW_DOUBLETerminalRuleCall_6_0() { return cNameKW_DOUBLETerminalRuleCall_6_0; }
		
		//name=KW_SIGNED
		public Assignment getNameAssignment_7() { return cNameAssignment_7; }
		
		//KW_SIGNED
		public RuleCall getNameKW_SIGNEDTerminalRuleCall_7_0() { return cNameKW_SIGNEDTerminalRuleCall_7_0; }
		
		//name=KW_UNSIGNED
		public Assignment getNameAssignment_8() { return cNameAssignment_8; }
		
		//KW_UNSIGNED
		public RuleCall getNameKW_UNSIGNEDTerminalRuleCall_8_0() { return cNameKW_UNSIGNEDTerminalRuleCall_8_0; }
		
		//name=KW_BOOL
		public Assignment getNameAssignment_9() { return cNameAssignment_9; }
		
		//KW_BOOL
		public RuleCall getNameKW_BOOLTerminalRuleCall_9_0() { return cNameKW_BOOLTerminalRuleCall_9_0; }
		
		//name=KW_COMPLEX
		public Assignment getNameAssignment_10() { return cNameAssignment_10; }
		
		//KW_COMPLEX
		public RuleCall getNameKW_COMPLEXTerminalRuleCall_10_0() { return cNameKW_COMPLEXTerminalRuleCall_10_0; }
		
		//name='__m128'
		public Assignment getNameAssignment_11() { return cNameAssignment_11; }
		
		//'__m128'
		public Keyword getName__m128Keyword_11_0() { return cName__m128Keyword_11_0; }
		
		//name='__m128d'
		public Assignment getNameAssignment_12() { return cNameAssignment_12; }
		
		//'__m128d'
		public Keyword getName__m128dKeyword_12_0() { return cName__m128dKeyword_12_0; }
		
		//name='__m128i'
		public Assignment getNameAssignment_13() { return cNameAssignment_13; }
		
		//'__m128i'
		public Keyword getName__m128iKeyword_13_0() { return cName__m128iKeyword_13_0; }
		
		//type=TypedefName
		public Assignment getTypeAssignment_14() { return cTypeAssignment_14; }
		
		//TypedefName
		public RuleCall getTypeTypedefNameParserRuleCall_14_0() { return cTypeTypedefNameParserRuleCall_14_0; }
	}
	public class TypedefNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.TypedefName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypedefNameAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		
		//TypedefName initRuleAction { at.jku.weiner.c.Log.log("TypedefName-enter"); } afterRuleAction {
		//at.jku.weiner.c.Log.log("TypedefName-leave"); }:
		//	{TypedefName} id=ID
		//	preAction{ { at.jku.weiner.c.Scope.isTypeName(input.LT(1).getText()) } ? };
		@Override public ParserRule getRule() { return rule; }
		
		//{TypedefName} id=ID preAction{ { at.jku.weiner.c.Scope.isTypeName(input.LT(1).getText()) } ? }
		public Group getGroup() { return cGroup; }
		
		//{TypedefName}
		public Action getTypedefNameAction_0() { return cTypedefNameAction_0; }
		
		//id=ID preAction{ { at.jku.weiner.c.Scope.isTypeName(input.LT(1).getText()) } ? }
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }
	}
	public class SpecifierQualifierListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.SpecifierQualifierList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSpecifierQualifierListAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cTypeSpecifierAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cTypeSpecifierTypeSpecifierParserRuleCall_1_0_0 = (RuleCall)cTypeSpecifierAssignment_1_0.eContents().get(0);
		private final Assignment cTypeQualifierAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cTypeQualifierTypeQualifierParserRuleCall_1_1_0 = (RuleCall)cTypeQualifierAssignment_1_1.eContents().get(0);
		
		/// *structOrUnionSpecifier returns declarationSpecifier:
		//	{structOrUnionSpecifier}
		//	(structOrUnion IDENTIFIER? LEFTBRACE structDeclList=structDeclarationList RIGHTBRACE
		//	|	structOrUnion IDENTIFIER
		//	)
		//;
		//
		//structOrUnion: STRUCT
		//	|	UNION
		//;
		//
		//structDeclarationList: (structDeclaration+=structDeclaration)+
		//;
		//
		//structDeclaration:
		//	specifierQualifierList (structDeclarationList+=structDeclaratorList)? SEMI
		//	|	staticAssertDeclaration
		//;
		// * / SpecifierQualifierList:
		//	{SpecifierQualifierList} (typeSpecifier+=TypeSpecifier | typeQualifier+=TypeQualifier)+;
		@Override public ParserRule getRule() { return rule; }
		
		//{SpecifierQualifierList} (typeSpecifier+=TypeSpecifier | typeQualifier+=TypeQualifier)+
		public Group getGroup() { return cGroup; }
		
		//{SpecifierQualifierList}
		public Action getSpecifierQualifierListAction_0() { return cSpecifierQualifierListAction_0; }
		
		//(typeSpecifier+=TypeSpecifier | typeQualifier+=TypeQualifier)+
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//typeSpecifier+=TypeSpecifier
		public Assignment getTypeSpecifierAssignment_1_0() { return cTypeSpecifierAssignment_1_0; }
		
		//TypeSpecifier
		public RuleCall getTypeSpecifierTypeSpecifierParserRuleCall_1_0_0() { return cTypeSpecifierTypeSpecifierParserRuleCall_1_0_0; }
		
		//typeQualifier+=TypeQualifier
		public Assignment getTypeQualifierAssignment_1_1() { return cTypeQualifierAssignment_1_1; }
		
		//TypeQualifier
		public RuleCall getTypeQualifierTypeQualifierParserRuleCall_1_1_0() { return cTypeQualifierTypeQualifierParserRuleCall_1_1_0; }
	}
	public class TypeQualifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.TypeQualifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypeQualifierAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cTypeKW_CONSTTerminalRuleCall_1_0_0 = (RuleCall)cTypeAssignment_1_0.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cTypeKW_RESTRICTTerminalRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cTypeKW_VOLATILETerminalRuleCall_1_2_0 = (RuleCall)cTypeAssignment_1_2.eContents().get(0);
		private final Assignment cTypeAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cTypeKW_ATOMICTerminalRuleCall_1_3_0 = (RuleCall)cTypeAssignment_1_3.eContents().get(0);
		
		/// *
		//structDeclaratorList: structDeclarator=structDeclarator (COMMA structDeclarator2+=structDeclarator)*;
		//
		//structDeclarator: declarator=declarator (COLON constExpr+=constantExpression)?
		//	| (COLON constExpr+=constantExpression)
		//;
		//
		//enumSpecifier returns declarationSpecifier:
		//	{enumSpecifier} 
		//	(	
		//		(ENUM IDENTIFIER? LEFTBRACE enumList=enumeratorList) (RIGHTBRACE | COMMA RIGHTBRACE)
		//	|	ENUM IDENTIFIER
		//	)
		//;
		//
		//enumeratorList: enumerator
		//	(COMMA enumerator+=enumerator)*
		//;
		//
		//enumerator:
		//	{enumerator} 
		//	enumerationCONSTANT
		//	(ASSIGN constExpr=constantExpression)?
		//;* / / *
		//atomicTypeSpecifier returns declarationSpecifier:
		//	ATOMIC LEFTPAREN typeName RIGHTPAREN
		//;
		// * / TypeQualifier initRuleAction { at.jku.weiner.c.Log.log("TypeQualifier-enter"); } afterRuleAction {
		//at.jku.weiner.c.Log.log("TypeQualifier-leave"); }:
		//	{TypeQualifier} (type=KW_CONST
		//	| type=KW_RESTRICT
		//	| type=KW_VOLATILE
		//	| type=KW_ATOMIC);
		@Override public ParserRule getRule() { return rule; }
		
		//{TypeQualifier} (type=KW_CONST | type=KW_RESTRICT | type=KW_VOLATILE | type=KW_ATOMIC)
		public Group getGroup() { return cGroup; }
		
		//{TypeQualifier}
		public Action getTypeQualifierAction_0() { return cTypeQualifierAction_0; }
		
		//(type=KW_CONST | type=KW_RESTRICT | type=KW_VOLATILE | type=KW_ATOMIC)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//type=KW_CONST
		public Assignment getTypeAssignment_1_0() { return cTypeAssignment_1_0; }
		
		//KW_CONST
		public RuleCall getTypeKW_CONSTTerminalRuleCall_1_0_0() { return cTypeKW_CONSTTerminalRuleCall_1_0_0; }
		
		//type=KW_RESTRICT
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//KW_RESTRICT
		public RuleCall getTypeKW_RESTRICTTerminalRuleCall_1_1_0() { return cTypeKW_RESTRICTTerminalRuleCall_1_1_0; }
		
		//type=KW_VOLATILE
		public Assignment getTypeAssignment_1_2() { return cTypeAssignment_1_2; }
		
		//KW_VOLATILE
		public RuleCall getTypeKW_VOLATILETerminalRuleCall_1_2_0() { return cTypeKW_VOLATILETerminalRuleCall_1_2_0; }
		
		//type=KW_ATOMIC
		public Assignment getTypeAssignment_1_3() { return cTypeAssignment_1_3; }
		
		//KW_ATOMIC
		public RuleCall getTypeKW_ATOMICTerminalRuleCall_1_3_0() { return cTypeKW_ATOMICTerminalRuleCall_1_3_0; }
	}
	public class DeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.Declarator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeclaratorAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPointerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPointerPointerParserRuleCall_1_0 = (RuleCall)cPointerAssignment_1.eContents().get(0);
		private final Assignment cDeclaratorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclaratorDirectDeclaratorParserRuleCall_2_0 = (RuleCall)cDeclaratorAssignment_2.eContents().get(0);
		
		/// *
		//functionSpecifier:
		//	{functionSpecifier} 
		//	(
		//		(INLINE
		//		|	NORETURN
		//		|	'__inline__' // GCC extension
		//		|	'__stdcall'
		//		)
		//		|	gccAttributeSpecifier=gccAttributeSpecifier
		//		|	'__declspec' LEFTPAREN IDENTIFIER RIGHTPAREN
		//	)
		//;
		//
		//alignmentSpecifier: ALIGNAS LEFTPAREN (typeName | constantExpression) RIGHTPAREN;
		// * / Declarator initRuleAction { at.jku.weiner.c.Log.log("Declarator-enter"); } afterRuleAction {
		//at.jku.weiner.c.Log.log("Declarator-leave"); }:
		//	{Declarator} pointer=Pointer?
		//	declarator=DirectDeclarator;
		@Override public ParserRule getRule() { return rule; }
		
		//{Declarator} pointer=Pointer? declarator=DirectDeclarator
		public Group getGroup() { return cGroup; }
		
		//{Declarator}
		public Action getDeclaratorAction_0() { return cDeclaratorAction_0; }
		
		//pointer=Pointer?
		public Assignment getPointerAssignment_1() { return cPointerAssignment_1; }
		
		//Pointer
		public RuleCall getPointerPointerParserRuleCall_1_0() { return cPointerPointerParserRuleCall_1_0; }
		
		//declarator=DirectDeclarator
		public Assignment getDeclaratorAssignment_2() { return cDeclaratorAssignment_2; }
		
		//DirectDeclarator
		public RuleCall getDeclaratorDirectDeclaratorParserRuleCall_2_0() { return cDeclaratorDirectDeclaratorParserRuleCall_2_0; }
	}
	public class DirectDeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.DirectDeclarator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDirectDeclaratorAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_1_0_0 = (RuleCall)cIdAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cLEFTPARENTerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Assignment cDeclaratorAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cDeclaratorDeclaratorParserRuleCall_1_1_1_0 = (RuleCall)cDeclaratorAssignment_1_1_1.eContents().get(0);
		private final RuleCall cRIGHTPARENTerminalRuleCall_1_1_2 = (RuleCall)cGroup_1_1.eContents().get(2);
		private final Assignment cDeclaratorSuffixAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclaratorSuffixDeclaratorSuffixParserRuleCall_2_0 = (RuleCall)cDeclaratorSuffixAssignment_2.eContents().get(0);
		
		//DirectDeclarator initRuleAction { at.jku.weiner.c.Log.log("DirectDeclarator-enter"); } afterRuleAction {
		//at.jku.weiner.c.Log.log("DirectDeclarator-leave"); }:
		//	{DirectDeclarator} (id=ID
		//	preAction{ { at.jku.weiner.c.Scope.setTemp(input);
		//	} } postAction{ { at.jku.weiner.c.Scope.addTypedefIfIsTypedef();
		//	} } | LEFTPAREN declarator=Declarator RIGHTPAREN) declaratorSuffix+=DeclaratorSuffix*;
		@Override public ParserRule getRule() { return rule; }
		
		//{DirectDeclarator} (id=ID preAction{ { at.jku.weiner.c.Scope.setTemp(input); } } postAction{ {
		//at.jku.weiner.c.Scope.addTypedefIfIsTypedef(); } } | LEFTPAREN declarator=Declarator RIGHTPAREN)
		//declaratorSuffix+=DeclaratorSuffix*
		public Group getGroup() { return cGroup; }
		
		//{DirectDeclarator}
		public Action getDirectDeclaratorAction_0() { return cDirectDeclaratorAction_0; }
		
		//(id=ID preAction{ { at.jku.weiner.c.Scope.setTemp(input); } } postAction{ {
		//at.jku.weiner.c.Scope.addTypedefIfIsTypedef(); } } | LEFTPAREN declarator=Declarator RIGHTPAREN)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//id=ID preAction{ { at.jku.weiner.c.Scope.setTemp(input); } } postAction{ {
		//at.jku.weiner.c.Scope.addTypedefIfIsTypedef(); } }
		public Assignment getIdAssignment_1_0() { return cIdAssignment_1_0; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0_0() { return cIdIDTerminalRuleCall_1_0_0; }
		
		//LEFTPAREN declarator=Declarator RIGHTPAREN
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//LEFTPAREN
		public RuleCall getLEFTPARENTerminalRuleCall_1_1_0() { return cLEFTPARENTerminalRuleCall_1_1_0; }
		
		//declarator=Declarator
		public Assignment getDeclaratorAssignment_1_1_1() { return cDeclaratorAssignment_1_1_1; }
		
		//Declarator
		public RuleCall getDeclaratorDeclaratorParserRuleCall_1_1_1_0() { return cDeclaratorDeclaratorParserRuleCall_1_1_1_0; }
		
		//RIGHTPAREN
		public RuleCall getRIGHTPARENTerminalRuleCall_1_1_2() { return cRIGHTPARENTerminalRuleCall_1_1_2; }
		
		//declaratorSuffix+=DeclaratorSuffix*
		public Assignment getDeclaratorSuffixAssignment_2() { return cDeclaratorSuffixAssignment_2; }
		
		//DeclaratorSuffix
		public RuleCall getDeclaratorSuffixDeclaratorSuffixParserRuleCall_2_0() { return cDeclaratorSuffixDeclaratorSuffixParserRuleCall_2_0; }
	}
	public class DeclaratorSuffixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.DeclaratorSuffix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeclaratorSuffixAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cLastSuffixAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLastSuffixDirectDeclaratorLastSuffixParserRuleCall_1_0 = (RuleCall)cLastSuffixAssignment_1.eContents().get(0);
		
		//DeclaratorSuffix:
		//	{DeclaratorSuffix} lastSuffix=DirectDeclaratorLastSuffix;
		@Override public ParserRule getRule() { return rule; }
		
		//{DeclaratorSuffix} lastSuffix=DirectDeclaratorLastSuffix
		public Group getGroup() { return cGroup; }
		
		//{DeclaratorSuffix}
		public Action getDeclaratorSuffixAction_0() { return cDeclaratorSuffixAction_0; }
		
		//lastSuffix=DirectDeclaratorLastSuffix
		public Assignment getLastSuffixAssignment_1() { return cLastSuffixAssignment_1; }
		
		//DirectDeclaratorLastSuffix
		public RuleCall getLastSuffixDirectDeclaratorLastSuffixParserRuleCall_1_0() { return cLastSuffixDirectDeclaratorLastSuffixParserRuleCall_1_0; }
	}
	public class DirectDeclaratorLastSuffixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.DirectDeclaratorLastSuffix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDirectDeclaratorLastSuffixAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cLEFTPARENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cParameterTypeListAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cParameterTypeListParameterTypeListParserRuleCall_2_0_0 = (RuleCall)cParameterTypeListAssignment_2_0.eContents().get(0);
		private final Assignment cIdentifierListAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cIdentifierListIdentifierListParserRuleCall_2_1_0 = (RuleCall)cIdentifierListAssignment_2_1.eContents().get(0);
		private final RuleCall cRIGHTPARENTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//DirectDeclaratorLastSuffix:
		//	{DirectDeclaratorLastSuffix} LEFTPAREN (parameterTypeList+=ParameterTypeList | identifierList=IdentifierList?)
		//	RIGHTPAREN;
		@Override public ParserRule getRule() { return rule; }
		
		//{DirectDeclaratorLastSuffix} LEFTPAREN (parameterTypeList+=ParameterTypeList | identifierList=IdentifierList?)
		//RIGHTPAREN
		public Group getGroup() { return cGroup; }
		
		//{DirectDeclaratorLastSuffix}
		public Action getDirectDeclaratorLastSuffixAction_0() { return cDirectDeclaratorLastSuffixAction_0; }
		
		//LEFTPAREN
		public RuleCall getLEFTPARENTerminalRuleCall_1() { return cLEFTPARENTerminalRuleCall_1; }
		
		//(parameterTypeList+=ParameterTypeList | identifierList=IdentifierList?)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//parameterTypeList+=ParameterTypeList
		public Assignment getParameterTypeListAssignment_2_0() { return cParameterTypeListAssignment_2_0; }
		
		//ParameterTypeList
		public RuleCall getParameterTypeListParameterTypeListParserRuleCall_2_0_0() { return cParameterTypeListParameterTypeListParserRuleCall_2_0_0; }
		
		//identifierList=IdentifierList?
		public Assignment getIdentifierListAssignment_2_1() { return cIdentifierListAssignment_2_1; }
		
		//IdentifierList
		public RuleCall getIdentifierListIdentifierListParserRuleCall_2_1_0() { return cIdentifierListIdentifierListParserRuleCall_2_1_0; }
		
		//RIGHTPAREN
		public RuleCall getRIGHTPARENTerminalRuleCall_3() { return cRIGHTPARENTerminalRuleCall_3; }
	}
	public class PointerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.Pointer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPointerAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Assignment cStarAssignment_1_0_0 = (Assignment)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cStarSTARTerminalRuleCall_1_0_0_0 = (RuleCall)cStarAssignment_1_0_0.eContents().get(0);
		private final Assignment cCaretAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cCaretCARETTerminalRuleCall_1_0_1_0 = (RuleCall)cCaretAssignment_1_0_1.eContents().get(0);
		private final Assignment cTypeQualifierListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeQualifierListTypeQualifierListParserRuleCall_1_1_0 = (RuleCall)cTypeQualifierListAssignment_1_1.eContents().get(0);
		
		/// *
		//gccDeclaratorExtension:
		//	{gccDeclaratorExtension} '__asm' LEFTPAREN STRINGLITERAL+ RIGHTPAREN
		//	| {gccDeclaratorExtension} gccAttributeSpecifier=gccAttributeSpecifier
		//;
		//
		//
		//gccAttributeSpecifier: '__attribute__' LEFTPAREN LEFTPAREN list=gccAttributeList RIGHTPAREN RIGHTPAREN;
		//gccAttributeList: gcAttribute=gccAttribute (COMMA gccAttribute+=gccAttribute)*;
		//	//|	// empty;
		//
		//// enter gccAttribute and nestedParenthesesBlock here
		//gccAttribute: {gccAttribute} (ANYOTHER)
		//	// relaxed def for "identifier or reserved word"
		//		(LEFTPAREN list=argumentExpressionList? RIGHTPAREN)?
		//	// |	//empty
		//;
		//
		////nestedParenthesesBlock: (	NOPAREN
		////		|	LEFTPAREN nestedParenthesesBlock RIGHTPAREN
		////		)*
		////;
		// * / Pointer:
		//	{Pointer} ((star+=STAR | caret+=CARET) typeQualifierList+=TypeQualifierList?)*
		//	//|	{pointer} CARET typeQualifierList=typeQualifierList? pointer=pointer?// Blocks language extension
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Pointer} ((star+=STAR | caret+=CARET) typeQualifierList+=TypeQualifierList?)*
		public Group getGroup() { return cGroup; }
		
		//{Pointer}
		public Action getPointerAction_0() { return cPointerAction_0; }
		
		//((star+=STAR | caret+=CARET) typeQualifierList+=TypeQualifierList?)*
		public Group getGroup_1() { return cGroup_1; }
		
		//(star+=STAR | caret+=CARET)
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//star+=STAR
		public Assignment getStarAssignment_1_0_0() { return cStarAssignment_1_0_0; }
		
		//STAR
		public RuleCall getStarSTARTerminalRuleCall_1_0_0_0() { return cStarSTARTerminalRuleCall_1_0_0_0; }
		
		//caret+=CARET
		public Assignment getCaretAssignment_1_0_1() { return cCaretAssignment_1_0_1; }
		
		//CARET
		public RuleCall getCaretCARETTerminalRuleCall_1_0_1_0() { return cCaretCARETTerminalRuleCall_1_0_1_0; }
		
		//typeQualifierList+=TypeQualifierList?
		public Assignment getTypeQualifierListAssignment_1_1() { return cTypeQualifierListAssignment_1_1; }
		
		//TypeQualifierList
		public RuleCall getTypeQualifierListTypeQualifierListParserRuleCall_1_1_0() { return cTypeQualifierListTypeQualifierListParserRuleCall_1_1_0; }
	}
	public class TypeQualifierListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.TypeQualifierList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypeQualifierListAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeQualifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeQualifierTypeQualifierParserRuleCall_1_0 = (RuleCall)cTypeQualifierAssignment_1.eContents().get(0);
		
		//TypeQualifierList:
		//	{TypeQualifierList} typeQualifier+=TypeQualifier+;
		@Override public ParserRule getRule() { return rule; }
		
		//{TypeQualifierList} typeQualifier+=TypeQualifier+
		public Group getGroup() { return cGroup; }
		
		//{TypeQualifierList}
		public Action getTypeQualifierListAction_0() { return cTypeQualifierListAction_0; }
		
		//typeQualifier+=TypeQualifier+
		public Assignment getTypeQualifierAssignment_1() { return cTypeQualifierAssignment_1; }
		
		//TypeQualifier
		public RuleCall getTypeQualifierTypeQualifierParserRuleCall_1_0() { return cTypeQualifierTypeQualifierParserRuleCall_1_0; }
	}
	public class ParameterTypeListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.ParameterTypeList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterTypeListAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cListParameterListParserRuleCall_1_0 = (RuleCall)cListAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cCOMMATerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cELLIPSISTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//ParameterTypeList:
		//	{ParameterTypeList} list=ParameterList (COMMA ELLIPSIS)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ParameterTypeList} list=ParameterList (COMMA ELLIPSIS)?
		public Group getGroup() { return cGroup; }
		
		//{ParameterTypeList}
		public Action getParameterTypeListAction_0() { return cParameterTypeListAction_0; }
		
		//list=ParameterList
		public Assignment getListAssignment_1() { return cListAssignment_1; }
		
		//ParameterList
		public RuleCall getListParameterListParserRuleCall_1_0() { return cListParameterListParserRuleCall_1_0; }
		
		//(COMMA ELLIPSIS)?
		public Group getGroup_2() { return cGroup_2; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_2_0() { return cCOMMATerminalRuleCall_2_0; }
		
		//ELLIPSIS
		public RuleCall getELLIPSISTerminalRuleCall_2_1() { return cELLIPSISTerminalRuleCall_2_1; }
	}
	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.ParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterListAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cParameterDeclarationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParameterDeclarationParameterDeclarationParserRuleCall_1_0 = (RuleCall)cParameterDeclarationAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cCOMMATerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cParameterDeclarationAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParameterDeclarationParameterDeclarationParserRuleCall_2_1_0 = (RuleCall)cParameterDeclarationAssignment_2_1.eContents().get(0);
		
		//ParameterList:
		//	{ParameterList} parameterDeclaration+=ParameterDeclaration (COMMA parameterDeclaration+=ParameterDeclaration)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{ParameterList} parameterDeclaration+=ParameterDeclaration (COMMA parameterDeclaration+=ParameterDeclaration)*
		public Group getGroup() { return cGroup; }
		
		//{ParameterList}
		public Action getParameterListAction_0() { return cParameterListAction_0; }
		
		//parameterDeclaration+=ParameterDeclaration
		public Assignment getParameterDeclarationAssignment_1() { return cParameterDeclarationAssignment_1; }
		
		//ParameterDeclaration
		public RuleCall getParameterDeclarationParameterDeclarationParserRuleCall_1_0() { return cParameterDeclarationParameterDeclarationParserRuleCall_1_0; }
		
		//(COMMA parameterDeclaration+=ParameterDeclaration)*
		public Group getGroup_2() { return cGroup_2; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_2_0() { return cCOMMATerminalRuleCall_2_0; }
		
		//parameterDeclaration+=ParameterDeclaration
		public Assignment getParameterDeclarationAssignment_2_1() { return cParameterDeclarationAssignment_2_1; }
		
		//ParameterDeclaration
		public RuleCall getParameterDeclarationParameterDeclarationParserRuleCall_2_1_0() { return cParameterDeclarationParameterDeclarationParserRuleCall_2_1_0; }
	}
	public class ParameterDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.ParameterDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDeclSpecifiersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeclSpecifiersDeclarationSpecifiersParserRuleCall_1_0 = (RuleCall)cDeclSpecifiersAssignment_1.eContents().get(0);
		private final Assignment cDeclaratorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclaratorDeclaratorParserRuleCall_2_0 = (RuleCall)cDeclaratorAssignment_2.eContents().get(0);
		
		//ParameterDeclaration:
		//	{ParameterDeclaration} declSpecifiers=DeclarationSpecifiers
		//	declarator=Declarator
		//	//	|
		//	//	(abstractDeclator=AbstractDeclarator)
		//?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ParameterDeclaration} declSpecifiers=DeclarationSpecifiers declarator=Declarator //	|
		////	(abstractDeclator=AbstractDeclarator)
		//?
		public Group getGroup() { return cGroup; }
		
		//{ParameterDeclaration}
		public Action getParameterDeclarationAction_0() { return cParameterDeclarationAction_0; }
		
		//declSpecifiers=DeclarationSpecifiers
		public Assignment getDeclSpecifiersAssignment_1() { return cDeclSpecifiersAssignment_1; }
		
		//DeclarationSpecifiers
		public RuleCall getDeclSpecifiersDeclarationSpecifiersParserRuleCall_1_0() { return cDeclSpecifiersDeclarationSpecifiersParserRuleCall_1_0; }
		
		//declarator=Declarator //	|
		////	(abstractDeclator=AbstractDeclarator)
		//?
		public Assignment getDeclaratorAssignment_2() { return cDeclaratorAssignment_2; }
		
		//Declarator
		public RuleCall getDeclaratorDeclaratorParserRuleCall_2_0() { return cDeclaratorDeclaratorParserRuleCall_2_0; }
	}
	public class IdentifierListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.IdentifierList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIdentifierListAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdMyIdentifierParserRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cCOMMATerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cIdAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIdMyIdentifierParserRuleCall_2_1_0 = (RuleCall)cIdAssignment_2_1.eContents().get(0);
		
		//IdentifierList:
		//	{IdentifierList} id+=MyIdentifier (COMMA id+=MyIdentifier)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{IdentifierList} id+=MyIdentifier (COMMA id+=MyIdentifier)*
		public Group getGroup() { return cGroup; }
		
		//{IdentifierList}
		public Action getIdentifierListAction_0() { return cIdentifierListAction_0; }
		
		//id+=MyIdentifier
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//MyIdentifier
		public RuleCall getIdMyIdentifierParserRuleCall_1_0() { return cIdMyIdentifierParserRuleCall_1_0; }
		
		//(COMMA id+=MyIdentifier)*
		public Group getGroup_2() { return cGroup_2; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_2_0() { return cCOMMATerminalRuleCall_2_0; }
		
		//id+=MyIdentifier
		public Assignment getIdAssignment_2_1() { return cIdAssignment_2_1; }
		
		//MyIdentifier
		public RuleCall getIdMyIdentifierParserRuleCall_2_1_0() { return cIdMyIdentifierParserRuleCall_2_1_0; }
	}
	public class MyIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.MyIdentifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMyIdentifierAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		
		//MyIdentifier:
		//	{MyIdentifier} id=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{MyIdentifier} id=ID
		public Group getGroup() { return cGroup; }
		
		//{MyIdentifier}
		public Action getMyIdentifierAction_0() { return cMyIdentifierAction_0; }
		
		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }
	}
	public class TypeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.TypeName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypeNameAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cListSpecifierQualifierListParserRuleCall_1_0 = (RuleCall)cListAssignment_1.eContents().get(0);
		
		//TypeName:
		//	{TypeName} list=SpecifierQualifierList
		//	//(abstractDeclarator+=AbstractDeclarator)?;
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{TypeName} list=SpecifierQualifierList
		public Group getGroup() { return cGroup; }
		
		//{TypeName}
		public Action getTypeNameAction_0() { return cTypeNameAction_0; }
		
		//list=SpecifierQualifierList
		public Assignment getListAssignment_1() { return cListAssignment_1; }
		
		//SpecifierQualifierList
		public RuleCall getListSpecifierQualifierListParserRuleCall_1_0() { return cListSpecifierQualifierListParserRuleCall_1_0; }
	}
	public class InitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.Initializer");
		private final Assignment cExprAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExprAssignmentExpressionParserRuleCall_0 = (RuleCall)cExprAssignment.eContents().get(0);
		
		/// *
		//AbstractDeclarator:
		//	{AbstractDeclarator} 
		//	//pointer
		//	//(directAbstractDeclarator=DirectAbstractDeclarator)?
		//	//(gccDeclExtAbstract+=gccDeclaratorExtension)*
		//	//| 
		//	(directAbstractDeclarator=DirectAbstractDeclarator)
		//	//(gccDeclExtAbstract+=gccDeclaratorExtension)*
		//;
		// * / / *
		//DirectAbstractDeclarator returns AbstractDeclarator:
		//	{DirectAbstractDeclarator}
		//	(LEFTPAREN declarator=AbstractDeclarator RIGHTPAREN
		//		//(gccDeclExt+=gccDeclaratorExtension)*
		//	|	abstractDeclaratorSuffix+=AbstractDeclaratorSuffix
		//	)
		//	
		//	//(abstractDeclaratorSuffix+=abstractDeclaratorSuffix)*
		//;
		// * / / *
		//abstractDeclaratorSuffix: {abstractDeclaratorSuffix}
		//	(LEFTBRACKET typeQualifierList=typeQualifierList? (assignmentExpr+=assignmentExpression)? RIGHTBRACKET
		//	|	LEFTBRACKET STATIC typeQualifierList=typeQualifierList? (assignmentExpr+=assignmentExpression) RIGHTBRACKET
		//	|	LEFTBRACKET typeQualifierListOrig=typeQualifierList STATIC assignmentExpr+=assignmentExpression RIGHTBRACKET
		//	|	LEFTBRACKET STAR RIGHTBRACKET
		//	|	LEFTPAREN parameterTypeList=parameterTypeList? RIGHTPAREN (gccDeclExt+=gccDeclaratorExtension)*
		//	)
		//;
		// * / Initializer:
		//	expr=AssignmentExpression
		//	//|	LEFTBRACE initializerList COMMA? RIGHTBRACE
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//expr=AssignmentExpression
		public Assignment getExprAssignment() { return cExprAssignment; }
		
		//AssignmentExpression
		public RuleCall getExprAssignmentExpressionParserRuleCall_0() { return cExprAssignmentExpressionParserRuleCall_0; }
	}
	public class BlockListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.BlockList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockListAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cDeclarationAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cDeclarationDeclarationParserRuleCall_1_0_0 = (RuleCall)cDeclarationAssignment_1_0.eContents().get(0);
		private final Assignment cStatementAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_1_1_0 = (RuleCall)cStatementAssignment_1_1.eContents().get(0);
		
		/// *
		//initializerList: designation? (initializer=initializer)
		//	(COMMA (designation+=designation)? (initializerMore+=initializer))*
		//;
		// * / / *** Statements * / BlockList initRuleAction { at.jku.weiner.c.Log.log("BlockList-enter"); } afterRuleAction {
		//at.jku.weiner.c.Log.log("BlockList-enter"); }:
		//	{BlockList} (declaration+=Declaration | statement+=Statement)+;
		@Override public ParserRule getRule() { return rule; }
		
		//{BlockList} (declaration+=Declaration | statement+=Statement)+
		public Group getGroup() { return cGroup; }
		
		//{BlockList}
		public Action getBlockListAction_0() { return cBlockListAction_0; }
		
		//(declaration+=Declaration | statement+=Statement)+
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//declaration+=Declaration
		public Assignment getDeclarationAssignment_1_0() { return cDeclarationAssignment_1_0; }
		
		//Declaration
		public RuleCall getDeclarationDeclarationParserRuleCall_1_0_0() { return cDeclarationDeclarationParserRuleCall_1_0_0; }
		
		//statement+=Statement
		public Assignment getStatementAssignment_1_1() { return cStatementAssignment_1_1; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_1_1_0() { return cStatementStatementParserRuleCall_1_1_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cStmtAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cStmtLabeledStatementParserRuleCall_1_0_0 = (RuleCall)cStmtAssignment_1_0.eContents().get(0);
		private final Assignment cStmtAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cStmtCompoundStatementParserRuleCall_1_1_0 = (RuleCall)cStmtAssignment_1_1.eContents().get(0);
		private final Assignment cStmtAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cStmtExpressionStatementParserRuleCall_1_2_0 = (RuleCall)cStmtAssignment_1_2.eContents().get(0);
		private final Assignment cStmtAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cStmtSelectionStatementParserRuleCall_1_3_0 = (RuleCall)cStmtAssignment_1_3.eContents().get(0);
		private final Assignment cStmtAssignment_1_4 = (Assignment)cAlternatives_1.eContents().get(4);
		private final RuleCall cStmtIterationStatementParserRuleCall_1_4_0 = (RuleCall)cStmtAssignment_1_4.eContents().get(0);
		private final Assignment cStmtAssignment_1_5 = (Assignment)cAlternatives_1.eContents().get(5);
		private final RuleCall cStmtJumpStatementParserRuleCall_1_5_0 = (RuleCall)cStmtAssignment_1_5.eContents().get(0);
		
		//Statement:
		//	{Statement} (stmt=LabeledStatement
		//	| stmt=CompoundStatement
		//	| stmt=ExpressionStatement
		//	| stmt=SelectionStatement
		//	| stmt=IterationStatement
		//	| stmt=JumpStatement
		//	/ *
		//	|	('__asm' | '__asm__') (VOLATILE | '__volatile__') 
		//			LEFTPAREN (expr+=logicalOrExpression (COMMA logicalExpr+=logicalOrExpression)*)? 
		//			(COLON (expr+=logicalOrExpression (COMMA logicalExpr+=logicalOrExpression)*)?)* RIGHTPAREN SEMI
		// 	* /);
		@Override public ParserRule getRule() { return rule; }
		
		//{Statement} (stmt=LabeledStatement | stmt=CompoundStatement | stmt=ExpressionStatement | stmt=SelectionStatement |
		//stmt=IterationStatement | stmt=JumpStatement / *
		//	|	('__asm' | '__asm__') (VOLATILE | '__volatile__') 
		//			LEFTPAREN (expr+=logicalOrExpression (COMMA logicalExpr+=logicalOrExpression)*)? 
		//			(COLON (expr+=logicalOrExpression (COMMA logicalExpr+=logicalOrExpression)*)?)* RIGHTPAREN SEMI
		// 	* /)
		public Group getGroup() { return cGroup; }
		
		//{Statement}
		public Action getStatementAction_0() { return cStatementAction_0; }
		
		//(stmt=LabeledStatement | stmt=CompoundStatement | stmt=ExpressionStatement | stmt=SelectionStatement |
		//stmt=IterationStatement | stmt=JumpStatement / *
		//	|	('__asm' | '__asm__') (VOLATILE | '__volatile__') 
		//			LEFTPAREN (expr+=logicalOrExpression (COMMA logicalExpr+=logicalOrExpression)*)? 
		//			(COLON (expr+=logicalOrExpression (COMMA logicalExpr+=logicalOrExpression)*)?)* RIGHTPAREN SEMI
		// 	* /)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//stmt=LabeledStatement
		public Assignment getStmtAssignment_1_0() { return cStmtAssignment_1_0; }
		
		//LabeledStatement
		public RuleCall getStmtLabeledStatementParserRuleCall_1_0_0() { return cStmtLabeledStatementParserRuleCall_1_0_0; }
		
		//stmt=CompoundStatement
		public Assignment getStmtAssignment_1_1() { return cStmtAssignment_1_1; }
		
		//CompoundStatement
		public RuleCall getStmtCompoundStatementParserRuleCall_1_1_0() { return cStmtCompoundStatementParserRuleCall_1_1_0; }
		
		//stmt=ExpressionStatement
		public Assignment getStmtAssignment_1_2() { return cStmtAssignment_1_2; }
		
		//ExpressionStatement
		public RuleCall getStmtExpressionStatementParserRuleCall_1_2_0() { return cStmtExpressionStatementParserRuleCall_1_2_0; }
		
		//stmt=SelectionStatement
		public Assignment getStmtAssignment_1_3() { return cStmtAssignment_1_3; }
		
		//SelectionStatement
		public RuleCall getStmtSelectionStatementParserRuleCall_1_3_0() { return cStmtSelectionStatementParserRuleCall_1_3_0; }
		
		//stmt=IterationStatement
		public Assignment getStmtAssignment_1_4() { return cStmtAssignment_1_4; }
		
		//IterationStatement
		public RuleCall getStmtIterationStatementParserRuleCall_1_4_0() { return cStmtIterationStatementParserRuleCall_1_4_0; }
		
		//stmt=JumpStatement
		public Assignment getStmtAssignment_1_5() { return cStmtAssignment_1_5; }
		
		//JumpStatement
		public RuleCall getStmtJumpStatementParserRuleCall_1_5_0() { return cStmtJumpStatementParserRuleCall_1_5_0; }
	}
	public class LabeledStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.LabeledStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLabeledStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cLStmtAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLStmtStatementParserRuleCall_3_0 = (RuleCall)cLStmtAssignment_3.eContents().get(0);
		
		//LabeledStatement Statement:
		//	{LabeledStatement} id=ID COLON lStmt=Statement
		@Override public ParserRule getRule() { return rule; }
		
		//{LabeledStatement} id=ID COLON lStmt=Statement
		public Group getGroup() { return cGroup; }
		
		//{LabeledStatement}
		public Action getLabeledStatementAction_0() { return cLabeledStatementAction_0; }
		
		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }
		
		//COLON
		public RuleCall getCOLONTerminalRuleCall_2() { return cCOLONTerminalRuleCall_2; }
		
		//lStmt=Statement
		public Assignment getLStmtAssignment_3() { return cLStmtAssignment_3; }
		
		//Statement
		public RuleCall getLStmtStatementParserRuleCall_3_0() { return cLStmtStatementParserRuleCall_3_0; }
	}
	public class CompoundStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.CompoundStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompoundStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cLEFTBRACETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyBodyStatementParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		private final RuleCall cRIGHTBRACETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//CompoundStatement Statement:
		//	{CompoundStatement} LEFTBRACE
		//	body=BodyStatement
		//	RIGHTBRACE
		@Override public ParserRule getRule() { return rule; }
		
		//{CompoundStatement} LEFTBRACE body=BodyStatement RIGHTBRACE
		public Group getGroup() { return cGroup; }
		
		//{CompoundStatement}
		public Action getCompoundStatementAction_0() { return cCompoundStatementAction_0; }
		
		//LEFTBRACE
		public RuleCall getLEFTBRACETerminalRuleCall_1() { return cLEFTBRACETerminalRuleCall_1; }
		
		//body=BodyStatement
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//BodyStatement
		public RuleCall getBodyBodyStatementParserRuleCall_2_0() { return cBodyBodyStatementParserRuleCall_2_0; }
		
		//RIGHTBRACE
		public RuleCall getRIGHTBRACETerminalRuleCall_3() { return cRIGHTBRACETerminalRuleCall_3; }
	}
	public class BodyStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.BodyStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBodyStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cBlockListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockListBlockListParserRuleCall_1_0 = (RuleCall)cBlockListAssignment_1.eContents().get(0);
		
		//BodyStatement Statement initRuleAction { at.jku.weiner.c.Log.log("BodyStatement-enter"); } afterRuleAction {
		//at.jku.weiner.c.Log.log("BodyStatement-leave"); }:
		//	{BodyStatement} blockList+=BlockList?
		@Override public ParserRule getRule() { return rule; }
		
		//{BodyStatement} blockList+=BlockList?
		public Group getGroup() { return cGroup; }
		
		//{BodyStatement}
		public Action getBodyStatementAction_0() { return cBodyStatementAction_0; }
		
		//blockList+=BlockList?
		public Assignment getBlockListAssignment_1() { return cBlockListAssignment_1; }
		
		//BlockList
		public RuleCall getBlockListBlockListParserRuleCall_1_0() { return cBlockListBlockListParserRuleCall_1_0; }
	}
	public class ExpressionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.ExpressionStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Assignment cSemiAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSemiSEMITerminalRuleCall_2_0 = (RuleCall)cSemiAssignment_2.eContents().get(0);
		
		//ExpressionStatement Statement initRuleAction { at.jku.weiner.c.Log.log("ExpressionStatement-enter"); } afterRuleAction {
		//at.jku.weiner.c.Log.log("ExpressionStatement-enter"); }:
		//	{ExpressionStatement} expression=Expression?
		//	semi=SEMI
		@Override public ParserRule getRule() { return rule; }
		
		//{ExpressionStatement} expression=Expression? semi=SEMI
		public Group getGroup() { return cGroup; }
		
		//{ExpressionStatement}
		public Action getExpressionStatementAction_0() { return cExpressionStatementAction_0; }
		
		//expression=Expression?
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
		
		//semi=SEMI
		public Assignment getSemiAssignment_2() { return cSemiAssignment_2; }
		
		//SEMI
		public RuleCall getSemiSEMITerminalRuleCall_2_0() { return cSemiSEMITerminalRuleCall_2_0; }
	}
	public class SelectionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.SelectionStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSelectionStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIfAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIfKW_IFTerminalRuleCall_1_0 = (RuleCall)cIfAssignment_1.eContents().get(0);
		private final RuleCall cLEFTPARENTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExprExpressionParserRuleCall_3_0 = (RuleCall)cExprAssignment_3.eContents().get(0);
		private final RuleCall cRIGHTPARENTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cIfStatementAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIfStatementStatementParserRuleCall_5_0 = (RuleCall)cIfStatementAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cElseAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cElseKW_ELSETerminalRuleCall_6_0_0 = (RuleCall)cElseAssignment_6_0.eContents().get(0);
		private final Assignment cElseStatementAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cElseStatementStatementParserRuleCall_6_1_0 = (RuleCall)cElseStatementAssignment_6_1.eContents().get(0);
		
		//SelectionStatement Statement:
		//	{SelectionStatement} if=KW_IF LEFTPAREN expr=Expression RIGHTPAREN ifStatement=Statement (=> else=KW_ELSE
		//	elseStatement=Statement)?
		@Override public ParserRule getRule() { return rule; }
		
		//{SelectionStatement} if=KW_IF LEFTPAREN expr=Expression RIGHTPAREN ifStatement=Statement (=> else=KW_ELSE
		//elseStatement=Statement)?
		public Group getGroup() { return cGroup; }
		
		//{SelectionStatement}
		public Action getSelectionStatementAction_0() { return cSelectionStatementAction_0; }
		
		//if=KW_IF
		public Assignment getIfAssignment_1() { return cIfAssignment_1; }
		
		//KW_IF
		public RuleCall getIfKW_IFTerminalRuleCall_1_0() { return cIfKW_IFTerminalRuleCall_1_0; }
		
		//LEFTPAREN
		public RuleCall getLEFTPARENTerminalRuleCall_2() { return cLEFTPARENTerminalRuleCall_2; }
		
		//expr=Expression
		public Assignment getExprAssignment_3() { return cExprAssignment_3; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_3_0() { return cExprExpressionParserRuleCall_3_0; }
		
		//RIGHTPAREN
		public RuleCall getRIGHTPARENTerminalRuleCall_4() { return cRIGHTPARENTerminalRuleCall_4; }
		
		//ifStatement=Statement
		public Assignment getIfStatementAssignment_5() { return cIfStatementAssignment_5; }
		
		//Statement
		public RuleCall getIfStatementStatementParserRuleCall_5_0() { return cIfStatementStatementParserRuleCall_5_0; }
		
		//(=> else=KW_ELSE elseStatement=Statement)?
		public Group getGroup_6() { return cGroup_6; }
		
		//=> else=KW_ELSE
		public Assignment getElseAssignment_6_0() { return cElseAssignment_6_0; }
		
		//KW_ELSE
		public RuleCall getElseKW_ELSETerminalRuleCall_6_0_0() { return cElseKW_ELSETerminalRuleCall_6_0_0; }
		
		//elseStatement=Statement
		public Assignment getElseStatementAssignment_6_1() { return cElseStatementAssignment_6_1; }
		
		//Statement
		public RuleCall getElseStatementStatementParserRuleCall_6_1_0() { return cElseStatementStatementParserRuleCall_6_1_0; }
	}
	public class IterationStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.IterationStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIterationStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cWhileAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWhileKW_WHILETerminalRuleCall_1_0 = (RuleCall)cWhileAssignment_1.eContents().get(0);
		private final RuleCall cLEFTPARENTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExprExpressionParserRuleCall_3_0 = (RuleCall)cExprAssignment_3.eContents().get(0);
		private final RuleCall cRIGHTPARENTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cStatementAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementStatementParserRuleCall_5_0 = (RuleCall)cStatementAssignment_5.eContents().get(0);
		
		//IterationStatement Statement:
		//	{IterationStatement} while=KW_WHILE LEFTPAREN expr=Expression RIGHTPAREN statement=Statement
		@Override public ParserRule getRule() { return rule; }
		
		//{IterationStatement} while=KW_WHILE LEFTPAREN expr=Expression RIGHTPAREN statement=Statement
		public Group getGroup() { return cGroup; }
		
		//{IterationStatement}
		public Action getIterationStatementAction_0() { return cIterationStatementAction_0; }
		
		//while=KW_WHILE
		public Assignment getWhileAssignment_1() { return cWhileAssignment_1; }
		
		//KW_WHILE
		public RuleCall getWhileKW_WHILETerminalRuleCall_1_0() { return cWhileKW_WHILETerminalRuleCall_1_0; }
		
		//LEFTPAREN
		public RuleCall getLEFTPARENTerminalRuleCall_2() { return cLEFTPARENTerminalRuleCall_2; }
		
		//expr=Expression
		public Assignment getExprAssignment_3() { return cExprAssignment_3; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_3_0() { return cExprExpressionParserRuleCall_3_0; }
		
		//RIGHTPAREN
		public RuleCall getRIGHTPARENTerminalRuleCall_4() { return cRIGHTPARENTerminalRuleCall_4; }
		
		//statement=Statement
		public Assignment getStatementAssignment_5() { return cStatementAssignment_5; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_5_0() { return cStatementStatementParserRuleCall_5_0; }
	}
	public class JumpStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.JumpStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJumpStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cReturnAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cReturnKW_RETURNTerminalRuleCall_1_0_0_0 = (RuleCall)cReturnAssignment_1_0_0.eContents().get(0);
		private final Assignment cExprAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_0_1_0 = (RuleCall)cExprAssignment_1_0_1.eContents().get(0);
		private final Assignment cSemiAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cSemiSEMITerminalRuleCall_1_0_2_0 = (RuleCall)cSemiAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cGotoAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cGotoKW_GOTOTerminalRuleCall_1_1_0_0 = (RuleCall)cGotoAssignment_1_1_0.eContents().get(0);
		private final Assignment cExprAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cExprUnaryExpressionParserRuleCall_1_1_1_0 = (RuleCall)cExprAssignment_1_1_1.eContents().get(0);
		private final Assignment cSemiAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cSemiSEMITerminalRuleCall_1_1_2_0 = (RuleCall)cSemiAssignment_1_1_2.eContents().get(0);
		
		//JumpStatement Statement:
		//	{JumpStatement} (return=KW_RETURN expr=Expression? semi=SEMI
		//	| goto=KW_GOTO expr=UnaryExpression semi=SEMI // GCC extension
		//)
		@Override public ParserRule getRule() { return rule; }
		
		//{JumpStatement} (return=KW_RETURN expr=Expression? semi=SEMI | goto=KW_GOTO expr=UnaryExpression semi=SEMI // GCC extension
		//)
		public Group getGroup() { return cGroup; }
		
		//{JumpStatement}
		public Action getJumpStatementAction_0() { return cJumpStatementAction_0; }
		
		//(return=KW_RETURN expr=Expression? semi=SEMI | goto=KW_GOTO expr=UnaryExpression semi=SEMI // GCC extension
		//)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		////GOTO IDENTIFIER SEMI //(can be reached over GOTO unaryExpression)
		////|	CONTINUE SEMI
		////|	BREAK SEMI
		////|
		//return=KW_RETURN expr=Expression? semi=SEMI
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		////GOTO IDENTIFIER SEMI //(can be reached over GOTO unaryExpression)
		////|	CONTINUE SEMI
		////|	BREAK SEMI
		////|
		//return=KW_RETURN
		public Assignment getReturnAssignment_1_0_0() { return cReturnAssignment_1_0_0; }
		
		//KW_RETURN
		public RuleCall getReturnKW_RETURNTerminalRuleCall_1_0_0_0() { return cReturnKW_RETURNTerminalRuleCall_1_0_0_0; }
		
		//expr=Expression?
		public Assignment getExprAssignment_1_0_1() { return cExprAssignment_1_0_1; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_0_1_0() { return cExprExpressionParserRuleCall_1_0_1_0; }
		
		//semi=SEMI
		public Assignment getSemiAssignment_1_0_2() { return cSemiAssignment_1_0_2; }
		
		//SEMI
		public RuleCall getSemiSEMITerminalRuleCall_1_0_2_0() { return cSemiSEMITerminalRuleCall_1_0_2_0; }
		
		//goto=KW_GOTO expr=UnaryExpression semi=SEMI
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//goto=KW_GOTO
		public Assignment getGotoAssignment_1_1_0() { return cGotoAssignment_1_1_0; }
		
		//KW_GOTO
		public RuleCall getGotoKW_GOTOTerminalRuleCall_1_1_0_0() { return cGotoKW_GOTOTerminalRuleCall_1_1_0_0; }
		
		//expr=UnaryExpression
		public Assignment getExprAssignment_1_1_1() { return cExprAssignment_1_1_1; }
		
		//UnaryExpression
		public RuleCall getExprUnaryExpressionParserRuleCall_1_1_1_0() { return cExprUnaryExpressionParserRuleCall_1_1_1_0; }
		
		//semi=SEMI
		public Assignment getSemiAssignment_1_1_2() { return cSemiAssignment_1_1_2; }
		
		//SEMI
		public RuleCall getSemiSEMITerminalRuleCall_1_1_2_0() { return cSemiSEMITerminalRuleCall_1_1_2_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExprExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExprAssignmentExpressionParserRuleCall_1_0 = (RuleCall)cExprExprAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cCOMMATerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cExprExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprExprAssignmentExpressionParserRuleCall_2_1_0 = (RuleCall)cExprExprAssignment_2_1.eContents().get(0);
		
		////designation: designatorList ASSIGN;
		////designatorList: designator (designator+=designator)*;
		/// *
		//designator: {designator} LEFTBRACKET expr=constantExpression RIGHTBRACKET
		//	|	{designator} DOT IDENTIFIER
		//;
		// * / //staticAssertDeclaration: STATICASSERT LEFTPAREN constantExpression COMMA STRINGLITERAL+ RIGHTPAREN SEMI;
		/// *
		//declarationList: 
		//	(declaration+=declaration)+
		//;
		// * / / *** Expressions *** / Expression initRuleAction { at.jku.weiner.c.Log.error("Expression-enter"); } afterRuleAction {
		//at.jku.weiner.c.Log.error("Expression-leave"); }:
		//	{Expression} exprExpr+=AssignmentExpression (COMMA exprExpr+=AssignmentExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Expression} exprExpr+=AssignmentExpression (COMMA exprExpr+=AssignmentExpression)*
		public Group getGroup() { return cGroup; }
		
		//{Expression}
		public Action getExpressionAction_0() { return cExpressionAction_0; }
		
		//exprExpr+=AssignmentExpression
		public Assignment getExprExprAssignment_1() { return cExprExprAssignment_1; }
		
		//AssignmentExpression
		public RuleCall getExprExprAssignmentExpressionParserRuleCall_1_0() { return cExprExprAssignmentExpressionParserRuleCall_1_0; }
		
		//(COMMA exprExpr+=AssignmentExpression)*
		public Group getGroup_2() { return cGroup_2; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_2_0() { return cCOMMATerminalRuleCall_2_0; }
		
		//exprExpr+=AssignmentExpression
		public Assignment getExprExprAssignment_2_1() { return cExprExprAssignment_2_1; }
		
		//AssignmentExpression
		public RuleCall getExprExprAssignmentExpressionParserRuleCall_2_1_0() { return cExprExprAssignmentExpressionParserRuleCall_2_1_0; }
	}
	public class AssignmentExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.AssignmentExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAssignmentExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cExprAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cExprLvalueParserRuleCall_1_0_0_0 = (RuleCall)cExprAssignment_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cOpAssignmentOperatorParserRuleCall_1_0_1_0 = (RuleCall)cOpAssignment_1_0_1.eContents().get(0);
		private final Assignment cAssignmentExprAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cAssignmentExprAssignmentExpressionParserRuleCall_1_0_2_0 = (RuleCall)cAssignmentExprAssignment_1_0_2.eContents().get(0);
		private final Assignment cExprAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cExprConditionalExpressionParserRuleCall_1_1_0 = (RuleCall)cExprAssignment_1_1.eContents().get(0);
		
		//AssignmentExpression Expression initRuleAction { at.jku.weiner.c.Log.error("AssignmentExpression-enter"); }
		//afterRuleAction { at.jku.weiner.c.Log.error("AssignmentExpression-leave"); }:
		//	{AssignmentExpression} (expr=Lvalue
		//	op=AssignmentOperator
		//	assignmentExpr=AssignmentExpression
		//	| expr=ConditionalExpression)
		@Override public ParserRule getRule() { return rule; }
		
		//{AssignmentExpression} (expr=Lvalue op=AssignmentOperator assignmentExpr=AssignmentExpression |
		//expr=ConditionalExpression)
		public Group getGroup() { return cGroup; }
		
		//{AssignmentExpression}
		public Action getAssignmentExpressionAction_0() { return cAssignmentExpressionAction_0; }
		
		//(expr=Lvalue op=AssignmentOperator assignmentExpr=AssignmentExpression | expr=ConditionalExpression)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//// yes, the order of these rules
		//// makes A DIFFERENCE!!!
		//expr=Lvalue op=AssignmentOperator assignmentExpr=AssignmentExpression
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//expr=Lvalue
		public Assignment getExprAssignment_1_0_0() { return cExprAssignment_1_0_0; }
		
		//Lvalue
		public RuleCall getExprLvalueParserRuleCall_1_0_0_0() { return cExprLvalueParserRuleCall_1_0_0_0; }
		
		//op=AssignmentOperator
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//AssignmentOperator
		public RuleCall getOpAssignmentOperatorParserRuleCall_1_0_1_0() { return cOpAssignmentOperatorParserRuleCall_1_0_1_0; }
		
		//assignmentExpr=AssignmentExpression
		public Assignment getAssignmentExprAssignment_1_0_2() { return cAssignmentExprAssignment_1_0_2; }
		
		//AssignmentExpression
		public RuleCall getAssignmentExprAssignmentExpressionParserRuleCall_1_0_2_0() { return cAssignmentExprAssignmentExpressionParserRuleCall_1_0_2_0; }
		
		//expr=ConditionalExpression
		public Assignment getExprAssignment_1_1() { return cExprAssignment_1_1; }
		
		//ConditionalExpression
		public RuleCall getExprConditionalExpressionParserRuleCall_1_1_0() { return cExprConditionalExpressionParserRuleCall_1_1_0; }
	}
	public class LvalueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.Lvalue");
		private final RuleCall cUnaryExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Lvalue Expression initRuleAction { at.jku.weiner.c.Log.error("Lvalue-enter"); } afterRuleAction {
		//at.jku.weiner.c.Log.error("Lvalue-leave"); }:
		//	UnaryExpression
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall() { return cUnaryExpressionParserRuleCall; }
	}
	public class AssignmentOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.AssignmentOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAssignmentOperatorAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOpAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOpASSIGNTerminalRuleCall_0_1_0 = (RuleCall)cOpAssignment_0_1.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOpSTARASSIGNTerminalRuleCall_1_0 = (RuleCall)cOpAssignment_1.eContents().get(0);
		private final Assignment cOpAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cOpDIVASSIGNTerminalRuleCall_2_0 = (RuleCall)cOpAssignment_2.eContents().get(0);
		private final Assignment cOpAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cOpMODASSIGNTerminalRuleCall_3_0 = (RuleCall)cOpAssignment_3.eContents().get(0);
		private final Assignment cOpAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cOpPLUSASSIGNTerminalRuleCall_4_0 = (RuleCall)cOpAssignment_4.eContents().get(0);
		private final Assignment cOpAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cOpMINUSASSIGNTerminalRuleCall_5_0 = (RuleCall)cOpAssignment_5.eContents().get(0);
		private final Assignment cOpAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cOpLEFTSHIFTASSIGNTerminalRuleCall_6_0 = (RuleCall)cOpAssignment_6.eContents().get(0);
		private final Assignment cOpAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cOpRIGHTSHIFTASSIGNTerminalRuleCall_7_0 = (RuleCall)cOpAssignment_7.eContents().get(0);
		private final Assignment cOpAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final RuleCall cOpANDASSIGNTerminalRuleCall_8_0 = (RuleCall)cOpAssignment_8.eContents().get(0);
		private final Assignment cOpAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final RuleCall cOpXORASSIGNTerminalRuleCall_9_0 = (RuleCall)cOpAssignment_9.eContents().get(0);
		private final Assignment cOpAssignment_10 = (Assignment)cAlternatives.eContents().get(10);
		private final RuleCall cOpORASSIGNTerminalRuleCall_10_0 = (RuleCall)cOpAssignment_10.eContents().get(0);
		
		//AssignmentOperator:
		//	{AssignmentOperator} op=ASSIGN
		//	| op=STARASSIGN
		//	| op=DIVASSIGN
		//	| op=MODASSIGN
		//	| op=PLUSASSIGN
		//	| op=MINUSASSIGN
		//	| op=LEFTSHIFTASSIGN
		//	| op=RIGHTSHIFTASSIGN
		//	| op=ANDASSIGN
		//	| op=XORASSIGN
		//	| op=ORASSIGN;
		@Override public ParserRule getRule() { return rule; }
		
		//{AssignmentOperator} op=ASSIGN | op=STARASSIGN | op=DIVASSIGN | op=MODASSIGN | op=PLUSASSIGN | op=MINUSASSIGN |
		//op=LEFTSHIFTASSIGN | op=RIGHTSHIFTASSIGN | op=ANDASSIGN | op=XORASSIGN | op=ORASSIGN
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{AssignmentOperator} op=ASSIGN
		public Group getGroup_0() { return cGroup_0; }
		
		//{AssignmentOperator}
		public Action getAssignmentOperatorAction_0_0() { return cAssignmentOperatorAction_0_0; }
		
		//op=ASSIGN
		public Assignment getOpAssignment_0_1() { return cOpAssignment_0_1; }
		
		//ASSIGN
		public RuleCall getOpASSIGNTerminalRuleCall_0_1_0() { return cOpASSIGNTerminalRuleCall_0_1_0; }
		
		//op=STARASSIGN
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//STARASSIGN
		public RuleCall getOpSTARASSIGNTerminalRuleCall_1_0() { return cOpSTARASSIGNTerminalRuleCall_1_0; }
		
		//op=DIVASSIGN
		public Assignment getOpAssignment_2() { return cOpAssignment_2; }
		
		//DIVASSIGN
		public RuleCall getOpDIVASSIGNTerminalRuleCall_2_0() { return cOpDIVASSIGNTerminalRuleCall_2_0; }
		
		//op=MODASSIGN
		public Assignment getOpAssignment_3() { return cOpAssignment_3; }
		
		//MODASSIGN
		public RuleCall getOpMODASSIGNTerminalRuleCall_3_0() { return cOpMODASSIGNTerminalRuleCall_3_0; }
		
		//op=PLUSASSIGN
		public Assignment getOpAssignment_4() { return cOpAssignment_4; }
		
		//PLUSASSIGN
		public RuleCall getOpPLUSASSIGNTerminalRuleCall_4_0() { return cOpPLUSASSIGNTerminalRuleCall_4_0; }
		
		//op=MINUSASSIGN
		public Assignment getOpAssignment_5() { return cOpAssignment_5; }
		
		//MINUSASSIGN
		public RuleCall getOpMINUSASSIGNTerminalRuleCall_5_0() { return cOpMINUSASSIGNTerminalRuleCall_5_0; }
		
		//op=LEFTSHIFTASSIGN
		public Assignment getOpAssignment_6() { return cOpAssignment_6; }
		
		//LEFTSHIFTASSIGN
		public RuleCall getOpLEFTSHIFTASSIGNTerminalRuleCall_6_0() { return cOpLEFTSHIFTASSIGNTerminalRuleCall_6_0; }
		
		//op=RIGHTSHIFTASSIGN
		public Assignment getOpAssignment_7() { return cOpAssignment_7; }
		
		//RIGHTSHIFTASSIGN
		public RuleCall getOpRIGHTSHIFTASSIGNTerminalRuleCall_7_0() { return cOpRIGHTSHIFTASSIGNTerminalRuleCall_7_0; }
		
		//op=ANDASSIGN
		public Assignment getOpAssignment_8() { return cOpAssignment_8; }
		
		//ANDASSIGN
		public RuleCall getOpANDASSIGNTerminalRuleCall_8_0() { return cOpANDASSIGNTerminalRuleCall_8_0; }
		
		//op=XORASSIGN
		public Assignment getOpAssignment_9() { return cOpAssignment_9; }
		
		//XORASSIGN
		public RuleCall getOpXORASSIGNTerminalRuleCall_9_0() { return cOpXORASSIGNTerminalRuleCall_9_0; }
		
		//op=ORASSIGN
		public Assignment getOpAssignment_10() { return cOpAssignment_10; }
		
		//ORASSIGN
		public RuleCall getOpORASSIGNTerminalRuleCall_10_0() { return cOpORASSIGNTerminalRuleCall_10_0; }
	}
	public class ConditionalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.ConditionalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConditionalExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprLogicalOrExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cQUESTIONTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cQExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cQExprExpressionParserRuleCall_2_1_0 = (RuleCall)cQExprAssignment_2_1.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Assignment cCExprAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cCExprConditionalExpressionParserRuleCall_2_3_0 = (RuleCall)cCExprAssignment_2_3.eContents().get(0);
		
		//ConditionalExpression Expression initRuleAction { at.jku.weiner.c.Log.error("ConditionalExpression-enter"); }
		//afterRuleAction { at.jku.weiner.c.Log.error("ConditionalExpression-leave"); }:
		//	{ConditionalExpression} expr=LogicalOrExpression (QUESTION qExpr=Expression COLON
		//	cExpr=ConditionalExpression)?
		@Override public ParserRule getRule() { return rule; }
		
		//{ConditionalExpression} expr=LogicalOrExpression (QUESTION qExpr=Expression COLON cExpr=ConditionalExpression)?
		public Group getGroup() { return cGroup; }
		
		//{ConditionalExpression}
		public Action getConditionalExpressionAction_0() { return cConditionalExpressionAction_0; }
		
		//expr=LogicalOrExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//LogicalOrExpression
		public RuleCall getExprLogicalOrExpressionParserRuleCall_1_0() { return cExprLogicalOrExpressionParserRuleCall_1_0; }
		
		//(QUESTION qExpr=Expression COLON cExpr=ConditionalExpression)?
		public Group getGroup_2() { return cGroup_2; }
		
		//QUESTION
		public RuleCall getQUESTIONTerminalRuleCall_2_0() { return cQUESTIONTerminalRuleCall_2_0; }
		
		//qExpr=Expression
		public Assignment getQExprAssignment_2_1() { return cQExprAssignment_2_1; }
		
		//Expression
		public RuleCall getQExprExpressionParserRuleCall_2_1_0() { return cQExprExpressionParserRuleCall_2_1_0; }
		
		//COLON
		public RuleCall getCOLONTerminalRuleCall_2_2() { return cCOLONTerminalRuleCall_2_2; }
		
		//cExpr=ConditionalExpression
		public Assignment getCExprAssignment_2_3() { return cCExprAssignment_2_3; }
		
		//ConditionalExpression
		public RuleCall getCExprConditionalExpressionParserRuleCall_2_3_0() { return cCExprConditionalExpressionParserRuleCall_2_3_0; }
	}
	public class LogicalOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.LogicalOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLogicalOrExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprLogicalAndExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cORORTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprLogicalAndExpressionParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		
		//LogicalOrExpression Expression:
		//	{LogicalOrExpression} expr+=LogicalAndExpression (OROR expr+=LogicalAndExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//{LogicalOrExpression} expr+=LogicalAndExpression (OROR expr+=LogicalAndExpression)*
		public Group getGroup() { return cGroup; }
		
		//{LogicalOrExpression}
		public Action getLogicalOrExpressionAction_0() { return cLogicalOrExpressionAction_0; }
		
		//expr+=LogicalAndExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//LogicalAndExpression
		public RuleCall getExprLogicalAndExpressionParserRuleCall_1_0() { return cExprLogicalAndExpressionParserRuleCall_1_0; }
		
		//(OROR expr+=LogicalAndExpression)*
		public Group getGroup_2() { return cGroup_2; }
		
		//OROR
		public RuleCall getORORTerminalRuleCall_2_0() { return cORORTerminalRuleCall_2_0; }
		
		//expr+=LogicalAndExpression
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }
		
		//LogicalAndExpression
		public RuleCall getExprLogicalAndExpressionParserRuleCall_2_1_0() { return cExprLogicalAndExpressionParserRuleCall_2_1_0; }
	}
	public class LogicalAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.LogicalAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLogicalAndExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprInclusiveOrExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cANDANDTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprInclusiveOrExpressionParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		
		//LogicalAndExpression Expression:
		//	{LogicalAndExpression} expr+=InclusiveOrExpression (ANDAND expr+=InclusiveOrExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//{LogicalAndExpression} expr+=InclusiveOrExpression (ANDAND expr+=InclusiveOrExpression)*
		public Group getGroup() { return cGroup; }
		
		//{LogicalAndExpression}
		public Action getLogicalAndExpressionAction_0() { return cLogicalAndExpressionAction_0; }
		
		//expr+=InclusiveOrExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//InclusiveOrExpression
		public RuleCall getExprInclusiveOrExpressionParserRuleCall_1_0() { return cExprInclusiveOrExpressionParserRuleCall_1_0; }
		
		//(ANDAND expr+=InclusiveOrExpression)*
		public Group getGroup_2() { return cGroup_2; }
		
		//ANDAND
		public RuleCall getANDANDTerminalRuleCall_2_0() { return cANDANDTerminalRuleCall_2_0; }
		
		//expr+=InclusiveOrExpression
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }
		
		//InclusiveOrExpression
		public RuleCall getExprInclusiveOrExpressionParserRuleCall_2_1_0() { return cExprInclusiveOrExpressionParserRuleCall_2_1_0; }
	}
	public class InclusiveOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.InclusiveOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInclusiveOrExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExclusiveOrExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cORTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprExclusiveOrExpressionParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		
		//InclusiveOrExpression Expression:
		//	{InclusiveOrExpression} expr+=ExclusiveOrExpression (OR expr+=ExclusiveOrExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//{InclusiveOrExpression} expr+=ExclusiveOrExpression (OR expr+=ExclusiveOrExpression)*
		public Group getGroup() { return cGroup; }
		
		//{InclusiveOrExpression}
		public Action getInclusiveOrExpressionAction_0() { return cInclusiveOrExpressionAction_0; }
		
		//expr+=ExclusiveOrExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//ExclusiveOrExpression
		public RuleCall getExprExclusiveOrExpressionParserRuleCall_1_0() { return cExprExclusiveOrExpressionParserRuleCall_1_0; }
		
		//(OR expr+=ExclusiveOrExpression)*
		public Group getGroup_2() { return cGroup_2; }
		
		//OR
		public RuleCall getORTerminalRuleCall_2_0() { return cORTerminalRuleCall_2_0; }
		
		//expr+=ExclusiveOrExpression
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }
		
		//ExclusiveOrExpression
		public RuleCall getExprExclusiveOrExpressionParserRuleCall_2_1_0() { return cExprExclusiveOrExpressionParserRuleCall_2_1_0; }
	}
	public class ExclusiveOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.ExclusiveOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExclusiveOrExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprAndExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cCARETTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprAndExpressionParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		
		//ExclusiveOrExpression Expression:
		//	{ExclusiveOrExpression} expr+=AndExpression (CARET expr+=AndExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//{ExclusiveOrExpression} expr+=AndExpression (CARET expr+=AndExpression)*
		public Group getGroup() { return cGroup; }
		
		//{ExclusiveOrExpression}
		public Action getExclusiveOrExpressionAction_0() { return cExclusiveOrExpressionAction_0; }
		
		//expr+=AndExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//AndExpression
		public RuleCall getExprAndExpressionParserRuleCall_1_0() { return cExprAndExpressionParserRuleCall_1_0; }
		
		//(CARET expr+=AndExpression)*
		public Group getGroup_2() { return cGroup_2; }
		
		//CARET
		public RuleCall getCARETTerminalRuleCall_2_0() { return cCARETTerminalRuleCall_2_0; }
		
		//expr+=AndExpression
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }
		
		//AndExpression
		public RuleCall getExprAndExpressionParserRuleCall_2_1_0() { return cExprAndExpressionParserRuleCall_2_1_0; }
	}
	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAndExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprEqualityExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cANDTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprEqualityExpressionParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		
		//AndExpression Expression:
		//	{AndExpression} expr+=EqualityExpression (AND expr+=EqualityExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//{AndExpression} expr+=EqualityExpression (AND expr+=EqualityExpression)*
		public Group getGroup() { return cGroup; }
		
		//{AndExpression}
		public Action getAndExpressionAction_0() { return cAndExpressionAction_0; }
		
		//expr+=EqualityExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//EqualityExpression
		public RuleCall getExprEqualityExpressionParserRuleCall_1_0() { return cExprEqualityExpressionParserRuleCall_1_0; }
		
		//(AND expr+=EqualityExpression)*
		public Group getGroup_2() { return cGroup_2; }
		
		//AND
		public RuleCall getANDTerminalRuleCall_2_0() { return cANDTerminalRuleCall_2_0; }
		
		//expr+=EqualityExpression
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }
		
		//EqualityExpression
		public RuleCall getExprEqualityExpressionParserRuleCall_2_1_0() { return cExprEqualityExpressionParserRuleCall_2_1_0; }
	}
	public class EqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.EqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEqualityExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprRelationalExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Assignment cOpAssignment_2_0_0 = (Assignment)cAlternatives_2_0.eContents().get(0);
		private final RuleCall cOpEQUALTerminalRuleCall_2_0_0_0 = (RuleCall)cOpAssignment_2_0_0.eContents().get(0);
		private final Assignment cOpAssignment_2_0_1 = (Assignment)cAlternatives_2_0.eContents().get(1);
		private final RuleCall cOpNOTEQUALTerminalRuleCall_2_0_1_0 = (RuleCall)cOpAssignment_2_0_1.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprRelationalExpressionParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		
		//EqualityExpression Expression:
		//	{EqualityExpression} expr+=RelationalExpression ((op+=EQUAL | op+=NOTEQUAL) expr+=RelationalExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//{EqualityExpression} expr+=RelationalExpression ((op+=EQUAL | op+=NOTEQUAL) expr+=RelationalExpression)*
		public Group getGroup() { return cGroup; }
		
		//{EqualityExpression}
		public Action getEqualityExpressionAction_0() { return cEqualityExpressionAction_0; }
		
		//expr+=RelationalExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//RelationalExpression
		public RuleCall getExprRelationalExpressionParserRuleCall_1_0() { return cExprRelationalExpressionParserRuleCall_1_0; }
		
		//((op+=EQUAL | op+=NOTEQUAL) expr+=RelationalExpression)*
		public Group getGroup_2() { return cGroup_2; }
		
		//(op+=EQUAL | op+=NOTEQUAL)
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//op+=EQUAL
		public Assignment getOpAssignment_2_0_0() { return cOpAssignment_2_0_0; }
		
		//EQUAL
		public RuleCall getOpEQUALTerminalRuleCall_2_0_0_0() { return cOpEQUALTerminalRuleCall_2_0_0_0; }
		
		//op+=NOTEQUAL
		public Assignment getOpAssignment_2_0_1() { return cOpAssignment_2_0_1; }
		
		//NOTEQUAL
		public RuleCall getOpNOTEQUALTerminalRuleCall_2_0_1_0() { return cOpNOTEQUALTerminalRuleCall_2_0_1_0; }
		
		//expr+=RelationalExpression
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }
		
		//RelationalExpression
		public RuleCall getExprRelationalExpressionParserRuleCall_2_1_0() { return cExprRelationalExpressionParserRuleCall_2_1_0; }
	}
	public class RelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.RelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRelationalExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprShiftExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Assignment cOpAssignment_2_0_0 = (Assignment)cAlternatives_2_0.eContents().get(0);
		private final RuleCall cOpLESSTerminalRuleCall_2_0_0_0 = (RuleCall)cOpAssignment_2_0_0.eContents().get(0);
		private final Assignment cOpAssignment_2_0_1 = (Assignment)cAlternatives_2_0.eContents().get(1);
		private final RuleCall cOpGREATERTerminalRuleCall_2_0_1_0 = (RuleCall)cOpAssignment_2_0_1.eContents().get(0);
		private final Assignment cOpAssignment_2_0_2 = (Assignment)cAlternatives_2_0.eContents().get(2);
		private final RuleCall cOpLESSEQUALTerminalRuleCall_2_0_2_0 = (RuleCall)cOpAssignment_2_0_2.eContents().get(0);
		private final Assignment cOpAssignment_2_0_3 = (Assignment)cAlternatives_2_0.eContents().get(3);
		private final RuleCall cOpGREATEREQUALTerminalRuleCall_2_0_3_0 = (RuleCall)cOpAssignment_2_0_3.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprShiftExpressionParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		
		//RelationalExpression Expression:
		//	{RelationalExpression} expr+=ShiftExpression ((op+=LESS | op+=GREATER | op+=LESSEQUAL | op+=GREATEREQUAL)
		//	expr+=ShiftExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//{RelationalExpression} expr+=ShiftExpression ((op+=LESS | op+=GREATER | op+=LESSEQUAL | op+=GREATEREQUAL)
		//expr+=ShiftExpression)*
		public Group getGroup() { return cGroup; }
		
		//{RelationalExpression}
		public Action getRelationalExpressionAction_0() { return cRelationalExpressionAction_0; }
		
		//expr+=ShiftExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//ShiftExpression
		public RuleCall getExprShiftExpressionParserRuleCall_1_0() { return cExprShiftExpressionParserRuleCall_1_0; }
		
		//((op+=LESS | op+=GREATER | op+=LESSEQUAL | op+=GREATEREQUAL) expr+=ShiftExpression)*
		public Group getGroup_2() { return cGroup_2; }
		
		//(op+=LESS | op+=GREATER | op+=LESSEQUAL | op+=GREATEREQUAL)
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//op+=LESS
		public Assignment getOpAssignment_2_0_0() { return cOpAssignment_2_0_0; }
		
		//LESS
		public RuleCall getOpLESSTerminalRuleCall_2_0_0_0() { return cOpLESSTerminalRuleCall_2_0_0_0; }
		
		//op+=GREATER
		public Assignment getOpAssignment_2_0_1() { return cOpAssignment_2_0_1; }
		
		//GREATER
		public RuleCall getOpGREATERTerminalRuleCall_2_0_1_0() { return cOpGREATERTerminalRuleCall_2_0_1_0; }
		
		//op+=LESSEQUAL
		public Assignment getOpAssignment_2_0_2() { return cOpAssignment_2_0_2; }
		
		//LESSEQUAL
		public RuleCall getOpLESSEQUALTerminalRuleCall_2_0_2_0() { return cOpLESSEQUALTerminalRuleCall_2_0_2_0; }
		
		//op+=GREATEREQUAL
		public Assignment getOpAssignment_2_0_3() { return cOpAssignment_2_0_3; }
		
		//GREATEREQUAL
		public RuleCall getOpGREATEREQUALTerminalRuleCall_2_0_3_0() { return cOpGREATEREQUALTerminalRuleCall_2_0_3_0; }
		
		//expr+=ShiftExpression
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }
		
		//ShiftExpression
		public RuleCall getExprShiftExpressionParserRuleCall_2_1_0() { return cExprShiftExpressionParserRuleCall_2_1_0; }
	}
	public class ShiftExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.ShiftExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cShiftExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprAdditiveExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Assignment cOpAssignment_2_0_0 = (Assignment)cAlternatives_2_0.eContents().get(0);
		private final RuleCall cOpLEFTSHIFTTerminalRuleCall_2_0_0_0 = (RuleCall)cOpAssignment_2_0_0.eContents().get(0);
		private final Assignment cOpAssignment_2_0_1 = (Assignment)cAlternatives_2_0.eContents().get(1);
		private final RuleCall cOpRIGHTSHIFTTerminalRuleCall_2_0_1_0 = (RuleCall)cOpAssignment_2_0_1.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprAdditiveExpressionParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		
		//ShiftExpression Expression:
		//	{ShiftExpression} expr+=AdditiveExpression ((op+=LEFTSHIFT | op+=RIGHTSHIFT) expr+=AdditiveExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//{ShiftExpression} expr+=AdditiveExpression ((op+=LEFTSHIFT | op+=RIGHTSHIFT) expr+=AdditiveExpression)*
		public Group getGroup() { return cGroup; }
		
		//{ShiftExpression}
		public Action getShiftExpressionAction_0() { return cShiftExpressionAction_0; }
		
		//expr+=AdditiveExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//AdditiveExpression
		public RuleCall getExprAdditiveExpressionParserRuleCall_1_0() { return cExprAdditiveExpressionParserRuleCall_1_0; }
		
		//((op+=LEFTSHIFT | op+=RIGHTSHIFT) expr+=AdditiveExpression)*
		public Group getGroup_2() { return cGroup_2; }
		
		//(op+=LEFTSHIFT | op+=RIGHTSHIFT)
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//op+=LEFTSHIFT
		public Assignment getOpAssignment_2_0_0() { return cOpAssignment_2_0_0; }
		
		//LEFTSHIFT
		public RuleCall getOpLEFTSHIFTTerminalRuleCall_2_0_0_0() { return cOpLEFTSHIFTTerminalRuleCall_2_0_0_0; }
		
		//op+=RIGHTSHIFT
		public Assignment getOpAssignment_2_0_1() { return cOpAssignment_2_0_1; }
		
		//RIGHTSHIFT
		public RuleCall getOpRIGHTSHIFTTerminalRuleCall_2_0_1_0() { return cOpRIGHTSHIFTTerminalRuleCall_2_0_1_0; }
		
		//expr+=AdditiveExpression
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }
		
		//AdditiveExpression
		public RuleCall getExprAdditiveExpressionParserRuleCall_2_1_0() { return cExprAdditiveExpressionParserRuleCall_2_1_0; }
	}
	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAdditiveExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprMultiplicativeExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Assignment cOpAssignment_2_0_0 = (Assignment)cAlternatives_2_0.eContents().get(0);
		private final RuleCall cOpPLUSTerminalRuleCall_2_0_0_0 = (RuleCall)cOpAssignment_2_0_0.eContents().get(0);
		private final Assignment cOpAssignment_2_0_1 = (Assignment)cAlternatives_2_0.eContents().get(1);
		private final RuleCall cOpMINUSTerminalRuleCall_2_0_1_0 = (RuleCall)cOpAssignment_2_0_1.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprMultiplicativeExpressionParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		
		//AdditiveExpression Expression:
		//	{AdditiveExpression} expr+=MultiplicativeExpression ((op+=PLUS | op+=MINUS) expr+=MultiplicativeExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//{AdditiveExpression} expr+=MultiplicativeExpression ((op+=PLUS | op+=MINUS) expr+=MultiplicativeExpression)*
		public Group getGroup() { return cGroup; }
		
		//{AdditiveExpression}
		public Action getAdditiveExpressionAction_0() { return cAdditiveExpressionAction_0; }
		
		//expr+=MultiplicativeExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//MultiplicativeExpression
		public RuleCall getExprMultiplicativeExpressionParserRuleCall_1_0() { return cExprMultiplicativeExpressionParserRuleCall_1_0; }
		
		//((op+=PLUS | op+=MINUS) expr+=MultiplicativeExpression)*
		public Group getGroup_2() { return cGroup_2; }
		
		//(op+=PLUS | op+=MINUS)
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//op+=PLUS
		public Assignment getOpAssignment_2_0_0() { return cOpAssignment_2_0_0; }
		
		//PLUS
		public RuleCall getOpPLUSTerminalRuleCall_2_0_0_0() { return cOpPLUSTerminalRuleCall_2_0_0_0; }
		
		//op+=MINUS
		public Assignment getOpAssignment_2_0_1() { return cOpAssignment_2_0_1; }
		
		//MINUS
		public RuleCall getOpMINUSTerminalRuleCall_2_0_1_0() { return cOpMINUSTerminalRuleCall_2_0_1_0; }
		
		//expr+=MultiplicativeExpression
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }
		
		//MultiplicativeExpression
		public RuleCall getExprMultiplicativeExpressionParserRuleCall_2_1_0() { return cExprMultiplicativeExpressionParserRuleCall_2_1_0; }
	}
	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMultiplicativeExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprCastExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Assignment cOpAssignment_2_0_0 = (Assignment)cAlternatives_2_0.eContents().get(0);
		private final RuleCall cOpSTARTerminalRuleCall_2_0_0_0 = (RuleCall)cOpAssignment_2_0_0.eContents().get(0);
		private final Assignment cOpAssignment_2_0_1 = (Assignment)cAlternatives_2_0.eContents().get(1);
		private final RuleCall cOpDIVTerminalRuleCall_2_0_1_0 = (RuleCall)cOpAssignment_2_0_1.eContents().get(0);
		private final Assignment cOpAssignment_2_0_2 = (Assignment)cAlternatives_2_0.eContents().get(2);
		private final RuleCall cOpMODTerminalRuleCall_2_0_2_0 = (RuleCall)cOpAssignment_2_0_2.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprCastExpressionParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		
		//MultiplicativeExpression Expression:
		//	{MultiplicativeExpression} expr+=CastExpression ((op+=STAR | op+=DIV | op+=MOD) expr+=CastExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//{MultiplicativeExpression} expr+=CastExpression ((op+=STAR | op+=DIV | op+=MOD) expr+=CastExpression)*
		public Group getGroup() { return cGroup; }
		
		//{MultiplicativeExpression}
		public Action getMultiplicativeExpressionAction_0() { return cMultiplicativeExpressionAction_0; }
		
		//expr+=CastExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//CastExpression
		public RuleCall getExprCastExpressionParserRuleCall_1_0() { return cExprCastExpressionParserRuleCall_1_0; }
		
		//((op+=STAR | op+=DIV | op+=MOD) expr+=CastExpression)*
		public Group getGroup_2() { return cGroup_2; }
		
		//(op+=STAR | op+=DIV | op+=MOD)
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//op+=STAR
		public Assignment getOpAssignment_2_0_0() { return cOpAssignment_2_0_0; }
		
		//STAR
		public RuleCall getOpSTARTerminalRuleCall_2_0_0_0() { return cOpSTARTerminalRuleCall_2_0_0_0; }
		
		//op+=DIV
		public Assignment getOpAssignment_2_0_1() { return cOpAssignment_2_0_1; }
		
		//DIV
		public RuleCall getOpDIVTerminalRuleCall_2_0_1_0() { return cOpDIVTerminalRuleCall_2_0_1_0; }
		
		//op+=MOD
		public Assignment getOpAssignment_2_0_2() { return cOpAssignment_2_0_2; }
		
		//MOD
		public RuleCall getOpMODTerminalRuleCall_2_0_2_0() { return cOpMODTerminalRuleCall_2_0_2_0; }
		
		//expr+=CastExpression
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }
		
		//CastExpression
		public RuleCall getExprCastExpressionParserRuleCall_2_1_0() { return cExprCastExpressionParserRuleCall_2_1_0; }
	}
	public class CastExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.CastExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCastExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cExprUnaryExpressionParserRuleCall_1_0_0 = (RuleCall)cExprAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cLEFTPARENTerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cTypeTypeNameParserRuleCall_1_1_1_0 = (RuleCall)cTypeAssignment_1_1_1.eContents().get(0);
		private final RuleCall cRIGHTPARENTerminalRuleCall_1_1_2 = (RuleCall)cGroup_1_1.eContents().get(2);
		private final Assignment cExprAssignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final RuleCall cExprCastExpressionParserRuleCall_1_1_3_0 = (RuleCall)cExprAssignment_1_1_3.eContents().get(0);
		
		//CastExpression Expression:
		//	{CastExpression} (expr=UnaryExpression
		//	| LEFTPAREN type=TypeName RIGHTPAREN expr=CastExpression
		//	//|	'__extension__' LEFTPAREN type=TypeName RIGHTPAREN castExpr=CastExpression
		//)
		@Override public ParserRule getRule() { return rule; }
		
		//{CastExpression} (expr=UnaryExpression | LEFTPAREN type=TypeName RIGHTPAREN expr=CastExpression //|	'__extension__' LEFTPAREN type=TypeName RIGHTPAREN castExpr=CastExpression
		//)
		public Group getGroup() { return cGroup; }
		
		//{CastExpression}
		public Action getCastExpressionAction_0() { return cCastExpressionAction_0; }
		
		//(expr=UnaryExpression | LEFTPAREN type=TypeName RIGHTPAREN expr=CastExpression //|	'__extension__' LEFTPAREN type=TypeName RIGHTPAREN castExpr=CastExpression
		//)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//expr=UnaryExpression
		public Assignment getExprAssignment_1_0() { return cExprAssignment_1_0; }
		
		//UnaryExpression
		public RuleCall getExprUnaryExpressionParserRuleCall_1_0_0() { return cExprUnaryExpressionParserRuleCall_1_0_0; }
		
		//LEFTPAREN type=TypeName RIGHTPAREN expr=CastExpression
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//LEFTPAREN
		public RuleCall getLEFTPARENTerminalRuleCall_1_1_0() { return cLEFTPARENTerminalRuleCall_1_1_0; }
		
		//type=TypeName
		public Assignment getTypeAssignment_1_1_1() { return cTypeAssignment_1_1_1; }
		
		//TypeName
		public RuleCall getTypeTypeNameParserRuleCall_1_1_1_0() { return cTypeTypeNameParserRuleCall_1_1_1_0; }
		
		//RIGHTPAREN
		public RuleCall getRIGHTPARENTerminalRuleCall_1_1_2() { return cRIGHTPARENTerminalRuleCall_1_1_2; }
		
		//expr=CastExpression
		public Assignment getExprAssignment_1_1_3() { return cExprAssignment_1_1_3; }
		
		//CastExpression
		public RuleCall getExprCastExpressionParserRuleCall_1_1_3_0() { return cExprCastExpressionParserRuleCall_1_1_3_0; }
	}
	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.UnaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnaryExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cExprPostfixExpressionParserRuleCall_1_0_0 = (RuleCall)cExprAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cANDANDTerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Assignment cOpAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cOpUnaryOperatorParserRuleCall_1_2_0_0 = (RuleCall)cOpAssignment_1_2_0.eContents().get(0);
		private final Assignment cExprAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cExprCastExpressionParserRuleCall_1_2_1_0 = (RuleCall)cExprAssignment_1_2_1.eContents().get(0);
		
		//UnaryExpression Expression initRuleAction { at.jku.weiner.c.Log.error("UnaryExpression-enter"); } afterRuleAction {
		//at.jku.weiner.c.Log.error("UnaryExpression-leave"); }:
		//	{UnaryExpression} (expr=PostfixExpression
		//	//|	SIZEOF LEFTPAREN typeName=typeName RIGHTPAREN
		//	//|	ALIGNOF LEFTPAREN typeName=typeName RIGHTPAREN
		//	| ANDAND ID // GCC extension address of label
		//	| op=UnaryOperator expr=CastExpression)
		@Override public ParserRule getRule() { return rule; }
		
		//{UnaryExpression} (expr=PostfixExpression //|	SIZEOF LEFTPAREN typeName=typeName RIGHTPAREN
		////|	ALIGNOF LEFTPAREN typeName=typeName RIGHTPAREN
		//| ANDAND ID // GCC extension address of label
		//| op=UnaryOperator expr=CastExpression)
		public Group getGroup() { return cGroup; }
		
		//{UnaryExpression}
		public Action getUnaryExpressionAction_0() { return cUnaryExpressionAction_0; }
		
		//(expr=PostfixExpression //|	SIZEOF LEFTPAREN typeName=typeName RIGHTPAREN
		////|	ALIGNOF LEFTPAREN typeName=typeName RIGHTPAREN
		//| ANDAND ID // GCC extension address of label
		//| op=UnaryOperator expr=CastExpression)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//expr=PostfixExpression
		public Assignment getExprAssignment_1_0() { return cExprAssignment_1_0; }
		
		//PostfixExpression
		public RuleCall getExprPostfixExpressionParserRuleCall_1_0_0() { return cExprPostfixExpressionParserRuleCall_1_0_0; }
		
		//ANDAND ID
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//ANDAND
		public RuleCall getANDANDTerminalRuleCall_1_1_0() { return cANDANDTerminalRuleCall_1_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1_1() { return cIDTerminalRuleCall_1_1_1; }
		
		//op=UnaryOperator expr=CastExpression
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//op=UnaryOperator
		public Assignment getOpAssignment_1_2_0() { return cOpAssignment_1_2_0; }
		
		//UnaryOperator
		public RuleCall getOpUnaryOperatorParserRuleCall_1_2_0_0() { return cOpUnaryOperatorParserRuleCall_1_2_0_0; }
		
		//expr=CastExpression
		public Assignment getExprAssignment_1_2_1() { return cExprAssignment_1_2_1; }
		
		//CastExpression
		public RuleCall getExprCastExpressionParserRuleCall_1_2_1_0() { return cExprCastExpressionParserRuleCall_1_2_1_0; }
	}
	public class UnaryOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.UnaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cOpANDTerminalRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOpSTARTerminalRuleCall_1_0 = (RuleCall)cOpAssignment_1.eContents().get(0);
		private final Assignment cOpAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cOpPLUSTerminalRuleCall_2_0 = (RuleCall)cOpAssignment_2.eContents().get(0);
		private final Assignment cOpAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cOpMINUSTerminalRuleCall_3_0 = (RuleCall)cOpAssignment_3.eContents().get(0);
		private final Assignment cOpAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cOpTILDETerminalRuleCall_4_0 = (RuleCall)cOpAssignment_4.eContents().get(0);
		private final Assignment cOpAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cOpNOTTerminalRuleCall_5_0 = (RuleCall)cOpAssignment_5.eContents().get(0);
		
		//UnaryOperator:
		//	op=AND
		//	| op=STAR
		//	| op=PLUS
		//	| op=MINUS
		//	| op=TILDE
		//	| op=NOT;
		@Override public ParserRule getRule() { return rule; }
		
		//op=AND | op=STAR | op=PLUS | op=MINUS | op=TILDE | op=NOT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//op=AND
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }
		
		//AND
		public RuleCall getOpANDTerminalRuleCall_0_0() { return cOpANDTerminalRuleCall_0_0; }
		
		//op=STAR
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//STAR
		public RuleCall getOpSTARTerminalRuleCall_1_0() { return cOpSTARTerminalRuleCall_1_0; }
		
		//op=PLUS
		public Assignment getOpAssignment_2() { return cOpAssignment_2; }
		
		//PLUS
		public RuleCall getOpPLUSTerminalRuleCall_2_0() { return cOpPLUSTerminalRuleCall_2_0; }
		
		//op=MINUS
		public Assignment getOpAssignment_3() { return cOpAssignment_3; }
		
		//MINUS
		public RuleCall getOpMINUSTerminalRuleCall_3_0() { return cOpMINUSTerminalRuleCall_3_0; }
		
		//op=TILDE
		public Assignment getOpAssignment_4() { return cOpAssignment_4; }
		
		//TILDE
		public RuleCall getOpTILDETerminalRuleCall_4_0() { return cOpTILDETerminalRuleCall_4_0; }
		
		//op=NOT
		public Assignment getOpAssignment_5() { return cOpAssignment_5; }
		
		//NOT
		public RuleCall getOpNOTTerminalRuleCall_5_0() { return cOpNOTTerminalRuleCall_5_0; }
	}
	public class PostfixExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.PostfixExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPostfixExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cExprPrimaryExpressionParserRuleCall_1_0_0 = (RuleCall)cExprAssignment_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cLEFTBRACKETTerminalRuleCall_1_1_0_0 = (RuleCall)cGroup_1_1_0.eContents().get(0);
		private final Assignment cArrayExprAssignment_1_1_0_1 = (Assignment)cGroup_1_1_0.eContents().get(1);
		private final RuleCall cArrayExprExpressionParserRuleCall_1_1_0_1_0 = (RuleCall)cArrayExprAssignment_1_1_0_1.eContents().get(0);
		private final RuleCall cRIGHTBRACKETTerminalRuleCall_1_1_0_2 = (RuleCall)cGroup_1_1_0.eContents().get(2);
		private final Group cGroup_1_1_1 = (Group)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cLEFTPARENTerminalRuleCall_1_1_1_0 = (RuleCall)cGroup_1_1_1.eContents().get(0);
		private final Assignment cArgumentExpressionListAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cArgumentExpressionListArgumentExpressionListParserRuleCall_1_1_1_1_0 = (RuleCall)cArgumentExpressionListAssignment_1_1_1_1.eContents().get(0);
		private final RuleCall cRIGHTPARENTerminalRuleCall_1_1_1_2 = (RuleCall)cGroup_1_1_1.eContents().get(2);
		private final Assignment cPlusplusAssignment_1_1_2 = (Assignment)cAlternatives_1_1.eContents().get(2);
		private final RuleCall cPlusplusPLUSPLUSTerminalRuleCall_1_1_2_0 = (RuleCall)cPlusplusAssignment_1_1_2.eContents().get(0);
		private final Assignment cMinusminusAssignment_1_1_3 = (Assignment)cAlternatives_1_1.eContents().get(3);
		private final RuleCall cMinusminusMINUSMINUSTerminalRuleCall_1_1_3_0 = (RuleCall)cMinusminusAssignment_1_1_3.eContents().get(0);
		
		//PostfixExpression Expression initRuleAction { at.jku.weiner.c.Log.error("PostfixExpression-enter"); } afterRuleAction {
		//at.jku.weiner.c.Log.error("PostfixExpression-leave"); }:
		//	{PostfixExpression} (expr+=PrimaryExpression (LEFTBRACKET arrayExpr+=Expression RIGHTBRACKET
		//	| LEFTPAREN argumentExpressionList+=ArgumentExpressionList? RIGHTPAREN
		//	/ *| DOT IDENTIFIER
		//		| ARROW IDENTIFIER
		//		* /
		//	| plusplus+=PLUSPLUS
		//	| minusminus+=MINUSMINUS)*)
		@Override public ParserRule getRule() { return rule; }
		
		//{PostfixExpression} (expr+=PrimaryExpression (LEFTBRACKET arrayExpr+=Expression RIGHTBRACKET | LEFTPAREN
		//argumentExpressionList+=ArgumentExpressionList? RIGHTPAREN / *| DOT IDENTIFIER
		//		| ARROW IDENTIFIER
		//		* / | plusplus+=PLUSPLUS | minusminus+=MINUSMINUS)*)
		public Group getGroup() { return cGroup; }
		
		//{PostfixExpression}
		public Action getPostfixExpressionAction_0() { return cPostfixExpressionAction_0; }
		
		//(expr+=PrimaryExpression (LEFTBRACKET arrayExpr+=Expression RIGHTBRACKET | LEFTPAREN
		//argumentExpressionList+=ArgumentExpressionList? RIGHTPAREN / *| DOT IDENTIFIER
		//		| ARROW IDENTIFIER
		//		* / | plusplus+=PLUSPLUS | minusminus+=MINUSMINUS)*)
		public Group getGroup_1() { return cGroup_1; }
		
		//expr+=PrimaryExpression
		public Assignment getExprAssignment_1_0() { return cExprAssignment_1_0; }
		
		//PrimaryExpression
		public RuleCall getExprPrimaryExpressionParserRuleCall_1_0_0() { return cExprPrimaryExpressionParserRuleCall_1_0_0; }
		
		//(LEFTBRACKET arrayExpr+=Expression RIGHTBRACKET | LEFTPAREN argumentExpressionList+=ArgumentExpressionList? RIGHTPAREN / *| DOT IDENTIFIER
		//		| ARROW IDENTIFIER
		//		* / | plusplus+=PLUSPLUS | minusminus+=MINUSMINUS)*
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//LEFTBRACKET arrayExpr+=Expression RIGHTBRACKET
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }
		
		//LEFTBRACKET
		public RuleCall getLEFTBRACKETTerminalRuleCall_1_1_0_0() { return cLEFTBRACKETTerminalRuleCall_1_1_0_0; }
		
		//arrayExpr+=Expression
		public Assignment getArrayExprAssignment_1_1_0_1() { return cArrayExprAssignment_1_1_0_1; }
		
		//Expression
		public RuleCall getArrayExprExpressionParserRuleCall_1_1_0_1_0() { return cArrayExprExpressionParserRuleCall_1_1_0_1_0; }
		
		//RIGHTBRACKET
		public RuleCall getRIGHTBRACKETTerminalRuleCall_1_1_0_2() { return cRIGHTBRACKETTerminalRuleCall_1_1_0_2; }
		
		//LEFTPAREN argumentExpressionList+=ArgumentExpressionList? RIGHTPAREN
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//LEFTPAREN
		public RuleCall getLEFTPARENTerminalRuleCall_1_1_1_0() { return cLEFTPARENTerminalRuleCall_1_1_1_0; }
		
		//argumentExpressionList+=ArgumentExpressionList?
		public Assignment getArgumentExpressionListAssignment_1_1_1_1() { return cArgumentExpressionListAssignment_1_1_1_1; }
		
		//ArgumentExpressionList
		public RuleCall getArgumentExpressionListArgumentExpressionListParserRuleCall_1_1_1_1_0() { return cArgumentExpressionListArgumentExpressionListParserRuleCall_1_1_1_1_0; }
		
		//RIGHTPAREN
		public RuleCall getRIGHTPARENTerminalRuleCall_1_1_1_2() { return cRIGHTPARENTerminalRuleCall_1_1_1_2; }
		
		//plusplus+=PLUSPLUS
		public Assignment getPlusplusAssignment_1_1_2() { return cPlusplusAssignment_1_1_2; }
		
		//PLUSPLUS
		public RuleCall getPlusplusPLUSPLUSTerminalRuleCall_1_1_2_0() { return cPlusplusPLUSPLUSTerminalRuleCall_1_1_2_0; }
		
		//minusminus+=MINUSMINUS
		public Assignment getMinusminusAssignment_1_1_3() { return cMinusminusAssignment_1_1_3; }
		
		//MINUSMINUS
		public RuleCall getMinusminusMINUSMINUSTerminalRuleCall_1_1_3_0() { return cMinusminusMINUSMINUSTerminalRuleCall_1_1_3_0; }
	}
	public class ArgumentExpressionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.ArgumentExpressionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExprAssignmentExpressionParserRuleCall_0_0 = (RuleCall)cExprAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExprAssignmentExpressionParserRuleCall_1_1_0 = (RuleCall)cExprAssignment_1_1.eContents().get(0);
		
		//ArgumentExpressionList:
		//	expr+=AssignmentExpression (COMMA expr+=AssignmentExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//expr+=AssignmentExpression (COMMA expr+=AssignmentExpression)*
		public Group getGroup() { return cGroup; }
		
		//expr+=AssignmentExpression
		public Assignment getExprAssignment_0() { return cExprAssignment_0; }
		
		//AssignmentExpression
		public RuleCall getExprAssignmentExpressionParserRuleCall_0_0() { return cExprAssignmentExpressionParserRuleCall_0_0; }
		
		//(COMMA expr+=AssignmentExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1_0() { return cCOMMATerminalRuleCall_1_0; }
		
		//expr+=AssignmentExpression
		public Assignment getExprAssignment_1_1() { return cExprAssignment_1_1; }
		
		//AssignmentExpression
		public RuleCall getExprAssignmentExpressionParserRuleCall_1_1_0() { return cExprAssignmentExpressionParserRuleCall_1_1_0; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.PrimaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimaryExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_1_0_0 = (RuleCall)cIdAssignment_1_0.eContents().get(0);
		private final Assignment cConstAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cConstConstantParserRuleCall_1_1_0 = (RuleCall)cConstAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final RuleCall cLEFTPARENTerminalRuleCall_1_2_0 = (RuleCall)cGroup_1_2.eContents().get(0);
		private final Assignment cExprAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_2_1_0 = (RuleCall)cExprAssignment_1_2_1.eContents().get(0);
		private final RuleCall cRIGHTPARENTerminalRuleCall_1_2_2 = (RuleCall)cGroup_1_2.eContents().get(2);
		
		//PrimaryExpression Expression initRuleAction { at.jku.weiner.c.Log.error("PrimaryExpression-enter"); } afterRuleAction {
		//at.jku.weiner.c.Log.error("PrimaryExpression-leave"); }:
		//	{PrimaryExpression} (id=ID
		//	| const=Constant
		//	//|	string+=STRING_LITERAL+ // reachable over Constant!
		//	| LEFTPAREN expr=Expression RIGHTPAREN
		//	//|	genericSelection=genericSelection
		//	// |	'__extension__'? LEFTPAREN compoundStmt=compoundStatement RIGHTPAREN // Blocks (GCC extension)
		//	//|	'__builtin_va_arg' LEFTPAREN expr=unaryExpression COMMA typeName=typeName RIGHTPAREN
		//	//|	'__builtin_offsetof' LEFTPAREN typeName=typeName COMMA expr=unaryExpression RIGHTPAREN
		//)
		@Override public ParserRule getRule() { return rule; }
		
		//{PrimaryExpression} (id=ID | const=Constant //|	string+=STRING_LITERAL+ // reachable over Constant!
		//| LEFTPAREN expr=Expression RIGHTPAREN //|	genericSelection=genericSelection
		//// |	'__extension__'? LEFTPAREN compoundStmt=compoundStatement RIGHTPAREN // Blocks (GCC extension)
		////|	'__builtin_va_arg' LEFTPAREN expr=unaryExpression COMMA typeName=typeName RIGHTPAREN
		////|	'__builtin_offsetof' LEFTPAREN typeName=typeName COMMA expr=unaryExpression RIGHTPAREN
		//)
		public Group getGroup() { return cGroup; }
		
		//{PrimaryExpression}
		public Action getPrimaryExpressionAction_0() { return cPrimaryExpressionAction_0; }
		
		//(id=ID | const=Constant //|	string+=STRING_LITERAL+ // reachable over Constant!
		//| LEFTPAREN expr=Expression RIGHTPAREN //|	genericSelection=genericSelection
		//// |	'__extension__'? LEFTPAREN compoundStmt=compoundStatement RIGHTPAREN // Blocks (GCC extension)
		////|	'__builtin_va_arg' LEFTPAREN expr=unaryExpression COMMA typeName=typeName RIGHTPAREN
		////|	'__builtin_offsetof' LEFTPAREN typeName=typeName COMMA expr=unaryExpression RIGHTPAREN
		//)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//id=ID
		public Assignment getIdAssignment_1_0() { return cIdAssignment_1_0; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0_0() { return cIdIDTerminalRuleCall_1_0_0; }
		
		//const=Constant
		public Assignment getConstAssignment_1_1() { return cConstAssignment_1_1; }
		
		//Constant
		public RuleCall getConstConstantParserRuleCall_1_1_0() { return cConstConstantParserRuleCall_1_1_0; }
		
		//LEFTPAREN expr=Expression RIGHTPAREN
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//LEFTPAREN
		public RuleCall getLEFTPARENTerminalRuleCall_1_2_0() { return cLEFTPARENTerminalRuleCall_1_2_0; }
		
		//expr=Expression
		public Assignment getExprAssignment_1_2_1() { return cExprAssignment_1_2_1; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_2_1_0() { return cExprExpressionParserRuleCall_1_2_1_0; }
		
		//RIGHTPAREN
		public RuleCall getRIGHTPARENTerminalRuleCall_1_2_2() { return cRIGHTPARENTerminalRuleCall_1_2_2; }
	}
	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.Constant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cHexAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cHexHEX_LITERALTerminalRuleCall_0_1_0 = (RuleCall)cHexAssignment_0_1.eContents().get(0);
		private final Assignment cOctAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOctOCTAL_LITERALTerminalRuleCall_1_0 = (RuleCall)cOctAssignment_1.eContents().get(0);
		private final Assignment cDecAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cDecDECIMAL_LITERALTerminalRuleCall_2_0 = (RuleCall)cDecAssignment_2.eContents().get(0);
		private final Assignment cChAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cChCHAR_LITERALTerminalRuleCall_3_0 = (RuleCall)cChAssignment_3.eContents().get(0);
		private final Assignment cStrAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cStrSTRING_LITERALTerminalRuleCall_4_0 = (RuleCall)cStrAssignment_4.eContents().get(0);
		private final Assignment cFloatAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cFloatFLOAT_LITERALTerminalRuleCall_5_0 = (RuleCall)cFloatAssignment_5.eContents().get(0);
		private final Assignment cBinAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cBinBIN_LITERALTerminalRuleCall_6_0 = (RuleCall)cBinAssignment_6.eContents().get(0);
		
		//Constant:
		//	{Constant} hex=HEX_LITERAL
		//	| oct=OCTAL_LITERAL
		//	| dec=DECIMAL_LITERAL
		//	| ch=CHAR_LITERAL
		//	| str=STRING_LITERAL
		//	| float=FLOAT_LITERAL
		//	| bin=BIN_LITERAL;
		@Override public ParserRule getRule() { return rule; }
		
		//{Constant} hex=HEX_LITERAL | oct=OCTAL_LITERAL | dec=DECIMAL_LITERAL | ch=CHAR_LITERAL | str=STRING_LITERAL |
		//float=FLOAT_LITERAL | bin=BIN_LITERAL
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Constant} hex=HEX_LITERAL
		public Group getGroup_0() { return cGroup_0; }
		
		//{Constant}
		public Action getConstantAction_0_0() { return cConstantAction_0_0; }
		
		//hex=HEX_LITERAL
		public Assignment getHexAssignment_0_1() { return cHexAssignment_0_1; }
		
		//HEX_LITERAL
		public RuleCall getHexHEX_LITERALTerminalRuleCall_0_1_0() { return cHexHEX_LITERALTerminalRuleCall_0_1_0; }
		
		//oct=OCTAL_LITERAL
		public Assignment getOctAssignment_1() { return cOctAssignment_1; }
		
		//OCTAL_LITERAL
		public RuleCall getOctOCTAL_LITERALTerminalRuleCall_1_0() { return cOctOCTAL_LITERALTerminalRuleCall_1_0; }
		
		//dec=DECIMAL_LITERAL
		public Assignment getDecAssignment_2() { return cDecAssignment_2; }
		
		//DECIMAL_LITERAL
		public RuleCall getDecDECIMAL_LITERALTerminalRuleCall_2_0() { return cDecDECIMAL_LITERALTerminalRuleCall_2_0; }
		
		//ch=CHAR_LITERAL
		public Assignment getChAssignment_3() { return cChAssignment_3; }
		
		//CHAR_LITERAL
		public RuleCall getChCHAR_LITERALTerminalRuleCall_3_0() { return cChCHAR_LITERALTerminalRuleCall_3_0; }
		
		//str=STRING_LITERAL
		public Assignment getStrAssignment_4() { return cStrAssignment_4; }
		
		//STRING_LITERAL
		public RuleCall getStrSTRING_LITERALTerminalRuleCall_4_0() { return cStrSTRING_LITERALTerminalRuleCall_4_0; }
		
		//float=FLOAT_LITERAL
		public Assignment getFloatAssignment_5() { return cFloatAssignment_5; }
		
		//FLOAT_LITERAL
		public RuleCall getFloatFLOAT_LITERALTerminalRuleCall_5_0() { return cFloatFLOAT_LITERALTerminalRuleCall_5_0; }
		
		//bin=BIN_LITERAL
		public Assignment getBinAssignment_6() { return cBinAssignment_6; }
		
		//BIN_LITERAL
		public RuleCall getBinBIN_LITERALTerminalRuleCall_6_0() { return cBinBIN_LITERALTerminalRuleCall_6_0; }
	}
	
	
	private final ModelElements pModel;
	private final TranslationUnitElements pTranslationUnit;
	private final ExternalDeclarationElements pExternalDeclaration;
	private final FunctionDefHeadElements pFunctionDefHead;
	private final FunctionDefinitionElements pFunctionDefinition;
	private final DeclarationElements pDeclaration;
	private final DeclarationSpecifiersElements pDeclarationSpecifiers;
	private final InitDeclaratorListElements pInitDeclaratorList;
	private final InitDeclaratorElements pInitDeclarator;
	private final StorageClassSpecifierElements pStorageClassSpecifier;
	private final TypeSpecifierElements pTypeSpecifier;
	private final TypedefNameElements pTypedefName;
	private final SpecifierQualifierListElements pSpecifierQualifierList;
	private final TypeQualifierElements pTypeQualifier;
	private final DeclaratorElements pDeclarator;
	private final DirectDeclaratorElements pDirectDeclarator;
	private final DeclaratorSuffixElements pDeclaratorSuffix;
	private final DirectDeclaratorLastSuffixElements pDirectDeclaratorLastSuffix;
	private final PointerElements pPointer;
	private final TypeQualifierListElements pTypeQualifierList;
	private final ParameterTypeListElements pParameterTypeList;
	private final ParameterListElements pParameterList;
	private final ParameterDeclarationElements pParameterDeclaration;
	private final IdentifierListElements pIdentifierList;
	private final MyIdentifierElements pMyIdentifier;
	private final TypeNameElements pTypeName;
	private final InitializerElements pInitializer;
	private final BlockListElements pBlockList;
	private final StatementElements pStatement;
	private final LabeledStatementElements pLabeledStatement;
	private final CompoundStatementElements pCompoundStatement;
	private final BodyStatementElements pBodyStatement;
	private final ExpressionStatementElements pExpressionStatement;
	private final SelectionStatementElements pSelectionStatement;
	private final IterationStatementElements pIterationStatement;
	private final JumpStatementElements pJumpStatement;
	private final ExpressionElements pExpression;
	private final AssignmentExpressionElements pAssignmentExpression;
	private final LvalueElements pLvalue;
	private final AssignmentOperatorElements pAssignmentOperator;
	private final ConditionalExpressionElements pConditionalExpression;
	private final LogicalOrExpressionElements pLogicalOrExpression;
	private final LogicalAndExpressionElements pLogicalAndExpression;
	private final InclusiveOrExpressionElements pInclusiveOrExpression;
	private final ExclusiveOrExpressionElements pExclusiveOrExpression;
	private final AndExpressionElements pAndExpression;
	private final EqualityExpressionElements pEqualityExpression;
	private final RelationalExpressionElements pRelationalExpression;
	private final ShiftExpressionElements pShiftExpression;
	private final AdditiveExpressionElements pAdditiveExpression;
	private final MultiplicativeExpressionElements pMultiplicativeExpression;
	private final CastExpressionElements pCastExpression;
	private final UnaryExpressionElements pUnaryExpression;
	private final UnaryOperatorElements pUnaryOperator;
	private final PostfixExpressionElements pPostfixExpression;
	private final ArgumentExpressionListElements pArgumentExpressionList;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final ConstantElements pConstant;
	private final TerminalRule tKW_UNDERSCORE;
	private final TerminalRule tKW_AUTO;
	private final TerminalRule tKW_BREAK;
	private final TerminalRule tKW_CASE;
	private final TerminalRule tKW_CHAR;
	private final TerminalRule tKW_CONST;
	private final TerminalRule tKW_CONTINUE;
	private final TerminalRule tKW_DEFAULT;
	private final TerminalRule tKW_DO;
	private final TerminalRule tKW_DOUBLE;
	private final TerminalRule tKW_ELSE;
	private final TerminalRule tKW_ENUM;
	private final TerminalRule tKW_EXTERN;
	private final TerminalRule tKW_FLOAT;
	private final TerminalRule tKW_FOR;
	private final TerminalRule tKW_GOTO;
	private final TerminalRule tKW_IF;
	private final TerminalRule tKW_INLINE;
	private final TerminalRule tKW_INT;
	private final TerminalRule tKW_LONG;
	private final TerminalRule tKW_REGISTER;
	private final TerminalRule tKW_RESTRICT;
	private final TerminalRule tKW_RETURN;
	private final TerminalRule tKW_SHORT;
	private final TerminalRule tKW_SIGNED;
	private final TerminalRule tKW_SIZEOF;
	private final TerminalRule tKW_STATIC;
	private final TerminalRule tKW_STRUCT;
	private final TerminalRule tKW_SWITCH;
	private final TerminalRule tKW_TYPEDEF;
	private final TerminalRule tKW_UNION;
	private final TerminalRule tKW_UNSIGNED;
	private final TerminalRule tKW_VOID;
	private final TerminalRule tKW_VOLATILE;
	private final TerminalRule tKW_WHILE;
	private final TerminalRule tKW_ALIGNAS;
	private final TerminalRule tKW_ALIGNOF;
	private final TerminalRule tKW_ASM;
	private final TerminalRule tKW_ATOMIC;
	private final TerminalRule tKW_BOOL;
	private final TerminalRule tKW_COMPLEX;
	private final TerminalRule tKW_GENERIC;
	private final TerminalRule tKW_IMAGINARY;
	private final TerminalRule tKW_NORETURN;
	private final TerminalRule tKW_STATICASSERT;
	private final TerminalRule tKW_THREADLOCAL;
	private final TerminalRule tKW_PRAGMA;
	private final TerminalRule tLEFTPAREN;
	private final TerminalRule tRIGHTPAREN;
	private final TerminalRule tLEFTBRACKET;
	private final TerminalRule tRIGHTBRACKET;
	private final TerminalRule tLEFTBRACE;
	private final TerminalRule tRIGHTBRACE;
	private final TerminalRule tLESS;
	private final TerminalRule tLESSEQUAL;
	private final TerminalRule tGREATER;
	private final TerminalRule tGREATEREQUAL;
	private final TerminalRule tLEFTSHIFT;
	private final TerminalRule tRIGHTSHIFT;
	private final TerminalRule tPLUS;
	private final TerminalRule tPLUSPLUS;
	private final TerminalRule tMINUS;
	private final TerminalRule tMINUSMINUS;
	private final TerminalRule tSTAR;
	private final TerminalRule tDIV;
	private final TerminalRule tMOD;
	private final TerminalRule tAND;
	private final TerminalRule tANDAND;
	private final TerminalRule tOR;
	private final TerminalRule tOROR;
	private final TerminalRule tCARET;
	private final TerminalRule tNOT;
	private final TerminalRule tTILDE;
	private final TerminalRule tQUESTION;
	private final TerminalRule tCOLON;
	private final TerminalRule tSEMI;
	private final TerminalRule tCOMMA;
	private final TerminalRule tASSIGN;
	private final TerminalRule tSTARASSIGN;
	private final TerminalRule tDIVASSIGN;
	private final TerminalRule tMODASSIGN;
	private final TerminalRule tPLUSASSIGN;
	private final TerminalRule tMINUSASSIGN;
	private final TerminalRule tLEFTSHIFTASSIGN;
	private final TerminalRule tRIGHTSHIFTASSIGN;
	private final TerminalRule tANDASSIGN;
	private final TerminalRule tXORASSIGN;
	private final TerminalRule tORASSIGN;
	private final TerminalRule tEQUAL;
	private final TerminalRule tNOTEQUAL;
	private final TerminalRule tARROW;
	private final TerminalRule tDOT;
	private final TerminalRule tELLIPSIS;
	private final TerminalRule tSINGLEQUOTE;
	private final TerminalRule tDOUBLEQUOTE;
	private final TerminalRule tBACKSLASH;
	private final TerminalRule tID;
	private final TerminalRule tIDENTIFIER;
	private final TerminalRule tLETTER;
	private final TerminalRule tCHAR_LITERAL;
	private final TerminalRule tSTRING_LITERAL;
	private final TerminalRule tHEX_LITERAL;
	private final TerminalRule tDECIMAL_LITERAL;
	private final TerminalRule tOCTAL_LITERAL;
	private final TerminalRule tBIN_LITERAL;
	private final TerminalRule tHEX_DIGIT;
	private final TerminalRule tINTEGER_TYPE_SUFFIX;
	private final TerminalRule tFLOAT_LITERAL;
	private final TerminalRule tEXPONENT;
	private final TerminalRule tFLOAT_TYPE_SUFFIX;
	private final TerminalRule tESCAPE_SEQUENCE;
	private final TerminalRule tOCTAL_ESCAPE;
	private final TerminalRule tUNICODE_ESCAPE;
	private final TerminalRule tLINEDIRECTIVE;
	private final TerminalRule tWHITESPACE;
	private final TerminalRule tBLOCK_COMMENT;
	private final TerminalRule tLINE_COMMENT;
	private final TerminalRule tNEWLINE;
	
	private final Grammar grammar;

	@Inject
	public CGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pModel = new ModelElements();
		this.pTranslationUnit = new TranslationUnitElements();
		this.pExternalDeclaration = new ExternalDeclarationElements();
		this.pFunctionDefHead = new FunctionDefHeadElements();
		this.pFunctionDefinition = new FunctionDefinitionElements();
		this.pDeclaration = new DeclarationElements();
		this.pDeclarationSpecifiers = new DeclarationSpecifiersElements();
		this.pInitDeclaratorList = new InitDeclaratorListElements();
		this.pInitDeclarator = new InitDeclaratorElements();
		this.pStorageClassSpecifier = new StorageClassSpecifierElements();
		this.pTypeSpecifier = new TypeSpecifierElements();
		this.pTypedefName = new TypedefNameElements();
		this.pSpecifierQualifierList = new SpecifierQualifierListElements();
		this.pTypeQualifier = new TypeQualifierElements();
		this.pDeclarator = new DeclaratorElements();
		this.pDirectDeclarator = new DirectDeclaratorElements();
		this.pDeclaratorSuffix = new DeclaratorSuffixElements();
		this.pDirectDeclaratorLastSuffix = new DirectDeclaratorLastSuffixElements();
		this.pPointer = new PointerElements();
		this.pTypeQualifierList = new TypeQualifierListElements();
		this.pParameterTypeList = new ParameterTypeListElements();
		this.pParameterList = new ParameterListElements();
		this.pParameterDeclaration = new ParameterDeclarationElements();
		this.pIdentifierList = new IdentifierListElements();
		this.pMyIdentifier = new MyIdentifierElements();
		this.pTypeName = new TypeNameElements();
		this.pInitializer = new InitializerElements();
		this.pBlockList = new BlockListElements();
		this.pStatement = new StatementElements();
		this.pLabeledStatement = new LabeledStatementElements();
		this.pCompoundStatement = new CompoundStatementElements();
		this.pBodyStatement = new BodyStatementElements();
		this.pExpressionStatement = new ExpressionStatementElements();
		this.pSelectionStatement = new SelectionStatementElements();
		this.pIterationStatement = new IterationStatementElements();
		this.pJumpStatement = new JumpStatementElements();
		this.pExpression = new ExpressionElements();
		this.pAssignmentExpression = new AssignmentExpressionElements();
		this.pLvalue = new LvalueElements();
		this.pAssignmentOperator = new AssignmentOperatorElements();
		this.pConditionalExpression = new ConditionalExpressionElements();
		this.pLogicalOrExpression = new LogicalOrExpressionElements();
		this.pLogicalAndExpression = new LogicalAndExpressionElements();
		this.pInclusiveOrExpression = new InclusiveOrExpressionElements();
		this.pExclusiveOrExpression = new ExclusiveOrExpressionElements();
		this.pAndExpression = new AndExpressionElements();
		this.pEqualityExpression = new EqualityExpressionElements();
		this.pRelationalExpression = new RelationalExpressionElements();
		this.pShiftExpression = new ShiftExpressionElements();
		this.pAdditiveExpression = new AdditiveExpressionElements();
		this.pMultiplicativeExpression = new MultiplicativeExpressionElements();
		this.pCastExpression = new CastExpressionElements();
		this.pUnaryExpression = new UnaryExpressionElements();
		this.pUnaryOperator = new UnaryOperatorElements();
		this.pPostfixExpression = new PostfixExpressionElements();
		this.pArgumentExpressionList = new ArgumentExpressionListElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pConstant = new ConstantElements();
		this.tKW_UNDERSCORE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.KW_UNDERSCORE");
		this.tKW_AUTO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.KW_AUTO");
		this.tKW_BREAK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.KW_BREAK");
		this.tKW_CASE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.KW_CASE");
		this.tKW_CHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.KW_CHAR");
		this.tKW_CONST = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.KW_CONST");
		this.tKW_CONTINUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.KW_CONTINUE");
		this.tKW_DEFAULT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.KW_DEFAULT");
		this.tKW_DO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.KW_DO");
		this.tKW_DOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.KW_DOUBLE");
		this.tKW_ELSE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.KW_ELSE");
		this.tKW_ENUM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.KW_ENUM");
		this.tKW_EXTERN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.KW_EXTERN");
		this.tKW_FLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.KW_FLOAT");
		this.tKW_FOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.KW_FOR");
		this.tKW_GOTO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.KW_GOTO");
		this.tKW_IF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.KW_IF");
		this.tKW_INLINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.KW_INLINE");
		this.tKW_INT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.KW_INT");
		this.tKW_LONG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.KW_LONG");
		this.tKW_REGISTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.KW_REGISTER");
		this.tKW_RESTRICT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.KW_RESTRICT");
		this.tKW_RETURN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.KW_RETURN");
		this.tKW_SHORT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.KW_SHORT");
		this.tKW_SIGNED = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.KW_SIGNED");
		this.tKW_SIZEOF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.KW_SIZEOF");
		this.tKW_STATIC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.KW_STATIC");
		this.tKW_STRUCT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.KW_STRUCT");
		this.tKW_SWITCH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.KW_SWITCH");
		this.tKW_TYPEDEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.KW_TYPEDEF");
		this.tKW_UNION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.KW_UNION");
		this.tKW_UNSIGNED = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.KW_UNSIGNED");
		this.tKW_VOID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.KW_VOID");
		this.tKW_VOLATILE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.KW_VOLATILE");
		this.tKW_WHILE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.KW_WHILE");
		this.tKW_ALIGNAS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.KW_ALIGNAS");
		this.tKW_ALIGNOF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.KW_ALIGNOF");
		this.tKW_ASM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.KW_ASM");
		this.tKW_ATOMIC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.KW_ATOMIC");
		this.tKW_BOOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.KW_BOOL");
		this.tKW_COMPLEX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.KW_COMPLEX");
		this.tKW_GENERIC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.KW_GENERIC");
		this.tKW_IMAGINARY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.KW_IMAGINARY");
		this.tKW_NORETURN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.KW_NORETURN");
		this.tKW_STATICASSERT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.KW_STATICASSERT");
		this.tKW_THREADLOCAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.KW_THREADLOCAL");
		this.tKW_PRAGMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.KW_PRAGMA");
		this.tLEFTPAREN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.LEFTPAREN");
		this.tRIGHTPAREN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.RIGHTPAREN");
		this.tLEFTBRACKET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.LEFTBRACKET");
		this.tRIGHTBRACKET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.RIGHTBRACKET");
		this.tLEFTBRACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.LEFTBRACE");
		this.tRIGHTBRACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.RIGHTBRACE");
		this.tLESS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.LESS");
		this.tLESSEQUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.LESSEQUAL");
		this.tGREATER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.GREATER");
		this.tGREATEREQUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.GREATEREQUAL");
		this.tLEFTSHIFT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.LEFTSHIFT");
		this.tRIGHTSHIFT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.RIGHTSHIFT");
		this.tPLUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.PLUS");
		this.tPLUSPLUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.PLUSPLUS");
		this.tMINUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.MINUS");
		this.tMINUSMINUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.MINUSMINUS");
		this.tSTAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.STAR");
		this.tDIV = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.DIV");
		this.tMOD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.MOD");
		this.tAND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.AND");
		this.tANDAND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.ANDAND");
		this.tOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.OR");
		this.tOROR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.OROR");
		this.tCARET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.CARET");
		this.tNOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.NOT");
		this.tTILDE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.TILDE");
		this.tQUESTION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.QUESTION");
		this.tCOLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.COLON");
		this.tSEMI = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.SEMI");
		this.tCOMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.COMMA");
		this.tASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.ASSIGN");
		this.tSTARASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.STARASSIGN");
		this.tDIVASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.DIVASSIGN");
		this.tMODASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.MODASSIGN");
		this.tPLUSASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.PLUSASSIGN");
		this.tMINUSASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.MINUSASSIGN");
		this.tLEFTSHIFTASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.LEFTSHIFTASSIGN");
		this.tRIGHTSHIFTASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.RIGHTSHIFTASSIGN");
		this.tANDASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.ANDASSIGN");
		this.tXORASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.XORASSIGN");
		this.tORASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.ORASSIGN");
		this.tEQUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.EQUAL");
		this.tNOTEQUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.NOTEQUAL");
		this.tARROW = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.ARROW");
		this.tDOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.DOT");
		this.tELLIPSIS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.ELLIPSIS");
		this.tSINGLEQUOTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.SINGLEQUOTE");
		this.tDOUBLEQUOTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.DOUBLEQUOTE");
		this.tBACKSLASH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.BACKSLASH");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.ID");
		this.tIDENTIFIER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.IDENTIFIER");
		this.tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.LETTER");
		this.tCHAR_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.CHAR_LITERAL");
		this.tSTRING_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.STRING_LITERAL");
		this.tHEX_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.HEX_LITERAL");
		this.tDECIMAL_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.DECIMAL_LITERAL");
		this.tOCTAL_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.OCTAL_LITERAL");
		this.tBIN_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.BIN_LITERAL");
		this.tHEX_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.HEX_DIGIT");
		this.tINTEGER_TYPE_SUFFIX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.INTEGER_TYPE_SUFFIX");
		this.tFLOAT_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.FLOAT_LITERAL");
		this.tEXPONENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.EXPONENT");
		this.tFLOAT_TYPE_SUFFIX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.FLOAT_TYPE_SUFFIX");
		this.tESCAPE_SEQUENCE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.ESCAPE_SEQUENCE");
		this.tOCTAL_ESCAPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.OCTAL_ESCAPE");
		this.tUNICODE_ESCAPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.UNICODE_ESCAPE");
		this.tLINEDIRECTIVE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.LINEDIRECTIVE");
		this.tWHITESPACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.WHITESPACE");
		this.tBLOCK_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.BLOCK_COMMENT");
		this.tLINE_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.LINE_COMMENT");
		this.tNEWLINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.c.C.NEWLINE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("at.jku.weiner.c.C".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	/// *** parser *** / Model:
	//	{Model} unit+=TranslationUnit?;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//TranslationUnit initRuleAction { at.jku.weiner.c.Scope.createNewScope("TranslationUnit"); } afterRuleAction {
	//at.jku.weiner.c.Scope.removeScope(); }:
	//	{TranslationUnit} external+=ExternalDeclaration+;
	public TranslationUnitElements getTranslationUnitAccess() {
		return pTranslationUnit;
	}
	
	public ParserRule getTranslationUnitRule() {
		return getTranslationUnitAccess().getRule();
	}
	
	//ExternalDeclaration initRuleAction { at.jku.weiner.c.Log.log("ExternalDeclaration-enter"); } afterRuleAction {
	//at.jku.weiner.c.Log.log("ExternalDeclaration-leave"); }:
	//	{ExternalDeclaration} ((=>
	//	functiondefHead=FunctionDefHead
	//	LEFTBRACE) functionDefinition=FunctionDefinition
	//	RIGHTBRACE
	//	| declaration=Declaration
	//	| semi=SEMI);
	public ExternalDeclarationElements getExternalDeclarationAccess() {
		return pExternalDeclaration;
	}
	
	public ParserRule getExternalDeclarationRule() {
		return getExternalDeclarationAccess().getRule();
	}
	
	//FunctionDefHead:
	//	{FunctionDefHead} funDeclSpecifiers=DeclarationSpecifiers?
	//	funDeclarator=Declarator
	//	funDeclaration+=Declaration*;
	public FunctionDefHeadElements getFunctionDefHeadAccess() {
		return pFunctionDefHead;
	}
	
	public ParserRule getFunctionDefHeadRule() {
		return getFunctionDefHeadAccess().getRule();
	}
	
	//FunctionDefinition initRuleAction { at.jku.weiner.c.Scope.createNewScope("FunctionDefinition"); } afterRuleAction {
	//at.jku.weiner.c.Scope.removeScope(); }:
	//	{FunctionDefinition} body=BodyStatement;
	public FunctionDefinitionElements getFunctionDefinitionAccess() {
		return pFunctionDefinition;
	}
	
	public ParserRule getFunctionDefinitionRule() {
		return getFunctionDefinitionAccess().getRule();
	}
	
	////
	//// ambiguity:
	//// 1.)declarationSpecifiers->declarationSpecifier->typeSpecifier->typedefName->IDENTIFIER
	//// 2.)initDeclaratorList->initDeclarator->declarator->directDeclarator->IDENTIFIER
	//Declaration initRuleAction { at.jku.weiner.c.Scope.setTypedef(false); } afterRuleAction {
	//at.jku.weiner.c.Log.log("Declaration-leave"); }:
	//	{Declaration} (specifiers=DeclarationSpecifiers
	//	initDeclaratorList+=InitDeclaratorList?
	//	semi=SEMI
	//	//|	staticAssertDeclaration
	//);
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//DeclarationSpecifiers initRuleAction { at.jku.weiner.c.Log.log("DeclarationSpecifiers-enter"); } afterRuleAction {
	//at.jku.weiner.c.Log.log("DeclarationSpecifiers-leave"); }:
	//	{DeclarationSpecifiers} (declarationSpecifier+=StorageClassSpecifier
	//	| declarationSpecifier+=TypeSpecifier
	//	| declarationSpecifier+=TypeQualifier
	//	//|	declarationSpecifier+=functionSpecifier
	//	//|	declarationSpecifier+=alignmentSpecifier
	//)+;
	public DeclarationSpecifiersElements getDeclarationSpecifiersAccess() {
		return pDeclarationSpecifiers;
	}
	
	public ParserRule getDeclarationSpecifiersRule() {
		return getDeclarationSpecifiersAccess().getRule();
	}
	
	//InitDeclaratorList initRuleAction { at.jku.weiner.c.Log.log("InitDeclaratorList-enter"); } afterRuleAction {
	//at.jku.weiner.c.Log.log("InitDeclaratorList-leave"); }:
	//	{InitDeclaratorList} initDeclarator+=InitDeclarator (COMMA initDeclarator2+=InitDeclarator)*;
	public InitDeclaratorListElements getInitDeclaratorListAccess() {
		return pInitDeclaratorList;
	}
	
	public ParserRule getInitDeclaratorListRule() {
		return getInitDeclaratorListAccess().getRule();
	}
	
	//InitDeclarator initRuleAction { at.jku.weiner.c.Log.log("InitDeclarator-enter"); } afterRuleAction {
	//at.jku.weiner.c.Log.log("InitDeclarator-leave"); }:
	//	{InitDeclarator} declarator=Declarator (ASSIGN initializer=Initializer)?;
	public InitDeclaratorElements getInitDeclaratorAccess() {
		return pInitDeclarator;
	}
	
	public ParserRule getInitDeclaratorRule() {
		return getInitDeclaratorAccess().getRule();
	}
	
	//StorageClassSpecifier initRuleAction { at.jku.weiner.c.Log.log("StorageClassSpecifier-enter"); } afterRuleAction {
	//at.jku.weiner.c.Log.log("StorageClassSpecifier-leave"); }:
	//	{StorageClassSpecifier} (class=KW_TYPEDEF
	//	postAction{ { at.jku.weiner.c.Scope.setTypedef(true); } } | class=KW_EXTERN
	//	| class=KW_STATIC
	//	| class=KW_THREADLOCAL
	//	| class=KW_AUTO
	//	| class=KW_REGISTER);
	public StorageClassSpecifierElements getStorageClassSpecifierAccess() {
		return pStorageClassSpecifier;
	}
	
	public ParserRule getStorageClassSpecifierRule() {
		return getStorageClassSpecifierAccess().getRule();
	}
	
	//TypeSpecifier initRuleAction { at.jku.weiner.c.Log.log("TypeSpecifier-enter"); } afterRuleAction {
	//at.jku.weiner.c.Log.log("TypeSpecifier-leave"); }:
	//	{TypeSpecifier} name=KW_VOID
	//	| name=KW_CHAR
	//	| name=KW_SHORT
	//	| name=KW_INT postAction{ { at.jku.weiner.c.Log.log("found kw_int"); } } | name=KW_LONG
	//	| name=KW_FLOAT
	//	| name=KW_DOUBLE postAction{ { at.jku.weiner.c.Log.log("found kw_double"); } } | name=KW_SIGNED
	//	| name=KW_UNSIGNED
	//	| name=KW_BOOL
	//	| name=KW_COMPLEX
	//	| name='__m128'
	//	| name='__m128d'
	//	| name='__m128i'
	//	// |	'__extension__' LEFTPAREN ('__m128' | '__m128d' | '__m128i') RIGHTPAREN
	//	//  |	specifier=atomicTypeSpecifier
	//	// |	specifier=structOrUnionSpecifier
	//	// |	specifier=enumSpecifier
	//	| type=TypedefName
	//	// |	'__typeof__' LEFTPAREN constExrp=constantExpression RIGHTPAREN // GCC extension
	//;
	public TypeSpecifierElements getTypeSpecifierAccess() {
		return pTypeSpecifier;
	}
	
	public ParserRule getTypeSpecifierRule() {
		return getTypeSpecifierAccess().getRule();
	}
	
	//TypedefName initRuleAction { at.jku.weiner.c.Log.log("TypedefName-enter"); } afterRuleAction {
	//at.jku.weiner.c.Log.log("TypedefName-leave"); }:
	//	{TypedefName} id=ID
	//	preAction{ { at.jku.weiner.c.Scope.isTypeName(input.LT(1).getText()) } ? };
	public TypedefNameElements getTypedefNameAccess() {
		return pTypedefName;
	}
	
	public ParserRule getTypedefNameRule() {
		return getTypedefNameAccess().getRule();
	}
	
	/// *structOrUnionSpecifier returns declarationSpecifier:
	//	{structOrUnionSpecifier}
	//	(structOrUnion IDENTIFIER? LEFTBRACE structDeclList=structDeclarationList RIGHTBRACE
	//	|	structOrUnion IDENTIFIER
	//	)
	//;
	//
	//structOrUnion: STRUCT
	//	|	UNION
	//;
	//
	//structDeclarationList: (structDeclaration+=structDeclaration)+
	//;
	//
	//structDeclaration:
	//	specifierQualifierList (structDeclarationList+=structDeclaratorList)? SEMI
	//	|	staticAssertDeclaration
	//;
	// * / SpecifierQualifierList:
	//	{SpecifierQualifierList} (typeSpecifier+=TypeSpecifier | typeQualifier+=TypeQualifier)+;
	public SpecifierQualifierListElements getSpecifierQualifierListAccess() {
		return pSpecifierQualifierList;
	}
	
	public ParserRule getSpecifierQualifierListRule() {
		return getSpecifierQualifierListAccess().getRule();
	}
	
	/// *
	//structDeclaratorList: structDeclarator=structDeclarator (COMMA structDeclarator2+=structDeclarator)*;
	//
	//structDeclarator: declarator=declarator (COLON constExpr+=constantExpression)?
	//	| (COLON constExpr+=constantExpression)
	//;
	//
	//enumSpecifier returns declarationSpecifier:
	//	{enumSpecifier} 
	//	(	
	//		(ENUM IDENTIFIER? LEFTBRACE enumList=enumeratorList) (RIGHTBRACE | COMMA RIGHTBRACE)
	//	|	ENUM IDENTIFIER
	//	)
	//;
	//
	//enumeratorList: enumerator
	//	(COMMA enumerator+=enumerator)*
	//;
	//
	//enumerator:
	//	{enumerator} 
	//	enumerationCONSTANT
	//	(ASSIGN constExpr=constantExpression)?
	//;* / / *
	//atomicTypeSpecifier returns declarationSpecifier:
	//	ATOMIC LEFTPAREN typeName RIGHTPAREN
	//;
	// * / TypeQualifier initRuleAction { at.jku.weiner.c.Log.log("TypeQualifier-enter"); } afterRuleAction {
	//at.jku.weiner.c.Log.log("TypeQualifier-leave"); }:
	//	{TypeQualifier} (type=KW_CONST
	//	| type=KW_RESTRICT
	//	| type=KW_VOLATILE
	//	| type=KW_ATOMIC);
	public TypeQualifierElements getTypeQualifierAccess() {
		return pTypeQualifier;
	}
	
	public ParserRule getTypeQualifierRule() {
		return getTypeQualifierAccess().getRule();
	}
	
	/// *
	//functionSpecifier:
	//	{functionSpecifier} 
	//	(
	//		(INLINE
	//		|	NORETURN
	//		|	'__inline__' // GCC extension
	//		|	'__stdcall'
	//		)
	//		|	gccAttributeSpecifier=gccAttributeSpecifier
	//		|	'__declspec' LEFTPAREN IDENTIFIER RIGHTPAREN
	//	)
	//;
	//
	//alignmentSpecifier: ALIGNAS LEFTPAREN (typeName | constantExpression) RIGHTPAREN;
	// * / Declarator initRuleAction { at.jku.weiner.c.Log.log("Declarator-enter"); } afterRuleAction {
	//at.jku.weiner.c.Log.log("Declarator-leave"); }:
	//	{Declarator} pointer=Pointer?
	//	declarator=DirectDeclarator;
	public DeclaratorElements getDeclaratorAccess() {
		return pDeclarator;
	}
	
	public ParserRule getDeclaratorRule() {
		return getDeclaratorAccess().getRule();
	}
	
	//DirectDeclarator initRuleAction { at.jku.weiner.c.Log.log("DirectDeclarator-enter"); } afterRuleAction {
	//at.jku.weiner.c.Log.log("DirectDeclarator-leave"); }:
	//	{DirectDeclarator} (id=ID
	//	preAction{ { at.jku.weiner.c.Scope.setTemp(input);
	//	} } postAction{ { at.jku.weiner.c.Scope.addTypedefIfIsTypedef();
	//	} } | LEFTPAREN declarator=Declarator RIGHTPAREN) declaratorSuffix+=DeclaratorSuffix*;
	public DirectDeclaratorElements getDirectDeclaratorAccess() {
		return pDirectDeclarator;
	}
	
	public ParserRule getDirectDeclaratorRule() {
		return getDirectDeclaratorAccess().getRule();
	}
	
	//DeclaratorSuffix:
	//	{DeclaratorSuffix} lastSuffix=DirectDeclaratorLastSuffix;
	public DeclaratorSuffixElements getDeclaratorSuffixAccess() {
		return pDeclaratorSuffix;
	}
	
	public ParserRule getDeclaratorSuffixRule() {
		return getDeclaratorSuffixAccess().getRule();
	}
	
	//DirectDeclaratorLastSuffix:
	//	{DirectDeclaratorLastSuffix} LEFTPAREN (parameterTypeList+=ParameterTypeList | identifierList=IdentifierList?)
	//	RIGHTPAREN;
	public DirectDeclaratorLastSuffixElements getDirectDeclaratorLastSuffixAccess() {
		return pDirectDeclaratorLastSuffix;
	}
	
	public ParserRule getDirectDeclaratorLastSuffixRule() {
		return getDirectDeclaratorLastSuffixAccess().getRule();
	}
	
	/// *
	//gccDeclaratorExtension:
	//	{gccDeclaratorExtension} '__asm' LEFTPAREN STRINGLITERAL+ RIGHTPAREN
	//	| {gccDeclaratorExtension} gccAttributeSpecifier=gccAttributeSpecifier
	//;
	//
	//
	//gccAttributeSpecifier: '__attribute__' LEFTPAREN LEFTPAREN list=gccAttributeList RIGHTPAREN RIGHTPAREN;
	//gccAttributeList: gcAttribute=gccAttribute (COMMA gccAttribute+=gccAttribute)*;
	//	//|	// empty;
	//
	//// enter gccAttribute and nestedParenthesesBlock here
	//gccAttribute: {gccAttribute} (ANYOTHER)
	//	// relaxed def for "identifier or reserved word"
	//		(LEFTPAREN list=argumentExpressionList? RIGHTPAREN)?
	//	// |	//empty
	//;
	//
	////nestedParenthesesBlock: (	NOPAREN
	////		|	LEFTPAREN nestedParenthesesBlock RIGHTPAREN
	////		)*
	////;
	// * / Pointer:
	//	{Pointer} ((star+=STAR | caret+=CARET) typeQualifierList+=TypeQualifierList?)*
	//	//|	{pointer} CARET typeQualifierList=typeQualifierList? pointer=pointer?// Blocks language extension
	//;
	public PointerElements getPointerAccess() {
		return pPointer;
	}
	
	public ParserRule getPointerRule() {
		return getPointerAccess().getRule();
	}
	
	//TypeQualifierList:
	//	{TypeQualifierList} typeQualifier+=TypeQualifier+;
	public TypeQualifierListElements getTypeQualifierListAccess() {
		return pTypeQualifierList;
	}
	
	public ParserRule getTypeQualifierListRule() {
		return getTypeQualifierListAccess().getRule();
	}
	
	//ParameterTypeList:
	//	{ParameterTypeList} list=ParameterList (COMMA ELLIPSIS)?;
	public ParameterTypeListElements getParameterTypeListAccess() {
		return pParameterTypeList;
	}
	
	public ParserRule getParameterTypeListRule() {
		return getParameterTypeListAccess().getRule();
	}
	
	//ParameterList:
	//	{ParameterList} parameterDeclaration+=ParameterDeclaration (COMMA parameterDeclaration+=ParameterDeclaration)*;
	public ParameterListElements getParameterListAccess() {
		return pParameterList;
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}
	
	//ParameterDeclaration:
	//	{ParameterDeclaration} declSpecifiers=DeclarationSpecifiers
	//	declarator=Declarator
	//	//	|
	//	//	(abstractDeclator=AbstractDeclarator)
	//?;
	public ParameterDeclarationElements getParameterDeclarationAccess() {
		return pParameterDeclaration;
	}
	
	public ParserRule getParameterDeclarationRule() {
		return getParameterDeclarationAccess().getRule();
	}
	
	//IdentifierList:
	//	{IdentifierList} id+=MyIdentifier (COMMA id+=MyIdentifier)*;
	public IdentifierListElements getIdentifierListAccess() {
		return pIdentifierList;
	}
	
	public ParserRule getIdentifierListRule() {
		return getIdentifierListAccess().getRule();
	}
	
	//MyIdentifier:
	//	{MyIdentifier} id=ID;
	public MyIdentifierElements getMyIdentifierAccess() {
		return pMyIdentifier;
	}
	
	public ParserRule getMyIdentifierRule() {
		return getMyIdentifierAccess().getRule();
	}
	
	//TypeName:
	//	{TypeName} list=SpecifierQualifierList
	//	//(abstractDeclarator+=AbstractDeclarator)?;
	//;
	public TypeNameElements getTypeNameAccess() {
		return pTypeName;
	}
	
	public ParserRule getTypeNameRule() {
		return getTypeNameAccess().getRule();
	}
	
	/// *
	//AbstractDeclarator:
	//	{AbstractDeclarator} 
	//	//pointer
	//	//(directAbstractDeclarator=DirectAbstractDeclarator)?
	//	//(gccDeclExtAbstract+=gccDeclaratorExtension)*
	//	//| 
	//	(directAbstractDeclarator=DirectAbstractDeclarator)
	//	//(gccDeclExtAbstract+=gccDeclaratorExtension)*
	//;
	// * / / *
	//DirectAbstractDeclarator returns AbstractDeclarator:
	//	{DirectAbstractDeclarator}
	//	(LEFTPAREN declarator=AbstractDeclarator RIGHTPAREN
	//		//(gccDeclExt+=gccDeclaratorExtension)*
	//	|	abstractDeclaratorSuffix+=AbstractDeclaratorSuffix
	//	)
	//	
	//	//(abstractDeclaratorSuffix+=abstractDeclaratorSuffix)*
	//;
	// * / / *
	//abstractDeclaratorSuffix: {abstractDeclaratorSuffix}
	//	(LEFTBRACKET typeQualifierList=typeQualifierList? (assignmentExpr+=assignmentExpression)? RIGHTBRACKET
	//	|	LEFTBRACKET STATIC typeQualifierList=typeQualifierList? (assignmentExpr+=assignmentExpression) RIGHTBRACKET
	//	|	LEFTBRACKET typeQualifierListOrig=typeQualifierList STATIC assignmentExpr+=assignmentExpression RIGHTBRACKET
	//	|	LEFTBRACKET STAR RIGHTBRACKET
	//	|	LEFTPAREN parameterTypeList=parameterTypeList? RIGHTPAREN (gccDeclExt+=gccDeclaratorExtension)*
	//	)
	//;
	// * / Initializer:
	//	expr=AssignmentExpression
	//	//|	LEFTBRACE initializerList COMMA? RIGHTBRACE
	//;
	public InitializerElements getInitializerAccess() {
		return pInitializer;
	}
	
	public ParserRule getInitializerRule() {
		return getInitializerAccess().getRule();
	}
	
	/// *
	//initializerList: designation? (initializer=initializer)
	//	(COMMA (designation+=designation)? (initializerMore+=initializer))*
	//;
	// * / / *** Statements * / BlockList initRuleAction { at.jku.weiner.c.Log.log("BlockList-enter"); } afterRuleAction {
	//at.jku.weiner.c.Log.log("BlockList-enter"); }:
	//	{BlockList} (declaration+=Declaration | statement+=Statement)+;
	public BlockListElements getBlockListAccess() {
		return pBlockList;
	}
	
	public ParserRule getBlockListRule() {
		return getBlockListAccess().getRule();
	}
	
	//Statement:
	//	{Statement} (stmt=LabeledStatement
	//	| stmt=CompoundStatement
	//	| stmt=ExpressionStatement
	//	| stmt=SelectionStatement
	//	| stmt=IterationStatement
	//	| stmt=JumpStatement
	//	/ *
	//	|	('__asm' | '__asm__') (VOLATILE | '__volatile__') 
	//			LEFTPAREN (expr+=logicalOrExpression (COMMA logicalExpr+=logicalOrExpression)*)? 
	//			(COLON (expr+=logicalOrExpression (COMMA logicalExpr+=logicalOrExpression)*)?)* RIGHTPAREN SEMI
	// 	* /);
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//LabeledStatement Statement:
	//	{LabeledStatement} id=ID COLON lStmt=Statement
	public LabeledStatementElements getLabeledStatementAccess() {
		return pLabeledStatement;
	}
	
	public ParserRule getLabeledStatementRule() {
		return getLabeledStatementAccess().getRule();
	}
	
	//CompoundStatement Statement:
	//	{CompoundStatement} LEFTBRACE
	//	body=BodyStatement
	//	RIGHTBRACE
	public CompoundStatementElements getCompoundStatementAccess() {
		return pCompoundStatement;
	}
	
	public ParserRule getCompoundStatementRule() {
		return getCompoundStatementAccess().getRule();
	}
	
	//BodyStatement Statement initRuleAction { at.jku.weiner.c.Log.log("BodyStatement-enter"); } afterRuleAction {
	//at.jku.weiner.c.Log.log("BodyStatement-leave"); }:
	//	{BodyStatement} blockList+=BlockList?
	public BodyStatementElements getBodyStatementAccess() {
		return pBodyStatement;
	}
	
	public ParserRule getBodyStatementRule() {
		return getBodyStatementAccess().getRule();
	}
	
	//ExpressionStatement Statement initRuleAction { at.jku.weiner.c.Log.log("ExpressionStatement-enter"); } afterRuleAction {
	//at.jku.weiner.c.Log.log("ExpressionStatement-enter"); }:
	//	{ExpressionStatement} expression=Expression?
	//	semi=SEMI
	public ExpressionStatementElements getExpressionStatementAccess() {
		return pExpressionStatement;
	}
	
	public ParserRule getExpressionStatementRule() {
		return getExpressionStatementAccess().getRule();
	}
	
	//SelectionStatement Statement:
	//	{SelectionStatement} if=KW_IF LEFTPAREN expr=Expression RIGHTPAREN ifStatement=Statement (=> else=KW_ELSE
	//	elseStatement=Statement)?
	public SelectionStatementElements getSelectionStatementAccess() {
		return pSelectionStatement;
	}
	
	public ParserRule getSelectionStatementRule() {
		return getSelectionStatementAccess().getRule();
	}
	
	//IterationStatement Statement:
	//	{IterationStatement} while=KW_WHILE LEFTPAREN expr=Expression RIGHTPAREN statement=Statement
	public IterationStatementElements getIterationStatementAccess() {
		return pIterationStatement;
	}
	
	public ParserRule getIterationStatementRule() {
		return getIterationStatementAccess().getRule();
	}
	
	//JumpStatement Statement:
	//	{JumpStatement} (return=KW_RETURN expr=Expression? semi=SEMI
	//	| goto=KW_GOTO expr=UnaryExpression semi=SEMI // GCC extension
	//)
	public JumpStatementElements getJumpStatementAccess() {
		return pJumpStatement;
	}
	
	public ParserRule getJumpStatementRule() {
		return getJumpStatementAccess().getRule();
	}
	
	////designation: designatorList ASSIGN;
	////designatorList: designator (designator+=designator)*;
	/// *
	//designator: {designator} LEFTBRACKET expr=constantExpression RIGHTBRACKET
	//	|	{designator} DOT IDENTIFIER
	//;
	// * / //staticAssertDeclaration: STATICASSERT LEFTPAREN constantExpression COMMA STRINGLITERAL+ RIGHTPAREN SEMI;
	/// *
	//declarationList: 
	//	(declaration+=declaration)+
	//;
	// * / / *** Expressions *** / Expression initRuleAction { at.jku.weiner.c.Log.error("Expression-enter"); } afterRuleAction {
	//at.jku.weiner.c.Log.error("Expression-leave"); }:
	//	{Expression} exprExpr+=AssignmentExpression (COMMA exprExpr+=AssignmentExpression)*;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//AssignmentExpression Expression initRuleAction { at.jku.weiner.c.Log.error("AssignmentExpression-enter"); }
	//afterRuleAction { at.jku.weiner.c.Log.error("AssignmentExpression-leave"); }:
	//	{AssignmentExpression} (expr=Lvalue
	//	op=AssignmentOperator
	//	assignmentExpr=AssignmentExpression
	//	| expr=ConditionalExpression)
	public AssignmentExpressionElements getAssignmentExpressionAccess() {
		return pAssignmentExpression;
	}
	
	public ParserRule getAssignmentExpressionRule() {
		return getAssignmentExpressionAccess().getRule();
	}
	
	//Lvalue Expression initRuleAction { at.jku.weiner.c.Log.error("Lvalue-enter"); } afterRuleAction {
	//at.jku.weiner.c.Log.error("Lvalue-leave"); }:
	//	UnaryExpression
	public LvalueElements getLvalueAccess() {
		return pLvalue;
	}
	
	public ParserRule getLvalueRule() {
		return getLvalueAccess().getRule();
	}
	
	//AssignmentOperator:
	//	{AssignmentOperator} op=ASSIGN
	//	| op=STARASSIGN
	//	| op=DIVASSIGN
	//	| op=MODASSIGN
	//	| op=PLUSASSIGN
	//	| op=MINUSASSIGN
	//	| op=LEFTSHIFTASSIGN
	//	| op=RIGHTSHIFTASSIGN
	//	| op=ANDASSIGN
	//	| op=XORASSIGN
	//	| op=ORASSIGN;
	public AssignmentOperatorElements getAssignmentOperatorAccess() {
		return pAssignmentOperator;
	}
	
	public ParserRule getAssignmentOperatorRule() {
		return getAssignmentOperatorAccess().getRule();
	}
	
	//ConditionalExpression Expression initRuleAction { at.jku.weiner.c.Log.error("ConditionalExpression-enter"); }
	//afterRuleAction { at.jku.weiner.c.Log.error("ConditionalExpression-leave"); }:
	//	{ConditionalExpression} expr=LogicalOrExpression (QUESTION qExpr=Expression COLON
	//	cExpr=ConditionalExpression)?
	public ConditionalExpressionElements getConditionalExpressionAccess() {
		return pConditionalExpression;
	}
	
	public ParserRule getConditionalExpressionRule() {
		return getConditionalExpressionAccess().getRule();
	}
	
	//LogicalOrExpression Expression:
	//	{LogicalOrExpression} expr+=LogicalAndExpression (OROR expr+=LogicalAndExpression)*
	public LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return pLogicalOrExpression;
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}
	
	//LogicalAndExpression Expression:
	//	{LogicalAndExpression} expr+=InclusiveOrExpression (ANDAND expr+=InclusiveOrExpression)*
	public LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return pLogicalAndExpression;
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}
	
	//InclusiveOrExpression Expression:
	//	{InclusiveOrExpression} expr+=ExclusiveOrExpression (OR expr+=ExclusiveOrExpression)*
	public InclusiveOrExpressionElements getInclusiveOrExpressionAccess() {
		return pInclusiveOrExpression;
	}
	
	public ParserRule getInclusiveOrExpressionRule() {
		return getInclusiveOrExpressionAccess().getRule();
	}
	
	//ExclusiveOrExpression Expression:
	//	{ExclusiveOrExpression} expr+=AndExpression (CARET expr+=AndExpression)*
	public ExclusiveOrExpressionElements getExclusiveOrExpressionAccess() {
		return pExclusiveOrExpression;
	}
	
	public ParserRule getExclusiveOrExpressionRule() {
		return getExclusiveOrExpressionAccess().getRule();
	}
	
	//AndExpression Expression:
	//	{AndExpression} expr+=EqualityExpression (AND expr+=EqualityExpression)*
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	//EqualityExpression Expression:
	//	{EqualityExpression} expr+=RelationalExpression ((op+=EQUAL | op+=NOTEQUAL) expr+=RelationalExpression)*
	public EqualityExpressionElements getEqualityExpressionAccess() {
		return pEqualityExpression;
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}
	
	//RelationalExpression Expression:
	//	{RelationalExpression} expr+=ShiftExpression ((op+=LESS | op+=GREATER | op+=LESSEQUAL | op+=GREATEREQUAL)
	//	expr+=ShiftExpression)*
	public RelationalExpressionElements getRelationalExpressionAccess() {
		return pRelationalExpression;
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}
	
	//ShiftExpression Expression:
	//	{ShiftExpression} expr+=AdditiveExpression ((op+=LEFTSHIFT | op+=RIGHTSHIFT) expr+=AdditiveExpression)*
	public ShiftExpressionElements getShiftExpressionAccess() {
		return pShiftExpression;
	}
	
	public ParserRule getShiftExpressionRule() {
		return getShiftExpressionAccess().getRule();
	}
	
	//AdditiveExpression Expression:
	//	{AdditiveExpression} expr+=MultiplicativeExpression ((op+=PLUS | op+=MINUS) expr+=MultiplicativeExpression)*
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return pAdditiveExpression;
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}
	
	//MultiplicativeExpression Expression:
	//	{MultiplicativeExpression} expr+=CastExpression ((op+=STAR | op+=DIV | op+=MOD) expr+=CastExpression)*
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return pMultiplicativeExpression;
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}
	
	//CastExpression Expression:
	//	{CastExpression} (expr=UnaryExpression
	//	| LEFTPAREN type=TypeName RIGHTPAREN expr=CastExpression
	//	//|	'__extension__' LEFTPAREN type=TypeName RIGHTPAREN castExpr=CastExpression
	//)
	public CastExpressionElements getCastExpressionAccess() {
		return pCastExpression;
	}
	
	public ParserRule getCastExpressionRule() {
		return getCastExpressionAccess().getRule();
	}
	
	//UnaryExpression Expression initRuleAction { at.jku.weiner.c.Log.error("UnaryExpression-enter"); } afterRuleAction {
	//at.jku.weiner.c.Log.error("UnaryExpression-leave"); }:
	//	{UnaryExpression} (expr=PostfixExpression
	//	//|	SIZEOF LEFTPAREN typeName=typeName RIGHTPAREN
	//	//|	ALIGNOF LEFTPAREN typeName=typeName RIGHTPAREN
	//	| ANDAND ID // GCC extension address of label
	//	| op=UnaryOperator expr=CastExpression)
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return pUnaryExpression;
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}
	
	//UnaryOperator:
	//	op=AND
	//	| op=STAR
	//	| op=PLUS
	//	| op=MINUS
	//	| op=TILDE
	//	| op=NOT;
	public UnaryOperatorElements getUnaryOperatorAccess() {
		return pUnaryOperator;
	}
	
	public ParserRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}
	
	//PostfixExpression Expression initRuleAction { at.jku.weiner.c.Log.error("PostfixExpression-enter"); } afterRuleAction {
	//at.jku.weiner.c.Log.error("PostfixExpression-leave"); }:
	//	{PostfixExpression} (expr+=PrimaryExpression (LEFTBRACKET arrayExpr+=Expression RIGHTBRACKET
	//	| LEFTPAREN argumentExpressionList+=ArgumentExpressionList? RIGHTPAREN
	//	/ *| DOT IDENTIFIER
	//		| ARROW IDENTIFIER
	//		* /
	//	| plusplus+=PLUSPLUS
	//	| minusminus+=MINUSMINUS)*)
	public PostfixExpressionElements getPostfixExpressionAccess() {
		return pPostfixExpression;
	}
	
	public ParserRule getPostfixExpressionRule() {
		return getPostfixExpressionAccess().getRule();
	}
	
	//ArgumentExpressionList:
	//	expr+=AssignmentExpression (COMMA expr+=AssignmentExpression)*;
	public ArgumentExpressionListElements getArgumentExpressionListAccess() {
		return pArgumentExpressionList;
	}
	
	public ParserRule getArgumentExpressionListRule() {
		return getArgumentExpressionListAccess().getRule();
	}
	
	//PrimaryExpression Expression initRuleAction { at.jku.weiner.c.Log.error("PrimaryExpression-enter"); } afterRuleAction {
	//at.jku.weiner.c.Log.error("PrimaryExpression-leave"); }:
	//	{PrimaryExpression} (id=ID
	//	| const=Constant
	//	//|	string+=STRING_LITERAL+ // reachable over Constant!
	//	| LEFTPAREN expr=Expression RIGHTPAREN
	//	//|	genericSelection=genericSelection
	//	// |	'__extension__'? LEFTPAREN compoundStmt=compoundStatement RIGHTPAREN // Blocks (GCC extension)
	//	//|	'__builtin_va_arg' LEFTPAREN expr=unaryExpression COMMA typeName=typeName RIGHTPAREN
	//	//|	'__builtin_offsetof' LEFTPAREN typeName=typeName COMMA expr=unaryExpression RIGHTPAREN
	//)
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//Constant:
	//	{Constant} hex=HEX_LITERAL
	//	| oct=OCTAL_LITERAL
	//	| dec=DECIMAL_LITERAL
	//	| ch=CHAR_LITERAL
	//	| str=STRING_LITERAL
	//	| float=FLOAT_LITERAL
	//	| bin=BIN_LITERAL;
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}
	
	//terminal KW_UNDERSCORE:
	//	'_';
	public TerminalRule getKW_UNDERSCORERule() {
		return tKW_UNDERSCORE;
	}
	
	//terminal KW_AUTO:
	//	'auto';
	public TerminalRule getKW_AUTORule() {
		return tKW_AUTO;
	}
	
	//terminal KW_BREAK:
	//	'break';
	public TerminalRule getKW_BREAKRule() {
		return tKW_BREAK;
	}
	
	//terminal KW_CASE:
	//	'case';
	public TerminalRule getKW_CASERule() {
		return tKW_CASE;
	}
	
	//terminal KW_CHAR:
	//	'char';
	public TerminalRule getKW_CHARRule() {
		return tKW_CHAR;
	}
	
	//terminal KW_CONST:
	//	'const';
	public TerminalRule getKW_CONSTRule() {
		return tKW_CONST;
	}
	
	//terminal KW_CONTINUE:
	//	'continue';
	public TerminalRule getKW_CONTINUERule() {
		return tKW_CONTINUE;
	}
	
	//terminal KW_DEFAULT:
	//	'default';
	public TerminalRule getKW_DEFAULTRule() {
		return tKW_DEFAULT;
	}
	
	//terminal KW_DO:
	//	'do';
	public TerminalRule getKW_DORule() {
		return tKW_DO;
	}
	
	//terminal KW_DOUBLE:
	//	'double';
	public TerminalRule getKW_DOUBLERule() {
		return tKW_DOUBLE;
	}
	
	//terminal KW_ELSE:
	//	'else';
	public TerminalRule getKW_ELSERule() {
		return tKW_ELSE;
	}
	
	//terminal KW_ENUM:
	//	'enum';
	public TerminalRule getKW_ENUMRule() {
		return tKW_ENUM;
	}
	
	//terminal KW_EXTERN:
	//	'extern';
	public TerminalRule getKW_EXTERNRule() {
		return tKW_EXTERN;
	}
	
	//terminal KW_FLOAT:
	//	'float';
	public TerminalRule getKW_FLOATRule() {
		return tKW_FLOAT;
	}
	
	//terminal KW_FOR:
	//	'for';
	public TerminalRule getKW_FORRule() {
		return tKW_FOR;
	}
	
	//terminal KW_GOTO:
	//	'goto';
	public TerminalRule getKW_GOTORule() {
		return tKW_GOTO;
	}
	
	//terminal KW_IF:
	//	'if';
	public TerminalRule getKW_IFRule() {
		return tKW_IF;
	}
	
	//terminal KW_INLINE:
	//	'inline';
	public TerminalRule getKW_INLINERule() {
		return tKW_INLINE;
	}
	
	//terminal KW_INT:
	//	'int';
	public TerminalRule getKW_INTRule() {
		return tKW_INT;
	}
	
	//terminal KW_LONG:
	//	'long';
	public TerminalRule getKW_LONGRule() {
		return tKW_LONG;
	}
	
	//terminal KW_REGISTER:
	//	'register';
	public TerminalRule getKW_REGISTERRule() {
		return tKW_REGISTER;
	}
	
	//terminal KW_RESTRICT:
	//	'restrict';
	public TerminalRule getKW_RESTRICTRule() {
		return tKW_RESTRICT;
	}
	
	//terminal KW_RETURN:
	//	'return';
	public TerminalRule getKW_RETURNRule() {
		return tKW_RETURN;
	}
	
	//terminal KW_SHORT:
	//	'short';
	public TerminalRule getKW_SHORTRule() {
		return tKW_SHORT;
	}
	
	//terminal KW_SIGNED:
	//	'signed';
	public TerminalRule getKW_SIGNEDRule() {
		return tKW_SIGNED;
	}
	
	//terminal KW_SIZEOF:
	//	'sizeof';
	public TerminalRule getKW_SIZEOFRule() {
		return tKW_SIZEOF;
	}
	
	//terminal KW_STATIC:
	//	'static';
	public TerminalRule getKW_STATICRule() {
		return tKW_STATIC;
	}
	
	//terminal KW_STRUCT:
	//	'struct';
	public TerminalRule getKW_STRUCTRule() {
		return tKW_STRUCT;
	}
	
	//terminal KW_SWITCH:
	//	'switch';
	public TerminalRule getKW_SWITCHRule() {
		return tKW_SWITCH;
	}
	
	//terminal KW_TYPEDEF:
	//	'typedef';
	public TerminalRule getKW_TYPEDEFRule() {
		return tKW_TYPEDEF;
	}
	
	//terminal KW_UNION:
	//	'union';
	public TerminalRule getKW_UNIONRule() {
		return tKW_UNION;
	}
	
	//terminal KW_UNSIGNED:
	//	'unsigned';
	public TerminalRule getKW_UNSIGNEDRule() {
		return tKW_UNSIGNED;
	}
	
	//terminal KW_VOID:
	//	'void';
	public TerminalRule getKW_VOIDRule() {
		return tKW_VOID;
	}
	
	//terminal KW_VOLATILE:
	//	'volatile';
	public TerminalRule getKW_VOLATILERule() {
		return tKW_VOLATILE;
	}
	
	//terminal KW_WHILE:
	//	'while';
	public TerminalRule getKW_WHILERule() {
		return tKW_WHILE;
	}
	
	//terminal KW_ALIGNAS:
	//	'_Alignas';
	public TerminalRule getKW_ALIGNASRule() {
		return tKW_ALIGNAS;
	}
	
	//terminal KW_ALIGNOF:
	//	'_Alignof';
	public TerminalRule getKW_ALIGNOFRule() {
		return tKW_ALIGNOF;
	}
	
	//terminal KW_ASM:
	//	'asm';
	public TerminalRule getKW_ASMRule() {
		return tKW_ASM;
	}
	
	//terminal KW_ATOMIC:
	//	'_Atomic';
	public TerminalRule getKW_ATOMICRule() {
		return tKW_ATOMIC;
	}
	
	//terminal KW_BOOL:
	//	'_Bool';
	public TerminalRule getKW_BOOLRule() {
		return tKW_BOOL;
	}
	
	//terminal KW_COMPLEX:
	//	'_Complex';
	public TerminalRule getKW_COMPLEXRule() {
		return tKW_COMPLEX;
	}
	
	//terminal KW_GENERIC:
	//	'_Generic';
	public TerminalRule getKW_GENERICRule() {
		return tKW_GENERIC;
	}
	
	//terminal KW_IMAGINARY:
	//	'_Imaginary';
	public TerminalRule getKW_IMAGINARYRule() {
		return tKW_IMAGINARY;
	}
	
	//terminal KW_NORETURN:
	//	'_Noreturn';
	public TerminalRule getKW_NORETURNRule() {
		return tKW_NORETURN;
	}
	
	//terminal KW_STATICASSERT:
	//	'_Static_assert';
	public TerminalRule getKW_STATICASSERTRule() {
		return tKW_STATICASSERT;
	}
	
	//terminal KW_THREADLOCAL:
	//	'_Thread_local';
	public TerminalRule getKW_THREADLOCALRule() {
		return tKW_THREADLOCAL;
	}
	
	//terminal KW_PRAGMA:
	//	'pragma';
	public TerminalRule getKW_PRAGMARule() {
		return tKW_PRAGMA;
	}
	
	//terminal LEFTPAREN:
	//	'(';
	public TerminalRule getLEFTPARENRule() {
		return tLEFTPAREN;
	}
	
	//terminal RIGHTPAREN:
	//	')';
	public TerminalRule getRIGHTPARENRule() {
		return tRIGHTPAREN;
	}
	
	//terminal LEFTBRACKET:
	//	'[';
	public TerminalRule getLEFTBRACKETRule() {
		return tLEFTBRACKET;
	}
	
	//terminal RIGHTBRACKET:
	//	']';
	public TerminalRule getRIGHTBRACKETRule() {
		return tRIGHTBRACKET;
	}
	
	//terminal LEFTBRACE:
	//	'{';
	public TerminalRule getLEFTBRACERule() {
		return tLEFTBRACE;
	}
	
	//terminal RIGHTBRACE:
	//	'}';
	public TerminalRule getRIGHTBRACERule() {
		return tRIGHTBRACE;
	}
	
	//terminal LESS:
	//	'<';
	public TerminalRule getLESSRule() {
		return tLESS;
	}
	
	//terminal LESSEQUAL:
	//	LESS ASSIGN;
	public TerminalRule getLESSEQUALRule() {
		return tLESSEQUAL;
	}
	
	//terminal GREATER:
	//	'>';
	public TerminalRule getGREATERRule() {
		return tGREATER;
	}
	
	//terminal GREATEREQUAL:
	//	GREATER ASSIGN;
	public TerminalRule getGREATEREQUALRule() {
		return tGREATEREQUAL;
	}
	
	//terminal LEFTSHIFT:
	//	LESS LESS;
	public TerminalRule getLEFTSHIFTRule() {
		return tLEFTSHIFT;
	}
	
	//terminal RIGHTSHIFT:
	//	GREATER GREATER;
	public TerminalRule getRIGHTSHIFTRule() {
		return tRIGHTSHIFT;
	}
	
	//terminal PLUS:
	//	'+';
	public TerminalRule getPLUSRule() {
		return tPLUS;
	}
	
	//terminal PLUSPLUS:
	//	PLUS PLUS;
	public TerminalRule getPLUSPLUSRule() {
		return tPLUSPLUS;
	}
	
	//terminal MINUS:
	//	'-';
	public TerminalRule getMINUSRule() {
		return tMINUS;
	}
	
	//terminal MINUSMINUS:
	//	MINUS MINUS;
	public TerminalRule getMINUSMINUSRule() {
		return tMINUSMINUS;
	}
	
	//terminal STAR:
	//	'*';
	public TerminalRule getSTARRule() {
		return tSTAR;
	}
	
	//terminal DIV:
	//	'/';
	public TerminalRule getDIVRule() {
		return tDIV;
	}
	
	//terminal MOD:
	//	'%';
	public TerminalRule getMODRule() {
		return tMOD;
	}
	
	//terminal AND:
	//	'&';
	public TerminalRule getANDRule() {
		return tAND;
	}
	
	//terminal ANDAND:
	//	AND AND;
	public TerminalRule getANDANDRule() {
		return tANDAND;
	}
	
	//terminal OR:
	//	'|';
	public TerminalRule getORRule() {
		return tOR;
	}
	
	//terminal OROR:
	//	OR OR;
	public TerminalRule getORORRule() {
		return tOROR;
	}
	
	//terminal CARET:
	//	'^';
	public TerminalRule getCARETRule() {
		return tCARET;
	}
	
	//terminal NOT:
	//	'!';
	public TerminalRule getNOTRule() {
		return tNOT;
	}
	
	//terminal TILDE:
	//	'~';
	public TerminalRule getTILDERule() {
		return tTILDE;
	}
	
	//terminal QUESTION:
	//	'?';
	public TerminalRule getQUESTIONRule() {
		return tQUESTION;
	}
	
	//terminal COLON:
	//	':';
	public TerminalRule getCOLONRule() {
		return tCOLON;
	}
	
	//terminal SEMI:
	//	';';
	public TerminalRule getSEMIRule() {
		return tSEMI;
	}
	
	//terminal COMMA:
	//	',';
	public TerminalRule getCOMMARule() {
		return tCOMMA;
	}
	
	//terminal ASSIGN:
	//	'=';
	public TerminalRule getASSIGNRule() {
		return tASSIGN;
	}
	
	//terminal STARASSIGN:
	//	STAR ASSIGN;
	public TerminalRule getSTARASSIGNRule() {
		return tSTARASSIGN;
	}
	
	//terminal DIVASSIGN:
	//	DIV ASSIGN;
	public TerminalRule getDIVASSIGNRule() {
		return tDIVASSIGN;
	}
	
	//terminal MODASSIGN:
	//	MOD ASSIGN;
	public TerminalRule getMODASSIGNRule() {
		return tMODASSIGN;
	}
	
	//terminal PLUSASSIGN:
	//	PLUS ASSIGN;
	public TerminalRule getPLUSASSIGNRule() {
		return tPLUSASSIGN;
	}
	
	//terminal MINUSASSIGN:
	//	MINUS ASSIGN;
	public TerminalRule getMINUSASSIGNRule() {
		return tMINUSASSIGN;
	}
	
	//terminal LEFTSHIFTASSIGN:
	//	LEFTSHIFT ASSIGN;
	public TerminalRule getLEFTSHIFTASSIGNRule() {
		return tLEFTSHIFTASSIGN;
	}
	
	//terminal RIGHTSHIFTASSIGN:
	//	RIGHTSHIFT ASSIGN;
	public TerminalRule getRIGHTSHIFTASSIGNRule() {
		return tRIGHTSHIFTASSIGN;
	}
	
	//terminal ANDASSIGN:
	//	AND ASSIGN;
	public TerminalRule getANDASSIGNRule() {
		return tANDASSIGN;
	}
	
	//terminal XORASSIGN:
	//	CARET ASSIGN;
	public TerminalRule getXORASSIGNRule() {
		return tXORASSIGN;
	}
	
	//terminal ORASSIGN:
	//	OR ASSIGN;
	public TerminalRule getORASSIGNRule() {
		return tORASSIGN;
	}
	
	//terminal EQUAL:
	//	ASSIGN ASSIGN;
	public TerminalRule getEQUALRule() {
		return tEQUAL;
	}
	
	//terminal NOTEQUAL:
	//	NOT ASSIGN;
	public TerminalRule getNOTEQUALRule() {
		return tNOTEQUAL;
	}
	
	//terminal ARROW:
	//	MINUS GREATER;
	public TerminalRule getARROWRule() {
		return tARROW;
	}
	
	//terminal DOT:
	//	'.';
	public TerminalRule getDOTRule() {
		return tDOT;
	}
	
	//terminal ELLIPSIS:
	//	DOT DOT DOT;
	public TerminalRule getELLIPSISRule() {
		return tELLIPSIS;
	}
	
	//terminal SINGLEQUOTE:
	//	'\'';
	public TerminalRule getSINGLEQUOTERule() {
		return tSINGLEQUOTE;
	}
	
	//terminal DOUBLEQUOTE:
	//	'"';
	public TerminalRule getDOUBLEQUOTERule() {
		return tDOUBLEQUOTE;
	}
	
	//terminal BACKSLASH:
	//	'\\';
	public TerminalRule getBACKSLASHRule() {
		return tBACKSLASH;
	}
	
	//terminal ID:
	//	IDENTIFIER;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal fragment IDENTIFIER:
	//	LETTER (LETTER | '0'..'9')*;
	public TerminalRule getIDENTIFIERRule() {
		return tIDENTIFIER;
	}
	
	//terminal fragment LETTER:
	//	'$'
	//	| 'A'..'Z'
	//	| 'a'..'z'
	//	| '_';
	public TerminalRule getLETTERRule() {
		return tLETTER;
	}
	
	//terminal CHAR_LITERAL:
	//	'\'' (ESCAPE_SEQUENCE | !('\'' | '\\')) '\'';
	public TerminalRule getCHAR_LITERALRule() {
		return tCHAR_LITERAL;
	}
	
	//terminal STRING_LITERAL:
	//	'"' (ESCAPE_SEQUENCE | !('\\' | '"'))* '"';
	public TerminalRule getSTRING_LITERALRule() {
		return tSTRING_LITERAL;
	}
	
	//terminal HEX_LITERAL:
	//	'0' ('x' | 'X') HEX_DIGIT+ INTEGER_TYPE_SUFFIX?;
	public TerminalRule getHEX_LITERALRule() {
		return tHEX_LITERAL;
	}
	
	//terminal DECIMAL_LITERAL:
	//	('0' | '1'..'9' '0'..'9'*) INTEGER_TYPE_SUFFIX?;
	public TerminalRule getDECIMAL_LITERALRule() {
		return tDECIMAL_LITERAL;
	}
	
	//terminal OCTAL_LITERAL:
	//	'0' '0'..'7'+ INTEGER_TYPE_SUFFIX?;
	public TerminalRule getOCTAL_LITERALRule() {
		return tOCTAL_LITERAL;
	}
	
	//terminal BIN_LITERAL:
	//	('0b' | '0B') '0'..'1'+;
	public TerminalRule getBIN_LITERALRule() {
		return tBIN_LITERAL;
	}
	
	//terminal fragment HEX_DIGIT:
	//	'0'..'9' | 'a'..'f' | 'A'..'F';
	public TerminalRule getHEX_DIGITRule() {
		return tHEX_DIGIT;
	}
	
	//terminal fragment INTEGER_TYPE_SUFFIX:
	//	('u' | 'U')? ('l' | 'L') | ('u' | 'U') ('l' | 'L')?;
	public TerminalRule getINTEGER_TYPE_SUFFIXRule() {
		return tINTEGER_TYPE_SUFFIX;
	}
	
	//terminal FLOAT_LITERAL:
	//	'0'..'9'+ '.' '0'..'9'* EXPONENT? FLOAT_TYPE_SUFFIX?
	//	| '.' '0'..'9'+ EXPONENT? FLOAT_TYPE_SUFFIX?
	//	| '0'..'9'+ EXPONENT FLOAT_TYPE_SUFFIX?
	//	| '0'..'9'+ EXPONENT? FLOAT_TYPE_SUFFIX;
	public TerminalRule getFLOAT_LITERALRule() {
		return tFLOAT_LITERAL;
	}
	
	//terminal fragment EXPONENT:
	//	('e' | 'E') ('+' | '-')? '0'..'9'+;
	public TerminalRule getEXPONENTRule() {
		return tEXPONENT;
	}
	
	//terminal fragment FLOAT_TYPE_SUFFIX:
	//	'f' | 'F' | 'd' | 'D';
	public TerminalRule getFLOAT_TYPE_SUFFIXRule() {
		return tFLOAT_TYPE_SUFFIX;
	}
	
	//terminal fragment ESCAPE_SEQUENCE:
	//	'\\' ('b' | 't' | 'n' | 'f' | 'r' | '\"' | '\'' | '\\') | OCTAL_ESCAPE;
	public TerminalRule getESCAPE_SEQUENCERule() {
		return tESCAPE_SEQUENCE;
	}
	
	//terminal fragment OCTAL_ESCAPE:
	//	'\\' '0'..'3' '0'..'7' '0'..'7' | '\\' '0'..'7' '0'..'7' | '\\' '0'..'7';
	public TerminalRule getOCTAL_ESCAPERule() {
		return tOCTAL_ESCAPE;
	}
	
	//terminal fragment UNICODE_ESCAPE:
	//	'\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT;
	public TerminalRule getUNICODE_ESCAPERule() {
		return tUNICODE_ESCAPE;
	}
	
	//terminal LINEDIRECTIVE:
	//	'#' !NEWLINE*;
	public TerminalRule getLINEDIRECTIVERule() {
		return tLINEDIRECTIVE;
	}
	
	//terminal WHITESPACE:
	//	' ' | '\t'+;
	public TerminalRule getWHITESPACERule() {
		return tWHITESPACE;
	}
	
	//terminal BLOCK_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getBLOCK_COMMENTRule() {
		return tBLOCK_COMMENT;
	}
	
	//terminal LINE_COMMENT:
	//	'//' !NEWLINE*;
	public TerminalRule getLINE_COMMENTRule() {
		return tLINE_COMMENT;
	}
	
	//terminal NEWLINE:
	//	'\r' | '\n';
	public TerminalRule getNEWLINERule() {
		return tNEWLINE;
	}
}
