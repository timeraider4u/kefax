/*
 * generated by Xtext 2.9.0-SNAPSHOT
 */
package at.jku.weiner.c.formatting2

import at.jku.weiner.c.c.AdditiveExpression
import at.jku.weiner.c.c.AndExpression
import at.jku.weiner.c.c.ArgumentExpressionList
import at.jku.weiner.c.c.AsmStatement
import at.jku.weiner.c.c.AssignmentExpression
import at.jku.weiner.c.c.BlockList
import at.jku.weiner.c.c.BodyStatement
import at.jku.weiner.c.c.CastExpression
import at.jku.weiner.c.c.CompoundStatement
import at.jku.weiner.c.c.ConditionalExpression
import at.jku.weiner.c.c.ConstantExpression
import at.jku.weiner.c.c.Declaration
import at.jku.weiner.c.c.DeclarationSpecifiers
import at.jku.weiner.c.c.Declarator
import at.jku.weiner.c.c.DeclaratorSuffix
import at.jku.weiner.c.c.DirectDeclarator
import at.jku.weiner.c.c.DirectDeclaratorLastSuffix
import at.jku.weiner.c.c.EqualityExpression
import at.jku.weiner.c.c.ExclusiveOrExpression
import at.jku.weiner.c.c.Expression
import at.jku.weiner.c.c.ExpressionStatement
import at.jku.weiner.c.c.ExternalDeclaration
import at.jku.weiner.c.c.FunctionDefHead
import at.jku.weiner.c.c.FunctionDefinition
import at.jku.weiner.c.c.IdentifierList
import at.jku.weiner.c.c.InclusiveOrExpression
import at.jku.weiner.c.c.InitDeclarator
import at.jku.weiner.c.c.InitDeclaratorList
import at.jku.weiner.c.c.Initializer
import at.jku.weiner.c.c.IterationStatement
import at.jku.weiner.c.c.JumpStatement
import at.jku.weiner.c.c.LabeledStatement
import at.jku.weiner.c.c.LogicalAndExpression
import at.jku.weiner.c.c.LogicalOrExpression
import at.jku.weiner.c.c.Model
import at.jku.weiner.c.c.MultiplicativeExpression
import at.jku.weiner.c.c.MyIdentifier
import at.jku.weiner.c.c.ParameterDeclaration
import at.jku.weiner.c.c.ParameterList
import at.jku.weiner.c.c.ParameterTypeList
import at.jku.weiner.c.c.Pointer
import at.jku.weiner.c.c.PostfixExpression
import at.jku.weiner.c.c.PrimaryExpression
import at.jku.weiner.c.c.RelationalExpression
import at.jku.weiner.c.c.SelectionStatement
import at.jku.weiner.c.c.ShiftExpression
import at.jku.weiner.c.c.SpecifierQualifierList
import at.jku.weiner.c.c.Statement
import at.jku.weiner.c.c.TranslationUnit
import at.jku.weiner.c.c.TypeName
import at.jku.weiner.c.c.TypeQualifier
import at.jku.weiner.c.c.TypeQualifierList
import at.jku.weiner.c.c.TypeSpecifier
import at.jku.weiner.c.c.UnaryExpression
import at.jku.weiner.c.services.CGrammarAccess
import com.google.inject.Inject
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument

class CFormatter extends AbstractFormatter2 {
	
	@Inject extension CGrammarAccess

	def dispatch void format(Model model, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (TranslationUnit unit : model.getUnit()) {
			format(unit, document);
		}
	}

	def dispatch void format(TranslationUnit translationUnit, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (ExternalDeclaration external : translationUnit.getExternal()) {
			format(external, document);
		}
	}

	def dispatch void format(ExternalDeclaration externalDeclaration, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(externalDeclaration.getFunctiondefHead(), document);
		format(externalDeclaration.getFunctionDefinition(), document);
		format(externalDeclaration.getDeclaration(), document);
	}

	def dispatch void format(FunctionDefHead functionDefHead, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(functionDefHead.getFunDeclSpecifiers(), document);
		format(functionDefHead.getFunDeclarator(), document);
		for (Declaration funDeclaration : functionDefHead.getFunDeclaration()) {
			format(funDeclaration, document);
		}
	}

	def dispatch void format(FunctionDefinition functionDefinition, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(functionDefinition.getBody(), document);
	}

	def dispatch void format(Declaration declaration, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(declaration.getSpecifiers(), document);
		for (InitDeclaratorList initDeclaratorList : declaration.getInitDeclaratorList()) {
			format(initDeclaratorList, document);
		}
	}

	def dispatch void format(DeclarationSpecifiers declarationSpecifiers, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (EObject declarationSpecifier : declarationSpecifiers.getDeclarationSpecifier()) {
			format(declarationSpecifier, document);
		}
	}

	def dispatch void format(InitDeclaratorList initDeclaratorList, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (InitDeclarator initDeclarator : initDeclaratorList.getInitDeclarator()) {
			format(initDeclarator, document);
		}
	}

	def dispatch void format(InitDeclarator initDeclarator, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(initDeclarator.getDeclarator(), document);
		format(initDeclarator.getInitializer(), document);
	}

	def dispatch void format(TypeSpecifier typeSpecifier, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(typeSpecifier.getType(), document);
	}

	def dispatch void format(SpecifierQualifierList specifierQualifierList, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (TypeSpecifier typeSpecifier : specifierQualifierList.getTypeSpecifier()) {
			format(typeSpecifier, document);
		}
		for (TypeQualifier typeQualifier : specifierQualifierList.getTypeQualifier()) {
			format(typeQualifier, document);
		}
	}

	def dispatch void format(Declarator declarator, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(declarator.getPointer(), document);
		format(declarator.getDeclarator(), document);
	}

	def dispatch void format(DirectDeclarator directDeclarator, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(directDeclarator.getDeclarator(), document);
		for (DeclaratorSuffix declaratorSuffix : directDeclarator.getDeclaratorSuffix()) {
			format(declaratorSuffix, document);
		}
	}

	def dispatch void format(DeclaratorSuffix declaratorSuffix, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(declaratorSuffix.getLastSuffix(), document);
	}

	def dispatch void format(DirectDeclaratorLastSuffix directDeclaratorLastSuffix, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (ParameterTypeList parameterTypeList : directDeclaratorLastSuffix.getParameterTypeList()) {
			format(parameterTypeList, document);
		}
		format(directDeclaratorLastSuffix.getIdentifierList(), document);
	}

	def dispatch void format(Pointer pointer, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (TypeQualifierList typeQualifierList : pointer.getTypeQualifierList()) {
			format(typeQualifierList, document);
		}
	}

	def dispatch void format(TypeQualifierList typeQualifierList, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (TypeQualifier typeQualifier : typeQualifierList.getTypeQualifier()) {
			format(typeQualifier, document);
		}
	}

	def dispatch void format(ParameterTypeList parameterTypeList, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(parameterTypeList.getList(), document);
	}

	def dispatch void format(ParameterList parameterList, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (ParameterDeclaration parameterDeclaration : parameterList.getParameterDeclaration()) {
			format(parameterDeclaration, document);
		}
	}

	def dispatch void format(ParameterDeclaration parameterDeclaration, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(parameterDeclaration.getDeclSpecifiers(), document);
		format(parameterDeclaration.getDeclarator(), document);
	}

	def dispatch void format(IdentifierList identifierList, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (MyIdentifier id : identifierList.getId()) {
			format(id, document);
		}
	}

	def dispatch void format(TypeName typeName, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(typeName.getList(), document);
	}

	def dispatch void format(Initializer initializer, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(initializer.getExpr(), document);
	}

	def dispatch void format(BlockList blockList, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Declaration declaration : blockList.getDeclaration()) {
			format(declaration, document);
		}
		for (Statement statement : blockList.getStatement()) {
			format(statement, document);
		}
	}

	def dispatch void format(Statement statement, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(statement.getStmt(), document);
	}

	def dispatch void format(LabeledStatement labeledStatement, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(labeledStatement.getLStmt(), document);
		format(labeledStatement.getExpr(), document);
	}

	def dispatch void format(CompoundStatement compoundStatement, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(compoundStatement.getBody(), document);
	}

	def dispatch void format(BodyStatement bodyStatement, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (BlockList blockList : bodyStatement.getBlockList()) {
			format(blockList, document);
		}
	}

	def dispatch void format(ExpressionStatement expressionStatement, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(expressionStatement.getExpression(), document);
	}

	def dispatch void format(SelectionStatement selectionStatement, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(selectionStatement.getExpr(), document);
		format(selectionStatement.getIfStatement(), document);
		format(selectionStatement.getElseStatement(), document);
		format(selectionStatement.getSwitchStatement(), document);
	}

	def dispatch void format(IterationStatement iterationStatement, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(iterationStatement.getExpr(), document);
		format(iterationStatement.getStatement(), document);
		format(iterationStatement.getInitExpr(), document);
		format(iterationStatement.getIncExpr(), document);
		format(iterationStatement.getInitDecl(), document);
	}

	def dispatch void format(JumpStatement jumpStatement, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(jumpStatement.getExpr(), document);
	}

	def dispatch void format(AsmStatement asmStatement, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Expression expr : asmStatement.getExpr()) {
			format(expr, document);
		}
	}

	def dispatch void format(Expression expression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Expression exprExpr : expression.getExprExpr()) {
			format(exprExpr, document);
		}
	}

	def dispatch void format(AssignmentExpression assignmentExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(assignmentExpression.getExpr(), document);
		format(assignmentExpression.getOp(), document);
		format(assignmentExpression.getAssignmentExpr(), document);
	}

	def dispatch void format(ConditionalExpression conditionalExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(conditionalExpression.getExpr(), document);
		format(conditionalExpression.getQExpr(), document);
		format(conditionalExpression.getCExpr(), document);
	}

	def dispatch void format(LogicalOrExpression logicalOrExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Expression expr : logicalOrExpression.getExpr()) {
			format(expr, document);
		}
	}

	def dispatch void format(LogicalAndExpression logicalAndExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Expression expr : logicalAndExpression.getExpr()) {
			format(expr, document);
		}
	}

	def dispatch void format(InclusiveOrExpression inclusiveOrExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Expression expr : inclusiveOrExpression.getExpr()) {
			format(expr, document);
		}
	}

	def dispatch void format(ExclusiveOrExpression exclusiveOrExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Expression expr : exclusiveOrExpression.getExpr()) {
			format(expr, document);
		}
	}

	def dispatch void format(AndExpression andExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Expression expr : andExpression.getExpr()) {
			format(expr, document);
		}
	}

	def dispatch void format(EqualityExpression equalityExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Expression expr : equalityExpression.getExpr()) {
			format(expr, document);
		}
	}

	def dispatch void format(RelationalExpression relationalExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Expression expr : relationalExpression.getExpr()) {
			format(expr, document);
		}
	}

	def dispatch void format(ShiftExpression shiftExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Expression expr : shiftExpression.getExpr()) {
			format(expr, document);
		}
	}

	def dispatch void format(AdditiveExpression additiveExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Expression expr : additiveExpression.getExpr()) {
			format(expr, document);
		}
	}

	def dispatch void format(MultiplicativeExpression multiplicativeExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Expression expr : multiplicativeExpression.getExpr()) {
			format(expr, document);
		}
	}

	def dispatch void format(CastExpression castExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(castExpression.getExpr(), document);
		format(castExpression.getType(), document);
	}

	def dispatch void format(UnaryExpression unaryExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(unaryExpression.getExpr(), document);
		format(unaryExpression.getOp(), document);
	}

	def dispatch void format(PostfixExpression postfixExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Expression expr : postfixExpression.getExpr()) {
			format(expr, document);
		}
		for (Expression arrayExpr : postfixExpression.getArrayExpr()) {
			format(arrayExpr, document);
		}
		for (ArgumentExpressionList argumentExpressionList : postfixExpression.getArgumentExpressionList()) {
			format(argumentExpressionList, document);
		}
	}

	def dispatch void format(ArgumentExpressionList argumentExpressionList, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Expression expr : argumentExpressionList.getExpr()) {
			format(expr, document);
		}
	}

	def dispatch void format(PrimaryExpression primaryExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(primaryExpression.getConst(), document);
		format(primaryExpression.getExpr(), document);
	}

	def dispatch void format(ConstantExpression constantExpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(constantExpression.getExpr(), document);
	}
}
