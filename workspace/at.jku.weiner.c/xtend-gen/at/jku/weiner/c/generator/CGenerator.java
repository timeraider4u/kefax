/**
 * generated by Xtext 2.9.0-SNAPSHOT
 */
package at.jku.weiner.c.generator;

import at.jku.weiner.c.c.Declaration;
import at.jku.weiner.c.c.DeclarationSpecifier;
import at.jku.weiner.c.c.DeclarationSpecifiers;
import at.jku.weiner.c.c.Declarator;
import at.jku.weiner.c.c.DeclaratorSuffix;
import at.jku.weiner.c.c.DirectDeclarator;
import at.jku.weiner.c.c.DirectDeclaratorLastSuffix;
import at.jku.weiner.c.c.ExternalDeclaration;
import at.jku.weiner.c.c.FunctionDeclarationSpecifiers;
import at.jku.weiner.c.c.FunctionDefHead;
import at.jku.weiner.c.c.FunctionDefinition;
import at.jku.weiner.c.c.IdentifierList;
import at.jku.weiner.c.c.InitDeclarator;
import at.jku.weiner.c.c.InitDeclaratorList;
import at.jku.weiner.c.c.Model;
import at.jku.weiner.c.c.MyIdentifier;
import at.jku.weiner.c.c.ParameterDeclaration;
import at.jku.weiner.c.c.ParameterList;
import at.jku.weiner.c.c.ParameterTypeList;
import at.jku.weiner.c.c.Statement;
import at.jku.weiner.c.c.StorageClassSpecifier;
import at.jku.weiner.c.c.TranslationUnit;
import at.jku.weiner.c.c.TypeQualifier;
import at.jku.weiner.c.c.TypeSpecifier;
import at.jku.weiner.c.c.TypedefName;
import com.google.common.base.Objects;
import com.google.common.collect.Iterators;
import java.util.Iterator;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend.lib.annotations.Accessors;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.Pure;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class CGenerator implements IGenerator {
  @Accessors
  private String fileName = "greetings.txt";
  
  @Override
  public void doGenerate(final Resource input, final IFileSystemAccess fsa) {
    TreeIterator<EObject> _allContents = input.getAllContents();
    Iterator<Model> _filter = Iterators.<Model>filter(_allContents, Model.class);
    final Model model = IteratorExtensions.<Model>head(_filter);
    EList<TranslationUnit> _unit = model.getUnit();
    final TranslationUnit unit = IterableExtensions.<TranslationUnit>head(_unit);
    final String output = this.outputFor(unit);
    fsa.generateFile(this.fileName, output);
  }
  
  public String outputFor(final TranslationUnit unit) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<ExternalDeclaration> _external = unit.getExternal();
      for(final ExternalDeclaration e : _external) {
        String _outputFor = this.outputFor(e);
        _builder.append(_outputFor, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  public String outputFor(final ExternalDeclaration dec) {
    StringConcatenation _builder = new StringConcatenation();
    {
      FunctionDefHead _functiondefHead = dec.getFunctiondefHead();
      boolean _notEquals = (!Objects.equal(_functiondefHead, null));
      if (_notEquals) {
        FunctionDefHead _functiondefHead_1 = dec.getFunctiondefHead();
        String _outputFor = this.outputFor(_functiondefHead_1);
        _builder.append(_outputFor, "");
        _builder.append(" {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        FunctionDefinition _functionDefinition = dec.getFunctionDefinition();
        String _outputFor_1 = this.outputFor(_functionDefinition);
        _builder.append(_outputFor_1, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
      }
    }
    Declaration _declaration = dec.getDeclaration();
    String _outputFor_2 = this.outputFor(_declaration);
    _builder.append(_outputFor_2, "");
    _builder.newLineIfNotEmpty();
    {
      String _semi = dec.getSemi();
      boolean _notEquals_1 = (!Objects.equal(_semi, null));
      if (_notEquals_1) {
        String _semi_1 = dec.getSemi();
        _builder.append(_semi_1, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  public String outputFor(final FunctionDefHead dec) {
    StringConcatenation _builder = new StringConcatenation();
    {
      FunctionDeclarationSpecifiers _funDeclSpecifiers = dec.getFunDeclSpecifiers();
      boolean _notEquals = (!Objects.equal(_funDeclSpecifiers, null));
      if (_notEquals) {
        FunctionDeclarationSpecifiers _funDeclSpecifiers_1 = dec.getFunDeclSpecifiers();
        String _outputFor = this.outputFor(_funDeclSpecifiers_1);
        _builder.append(_outputFor, "");
        _builder.newLineIfNotEmpty();
      }
    }
    Declarator _funDeclarator = dec.getFunDeclarator();
    String _outputFor_1 = this.outputFor(_funDeclarator);
    _builder.append(_outputFor_1, "");
    _builder.newLineIfNotEmpty();
    {
      EList<Declaration> _funDeclaration = dec.getFunDeclaration();
      for(final Declaration f : _funDeclaration) {
        String _outputFor_2 = this.outputFor(f);
        _builder.append(_outputFor_2, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  public String outputFor(final FunctionDeclarationSpecifiers spec) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<EObject> _declarationSpecifier = spec.getDeclarationSpecifier();
      for(final EObject s : _declarationSpecifier) {
        {
          if ((s instanceof StorageClassSpecifier)) {
            String _outputFor = this.outputFor(((StorageClassSpecifier)s));
            _builder.append(_outputFor, "");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          if ((s instanceof TypeSpecifier)) {
            String _outputFor_1 = this.outputFor(((TypeSpecifier)s));
            _builder.append(_outputFor_1, "");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          if ((s instanceof TypeQualifier)) {
            String _outputFor_2 = this.outputFor(((TypeQualifier)s));
            _builder.append(_outputFor_2, "");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder.toString();
  }
  
  public String outputFor(final FunctionDefinition obj) {
    StringConcatenation _builder = new StringConcatenation();
    Statement _body = obj.getBody();
    String _outputFor = this.outputFor(_body);
    _builder.append(_outputFor, "");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputFor(final Declaration dec) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _notEquals = (!Objects.equal(dec, null));
      if (_notEquals) {
        DeclarationSpecifiers _specifiers = dec.getSpecifiers();
        String _outputFor = this.outputFor(_specifiers);
        _builder.append(_outputFor, "");
        _builder.newLineIfNotEmpty();
        {
          EList<InitDeclaratorList> _initDeclaratorList = dec.getInitDeclaratorList();
          for(final InitDeclaratorList list : _initDeclaratorList) {
            String _outputFor_1 = this.outputFor(list);
            _builder.append(_outputFor_1, "");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          String _semi = dec.getSemi();
          boolean _notEquals_1 = (!Objects.equal(_semi, null));
          if (_notEquals_1) {
            String _semi_1 = dec.getSemi();
            _builder.append(_semi_1, "");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder.toString();
  }
  
  public String outputFor(final DeclarationSpecifiers spec) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<EObject> _declarationSpecifier = spec.getDeclarationSpecifier();
      for(final EObject s : _declarationSpecifier) {
        {
          if ((s instanceof StorageClassSpecifier)) {
            String _outputFor = this.outputFor(((StorageClassSpecifier)s));
            _builder.append(_outputFor, "");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          if ((s instanceof TypeSpecifier)) {
            String _outputFor_1 = this.outputFor(((TypeSpecifier)s));
            _builder.append(_outputFor_1, "");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          if ((s instanceof TypeQualifier)) {
            String _outputFor_2 = this.outputFor(((TypeQualifier)s));
            _builder.append(_outputFor_2, "");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder.toString();
  }
  
  public String outputFor(final StorageClassSpecifier spec) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = spec.getName();
    _builder.append(_name, "");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputFor(final TypeQualifier spec) {
    StringConcatenation _builder = new StringConcatenation();
    String _type = spec.getType();
    _builder.append(_type, "");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputFor(final TypeSpecifier spec) {
    StringConcatenation _builder = new StringConcatenation();
    {
      DeclarationSpecifier _specifier = spec.getSpecifier();
      boolean _notEquals = (!Objects.equal(_specifier, null));
      if (_notEquals) {
      } else {
        {
          TypedefName _type = spec.getType();
          boolean _notEquals_1 = (!Objects.equal(_type, null));
          if (_notEquals_1) {
            TypedefName _type_1 = spec.getType();
            String _id = _type_1.getId();
            _builder.append(_id, "");
            _builder.newLineIfNotEmpty();
          } else {
            String _name = spec.getName();
            _builder.append(_name, "");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder.toString();
  }
  
  public String outputFor(final InitDeclaratorList list) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<InitDeclarator> _initDeclarator = list.getInitDeclarator();
      for(final InitDeclarator initDeclarator : _initDeclarator) {
        String _outputFor = this.outputFor(initDeclarator);
        _builder.append(_outputFor, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  public String outputFor(final InitDeclarator decl) {
    StringConcatenation _builder = new StringConcatenation();
    Declarator _declarator = decl.getDeclarator();
    String _outputFor = this.outputFor(_declarator);
    _builder.append(_outputFor, "");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputFor(final Declarator decl) {
    StringConcatenation _builder = new StringConcatenation();
    DirectDeclarator _declarator = decl.getDeclarator();
    String _outputFor = this.outputFor(_declarator);
    _builder.append(_outputFor, "");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String outputFor(final DirectDeclarator decl) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _id = decl.getId();
      boolean _notEquals = (!Objects.equal(_id, null));
      if (_notEquals) {
        String _id_1 = decl.getId();
        _builder.append(_id_1, "");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("(");
        Declarator _declarator = decl.getDeclarator();
        String _outputFor = this.outputFor(_declarator);
        _builder.append(_outputFor, "");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<DeclaratorSuffix> _declaratorSuffix = decl.getDeclaratorSuffix();
      for(final DeclaratorSuffix d : _declaratorSuffix) {
        String _outputFor_1 = this.outputFor(d);
        _builder.append(_outputFor_1, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  public String outputFor(final DeclaratorSuffix obj) {
    StringConcatenation _builder = new StringConcatenation();
    {
      DirectDeclaratorLastSuffix _lastSuffix = obj.getLastSuffix();
      boolean _notEquals = (!Objects.equal(_lastSuffix, null));
      if (_notEquals) {
        DirectDeclaratorLastSuffix _lastSuffix_1 = obj.getLastSuffix();
        String _outputFor = this.outputFor(_lastSuffix_1);
        _builder.append(_outputFor, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  public String outputFor(final DirectDeclaratorLastSuffix obj) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    _builder.newLine();
    {
      EList<ParameterTypeList> _parameterTypeList = obj.getParameterTypeList();
      boolean _notEquals = (!Objects.equal(_parameterTypeList, null));
      if (_notEquals) {
        {
          EList<ParameterTypeList> _parameterTypeList_1 = obj.getParameterTypeList();
          for(final ParameterTypeList l : _parameterTypeList_1) {
            String _outputFor = this.outputFor(l);
            _builder.append(_outputFor, "");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      IdentifierList _identifierList = obj.getIdentifierList();
      boolean _notEquals_1 = (!Objects.equal(_identifierList, null));
      if (_notEquals_1) {
        IdentifierList _identifierList_1 = obj.getIdentifierList();
        String _outputFor_1 = this.outputFor(_identifierList_1);
        _builder.append(_outputFor_1, "");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append(")");
    _builder.newLine();
    return _builder.toString();
  }
  
  public String outputFor(final ParameterTypeList obj) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _notEquals = (!Objects.equal(obj, null));
      if (_notEquals) {
        ParameterList _list = obj.getList();
        String _outputFor = this.outputFor(_list);
        _builder.append(_outputFor, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  public String outputFor(final ParameterList obj) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<ParameterDeclaration> _parameterDeclaration = obj.getParameterDeclaration();
      for(final ParameterDeclaration p : _parameterDeclaration) {
        {
          EList<ParameterDeclaration> _parameterDeclaration_1 = obj.getParameterDeclaration();
          int _indexOf = _parameterDeclaration_1.indexOf(p);
          boolean _greaterThan = (_indexOf > 0);
          if (_greaterThan) {
            _builder.append(", ");
          }
        }
        _builder.newLineIfNotEmpty();
        String _outputFor = this.outputFor(p);
        _builder.append(_outputFor, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  public String outputFor(final ParameterDeclaration obj) {
    StringConcatenation _builder = new StringConcatenation();
    DeclarationSpecifiers _declSpecifiers = obj.getDeclSpecifiers();
    String _outputFor = this.outputFor(_declSpecifiers);
    _builder.append(_outputFor, "");
    _builder.newLineIfNotEmpty();
    {
      Declarator _declarator = obj.getDeclarator();
      boolean _notEquals = (!Objects.equal(_declarator, null));
      if (_notEquals) {
        Declarator _declarator_1 = obj.getDeclarator();
        String _outputFor_1 = this.outputFor(_declarator_1);
        _builder.append(_outputFor_1, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  public String outputFor(final IdentifierList obj) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<MyIdentifier> _id = obj.getId();
      for(final MyIdentifier i : _id) {
        {
          EList<MyIdentifier> _id_1 = obj.getId();
          int _indexOf = _id_1.indexOf(i);
          boolean _greaterThan = (_indexOf > 0);
          if (_greaterThan) {
            _builder.append(", ");
          }
        }
        _builder.newLineIfNotEmpty();
        String _id_2 = i.getId();
        _builder.append(_id_2, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  public String outputFor(final Statement obj) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t\t");
    _builder.newLine();
    return _builder.toString();
  }
  
  @Pure
  public String getFileName() {
    return this.fileName;
  }
  
  public void setFileName(final String fileName) {
    this.fileName = fileName;
  }
}
