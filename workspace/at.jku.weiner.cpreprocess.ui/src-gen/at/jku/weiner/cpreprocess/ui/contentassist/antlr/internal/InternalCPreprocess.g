/*
 * generated by Xtext 2.9.0-SNAPSHOT
 */
grammar InternalCPreprocess;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
	
}

@lexer::header {
package at.jku.weiner.cpreprocess.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package at.jku.weiner.cpreprocess.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import at.jku.weiner.cpreprocess.services.CPreprocessGrammarAccess;

}

@parser::members {
 
 	private CPreprocessGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(CPreprocessGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)
{ after(grammarAccess.getModelAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTranslationUnit
entryRuleTranslationUnit 
:
{ before(grammarAccess.getTranslationUnitRule()); }
	 ruleTranslationUnit
{ after(grammarAccess.getTranslationUnitRule()); } 
	 EOF 
;

// Rule TranslationUnit
ruleTranslationUnit
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getTranslationUnitAccess().getGroup()); }
(rule__TranslationUnit__Group__0)
{ after(grammarAccess.getTranslationUnitAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGroupOpt
entryRuleGroupOpt 
:
{ before(grammarAccess.getGroupOptRule()); }
	 ruleGroupOpt
{ after(grammarAccess.getGroupOptRule()); } 
	 EOF 
;

// Rule GroupOpt
ruleGroupOpt
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getGroupOptAccess().getGroup()); }
(rule__GroupOpt__Group__0)
{ after(grammarAccess.getGroupOptAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePreprocessorDirectives
entryRulePreprocessorDirectives 
:
{ before(grammarAccess.getPreprocessorDirectivesRule()); }
	 rulePreprocessorDirectives
{ after(grammarAccess.getPreprocessorDirectivesRule()); } 
	 EOF 
;

// Rule PreprocessorDirectives
rulePreprocessorDirectives
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getPreprocessorDirectivesAccess().getGroup()); }
(rule__PreprocessorDirectives__Group__0)
{ after(grammarAccess.getPreprocessorDirectivesAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIncludeDirective
entryRuleIncludeDirective 
:
{ before(grammarAccess.getIncludeDirectiveRule()); }
	 ruleIncludeDirective
{ after(grammarAccess.getIncludeDirectiveRule()); } 
	 EOF 
;

// Rule IncludeDirective
ruleIncludeDirective
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getIncludeDirectiveAccess().getGroup()); }
(rule__IncludeDirective__Group__0)
{ after(grammarAccess.getIncludeDirectiveAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDefineDirective
entryRuleDefineDirective 
:
{ before(grammarAccess.getDefineDirectiveRule()); }
	 ruleDefineDirective
{ after(grammarAccess.getDefineDirectiveRule()); } 
	 EOF 
;

// Rule DefineDirective
ruleDefineDirective
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getDefineDirectiveAccess().getAlternatives()); }
(rule__DefineDirective__Alternatives)
{ after(grammarAccess.getDefineDirectiveAccess().getAlternatives()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDefineObjectMacro
entryRuleDefineObjectMacro 
:
{ before(grammarAccess.getDefineObjectMacroRule()); }
	 ruleDefineObjectMacro
{ after(grammarAccess.getDefineObjectMacroRule()); } 
	 EOF 
;

// Rule DefineObjectMacro
ruleDefineObjectMacro
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getDefineObjectMacroAccess().getGroup()); }
(rule__DefineObjectMacro__Group__0)
{ after(grammarAccess.getDefineObjectMacroAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDefineFunctionLikeMacro
entryRuleDefineFunctionLikeMacro 
:
{ before(grammarAccess.getDefineFunctionLikeMacroRule()); }
	 ruleDefineFunctionLikeMacro
{ after(grammarAccess.getDefineFunctionLikeMacroRule()); } 
	 EOF 
;

// Rule DefineFunctionLikeMacro
ruleDefineFunctionLikeMacro
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getDefineFunctionLikeMacroAccess().getGroup()); }
(rule__DefineFunctionLikeMacro__Group__0)
{ after(grammarAccess.getDefineFunctionLikeMacroAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIdentifierList
entryRuleIdentifierList 
:
{ before(grammarAccess.getIdentifierListRule()); }
	 ruleIdentifierList
{ after(grammarAccess.getIdentifierListRule()); } 
	 EOF 
;

// Rule IdentifierList
ruleIdentifierList
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getIdentifierListAccess().getGroup()); }
(rule__IdentifierList__Group__0)
{ after(grammarAccess.getIdentifierListAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleErrorDirective
entryRuleErrorDirective 
:
{ before(grammarAccess.getErrorDirectiveRule()); }
	 ruleErrorDirective
{ after(grammarAccess.getErrorDirectiveRule()); } 
	 EOF 
;

// Rule ErrorDirective
ruleErrorDirective
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getErrorDirectiveAccess().getGroup()); }
(rule__ErrorDirective__Group__0)
{ after(grammarAccess.getErrorDirectiveAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnDefineDirective
entryRuleUnDefineDirective 
:
{ before(grammarAccess.getUnDefineDirectiveRule()); }
	 ruleUnDefineDirective
{ after(grammarAccess.getUnDefineDirectiveRule()); } 
	 EOF 
;

// Rule UnDefineDirective
ruleUnDefineDirective
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getUnDefineDirectiveAccess().getGroup()); }
(rule__UnDefineDirective__Group__0)
{ after(grammarAccess.getUnDefineDirectiveAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePragmaDirective
entryRulePragmaDirective 
:
{ before(grammarAccess.getPragmaDirectiveRule()); }
	 rulePragmaDirective
{ after(grammarAccess.getPragmaDirectiveRule()); } 
	 EOF 
;

// Rule PragmaDirective
rulePragmaDirective
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getPragmaDirectiveAccess().getGroup()); }
(rule__PragmaDirective__Group__0)
{ after(grammarAccess.getPragmaDirectiveAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNullDirective
entryRuleNullDirective 
:
{ before(grammarAccess.getNullDirectiveRule()); }
	 ruleNullDirective
{ after(grammarAccess.getNullDirectiveRule()); } 
	 EOF 
;

// Rule NullDirective
ruleNullDirective
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getNullDirectiveAccess().getNullDirectiveAction()); }
(

)
{ after(grammarAccess.getNullDirectiveAccess().getNullDirectiveAction()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNewLineLine
entryRuleNewLineLine 
:
{ before(grammarAccess.getNewLineLineRule()); }
	 ruleNewLineLine
{ after(grammarAccess.getNewLineLineRule()); } 
	 EOF 
;

// Rule NewLineLine
ruleNewLineLine
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getNewLineLineAccess().getGroup()); }
(rule__NewLineLine__Group__0)
{ after(grammarAccess.getNewLineLineAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCode
entryRuleCode 
:
{ before(grammarAccess.getCodeRule()); }
	 ruleCode
{ after(grammarAccess.getCodeRule()); } 
	 EOF 
;

// Rule Code
ruleCode
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getCodeAccess().getGroup()); }
(rule__Code__Group__0)
{ after(grammarAccess.getCodeAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMyCode
entryRuleMyCode 
:
{ before(grammarAccess.getMyCodeRule()); }
	 ruleMyCode
{ after(grammarAccess.getMyCodeRule()); } 
	 EOF 
;

// Rule MyCode
ruleMyCode
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getMyCodeAccess().getAlternatives()); }
(rule__MyCode__Alternatives)
{ after(grammarAccess.getMyCodeAccess().getAlternatives()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMyDefineLine
entryRuleMyDefineLine 
:
{ before(grammarAccess.getMyDefineLineRule()); }
	 ruleMyDefineLine
{ after(grammarAccess.getMyDefineLineRule()); } 
	 EOF 
;

// Rule MyDefineLine
ruleMyDefineLine
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getMyDefineLineAccess().getAlternatives()); }
(rule__MyDefineLine__Alternatives)*
{ after(grammarAccess.getMyDefineLineAccess().getAlternatives()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMyCodeLine
entryRuleMyCodeLine 
:
{ before(grammarAccess.getMyCodeLineRule()); }
	 ruleMyCodeLine
{ after(grammarAccess.getMyCodeLineRule()); } 
	 EOF 
;

// Rule MyCodeLine
ruleMyCodeLine
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
(
{ before(grammarAccess.getMyCodeLineAccess().getAlternatives()); }
(rule__MyCodeLine__Alternatives)
{ after(grammarAccess.getMyCodeLineAccess().getAlternatives()); }
)
(
{ before(grammarAccess.getMyCodeLineAccess().getAlternatives()); }
(rule__MyCodeLine__Alternatives)*
{ after(grammarAccess.getMyCodeLineAccess().getAlternatives()); }
)
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMyCodeLineExtended
entryRuleMyCodeLineExtended 
:
{ before(grammarAccess.getMyCodeLineExtendedRule()); }
	 ruleMyCodeLineExtended
{ after(grammarAccess.getMyCodeLineExtendedRule()); } 
	 EOF 
;

// Rule MyCodeLineExtended
ruleMyCodeLineExtended
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getMyCodeLineExtendedAccess().getGroup()); }
(rule__MyCodeLineExtended__Group__0)
{ after(grammarAccess.getMyCodeLineExtendedAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}




rule__GroupOpt__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getGroupOptAccess().getLinesAssignment_1_0()); }
(rule__GroupOpt__LinesAssignment_1_0)
{ after(grammarAccess.getGroupOptAccess().getLinesAssignment_1_0()); }
)



    |
(
{ before(grammarAccess.getGroupOptAccess().getLinesAssignment_1_1()); }
(rule__GroupOpt__LinesAssignment_1_1)
{ after(grammarAccess.getGroupOptAccess().getLinesAssignment_1_1()); }
)



    |
(
{ before(grammarAccess.getGroupOptAccess().getLinesAssignment_1_2()); }
(rule__GroupOpt__LinesAssignment_1_2)
{ after(grammarAccess.getGroupOptAccess().getLinesAssignment_1_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__PreprocessorDirectives__Alternatives_4
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveAssignment_4_0()); }
(rule__PreprocessorDirectives__DirectiveAssignment_4_0)
{ after(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveAssignment_4_0()); }
)



    |
(
{ before(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveAssignment_4_1()); }
(rule__PreprocessorDirectives__DirectiveAssignment_4_1)
{ after(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveAssignment_4_1()); }
)



    |
(
{ before(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveAssignment_4_2()); }
(rule__PreprocessorDirectives__DirectiveAssignment_4_2)
{ after(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveAssignment_4_2()); }
)



    |
(
{ before(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveAssignment_4_3()); }
(rule__PreprocessorDirectives__DirectiveAssignment_4_3)
{ after(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveAssignment_4_3()); }
)



    |
(
{ before(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveAssignment_4_4()); }
(rule__PreprocessorDirectives__DirectiveAssignment_4_4)
{ after(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveAssignment_4_4()); }
)



    |
(
{ before(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveAssignment_4_5()); }
(rule__PreprocessorDirectives__DirectiveAssignment_4_5)
{ after(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveAssignment_4_5()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__DefineDirective__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDefineDirectiveAccess().getDefineObjectMacroParserRuleCall_0()); }
	ruleDefineObjectMacro
{ after(grammarAccess.getDefineDirectiveAccess().getDefineObjectMacroParserRuleCall_0()); }
)



    |
(
{ before(grammarAccess.getDefineDirectiveAccess().getDefineFunctionLikeMacroParserRuleCall_1()); }
	ruleDefineFunctionLikeMacro
{ after(grammarAccess.getDefineDirectiveAccess().getDefineFunctionLikeMacroParserRuleCall_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__MyCode__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getMyCodeAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getMyCodeAccess().getIDTerminalRuleCall_0()); }
)



    |
(
{ before(grammarAccess.getMyCodeAccess().getSPECIALTerminalRuleCall_1()); }
	RULE_SPECIAL
{ after(grammarAccess.getMyCodeAccess().getSPECIALTerminalRuleCall_1()); }
)



    |
(
{ before(grammarAccess.getMyCodeAccess().getINCLUDETerminalRuleCall_2()); }
	RULE_INCLUDE
{ after(grammarAccess.getMyCodeAccess().getINCLUDETerminalRuleCall_2()); }
)



    |
(
{ before(grammarAccess.getMyCodeAccess().getDEFINETerminalRuleCall_3()); }
	RULE_DEFINE
{ after(grammarAccess.getMyCodeAccess().getDEFINETerminalRuleCall_3()); }
)



    |
(
{ before(grammarAccess.getMyCodeAccess().getERRORTerminalRuleCall_4()); }
	RULE_ERROR
{ after(grammarAccess.getMyCodeAccess().getERRORTerminalRuleCall_4()); }
)



    |
(
{ before(grammarAccess.getMyCodeAccess().getPRAGMATerminalRuleCall_5()); }
	RULE_PRAGMA
{ after(grammarAccess.getMyCodeAccess().getPRAGMATerminalRuleCall_5()); }
)



    |
(
{ before(grammarAccess.getMyCodeAccess().getLPARENTerminalRuleCall_6()); }
	RULE_LPAREN
{ after(grammarAccess.getMyCodeAccess().getLPARENTerminalRuleCall_6()); }
)



    |
(
{ before(grammarAccess.getMyCodeAccess().getRPARENTerminalRuleCall_7()); }
	RULE_RPAREN
{ after(grammarAccess.getMyCodeAccess().getRPARENTerminalRuleCall_7()); }
)



    |
(
{ before(grammarAccess.getMyCodeAccess().getCOMMATerminalRuleCall_8()); }
	RULE_COMMA
{ after(grammarAccess.getMyCodeAccess().getCOMMATerminalRuleCall_8()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__MyDefineLine__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getMyDefineLineAccess().getMyCodeParserRuleCall_0()); }
	ruleMyCode
{ after(grammarAccess.getMyDefineLineAccess().getMyCodeParserRuleCall_0()); }
)



    |
(
{ before(grammarAccess.getMyDefineLineAccess().getWSTerminalRuleCall_1()); }
	RULE_WS
{ after(grammarAccess.getMyDefineLineAccess().getWSTerminalRuleCall_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__MyCodeLine__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getMyCodeLineAccess().getMyCodeParserRuleCall_0()); }
	ruleMyCode
{ after(grammarAccess.getMyCodeLineAccess().getMyCodeParserRuleCall_0()); }
)



    |
(
{ before(grammarAccess.getMyCodeLineAccess().getWSTerminalRuleCall_1()); }
	RULE_WS
{ after(grammarAccess.getMyCodeLineAccess().getWSTerminalRuleCall_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__MyCodeLineExtended__Alternatives_1_1
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getMyCodeLineExtendedAccess().getMyCodeLineParserRuleCall_1_1_0()); }
	ruleMyCodeLine
{ after(grammarAccess.getMyCodeLineExtendedAccess().getMyCodeLineParserRuleCall_1_1_0()); }
)



    |
(
{ before(grammarAccess.getMyCodeLineExtendedAccess().getHASHTerminalRuleCall_1_1_1()); }
	RULE_HASH
{ after(grammarAccess.getMyCodeLineExtendedAccess().getHASHTerminalRuleCall_1_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getModelAccess().getModelAction_0()); }
(

)
{ after(grammarAccess.getModelAccess().getModelAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getModelAccess().getUnitsAssignment_1()); }
(rule__Model__UnitsAssignment_1)
{ after(grammarAccess.getModelAccess().getUnitsAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__TranslationUnit__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TranslationUnit__Group__0__Impl
	rule__TranslationUnit__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TranslationUnit__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getTranslationUnitAccess().getTranslationUnitAction_0()); }
(

)
{ after(grammarAccess.getTranslationUnitAccess().getTranslationUnitAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__TranslationUnit__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TranslationUnit__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TranslationUnit__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getTranslationUnitAccess().getGroupAssignment_1()); }
(rule__TranslationUnit__GroupAssignment_1)
{ after(grammarAccess.getTranslationUnitAccess().getGroupAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__GroupOpt__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupOpt__Group__0__Impl
	rule__GroupOpt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupOpt__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getGroupOptAccess().getGroupOptAction_0()); }
(

)
{ after(grammarAccess.getGroupOptAccess().getGroupOptAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__GroupOpt__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupOpt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupOpt__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getGroupOptAccess().getAlternatives_1()); }
(rule__GroupOpt__Alternatives_1)*
{ after(grammarAccess.getGroupOptAccess().getAlternatives_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__PreprocessorDirectives__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PreprocessorDirectives__Group__0__Impl
	rule__PreprocessorDirectives__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PreprocessorDirectives__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPreprocessorDirectivesAccess().getPreprocessorDirectivesAction_0()); }
(

)
{ after(grammarAccess.getPreprocessorDirectivesAccess().getPreprocessorDirectivesAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__PreprocessorDirectives__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PreprocessorDirectives__Group__1__Impl
	rule__PreprocessorDirectives__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PreprocessorDirectives__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPreprocessorDirectivesAccess().getWSTerminalRuleCall_1()); }
(	RULE_WS)*
{ after(grammarAccess.getPreprocessorDirectivesAccess().getWSTerminalRuleCall_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__PreprocessorDirectives__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PreprocessorDirectives__Group__2__Impl
	rule__PreprocessorDirectives__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PreprocessorDirectives__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPreprocessorDirectivesAccess().getHASHTerminalRuleCall_2()); }
	RULE_HASH
{ after(grammarAccess.getPreprocessorDirectivesAccess().getHASHTerminalRuleCall_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__PreprocessorDirectives__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PreprocessorDirectives__Group__3__Impl
	rule__PreprocessorDirectives__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PreprocessorDirectives__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPreprocessorDirectivesAccess().getWSTerminalRuleCall_3()); }
(	RULE_WS)*
{ after(grammarAccess.getPreprocessorDirectivesAccess().getWSTerminalRuleCall_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__PreprocessorDirectives__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PreprocessorDirectives__Group__4__Impl
	rule__PreprocessorDirectives__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__PreprocessorDirectives__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPreprocessorDirectivesAccess().getAlternatives_4()); }
(rule__PreprocessorDirectives__Alternatives_4)
{ after(grammarAccess.getPreprocessorDirectivesAccess().getAlternatives_4()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__PreprocessorDirectives__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PreprocessorDirectives__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PreprocessorDirectives__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPreprocessorDirectivesAccess().getNEWLINETerminalRuleCall_5()); }
	RULE_NEWLINE
{ after(grammarAccess.getPreprocessorDirectivesAccess().getNEWLINETerminalRuleCall_5()); }
)



;
finally {
	restoreStackSize(stackSize);
}














rule__IncludeDirective__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IncludeDirective__Group__0__Impl
	rule__IncludeDirective__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IncludeDirective__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIncludeDirectiveAccess().getIncludeDirectiveAction_0()); }
(

)
{ after(grammarAccess.getIncludeDirectiveAccess().getIncludeDirectiveAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IncludeDirective__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IncludeDirective__Group__1__Impl
	rule__IncludeDirective__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IncludeDirective__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIncludeDirectiveAccess().getINCLUDETerminalRuleCall_1()); }
	RULE_INCLUDE
{ after(grammarAccess.getIncludeDirectiveAccess().getINCLUDETerminalRuleCall_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IncludeDirective__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IncludeDirective__Group__2__Impl
	rule__IncludeDirective__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IncludeDirective__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
(
{ before(grammarAccess.getIncludeDirectiveAccess().getWSTerminalRuleCall_2()); }
(	RULE_WS)
{ after(grammarAccess.getIncludeDirectiveAccess().getWSTerminalRuleCall_2()); }
)
(
{ before(grammarAccess.getIncludeDirectiveAccess().getWSTerminalRuleCall_2()); }
(	RULE_WS)*
{ after(grammarAccess.getIncludeDirectiveAccess().getWSTerminalRuleCall_2()); }
)
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IncludeDirective__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IncludeDirective__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IncludeDirective__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIncludeDirectiveAccess().getStringAssignment_3()); }
(rule__IncludeDirective__StringAssignment_3)
{ after(grammarAccess.getIncludeDirectiveAccess().getStringAssignment_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}










rule__DefineObjectMacro__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefineObjectMacro__Group__0__Impl
	rule__DefineObjectMacro__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineObjectMacro__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDefineObjectMacroAccess().getDefineObjectMacroAction_0()); }
(

)
{ after(grammarAccess.getDefineObjectMacroAccess().getDefineObjectMacroAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DefineObjectMacro__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefineObjectMacro__Group__1__Impl
	rule__DefineObjectMacro__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineObjectMacro__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDefineObjectMacroAccess().getDEFINETerminalRuleCall_1()); }
	RULE_DEFINE
{ after(grammarAccess.getDefineObjectMacroAccess().getDEFINETerminalRuleCall_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DefineObjectMacro__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefineObjectMacro__Group__2__Impl
	rule__DefineObjectMacro__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineObjectMacro__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
(
{ before(grammarAccess.getDefineObjectMacroAccess().getWSTerminalRuleCall_2()); }
(	RULE_WS)
{ after(grammarAccess.getDefineObjectMacroAccess().getWSTerminalRuleCall_2()); }
)
(
{ before(grammarAccess.getDefineObjectMacroAccess().getWSTerminalRuleCall_2()); }
(	RULE_WS)*
{ after(grammarAccess.getDefineObjectMacroAccess().getWSTerminalRuleCall_2()); }
)
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DefineObjectMacro__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefineObjectMacro__Group__3__Impl
	rule__DefineObjectMacro__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineObjectMacro__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDefineObjectMacroAccess().getIdAssignment_3()); }
(rule__DefineObjectMacro__IdAssignment_3)
{ after(grammarAccess.getDefineObjectMacroAccess().getIdAssignment_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DefineObjectMacro__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefineObjectMacro__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineObjectMacro__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDefineObjectMacroAccess().getGroup_4()); }
(rule__DefineObjectMacro__Group_4__0)?
{ after(grammarAccess.getDefineObjectMacroAccess().getGroup_4()); }
)



;
finally {
	restoreStackSize(stackSize);
}












rule__DefineObjectMacro__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefineObjectMacro__Group_4__0__Impl
	rule__DefineObjectMacro__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineObjectMacro__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
(
{ before(grammarAccess.getDefineObjectMacroAccess().getWSTerminalRuleCall_4_0()); }
(	RULE_WS)
{ after(grammarAccess.getDefineObjectMacroAccess().getWSTerminalRuleCall_4_0()); }
)
(
{ before(grammarAccess.getDefineObjectMacroAccess().getWSTerminalRuleCall_4_0()); }
(	RULE_WS)*
{ after(grammarAccess.getDefineObjectMacroAccess().getWSTerminalRuleCall_4_0()); }
)
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DefineObjectMacro__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefineObjectMacro__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineObjectMacro__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDefineObjectMacroAccess().getStringAssignment_4_1()); }
(rule__DefineObjectMacro__StringAssignment_4_1)
{ after(grammarAccess.getDefineObjectMacroAccess().getStringAssignment_4_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__DefineFunctionLikeMacro__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefineFunctionLikeMacro__Group__0__Impl
	rule__DefineFunctionLikeMacro__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineFunctionLikeMacro__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDefineFunctionLikeMacroAccess().getDefineFunctionLikeMacroAction_0()); }
(

)
{ after(grammarAccess.getDefineFunctionLikeMacroAccess().getDefineFunctionLikeMacroAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DefineFunctionLikeMacro__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefineFunctionLikeMacro__Group__1__Impl
	rule__DefineFunctionLikeMacro__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineFunctionLikeMacro__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDefineFunctionLikeMacroAccess().getDEFINETerminalRuleCall_1()); }
	RULE_DEFINE
{ after(grammarAccess.getDefineFunctionLikeMacroAccess().getDEFINETerminalRuleCall_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DefineFunctionLikeMacro__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefineFunctionLikeMacro__Group__2__Impl
	rule__DefineFunctionLikeMacro__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineFunctionLikeMacro__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
(
{ before(grammarAccess.getDefineFunctionLikeMacroAccess().getWSTerminalRuleCall_2()); }
(	RULE_WS)
{ after(grammarAccess.getDefineFunctionLikeMacroAccess().getWSTerminalRuleCall_2()); }
)
(
{ before(grammarAccess.getDefineFunctionLikeMacroAccess().getWSTerminalRuleCall_2()); }
(	RULE_WS)*
{ after(grammarAccess.getDefineFunctionLikeMacroAccess().getWSTerminalRuleCall_2()); }
)
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DefineFunctionLikeMacro__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefineFunctionLikeMacro__Group__3__Impl
	rule__DefineFunctionLikeMacro__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineFunctionLikeMacro__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDefineFunctionLikeMacroAccess().getIdAssignment_3()); }
(rule__DefineFunctionLikeMacro__IdAssignment_3)
{ after(grammarAccess.getDefineFunctionLikeMacroAccess().getIdAssignment_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DefineFunctionLikeMacro__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefineFunctionLikeMacro__Group__4__Impl
	rule__DefineFunctionLikeMacro__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineFunctionLikeMacro__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDefineFunctionLikeMacroAccess().getLPARENTerminalRuleCall_4()); }
	RULE_LPAREN
{ after(grammarAccess.getDefineFunctionLikeMacroAccess().getLPARENTerminalRuleCall_4()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DefineFunctionLikeMacro__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefineFunctionLikeMacro__Group__5__Impl
	rule__DefineFunctionLikeMacro__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineFunctionLikeMacro__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDefineFunctionLikeMacroAccess().getListAssignment_5()); }
(rule__DefineFunctionLikeMacro__ListAssignment_5)?
{ after(grammarAccess.getDefineFunctionLikeMacroAccess().getListAssignment_5()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DefineFunctionLikeMacro__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefineFunctionLikeMacro__Group__6__Impl
	rule__DefineFunctionLikeMacro__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineFunctionLikeMacro__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDefineFunctionLikeMacroAccess().getRPARENTerminalRuleCall_6()); }
	RULE_RPAREN
{ after(grammarAccess.getDefineFunctionLikeMacroAccess().getRPARENTerminalRuleCall_6()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DefineFunctionLikeMacro__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefineFunctionLikeMacro__Group__7__Impl
	rule__DefineFunctionLikeMacro__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineFunctionLikeMacro__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
(
{ before(grammarAccess.getDefineFunctionLikeMacroAccess().getWSTerminalRuleCall_7()); }
(	RULE_WS)
{ after(grammarAccess.getDefineFunctionLikeMacroAccess().getWSTerminalRuleCall_7()); }
)
(
{ before(grammarAccess.getDefineFunctionLikeMacroAccess().getWSTerminalRuleCall_7()); }
(	RULE_WS)*
{ after(grammarAccess.getDefineFunctionLikeMacroAccess().getWSTerminalRuleCall_7()); }
)
)



;
finally {
	restoreStackSize(stackSize);
}


rule__DefineFunctionLikeMacro__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefineFunctionLikeMacro__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineFunctionLikeMacro__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDefineFunctionLikeMacroAccess().getStringAssignment_8()); }
(rule__DefineFunctionLikeMacro__StringAssignment_8)
{ after(grammarAccess.getDefineFunctionLikeMacroAccess().getStringAssignment_8()); }
)



;
finally {
	restoreStackSize(stackSize);
}




















rule__IdentifierList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IdentifierList__Group__0__Impl
	rule__IdentifierList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIdentifierListAccess().getIdentifierListAction_0()); }
(

)
{ after(grammarAccess.getIdentifierListAccess().getIdentifierListAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IdentifierList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IdentifierList__Group__1__Impl
	rule__IdentifierList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIdentifierListAccess().getIdAssignment_1()); }
(rule__IdentifierList__IdAssignment_1)
{ after(grammarAccess.getIdentifierListAccess().getIdAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IdentifierList__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IdentifierList__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIdentifierListAccess().getGroup_2()); }
(rule__IdentifierList__Group_2__0)*
{ after(grammarAccess.getIdentifierListAccess().getGroup_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__IdentifierList__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IdentifierList__Group_2__0__Impl
	rule__IdentifierList__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIdentifierListAccess().getCOMMATerminalRuleCall_2_0()); }
	RULE_COMMA
{ after(grammarAccess.getIdentifierListAccess().getCOMMATerminalRuleCall_2_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IdentifierList__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IdentifierList__Group_2__1__Impl
	rule__IdentifierList__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIdentifierListAccess().getWSTerminalRuleCall_2_1()); }
(	RULE_WS)*
{ after(grammarAccess.getIdentifierListAccess().getWSTerminalRuleCall_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__IdentifierList__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IdentifierList__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getIdentifierListAccess().getIdAssignment_2_2()); }
(rule__IdentifierList__IdAssignment_2_2)
{ after(grammarAccess.getIdentifierListAccess().getIdAssignment_2_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__ErrorDirective__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ErrorDirective__Group__0__Impl
	rule__ErrorDirective__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorDirective__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getErrorDirectiveAccess().getErrorDirectiveAction_0()); }
(

)
{ after(grammarAccess.getErrorDirectiveAccess().getErrorDirectiveAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ErrorDirective__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ErrorDirective__Group__1__Impl
	rule__ErrorDirective__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorDirective__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getErrorDirectiveAccess().getERRORTerminalRuleCall_1()); }
	RULE_ERROR
{ after(grammarAccess.getErrorDirectiveAccess().getERRORTerminalRuleCall_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ErrorDirective__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ErrorDirective__Group__2__Impl
	rule__ErrorDirective__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorDirective__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
(
{ before(grammarAccess.getErrorDirectiveAccess().getWSTerminalRuleCall_2()); }
(	RULE_WS)
{ after(grammarAccess.getErrorDirectiveAccess().getWSTerminalRuleCall_2()); }
)
(
{ before(grammarAccess.getErrorDirectiveAccess().getWSTerminalRuleCall_2()); }
(	RULE_WS)*
{ after(grammarAccess.getErrorDirectiveAccess().getWSTerminalRuleCall_2()); }
)
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ErrorDirective__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ErrorDirective__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorDirective__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getErrorDirectiveAccess().getMsgAssignment_3()); }
(rule__ErrorDirective__MsgAssignment_3)
{ after(grammarAccess.getErrorDirectiveAccess().getMsgAssignment_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}










rule__UnDefineDirective__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnDefineDirective__Group__0__Impl
	rule__UnDefineDirective__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnDefineDirective__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getUnDefineDirectiveAccess().getUnDefineDirectiveAction_0()); }
(

)
{ after(grammarAccess.getUnDefineDirectiveAccess().getUnDefineDirectiveAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__UnDefineDirective__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnDefineDirective__Group__1__Impl
	rule__UnDefineDirective__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnDefineDirective__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getUnDefineDirectiveAccess().getUNDEFTerminalRuleCall_1()); }
	RULE_UNDEF
{ after(grammarAccess.getUnDefineDirectiveAccess().getUNDEFTerminalRuleCall_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__UnDefineDirective__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnDefineDirective__Group__2__Impl
	rule__UnDefineDirective__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__UnDefineDirective__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
(
{ before(grammarAccess.getUnDefineDirectiveAccess().getWSTerminalRuleCall_2()); }
(	RULE_WS)
{ after(grammarAccess.getUnDefineDirectiveAccess().getWSTerminalRuleCall_2()); }
)
(
{ before(grammarAccess.getUnDefineDirectiveAccess().getWSTerminalRuleCall_2()); }
(	RULE_WS)*
{ after(grammarAccess.getUnDefineDirectiveAccess().getWSTerminalRuleCall_2()); }
)
)



;
finally {
	restoreStackSize(stackSize);
}


rule__UnDefineDirective__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnDefineDirective__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnDefineDirective__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getUnDefineDirectiveAccess().getIdAssignment_3()); }
(rule__UnDefineDirective__IdAssignment_3)
{ after(grammarAccess.getUnDefineDirectiveAccess().getIdAssignment_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}










rule__PragmaDirective__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PragmaDirective__Group__0__Impl
	rule__PragmaDirective__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaDirective__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPragmaDirectiveAccess().getPragmaDirectiveAction_0()); }
(

)
{ after(grammarAccess.getPragmaDirectiveAccess().getPragmaDirectiveAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__PragmaDirective__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PragmaDirective__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaDirective__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPragmaDirectiveAccess().getPRAGMATerminalRuleCall_1()); }
	RULE_PRAGMA
{ after(grammarAccess.getPragmaDirectiveAccess().getPRAGMATerminalRuleCall_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__NewLineLine__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NewLineLine__Group__0__Impl
	rule__NewLineLine__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NewLineLine__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getNewLineLineAccess().getNewLineLineAction_0()); }
(

)
{ after(grammarAccess.getNewLineLineAccess().getNewLineLineAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__NewLineLine__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NewLineLine__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NewLineLine__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getNewLineLineAccess().getNEWLINETerminalRuleCall_1()); }
	RULE_NEWLINE
{ after(grammarAccess.getNewLineLineAccess().getNEWLINETerminalRuleCall_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__Code__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Code__Group__0__Impl
	rule__Code__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Code__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getCodeAccess().getCodeAction_0()); }
(

)
{ after(grammarAccess.getCodeAccess().getCodeAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Code__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Code__Group__1__Impl
	rule__Code__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Code__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getCodeAccess().getCodeAssignment_1()); }
(rule__Code__CodeAssignment_1)
{ after(grammarAccess.getCodeAccess().getCodeAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Code__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Code__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Code__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getCodeAccess().getNEWLINETerminalRuleCall_2()); }
	RULE_NEWLINE
{ after(grammarAccess.getCodeAccess().getNEWLINETerminalRuleCall_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__MyCodeLineExtended__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyCodeLineExtended__Group__0__Impl
	rule__MyCodeLineExtended__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MyCodeLineExtended__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getMyCodeLineExtendedAccess().getWSTerminalRuleCall_0()); }
(	RULE_WS)*
{ after(grammarAccess.getMyCodeLineExtendedAccess().getWSTerminalRuleCall_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__MyCodeLineExtended__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyCodeLineExtended__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MyCodeLineExtended__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getMyCodeLineExtendedAccess().getGroup_1()); }
(rule__MyCodeLineExtended__Group_1__0)?
{ after(grammarAccess.getMyCodeLineExtendedAccess().getGroup_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__MyCodeLineExtended__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyCodeLineExtended__Group_1__0__Impl
	rule__MyCodeLineExtended__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MyCodeLineExtended__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getMyCodeLineExtendedAccess().getMyCodeParserRuleCall_1_0()); }
	ruleMyCode
{ after(grammarAccess.getMyCodeLineExtendedAccess().getMyCodeParserRuleCall_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__MyCodeLineExtended__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyCodeLineExtended__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MyCodeLineExtended__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getMyCodeLineExtendedAccess().getAlternatives_1_1()); }
(rule__MyCodeLineExtended__Alternatives_1_1)*
{ after(grammarAccess.getMyCodeLineExtendedAccess().getAlternatives_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}







rule__Model__UnitsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getUnitsTranslationUnitParserRuleCall_1_0()); }
	ruleTranslationUnit{ after(grammarAccess.getModelAccess().getUnitsTranslationUnitParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TranslationUnit__GroupAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTranslationUnitAccess().getGroupGroupOptParserRuleCall_1_0()); }
	ruleGroupOpt{ after(grammarAccess.getTranslationUnitAccess().getGroupGroupOptParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroupOpt__LinesAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupOptAccess().getLinesPreprocessorDirectivesParserRuleCall_1_0_0()); }
	rulePreprocessorDirectives{ after(grammarAccess.getGroupOptAccess().getLinesPreprocessorDirectivesParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroupOpt__LinesAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupOptAccess().getLinesNewLineLineParserRuleCall_1_1_0()); }
	ruleNewLineLine{ after(grammarAccess.getGroupOptAccess().getLinesNewLineLineParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroupOpt__LinesAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupOptAccess().getLinesCodeParserRuleCall_1_2_0()); }
	ruleCode{ after(grammarAccess.getGroupOptAccess().getLinesCodeParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PreprocessorDirectives__DirectiveAssignment_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveIncludeDirectiveParserRuleCall_4_0_0()); }
	ruleIncludeDirective{ after(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveIncludeDirectiveParserRuleCall_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PreprocessorDirectives__DirectiveAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveDefineDirectiveParserRuleCall_4_1_0()); }
	ruleDefineDirective{ after(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveDefineDirectiveParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PreprocessorDirectives__DirectiveAssignment_4_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveErrorDirectiveParserRuleCall_4_2_0()); }
	ruleErrorDirective{ after(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveErrorDirectiveParserRuleCall_4_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PreprocessorDirectives__DirectiveAssignment_4_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveUnDefineDirectiveParserRuleCall_4_3_0()); }
	ruleUnDefineDirective{ after(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveUnDefineDirectiveParserRuleCall_4_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PreprocessorDirectives__DirectiveAssignment_4_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreprocessorDirectivesAccess().getDirectivePragmaDirectiveParserRuleCall_4_4_0()); }
	rulePragmaDirective{ after(grammarAccess.getPreprocessorDirectivesAccess().getDirectivePragmaDirectiveParserRuleCall_4_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PreprocessorDirectives__DirectiveAssignment_4_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveNullDirectiveParserRuleCall_4_5_0()); }
	ruleNullDirective{ after(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveNullDirectiveParserRuleCall_4_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IncludeDirective__StringAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeDirectiveAccess().getStringMyCodeLineParserRuleCall_3_0()); }
	ruleMyCodeLine{ after(grammarAccess.getIncludeDirectiveAccess().getStringMyCodeLineParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DefineObjectMacro__IdAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefineObjectMacroAccess().getIdIDTerminalRuleCall_3_0()); }
	RULE_ID{ after(grammarAccess.getDefineObjectMacroAccess().getIdIDTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DefineObjectMacro__StringAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefineObjectMacroAccess().getStringMyDefineLineParserRuleCall_4_1_0()); }
	ruleMyDefineLine{ after(grammarAccess.getDefineObjectMacroAccess().getStringMyDefineLineParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DefineFunctionLikeMacro__IdAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefineFunctionLikeMacroAccess().getIdIDTerminalRuleCall_3_0()); }
	RULE_ID{ after(grammarAccess.getDefineFunctionLikeMacroAccess().getIdIDTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DefineFunctionLikeMacro__ListAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefineFunctionLikeMacroAccess().getListIdentifierListParserRuleCall_5_0()); }
	ruleIdentifierList{ after(grammarAccess.getDefineFunctionLikeMacroAccess().getListIdentifierListParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DefineFunctionLikeMacro__StringAssignment_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefineFunctionLikeMacroAccess().getStringMyDefineLineParserRuleCall_8_0()); }
	ruleMyDefineLine{ after(grammarAccess.getDefineFunctionLikeMacroAccess().getStringMyDefineLineParserRuleCall_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__IdAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentifierListAccess().getIdIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getIdentifierListAccess().getIdIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__IdAssignment_2_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentifierListAccess().getIdIDTerminalRuleCall_2_2_0()); }
	RULE_ID{ after(grammarAccess.getIdentifierListAccess().getIdIDTerminalRuleCall_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorDirective__MsgAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getErrorDirectiveAccess().getMsgMyCodeLineParserRuleCall_3_0()); }
	ruleMyCodeLine{ after(grammarAccess.getErrorDirectiveAccess().getMsgMyCodeLineParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnDefineDirective__IdAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnDefineDirectiveAccess().getIdIDTerminalRuleCall_3_0()); }
	RULE_ID{ after(grammarAccess.getUnDefineDirectiveAccess().getIdIDTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Code__CodeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCodeAccess().getCodeMyCodeLineExtendedParserRuleCall_1_0()); }
	ruleMyCodeLineExtended{ after(grammarAccess.getCodeAccess().getCodeMyCodeLineExtendedParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_HASH : '#';

RULE_INCLUDE : 'include';

RULE_DEFINE : 'define';

RULE_ERROR : 'error';

RULE_UNDEF : 'undef';

RULE_PRAGMA : 'pragma';

RULE_LPAREN : '(';

RULE_RPAREN : ')';

RULE_COMMA : ',';

fragment RULE_LINEFEED : '\n';

fragment RULE_CARRIAGERETURN : '\r';

RULE_NEWLINE : (RULE_CARRIAGERETURN|RULE_LINEFEED);

fragment RULE_BACKSLASH : '\\';

fragment RULE_LINEBREAK : RULE_BACKSLASH RULE_NEWLINE;

fragment RULE_SPACE : ' ';

fragment RULE_TAB : '\t';

RULE_WS : (RULE_SPACE|RULE_TAB|RULE_LINEBREAK);

RULE_ID : RULE_ID_NONDIGIT (RULE_ID_NONDIGIT|RULE_DIGIT)*;

fragment RULE_ID_NONDIGIT : (RULE_NONDIGIT_LETTER|RULE_UNIVERSAL_CHARACTER);

fragment RULE_DIGIT : '0'..'9';

fragment RULE_NONDIGIT_LETTER : ('a'..'z'|'A'..'Z'|'_');

fragment RULE_UNIVERSAL_CHARACTER : ('\\u' RULE_HEX_QUAD|'\\U' RULE_HEX_QUAD RULE_HEX_QUAD);

fragment RULE_HEX_QUAD : RULE_HEXADECIMAL_DIGIT RULE_HEXADECIMAL_DIGIT RULE_HEXADECIMAL_DIGIT RULE_HEXADECIMAL_DIGIT;

fragment RULE_HEXADECIMAL_DIGIT : ('0'..'9'|'a'..'f'|'A'..'F');

RULE_SPECIAL : .;


