/*
 * generated by Xtext 2.9.0-SNAPSHOT
 */
grammar InternalCPreprocess;

options {
	superClass=AbstractInternalAntlrParser;
	
	
}

@lexer::header {
package at.jku.weiner.cpreprocess.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package at.jku.weiner.cpreprocess.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import at.jku.weiner.cpreprocess.services.CPreprocessGrammarAccess;

}

@parser::members {

 	private CPreprocessGrammarAccess grammarAccess;
 	
    public InternalCPreprocessParser(TokenStream input, CPreprocessGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected CPreprocessGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		/*no after found*/
     }:

(
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getModelAccess().getModelAction_0(),
            $current);
    }
)


(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getUnitsTranslationUnitParserRuleCall_1_0()); 
	    }
		lv_units_1_0=ruleTranslationUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"units",
        		lv_units_1_0, 
        		"at.jku.weiner.cpreprocess.CPreprocess.TranslationUnit");
	        afterParserOrEnumRuleCall();
	    }

)
)

)


;





// Entry rule entryRuleTranslationUnit
entryRuleTranslationUnit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTranslationUnitRule()); }
	 iv_ruleTranslationUnit=ruleTranslationUnit 
	 { $current=$iv_ruleTranslationUnit.current; } 
	 EOF 
;

// Rule TranslationUnit
ruleTranslationUnit returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		/*no after found*/
     }:

(
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getTranslationUnitAccess().getTranslationUnitAction_0(),
            $current);
    }
)


(
(
(
		{ 
	        newCompositeNode(grammarAccess.getTranslationUnitAccess().getLinesPreprocessorDirectivesParserRuleCall_1_0_0()); 
	    }
		lv_lines_1_0=rulePreprocessorDirectives		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTranslationUnitRule());
	        }
       		add(
       			$current, 
       			"lines",
        		lv_lines_1_0, 
        		"at.jku.weiner.cpreprocess.CPreprocess.PreprocessorDirectives");
	        afterParserOrEnumRuleCall();
	    }

)
)


    |
(
(
		{ 
	        newCompositeNode(grammarAccess.getTranslationUnitAccess().getLinesNewLineLineParserRuleCall_1_1_0()); 
	    }
		lv_lines_2_0=ruleNewLineLine		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTranslationUnitRule());
	        }
       		add(
       			$current, 
       			"lines",
        		lv_lines_2_0, 
        		"at.jku.weiner.cpreprocess.CPreprocess.NewLineLine");
	        afterParserOrEnumRuleCall();
	    }

)
)


    |
(
(
		{ 
	        newCompositeNode(grammarAccess.getTranslationUnitAccess().getLinesCodeParserRuleCall_1_2_0()); 
	    }
		lv_lines_3_0=ruleCode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTranslationUnitRule());
	        }
       		add(
       			$current, 
       			"lines",
        		lv_lines_3_0, 
        		"at.jku.weiner.cpreprocess.CPreprocess.Code");
	        afterParserOrEnumRuleCall();
	    }

)
)

)*

)


;





// Entry rule entryRulePreprocessorDirectives
entryRulePreprocessorDirectives returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPreprocessorDirectivesRule()); }
	 iv_rulePreprocessorDirectives=rulePreprocessorDirectives 
	 { $current=$iv_rulePreprocessorDirectives.current; } 
	 EOF 
;

// Rule PreprocessorDirectives
rulePreprocessorDirectives returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		/*no after found*/
     }:

(
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getPreprocessorDirectivesAccess().getPreprocessorDirectivesAction_0(),
            $current);
    }
)


(
(
(
		{ 
	        newCompositeNode(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveIncludeDirectiveParserRuleCall_1_0_0()); 
	    }
		lv_directive_1_0=ruleIncludeDirective		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPreprocessorDirectivesRule());
	        }
       		set(
       			$current, 
       			"directive",
        		lv_directive_1_0, 
        		"at.jku.weiner.cpreprocess.CPreprocess.IncludeDirective");
	        afterParserOrEnumRuleCall();
	    }

)
)


    |
(
(
		{ 
	        newCompositeNode(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveDefineDirectiveParserRuleCall_1_1_0()); 
	    }
		lv_directive_2_0=ruleDefineDirective		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPreprocessorDirectivesRule());
	        }
       		set(
       			$current, 
       			"directive",
        		lv_directive_2_0, 
        		"at.jku.weiner.cpreprocess.CPreprocess.DefineDirective");
	        afterParserOrEnumRuleCall();
	    }

)
)


    |
(
(
		{ 
	        newCompositeNode(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveUnDefineDirectiveParserRuleCall_1_2_0()); 
	    }
		lv_directive_3_0=ruleUnDefineDirective		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPreprocessorDirectivesRule());
	        }
       		set(
       			$current, 
       			"directive",
        		lv_directive_3_0, 
        		"at.jku.weiner.cpreprocess.CPreprocess.UnDefineDirective");
	        afterParserOrEnumRuleCall();
	    }

)
)


    |
(
(
		{ 
	        newCompositeNode(grammarAccess.getPreprocessorDirectivesAccess().getDirectiveErrorDirectiveParserRuleCall_1_3_0()); 
	    }
		lv_directive_4_0=ruleErrorDirective		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPreprocessorDirectivesRule());
	        }
       		set(
       			$current, 
       			"directive",
        		lv_directive_4_0, 
        		"at.jku.weiner.cpreprocess.CPreprocess.ErrorDirective");
	        afterParserOrEnumRuleCall();
	    }

)
)


    |
(
(
		{ 
	        newCompositeNode(grammarAccess.getPreprocessorDirectivesAccess().getDirectivePragmaDirectiveParserRuleCall_1_4_0()); 
	    }
		lv_directive_5_0=rulePragmaDirective		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPreprocessorDirectivesRule());
	        }
       		set(
       			$current, 
       			"directive",
        		lv_directive_5_0, 
        		"at.jku.weiner.cpreprocess.CPreprocess.PragmaDirective");
	        afterParserOrEnumRuleCall();
	    }

)
)

)


this_NEWLINE_6=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_6, grammarAccess.getPreprocessorDirectivesAccess().getNEWLINETerminalRuleCall_2()); 
    }


)


;





// Entry rule entryRuleIncludeDirective
entryRuleIncludeDirective returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIncludeDirectiveRule()); }
	 iv_ruleIncludeDirective=ruleIncludeDirective 
	 { $current=$iv_ruleIncludeDirective.current; } 
	 EOF 
;

// Rule IncludeDirective
ruleIncludeDirective returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		/*no after found*/
     }:

(
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getIncludeDirectiveAccess().getIncludeDirectiveAction_0(),
            $current);
    }
)


this_INCLUDE_1=RULE_INCLUDE
    { 
    newLeafNode(this_INCLUDE_1, grammarAccess.getIncludeDirectiveAccess().getINCLUDETerminalRuleCall_1()); 
    }



(
(
		{ 
	        newCompositeNode(grammarAccess.getIncludeDirectiveAccess().getStringMyCodeLineParserRuleCall_2_0()); 
	    }
		lv_string_2_0=ruleMyCodeLine		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIncludeDirectiveRule());
	        }
       		set(
       			$current, 
       			"string",
        		lv_string_2_0, 
        		"at.jku.weiner.cpreprocess.CPreprocess.MyCodeLine");
	        afterParserOrEnumRuleCall();
	    }

)
)

)


;





// Entry rule entryRuleDefineDirective
entryRuleDefineDirective returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefineDirectiveRule()); }
	 iv_ruleDefineDirective=ruleDefineDirective 
	 { $current=$iv_ruleDefineDirective.current; } 
	 EOF 
;

// Rule DefineDirective
ruleDefineDirective returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		/*no after found*/
     }:

(
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getDefineDirectiveAccess().getDefineDirectiveAction_0(),
            $current);
    }
)


this_DEFINE_1=RULE_DEFINE
    { 
    newLeafNode(this_DEFINE_1, grammarAccess.getDefineDirectiveAccess().getDEFINETerminalRuleCall_1()); 
    }



(
(
		lv_id_2_0=RULE_ID
		{
			newLeafNode(lv_id_2_0, grammarAccess.getDefineDirectiveAccess().getIdIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefineDirectiveRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_2_0, 
        		"at.jku.weiner.cpreprocess.CPreprocess.ID");
	    }

)
)


(
(
		{ 
	        newCompositeNode(grammarAccess.getDefineDirectiveAccess().getStringMyCodeLineParserRuleCall_3_0()); 
	    }
		lv_string_3_0=ruleMyCodeLine		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefineDirectiveRule());
	        }
       		set(
       			$current, 
       			"string",
        		lv_string_3_0, 
        		"at.jku.weiner.cpreprocess.CPreprocess.MyCodeLine");
	        afterParserOrEnumRuleCall();
	    }

)
)

)


;





// Entry rule entryRuleUnDefineDirective
entryRuleUnDefineDirective returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnDefineDirectiveRule()); }
	 iv_ruleUnDefineDirective=ruleUnDefineDirective 
	 { $current=$iv_ruleUnDefineDirective.current; } 
	 EOF 
;

// Rule UnDefineDirective
ruleUnDefineDirective returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		/*no after found*/
     }:

(
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnDefineDirectiveAccess().getUnDefineDirectiveAction_0(),
            $current);
    }
)


this_UNDEF_1=RULE_UNDEF
    { 
    newLeafNode(this_UNDEF_1, grammarAccess.getUnDefineDirectiveAccess().getUNDEFTerminalRuleCall_1()); 
    }



(
(
		lv_id_2_0=RULE_ID
		{
			newLeafNode(lv_id_2_0, grammarAccess.getUnDefineDirectiveAccess().getIdIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnDefineDirectiveRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_2_0, 
        		"at.jku.weiner.cpreprocess.CPreprocess.ID");
	    }

)
)

)


;





// Entry rule entryRuleErrorDirective
entryRuleErrorDirective returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getErrorDirectiveRule()); }
	 iv_ruleErrorDirective=ruleErrorDirective 
	 { $current=$iv_ruleErrorDirective.current; } 
	 EOF 
;

// Rule ErrorDirective
ruleErrorDirective returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		/*no after found*/
     }:

(
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getErrorDirectiveAccess().getErrorDirectiveAction_0(),
            $current);
    }
)


this_ERROR_1=RULE_ERROR
    { 
    newLeafNode(this_ERROR_1, grammarAccess.getErrorDirectiveAccess().getERRORTerminalRuleCall_1()); 
    }



(
(
		lv_msg_2_0=RULE_MYCODE
		{
			newLeafNode(lv_msg_2_0, grammarAccess.getErrorDirectiveAccess().getMsgMYCODETerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getErrorDirectiveRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"msg",
        		lv_msg_2_0, 
        		"at.jku.weiner.cpreprocess.CPreprocess.MYCODE");
	    }

)
)

)


;





// Entry rule entryRulePragmaDirective
entryRulePragmaDirective returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPragmaDirectiveRule()); }
	 iv_rulePragmaDirective=rulePragmaDirective 
	 { $current=$iv_rulePragmaDirective.current; } 
	 EOF 
;

// Rule PragmaDirective
rulePragmaDirective returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		/*no after found*/
     }:

(
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getPragmaDirectiveAccess().getPragmaDirectiveAction_0(),
            $current);
    }
)


this_PRAGMA_1=RULE_PRAGMA
    { 
    newLeafNode(this_PRAGMA_1, grammarAccess.getPragmaDirectiveAccess().getPRAGMATerminalRuleCall_1()); 
    }


)


;





// Entry rule entryRuleNewLineLine
entryRuleNewLineLine returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNewLineLineRule()); }
	 iv_ruleNewLineLine=ruleNewLineLine 
	 { $current=$iv_ruleNewLineLine.current; } 
	 EOF 
;

// Rule NewLineLine
ruleNewLineLine returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		/*no after found*/
     }:

(
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getNewLineLineAccess().getNewLineLineAction_0(),
            $current);
    }
)


this_NEWLINE_1=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_1, grammarAccess.getNewLineLineAccess().getNEWLINETerminalRuleCall_1()); 
    }


)


;





// Entry rule entryRuleCode
entryRuleCode returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCodeRule()); }
	 iv_ruleCode=ruleCode 
	 { $current=$iv_ruleCode.current; } 
	 EOF 
;

// Rule Code
ruleCode returns [EObject current=null] 
    @init { enterRule();
   		/*no init found*/
    }
    @after { leaveRule();
    		/*no after found*/
     }:

(
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getCodeAccess().getCodeAction_0(),
            $current);
    }
)


(
(
		lv_code_1_0=RULE_MYCODE
		{
			newLeafNode(lv_code_1_0, grammarAccess.getCodeAccess().getCodeMYCODETerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCodeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"code",
        		lv_code_1_0, 
        		"at.jku.weiner.cpreprocess.CPreprocess.MYCODE");
	    }

)
)


this_NEWLINE_2=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_2, grammarAccess.getCodeAccess().getNEWLINETerminalRuleCall_2()); 
    }


)


;





// Entry rule entryRuleMyCodeLine
entryRuleMyCodeLine returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMyCodeLineRule()); } 
	 iv_ruleMyCodeLine=ruleMyCodeLine 
	 { $current=$iv_ruleMyCodeLine.current.getText(); }  
	 EOF 
;

// Rule MyCodeLine
ruleMyCodeLine returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_MYCODE_0=RULE_MYCODE    {
		$current.merge(this_MYCODE_0);
    }

    { 
    newLeafNode(this_MYCODE_0, grammarAccess.getMyCodeLineAccess().getMYCODETerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getMyCodeLineAccess().getIDTerminalRuleCall_1()); 
    }
)+
    ;





fragment RULE_LINEFEED : '\n';

fragment RULE_CARRIAGERETURN : '\r';

RULE_NEWLINE : (RULE_CARRIAGERETURN|RULE_LINEFEED) {at.jku.weiner.cpreprocess.utils.PreLine.setNewLine();};

fragment RULE_BACKSLASH : '\\';

fragment RULE_LINEBREAK : RULE_BACKSLASH RULE_NEWLINE;

fragment RULE_SPACE : ' ';

fragment RULE_TAB : '\t';

fragment RULE_WS : (RULE_SPACE|RULE_TAB|RULE_LINEBREAK);

fragment RULE_HASH : '#';

RULE_DEFINE : RULE_WS* RULE_HASH RULE_WS* 'define' RULE_WS+ {at.jku.weiner.cpreprocess.utils.PreLine.setPreLine(true);};

RULE_UNDEF : RULE_WS* RULE_HASH RULE_WS* 'undef' RULE_WS+ {at.jku.weiner.cpreprocess.utils.PreLine.setPreLine(true);};

RULE_INCLUDE : RULE_WS* RULE_HASH RULE_WS* 'include' RULE_WS+;

RULE_ERROR : RULE_WS* RULE_HASH RULE_WS* 'error' RULE_WS+;

RULE_PRAGMA : RULE_WS* RULE_HASH RULE_WS* 'pragma' RULE_WS+ {at.jku.weiner.cpreprocess.utils.PreLine.setPreLine(true);};

RULE_ID : RULE_IDENTIFIER {at.jku.weiner.cpreprocess.utils.PreLine.setPreLine(false);};

fragment RULE_IDENTIFIER : RULE_LETTER (RULE_LETTER|'0'..'9')*;

fragment RULE_LETTER : ('$'|'A'..'Z'|'a'..'z'|'_');

RULE_MYCODE : {at.jku.weiner.cpreprocess.utils.PreLine.checkIfIsCode(input)}?=> ~((RULE_HASH|RULE_CARRIAGERETURN|RULE_LINEFEED)) ~((RULE_CARRIAGERETURN|RULE_LINEFEED))*;


