/*
 * generated by Xtext 2.9.0-SNAPSHOT
 */
package at.jku.weiner.cpreprocess.serializer;

import at.jku.weiner.cpreprocess.cPreprocess.CPreprocessPackage;
import at.jku.weiner.cpreprocess.cPreprocess.Code;
import at.jku.weiner.cpreprocess.cPreprocess.DefineDirective;
import at.jku.weiner.cpreprocess.cPreprocess.ErrorDirective;
import at.jku.weiner.cpreprocess.cPreprocess.IncludeDirective;
import at.jku.weiner.cpreprocess.cPreprocess.Model;
import at.jku.weiner.cpreprocess.cPreprocess.NewLineLine;
import at.jku.weiner.cpreprocess.cPreprocess.PragmaDirective;
import at.jku.weiner.cpreprocess.cPreprocess.PreprocessorDirectives;
import at.jku.weiner.cpreprocess.cPreprocess.TranslationUnit;
import at.jku.weiner.cpreprocess.cPreprocess.UnDefineDirective;
import at.jku.weiner.cpreprocess.services.CPreprocessGrammarAccess;
import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class CPreprocessSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private CPreprocessGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == CPreprocessPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case CPreprocessPackage.CODE:
				sequence_Code(context, (Code) semanticObject); 
				return; 
			case CPreprocessPackage.DEFINE_DIRECTIVE:
				sequence_DefineDirective(context, (DefineDirective) semanticObject); 
				return; 
			case CPreprocessPackage.ERROR_DIRECTIVE:
				sequence_ErrorDirective(context, (ErrorDirective) semanticObject); 
				return; 
			case CPreprocessPackage.INCLUDE_DIRECTIVE:
				sequence_IncludeDirective(context, (IncludeDirective) semanticObject); 
				return; 
			case CPreprocessPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case CPreprocessPackage.NEW_LINE_LINE:
				sequence_NewLineLine(context, (NewLineLine) semanticObject); 
				return; 
			case CPreprocessPackage.PRAGMA_DIRECTIVE:
				sequence_PragmaDirective(context, (PragmaDirective) semanticObject); 
				return; 
			case CPreprocessPackage.PREPROCESSOR_DIRECTIVES:
				sequence_PreprocessorDirectives(context, (PreprocessorDirectives) semanticObject); 
				return; 
			case CPreprocessPackage.TRANSLATION_UNIT:
				sequence_TranslationUnit(context, (TranslationUnit) semanticObject); 
				return; 
			case CPreprocessPackage.UN_DEFINE_DIRECTIVE:
				sequence_UnDefineDirective(context, (UnDefineDirective) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     code=MYCODE
	 */
	protected void sequence_Code(EObject context, Code semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, CPreprocessPackage.Literals.CODE__CODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CPreprocessPackage.Literals.CODE__CODE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getCodeAccess().getCodeMYCODETerminalRuleCall_1_0(), semanticObject.getCode());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     {DefineDirective}
	 */
	protected void sequence_DefineDirective(EObject context, DefineDirective semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     msg=MYCODE
	 */
	protected void sequence_ErrorDirective(EObject context, ErrorDirective semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, CPreprocessPackage.Literals.ERROR_DIRECTIVE__MSG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CPreprocessPackage.Literals.ERROR_DIRECTIVE__MSG));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getErrorDirectiveAccess().getMsgMYCODETerminalRuleCall_2_0(), semanticObject.getMsg());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     string=MYCODE
	 */
	protected void sequence_IncludeDirective(EObject context, IncludeDirective semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, CPreprocessPackage.Literals.INCLUDE_DIRECTIVE__STRING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CPreprocessPackage.Literals.INCLUDE_DIRECTIVE__STRING));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getIncludeDirectiveAccess().getStringMYCODETerminalRuleCall_2_0(), semanticObject.getString());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     units+=TranslationUnit
	 */
	protected void sequence_Model(EObject context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     {NewLineLine}
	 */
	protected void sequence_NewLineLine(EObject context, NewLineLine semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     {PragmaDirective}
	 */
	protected void sequence_PragmaDirective(EObject context, PragmaDirective semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (directive=IncludeDirective | directive=DefineDirective | directive=UnDefineDirective | directive=ErrorDirective | directive=PragmaDirective)
	 */
	protected void sequence_PreprocessorDirectives(EObject context, PreprocessorDirectives semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((lines+=PreprocessorDirectives | lines+=NewLineLine | lines+=Code)*)
	 */
	protected void sequence_TranslationUnit(EObject context, TranslationUnit semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     {UnDefineDirective}
	 */
	protected void sequence_UnDefineDirective(EObject context, UnDefineDirective semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
