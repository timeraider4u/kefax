/*
 * generated by Xtext 2.9.0-SNAPSHOT
 */
package at.jku.weiner.cpreprocess.serializer;

import at.jku.weiner.c.common.Common;
import at.jku.weiner.c.common.CommonPackage;
import at.jku.weiner.c.serializer.CommonSemanticSequencer;
import at.jku.weiner.cpreprocess.cPreprocess.CPreprocessPackage;
import at.jku.weiner.cpreprocess.cPreprocess.Code;
import at.jku.weiner.cpreprocess.cPreprocess.ConditionalDirective;
import at.jku.weiner.cpreprocess.cPreprocess.DefineFunctionLikeMacro;
import at.jku.weiner.cpreprocess.cPreprocess.DefineObjectMacro;
import at.jku.weiner.cpreprocess.cPreprocess.ErrorDirective;
import at.jku.weiner.cpreprocess.cPreprocess.GroupOpt;
import at.jku.weiner.cpreprocess.cPreprocess.IdentifierList;
import at.jku.weiner.cpreprocess.cPreprocess.IfDefConditional;
import at.jku.weiner.cpreprocess.cPreprocess.IfNotDefConditional;
import at.jku.weiner.cpreprocess.cPreprocess.IncludeDirective;
import at.jku.weiner.cpreprocess.cPreprocess.Model;
import at.jku.weiner.cpreprocess.cPreprocess.NewLineLine;
import at.jku.weiner.cpreprocess.cPreprocess.NullDirective;
import at.jku.weiner.cpreprocess.cPreprocess.PragmaDirective;
import at.jku.weiner.cpreprocess.cPreprocess.PreprocessorDirectives;
import at.jku.weiner.cpreprocess.cPreprocess.TranslationUnit;
import at.jku.weiner.cpreprocess.cPreprocess.UnDefineDirective;
import at.jku.weiner.cpreprocess.services.CPreprocessGrammarAccess;
import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class CPreprocessSemanticSequencer extends CommonSemanticSequencer {

	@Inject
	private CPreprocessGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == CPreprocessPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case CPreprocessPackage.CODE:
				sequence_Code(context, (Code) semanticObject); 
				return; 
			case CPreprocessPackage.CONDITIONAL_DIRECTIVE:
				sequence_ConditionalDirective(context, (ConditionalDirective) semanticObject); 
				return; 
			case CPreprocessPackage.DEFINE_FUNCTION_LIKE_MACRO:
				sequence_DefineFunctionLikeMacro(context, (DefineFunctionLikeMacro) semanticObject); 
				return; 
			case CPreprocessPackage.DEFINE_OBJECT_MACRO:
				sequence_DefineObjectMacro(context, (DefineObjectMacro) semanticObject); 
				return; 
			case CPreprocessPackage.ERROR_DIRECTIVE:
				sequence_ErrorDirective(context, (ErrorDirective) semanticObject); 
				return; 
			case CPreprocessPackage.GROUP_OPT:
				sequence_GroupOpt(context, (GroupOpt) semanticObject); 
				return; 
			case CPreprocessPackage.IDENTIFIER_LIST:
				sequence_IdentifierList(context, (IdentifierList) semanticObject); 
				return; 
			case CPreprocessPackage.IF_DEF_CONDITIONAL:
				sequence_IfDefConditional(context, (IfDefConditional) semanticObject); 
				return; 
			case CPreprocessPackage.IF_NOT_DEF_CONDITIONAL:
				sequence_IfNotDefConditional(context, (IfNotDefConditional) semanticObject); 
				return; 
			case CPreprocessPackage.INCLUDE_DIRECTIVE:
				sequence_IncludeDirective(context, (IncludeDirective) semanticObject); 
				return; 
			case CPreprocessPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case CPreprocessPackage.NEW_LINE_LINE:
				sequence_NewLineLine(context, (NewLineLine) semanticObject); 
				return; 
			case CPreprocessPackage.NULL_DIRECTIVE:
				sequence_NullDirective(context, (NullDirective) semanticObject); 
				return; 
			case CPreprocessPackage.PRAGMA_DIRECTIVE:
				sequence_PragmaDirective(context, (PragmaDirective) semanticObject); 
				return; 
			case CPreprocessPackage.PREPROCESSOR_DIRECTIVES:
				sequence_PreprocessorDirectives(context, (PreprocessorDirectives) semanticObject); 
				return; 
			case CPreprocessPackage.TRANSLATION_UNIT:
				sequence_TranslationUnit(context, (TranslationUnit) semanticObject); 
				return; 
			case CPreprocessPackage.UN_DEFINE_DIRECTIVE:
				sequence_UnDefineDirective(context, (UnDefineDirective) semanticObject); 
				return; 
			}
		else if(semanticObject.eClass().getEPackage() == CommonPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case CommonPackage.COMMON:
				sequence_Common(context, (Common) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     code=MyCodeLineExtended
	 */
	protected void sequence_Code(EObject context, Code semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, CPreprocessPackage.Literals.CODE__CODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CPreprocessPackage.Literals.CODE__CODE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getCodeAccess().getCodeMyCodeLineExtendedParserRuleCall_1_0(), semanticObject.getCode());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (conditional=IfDefConditional | conditional=IfNotDefConditional)
	 */
	protected void sequence_ConditionalDirective(EObject context, ConditionalDirective semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (id=ID list=IdentifierList? string=MyDefineLine)
	 */
	protected void sequence_DefineFunctionLikeMacro(EObject context, DefineFunctionLikeMacro semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (id=ID string=MyDefineLine?)
	 */
	protected void sequence_DefineObjectMacro(EObject context, DefineObjectMacro semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     msg=MyCodeLine
	 */
	protected void sequence_ErrorDirective(EObject context, ErrorDirective semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, CPreprocessPackage.Literals.ERROR_DIRECTIVE__MSG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CPreprocessPackage.Literals.ERROR_DIRECTIVE__MSG));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getErrorDirectiveAccess().getMsgMyCodeLineParserRuleCall_3_0(), semanticObject.getMsg());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     ((lines+=PreprocessorDirectives | lines+=NewLineLine | lines+=Code)*)
	 */
	protected void sequence_GroupOpt(EObject context, GroupOpt semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (id+=ID id+=ID*)
	 */
	protected void sequence_IdentifierList(EObject context, IdentifierList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (id=ID group=GroupOpt)
	 */
	protected void sequence_IfDefConditional(EObject context, IfDefConditional semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, CPreprocessPackage.Literals.IF_DEF_CONDITIONAL__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CPreprocessPackage.Literals.IF_DEF_CONDITIONAL__ID));
			if(transientValues.isValueTransient(semanticObject, CPreprocessPackage.Literals.IF_DEF_CONDITIONAL__GROUP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CPreprocessPackage.Literals.IF_DEF_CONDITIONAL__GROUP));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getIfDefConditionalAccess().getIdIDTerminalRuleCall_3_0(), semanticObject.getId());
		feeder.accept(grammarAccess.getIfDefConditionalAccess().getGroupGroupOptParserRuleCall_5_0(), semanticObject.getGroup());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (id=ID group=GroupOpt)
	 */
	protected void sequence_IfNotDefConditional(EObject context, IfNotDefConditional semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, CPreprocessPackage.Literals.IF_NOT_DEF_CONDITIONAL__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CPreprocessPackage.Literals.IF_NOT_DEF_CONDITIONAL__ID));
			if(transientValues.isValueTransient(semanticObject, CPreprocessPackage.Literals.IF_NOT_DEF_CONDITIONAL__GROUP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CPreprocessPackage.Literals.IF_NOT_DEF_CONDITIONAL__GROUP));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getIfNotDefConditionalAccess().getIdIDTerminalRuleCall_3_0(), semanticObject.getId());
		feeder.accept(grammarAccess.getIfNotDefConditionalAccess().getGroupGroupOptParserRuleCall_5_0(), semanticObject.getGroup());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     string=MyCodeLine
	 */
	protected void sequence_IncludeDirective(EObject context, IncludeDirective semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, CPreprocessPackage.Literals.INCLUDE_DIRECTIVE__STRING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CPreprocessPackage.Literals.INCLUDE_DIRECTIVE__STRING));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getIncludeDirectiveAccess().getStringMyCodeLineParserRuleCall_3_0(), semanticObject.getString());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     units+=TranslationUnit
	 */
	protected void sequence_Model(EObject context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     {NewLineLine}
	 */
	protected void sequence_NewLineLine(EObject context, NewLineLine semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     {NullDirective}
	 */
	protected void sequence_NullDirective(EObject context, NullDirective semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     {PragmaDirective}
	 */
	protected void sequence_PragmaDirective(EObject context, PragmaDirective semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         directive=IncludeDirective | 
	 *         directive=DefineDirective | 
	 *         directive=ErrorDirective | 
	 *         directive=UnDefineDirective | 
	 *         directive=ConditionalDirective | 
	 *         directive=PragmaDirective | 
	 *         directive=NullDirective
	 *     )
	 */
	protected void sequence_PreprocessorDirectives(EObject context, PreprocessorDirectives semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     group=GroupOpt
	 */
	protected void sequence_TranslationUnit(EObject context, TranslationUnit semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, CPreprocessPackage.Literals.TRANSLATION_UNIT__GROUP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CPreprocessPackage.Literals.TRANSLATION_UNIT__GROUP));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getTranslationUnitAccess().getGroupGroupOptParserRuleCall_1_0(), semanticObject.getGroup());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     id=ID
	 */
	protected void sequence_UnDefineDirective(EObject context, UnDefineDirective semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, CPreprocessPackage.Literals.UN_DEFINE_DIRECTIVE__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CPreprocessPackage.Literals.UN_DEFINE_DIRECTIVE__ID));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getUnDefineDirectiveAccess().getIdIDTerminalRuleCall_3_0(), semanticObject.getId());
		feeder.finish();
	}
}
