/*
 * generated by Xtext 2.9.0-SNAPSHOT
 */
package at.jku.weiner.cpreprocess.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractParserRuleElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CPreprocessGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.cpreprocess.CPreprocess.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cUnitsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUnitsTranslationUnitParserRuleCall_1_0 = (RuleCall)cUnitsAssignment_1.eContents().get(0);
		
		//Model:
		//	{Model} units+=TranslationUnit;
		@Override public ParserRule getRule() { return rule; }
		
		//{Model} units+=TranslationUnit
		public Group getGroup() { return cGroup; }
		
		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }
		
		//units+=TranslationUnit
		public Assignment getUnitsAssignment_1() { return cUnitsAssignment_1; }
		
		//TranslationUnit
		public RuleCall getUnitsTranslationUnitParserRuleCall_1_0() { return cUnitsTranslationUnitParserRuleCall_1_0; }
	}
	public class TranslationUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.cpreprocess.CPreprocess.TranslationUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTranslationUnitAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cLinesAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cLinesPreprocessorDirectivesParserRuleCall_1_0_0 = (RuleCall)cLinesAssignment_1_0.eContents().get(0);
		private final Assignment cLinesAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cLinesNewLineLineParserRuleCall_1_1_0 = (RuleCall)cLinesAssignment_1_1.eContents().get(0);
		private final Assignment cLinesAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cLinesCodeParserRuleCall_1_2_0 = (RuleCall)cLinesAssignment_1_2.eContents().get(0);
		
		//TranslationUnit:
		//	{TranslationUnit} (lines+=PreprocessorDirectives
		//	| lines+=NewLineLine
		//	| lines+=Code)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{TranslationUnit} (lines+=PreprocessorDirectives | lines+=NewLineLine | lines+=Code)*
		public Group getGroup() { return cGroup; }
		
		//{TranslationUnit}
		public Action getTranslationUnitAction_0() { return cTranslationUnitAction_0; }
		
		//(lines+=PreprocessorDirectives | lines+=NewLineLine | lines+=Code)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//lines+=PreprocessorDirectives
		public Assignment getLinesAssignment_1_0() { return cLinesAssignment_1_0; }
		
		//PreprocessorDirectives
		public RuleCall getLinesPreprocessorDirectivesParserRuleCall_1_0_0() { return cLinesPreprocessorDirectivesParserRuleCall_1_0_0; }
		
		//lines+=NewLineLine
		public Assignment getLinesAssignment_1_1() { return cLinesAssignment_1_1; }
		
		//NewLineLine
		public RuleCall getLinesNewLineLineParserRuleCall_1_1_0() { return cLinesNewLineLineParserRuleCall_1_1_0; }
		
		//lines+=Code
		public Assignment getLinesAssignment_1_2() { return cLinesAssignment_1_2; }
		
		//Code
		public RuleCall getLinesCodeParserRuleCall_1_2_0() { return cLinesCodeParserRuleCall_1_2_0; }
	}
	public class PreprocessorDirectivesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.cpreprocess.CPreprocess.PreprocessorDirectives");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPreprocessorDirectivesAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cDirectiveAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cDirectiveIncludeDirectiveParserRuleCall_1_0_0 = (RuleCall)cDirectiveAssignment_1_0.eContents().get(0);
		private final Assignment cDirectiveAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cDirectiveDefineDirectiveParserRuleCall_1_1_0 = (RuleCall)cDirectiveAssignment_1_1.eContents().get(0);
		private final Assignment cDirectiveAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cDirectiveUnDefineDirectiveParserRuleCall_1_2_0 = (RuleCall)cDirectiveAssignment_1_2.eContents().get(0);
		private final Assignment cDirectiveAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cDirectiveErrorDirectiveParserRuleCall_1_3_0 = (RuleCall)cDirectiveAssignment_1_3.eContents().get(0);
		private final Assignment cDirectiveAssignment_1_4 = (Assignment)cAlternatives_1.eContents().get(4);
		private final RuleCall cDirectivePragmaDirectiveParserRuleCall_1_4_0 = (RuleCall)cDirectiveAssignment_1_4.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//PreprocessorDirectives SourceCodeLine:
		//	{PreprocessorDirectives} (directive=IncludeDirective
		//	| directive=DefineDirective
		//	| directive=UnDefineDirective
		//	| directive=ErrorDirective
		//	| directive=PragmaDirective) NEWLINE
		@Override public ParserRule getRule() { return rule; }
		
		//{PreprocessorDirectives} (directive=IncludeDirective | directive=DefineDirective | directive=UnDefineDirective |
		//directive=ErrorDirective | directive=PragmaDirective) NEWLINE
		public Group getGroup() { return cGroup; }
		
		//{PreprocessorDirectives}
		public Action getPreprocessorDirectivesAction_0() { return cPreprocessorDirectivesAction_0; }
		
		//(directive=IncludeDirective | directive=DefineDirective | directive=UnDefineDirective | directive=ErrorDirective |
		//directive=PragmaDirective)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//directive=IncludeDirective
		public Assignment getDirectiveAssignment_1_0() { return cDirectiveAssignment_1_0; }
		
		//IncludeDirective
		public RuleCall getDirectiveIncludeDirectiveParserRuleCall_1_0_0() { return cDirectiveIncludeDirectiveParserRuleCall_1_0_0; }
		
		//directive=DefineDirective
		public Assignment getDirectiveAssignment_1_1() { return cDirectiveAssignment_1_1; }
		
		//DefineDirective
		public RuleCall getDirectiveDefineDirectiveParserRuleCall_1_1_0() { return cDirectiveDefineDirectiveParserRuleCall_1_1_0; }
		
		//directive=UnDefineDirective
		public Assignment getDirectiveAssignment_1_2() { return cDirectiveAssignment_1_2; }
		
		//UnDefineDirective
		public RuleCall getDirectiveUnDefineDirectiveParserRuleCall_1_2_0() { return cDirectiveUnDefineDirectiveParserRuleCall_1_2_0; }
		
		//directive=ErrorDirective
		public Assignment getDirectiveAssignment_1_3() { return cDirectiveAssignment_1_3; }
		
		//ErrorDirective
		public RuleCall getDirectiveErrorDirectiveParserRuleCall_1_3_0() { return cDirectiveErrorDirectiveParserRuleCall_1_3_0; }
		
		//directive=PragmaDirective
		public Assignment getDirectiveAssignment_1_4() { return cDirectiveAssignment_1_4; }
		
		//PragmaDirective
		public RuleCall getDirectivePragmaDirectiveParserRuleCall_1_4_0() { return cDirectivePragmaDirectiveParserRuleCall_1_4_0; }
		
		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_2() { return cNEWLINETerminalRuleCall_2; }
	}
	public class IncludeDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.cpreprocess.CPreprocess.IncludeDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIncludeDirectiveAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cINCLUDETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cStringAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStringMyCodeLineParserRuleCall_2_0 = (RuleCall)cStringAssignment_2.eContents().get(0);
		
		//IncludeDirective:
		//	{IncludeDirective} INCLUDE string=MyCodeLine;
		@Override public ParserRule getRule() { return rule; }
		
		//{IncludeDirective} INCLUDE string=MyCodeLine
		public Group getGroup() { return cGroup; }
		
		//{IncludeDirective}
		public Action getIncludeDirectiveAction_0() { return cIncludeDirectiveAction_0; }
		
		//INCLUDE
		public RuleCall getINCLUDETerminalRuleCall_1() { return cINCLUDETerminalRuleCall_1; }
		
		//string=MyCodeLine
		public Assignment getStringAssignment_2() { return cStringAssignment_2; }
		
		//MyCodeLine
		public RuleCall getStringMyCodeLineParserRuleCall_2_0() { return cStringMyCodeLineParserRuleCall_2_0; }
	}
	public class DefineDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.cpreprocess.CPreprocess.DefineDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDefineDirectiveAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cDEFINETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdIDTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Assignment cStringAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStringMyCodeLineParserRuleCall_3_0 = (RuleCall)cStringAssignment_3.eContents().get(0);
		
		//DefineDirective:
		//	{DefineDirective} DEFINE id=ID string=MyCodeLine;
		@Override public ParserRule getRule() { return rule; }
		
		//{DefineDirective} DEFINE id=ID string=MyCodeLine
		public Group getGroup() { return cGroup; }
		
		//{DefineDirective}
		public Action getDefineDirectiveAction_0() { return cDefineDirectiveAction_0; }
		
		//DEFINE
		public RuleCall getDEFINETerminalRuleCall_1() { return cDEFINETerminalRuleCall_1; }
		
		//id=ID
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_2_0() { return cIdIDTerminalRuleCall_2_0; }
		
		//string=MyCodeLine
		public Assignment getStringAssignment_3() { return cStringAssignment_3; }
		
		//MyCodeLine
		public RuleCall getStringMyCodeLineParserRuleCall_3_0() { return cStringMyCodeLineParserRuleCall_3_0; }
	}
	public class UnDefineDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.cpreprocess.CPreprocess.UnDefineDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnDefineDirectiveAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cUNDEFTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//UnDefineDirective:
		//	{UnDefineDirective} UNDEF;
		@Override public ParserRule getRule() { return rule; }
		
		//{UnDefineDirective} UNDEF
		public Group getGroup() { return cGroup; }
		
		//{UnDefineDirective}
		public Action getUnDefineDirectiveAction_0() { return cUnDefineDirectiveAction_0; }
		
		//UNDEF
		public RuleCall getUNDEFTerminalRuleCall_1() { return cUNDEFTerminalRuleCall_1; }
	}
	public class ErrorDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.cpreprocess.CPreprocess.ErrorDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cErrorDirectiveAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cERRORTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cMsgAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMsgMYCODETerminalRuleCall_2_0 = (RuleCall)cMsgAssignment_2.eContents().get(0);
		
		//ErrorDirective:
		//	{ErrorDirective} ERROR msg=MYCODE;
		@Override public ParserRule getRule() { return rule; }
		
		//{ErrorDirective} ERROR msg=MYCODE
		public Group getGroup() { return cGroup; }
		
		//{ErrorDirective}
		public Action getErrorDirectiveAction_0() { return cErrorDirectiveAction_0; }
		
		//ERROR
		public RuleCall getERRORTerminalRuleCall_1() { return cERRORTerminalRuleCall_1; }
		
		//msg=MYCODE
		public Assignment getMsgAssignment_2() { return cMsgAssignment_2; }
		
		//MYCODE
		public RuleCall getMsgMYCODETerminalRuleCall_2_0() { return cMsgMYCODETerminalRuleCall_2_0; }
	}
	public class PragmaDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.cpreprocess.CPreprocess.PragmaDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPragmaDirectiveAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cPRAGMATerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//PragmaDirective:
		//	{PragmaDirective} PRAGMA;
		@Override public ParserRule getRule() { return rule; }
		
		//{PragmaDirective} PRAGMA
		public Group getGroup() { return cGroup; }
		
		//{PragmaDirective}
		public Action getPragmaDirectiveAction_0() { return cPragmaDirectiveAction_0; }
		
		//PRAGMA
		public RuleCall getPRAGMATerminalRuleCall_1() { return cPRAGMATerminalRuleCall_1; }
	}
	public class NewLineLineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.cpreprocess.CPreprocess.NewLineLine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNewLineLineAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//NewLineLine SourceCodeLine:
		//	{NewLineLine} NEWLINE
		@Override public ParserRule getRule() { return rule; }
		
		//{NewLineLine} NEWLINE
		public Group getGroup() { return cGroup; }
		
		//{NewLineLine}
		public Action getNewLineLineAction_0() { return cNewLineLineAction_0; }
		
		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_1() { return cNEWLINETerminalRuleCall_1; }
	}
	public class CodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.cpreprocess.CPreprocess.Code");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCodeMYCODETerminalRuleCall_1_0 = (RuleCall)cCodeAssignment_1.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Code SourceCodeLine:
		//	{Code} code=MYCODE
		//	NEWLINE
		@Override public ParserRule getRule() { return rule; }
		
		//{Code} code=MYCODE NEWLINE
		public Group getGroup() { return cGroup; }
		
		//{Code}
		public Action getCodeAction_0() { return cCodeAction_0; }
		
		//code=MYCODE
		public Assignment getCodeAssignment_1() { return cCodeAssignment_1; }
		
		//MYCODE
		public RuleCall getCodeMYCODETerminalRuleCall_1_0() { return cCodeMYCODETerminalRuleCall_1_0; }
		
		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_2() { return cNEWLINETerminalRuleCall_2; }
	}
	public class MyCodeLineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.cpreprocess.CPreprocess.MyCodeLine");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMYCODETerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MyCodeLine:
		//	MYCODE | ID+;
		@Override public ParserRule getRule() { return rule; }
		
		//MYCODE | ID+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MYCODE
		public RuleCall getMYCODETerminalRuleCall_0() { return cMYCODETerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	
	private final ModelElements pModel;
	private final TranslationUnitElements pTranslationUnit;
	private final PreprocessorDirectivesElements pPreprocessorDirectives;
	private final IncludeDirectiveElements pIncludeDirective;
	private final DefineDirectiveElements pDefineDirective;
	private final UnDefineDirectiveElements pUnDefineDirective;
	private final ErrorDirectiveElements pErrorDirective;
	private final PragmaDirectiveElements pPragmaDirective;
	private final NewLineLineElements pNewLineLine;
	private final CodeElements pCode;
	private final MyCodeLineElements pMyCodeLine;
	private final TerminalRule tLINEFEED;
	private final TerminalRule tCARRIAGERETURN;
	private final TerminalRule tNEWLINE;
	private final TerminalRule tBACKSLASH;
	private final TerminalRule tLINEBREAK;
	private final TerminalRule tWS;
	private final TerminalRule tHASH;
	private final TerminalRule tDEFINE;
	private final TerminalRule tUNDEF;
	private final TerminalRule tINCLUDE;
	private final TerminalRule tERROR;
	private final TerminalRule tPRAGMA;
	private final TerminalRule tID;
	private final TerminalRule tIDENTIFIER;
	private final TerminalRule tLETTER;
	private final TerminalRule tNO_CODE_START;
	private final TerminalRule tMYCODE;
	
	private final Grammar grammar;

	@Inject
	public CPreprocessGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pModel = new ModelElements();
		this.pTranslationUnit = new TranslationUnitElements();
		this.pPreprocessorDirectives = new PreprocessorDirectivesElements();
		this.pIncludeDirective = new IncludeDirectiveElements();
		this.pDefineDirective = new DefineDirectiveElements();
		this.pUnDefineDirective = new UnDefineDirectiveElements();
		this.pErrorDirective = new ErrorDirectiveElements();
		this.pPragmaDirective = new PragmaDirectiveElements();
		this.pNewLineLine = new NewLineLineElements();
		this.pCode = new CodeElements();
		this.pMyCodeLine = new MyCodeLineElements();
		this.tLINEFEED = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.cpreprocess.CPreprocess.LINEFEED");
		this.tCARRIAGERETURN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.cpreprocess.CPreprocess.CARRIAGERETURN");
		this.tNEWLINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.cpreprocess.CPreprocess.NEWLINE");
		this.tBACKSLASH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.cpreprocess.CPreprocess.BACKSLASH");
		this.tLINEBREAK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.cpreprocess.CPreprocess.LINEBREAK");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.cpreprocess.CPreprocess.WS");
		this.tHASH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.cpreprocess.CPreprocess.HASH");
		this.tDEFINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.cpreprocess.CPreprocess.DEFINE");
		this.tUNDEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.cpreprocess.CPreprocess.UNDEF");
		this.tINCLUDE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.cpreprocess.CPreprocess.INCLUDE");
		this.tERROR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.cpreprocess.CPreprocess.ERROR");
		this.tPRAGMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.cpreprocess.CPreprocess.PRAGMA");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.cpreprocess.CPreprocess.ID");
		this.tIDENTIFIER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.cpreprocess.CPreprocess.IDENTIFIER");
		this.tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.cpreprocess.CPreprocess.LETTER");
		this.tNO_CODE_START = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.cpreprocess.CPreprocess.NO_CODE_START");
		this.tMYCODE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.cpreprocess.CPreprocess.MYCODE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("at.jku.weiner.cpreprocess.CPreprocess".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//	{Model} units+=TranslationUnit;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//TranslationUnit:
	//	{TranslationUnit} (lines+=PreprocessorDirectives
	//	| lines+=NewLineLine
	//	| lines+=Code)*;
	public TranslationUnitElements getTranslationUnitAccess() {
		return pTranslationUnit;
	}
	
	public ParserRule getTranslationUnitRule() {
		return getTranslationUnitAccess().getRule();
	}
	
	//PreprocessorDirectives SourceCodeLine:
	//	{PreprocessorDirectives} (directive=IncludeDirective
	//	| directive=DefineDirective
	//	| directive=UnDefineDirective
	//	| directive=ErrorDirective
	//	| directive=PragmaDirective) NEWLINE
	public PreprocessorDirectivesElements getPreprocessorDirectivesAccess() {
		return pPreprocessorDirectives;
	}
	
	public ParserRule getPreprocessorDirectivesRule() {
		return getPreprocessorDirectivesAccess().getRule();
	}
	
	//IncludeDirective:
	//	{IncludeDirective} INCLUDE string=MyCodeLine;
	public IncludeDirectiveElements getIncludeDirectiveAccess() {
		return pIncludeDirective;
	}
	
	public ParserRule getIncludeDirectiveRule() {
		return getIncludeDirectiveAccess().getRule();
	}
	
	//DefineDirective:
	//	{DefineDirective} DEFINE id=ID string=MyCodeLine;
	public DefineDirectiveElements getDefineDirectiveAccess() {
		return pDefineDirective;
	}
	
	public ParserRule getDefineDirectiveRule() {
		return getDefineDirectiveAccess().getRule();
	}
	
	//UnDefineDirective:
	//	{UnDefineDirective} UNDEF;
	public UnDefineDirectiveElements getUnDefineDirectiveAccess() {
		return pUnDefineDirective;
	}
	
	public ParserRule getUnDefineDirectiveRule() {
		return getUnDefineDirectiveAccess().getRule();
	}
	
	//ErrorDirective:
	//	{ErrorDirective} ERROR msg=MYCODE;
	public ErrorDirectiveElements getErrorDirectiveAccess() {
		return pErrorDirective;
	}
	
	public ParserRule getErrorDirectiveRule() {
		return getErrorDirectiveAccess().getRule();
	}
	
	//PragmaDirective:
	//	{PragmaDirective} PRAGMA;
	public PragmaDirectiveElements getPragmaDirectiveAccess() {
		return pPragmaDirective;
	}
	
	public ParserRule getPragmaDirectiveRule() {
		return getPragmaDirectiveAccess().getRule();
	}
	
	//NewLineLine SourceCodeLine:
	//	{NewLineLine} NEWLINE
	public NewLineLineElements getNewLineLineAccess() {
		return pNewLineLine;
	}
	
	public ParserRule getNewLineLineRule() {
		return getNewLineLineAccess().getRule();
	}
	
	//Code SourceCodeLine:
	//	{Code} code=MYCODE
	//	NEWLINE
	public CodeElements getCodeAccess() {
		return pCode;
	}
	
	public ParserRule getCodeRule() {
		return getCodeAccess().getRule();
	}
	
	//MyCodeLine:
	//	MYCODE | ID+;
	public MyCodeLineElements getMyCodeLineAccess() {
		return pMyCodeLine;
	}
	
	public ParserRule getMyCodeLineRule() {
		return getMyCodeLineAccess().getRule();
	}
	
	//terminal fragment LINEFEED:
	//	'\n';
	public TerminalRule getLINEFEEDRule() {
		return tLINEFEED;
	}
	
	//terminal fragment CARRIAGERETURN:
	//	'\r';
	public TerminalRule getCARRIAGERETURNRule() {
		return tCARRIAGERETURN;
	}
	
	//terminal NEWLINE:
	//	CARRIAGERETURN | LINEFEED;
	public TerminalRule getNEWLINERule() {
		return tNEWLINE;
	}
	
	//terminal fragment BACKSLASH:
	//	'\\';
	public TerminalRule getBACKSLASHRule() {
		return tBACKSLASH;
	}
	
	//terminal fragment LINEBREAK:
	//	BACKSLASH NEWLINE+;
	public TerminalRule getLINEBREAKRule() {
		return tLINEBREAK;
	}
	
	//terminal WS:
	//	' ' | '\t' | LINEBREAK;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal fragment HASH:
	//	'#';
	public TerminalRule getHASHRule() {
		return tHASH;
	}
	
	//terminal DEFINE:
	//	HASH WS* 'define' WS+;
	public TerminalRule getDEFINERule() {
		return tDEFINE;
	}
	
	//terminal UNDEF:
	//	HASH WS* 'undef' WS+;
	public TerminalRule getUNDEFRule() {
		return tUNDEF;
	}
	
	//terminal INCLUDE:
	//	HASH WS* 'include' WS+;
	public TerminalRule getINCLUDERule() {
		return tINCLUDE;
	}
	
	//terminal ERROR:
	//	HASH WS* 'error' WS+;
	public TerminalRule getERRORRule() {
		return tERROR;
	}
	
	//terminal PRAGMA:
	//	HASH WS* 'pragma' WS+;
	public TerminalRule getPRAGMARule() {
		return tPRAGMA;
	}
	
	//terminal ID:
	//	IDENTIFIER;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal fragment IDENTIFIER:
	//	LETTER (LETTER | '0'..'9')*;
	public TerminalRule getIDENTIFIERRule() {
		return tIDENTIFIER;
	}
	
	//terminal fragment LETTER:
	//	'$'
	//	| 'A'..'Z'
	//	| 'a'..'z'
	//	| '_';
	public TerminalRule getLETTERRule() {
		return tLETTER;
	}
	
	//terminal fragment NO_CODE_START:
	//	NEWLINE | HASH;
	public TerminalRule getNO_CODE_STARTRule() {
		return tNO_CODE_START;
	}
	
	//terminal MYCODE:
	//	!(HASH | CARRIAGERETURN | LINEFEED) !(CARRIAGERETURN | LINEFEED)*;
	public TerminalRule getMYCODERule() {
		return tMYCODE;
	}
}
