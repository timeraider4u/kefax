/*
 [The "BSD licence"]
 Copyright (c) 2013 Sam Harwell
 Copyright (c) 2015 Harald Weiner
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions
 are met:
 1. Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.
 3. The name of the author may not be used to endorse or promote products
    derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
grammar at.jku.weiner.cpreprocess.CPreprocess 
// with org.eclipse.xtext.common.Terminals
// hidden(LINEBREAK,BLOCK_COMMENT,LINE_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate cPreprocess "http://www.jku.at/weiner/cpreprocess/CPreprocess"

Model:
	{Model}
	(units+=TranslationUnit);
	
TranslationUnit:
	{TranslationUnit}
	group=GroupOpt
;

GroupOpt:
	{GroupOpt}
	(
		lines+=PreprocessorDirectives
		|
		lines+=NewLineLine
		|	
		lines+=Code
	)*
;

PreprocessorDirectives returns SourceCodeLine:
	{PreprocessorDirectives}
	WS* HASH WS*
	(
			directive=IncludeDirective
		|	directive=DefineDirective
		|	directive=ErrorDirective
		|	directive=UnDefineDirective
		|	directive=ConditionalDirective
		|	directive=PragmaDirective
		|	directive=NullDirective
	)
	NEWLINE
;

IncludeDirective:
	{IncludeDirective}
	INCLUDE WS+ string=MyCodeLine
;

DefineDirective:
		DefineObjectMacro
	|	DefineFunctionLikeMacro
;

DefineObjectMacro returns DefineDirective:
	{DefineObjectMacro}
	DEFINE WS+ id=ID
		(WS+ string=MyDefineLine)?
;

DefineFunctionLikeMacro returns DefineDirective:
	{DefineFunctionLikeMacro}
	DEFINE WS+ id=ID 
	LPAREN WS*
		(list=IdentifierList)?
	RPAREN
	WS+
	string=MyDefineLine 
;

IdentifierList:
	{IdentifierList}
	id+=ID (COMMA WS* id+=ID)*
;

ErrorDirective:
	{ErrorDirective}
	ERROR WS+ msg=MyCodeLine
;

UnDefineDirective:
	{UnDefineDirective}
	UNDEF WS+ id=ID
;

ConditionalDirective:
	{ConditionalDirective}
	(conditional=
		(		IfDefConditional
			|	IfNotDefConditional
		)
	)
	HASH ENDIF WS*
;

IfDefConditional:
	{IfDefConditional}
	IFDEF WS+ id=ID NEWLINE
		group=GroupOpt
;

IfNotDefConditional:
	{IfNotDefConditional}
	IFNOTDEF WS+ id=ID NEWLINE
		group=GroupOpt
;

PragmaDirective:
	{PragmaDirective}
	PRAGMA
;

NullDirective:
	{NullDirective}
;

NewLineLine returns SourceCodeLine:
	{NewLineLine}
	NEWLINE
;

Code returns SourceCodeLine:
	{Code}
	code=MyCodeLineExtended
	NEWLINE
;

MyCode returns ecore::EString:
	ID|SPECIAL|INCLUDE|DEFINE|ERROR|PRAGMA|LPAREN|RPAREN
	|COMMA|IFDEF|ENDIF|IFNOTDEF|IF|KW_UNDERSCORE
	|SINGLEQUOTE|DOUBLEQUOTE|DOT|Constant
;

MyDefineLine returns ecore::EString:
	(MyCode|WS|HASH)*
;

MyCodeLine returns ecore::EString:
	(MyCode|WS)+
;

MyCodeLineExtended returns ecore::EString:
	WS* (MyCode (MyCodeLine|HASH)*)?
;

// expressions

Constant returns ecore::EString:
	(
	HEX_LITERAL
	|	OCTAL_LITERAL
	|	DECIMAL_LITERAL
	|	CHAR_LITERAL
	|	STRING_LITERAL
	|	FLOAT_LITERAL
	|	BIN_LITERAL
	)
;


// lexer tokens
terminal KW_UNDERSCORE: '_';
terminal SINGLEQUOTE: '\'';
terminal DOUBLEQUOTE: '"';
terminal DOT: '.';
terminal HASH: '#';
terminal INCLUDE: 'include';
terminal DEFINE: 'define';
terminal ERROR: 'error';
terminal UNDEF: 'undef';
terminal IF: 'if';
terminal IFDEF: 'ifdef';
terminal IFNOTDEF: 'ifndef';
terminal ENDIF: 'endif';
terminal PRAGMA: 'pragma';
terminal LPAREN: '(';
terminal RPAREN: ')';
terminal COMMA: ',';
terminal fragment LINEFEED: '\n';
terminal fragment CARRIAGERETURN: '\r';
terminal NEWLINE: (CARRIAGERETURN | LINEFEED) ;
terminal fragment BACKSLASH: '\\';
terminal fragment LINEBREAK: (BACKSLASH NEWLINE);
terminal fragment SPACE: ' ';
terminal fragment TAB: '\t';
terminal WS: (SPACE | TAB | LINE_COMMENT | BLOCK_COMMENT | LINEBREAK);

/*terminal ID:
	ID_NONDIGIT
		(	ID_NONDIGIT
		|	DIGIT
		)*
;
terminal fragment ID_NONDIGIT:
		NONDIGIT_LETTER
	|	UNIVERSAL_CHARACTER
;
terminal fragment DIGIT: '0' .. '9';
terminal fragment NONDIGIT_LETTER:
		'a' .. 'z'
	|	'A' .. 'Z'
	|	'_'
;
terminal fragment
UNIVERSAL_CHARACTER:
		'\\u' HEX_QUAD
	|	'\\U' HEX_QUAD HEX_QUAD
	;
terminal fragment HEX_QUAD:
	HEXADECIMAL_DIGIT HEXADECIMAL_DIGIT
	HEXADECIMAL_DIGIT HEXADECIMAL_DIGIT
;
terminal fragment 
HEXADECIMAL_DIGIT:
		'0' .. '9'
	|	'a' .. 'f'
	|	'A' .. 'F'
	;

*/
terminal ID: IDENTIFIER;
terminal fragment IDENTIFIER:
	LETTER (LETTER|'0'..'9')*
;

terminal fragment LETTER:
	'$'
	|	'A'..'Z'
	|	'a'..'z'
	|	KW_UNDERSCORE
;

terminal CHAR_LITERAL:
	SINGLEQUOTE ( ESCAPE_SEQUENCE | !(SINGLEQUOTE|BACKSLASH) ) SINGLEQUOTE
;

terminal STRING_LITERAL:
	DOUBLEQUOTE ( ESCAPE_SEQUENCE | !(BACKSLASH|DOUBLEQUOTE) )* DOUBLEQUOTE
;

terminal HEX_LITERAL: '0' ('x'|'X') HEX_DIGIT+ INTEGER_TYPE_SUFFIX? ;

terminal DECIMAL_LITERAL: ('0' | '1'..'9' '0'..'9'*) INTEGER_TYPE_SUFFIX? ;

terminal OCTAL_LITERAL: '0' ('0'..'7')+ INTEGER_TYPE_SUFFIX? ;

terminal BIN_LITERAL: ('0b' | '0B') ('0'..'1')+;

terminal fragment HEX_DIGIT: ('0'..'9'|'a'..'f'|'A'..'F');

terminal fragment INTEGER_TYPE_SUFFIX:
	('u'|'U')? ('l'|'L')
	|	('u'|'U')  ('l'|'L')?
;

terminal FLOAT_LITERAL:
	('0'..'9')+ DOT ('0'..'9')* EXPONENT? FLOAT_TYPE_SUFFIX?
	|	DOT ('0'..'9')+ EXPONENT? FLOAT_TYPE_SUFFIX?
	|	('0'..'9')+ EXPONENT FLOAT_TYPE_SUFFIX?
	|	('0'..'9')+ EXPONENT? FLOAT_TYPE_SUFFIX
;

terminal fragment EXPONENT:
	('e'|'E') ('+'|'-')? ('0'..'9')+
;

terminal fragment FLOAT_TYPE_SUFFIX: ('f'|'F'|'d'|'D') ;

terminal fragment ESCAPE_SEQUENCE:
	BACKSLASH ('b'|'t'|'n'|'f'|'r'|'\"'|SINGLEQUOTE|BACKSLASH)
	|	OCTAL_ESCAPE
;

terminal fragment OCTAL_ESCAPE:
	BACKSLASH ('0'..'3') ('0'..'7') ('0'..'7')
	|	BACKSLASH ('0'..'7') ('0'..'7')
	|	BACKSLASH ('0'..'7')
;


terminal SPECIAL: .;
terminal fragment BLOCK_COMMENT: '/*' -> '*/';
terminal fragment LINE_COMMENT: '//' (!NEWLINE)*;
