module at.jku.weiner.cpreprocess.GenerateCPreprocess

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var projectName = "at.jku.weiner.cpreprocess"
var projectPath = "../${projectName}"

var fileExtensions = "c,h"
var grammarURI = "platform:/resource/${projectName}/src/at/jku/weiner/cpreprocess/CPreprocess.xtext"

var encoding = "UTF-8"
var lineDelimiter = "\n"
var fileHeader = "/*\n * generated by Xtext \${version}\n */"

Workflow {
    bean = StandaloneSetup {
		scanClassPath = true
		projectMapping = { projectName = 'at.jku.weiner.cpreprocess' path = '${projectPath}/../at.jku.weiner.cpreprocess' }
		projectMapping = { projectName = 'at.jku.weiner.cpreprocess.ui' path = '${projectPath}/../at.jku.weiner.cpreprocess.ui' }
		projectMapping = { projectName = 'at.jku.weiner.cpreprocess.tests' path = '${projectPath}/../at.jku.weiner.cpreprocess.tests' }
		projectMapping = { projectName = 'at.jku.weiner.cpreprocess.ui.tests' path = '${projectPath}/../at.jku.weiner.cpreprocess.ui.tests' }
		// The following two lines can be removed, if Xbase is not used.
		registerGeneratedEPackage = "org.eclipse.xtext.xbase.XbasePackage"
		registerGenModelFile = "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel"
	}
	
	component = DirectoryCleaner {
		directory = "${projectPath}/src-gen"
	}
	component = DirectoryCleaner {
		directory = "${projectPath}.ui/src-gen"
	}
	component = DirectoryCleaner {
		directory = "${projectPath}.tests/src-gen/at/jku/weiner/cpreprocess/tests"
	}
	component = DirectoryCleaner {
		directory = "${projectPath}.ui.tests/src-gen"
	}
	
	component = DirectoryCleaner {
		directory = "${projectPath}/model/generated"
	}
	
	component = XtextGenerator auto-inject {
		configuration = {
			project = WizardConfig {
				runtimeRoot = projectPath
				testingSupport = true
			}
			code = auto-inject {
				preferXtendStubs = true
			}
		}
		language = auto-inject {
			uri = grammarURI

			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment2 auto-inject {}
			
	
			// generates Java API for the generated EPackages
			fragment = adapter.FragmentAdapter { 
				fragment = ecore.EMFGeneratorFragment auto-inject {
					javaModelDirectory = "/${projectName}/src-gen"
					updateBuildProperties = true
				}
			}

			fragment = adapter.FragmentAdapter {
				fragment = serializer.SerializerFragment auto-inject {
					generateStub = false
				}
			}

			// a custom ResourceFactory for use with EMF
			fragment = adapter.FragmentAdapter {
				fragment = resourceFactory.ResourceFactoryFragment auto-inject {}
			}

			// The antlr parser generator fragment.
			fragment = adapter.FragmentAdapter {
				//fragment = parser.antlr.XtextAntlrGeneratorFragment auto-inject {
				fragment = org.eclipse.xtext.generator.parser.antlr.ex.rt.AntlrGeneratorFragment auto-inject {
					options = {
						backtrackLexer = true
					}
				}
			}
//			fragment = adapter.FragmentAdapter {
//				fragment = org.eclipse.xtext.generator.parser.antlr.ex.rt.AntlrGeneratorFragment {
//    				options = {
//        				backtrack = false
//        				backtrackLexer = false
//    				}
//				}
//			}

			// Xtend-based API for validation
			fragment = adapter.FragmentAdapter {
				fragment = validation.ValidatorFragment auto-inject {
				//    composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
				}
			}

			// scoping and exporting API
			fragment = adapter.FragmentAdapter {
				fragment = scoping.ImportNamespacesScopingFragment auto-inject {}
			}
			fragment = adapter.FragmentAdapter {
				fragment = exporting.QualifiedNamesFragment auto-inject {}
			}

			// generator API
			fragment = generator.GeneratorFragment2 {}

			// formatter API
			fragment = formatting.Formatter2Fragment2 {}
			
			fragment = junit.Junit4Fragment2 auto-inject {}
			
			fragment = builder.BuilderIntegrationFragment2 auto-inject {}
			// labeling API
			fragment = adapter.FragmentAdapter {
				fragment = labeling.LabelProviderFragment auto-inject {}
			}
			
			// outline API
			fragment = adapter.FragmentAdapter {
				fragment = outline.OutlineTreeProviderFragment auto-inject {}
			}
			fragment = adapter.FragmentAdapter {
				fragment = outline.QuickOutlineFragment auto-inject {}
			}
			
			// quickfix API
			fragment = adapter.FragmentAdapter {
				fragment = quickfix.QuickfixProviderFragment auto-inject {}
			}
			
			// content assist API
			fragment = adapter.FragmentAdapter {
				fragment = contentAssist.ContentAssistFragment auto-inject {}
			}
			
			// provides a preference page for template proposals
			fragment = adapter.FragmentAdapter {
				fragment = templates.CodetemplatesGeneratorFragment auto-inject {}
			}
			
			// rename refactoring
			fragment = adapter.FragmentAdapter {
				fragment = refactoring.RefactorElementNameFragment auto-inject {}
			}
			
			// provides a compare view
			fragment = adapter.FragmentAdapter {
				fragment = compare.CompareFragment auto-inject {}
			}
			// generates a more lightweight Antlr parser and lexer tailored for content assist
			fragment = adapter.FragmentAdapter {
				fragment = parser.antlr.XtextAntlrUiGeneratorFragment auto-inject {
				}
			}
			// provides the necessary bindings for java types integration
			fragment = adapter.FragmentAdapter {
				fragment = types.TypesGeneratorFragment auto-inject {}
			}

			// generates the required bindings only if the grammar inherits from Xbase
			fragment = xbase.XbaseGeneratorFragment2 auto-inject {}

			// generates the required bindings only if the grammar inherits from Xtype
			fragment = xbase.XtypeGeneratorFragment2 auto-inject {}

			
		}
		
	}
	
	component = DirectoryCleaner {
		directory = "${projectPath}.tests/src/at/jku/weiner/cpreprocess/tests"
		exclude = "xtexttests"
		exclude = ".keep"
		exclude = "LexerAndParserTest.java"
	}
}
