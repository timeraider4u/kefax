/**
 * generated by Xtext 2.9.0-SNAPSHOT
 */
package at.jku.weiner.cpreprocess.formatting2;

import at.jku.weiner.cpreprocess.cPreprocess.IncludeDirective;
import at.jku.weiner.cpreprocess.cPreprocess.Model;
import at.jku.weiner.cpreprocess.cPreprocess.PreprocessorDirectives;
import at.jku.weiner.cpreprocess.cPreprocess.SourceCodeLine;
import at.jku.weiner.cpreprocess.cPreprocess.TranslationUnit;
import at.jku.weiner.cpreprocess.services.CPreprocessGrammarAccess;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class CPreprocessFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private CPreprocessGrammarAccess _cPreprocessGrammarAccess;
  
  protected void _format(final Model model, @Extension final IFormattableDocument document) {
    EList<TranslationUnit> _units = model.getUnits();
    for (final TranslationUnit units : _units) {
      this.format(units, document);
    }
  }
  
  protected void _format(final TranslationUnit translationUnit, @Extension final IFormattableDocument document) {
    EList<SourceCodeLine> _lines = translationUnit.getLines();
    for (final SourceCodeLine lines : _lines) {
      this.format(lines, document);
    }
  }
  
  protected void _format(final PreprocessorDirectives preprocessorDirectives, @Extension final IFormattableDocument document) {
    IncludeDirective _directive = preprocessorDirectives.getDirective();
    this.format(_directive, document);
  }
  
  public void format(final Object preprocessorDirectives, final IFormattableDocument document) {
    if (preprocessorDirectives instanceof XtextResource) {
      _format((XtextResource)preprocessorDirectives, document);
      return;
    } else if (preprocessorDirectives instanceof PreprocessorDirectives) {
      _format((PreprocessorDirectives)preprocessorDirectives, document);
      return;
    } else if (preprocessorDirectives instanceof Model) {
      _format((Model)preprocessorDirectives, document);
      return;
    } else if (preprocessorDirectives instanceof TranslationUnit) {
      _format((TranslationUnit)preprocessorDirectives, document);
      return;
    } else if (preprocessorDirectives == null) {
      _format((Void)null, document);
      return;
    } else if (preprocessorDirectives != null) {
      _format(preprocessorDirectives, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(preprocessorDirectives, document).toString());
    }
  }
}
