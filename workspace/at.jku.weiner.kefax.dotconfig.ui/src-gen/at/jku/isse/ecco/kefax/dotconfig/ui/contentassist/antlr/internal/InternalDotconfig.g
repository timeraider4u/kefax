/*
 * generated by Xtext
 */
grammar InternalDotconfig;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package at.jku.isse.ecco.kefax.dotconfig.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package at.jku.isse.ecco.kefax.dotconfig.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import at.jku.isse.ecco.kefax.dotconfig.services.DotconfigGrammarAccess;

}

@parser::members {
 
 	private DotconfigGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(DotconfigGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleDotConfigModel
entryRuleDotConfigModel 
:
{ before(grammarAccess.getDotConfigModelRule()); }
	 ruleDotConfigModel
{ after(grammarAccess.getDotConfigModelRule()); } 
	 EOF 
;

// Rule DotConfigModel
ruleDotConfigModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDotConfigModelAccess().getGroup()); }
(rule__DotConfigModel__Group__0)
{ after(grammarAccess.getDotConfigModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConfig
entryRuleConfig 
:
{ before(grammarAccess.getConfigRule()); }
	 ruleConfig
{ after(grammarAccess.getConfigRule()); } 
	 EOF 
;

// Rule Config
ruleConfig
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConfigAccess().getAlternatives()); }
(rule__Config__Alternatives)
{ after(grammarAccess.getConfigAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulevalue
entryRulevalue 
:
{ before(grammarAccess.getValueRule()); }
	 rulevalue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule value
rulevalue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValueAccess().getAlternatives()); }
(rule__Value__Alternatives)
{ after(grammarAccess.getValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEol
entryRuleEol 
:
{ before(grammarAccess.getEolRule()); }
	 ruleEol
{ after(grammarAccess.getEolRule()); } 
	 EOF 
;

// Rule Eol
ruleEol
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getEolAccess().getNLITerminalRuleCall()); }
(	RULE_NLI)
{ after(grammarAccess.getEolAccess().getNLITerminalRuleCall()); }
)
(
{ before(grammarAccess.getEolAccess().getNLITerminalRuleCall()); }
(	RULE_NLI)*
{ after(grammarAccess.getEolAccess().getNLITerminalRuleCall()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Config__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigAccess().getGroup_0()); }
(rule__Config__Group_0__0)
{ after(grammarAccess.getConfigAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getConfigAccess().getGroup_1()); }
(rule__Config__Group_1__0)
{ after(grammarAccess.getConfigAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getConfigAccess().getGroup_2()); }
(rule__Config__Group_2__0)
{ after(grammarAccess.getConfigAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueAccess().getS_HEXTerminalRuleCall_0()); }
	RULE_S_HEX
{ after(grammarAccess.getValueAccess().getS_HEXTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getValueAccess().getS_INTTerminalRuleCall_1()); }
	RULE_S_INT
{ after(grammarAccess.getValueAccess().getS_INTTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getValueAccess().getSTRINGTerminalRuleCall_2()); }
	RULE_STRING
{ after(grammarAccess.getValueAccess().getSTRINGTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__DotConfigModel__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DotConfigModel__Group__0__Impl
	rule__DotConfigModel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DotConfigModel__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDotConfigModelAccess().getDotConfigModelAction_0()); }
(

)
{ after(grammarAccess.getDotConfigModelAccess().getDotConfigModelAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DotConfigModel__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DotConfigModel__Group__1__Impl
	rule__DotConfigModel__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DotConfigModel__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDotConfigModelAccess().getConfigsAssignment_1()); }
(rule__DotConfigModel__ConfigsAssignment_1)?
{ after(grammarAccess.getDotConfigModelAccess().getConfigsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DotConfigModel__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DotConfigModel__Group__2__Impl
	rule__DotConfigModel__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DotConfigModel__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDotConfigModelAccess().getGroup_2()); }
(rule__DotConfigModel__Group_2__0)*
{ after(grammarAccess.getDotConfigModelAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DotConfigModel__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DotConfigModel__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DotConfigModel__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDotConfigModelAccess().getEolParserRuleCall_3()); }
(	ruleEol)?
{ after(grammarAccess.getDotConfigModelAccess().getEolParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__DotConfigModel__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DotConfigModel__Group_2__0__Impl
	rule__DotConfigModel__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DotConfigModel__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDotConfigModelAccess().getEolParserRuleCall_2_0()); }
	ruleEol
{ after(grammarAccess.getDotConfigModelAccess().getEolParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DotConfigModel__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DotConfigModel__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DotConfigModel__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDotConfigModelAccess().getConfigsAssignment_2_1()); }
(rule__DotConfigModel__ConfigsAssignment_2_1)
{ after(grammarAccess.getDotConfigModelAccess().getConfigsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Config__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Config__Group_0__0__Impl
	rule__Config__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Config__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigAccess().getConfigStringAction_0_0()); }
(

)
{ after(grammarAccess.getConfigAccess().getConfigStringAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Config__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Config__Group_0__1__Impl
	rule__Config__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Config__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigAccess().getNameAssignment_0_1()); }
(rule__Config__NameAssignment_0_1)
{ after(grammarAccess.getConfigAccess().getNameAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Config__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Config__Group_0__2__Impl
	rule__Config__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Config__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigAccess().getEQTerminalRuleCall_0_2()); }
	RULE_EQ
{ after(grammarAccess.getConfigAccess().getEQTerminalRuleCall_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Config__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Config__Group_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Config__Group_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigAccess().getVAssignment_0_3()); }
(rule__Config__VAssignment_0_3)
{ after(grammarAccess.getConfigAccess().getVAssignment_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Config__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Config__Group_1__0__Impl
	rule__Config__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Config__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigAccess().getConfigLogicAction_1_0()); }
(

)
{ after(grammarAccess.getConfigAccess().getConfigLogicAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Config__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Config__Group_1__1__Impl
	rule__Config__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Config__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigAccess().getNameAssignment_1_1()); }
(rule__Config__NameAssignment_1_1)
{ after(grammarAccess.getConfigAccess().getNameAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Config__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Config__Group_1__2__Impl
	rule__Config__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Config__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigAccess().getEQTerminalRuleCall_1_2()); }
	RULE_EQ
{ after(grammarAccess.getConfigAccess().getEQTerminalRuleCall_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Config__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Config__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Config__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigAccess().getVAssignment_1_3()); }
(rule__Config__VAssignment_1_3)
{ after(grammarAccess.getConfigAccess().getVAssignment_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Config__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Config__Group_2__0__Impl
	rule__Config__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Config__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigAccess().getConfigLogicAction_2_0()); }
(

)
{ after(grammarAccess.getConfigAccess().getConfigLogicAction_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Config__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Config__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Config__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigAccess().getNameAssignment_2_1()); }
(rule__Config__NameAssignment_2_1)
{ after(grammarAccess.getConfigAccess().getNameAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__DotConfigModel__ConfigsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDotConfigModelAccess().getConfigsConfigParserRuleCall_1_0()); }
	ruleConfig{ after(grammarAccess.getDotConfigModelAccess().getConfigsConfigParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DotConfigModel__ConfigsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDotConfigModelAccess().getConfigsConfigParserRuleCall_2_1_0()); }
	ruleConfig{ after(grammarAccess.getDotConfigModelAccess().getConfigsConfigParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Config__NameAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigAccess().getNameSYMBOLTerminalRuleCall_0_1_0()); }
	RULE_SYMBOL{ after(grammarAccess.getConfigAccess().getNameSYMBOLTerminalRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Config__VAssignment_0_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigAccess().getVValueParserRuleCall_0_3_0()); }
	rulevalue{ after(grammarAccess.getConfigAccess().getVValueParserRuleCall_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Config__NameAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigAccess().getNameSYMBOLTerminalRuleCall_1_1_0()); }
	RULE_SYMBOL{ after(grammarAccess.getConfigAccess().getNameSYMBOLTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Config__VAssignment_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigAccess().getVLOGIC_SYMTerminalRuleCall_1_3_0()); }
	RULE_LOGIC_SYM{ after(grammarAccess.getConfigAccess().getVLOGIC_SYMTerminalRuleCall_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Config__NameAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigAccess().getNameSL_COMMENT_NOTTerminalRuleCall_2_1_0()); }
	RULE_SL_COMMENT_NOT{ after(grammarAccess.getConfigAccess().getNameSL_COMMENT_NOTTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_NLI : '\n';

RULE_WSS : (' '|'\t')+;

RULE_EQ : '=';

RULE_LOGIC_SYM : ('y'|'n'|'m');

RULE_S_HEX : '0' ('x'|'X') ('0'..'9'|'A'..'F'|'a'..'f')+;

RULE_S_INT : '-'? ('0'..'9')+;

RULE_SYMBOL : ('A'..'Z'|'a'..'z'|'0'..'9'|'_')+;

RULE_STRING : ('"' RULE_STR_D '"'|'\'' RULE_STR_S '\'');

fragment RULE_STR_D : (RULE_ESC|~(('\\'|'"')))*;

fragment RULE_STR_S : (RULE_ESC|~(('\\'|'\'')))*;

fragment RULE_ESC : '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\');

RULE_SL_COMMENT_NOT : '# ' RULE_SYMBOL ' is not set';

RULE_SL_COMMENT : '#' ~('\n')*;


