/*
 * generated by Xtext 2.9.0-SNAPSHOT
 */
package at.jku.weiner.kefax.dotconfig.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import at.jku.weiner.kefax.dotconfig.services.DotconfigGrammarAccess;

public class DotconfigParser extends AbstractContentAssistParser {
	
	@Inject
	private DotconfigGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected at.jku.weiner.kefax.dotconfig.ui.contentassist.antlr.internal.InternalDotconfigParser createParser() {
		at.jku.weiner.kefax.dotconfig.ui.contentassist.antlr.internal.InternalDotconfigParser result = new at.jku.weiner.kefax.dotconfig.ui.contentassist.antlr.internal.InternalDotconfigParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getConfigAccess().getAlternatives(), "rule__Config__Alternatives");
					put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
					put(grammarAccess.getDotConfigModelAccess().getGroup(), "rule__DotConfigModel__Group__0");
					put(grammarAccess.getDotConfigModelAccess().getGroup_2(), "rule__DotConfigModel__Group_2__0");
					put(grammarAccess.getConfigAccess().getGroup_0(), "rule__Config__Group_0__0");
					put(grammarAccess.getConfigAccess().getGroup_1(), "rule__Config__Group_1__0");
					put(grammarAccess.getConfigAccess().getGroup_2(), "rule__Config__Group_2__0");
					put(grammarAccess.getDotConfigModelAccess().getConfigsAssignment_1(), "rule__DotConfigModel__ConfigsAssignment_1");
					put(grammarAccess.getDotConfigModelAccess().getConfigsAssignment_2_1(), "rule__DotConfigModel__ConfigsAssignment_2_1");
					put(grammarAccess.getConfigAccess().getNameAssignment_0_1(), "rule__Config__NameAssignment_0_1");
					put(grammarAccess.getConfigAccess().getVAssignment_0_3(), "rule__Config__VAssignment_0_3");
					put(grammarAccess.getConfigAccess().getNameAssignment_1_1(), "rule__Config__NameAssignment_1_1");
					put(grammarAccess.getConfigAccess().getVAssignment_1_3(), "rule__Config__VAssignment_1_3");
					put(grammarAccess.getConfigAccess().getNameAssignment_2_1(), "rule__Config__NameAssignment_2_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			at.jku.weiner.kefax.dotconfig.ui.contentassist.antlr.internal.InternalDotconfigParser typedParser = (at.jku.weiner.kefax.dotconfig.ui.contentassist.antlr.internal.InternalDotconfigParser) parser;
			typedParser.entryRuleDotConfigModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WSS", "RULE_SL_COMMENT" };
	}
	
	public DotconfigGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(DotconfigGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
