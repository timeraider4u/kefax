/*
 * generated by Xtext
 */
package at.jku.isse.ecco.kefax.dotconfig.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class DotconfigGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DotConfigModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DotConfigModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDotConfigModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cConfigsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConfigsConfigParserRuleCall_1_0 = (RuleCall)cConfigsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cEolParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cConfigsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cConfigsConfigParserRuleCall_2_1_0 = (RuleCall)cConfigsAssignment_2_1.eContents().get(0);
		private final RuleCall cEolParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//DotConfigModel:
		//	{DotConfigModel} Configs+=Config? (Eol Configs+=Config)* Eol?;
		@Override public ParserRule getRule() { return rule; }

		//{DotConfigModel} Configs+=Config? (Eol Configs+=Config)* Eol?
		public Group getGroup() { return cGroup; }

		//{DotConfigModel}
		public Action getDotConfigModelAction_0() { return cDotConfigModelAction_0; }

		//Configs+=Config?
		public Assignment getConfigsAssignment_1() { return cConfigsAssignment_1; }

		//Config
		public RuleCall getConfigsConfigParserRuleCall_1_0() { return cConfigsConfigParserRuleCall_1_0; }

		//(Eol Configs+=Config)*
		public Group getGroup_2() { return cGroup_2; }

		//Eol
		public RuleCall getEolParserRuleCall_2_0() { return cEolParserRuleCall_2_0; }

		//Configs+=Config
		public Assignment getConfigsAssignment_2_1() { return cConfigsAssignment_2_1; }

		//Config
		public RuleCall getConfigsConfigParserRuleCall_2_1_0() { return cConfigsConfigParserRuleCall_2_1_0; }

		//Eol?
		public RuleCall getEolParserRuleCall_3() { return cEolParserRuleCall_3; }
	}

	public class ConfigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Config");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cConfigStringAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameSYMBOLTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final RuleCall cEQTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Assignment cVAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cVValueParserRuleCall_0_3_0 = (RuleCall)cVAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cConfigLogicAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameSYMBOLTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final RuleCall cEQTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Assignment cVAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cVLOGIC_SYMTerminalRuleCall_1_3_0 = (RuleCall)cVAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cConfigLogicAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameSL_COMMENT_NOTTerminalRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		
		//Config:
		//	{ConfigString} name=SYMBOL EQ v=value | {ConfigLogic} name=SYMBOL EQ v=LOGIC_SYM | {ConfigLogic} name=SL_COMMENT_NOT;
		@Override public ParserRule getRule() { return rule; }

		//{ConfigString} name=SYMBOL EQ v=value | {ConfigLogic} name=SYMBOL EQ v=LOGIC_SYM | {ConfigLogic} name=SL_COMMENT_NOT
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ConfigString} name=SYMBOL EQ v=value
		public Group getGroup_0() { return cGroup_0; }

		//{ConfigString}
		public Action getConfigStringAction_0_0() { return cConfigStringAction_0_0; }

		//name=SYMBOL
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//SYMBOL
		public RuleCall getNameSYMBOLTerminalRuleCall_0_1_0() { return cNameSYMBOLTerminalRuleCall_0_1_0; }

		//EQ
		public RuleCall getEQTerminalRuleCall_0_2() { return cEQTerminalRuleCall_0_2; }

		//v=value
		public Assignment getVAssignment_0_3() { return cVAssignment_0_3; }

		//value
		public RuleCall getVValueParserRuleCall_0_3_0() { return cVValueParserRuleCall_0_3_0; }

		//{ConfigLogic} name=SYMBOL EQ v=LOGIC_SYM
		public Group getGroup_1() { return cGroup_1; }

		//{ConfigLogic}
		public Action getConfigLogicAction_1_0() { return cConfigLogicAction_1_0; }

		//name=SYMBOL
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//SYMBOL
		public RuleCall getNameSYMBOLTerminalRuleCall_1_1_0() { return cNameSYMBOLTerminalRuleCall_1_1_0; }

		//EQ
		public RuleCall getEQTerminalRuleCall_1_2() { return cEQTerminalRuleCall_1_2; }

		//v=LOGIC_SYM
		public Assignment getVAssignment_1_3() { return cVAssignment_1_3; }

		//LOGIC_SYM
		public RuleCall getVLOGIC_SYMTerminalRuleCall_1_3_0() { return cVLOGIC_SYMTerminalRuleCall_1_3_0; }

		//{ConfigLogic} name=SL_COMMENT_NOT
		public Group getGroup_2() { return cGroup_2; }

		//{ConfigLogic}
		public Action getConfigLogicAction_2_0() { return cConfigLogicAction_2_0; }

		//name=SL_COMMENT_NOT
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//SL_COMMENT_NOT
		public RuleCall getNameSL_COMMENT_NOTTerminalRuleCall_2_1_0() { return cNameSL_COMMENT_NOTTerminalRuleCall_2_1_0; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cS_HEXTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cS_INTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//value:
		//	S_HEX | S_INT | STRING;
		@Override public ParserRule getRule() { return rule; }

		//S_HEX | S_INT | STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//S_HEX
		public RuleCall getS_HEXTerminalRuleCall_0() { return cS_HEXTerminalRuleCall_0; }

		//S_INT
		public RuleCall getS_INTTerminalRuleCall_1() { return cS_INTTerminalRuleCall_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }
	}

	public class EolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Eol");
		private final RuleCall cNLITerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Eol:
		//	NLI+;
		@Override public ParserRule getRule() { return rule; }

		//NLI+
		public RuleCall getNLITerminalRuleCall() { return cNLITerminalRuleCall; }
	}
	
	
	private final DotConfigModelElements pDotConfigModel;
	private final ConfigElements pConfig;
	private final ValueElements pValue;
	private final EolElements pEol;
	private final TerminalRule tNLI;
	private final TerminalRule tWSS;
	private final TerminalRule tEQ;
	private final TerminalRule tLOGIC_SYM;
	private final TerminalRule tS_HEX;
	private final TerminalRule tS_INT;
	private final TerminalRule tSYMBOL;
	private final TerminalRule tSTRING;
	private final TerminalRule tSTR_D;
	private final TerminalRule tSTR_S;
	private final TerminalRule tESC;
	private final TerminalRule tSL_COMMENT_NOT;
	private final TerminalRule tSL_COMMENT;
	
	private final Grammar grammar;

	@Inject
	public DotconfigGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pDotConfigModel = new DotConfigModelElements();
		this.pConfig = new ConfigElements();
		this.pValue = new ValueElements();
		this.pEol = new EolElements();
		this.tNLI = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NLI");
		this.tWSS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WSS");
		this.tEQ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EQ");
		this.tLOGIC_SYM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LOGIC_SYM");
		this.tS_HEX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "S_HEX");
		this.tS_INT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "S_INT");
		this.tSYMBOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SYMBOL");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING");
		this.tSTR_D = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STR_D");
		this.tSTR_S = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STR_S");
		this.tESC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ESC");
		this.tSL_COMMENT_NOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT_NOT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("at.jku.isse.ecco.kefax.dotconfig.Dotconfig".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//DotConfigModel:
	//	{DotConfigModel} Configs+=Config? (Eol Configs+=Config)* Eol?;
	public DotConfigModelElements getDotConfigModelAccess() {
		return pDotConfigModel;
	}
	
	public ParserRule getDotConfigModelRule() {
		return getDotConfigModelAccess().getRule();
	}

	//Config:
	//	{ConfigString} name=SYMBOL EQ v=value | {ConfigLogic} name=SYMBOL EQ v=LOGIC_SYM | {ConfigLogic} name=SL_COMMENT_NOT;
	public ConfigElements getConfigAccess() {
		return pConfig;
	}
	
	public ParserRule getConfigRule() {
		return getConfigAccess().getRule();
	}

	//value:
	//	S_HEX | S_INT | STRING;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//Eol:
	//	NLI+;
	public EolElements getEolAccess() {
		return pEol;
	}
	
	public ParserRule getEolRule() {
		return getEolAccess().getRule();
	}

	//// Lexer Rules
	//terminal NLI:
	//	"\n";
	public TerminalRule getNLIRule() {
		return tNLI;
	} 

	//terminal WSS:
	//	(" " | "\t")+;
	public TerminalRule getWSSRule() {
		return tWSS;
	} 

	//terminal EQ:
	//	"=";
	public TerminalRule getEQRule() {
		return tEQ;
	} 

	//terminal LOGIC_SYM:
	//	"y" | "n" | "m";
	public TerminalRule getLOGIC_SYMRule() {
		return tLOGIC_SYM;
	} 

	//terminal S_HEX:
	//	"0" ("x" | "X") ("0".."9" | "A".."F" | "a".."f")+;
	public TerminalRule getS_HEXRule() {
		return tS_HEX;
	} 

	//terminal S_INT:
	//	"-"? "0".."9"+;
	public TerminalRule getS_INTRule() {
		return tS_INT;
	} 

	//terminal SYMBOL:
	//	("A".."Z" | "a".."z" | "0".."9" | "_")+;
	public TerminalRule getSYMBOLRule() {
		return tSYMBOL;
	} 

	//terminal STRING:
	//	"\"" STR_D "\"" | "\'" STR_S "\'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	} 

	//terminal fragment STR_D:
	//	(ESC | !("\\" | "\""))*;
	public TerminalRule getSTR_DRule() {
		return tSTR_D;
	} 

	//terminal fragment STR_S:
	//	(ESC | !("\\" | "\'"))*;
	public TerminalRule getSTR_SRule() {
		return tSTR_S;
	} 

	//terminal fragment ESC:
	//	"\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\");
	public TerminalRule getESCRule() {
		return tESC;
	} 

	//terminal SL_COMMENT_NOT:
	//	"# " SYMBOL " is not set";
	public TerminalRule getSL_COMMENT_NOTRule() {
		return tSL_COMMENT_NOT;
	} 

	//terminal SL_COMMENT:
	//	"#" !"\n"*;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	} 
}
