/**
 * generated by Xtext 2.9.0-SNAPSHOT
 */
package at.jku.weiner.kefax.dotconfig.formatting2;

import at.jku.weiner.kefax.dotconfig.dotconfig.Config;
import at.jku.weiner.kefax.dotconfig.dotconfig.DotConfigModel;
import at.jku.weiner.kefax.dotconfig.services.DotconfigGrammarAccess;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class DotconfigFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private DotconfigGrammarAccess _dotconfigGrammarAccess;
  
  protected void _format(final DotConfigModel dotConfigModel, @Extension final IFormattableDocument document) {
    EList<Config> _configs = dotConfigModel.getConfigs();
    for (final Config configs : _configs) {
      this.format(configs, document);
    }
  }
  
  public void format(final Object dotConfigModel, final IFormattableDocument document) {
    if (dotConfigModel instanceof XtextResource) {
      _format((XtextResource)dotConfigModel, document);
      return;
    } else if (dotConfigModel instanceof DotConfigModel) {
      _format((DotConfigModel)dotConfigModel, document);
      return;
    } else if (dotConfigModel == null) {
      _format((Void)null, document);
      return;
    } else if (dotConfigModel != null) {
      _format(dotConfigModel, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(dotConfigModel, document).toString());
    }
  }
}
