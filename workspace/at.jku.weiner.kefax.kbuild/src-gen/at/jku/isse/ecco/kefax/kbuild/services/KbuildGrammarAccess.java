/*
 * generated by Xtext
 */
package at.jku.isse.ecco.kefax.kbuild.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class KbuildGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cBuildEntryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBuildEntryBuildEntryParserRuleCall_1_0 = (RuleCall)cBuildEntryAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cEolParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cBuildEntryAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cBuildEntryBuildEntryParserRuleCall_2_1_0 = (RuleCall)cBuildEntryAssignment_2_1.eContents().get(0);
		private final RuleCall cEolParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Model:
		//	{Model} buildEntry+=BuildEntry? (Eol buildEntry+=BuildEntry)* Eol;
		@Override public ParserRule getRule() { return rule; }

		//{Model} buildEntry+=BuildEntry? (Eol buildEntry+=BuildEntry)* Eol
		public Group getGroup() { return cGroup; }

		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }

		//buildEntry+=BuildEntry?
		public Assignment getBuildEntryAssignment_1() { return cBuildEntryAssignment_1; }

		//BuildEntry
		public RuleCall getBuildEntryBuildEntryParserRuleCall_1_0() { return cBuildEntryBuildEntryParserRuleCall_1_0; }

		//(Eol buildEntry+=BuildEntry)*
		public Group getGroup_2() { return cGroup_2; }

		//Eol
		public RuleCall getEolParserRuleCall_2_0() { return cEolParserRuleCall_2_0; }

		//buildEntry+=BuildEntry
		public Assignment getBuildEntryAssignment_2_1() { return cBuildEntryAssignment_2_1; }

		//BuildEntry
		public RuleCall getBuildEntryBuildEntryParserRuleCall_2_1_0() { return cBuildEntryBuildEntryParserRuleCall_2_1_0; }

		//Eol
		public RuleCall getEolParserRuleCall_3() { return cEolParserRuleCall_3; }
	}

	public class BuildEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuildEntry");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBuildEntryAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueEntryParserRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cIfEqAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cIFEQTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cValueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cValueIfParserRuleCall_1_2_0 = (RuleCall)cValueAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cIfNEqAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final RuleCall cIFNEQTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Assignment cValueAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cValueIfParserRuleCall_2_2_0 = (RuleCall)cValueAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cIfndefAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final RuleCall cIFNDEFTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Assignment cNameAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cNameSYMBOLTerminalRuleCall_3_2_0 = (RuleCall)cNameAssignment_3_2.eContents().get(0);
		private final RuleCall cEolParserRuleCall_3_3 = (RuleCall)cGroup_3.eContents().get(3);
		private final Alternatives cAlternatives_3_4 = (Alternatives)cGroup_3.eContents().get(4);
		private final Assignment cValueAssignment_3_4_0 = (Assignment)cAlternatives_3_4.eContents().get(0);
		private final RuleCall cValueObject_YParserRuleCall_3_4_0_0 = (RuleCall)cValueAssignment_3_4_0.eContents().get(0);
		private final Assignment cValueAssignment_3_4_1 = (Assignment)cAlternatives_3_4.eContents().get(1);
		private final RuleCall cValueObject_MParserRuleCall_3_4_1_0 = (RuleCall)cValueAssignment_3_4_1.eContents().get(0);
		private final RuleCall cEolParserRuleCall_3_5 = (RuleCall)cGroup_3.eContents().get(5);
		private final RuleCall cENDIFTerminalRuleCall_3_6 = (RuleCall)cGroup_3.eContents().get(6);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cHostProgramAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cNameAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNameSYMBOLTerminalRuleCall_4_1_0 = (RuleCall)cNameAssignment_4_1.eContents().get(0);
		private final Assignment cVariableAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cVariableVariableParserRuleCall_4_2_0 = (RuleCall)cVariableAssignment_4_2.eContents().get(0);
		private final Assignment cValueAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cValueAssignExtraParserRuleCall_4_3_0 = (RuleCall)cValueAssignment_4_3.eContents().get(0);
		private final Assignment cInnerAssignment_4_4 = (Assignment)cGroup_4.eContents().get(4);
		private final RuleCall cInnerAssignParserRuleCall_4_4_0 = (RuleCall)cInnerAssignment_4_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cObjectAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Alternatives cAlternatives_5_1 = (Alternatives)cGroup_5.eContents().get(1);
		private final Assignment cValueAssignment_5_1_0 = (Assignment)cAlternatives_5_1.eContents().get(0);
		private final RuleCall cValueObject_YParserRuleCall_5_1_0_0 = (RuleCall)cValueAssignment_5_1_0.eContents().get(0);
		private final Assignment cValueAssignment_5_1_1 = (Assignment)cAlternatives_5_1.eContents().get(1);
		private final RuleCall cValueObject_MParserRuleCall_5_1_1_0 = (RuleCall)cValueAssignment_5_1_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cTargetAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cTargetAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cTargetValuesParserRuleCall_6_1_0 = (RuleCall)cTargetAssignment_6_1.eContents().get(0);
		private final RuleCall cDPOINTTerminalRuleCall_6_2 = (RuleCall)cGroup_6.eContents().get(2);
		private final Alternatives cAlternatives_6_3 = (Alternatives)cGroup_6.eContents().get(3);
		private final RuleCall cSEMICOLONTerminalRuleCall_6_3_0 = (RuleCall)cAlternatives_6_3.eContents().get(0);
		private final Group cGroup_6_3_1 = (Group)cAlternatives_6_3.eContents().get(1);
		private final Assignment cValuesAssignment_6_3_1_0 = (Assignment)cGroup_6_3_1.eContents().get(0);
		private final RuleCall cValuesValuesParserRuleCall_6_3_1_0_0 = (RuleCall)cValuesAssignment_6_3_1_0.eContents().get(0);
		private final Group cGroup_6_3_1_1 = (Group)cGroup_6_3_1.eContents().get(1);
		private final RuleCall cEolParserRuleCall_6_3_1_1_0 = (RuleCall)cGroup_6_3_1_1.eContents().get(0);
		private final RuleCall cTABTerminalRuleCall_6_3_1_1_1 = (RuleCall)cGroup_6_3_1_1.eContents().get(1);
		private final Assignment cValuesAssignment_6_3_1_1_2 = (Assignment)cGroup_6_3_1_1.eContents().get(2);
		private final RuleCall cValuesValuesParserRuleCall_6_3_1_1_2_0 = (RuleCall)cValuesAssignment_6_3_1_1_2.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cMyVariableAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Assignment cNameAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cNameSYMBOLTerminalRuleCall_7_1_0 = (RuleCall)cNameAssignment_7_1.eContents().get(0);
		private final Assignment cVariableAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cVariableVariableParserRuleCall_7_2_0 = (RuleCall)cVariableAssignment_7_2.eContents().get(0);
		private final Assignment cValueAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final RuleCall cValueAssignParserRuleCall_7_3_0 = (RuleCall)cValueAssignment_7_3.eContents().get(0);
		
		//BuildEntry:
		//	{BuildEntry} value=Entry | {IfEq} IFEQ value=If | {IfNEq} IFNEQ value=If | {Ifndef} IFNDEF name=SYMBOL Eol
		//	(value=Object_Y | value=Object_M) Eol ENDIF | {HostProgram} name=SYMBOL variable=Variable? value=AssignExtra
		//	inner=Assign? | {Object} (value=Object_Y | value=Object_M) | {Target} target=Values DPOINT (SEMICOLON | values+=Values
		//	(Eol TAB+ values+=Values)*) | {MyVariable} name=SYMBOL variable=Variable? value=Assign;
		@Override public ParserRule getRule() { return rule; }

		//{BuildEntry} value=Entry | {IfEq} IFEQ value=If | {IfNEq} IFNEQ value=If | {Ifndef} IFNDEF name=SYMBOL Eol
		//(value=Object_Y | value=Object_M) Eol ENDIF | {HostProgram} name=SYMBOL variable=Variable? value=AssignExtra
		//inner=Assign? | {Object} (value=Object_Y | value=Object_M) | {Target} target=Values DPOINT (SEMICOLON | values+=Values
		//(Eol TAB+ values+=Values)*) | {MyVariable} name=SYMBOL variable=Variable? value=Assign
		public Alternatives getAlternatives() { return cAlternatives; }

		//{BuildEntry} value=Entry
		public Group getGroup_0() { return cGroup_0; }

		//{BuildEntry}
		public Action getBuildEntryAction_0_0() { return cBuildEntryAction_0_0; }

		//value=Entry
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }

		//Entry
		public RuleCall getValueEntryParserRuleCall_0_1_0() { return cValueEntryParserRuleCall_0_1_0; }

		//{IfEq} IFEQ value=If
		public Group getGroup_1() { return cGroup_1; }

		//{IfEq}
		public Action getIfEqAction_1_0() { return cIfEqAction_1_0; }

		//IFEQ
		public RuleCall getIFEQTerminalRuleCall_1_1() { return cIFEQTerminalRuleCall_1_1; }

		//value=If
		public Assignment getValueAssignment_1_2() { return cValueAssignment_1_2; }

		//If
		public RuleCall getValueIfParserRuleCall_1_2_0() { return cValueIfParserRuleCall_1_2_0; }

		//{IfNEq} IFNEQ value=If
		public Group getGroup_2() { return cGroup_2; }

		//{IfNEq}
		public Action getIfNEqAction_2_0() { return cIfNEqAction_2_0; }

		//IFNEQ
		public RuleCall getIFNEQTerminalRuleCall_2_1() { return cIFNEQTerminalRuleCall_2_1; }

		//value=If
		public Assignment getValueAssignment_2_2() { return cValueAssignment_2_2; }

		//If
		public RuleCall getValueIfParserRuleCall_2_2_0() { return cValueIfParserRuleCall_2_2_0; }

		//{Ifndef} IFNDEF name=SYMBOL Eol (value=Object_Y | value=Object_M) Eol ENDIF
		public Group getGroup_3() { return cGroup_3; }

		//{Ifndef}
		public Action getIfndefAction_3_0() { return cIfndefAction_3_0; }

		//IFNDEF
		public RuleCall getIFNDEFTerminalRuleCall_3_1() { return cIFNDEFTerminalRuleCall_3_1; }

		//name=SYMBOL
		public Assignment getNameAssignment_3_2() { return cNameAssignment_3_2; }

		//SYMBOL
		public RuleCall getNameSYMBOLTerminalRuleCall_3_2_0() { return cNameSYMBOLTerminalRuleCall_3_2_0; }

		//Eol
		public RuleCall getEolParserRuleCall_3_3() { return cEolParserRuleCall_3_3; }

		//value=Object_Y | value=Object_M
		public Alternatives getAlternatives_3_4() { return cAlternatives_3_4; }

		//value=Object_Y
		public Assignment getValueAssignment_3_4_0() { return cValueAssignment_3_4_0; }

		//Object_Y
		public RuleCall getValueObject_YParserRuleCall_3_4_0_0() { return cValueObject_YParserRuleCall_3_4_0_0; }

		//value=Object_M
		public Assignment getValueAssignment_3_4_1() { return cValueAssignment_3_4_1; }

		//Object_M
		public RuleCall getValueObject_MParserRuleCall_3_4_1_0() { return cValueObject_MParserRuleCall_3_4_1_0; }

		//Eol
		public RuleCall getEolParserRuleCall_3_5() { return cEolParserRuleCall_3_5; }

		//ENDIF
		public RuleCall getENDIFTerminalRuleCall_3_6() { return cENDIFTerminalRuleCall_3_6; }

		//{HostProgram} name=SYMBOL variable=Variable? value=AssignExtra inner=Assign?
		public Group getGroup_4() { return cGroup_4; }

		//{HostProgram}
		public Action getHostProgramAction_4_0() { return cHostProgramAction_4_0; }

		//name=SYMBOL
		public Assignment getNameAssignment_4_1() { return cNameAssignment_4_1; }

		//SYMBOL
		public RuleCall getNameSYMBOLTerminalRuleCall_4_1_0() { return cNameSYMBOLTerminalRuleCall_4_1_0; }

		//variable=Variable?
		public Assignment getVariableAssignment_4_2() { return cVariableAssignment_4_2; }

		//Variable
		public RuleCall getVariableVariableParserRuleCall_4_2_0() { return cVariableVariableParserRuleCall_4_2_0; }

		//value=AssignExtra
		public Assignment getValueAssignment_4_3() { return cValueAssignment_4_3; }

		//AssignExtra
		public RuleCall getValueAssignExtraParserRuleCall_4_3_0() { return cValueAssignExtraParserRuleCall_4_3_0; }

		//inner=Assign?
		public Assignment getInnerAssignment_4_4() { return cInnerAssignment_4_4; }

		//Assign
		public RuleCall getInnerAssignParserRuleCall_4_4_0() { return cInnerAssignParserRuleCall_4_4_0; }

		//{Object} (value=Object_Y | value=Object_M)
		public Group getGroup_5() { return cGroup_5; }

		//{Object}
		public Action getObjectAction_5_0() { return cObjectAction_5_0; }

		//value=Object_Y | value=Object_M
		public Alternatives getAlternatives_5_1() { return cAlternatives_5_1; }

		//value=Object_Y
		public Assignment getValueAssignment_5_1_0() { return cValueAssignment_5_1_0; }

		//Object_Y
		public RuleCall getValueObject_YParserRuleCall_5_1_0_0() { return cValueObject_YParserRuleCall_5_1_0_0; }

		//value=Object_M
		public Assignment getValueAssignment_5_1_1() { return cValueAssignment_5_1_1; }

		//Object_M
		public RuleCall getValueObject_MParserRuleCall_5_1_1_0() { return cValueObject_MParserRuleCall_5_1_1_0; }

		//{Target} target=Values DPOINT (SEMICOLON | values+=Values (Eol TAB+ values+=Values)*)
		public Group getGroup_6() { return cGroup_6; }

		//{Target}
		public Action getTargetAction_6_0() { return cTargetAction_6_0; }

		//target=Values
		public Assignment getTargetAssignment_6_1() { return cTargetAssignment_6_1; }

		//Values
		public RuleCall getTargetValuesParserRuleCall_6_1_0() { return cTargetValuesParserRuleCall_6_1_0; }

		//DPOINT
		public RuleCall getDPOINTTerminalRuleCall_6_2() { return cDPOINTTerminalRuleCall_6_2; }

		//SEMICOLON | values+=Values (Eol TAB+ values+=Values)*
		public Alternatives getAlternatives_6_3() { return cAlternatives_6_3; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_6_3_0() { return cSEMICOLONTerminalRuleCall_6_3_0; }

		//values+=Values (Eol TAB+ values+=Values)*
		public Group getGroup_6_3_1() { return cGroup_6_3_1; }

		//values+=Values
		public Assignment getValuesAssignment_6_3_1_0() { return cValuesAssignment_6_3_1_0; }

		//Values
		public RuleCall getValuesValuesParserRuleCall_6_3_1_0_0() { return cValuesValuesParserRuleCall_6_3_1_0_0; }

		//(Eol TAB+ values+=Values)*
		public Group getGroup_6_3_1_1() { return cGroup_6_3_1_1; }

		//Eol
		public RuleCall getEolParserRuleCall_6_3_1_1_0() { return cEolParserRuleCall_6_3_1_1_0; }

		//TAB+
		public RuleCall getTABTerminalRuleCall_6_3_1_1_1() { return cTABTerminalRuleCall_6_3_1_1_1; }

		//values+=Values
		public Assignment getValuesAssignment_6_3_1_1_2() { return cValuesAssignment_6_3_1_1_2; }

		//Values
		public RuleCall getValuesValuesParserRuleCall_6_3_1_1_2_0() { return cValuesValuesParserRuleCall_6_3_1_1_2_0; }

		//{MyVariable} name=SYMBOL variable=Variable? value=Assign
		public Group getGroup_7() { return cGroup_7; }

		//{MyVariable}
		public Action getMyVariableAction_7_0() { return cMyVariableAction_7_0; }

		//name=SYMBOL
		public Assignment getNameAssignment_7_1() { return cNameAssignment_7_1; }

		//SYMBOL
		public RuleCall getNameSYMBOLTerminalRuleCall_7_1_0() { return cNameSYMBOLTerminalRuleCall_7_1_0; }

		//variable=Variable?
		public Assignment getVariableAssignment_7_2() { return cVariableAssignment_7_2; }

		//Variable
		public RuleCall getVariableVariableParserRuleCall_7_2_0() { return cVariableVariableParserRuleCall_7_2_0; }

		//value=Assign
		public Assignment getValueAssignment_7_3() { return cValueAssignment_7_3; }

		//Assign
		public RuleCall getValueAssignParserRuleCall_7_3_0() { return cValueAssignParserRuleCall_7_3_0; }
	}

	public class EntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEntryAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cOBJ_STARTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableVariableParserRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueAssignExtraParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//Entry:
		//	{Entry} OBJ_START variable=Variable value=AssignExtra;
		@Override public ParserRule getRule() { return rule; }

		//{Entry} OBJ_START variable=Variable value=AssignExtra
		public Group getGroup() { return cGroup; }

		//{Entry}
		public Action getEntryAction_0() { return cEntryAction_0; }

		//OBJ_START
		public RuleCall getOBJ_STARTTerminalRuleCall_1() { return cOBJ_STARTTerminalRuleCall_1; }

		//variable=Variable
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }

		//Variable
		public RuleCall getVariableVariableParserRuleCall_2_0() { return cVariableVariableParserRuleCall_2_0; }

		//value=AssignExtra
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//AssignExtra
		public RuleCall getValueAssignExtraParserRuleCall_3_0() { return cValueAssignExtraParserRuleCall_3_0; }
	}

	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBRACE_STARTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cVariableParserRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final RuleCall cCOMMATerminalRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Alternatives cAlternatives_1_0_2 = (Alternatives)cGroup_1_0.eContents().get(2);
		private final RuleCall cYTerminalRuleCall_1_0_2_0 = (RuleCall)cAlternatives_1_0_2.eContents().get(0);
		private final RuleCall cMTerminalRuleCall_1_0_2_1 = (RuleCall)cAlternatives_1_0_2.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cShellAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cShellShellCmdParserRuleCall_1_1_0_0 = (RuleCall)cShellAssignment_1_1_0.eContents().get(0);
		private final RuleCall cCOMMATerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final RuleCall cBRACE_ENDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cEolParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cTABTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cValueAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cValueObject_YParserRuleCall_5_0_0 = (RuleCall)cValueAssignment_5_0.eContents().get(0);
		private final Assignment cValueAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cValueObject_MParserRuleCall_5_1_0 = (RuleCall)cValueAssignment_5_1.eContents().get(0);
		private final Assignment cValueAssignment_5_2 = (Assignment)cAlternatives_5.eContents().get(2);
		private final RuleCall cValueEntryParserRuleCall_5_2_0 = (RuleCall)cValueAssignment_5_2.eContents().get(0);
		private final Assignment cValueAssignment_5_3 = (Assignment)cAlternatives_5.eContents().get(3);
		private final RuleCall cValueShellCmdParserRuleCall_5_3_0 = (RuleCall)cValueAssignment_5_3.eContents().get(0);
		private final RuleCall cEolParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final RuleCall cELSETerminalRuleCall_7_0 = (RuleCall)cGroup_7.eContents().get(0);
		private final RuleCall cEolParserRuleCall_7_1 = (RuleCall)cGroup_7.eContents().get(1);
		private final RuleCall cTABTerminalRuleCall_7_2 = (RuleCall)cGroup_7.eContents().get(2);
		private final Alternatives cAlternatives_7_3 = (Alternatives)cGroup_7.eContents().get(3);
		private final Assignment cElsevalueAssignment_7_3_0 = (Assignment)cAlternatives_7_3.eContents().get(0);
		private final RuleCall cElsevalueObject_YParserRuleCall_7_3_0_0 = (RuleCall)cElsevalueAssignment_7_3_0.eContents().get(0);
		private final Assignment cElsevalueAssignment_7_3_1 = (Assignment)cAlternatives_7_3.eContents().get(1);
		private final RuleCall cElsevalueObject_MParserRuleCall_7_3_1_0 = (RuleCall)cElsevalueAssignment_7_3_1.eContents().get(0);
		private final RuleCall cEolParserRuleCall_7_4 = (RuleCall)cGroup_7.eContents().get(4);
		private final RuleCall cENDIFTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		//If:
		//	BRACE_START (Variable COMMA (Y | M) | shell=ShellCmd COMMA?) BRACE_END Eol TAB* (value=Object_Y | value=Object_M |
		//	value=Entry | value=ShellCmd) Eol (ELSE Eol TAB* (elsevalue=Object_Y | elsevalue=Object_M) Eol)? ENDIF;
		@Override public ParserRule getRule() { return rule; }

		//BRACE_START (Variable COMMA (Y | M) | shell=ShellCmd COMMA?) BRACE_END Eol TAB* (value=Object_Y | value=Object_M |
		//value=Entry | value=ShellCmd) Eol (ELSE Eol TAB* (elsevalue=Object_Y | elsevalue=Object_M) Eol)? ENDIF
		public Group getGroup() { return cGroup; }

		//BRACE_START
		public RuleCall getBRACE_STARTTerminalRuleCall_0() { return cBRACE_STARTTerminalRuleCall_0; }

		//Variable COMMA (Y | M) | shell=ShellCmd COMMA?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//Variable COMMA (Y | M)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//Variable
		public RuleCall getVariableParserRuleCall_1_0_0() { return cVariableParserRuleCall_1_0_0; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1_0_1() { return cCOMMATerminalRuleCall_1_0_1; }

		//Y | M
		public Alternatives getAlternatives_1_0_2() { return cAlternatives_1_0_2; }

		//Y
		public RuleCall getYTerminalRuleCall_1_0_2_0() { return cYTerminalRuleCall_1_0_2_0; }

		//M
		public RuleCall getMTerminalRuleCall_1_0_2_1() { return cMTerminalRuleCall_1_0_2_1; }

		//shell=ShellCmd COMMA?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//shell=ShellCmd
		public Assignment getShellAssignment_1_1_0() { return cShellAssignment_1_1_0; }

		//ShellCmd
		public RuleCall getShellShellCmdParserRuleCall_1_1_0_0() { return cShellShellCmdParserRuleCall_1_1_0_0; }

		//COMMA?
		public RuleCall getCOMMATerminalRuleCall_1_1_1() { return cCOMMATerminalRuleCall_1_1_1; }

		//BRACE_END
		public RuleCall getBRACE_ENDTerminalRuleCall_2() { return cBRACE_ENDTerminalRuleCall_2; }

		//Eol
		public RuleCall getEolParserRuleCall_3() { return cEolParserRuleCall_3; }

		//TAB*
		public RuleCall getTABTerminalRuleCall_4() { return cTABTerminalRuleCall_4; }

		//value=Object_Y | value=Object_M | value=Entry | value=ShellCmd
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//value=Object_Y
		public Assignment getValueAssignment_5_0() { return cValueAssignment_5_0; }

		//Object_Y
		public RuleCall getValueObject_YParserRuleCall_5_0_0() { return cValueObject_YParserRuleCall_5_0_0; }

		//value=Object_M
		public Assignment getValueAssignment_5_1() { return cValueAssignment_5_1; }

		//Object_M
		public RuleCall getValueObject_MParserRuleCall_5_1_0() { return cValueObject_MParserRuleCall_5_1_0; }

		//value=Entry
		public Assignment getValueAssignment_5_2() { return cValueAssignment_5_2; }

		//Entry
		public RuleCall getValueEntryParserRuleCall_5_2_0() { return cValueEntryParserRuleCall_5_2_0; }

		//value=ShellCmd
		public Assignment getValueAssignment_5_3() { return cValueAssignment_5_3; }

		//ShellCmd
		public RuleCall getValueShellCmdParserRuleCall_5_3_0() { return cValueShellCmdParserRuleCall_5_3_0; }

		//Eol
		public RuleCall getEolParserRuleCall_6() { return cEolParserRuleCall_6; }

		//(ELSE Eol TAB* (elsevalue=Object_Y | elsevalue=Object_M) Eol)?
		public Group getGroup_7() { return cGroup_7; }

		//ELSE
		public RuleCall getELSETerminalRuleCall_7_0() { return cELSETerminalRuleCall_7_0; }

		//Eol
		public RuleCall getEolParserRuleCall_7_1() { return cEolParserRuleCall_7_1; }

		//TAB*
		public RuleCall getTABTerminalRuleCall_7_2() { return cTABTerminalRuleCall_7_2; }

		//elsevalue=Object_Y | elsevalue=Object_M
		public Alternatives getAlternatives_7_3() { return cAlternatives_7_3; }

		//elsevalue=Object_Y
		public Assignment getElsevalueAssignment_7_3_0() { return cElsevalueAssignment_7_3_0; }

		//Object_Y
		public RuleCall getElsevalueObject_YParserRuleCall_7_3_0_0() { return cElsevalueObject_YParserRuleCall_7_3_0_0; }

		//elsevalue=Object_M
		public Assignment getElsevalueAssignment_7_3_1() { return cElsevalueAssignment_7_3_1; }

		//Object_M
		public RuleCall getElsevalueObject_MParserRuleCall_7_3_1_0() { return cElsevalueObject_MParserRuleCall_7_3_1_0; }

		//Eol
		public RuleCall getEolParserRuleCall_7_4() { return cEolParserRuleCall_7_4; }

		//ENDIF
		public RuleCall getENDIFTerminalRuleCall_8() { return cENDIFTerminalRuleCall_8; }
	}

	public class Object_YElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Object_Y");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObj_yAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cOBJ_YTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueAssignExtraParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Object_Y:
		//	{Obj_y} OBJ_Y value=AssignExtra;
		@Override public ParserRule getRule() { return rule; }

		//{Obj_y} OBJ_Y value=AssignExtra
		public Group getGroup() { return cGroup; }

		//{Obj_y}
		public Action getObj_yAction_0() { return cObj_yAction_0; }

		//OBJ_Y
		public RuleCall getOBJ_YTerminalRuleCall_1() { return cOBJ_YTerminalRuleCall_1; }

		//value=AssignExtra
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//AssignExtra
		public RuleCall getValueAssignExtraParserRuleCall_2_0() { return cValueAssignExtraParserRuleCall_2_0; }
	}

	public class Object_MElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Object_M");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObj_mAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cOBJ_MTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueAssignExtraParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Object_M:
		//	{Obj_m} OBJ_M value=AssignExtra;
		@Override public ParserRule getRule() { return rule; }

		//{Obj_m} OBJ_M value=AssignExtra
		public Group getGroup() { return cGroup; }

		//{Obj_m}
		public Action getObj_mAction_0() { return cObj_mAction_0; }

		//OBJ_M
		public RuleCall getOBJ_MTerminalRuleCall_1() { return cOBJ_MTerminalRuleCall_1; }

		//value=AssignExtra
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//AssignExtra
		public RuleCall getValueAssignExtraParserRuleCall_2_0() { return cValueAssignExtraParserRuleCall_2_0; }
	}

	public class AssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEQTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cTABTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cValuesParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Assign:
		//	EQ TAB* Values;
		@Override public ParserRule getRule() { return rule; }

		//EQ TAB* Values
		public Group getGroup() { return cGroup; }

		//EQ
		public RuleCall getEQTerminalRuleCall_0() { return cEQTerminalRuleCall_0; }

		//TAB*
		public RuleCall getTABTerminalRuleCall_1() { return cTABTerminalRuleCall_1; }

		//Values
		public RuleCall getValuesParserRuleCall_2() { return cValuesParserRuleCall_2; }
	}

	public class AssignExtraElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssignExtra");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTABTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cPLUSTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cDPOINTTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cAssignParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//AssignExtra:
		//	TAB* (PLUS | DPOINT) Assign;
		@Override public ParserRule getRule() { return rule; }

		//TAB* (PLUS | DPOINT) Assign
		public Group getGroup() { return cGroup; }

		//TAB*
		public RuleCall getTABTerminalRuleCall_0() { return cTABTerminalRuleCall_0; }

		//PLUS | DPOINT
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//PLUS
		public RuleCall getPLUSTerminalRuleCall_1_0() { return cPLUSTerminalRuleCall_1_0; }

		//DPOINT
		public RuleCall getDPOINTTerminalRuleCall_1_1() { return cDPOINTTerminalRuleCall_1_1; }

		//Assign
		public RuleCall getAssignParserRuleCall_2() { return cAssignParserRuleCall_2; }
	}

	public class ValuesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Values");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cBACKSLASHTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cEolParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cTABTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Assignment cValuesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuesValueParserRuleCall_1_0 = (RuleCall)cValuesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cBACKSLASHTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cEolParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cTABTerminalRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Assignment cValuesAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cValuesValueParserRuleCall_2_3_0 = (RuleCall)cValuesAssignment_2_3.eContents().get(0);
		
		//Values:
		//	(BACKSLASH Eol TAB*)? values+=Value+ (BACKSLASH Eol TAB* values+=Value+)*;
		@Override public ParserRule getRule() { return rule; }

		//(BACKSLASH Eol TAB*)? values+=Value+ (BACKSLASH Eol TAB* values+=Value+)*
		public Group getGroup() { return cGroup; }

		//(BACKSLASH Eol TAB*)?
		public Group getGroup_0() { return cGroup_0; }

		//BACKSLASH
		public RuleCall getBACKSLASHTerminalRuleCall_0_0() { return cBACKSLASHTerminalRuleCall_0_0; }

		//Eol
		public RuleCall getEolParserRuleCall_0_1() { return cEolParserRuleCall_0_1; }

		//TAB*
		public RuleCall getTABTerminalRuleCall_0_2() { return cTABTerminalRuleCall_0_2; }

		//values+=Value+
		public Assignment getValuesAssignment_1() { return cValuesAssignment_1; }

		//Value
		public RuleCall getValuesValueParserRuleCall_1_0() { return cValuesValueParserRuleCall_1_0; }

		//(BACKSLASH Eol TAB* values+=Value+)*
		public Group getGroup_2() { return cGroup_2; }

		//BACKSLASH
		public RuleCall getBACKSLASHTerminalRuleCall_2_0() { return cBACKSLASHTerminalRuleCall_2_0; }

		//Eol
		public RuleCall getEolParserRuleCall_2_1() { return cEolParserRuleCall_2_1; }

		//TAB*
		public RuleCall getTABTerminalRuleCall_2_2() { return cTABTerminalRuleCall_2_2; }

		//values+=Value+
		public Assignment getValuesAssignment_2_3() { return cValuesAssignment_2_3; }

		//Value
		public RuleCall getValuesValueParserRuleCall_2_3_0() { return cValuesValueParserRuleCall_2_3_0; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cObjectFileAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cSYMBOLTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cOBJ_FILETerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cObjectSingleFileAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameSYMBOLTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cObjectVariableAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueVariableParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Assignment cAdditionalAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cAdditionalSLASHTerminalRuleCall_2_2_0 = (RuleCall)cAdditionalAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cObjectShellCmdAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueShellCmdParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cObjectStringAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cObjectShellCharAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cValueSHELL_CHARTerminalRuleCall_5_1_0 = (RuleCall)cValueAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cObjectDirAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final RuleCall cSYMBOLTerminalRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final RuleCall cSLASHTerminalRuleCall_6_2 = (RuleCall)cGroup_6.eContents().get(2);
		
		//Value:
		//	{ObjectFile} SYMBOL OBJ_FILE | {ObjectSingleFile} name=SYMBOL | {ObjectVariable} value=Variable additional=SLASH? |
		//	{ObjectShellCmd} value=ShellCmd | {ObjectString} STRING | {ObjectShellChar} value=SHELL_CHAR | {ObjectDir} SYMBOL
		//	SLASH;
		@Override public ParserRule getRule() { return rule; }

		//{ObjectFile} SYMBOL OBJ_FILE | {ObjectSingleFile} name=SYMBOL | {ObjectVariable} value=Variable additional=SLASH? |
		//{ObjectShellCmd} value=ShellCmd | {ObjectString} STRING | {ObjectShellChar} value=SHELL_CHAR | {ObjectDir} SYMBOL SLASH
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ObjectFile} SYMBOL OBJ_FILE
		public Group getGroup_0() { return cGroup_0; }

		//{ObjectFile}
		public Action getObjectFileAction_0_0() { return cObjectFileAction_0_0; }

		//SYMBOL
		public RuleCall getSYMBOLTerminalRuleCall_0_1() { return cSYMBOLTerminalRuleCall_0_1; }

		//OBJ_FILE
		public RuleCall getOBJ_FILETerminalRuleCall_0_2() { return cOBJ_FILETerminalRuleCall_0_2; }

		//{ObjectSingleFile} name=SYMBOL
		public Group getGroup_1() { return cGroup_1; }

		//{ObjectSingleFile}
		public Action getObjectSingleFileAction_1_0() { return cObjectSingleFileAction_1_0; }

		//name=SYMBOL
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//SYMBOL
		public RuleCall getNameSYMBOLTerminalRuleCall_1_1_0() { return cNameSYMBOLTerminalRuleCall_1_1_0; }

		//{ObjectVariable} value=Variable additional=SLASH?
		public Group getGroup_2() { return cGroup_2; }

		//{ObjectVariable}
		public Action getObjectVariableAction_2_0() { return cObjectVariableAction_2_0; }

		//value=Variable
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//Variable
		public RuleCall getValueVariableParserRuleCall_2_1_0() { return cValueVariableParserRuleCall_2_1_0; }

		//additional=SLASH?
		public Assignment getAdditionalAssignment_2_2() { return cAdditionalAssignment_2_2; }

		//SLASH
		public RuleCall getAdditionalSLASHTerminalRuleCall_2_2_0() { return cAdditionalSLASHTerminalRuleCall_2_2_0; }

		//{ObjectShellCmd} value=ShellCmd
		public Group getGroup_3() { return cGroup_3; }

		//{ObjectShellCmd}
		public Action getObjectShellCmdAction_3_0() { return cObjectShellCmdAction_3_0; }

		//value=ShellCmd
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }

		//ShellCmd
		public RuleCall getValueShellCmdParserRuleCall_3_1_0() { return cValueShellCmdParserRuleCall_3_1_0; }

		//{ObjectString} STRING
		public Group getGroup_4() { return cGroup_4; }

		//{ObjectString}
		public Action getObjectStringAction_4_0() { return cObjectStringAction_4_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_4_1() { return cSTRINGTerminalRuleCall_4_1; }

		//{ObjectShellChar} value=SHELL_CHAR
		public Group getGroup_5() { return cGroup_5; }

		//{ObjectShellChar}
		public Action getObjectShellCharAction_5_0() { return cObjectShellCharAction_5_0; }

		//value=SHELL_CHAR
		public Assignment getValueAssignment_5_1() { return cValueAssignment_5_1; }

		//SHELL_CHAR
		public RuleCall getValueSHELL_CHARTerminalRuleCall_5_1_0() { return cValueSHELL_CHARTerminalRuleCall_5_1_0; }

		//{ObjectDir} SYMBOL SLASH
		public Group getGroup_6() { return cGroup_6; }

		//{ObjectDir}
		public Action getObjectDirAction_6_0() { return cObjectDirAction_6_0; }

		//SYMBOL
		public RuleCall getSYMBOLTerminalRuleCall_6_1() { return cSYMBOLTerminalRuleCall_6_1; }

		//SLASH
		public RuleCall getSLASHTerminalRuleCall_6_2() { return cSLASHTerminalRuleCall_6_2; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cVariableAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cDOLLARTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNameSYMBOLTerminalRuleCall_0_2_0 = (RuleCall)cNameAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cDOLLARTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cBRACE_STARTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNameSYMBOLTerminalRuleCall_1_2_0 = (RuleCall)cNameAssignment_1_2.eContents().get(0);
		private final RuleCall cBRACE_ENDTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		
		//Variable:
		//	{Variable} DOLLAR name=SYMBOL | DOLLAR BRACE_START name=SYMBOL BRACE_END;
		@Override public ParserRule getRule() { return rule; }

		//{Variable} DOLLAR name=SYMBOL | DOLLAR BRACE_START name=SYMBOL BRACE_END
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Variable} DOLLAR name=SYMBOL
		public Group getGroup_0() { return cGroup_0; }

		//{Variable}
		public Action getVariableAction_0_0() { return cVariableAction_0_0; }

		//DOLLAR
		public RuleCall getDOLLARTerminalRuleCall_0_1() { return cDOLLARTerminalRuleCall_0_1; }

		//name=SYMBOL
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }

		//SYMBOL
		public RuleCall getNameSYMBOLTerminalRuleCall_0_2_0() { return cNameSYMBOLTerminalRuleCall_0_2_0; }

		//DOLLAR BRACE_START name=SYMBOL BRACE_END
		public Group getGroup_1() { return cGroup_1; }

		//DOLLAR
		public RuleCall getDOLLARTerminalRuleCall_1_0() { return cDOLLARTerminalRuleCall_1_0; }

		//BRACE_START
		public RuleCall getBRACE_STARTTerminalRuleCall_1_1() { return cBRACE_STARTTerminalRuleCall_1_1; }

		//name=SYMBOL
		public Assignment getNameAssignment_1_2() { return cNameAssignment_1_2; }

		//SYMBOL
		public RuleCall getNameSYMBOLTerminalRuleCall_1_2_0() { return cNameSYMBOLTerminalRuleCall_1_2_0; }

		//BRACE_END
		public RuleCall getBRACE_ENDTerminalRuleCall_1_3() { return cBRACE_ENDTerminalRuleCall_1_3; }
	}

	public class ShellCmdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShellCmd");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cShellCmdAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final RuleCall cDOLLARTerminalRuleCall_0_1_0 = (RuleCall)cGroup_0_1.eContents().get(0);
		private final RuleCall cBRACE_STARTTerminalRuleCall_0_1_1 = (RuleCall)cGroup_0_1.eContents().get(1);
		private final Assignment cNameAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cNameSYMBOLTerminalRuleCall_0_1_2_0 = (RuleCall)cNameAssignment_0_1_2.eContents().get(0);
		private final Assignment cShellPartAssignment_0_1_3 = (Assignment)cGroup_0_1.eContents().get(3);
		private final RuleCall cShellPartShellPartParserRuleCall_0_1_3_0 = (RuleCall)cShellPartAssignment_0_1_3.eContents().get(0);
		private final RuleCall cBRACE_ENDTerminalRuleCall_0_1_4 = (RuleCall)cGroup_0_1.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cIncludeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cINCLUDETerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//ShellCmd:
		//	{ShellCmd} (DOLLAR BRACE_START name=SYMBOL shellPart+=ShellPart+ BRACE_END) | {Include} INCLUDE;
		@Override public ParserRule getRule() { return rule; }

		//{ShellCmd} (DOLLAR BRACE_START name=SYMBOL shellPart+=ShellPart+ BRACE_END) | {Include} INCLUDE
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ShellCmd} (DOLLAR BRACE_START name=SYMBOL shellPart+=ShellPart+ BRACE_END)
		public Group getGroup_0() { return cGroup_0; }

		//{ShellCmd}
		public Action getShellCmdAction_0_0() { return cShellCmdAction_0_0; }

		//DOLLAR BRACE_START name=SYMBOL shellPart+=ShellPart+ BRACE_END
		public Group getGroup_0_1() { return cGroup_0_1; }

		//DOLLAR
		public RuleCall getDOLLARTerminalRuleCall_0_1_0() { return cDOLLARTerminalRuleCall_0_1_0; }

		//BRACE_START
		public RuleCall getBRACE_STARTTerminalRuleCall_0_1_1() { return cBRACE_STARTTerminalRuleCall_0_1_1; }

		//name=SYMBOL
		public Assignment getNameAssignment_0_1_2() { return cNameAssignment_0_1_2; }

		//SYMBOL
		public RuleCall getNameSYMBOLTerminalRuleCall_0_1_2_0() { return cNameSYMBOLTerminalRuleCall_0_1_2_0; }

		//shellPart+=ShellPart+
		public Assignment getShellPartAssignment_0_1_3() { return cShellPartAssignment_0_1_3; }

		//ShellPart
		public RuleCall getShellPartShellPartParserRuleCall_0_1_3_0() { return cShellPartShellPartParserRuleCall_0_1_3_0; }

		//BRACE_END
		public RuleCall getBRACE_ENDTerminalRuleCall_0_1_4() { return cBRACE_ENDTerminalRuleCall_0_1_4; }

		//{Include} INCLUDE
		public Group getGroup_1() { return cGroup_1; }

		//{Include}
		public Action getIncludeAction_1_0() { return cIncludeAction_1_0; }

		//INCLUDE
		public RuleCall getINCLUDETerminalRuleCall_1_1() { return cINCLUDETerminalRuleCall_1_1; }
	}

	public class ShellPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShellPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cShellPartAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cValVarSlashSymParserRuleCall_1_0_0 = (RuleCall)cValAssignment_1_0.eContents().get(0);
		private final Assignment cCmdAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cCmdShellCmdParserRuleCall_1_1_0 = (RuleCall)cCmdAssignment_1_1.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		private final RuleCall cCOMMATerminalRuleCall_1_3 = (RuleCall)cAlternatives_1.eContents().get(3);
		private final RuleCall cSHELL_CHARTerminalRuleCall_1_4 = (RuleCall)cAlternatives_1.eContents().get(4);
		private final Group cGroup_1_5 = (Group)cAlternatives_1.eContents().get(5);
		private final RuleCall cBACKSLASHTerminalRuleCall_1_5_0 = (RuleCall)cGroup_1_5.eContents().get(0);
		private final RuleCall cEolParserRuleCall_1_5_1 = (RuleCall)cGroup_1_5.eContents().get(1);
		private final RuleCall cTABTerminalRuleCall_1_5_2 = (RuleCall)cGroup_1_5.eContents().get(2);
		
		//ShellPart:
		//	{ShellPart} (val=VarSlashSym | cmd=ShellCmd | STRING | COMMA | SHELL_CHAR | BACKSLASH Eol TAB*);
		@Override public ParserRule getRule() { return rule; }

		//{ShellPart} (val=VarSlashSym | cmd=ShellCmd | STRING | COMMA | SHELL_CHAR | BACKSLASH Eol TAB*)
		public Group getGroup() { return cGroup; }

		//{ShellPart}
		public Action getShellPartAction_0() { return cShellPartAction_0; }

		//val=VarSlashSym | cmd=ShellCmd | STRING | COMMA | SHELL_CHAR | BACKSLASH Eol TAB*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//val=VarSlashSym
		public Assignment getValAssignment_1_0() { return cValAssignment_1_0; }

		//VarSlashSym
		public RuleCall getValVarSlashSymParserRuleCall_1_0_0() { return cValVarSlashSymParserRuleCall_1_0_0; }

		//cmd=ShellCmd
		public Assignment getCmdAssignment_1_1() { return cCmdAssignment_1_1; }

		//ShellCmd
		public RuleCall getCmdShellCmdParserRuleCall_1_1_0() { return cCmdShellCmdParserRuleCall_1_1_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_2() { return cSTRINGTerminalRuleCall_1_2; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1_3() { return cCOMMATerminalRuleCall_1_3; }

		//SHELL_CHAR
		public RuleCall getSHELL_CHARTerminalRuleCall_1_4() { return cSHELL_CHARTerminalRuleCall_1_4; }

		//BACKSLASH Eol TAB*
		public Group getGroup_1_5() { return cGroup_1_5; }

		//BACKSLASH
		public RuleCall getBACKSLASHTerminalRuleCall_1_5_0() { return cBACKSLASHTerminalRuleCall_1_5_0; }

		//Eol
		public RuleCall getEolParserRuleCall_1_5_1() { return cEolParserRuleCall_1_5_1; }

		//TAB*
		public RuleCall getTABTerminalRuleCall_1_5_2() { return cTABTerminalRuleCall_1_5_2; }
	}

	public class VarSlashSymElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarSlashSym");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNameSLASHTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cNameSYMBOLTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//VarSlashSym:
		//	Variable | name=SLASH | name=SYMBOL;
		@Override public ParserRule getRule() { return rule; }

		//Variable | name=SLASH | name=SYMBOL
		public Alternatives getAlternatives() { return cAlternatives; }

		//Variable
		public RuleCall getVariableParserRuleCall_0() { return cVariableParserRuleCall_0; }

		//name=SLASH
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//SLASH
		public RuleCall getNameSLASHTerminalRuleCall_1_0() { return cNameSLASHTerminalRuleCall_1_0; }

		//name=SYMBOL
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//SYMBOL
		public RuleCall getNameSYMBOLTerminalRuleCall_2_0() { return cNameSYMBOLTerminalRuleCall_2_0; }
	}

	public class EolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Eol");
		private final RuleCall cNLITerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Eol:
		//	NLI+;
		@Override public ParserRule getRule() { return rule; }

		//NLI+
		public RuleCall getNLITerminalRuleCall() { return cNLITerminalRuleCall; }
	}
	
	
	private final ModelElements pModel;
	private final BuildEntryElements pBuildEntry;
	private final EntryElements pEntry;
	private final IfElements pIf;
	private final Object_YElements pObject_Y;
	private final Object_MElements pObject_M;
	private final AssignElements pAssign;
	private final AssignExtraElements pAssignExtra;
	private final ValuesElements pValues;
	private final ValueElements pValue;
	private final VariableElements pVariable;
	private final ShellCmdElements pShellCmd;
	private final ShellPartElements pShellPart;
	private final VarSlashSymElements pVarSlashSym;
	private final EolElements pEol;
	private final TerminalRule tNLI;
	private final TerminalRule tTAB;
	private final TerminalRule tWSS;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tOBJ_START;
	private final TerminalRule tOBJ_Y;
	private final TerminalRule tOBJ_M;
	private final TerminalRule tIFEQ;
	private final TerminalRule tIFNEQ;
	private final TerminalRule tIFNDEF;
	private final TerminalRule tELSE;
	private final TerminalRule tENDIF;
	private final TerminalRule tY;
	private final TerminalRule tM;
	private final TerminalRule tOBJ_FILE;
	private final TerminalRule tINCLUDE;
	private final TerminalRule tSYMBOL;
	private final TerminalRule tSHELL_CHAR;
	private final TerminalRule tDOLLAR;
	private final TerminalRule tBRACE_START;
	private final TerminalRule tBRACE_END;
	private final TerminalRule tQUOTE;
	private final TerminalRule tPLUS;
	private final TerminalRule tDPOINT;
	private final TerminalRule tEQ;
	private final TerminalRule tSLASH;
	private final TerminalRule tBACKSLASH;
	private final TerminalRule tCOMMA;
	private final TerminalRule tSEMICOLON;
	private final TerminalRule tSTR_ESC;
	private final TerminalRule tSTRING;
	
	private final Grammar grammar;

	@Inject
	public KbuildGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pModel = new ModelElements();
		this.pBuildEntry = new BuildEntryElements();
		this.pEntry = new EntryElements();
		this.pIf = new IfElements();
		this.pObject_Y = new Object_YElements();
		this.pObject_M = new Object_MElements();
		this.pAssign = new AssignElements();
		this.pAssignExtra = new AssignExtraElements();
		this.pValues = new ValuesElements();
		this.pValue = new ValueElements();
		this.pVariable = new VariableElements();
		this.pShellCmd = new ShellCmdElements();
		this.pShellPart = new ShellPartElements();
		this.pVarSlashSym = new VarSlashSymElements();
		this.pEol = new EolElements();
		this.tNLI = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NLI");
		this.tTAB = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TAB");
		this.tWSS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WSS");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT");
		this.tOBJ_START = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OBJ_START");
		this.tOBJ_Y = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OBJ_Y");
		this.tOBJ_M = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OBJ_M");
		this.tIFEQ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IFEQ");
		this.tIFNEQ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IFNEQ");
		this.tIFNDEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IFNDEF");
		this.tELSE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ELSE");
		this.tENDIF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ENDIF");
		this.tY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "Y");
		this.tM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "M");
		this.tOBJ_FILE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OBJ_FILE");
		this.tINCLUDE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INCLUDE");
		this.tSYMBOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SYMBOL");
		this.tSHELL_CHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SHELL_CHAR");
		this.tDOLLAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOLLAR");
		this.tBRACE_START = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BRACE_START");
		this.tBRACE_END = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BRACE_END");
		this.tQUOTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "QUOTE");
		this.tPLUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PLUS");
		this.tDPOINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DPOINT");
		this.tEQ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EQ");
		this.tSLASH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SLASH");
		this.tBACKSLASH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BACKSLASH");
		this.tCOMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMMA");
		this.tSEMICOLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SEMICOLON");
		this.tSTR_ESC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STR_ESC");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("at.jku.isse.ecco.kefax.kbuild.Kbuild".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//	{Model} buildEntry+=BuildEntry? (Eol buildEntry+=BuildEntry)* Eol;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//BuildEntry:
	//	{BuildEntry} value=Entry | {IfEq} IFEQ value=If | {IfNEq} IFNEQ value=If | {Ifndef} IFNDEF name=SYMBOL Eol
	//	(value=Object_Y | value=Object_M) Eol ENDIF | {HostProgram} name=SYMBOL variable=Variable? value=AssignExtra
	//	inner=Assign? | {Object} (value=Object_Y | value=Object_M) | {Target} target=Values DPOINT (SEMICOLON | values+=Values
	//	(Eol TAB+ values+=Values)*) | {MyVariable} name=SYMBOL variable=Variable? value=Assign;
	public BuildEntryElements getBuildEntryAccess() {
		return pBuildEntry;
	}
	
	public ParserRule getBuildEntryRule() {
		return getBuildEntryAccess().getRule();
	}

	//Entry:
	//	{Entry} OBJ_START variable=Variable value=AssignExtra;
	public EntryElements getEntryAccess() {
		return pEntry;
	}
	
	public ParserRule getEntryRule() {
		return getEntryAccess().getRule();
	}

	//If:
	//	BRACE_START (Variable COMMA (Y | M) | shell=ShellCmd COMMA?) BRACE_END Eol TAB* (value=Object_Y | value=Object_M |
	//	value=Entry | value=ShellCmd) Eol (ELSE Eol TAB* (elsevalue=Object_Y | elsevalue=Object_M) Eol)? ENDIF;
	public IfElements getIfAccess() {
		return pIf;
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}

	//Object_Y:
	//	{Obj_y} OBJ_Y value=AssignExtra;
	public Object_YElements getObject_YAccess() {
		return pObject_Y;
	}
	
	public ParserRule getObject_YRule() {
		return getObject_YAccess().getRule();
	}

	//Object_M:
	//	{Obj_m} OBJ_M value=AssignExtra;
	public Object_MElements getObject_MAccess() {
		return pObject_M;
	}
	
	public ParserRule getObject_MRule() {
		return getObject_MAccess().getRule();
	}

	//Assign:
	//	EQ TAB* Values;
	public AssignElements getAssignAccess() {
		return pAssign;
	}
	
	public ParserRule getAssignRule() {
		return getAssignAccess().getRule();
	}

	//AssignExtra:
	//	TAB* (PLUS | DPOINT) Assign;
	public AssignExtraElements getAssignExtraAccess() {
		return pAssignExtra;
	}
	
	public ParserRule getAssignExtraRule() {
		return getAssignExtraAccess().getRule();
	}

	//Values:
	//	(BACKSLASH Eol TAB*)? values+=Value+ (BACKSLASH Eol TAB* values+=Value+)*;
	public ValuesElements getValuesAccess() {
		return pValues;
	}
	
	public ParserRule getValuesRule() {
		return getValuesAccess().getRule();
	}

	//Value:
	//	{ObjectFile} SYMBOL OBJ_FILE | {ObjectSingleFile} name=SYMBOL | {ObjectVariable} value=Variable additional=SLASH? |
	//	{ObjectShellCmd} value=ShellCmd | {ObjectString} STRING | {ObjectShellChar} value=SHELL_CHAR | {ObjectDir} SYMBOL
	//	SLASH;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//Variable:
	//	{Variable} DOLLAR name=SYMBOL | DOLLAR BRACE_START name=SYMBOL BRACE_END;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//ShellCmd:
	//	{ShellCmd} (DOLLAR BRACE_START name=SYMBOL shellPart+=ShellPart+ BRACE_END) | {Include} INCLUDE;
	public ShellCmdElements getShellCmdAccess() {
		return pShellCmd;
	}
	
	public ParserRule getShellCmdRule() {
		return getShellCmdAccess().getRule();
	}

	//ShellPart:
	//	{ShellPart} (val=VarSlashSym | cmd=ShellCmd | STRING | COMMA | SHELL_CHAR | BACKSLASH Eol TAB*);
	public ShellPartElements getShellPartAccess() {
		return pShellPart;
	}
	
	public ParserRule getShellPartRule() {
		return getShellPartAccess().getRule();
	}

	//VarSlashSym:
	//	Variable | name=SLASH | name=SYMBOL;
	public VarSlashSymElements getVarSlashSymAccess() {
		return pVarSlashSym;
	}
	
	public ParserRule getVarSlashSymRule() {
		return getVarSlashSymAccess().getRule();
	}

	//Eol:
	//	NLI+;
	public EolElements getEolAccess() {
		return pEol;
	}
	
	public ParserRule getEolRule() {
		return getEolAccess().getRule();
	}

	//// Lexer Rules
	//terminal NLI:
	//	"\n";
	public TerminalRule getNLIRule() {
		return tNLI;
	} 

	//terminal TAB:
	//	"\t";
	public TerminalRule getTABRule() {
		return tTAB;
	} 

	////terminal WSS : (' '|'\t')+ ;
	//terminal WSS:
	//	" "+;
	public TerminalRule getWSSRule() {
		return tWSS;
	} 

	//terminal SL_COMMENT:
	//	"#" !"\n"*;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	} 

	//terminal OBJ_START:
	//	"obj-";
	public TerminalRule getOBJ_STARTRule() {
		return tOBJ_START;
	} 

	//// xtext understand obj-y as one unique token
	//terminal OBJ_Y:
	//	"obj-y";
	public TerminalRule getOBJ_YRule() {
		return tOBJ_Y;
	} 

	//// xtext understand obj-m as one unique token
	//terminal OBJ_M:
	//	"obj-m";
	public TerminalRule getOBJ_MRule() {
		return tOBJ_M;
	} 

	//terminal IFEQ:
	//	"ifeq";
	public TerminalRule getIFEQRule() {
		return tIFEQ;
	} 

	//terminal IFNEQ:
	//	"ifneq";
	public TerminalRule getIFNEQRule() {
		return tIFNEQ;
	} 

	//terminal IFNDEF:
	//	"ifndef";
	public TerminalRule getIFNDEFRule() {
		return tIFNDEF;
	} 

	//terminal ELSE:
	//	"else";
	public TerminalRule getELSERule() {
		return tELSE;
	} 

	//terminal ENDIF:
	//	"endif";
	public TerminalRule getENDIFRule() {
		return tENDIF;
	} 

	//terminal Y:
	//	"y";
	public TerminalRule getYRule() {
		return tY;
	} 

	//terminal M:
	//	"m";
	public TerminalRule getMRule() {
		return tM;
	} 

	//terminal OBJ_FILE:
	//	".o";
	public TerminalRule getOBJ_FILERule() {
		return tOBJ_FILE;
	} 

	//terminal INCLUDE:
	//	"include" !NLI+;
	public TerminalRule getINCLUDERule() {
		return tINCLUDE;
	} 

	//terminal SYMBOL:
	//	("A".."Z" | "a".."z" | "0".."9" | "_" | "-" | "." | "@")+;
	public TerminalRule getSYMBOLRule() {
		return tSYMBOL;
	} 

	//terminal SHELL_CHAR:
	//	">" | "<" | "|" | "&";
	public TerminalRule getSHELL_CHARRule() {
		return tSHELL_CHAR;
	} 

	//terminal DOLLAR:
	//	"$";
	public TerminalRule getDOLLARRule() {
		return tDOLLAR;
	} 

	//terminal BRACE_START:
	//	"(";
	public TerminalRule getBRACE_STARTRule() {
		return tBRACE_START;
	} 

	//terminal BRACE_END:
	//	")";
	public TerminalRule getBRACE_ENDRule() {
		return tBRACE_END;
	} 

	//terminal QUOTE:
	//	"\"";
	public TerminalRule getQUOTERule() {
		return tQUOTE;
	} 

	//terminal PLUS:
	//	"+";
	public TerminalRule getPLUSRule() {
		return tPLUS;
	} 

	//terminal DPOINT:
	//	":";
	public TerminalRule getDPOINTRule() {
		return tDPOINT;
	} 

	//terminal EQ:
	//	"=";
	public TerminalRule getEQRule() {
		return tEQ;
	} 

	//terminal SLASH:
	//	"/";
	public TerminalRule getSLASHRule() {
		return tSLASH;
	} 

	//terminal BACKSLASH:
	//	"\\";
	public TerminalRule getBACKSLASHRule() {
		return tBACKSLASH;
	} 

	//terminal COMMA:
	//	",";
	public TerminalRule getCOMMARule() {
		return tCOMMA;
	} 

	//terminal SEMICOLON:
	//	";";
	public TerminalRule getSEMICOLONRule() {
		return tSEMICOLON;
	} 

	//terminal STR_ESC:
	//	"\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\\" | "$");
	public TerminalRule getSTR_ESCRule() {
		return tSTR_ESC;
	} 

	//terminal STRING:
	//	"\"" (STR_ESC | !("\"" | "\r" | "\n" | "\\"))* "\"";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	} 
}
