/*
 * generated by Xtext 2.9.0-SNAPSHOT
 */
package at.jku.weiner.kefax.kbuild.serializer;

import at.jku.weiner.kefax.kbuild.services.KbuildGrammarAccess;
import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class KbuildSyntacticSequencer extends AbstractSyntacticSequencer {

	protected KbuildGrammarAccess grammarAccess;
	protected AbstractElementAlias match_AssignExtra_DPOINTTerminalRuleCall_1_1_or_PLUSTerminalRuleCall_1_0;
	protected AbstractElementAlias match_AssignExtra_TABTerminalRuleCall_0_a;
	protected AbstractElementAlias match_Assign_TABTerminalRuleCall_1_a;
	protected AbstractElementAlias match_BuildEntry_TABTerminalRuleCall_6_3_1_1_1_p;
	protected AbstractElementAlias match_If_COMMATerminalRuleCall_1_1_1_q;
	protected AbstractElementAlias match_If_MTerminalRuleCall_1_0_2_1_or_YTerminalRuleCall_1_0_2_0;
	protected AbstractElementAlias match_If_TABTerminalRuleCall_4_a;
	protected AbstractElementAlias match_If_TABTerminalRuleCall_7_2_a;
	protected AbstractElementAlias match_ShellPart___BACKSLASHTerminalRuleCall_1_5_0_EolParserRuleCall_1_5_1_TABTerminalRuleCall_1_5_2_a___or___COMMATerminalRuleCall_1_3_or_SHELL_CHARTerminalRuleCall_1_4_or_STRINGTerminalRuleCall_1_2__;
	protected AbstractElementAlias match_Values_TABTerminalRuleCall_2_2_a;
	protected AbstractElementAlias match_Values___BACKSLASHTerminalRuleCall_0_0_EolParserRuleCall_0_1_TABTerminalRuleCall_0_2_a__q;
	protected AbstractElementAlias match_Values___BACKSLASHTerminalRuleCall_2_0_EolParserRuleCall_2_1_TABTerminalRuleCall_2_2_a__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (KbuildGrammarAccess) access;
		match_AssignExtra_DPOINTTerminalRuleCall_1_1_or_PLUSTerminalRuleCall_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getAssignExtraAccess().getDPOINTTerminalRuleCall_1_1()), new TokenAlias(false, false, grammarAccess.getAssignExtraAccess().getPLUSTerminalRuleCall_1_0()));
		match_AssignExtra_TABTerminalRuleCall_0_a = new TokenAlias(true, true, grammarAccess.getAssignExtraAccess().getTABTerminalRuleCall_0());
		match_Assign_TABTerminalRuleCall_1_a = new TokenAlias(true, true, grammarAccess.getAssignAccess().getTABTerminalRuleCall_1());
		match_BuildEntry_TABTerminalRuleCall_6_3_1_1_1_p = new TokenAlias(true, false, grammarAccess.getBuildEntryAccess().getTABTerminalRuleCall_6_3_1_1_1());
		match_If_COMMATerminalRuleCall_1_1_1_q = new TokenAlias(false, true, grammarAccess.getIfAccess().getCOMMATerminalRuleCall_1_1_1());
		match_If_MTerminalRuleCall_1_0_2_1_or_YTerminalRuleCall_1_0_2_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getIfAccess().getMTerminalRuleCall_1_0_2_1()), new TokenAlias(false, false, grammarAccess.getIfAccess().getYTerminalRuleCall_1_0_2_0()));
		match_If_TABTerminalRuleCall_4_a = new TokenAlias(true, true, grammarAccess.getIfAccess().getTABTerminalRuleCall_4());
		match_If_TABTerminalRuleCall_7_2_a = new TokenAlias(true, true, grammarAccess.getIfAccess().getTABTerminalRuleCall_7_2());
		match_ShellPart___BACKSLASHTerminalRuleCall_1_5_0_EolParserRuleCall_1_5_1_TABTerminalRuleCall_1_5_2_a___or___COMMATerminalRuleCall_1_3_or_SHELL_CHARTerminalRuleCall_1_4_or_STRINGTerminalRuleCall_1_2__ = new AlternativeAlias(false, false, new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getShellPartAccess().getCOMMATerminalRuleCall_1_3()), new TokenAlias(false, false, grammarAccess.getShellPartAccess().getSHELL_CHARTerminalRuleCall_1_4()), new TokenAlias(false, false, grammarAccess.getShellPartAccess().getSTRINGTerminalRuleCall_1_2())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getShellPartAccess().getBACKSLASHTerminalRuleCall_1_5_0()), new TokenAlias(false, false, grammarAccess.getShellPartAccess().getEolParserRuleCall_1_5_1()), new TokenAlias(true, true, grammarAccess.getShellPartAccess().getTABTerminalRuleCall_1_5_2())));
		match_Values_TABTerminalRuleCall_2_2_a = new TokenAlias(true, true, grammarAccess.getValuesAccess().getTABTerminalRuleCall_2_2());
		match_Values___BACKSLASHTerminalRuleCall_0_0_EolParserRuleCall_0_1_TABTerminalRuleCall_0_2_a__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getValuesAccess().getBACKSLASHTerminalRuleCall_0_0()), new TokenAlias(false, false, grammarAccess.getValuesAccess().getEolParserRuleCall_0_1()), new TokenAlias(true, true, grammarAccess.getValuesAccess().getTABTerminalRuleCall_0_2()));
		match_Values___BACKSLASHTerminalRuleCall_2_0_EolParserRuleCall_2_1_TABTerminalRuleCall_2_2_a__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getValuesAccess().getBACKSLASHTerminalRuleCall_2_0()), new TokenAlias(false, false, grammarAccess.getValuesAccess().getEolParserRuleCall_2_1()), new TokenAlias(true, true, grammarAccess.getValuesAccess().getTABTerminalRuleCall_2_2()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if(ruleCall.getRule() == grammarAccess.getBACKSLASHRule())
			return getBACKSLASHToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getBRACE_ENDRule())
			return getBRACE_ENDToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getBRACE_STARTRule())
			return getBRACE_STARTToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getCOMMARule())
			return getCOMMAToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getDOLLARRule())
			return getDOLLARToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getDPOINTRule())
			return getDPOINTToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getELSERule())
			return getELSEToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getENDIFRule())
			return getENDIFToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getEQRule())
			return getEQToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getEolRule())
			return getEolToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getIFEQRule())
			return getIFEQToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getIFNDEFRule())
			return getIFNDEFToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getIFNEQRule())
			return getIFNEQToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getINCLUDERule())
			return getINCLUDEToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getMRule())
			return getMToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getOBJ_FILERule())
			return getOBJ_FILEToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getOBJ_MRule())
			return getOBJ_MToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getOBJ_STARTRule())
			return getOBJ_STARTToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getOBJ_YRule())
			return getOBJ_YToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getPLUSRule())
			return getPLUSToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getSEMICOLONRule())
			return getSEMICOLONToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getSHELL_CHARRule())
			return getSHELL_CHARToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getSLASHRule())
			return getSLASHToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getSTRINGRule())
			return getSTRINGToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getSYMBOLRule())
			return getSYMBOLToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getTABRule())
			return getTABToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getYRule())
			return getYToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal BACKSLASH: '\\';
	 */
	protected String getBACKSLASHToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\\";
	}
	
	/**
	 * terminal BRACE_END : ')';
	 */
	protected String getBRACE_ENDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ")";
	}
	
	/**
	 * terminal BRACE_START: '(';
	 */
	protected String getBRACE_STARTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "(";
	}
	
	/**
	 * terminal COMMA: ',';
	 */
	protected String getCOMMAToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ",";
	}
	
	/**
	 * terminal DOLLAR : '$';
	 */
	protected String getDOLLARToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "$";
	}
	
	/**
	 * terminal DPOINT : ':';
	 */
	protected String getDPOINTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ":";
	}
	
	/**
	 * terminal ELSE: 'else';
	 */
	protected String getELSEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "else";
	}
	
	/**
	 * terminal ENDIF: 'endif';
	 */
	protected String getENDIFToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "endif";
	}
	
	/**
	 * terminal EQ : '=';
	 */
	protected String getEQToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "=";
	}
	
	/**
	 * Eol: NLI+;
	 */
	protected String getEolToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\n";
	}
	
	/**
	 * terminal IFEQ: 'ifeq';
	 */
	protected String getIFEQToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "ifeq";
	}
	
	/**
	 * terminal IFNDEF: 'ifndef';
	 */
	protected String getIFNDEFToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "ifndef";
	}
	
	/**
	 * terminal IFNEQ: 'ifneq';
	 */
	protected String getIFNEQToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "ifneq";
	}
	
	/**
	 * terminal INCLUDE: 'include' !(NLI)+;
	 */
	protected String getINCLUDEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "include";
	}
	
	/**
	 * terminal M: 'm';
	 */
	protected String getMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "m";
	}
	
	/**
	 * terminal OBJ_FILE: '.o';
	 */
	protected String getOBJ_FILEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ".o";
	}
	
	/**
	 * terminal OBJ_M : 'obj-m';
	 */
	protected String getOBJ_MToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "obj-m";
	}
	
	/**
	 * terminal OBJ_START : 'obj-';
	 */
	protected String getOBJ_STARTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "obj-";
	}
	
	/**
	 * terminal OBJ_Y : 'obj-y';
	 */
	protected String getOBJ_YToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "obj-y";
	}
	
	/**
	 * terminal PLUS : '+';
	 */
	protected String getPLUSToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "+";
	}
	
	/**
	 * terminal SEMICOLON: ';';
	 */
	protected String getSEMICOLONToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ";";
	}
	
	/**
	 * terminal SHELL_CHAR: ('>'|'<'|'|'|'&');
	 */
	protected String getSHELL_CHARToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ">";
	}
	
	/**
	 * terminal SLASH: '/';
	 */
	protected String getSLASHToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "/";
	}
	
	/**
	 * terminal STRING:
	 * 	'"' (STR_ESC | !('"'|'\r'|'\n'|'\\'))* '"'
	 * 	;
	 */
	protected String getSTRINGToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\"\"";
	}
	
	/**
	 * terminal SYMBOL : ('A'..'Z'|'a'..'z'|'0'..'9'|'_'|'-'|'.'|'@')+;
	 */
	protected String getSYMBOLToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal TAB: '\t';
	 */
	protected String getTABToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\t";
	}
	
	/**
	 * terminal Y: 'y';
	 */
	protected String getYToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "y";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if(match_AssignExtra_DPOINTTerminalRuleCall_1_1_or_PLUSTerminalRuleCall_1_0.equals(syntax))
				emit_AssignExtra_DPOINTTerminalRuleCall_1_1_or_PLUSTerminalRuleCall_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_AssignExtra_TABTerminalRuleCall_0_a.equals(syntax))
				emit_AssignExtra_TABTerminalRuleCall_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Assign_TABTerminalRuleCall_1_a.equals(syntax))
				emit_Assign_TABTerminalRuleCall_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_BuildEntry_TABTerminalRuleCall_6_3_1_1_1_p.equals(syntax))
				emit_BuildEntry_TABTerminalRuleCall_6_3_1_1_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_If_COMMATerminalRuleCall_1_1_1_q.equals(syntax))
				emit_If_COMMATerminalRuleCall_1_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_If_MTerminalRuleCall_1_0_2_1_or_YTerminalRuleCall_1_0_2_0.equals(syntax))
				emit_If_MTerminalRuleCall_1_0_2_1_or_YTerminalRuleCall_1_0_2_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_If_TABTerminalRuleCall_4_a.equals(syntax))
				emit_If_TABTerminalRuleCall_4_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_If_TABTerminalRuleCall_7_2_a.equals(syntax))
				emit_If_TABTerminalRuleCall_7_2_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_ShellPart___BACKSLASHTerminalRuleCall_1_5_0_EolParserRuleCall_1_5_1_TABTerminalRuleCall_1_5_2_a___or___COMMATerminalRuleCall_1_3_or_SHELL_CHARTerminalRuleCall_1_4_or_STRINGTerminalRuleCall_1_2__.equals(syntax))
				emit_ShellPart___BACKSLASHTerminalRuleCall_1_5_0_EolParserRuleCall_1_5_1_TABTerminalRuleCall_1_5_2_a___or___COMMATerminalRuleCall_1_3_or_SHELL_CHARTerminalRuleCall_1_4_or_STRINGTerminalRuleCall_1_2__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Values_TABTerminalRuleCall_2_2_a.equals(syntax))
				emit_Values_TABTerminalRuleCall_2_2_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Values___BACKSLASHTerminalRuleCall_0_0_EolParserRuleCall_0_1_TABTerminalRuleCall_0_2_a__q.equals(syntax))
				emit_Values___BACKSLASHTerminalRuleCall_0_0_EolParserRuleCall_0_1_TABTerminalRuleCall_0_2_a__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Values___BACKSLASHTerminalRuleCall_2_0_EolParserRuleCall_2_1_TABTerminalRuleCall_2_2_a__q.equals(syntax))
				emit_Values___BACKSLASHTerminalRuleCall_2_0_EolParserRuleCall_2_1_TABTerminalRuleCall_2_2_a__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     PLUS | DPOINT
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) TAB* (ambiguity) EQ TAB* (BACKSLASH Eol TAB*)? items+=Value
	 */
	protected void emit_AssignExtra_DPOINTTerminalRuleCall_1_1_or_PLUSTerminalRuleCall_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     TAB*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (PLUS | DPOINT) EQ TAB* (BACKSLASH Eol TAB*)? items+=Value
	 */
	protected void emit_AssignExtra_TABTerminalRuleCall_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     TAB*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) EQ (ambiguity) (BACKSLASH Eol TAB*)? items+=Value
	 *     (rule start) TAB* (PLUS | DPOINT) EQ (ambiguity) (BACKSLASH Eol TAB*)? items+=Value
	 */
	protected void emit_Assign_TABTerminalRuleCall_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     TAB+
	 *
	 * This ambiguous syntax occurs at:
	 *     values+=Values Eol (ambiguity) values+=Values
	 */
	protected void emit_BuildEntry_TABTerminalRuleCall_6_3_1_1_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     COMMA?
	 *
	 * This ambiguous syntax occurs at:
	 *     shell=ShellCmd (ambiguity) BRACE_END Eol TAB* value=Entry
	 *     shell=ShellCmd (ambiguity) BRACE_END Eol TAB* value=Object_M
	 *     shell=ShellCmd (ambiguity) BRACE_END Eol TAB* value=Object_Y
	 *     shell=ShellCmd (ambiguity) BRACE_END Eol TAB* value=ShellCmd
	 */
	protected void emit_If_COMMATerminalRuleCall_1_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     Y | M
	 *
	 * This ambiguous syntax occurs at:
	 *     name=SYMBOL BRACE_END COMMA (ambiguity) BRACE_END Eol TAB* value=Entry
	 *     name=SYMBOL BRACE_END COMMA (ambiguity) BRACE_END Eol TAB* value=Object_M
	 *     name=SYMBOL BRACE_END COMMA (ambiguity) BRACE_END Eol TAB* value=Object_Y
	 *     name=SYMBOL BRACE_END COMMA (ambiguity) BRACE_END Eol TAB* value=ShellCmd
	 *     name=SYMBOL COMMA (ambiguity) BRACE_END Eol TAB* value=Entry
	 *     name=SYMBOL COMMA (ambiguity) BRACE_END Eol TAB* value=Object_M
	 *     name=SYMBOL COMMA (ambiguity) BRACE_END Eol TAB* value=Object_Y
	 *     name=SYMBOL COMMA (ambiguity) BRACE_END Eol TAB* value=ShellCmd
	 */
	protected void emit_If_MTerminalRuleCall_1_0_2_1_or_YTerminalRuleCall_1_0_2_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     TAB*
	 *
	 * This ambiguous syntax occurs at:
	 *     name=SYMBOL BRACE_END COMMA (Y | M) BRACE_END Eol (ambiguity) value=Entry
	 *     name=SYMBOL BRACE_END COMMA (Y | M) BRACE_END Eol (ambiguity) value=Object_M
	 *     name=SYMBOL BRACE_END COMMA (Y | M) BRACE_END Eol (ambiguity) value=Object_Y
	 *     name=SYMBOL BRACE_END COMMA (Y | M) BRACE_END Eol (ambiguity) value=ShellCmd
	 *     name=SYMBOL COMMA (Y | M) BRACE_END Eol (ambiguity) value=Entry
	 *     name=SYMBOL COMMA (Y | M) BRACE_END Eol (ambiguity) value=Object_M
	 *     name=SYMBOL COMMA (Y | M) BRACE_END Eol (ambiguity) value=Object_Y
	 *     name=SYMBOL COMMA (Y | M) BRACE_END Eol (ambiguity) value=ShellCmd
	 *     shell=ShellCmd COMMA? BRACE_END Eol (ambiguity) value=Entry
	 *     shell=ShellCmd COMMA? BRACE_END Eol (ambiguity) value=Object_M
	 *     shell=ShellCmd COMMA? BRACE_END Eol (ambiguity) value=Object_Y
	 *     shell=ShellCmd COMMA? BRACE_END Eol (ambiguity) value=ShellCmd
	 */
	protected void emit_If_TABTerminalRuleCall_4_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     TAB*
	 *
	 * This ambiguous syntax occurs at:
	 *     value=Entry Eol ELSE Eol (ambiguity) elsevalue=Object_M
	 *     value=Entry Eol ELSE Eol (ambiguity) elsevalue=Object_Y
	 *     value=Object_M Eol ELSE Eol (ambiguity) elsevalue=Object_M
	 *     value=Object_M Eol ELSE Eol (ambiguity) elsevalue=Object_Y
	 *     value=Object_Y Eol ELSE Eol (ambiguity) elsevalue=Object_M
	 *     value=Object_Y Eol ELSE Eol (ambiguity) elsevalue=Object_Y
	 *     value=ShellCmd Eol ELSE Eol (ambiguity) elsevalue=Object_M
	 *     value=ShellCmd Eol ELSE Eol (ambiguity) elsevalue=Object_Y
	 */
	protected void emit_If_TABTerminalRuleCall_7_2_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (BACKSLASH Eol TAB*) | (STRING | COMMA | SHELL_CHAR)
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_ShellPart___BACKSLASHTerminalRuleCall_1_5_0_EolParserRuleCall_1_5_1_TABTerminalRuleCall_1_5_2_a___or___COMMATerminalRuleCall_1_3_or_SHELL_CHARTerminalRuleCall_1_4_or_STRINGTerminalRuleCall_1_2__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     TAB*
	 *
	 * This ambiguous syntax occurs at:
	 *     items+=Value BACKSLASH Eol (ambiguity) items+=Value
	 */
	protected void emit_Values_TABTerminalRuleCall_2_2_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (BACKSLASH Eol TAB*)?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) items+=Value
	 *     (rule start) EQ TAB* (ambiguity) items+=Value
	 *     (rule start) TAB* (PLUS | DPOINT) EQ TAB* (ambiguity) items+=Value
	 */
	protected void emit_Values___BACKSLASHTerminalRuleCall_0_0_EolParserRuleCall_0_1_TABTerminalRuleCall_0_2_a__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (BACKSLASH Eol TAB*)?
	 *
	 * This ambiguous syntax occurs at:
	 *     items+=Value (ambiguity) items+=Value
	 */
	protected void emit_Values___BACKSLASHTerminalRuleCall_2_0_EolParserRuleCall_2_1_TABTerminalRuleCall_2_2_a__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
