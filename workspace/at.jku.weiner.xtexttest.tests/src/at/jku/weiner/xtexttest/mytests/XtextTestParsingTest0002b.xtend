/*
 * generated by Xtext 2.9.0-SNAPSHOT
 */
package at.jku.weiner.xtexttest.mytests

import com.google.inject.Inject
import org.eclipse.xtext.junit4.InjectWith
import org.eclipse.xtext.junit4.XtextRunner
import org.eclipse.xtext.junit4.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import java.nio.file.Paths
import java.nio.file.Files
import com.google.inject.Provider
import org.eclipse.xtext.validation.IResourceValidator
import org.eclipse.xtext.generator.JavaIoFileSystemAccess
import org.eclipse.emf.ecore.resource.ResourceSet
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.resource.Resource
import java.util.List
import org.eclipse.xtext.validation.Issue
import org.eclipse.xtext.validation.CheckMode
import org.eclipse.xtext.util.CancelIndicator
import at.jku.weiner.xtexttest.generator.XtextTestGenerator
import java.util.regex.Pattern
import java.util.regex.Matcher
import at.jku.weiner.xtexttest.tests.XtextTestInjectorProvider
import at.jku.weiner.xtexttest.xtextTest.Model

@RunWith(XtextRunner)
@InjectWith(XtextTestInjectorProvider)
class XtextTestParsingTest0002b{

	@Inject
	ParseHelper<Model> parseHelper;
	@Inject
	private XtextTestGenerator generator;
	@Inject
	private Provider<ResourceSet> resourceSetProvider;
	@Inject
	private IResourceValidator validator;
	@Inject
	private JavaIoFileSystemAccess fileAccessSystem;
	
	int wordCount = 0;
	
	def String getTextFromFile(String fileName)
	throws Exception{
		val path = Paths.get(fileName);
		val content = new String(Files.readAllBytes(path));
		return content;
	}

	@Test 
	def void loadModel() {
		val file = "res/Test0002b_Emftest.xtexttest";
		val input = getTextFromFile(file);
		val result = parseHelper.parse(input);
		Assert.assertNotNull(result);
		val ResourceSet set = this.resourceSetProvider.get();
		val URI uri = URI.createURI(file);
		val Resource resource = set.getResource(uri, true);
			// validate the resource
		val	List<Issue> list = this.validator.validate(resource, 
				CheckMode.ALL,CancelIndicator.NullImpl);
		Assert.assertTrue(list.toString(), list.isEmpty());
		// configure and start the generator
		fileAccessSystem.setOutputPath("bin");
		this.generator.setFileName("Test0002b_Emftest.java");
		this.generator.doGenerate(resource, this.fileAccessSystem);
		val String actual = this.getTextFromFile("bin/org/eclipse/modisco/cdt/discoverer/tests/basic/" 
			+ "emftests/Test0002b_Emftest.java");
		Assert.assertNotNull(actual);
		val String expect = this.getTextFromFile("expected/Test0002b_Emftest.java");
		Assert.assertEquals(expect, actual);
		
	}

}

