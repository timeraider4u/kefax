/*
 * generated by Xtext 2.9.0-SNAPSHOT
 */
package at.jku.weiner.xtexttest.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import at.jku.weiner.xtexttest.services.XtextTestGrammarAccess;

public class XtextTestParser extends AbstractContentAssistParser {
	
	@Inject
	private XtextTestGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected at.jku.weiner.xtexttest.ui.contentassist.antlr.internal.InternalXtextTestParser createParser() {
		at.jku.weiner.xtexttest.ui.contentassist.antlr.internal.InternalXtextTestParser result = new at.jku.weiner.xtexttest.ui.contentassist.antlr.internal.InternalXtextTestParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModelAccess().getAlternatives_1(), "rule__Model__Alternatives_1");
					put(grammarAccess.getBooleanAccess().getAlternatives(), "rule__Boolean__Alternatives");
					put(grammarAccess.getInputAccess().getAlternatives_2(), "rule__Input__Alternatives_2");
					put(grammarAccess.getMyTokensAccess().getAlternatives_0(), "rule__MyTokens__Alternatives_0");
					put(grammarAccess.getInnerAccess().getAlternatives_2(), "rule__Inner__Alternatives_2");
					put(grammarAccess.getInnerAccess().getAssignAsBoolAlternatives_2_4_1_0(), "rule__Inner__AssignAsBoolAlternatives_2_4_1_0");
					put(grammarAccess.getGeneratorAccess().getAlternatives_2_2(), "rule__Generator__Alternatives_2_2");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getXtextTestAccess().getGroup(), "rule__XtextTest__Group__0");
					put(grammarAccess.getXtextTestAccess().getGroup_5(), "rule__XtextTest__Group_5__0");
					put(grammarAccess.getXtextTestAccess().getGroup_6(), "rule__XtextTest__Group_6__0");
					put(grammarAccess.getXtextTestAccess().getGroup_8(), "rule__XtextTest__Group_8__0");
					put(grammarAccess.getEmfTestAccess().getGroup(), "rule__EmfTest__Group__0");
					put(grammarAccess.getEmfTestAccess().getGroup_8(), "rule__EmfTest__Group_8__0");
					put(grammarAccess.getEmfTestAccess().getGroup_9(), "rule__EmfTest__Group_9__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getPackageIDAccess().getGroup(), "rule__PackageID__Group__0");
					put(grammarAccess.getPackageIDAccess().getGroup_1(), "rule__PackageID__Group_1__0");
					put(grammarAccess.getImportIDAccess().getGroup(), "rule__ImportID__Group__0");
					put(grammarAccess.getImportIDAccess().getGroup_1(), "rule__ImportID__Group_1__0");
					put(grammarAccess.getInputAccess().getGroup(), "rule__Input__Group__0");
					put(grammarAccess.getInputAccess().getGroup_2_0(), "rule__Input__Group_2_0__0");
					put(grammarAccess.getInputAccess().getGroup_2_1(), "rule__Input__Group_2_1__0");
					put(grammarAccess.getTokensAccess().getGroup(), "rule__Tokens__Group__0");
					put(grammarAccess.getMyTokensAccess().getGroup(), "rule__MyTokens__Group__0");
					put(grammarAccess.getMyTokensAccess().getGroup_1(), "rule__MyTokens__Group_1__0");
					put(grammarAccess.getElementAccess().getGroup(), "rule__Element__Group__0");
					put(grammarAccess.getElementAccess().getGroup_2(), "rule__Element__Group_2__0");
					put(grammarAccess.getElementAccess().getGroup_4(), "rule__Element__Group_4__0");
					put(grammarAccess.getElementAccess().getGroup_4_1(), "rule__Element__Group_4_1__0");
					put(grammarAccess.getInnerAccess().getGroup(), "rule__Inner__Group__0");
					put(grammarAccess.getInnerAccess().getGroup_2_0(), "rule__Inner__Group_2_0__0");
					put(grammarAccess.getInnerAccess().getGroup_2_1(), "rule__Inner__Group_2_1__0");
					put(grammarAccess.getInnerAccess().getGroup_2_1_2(), "rule__Inner__Group_2_1_2__0");
					put(grammarAccess.getInnerAccess().getGroup_2_2(), "rule__Inner__Group_2_2__0");
					put(grammarAccess.getInnerAccess().getGroup_2_3(), "rule__Inner__Group_2_3__0");
					put(grammarAccess.getInnerAccess().getGroup_2_4(), "rule__Inner__Group_2_4__0");
					put(grammarAccess.getGeneratorAccess().getGroup(), "rule__Generator__Group__0");
					put(grammarAccess.getGeneratorAccess().getGroup_1(), "rule__Generator__Group_1__0");
					put(grammarAccess.getGeneratorAccess().getGroup_2(), "rule__Generator__Group_2__0");
					put(grammarAccess.getGeneratorAccess().getGroup_2_2_0(), "rule__Generator__Group_2_2_0__0");
					put(grammarAccess.getGeneratorAccess().getGroup_3(), "rule__Generator__Group_3__0");
					put(grammarAccess.getGeneratorAccess().getGroup_3_1(), "rule__Generator__Group_3_1__0");
					put(grammarAccess.getGeneratorAccess().getGroup_4(), "rule__Generator__Group_4__0");
					put(grammarAccess.getReplacePatternsAccess().getGroup(), "rule__ReplacePatterns__Group__0");
					put(grammarAccess.getBeforeAccess().getGroup(), "rule__Before__Group__0");
					put(grammarAccess.getAfterAccess().getGroup(), "rule__After__Group__0");
					put(grammarAccess.getCodeCallAccess().getGroup(), "rule__CodeCall__Group__0");
					put(grammarAccess.getCodeCallAccess().getGroup_7(), "rule__CodeCall__Group_7__0");
					put(grammarAccess.getCodeCallAccess().getGroup_7_1(), "rule__CodeCall__Group_7_1__0");
					put(grammarAccess.getCodeCallAccess().getGroup_7_1_1(), "rule__CodeCall__Group_7_1_1__0");
					put(grammarAccess.getModelAccess().getXtextTestAssignment_1_0(), "rule__Model__XtextTestAssignment_1_0");
					put(grammarAccess.getModelAccess().getEmfTestAssignment_1_1(), "rule__Model__EmfTestAssignment_1_1");
					put(grammarAccess.getXtextTestAccess().getPackageAssignment_2(), "rule__XtextTest__PackageAssignment_2");
					put(grammarAccess.getXtextTestAccess().getLangAssignment_4(), "rule__XtextTest__LangAssignment_4");
					put(grammarAccess.getXtextTestAccess().getImportsAssignment_5_1(), "rule__XtextTest__ImportsAssignment_5_1");
					put(grammarAccess.getXtextTestAccess().getBooleanAssignment_6_2(), "rule__XtextTest__BooleanAssignment_6_2");
					put(grammarAccess.getXtextTestAccess().getInputAssignment_7(), "rule__XtextTest__InputAssignment_7");
					put(grammarAccess.getXtextTestAccess().getTimeOutAssignment_8_2(), "rule__XtextTest__TimeOutAssignment_8_2");
					put(grammarAccess.getXtextTestAccess().getTokensAssignment_9(), "rule__XtextTest__TokensAssignment_9");
					put(grammarAccess.getXtextTestAccess().getRootAssignment_10(), "rule__XtextTest__RootAssignment_10");
					put(grammarAccess.getXtextTestAccess().getOutputAssignment_11(), "rule__XtextTest__OutputAssignment_11");
					put(grammarAccess.getXtextTestAccess().getBeforeAssignment_12(), "rule__XtextTest__BeforeAssignment_12");
					put(grammarAccess.getXtextTestAccess().getAfterAssignment_13(), "rule__XtextTest__AfterAssignment_13");
					put(grammarAccess.getEmfTestAccess().getPackageAssignment_3(), "rule__EmfTest__PackageAssignment_3");
					put(grammarAccess.getEmfTestAccess().getMydefaultAssignment_5(), "rule__EmfTest__MydefaultAssignment_5");
					put(grammarAccess.getEmfTestAccess().getMyimportAssignment_6(), "rule__EmfTest__MyimportAssignment_6");
					put(grammarAccess.getEmfTestAccess().getCodeCallAssignment_7(), "rule__EmfTest__CodeCallAssignment_7");
					put(grammarAccess.getEmfTestAccess().getOptionCallAssignment_8_1(), "rule__EmfTest__OptionCallAssignment_8_1");
					put(grammarAccess.getEmfTestAccess().getFileAssignment_9_3(), "rule__EmfTest__FileAssignment_9_3");
					put(grammarAccess.getEmfTestAccess().getRootAssignment_10(), "rule__EmfTest__RootAssignment_10");
					put(grammarAccess.getEmfTestAccess().getBeforeAssignment_11(), "rule__EmfTest__BeforeAssignment_11");
					put(grammarAccess.getEmfTestAccess().getAfterAssignment_12(), "rule__EmfTest__AfterAssignment_12");
					put(grammarAccess.getImportAccess().getIdAssignment_2(), "rule__Import__IdAssignment_2");
					put(grammarAccess.getImportAccess().getAliasAssignment_4(), "rule__Import__AliasAssignment_4");
					put(grammarAccess.getInputAccess().getTextAssignment_2_0_2(), "rule__Input__TextAssignment_2_0_2");
					put(grammarAccess.getInputAccess().getFileAssignment_2_1_2(), "rule__Input__FileAssignment_2_1_2");
					put(grammarAccess.getTokensAccess().getTokensAssignment_2(), "rule__Tokens__TokensAssignment_2");
					put(grammarAccess.getMyTokensAccess().getTokenAssignment_0_0(), "rule__MyTokens__TokenAssignment_0_0");
					put(grammarAccess.getMyTokensAccess().getStringAssignment_0_1(), "rule__MyTokens__StringAssignment_0_1");
					put(grammarAccess.getMyTokensAccess().getCountAssignment_1_1(), "rule__MyTokens__CountAssignment_1_1");
					put(grammarAccess.getElementAccess().getImportingAssignment_2_0(), "rule__Element__ImportingAssignment_2_0");
					put(grammarAccess.getElementAccess().getNameAssignment_3(), "rule__Element__NameAssignment_3");
					put(grammarAccess.getElementAccess().getInnerAssignment_4_0(), "rule__Element__InnerAssignment_4_0");
					put(grammarAccess.getElementAccess().getInnerAssignment_4_1_1(), "rule__Element__InnerAssignment_4_1_1");
					put(grammarAccess.getInnerAccess().getParameterAssignment_1(), "rule__Inner__ParameterAssignment_1");
					put(grammarAccess.getInnerAccess().getAssignAssignment_2_0_1(), "rule__Inner__AssignAssignment_2_0_1");
					put(grammarAccess.getInnerAccess().getAssignListAssignment_2_1_1(), "rule__Inner__AssignListAssignment_2_1_1");
					put(grammarAccess.getInnerAccess().getAssignListAssignment_2_1_2_1(), "rule__Inner__AssignListAssignment_2_1_2_1");
					put(grammarAccess.getInnerAccess().getValueAssignment_2_2_1(), "rule__Inner__ValueAssignment_2_2_1");
					put(grammarAccess.getInnerAccess().getAssignAsDataAssignment_2_3_1(), "rule__Inner__AssignAsDataAssignment_2_3_1");
					put(grammarAccess.getInnerAccess().getAssignAsBoolAssignment_2_4_1(), "rule__Inner__AssignAsBoolAssignment_2_4_1");
					put(grammarAccess.getInnerAccess().getIsNullAssignment_2_5(), "rule__Inner__IsNullAssignment_2_5");
					put(grammarAccess.getInnerAccess().getIsNotNullAssignment_2_6(), "rule__Inner__IsNotNullAssignment_2_6");
					put(grammarAccess.getInnerAccess().getIsEmptyAssignment_2_7(), "rule__Inner__IsEmptyAssignment_2_7");
					put(grammarAccess.getGeneratorAccess().getOutputAssignment_1_3(), "rule__Generator__OutputAssignment_1_3");
					put(grammarAccess.getGeneratorAccess().getExpectedAssignment_2_2_0_1(), "rule__Generator__ExpectedAssignment_2_2_0_1");
					put(grammarAccess.getGeneratorAccess().getIsSameAsInputFileAssignment_2_2_1(), "rule__Generator__IsSameAsInputFileAssignment_2_2_1");
					put(grammarAccess.getGeneratorAccess().getPatternFileAssignment_3_1_2(), "rule__Generator__PatternFileAssignment_3_1_2");
					put(grammarAccess.getGeneratorAccess().getReplacePatternsAssignment_3_2(), "rule__Generator__ReplacePatternsAssignment_3_2");
					put(grammarAccess.getGeneratorAccess().getExceptionAssignment_4_2(), "rule__Generator__ExceptionAssignment_4_2");
					put(grammarAccess.getReplacePatternsAccess().getRegexAssignment_0(), "rule__ReplacePatterns__RegexAssignment_0");
					put(grammarAccess.getReplacePatternsAccess().getReplaceAssignment_2(), "rule__ReplacePatterns__ReplaceAssignment_2");
					put(grammarAccess.getBeforeAccess().getCodeCallAssignment_2(), "rule__Before__CodeCallAssignment_2");
					put(grammarAccess.getAfterAccess().getCodeCallAssignment_2(), "rule__After__CodeCallAssignment_2");
					put(grammarAccess.getCodeCallAccess().getMyclassAssignment_3(), "rule__CodeCall__MyclassAssignment_3");
					put(grammarAccess.getCodeCallAccess().getMethodAssignment_6(), "rule__CodeCall__MethodAssignment_6");
					put(grammarAccess.getCodeCallAccess().getParamsAssignment_7_1_0(), "rule__CodeCall__ParamsAssignment_7_1_0");
					put(grammarAccess.getCodeCallAccess().getParamsAssignment_7_1_1_1(), "rule__CodeCall__ParamsAssignment_7_1_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			at.jku.weiner.xtexttest.ui.contentassist.antlr.internal.InternalXtextTestParser typedParser = (at.jku.weiner.xtexttest.ui.contentassist.antlr.internal.InternalXtextTestParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public XtextTestGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(XtextTestGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
