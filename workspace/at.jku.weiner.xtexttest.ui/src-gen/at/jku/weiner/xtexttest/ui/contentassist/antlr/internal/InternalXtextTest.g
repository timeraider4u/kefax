/*
 * generated by Xtext 2.9.0-SNAPSHOT
 */
grammar InternalXtextTest;

options {
	superClass=AbstractInternalContentAssistParser;
	
	
}

@lexer::header {
package at.jku.weiner.xtexttest.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package at.jku.weiner.xtexttest.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import at.jku.weiner.xtexttest.services.XtextTestGrammarAccess;

}

@parser::members {
 
 	private XtextTestGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(XtextTestGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleXtextTest
entryRuleXtextTest 
:
{ before(grammarAccess.getXtextTestRule()); }
	 ruleXtextTest
{ after(grammarAccess.getXtextTestRule()); } 
	 EOF 
;

// Rule XtextTest
ruleXtextTest
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getXtextTestAccess().getGroup()); }
(rule__XtextTest__Group__0)
{ after(grammarAccess.getXtextTestAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBoolean
entryRuleBoolean 
:
{ before(grammarAccess.getBooleanRule()); }
	 ruleBoolean
{ after(grammarAccess.getBooleanRule()); } 
	 EOF 
;

// Rule Boolean
ruleBoolean
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getBooleanAccess().getAlternatives()); }
(rule__Boolean__Alternatives)
{ after(grammarAccess.getBooleanAccess().getAlternatives()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePackageID
entryRulePackageID 
:
{ before(grammarAccess.getPackageIDRule()); }
	 rulePackageID
{ after(grammarAccess.getPackageIDRule()); } 
	 EOF 
;

// Rule PackageID
rulePackageID
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getPackageIDAccess().getGroup()); }
(rule__PackageID__Group__0)
{ after(grammarAccess.getPackageIDAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLangID
entryRuleLangID 
:
{ before(grammarAccess.getLangIDRule()); }
	 ruleLangID
{ after(grammarAccess.getLangIDRule()); } 
	 EOF 
;

// Rule LangID
ruleLangID
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getLangIDAccess().getIDENTIFIERTerminalRuleCall()); }
	RULE_IDENTIFIER
{ after(grammarAccess.getLangIDAccess().getIDENTIFIERTerminalRuleCall()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImportID
entryRuleImportID 
:
{ before(grammarAccess.getImportIDRule()); }
	 ruleImportID
{ after(grammarAccess.getImportIDRule()); } 
	 EOF 
;

// Rule ImportID
ruleImportID
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getImportIDAccess().getGroup()); }
(rule__ImportID__Group__0)
{ after(grammarAccess.getImportIDAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInput
entryRuleInput 
:
{ before(grammarAccess.getInputRule()); }
	 ruleInput
{ after(grammarAccess.getInputRule()); } 
	 EOF 
;

// Rule Input
ruleInput
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getInputAccess().getGroup()); }
(rule__Input__Group__0)
{ after(grammarAccess.getInputAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTokens
entryRuleTokens 
:
{ before(grammarAccess.getTokensRule()); }
	 ruleTokens
{ after(grammarAccess.getTokensRule()); } 
	 EOF 
;

// Rule Tokens
ruleTokens
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getTokensAccess().getGroup()); }
(rule__Tokens__Group__0)
{ after(grammarAccess.getTokensAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMyTokens
entryRuleMyTokens 
:
{ before(grammarAccess.getMyTokensRule()); }
	 ruleMyTokens
{ after(grammarAccess.getMyTokensRule()); } 
	 EOF 
;

// Rule MyTokens
ruleMyTokens
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getMyTokensAccess().getGroup()); }
(rule__MyTokens__Group__0)
{ after(grammarAccess.getMyTokensAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleElement
entryRuleElement 
:
{ before(grammarAccess.getElementRule()); }
	 ruleElement
{ after(grammarAccess.getElementRule()); } 
	 EOF 
;

// Rule Element
ruleElement
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getElementAccess().getGroup()); }
(rule__Element__Group__0)
{ after(grammarAccess.getElementAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInner
entryRuleInner 
:
{ before(grammarAccess.getInnerRule()); }
	 ruleInner
{ after(grammarAccess.getInnerRule()); } 
	 EOF 
;

// Rule Inner
ruleInner
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getInnerAccess().getGroup()); }
(rule__Inner__Group__0)
{ after(grammarAccess.getInnerAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGenerator
entryRuleGenerator 
:
{ before(grammarAccess.getGeneratorRule()); }
	 ruleGenerator
{ after(grammarAccess.getGeneratorRule()); } 
	 EOF 
;

// Rule Generator
ruleGenerator
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getGeneratorAccess().getGroup()); }
(rule__Generator__Group__0)
{ after(grammarAccess.getGeneratorAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReplacePatterns
entryRuleReplacePatterns 
:
{ before(grammarAccess.getReplacePatternsRule()); }
	 ruleReplacePatterns
{ after(grammarAccess.getReplacePatternsRule()); } 
	 EOF 
;

// Rule ReplacePatterns
ruleReplacePatterns
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getReplacePatternsAccess().getGroup()); }
(rule__ReplacePatterns__Group__0)
{ after(grammarAccess.getReplacePatternsAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBefore
entryRuleBefore 
:
{ before(grammarAccess.getBeforeRule()); }
	 ruleBefore
{ after(grammarAccess.getBeforeRule()); } 
	 EOF 
;

// Rule Before
ruleBefore
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getBeforeAccess().getGroup()); }
(rule__Before__Group__0)
{ after(grammarAccess.getBeforeAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAfter
entryRuleAfter 
:
{ before(grammarAccess.getAfterRule()); }
	 ruleAfter
{ after(grammarAccess.getAfterRule()); } 
	 EOF 
;

// Rule After
ruleAfter
    @init {
		int stackSize = keepStackSize();
		/*no init found*/
    }
	@after {
    		/*no after found*/
     }:

(
{ before(grammarAccess.getAfterAccess().getGroup()); }
(rule__After__Group__0)
{ after(grammarAccess.getAfterAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}




rule__Boolean__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getBooleanAccess().getTRUETerminalRuleCall_0()); }
	RULE_TRUE
{ after(grammarAccess.getBooleanAccess().getTRUETerminalRuleCall_0()); }
)



    |
(
{ before(grammarAccess.getBooleanAccess().getFALSETerminalRuleCall_1()); }
	RULE_FALSE
{ after(grammarAccess.getBooleanAccess().getFALSETerminalRuleCall_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInputAccess().getGroup_2_0()); }
(rule__Input__Group_2_0__0)
{ after(grammarAccess.getInputAccess().getGroup_2_0()); }
)



    |
(
{ before(grammarAccess.getInputAccess().getGroup_2_1()); }
(rule__Input__Group_2_1__0)
{ after(grammarAccess.getInputAccess().getGroup_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__Inner__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInnerAccess().getGroup_2_0()); }
(rule__Inner__Group_2_0__0)
{ after(grammarAccess.getInnerAccess().getGroup_2_0()); }
)



    |
(
{ before(grammarAccess.getInnerAccess().getGroup_2_1()); }
(rule__Inner__Group_2_1__0)
{ after(grammarAccess.getInnerAccess().getGroup_2_1()); }
)



    |
(
{ before(grammarAccess.getInnerAccess().getGroup_2_2()); }
(rule__Inner__Group_2_2__0)
{ after(grammarAccess.getInnerAccess().getGroup_2_2()); }
)



    |
(
{ before(grammarAccess.getInnerAccess().getGroup_2_3()); }
(rule__Inner__Group_2_3__0)
{ after(grammarAccess.getInnerAccess().getGroup_2_3()); }
)



    |
(
{ before(grammarAccess.getInnerAccess().getGroup_2_4()); }
(rule__Inner__Group_2_4__0)
{ after(grammarAccess.getInnerAccess().getGroup_2_4()); }
)



    |
(
{ before(grammarAccess.getInnerAccess().getIsNullAssignment_2_5()); }
(rule__Inner__IsNullAssignment_2_5)
{ after(grammarAccess.getInnerAccess().getIsNullAssignment_2_5()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__Inner__AssignAsBoolAlternatives_2_4_1_0
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInnerAccess().getAssignAsBoolTRUETerminalRuleCall_2_4_1_0_0()); }
	RULE_TRUE
{ after(grammarAccess.getInnerAccess().getAssignAsBoolTRUETerminalRuleCall_2_4_1_0_0()); }
)



    |
(
{ before(grammarAccess.getInnerAccess().getAssignAsBoolFALSETerminalRuleCall_2_4_1_0_1()); }
	RULE_FALSE
{ after(grammarAccess.getInnerAccess().getAssignAsBoolFALSETerminalRuleCall_2_4_1_0_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Alternatives_2_2
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getGeneratorAccess().getGroup_2_2_0()); }
(rule__Generator__Group_2_2_0__0)
{ after(grammarAccess.getGeneratorAccess().getGroup_2_2_0()); }
)



    |
(
{ before(grammarAccess.getGeneratorAccess().getIsSameAsInputFileAssignment_2_2_1()); }
(rule__Generator__IsSameAsInputFileAssignment_2_2_1)
{ after(grammarAccess.getGeneratorAccess().getIsSameAsInputFileAssignment_2_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}



rule__XtextTest__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XtextTest__Group__0__Impl
	rule__XtextTest__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XtextTest__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getXtextTestAccess().getXtextTestAction_0()); }
(

)
{ after(grammarAccess.getXtextTestAccess().getXtextTestAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__XtextTest__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XtextTest__Group__1__Impl
	rule__XtextTest__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__XtextTest__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getXtextTestAccess().getPACKAGETerminalRuleCall_1()); }
	RULE_PACKAGE
{ after(grammarAccess.getXtextTestAccess().getPACKAGETerminalRuleCall_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__XtextTest__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XtextTest__Group__2__Impl
	rule__XtextTest__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__XtextTest__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getXtextTestAccess().getPackageAssignment_2()); }
(rule__XtextTest__PackageAssignment_2)
{ after(grammarAccess.getXtextTestAccess().getPackageAssignment_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__XtextTest__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XtextTest__Group__3__Impl
	rule__XtextTest__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__XtextTest__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getXtextTestAccess().getLANGUAGETerminalRuleCall_3()); }
	RULE_LANGUAGE
{ after(grammarAccess.getXtextTestAccess().getLANGUAGETerminalRuleCall_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__XtextTest__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XtextTest__Group__4__Impl
	rule__XtextTest__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__XtextTest__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getXtextTestAccess().getLangAssignment_4()); }
(rule__XtextTest__LangAssignment_4)
{ after(grammarAccess.getXtextTestAccess().getLangAssignment_4()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__XtextTest__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XtextTest__Group__5__Impl
	rule__XtextTest__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__XtextTest__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getXtextTestAccess().getGroup_5()); }
(rule__XtextTest__Group_5__0)?
{ after(grammarAccess.getXtextTestAccess().getGroup_5()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__XtextTest__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XtextTest__Group__6__Impl
	rule__XtextTest__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__XtextTest__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getXtextTestAccess().getGroup_6()); }
(rule__XtextTest__Group_6__0)?
{ after(grammarAccess.getXtextTestAccess().getGroup_6()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__XtextTest__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XtextTest__Group__7__Impl
	rule__XtextTest__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__XtextTest__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getXtextTestAccess().getInputAssignment_7()); }
(rule__XtextTest__InputAssignment_7)
{ after(grammarAccess.getXtextTestAccess().getInputAssignment_7()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__XtextTest__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XtextTest__Group__8__Impl
	rule__XtextTest__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__XtextTest__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getXtextTestAccess().getTokensAssignment_8()); }
(rule__XtextTest__TokensAssignment_8)?
{ after(grammarAccess.getXtextTestAccess().getTokensAssignment_8()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__XtextTest__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XtextTest__Group__9__Impl
	rule__XtextTest__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__XtextTest__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getXtextTestAccess().getRootAssignment_9()); }
(rule__XtextTest__RootAssignment_9)
{ after(grammarAccess.getXtextTestAccess().getRootAssignment_9()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__XtextTest__Group__10
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XtextTest__Group__10__Impl
	rule__XtextTest__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__XtextTest__Group__10__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getXtextTestAccess().getOutputAssignment_10()); }
(rule__XtextTest__OutputAssignment_10)?
{ after(grammarAccess.getXtextTestAccess().getOutputAssignment_10()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__XtextTest__Group__11
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XtextTest__Group__11__Impl
	rule__XtextTest__Group__12
;
finally {
	restoreStackSize(stackSize);
}

rule__XtextTest__Group__11__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getXtextTestAccess().getBeforeAssignment_11()); }
(rule__XtextTest__BeforeAssignment_11)?
{ after(grammarAccess.getXtextTestAccess().getBeforeAssignment_11()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__XtextTest__Group__12
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XtextTest__Group__12__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XtextTest__Group__12__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getXtextTestAccess().getAfterAssignment_12()); }
(rule__XtextTest__AfterAssignment_12)?
{ after(grammarAccess.getXtextTestAccess().getAfterAssignment_12()); }
)



;
finally {
	restoreStackSize(stackSize);
}




























rule__XtextTest__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XtextTest__Group_5__0__Impl
	rule__XtextTest__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XtextTest__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getXtextTestAccess().getIMPORTSTerminalRuleCall_5_0()); }
	RULE_IMPORTS
{ after(grammarAccess.getXtextTestAccess().getIMPORTSTerminalRuleCall_5_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__XtextTest__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XtextTest__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XtextTest__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getXtextTestAccess().getImportsAssignment_5_1()); }
(rule__XtextTest__ImportsAssignment_5_1)
{ after(grammarAccess.getXtextTestAccess().getImportsAssignment_5_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__XtextTest__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XtextTest__Group_6__0__Impl
	rule__XtextTest__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XtextTest__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getXtextTestAccess().getSPLITLEXERTerminalRuleCall_6_0()); }
	RULE_SPLITLEXER
{ after(grammarAccess.getXtextTestAccess().getSPLITLEXERTerminalRuleCall_6_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__XtextTest__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XtextTest__Group_6__1__Impl
	rule__XtextTest__Group_6__2
;
finally {
	restoreStackSize(stackSize);
}

rule__XtextTest__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getXtextTestAccess().getASSIGNASSINGLETerminalRuleCall_6_1()); }
	RULE_ASSIGNASSINGLE
{ after(grammarAccess.getXtextTestAccess().getASSIGNASSINGLETerminalRuleCall_6_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__XtextTest__Group_6__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XtextTest__Group_6__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XtextTest__Group_6__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getXtextTestAccess().getBooleanAssignment_6_2()); }
(rule__XtextTest__BooleanAssignment_6_2)
{ after(grammarAccess.getXtextTestAccess().getBooleanAssignment_6_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__PackageID__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageID__Group__0__Impl
	rule__PackageID__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageID__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPackageIDAccess().getIDENTIFIERTerminalRuleCall_0()); }
	RULE_IDENTIFIER
{ after(grammarAccess.getPackageIDAccess().getIDENTIFIERTerminalRuleCall_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__PackageID__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageID__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageID__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPackageIDAccess().getGroup_1()); }
(rule__PackageID__Group_1__0)*
{ after(grammarAccess.getPackageIDAccess().getGroup_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__PackageID__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageID__Group_1__0__Impl
	rule__PackageID__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageID__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPackageIDAccess().getPOINTTerminalRuleCall_1_0()); }
	RULE_POINT
{ after(grammarAccess.getPackageIDAccess().getPOINTTerminalRuleCall_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__PackageID__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageID__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageID__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getPackageIDAccess().getIDENTIFIERTerminalRuleCall_1_1()); }
	RULE_IDENTIFIER
{ after(grammarAccess.getPackageIDAccess().getIDENTIFIERTerminalRuleCall_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__ImportID__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImportID__Group__0__Impl
	rule__ImportID__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportID__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getImportIDAccess().getIDENTIFIERTerminalRuleCall_0()); }
	RULE_IDENTIFIER
{ after(grammarAccess.getImportIDAccess().getIDENTIFIERTerminalRuleCall_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ImportID__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImportID__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportID__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getImportIDAccess().getGroup_1()); }
(rule__ImportID__Group_1__0)*
{ after(grammarAccess.getImportIDAccess().getGroup_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__ImportID__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImportID__Group_1__0__Impl
	rule__ImportID__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportID__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getImportIDAccess().getPOINTTerminalRuleCall_1_0()); }
	RULE_POINT
{ after(grammarAccess.getImportIDAccess().getPOINTTerminalRuleCall_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ImportID__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImportID__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportID__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getImportIDAccess().getIDENTIFIERTerminalRuleCall_1_1()); }
	RULE_IDENTIFIER
{ after(grammarAccess.getImportIDAccess().getIDENTIFIERTerminalRuleCall_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__Input__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group__0__Impl
	rule__Input__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInputAccess().getInputAction_0()); }
(

)
{ after(grammarAccess.getInputAccess().getInputAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group__1__Impl
	rule__Input__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInputAccess().getSOURCETerminalRuleCall_1()); }
	RULE_SOURCE
{ after(grammarAccess.getInputAccess().getSOURCETerminalRuleCall_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInputAccess().getAlternatives_2()); }
(rule__Input__Alternatives_2)
{ after(grammarAccess.getInputAccess().getAlternatives_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__Input__Group_2_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group_2_0__0__Impl
	rule__Input__Group_2_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_2_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInputAccess().getSRCTEXTTerminalRuleCall_2_0_0()); }
	RULE_SRCTEXT
{ after(grammarAccess.getInputAccess().getSRCTEXTTerminalRuleCall_2_0_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group_2_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group_2_0__1__Impl
	rule__Input__Group_2_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_2_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInputAccess().getASSIGNASSINGLETerminalRuleCall_2_0_1()); }
	RULE_ASSIGNASSINGLE
{ after(grammarAccess.getInputAccess().getASSIGNASSINGLETerminalRuleCall_2_0_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group_2_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group_2_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_2_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInputAccess().getTextAssignment_2_0_2()); }
(rule__Input__TextAssignment_2_0_2)
{ after(grammarAccess.getInputAccess().getTextAssignment_2_0_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__Input__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group_2_1__0__Impl
	rule__Input__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInputAccess().getFILETerminalRuleCall_2_1_0()); }
	RULE_FILE
{ after(grammarAccess.getInputAccess().getFILETerminalRuleCall_2_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group_2_1__1__Impl
	rule__Input__Group_2_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInputAccess().getASSIGNASSINGLETerminalRuleCall_2_1_1()); }
	RULE_ASSIGNASSINGLE
{ after(grammarAccess.getInputAccess().getASSIGNASSINGLETerminalRuleCall_2_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group_2_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group_2_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_2_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInputAccess().getFileAssignment_2_1_2()); }
(rule__Input__FileAssignment_2_1_2)
{ after(grammarAccess.getInputAccess().getFileAssignment_2_1_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__Tokens__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tokens__Group__0__Impl
	rule__Tokens__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Tokens__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getTokensAccess().getTokensAction_0()); }
(

)
{ after(grammarAccess.getTokensAccess().getTokensAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Tokens__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tokens__Group__1__Impl
	rule__Tokens__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Tokens__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getTokensAccess().getLEXERTerminalRuleCall_1()); }
	RULE_LEXER
{ after(grammarAccess.getTokensAccess().getLEXERTerminalRuleCall_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Tokens__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tokens__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Tokens__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
(
{ before(grammarAccess.getTokensAccess().getTokensAssignment_2()); }
(rule__Tokens__TokensAssignment_2)
{ after(grammarAccess.getTokensAccess().getTokensAssignment_2()); }
)
(
{ before(grammarAccess.getTokensAccess().getTokensAssignment_2()); }
(rule__Tokens__TokensAssignment_2)*
{ after(grammarAccess.getTokensAccess().getTokensAssignment_2()); }
)
)



;
finally {
	restoreStackSize(stackSize);
}








rule__MyTokens__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyTokens__Group__0__Impl
	rule__MyTokens__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MyTokens__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getMyTokensAccess().getTokenAssignment_0()); }
(rule__MyTokens__TokenAssignment_0)
{ after(grammarAccess.getMyTokensAccess().getTokenAssignment_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__MyTokens__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyTokens__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MyTokens__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getMyTokensAccess().getGroup_1()); }
(rule__MyTokens__Group_1__0)?
{ after(grammarAccess.getMyTokensAccess().getGroup_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__MyTokens__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyTokens__Group_1__0__Impl
	rule__MyTokens__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MyTokens__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getMyTokensAccess().getASSIGNASDATALISTTerminalRuleCall_1_0()); }
	RULE_ASSIGNASDATALIST
{ after(grammarAccess.getMyTokensAccess().getASSIGNASDATALISTTerminalRuleCall_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__MyTokens__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyTokens__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MyTokens__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getMyTokensAccess().getCountAssignment_1_1()); }
(rule__MyTokens__CountAssignment_1_1)
{ after(grammarAccess.getMyTokensAccess().getCountAssignment_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__Element__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Element__Group__0__Impl
	rule__Element__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getElementAccess().getElementAction_0()); }
(

)
{ after(grammarAccess.getElementAccess().getElementAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Element__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Element__Group__1__Impl
	rule__Element__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getElementAccess().getLEFTPARENTerminalRuleCall_1()); }
	RULE_LEFTPAREN
{ after(grammarAccess.getElementAccess().getLEFTPARENTerminalRuleCall_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Element__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Element__Group__2__Impl
	rule__Element__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getElementAccess().getGroup_2()); }
(rule__Element__Group_2__0)?
{ after(grammarAccess.getElementAccess().getGroup_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Element__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Element__Group__3__Impl
	rule__Element__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getElementAccess().getNameAssignment_3()); }
(rule__Element__NameAssignment_3)
{ after(grammarAccess.getElementAccess().getNameAssignment_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Element__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Element__Group__4__Impl
	rule__Element__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getElementAccess().getGroup_4()); }
(rule__Element__Group_4__0)?
{ after(grammarAccess.getElementAccess().getGroup_4()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Element__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Element__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getElementAccess().getRIGHTPARENTerminalRuleCall_5()); }
	RULE_RIGHTPAREN
{ after(grammarAccess.getElementAccess().getRIGHTPARENTerminalRuleCall_5()); }
)



;
finally {
	restoreStackSize(stackSize);
}














rule__Element__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Element__Group_2__0__Impl
	rule__Element__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getElementAccess().getImportingAssignment_2_0()); }
(rule__Element__ImportingAssignment_2_0)
{ after(grammarAccess.getElementAccess().getImportingAssignment_2_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Element__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Element__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getElementAccess().getIMPORTERTerminalRuleCall_2_1()); }
	RULE_IMPORTER
{ after(grammarAccess.getElementAccess().getIMPORTERTerminalRuleCall_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__Element__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Element__Group_4__0__Impl
	rule__Element__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getElementAccess().getInnerAssignment_4_0()); }
(rule__Element__InnerAssignment_4_0)
{ after(grammarAccess.getElementAccess().getInnerAssignment_4_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Element__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Element__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getElementAccess().getGroup_4_1()); }
(rule__Element__Group_4_1__0)*
{ after(grammarAccess.getElementAccess().getGroup_4_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__Element__Group_4_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Element__Group_4_1__0__Impl
	rule__Element__Group_4_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group_4_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getElementAccess().getCOMMATerminalRuleCall_4_1_0()); }
	RULE_COMMA
{ after(grammarAccess.getElementAccess().getCOMMATerminalRuleCall_4_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Element__Group_4_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Element__Group_4_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group_4_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getElementAccess().getInnerAssignment_4_1_1()); }
(rule__Element__InnerAssignment_4_1_1)
{ after(grammarAccess.getElementAccess().getInnerAssignment_4_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__Inner__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Inner__Group__0__Impl
	rule__Inner__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Inner__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInnerAccess().getInnerAction_0()); }
(

)
{ after(grammarAccess.getInnerAccess().getInnerAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Inner__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Inner__Group__1__Impl
	rule__Inner__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Inner__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInnerAccess().getParameterAssignment_1()); }
(rule__Inner__ParameterAssignment_1)
{ after(grammarAccess.getInnerAccess().getParameterAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Inner__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Inner__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Inner__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInnerAccess().getAlternatives_2()); }
(rule__Inner__Alternatives_2)
{ after(grammarAccess.getInnerAccess().getAlternatives_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__Inner__Group_2_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Inner__Group_2_0__0__Impl
	rule__Inner__Group_2_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Inner__Group_2_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInnerAccess().getASSIGNASSINGLETerminalRuleCall_2_0_0()); }
	RULE_ASSIGNASSINGLE
{ after(grammarAccess.getInnerAccess().getASSIGNASSINGLETerminalRuleCall_2_0_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Inner__Group_2_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Inner__Group_2_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Inner__Group_2_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInnerAccess().getAssignAssignment_2_0_1()); }
(rule__Inner__AssignAssignment_2_0_1)
{ after(grammarAccess.getInnerAccess().getAssignAssignment_2_0_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__Inner__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Inner__Group_2_1__0__Impl
	rule__Inner__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Inner__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInnerAccess().getASSIGNASLISTTerminalRuleCall_2_1_0()); }
	RULE_ASSIGNASLIST
{ after(grammarAccess.getInnerAccess().getASSIGNASLISTTerminalRuleCall_2_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Inner__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Inner__Group_2_1__1__Impl
	rule__Inner__Group_2_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Inner__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInnerAccess().getAssignListAssignment_2_1_1()); }
(rule__Inner__AssignListAssignment_2_1_1)
{ after(grammarAccess.getInnerAccess().getAssignListAssignment_2_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Inner__Group_2_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Inner__Group_2_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Inner__Group_2_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInnerAccess().getGroup_2_1_2()); }
(rule__Inner__Group_2_1_2__0)*
{ after(grammarAccess.getInnerAccess().getGroup_2_1_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__Inner__Group_2_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Inner__Group_2_1_2__0__Impl
	rule__Inner__Group_2_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Inner__Group_2_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInnerAccess().getCOMMATerminalRuleCall_2_1_2_0()); }
	RULE_COMMA
{ after(grammarAccess.getInnerAccess().getCOMMATerminalRuleCall_2_1_2_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Inner__Group_2_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Inner__Group_2_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Inner__Group_2_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInnerAccess().getAssignListAssignment_2_1_2_1()); }
(rule__Inner__AssignListAssignment_2_1_2_1)
{ after(grammarAccess.getInnerAccess().getAssignListAssignment_2_1_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__Inner__Group_2_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Inner__Group_2_2__0__Impl
	rule__Inner__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Inner__Group_2_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInnerAccess().getASSIGNASSTRINGTerminalRuleCall_2_2_0()); }
	RULE_ASSIGNASSTRING
{ after(grammarAccess.getInnerAccess().getASSIGNASSTRINGTerminalRuleCall_2_2_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Inner__Group_2_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Inner__Group_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Inner__Group_2_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInnerAccess().getValueAssignment_2_2_1()); }
(rule__Inner__ValueAssignment_2_2_1)
{ after(grammarAccess.getInnerAccess().getValueAssignment_2_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__Inner__Group_2_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Inner__Group_2_3__0__Impl
	rule__Inner__Group_2_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Inner__Group_2_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInnerAccess().getASSIGNASDATALISTTerminalRuleCall_2_3_0()); }
	RULE_ASSIGNASDATALIST
{ after(grammarAccess.getInnerAccess().getASSIGNASDATALISTTerminalRuleCall_2_3_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Inner__Group_2_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Inner__Group_2_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Inner__Group_2_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInnerAccess().getAssignAsDataAssignment_2_3_1()); }
(rule__Inner__AssignAsDataAssignment_2_3_1)
{ after(grammarAccess.getInnerAccess().getAssignAsDataAssignment_2_3_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__Inner__Group_2_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Inner__Group_2_4__0__Impl
	rule__Inner__Group_2_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Inner__Group_2_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInnerAccess().getASSIGNASBOOLTerminalRuleCall_2_4_0()); }
	RULE_ASSIGNASBOOL
{ after(grammarAccess.getInnerAccess().getASSIGNASBOOLTerminalRuleCall_2_4_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Inner__Group_2_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Inner__Group_2_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Inner__Group_2_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getInnerAccess().getAssignAsBoolAssignment_2_4_1()); }
(rule__Inner__AssignAsBoolAssignment_2_4_1)
{ after(grammarAccess.getInnerAccess().getAssignAsBoolAssignment_2_4_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__Generator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group__0__Impl
	rule__Generator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getGeneratorAccess().getGeneratorAction_0()); }
(

)
{ after(grammarAccess.getGeneratorAccess().getGeneratorAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Generator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group__1__Impl
	rule__Generator__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getGeneratorAccess().getGroup_1()); }
(rule__Generator__Group_1__0)
{ after(grammarAccess.getGeneratorAccess().getGroup_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Generator__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group__2__Impl
	rule__Generator__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getGeneratorAccess().getGroup_2()); }
(rule__Generator__Group_2__0)
{ after(grammarAccess.getGeneratorAccess().getGroup_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Generator__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group__3__Impl
	rule__Generator__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getGeneratorAccess().getGroup_3()); }
(rule__Generator__Group_3__0)?
{ after(grammarAccess.getGeneratorAccess().getGroup_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Generator__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getGeneratorAccess().getGroup_4()); }
(rule__Generator__Group_4__0)?
{ after(grammarAccess.getGeneratorAccess().getGroup_4()); }
)



;
finally {
	restoreStackSize(stackSize);
}












rule__Generator__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group_1__0__Impl
	rule__Generator__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getGeneratorAccess().getOUTPUTTerminalRuleCall_1_0()); }
	RULE_OUTPUT
{ after(grammarAccess.getGeneratorAccess().getOUTPUTTerminalRuleCall_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Generator__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group_1__1__Impl
	rule__Generator__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getGeneratorAccess().getFILETerminalRuleCall_1_1()); }
	RULE_FILE
{ after(grammarAccess.getGeneratorAccess().getFILETerminalRuleCall_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Generator__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group_1__2__Impl
	rule__Generator__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getGeneratorAccess().getASSIGNASSINGLETerminalRuleCall_1_2()); }
	RULE_ASSIGNASSINGLE
{ after(grammarAccess.getGeneratorAccess().getASSIGNASSINGLETerminalRuleCall_1_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Generator__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getGeneratorAccess().getOutputAssignment_1_3()); }
(rule__Generator__OutputAssignment_1_3)
{ after(grammarAccess.getGeneratorAccess().getOutputAssignment_1_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}










rule__Generator__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group_2__0__Impl
	rule__Generator__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getGeneratorAccess().getEXPECTEDTerminalRuleCall_2_0()); }
	RULE_EXPECTED
{ after(grammarAccess.getGeneratorAccess().getEXPECTEDTerminalRuleCall_2_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Generator__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group_2__1__Impl
	rule__Generator__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getGeneratorAccess().getFILETerminalRuleCall_2_1()); }
	RULE_FILE
{ after(grammarAccess.getGeneratorAccess().getFILETerminalRuleCall_2_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Generator__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getGeneratorAccess().getAlternatives_2_2()); }
(rule__Generator__Alternatives_2_2)
{ after(grammarAccess.getGeneratorAccess().getAlternatives_2_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__Generator__Group_2_2_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group_2_2_0__0__Impl
	rule__Generator__Group_2_2_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group_2_2_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getGeneratorAccess().getASSIGNASSINGLETerminalRuleCall_2_2_0_0()); }
	RULE_ASSIGNASSINGLE
{ after(grammarAccess.getGeneratorAccess().getASSIGNASSINGLETerminalRuleCall_2_2_0_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Generator__Group_2_2_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group_2_2_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group_2_2_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getGeneratorAccess().getExpectedAssignment_2_2_0_1()); }
(rule__Generator__ExpectedAssignment_2_2_0_1)
{ after(grammarAccess.getGeneratorAccess().getExpectedAssignment_2_2_0_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}






rule__Generator__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group_3__0__Impl
	rule__Generator__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getGeneratorAccess().getPATTERNSTerminalRuleCall_3_0()); }
	RULE_PATTERNS
{ after(grammarAccess.getGeneratorAccess().getPATTERNSTerminalRuleCall_3_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Generator__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group_3__1__Impl
	rule__Generator__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getGeneratorAccess().getGroup_3_1()); }
(rule__Generator__Group_3_1__0)?
{ after(grammarAccess.getGeneratorAccess().getGroup_3_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Generator__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getGeneratorAccess().getReplacePatternsAssignment_3_2()); }
(rule__Generator__ReplacePatternsAssignment_3_2)*
{ after(grammarAccess.getGeneratorAccess().getReplacePatternsAssignment_3_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__Generator__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group_3_1__0__Impl
	rule__Generator__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getGeneratorAccess().getFILETerminalRuleCall_3_1_0()); }
	RULE_FILE
{ after(grammarAccess.getGeneratorAccess().getFILETerminalRuleCall_3_1_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Generator__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group_3_1__1__Impl
	rule__Generator__Group_3_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getGeneratorAccess().getASSIGNASSINGLETerminalRuleCall_3_1_1()); }
	RULE_ASSIGNASSINGLE
{ after(grammarAccess.getGeneratorAccess().getASSIGNASSINGLETerminalRuleCall_3_1_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Generator__Group_3_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group_3_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group_3_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getGeneratorAccess().getPatternFileAssignment_3_1_2()); }
(rule__Generator__PatternFileAssignment_3_1_2)
{ after(grammarAccess.getGeneratorAccess().getPatternFileAssignment_3_1_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__Generator__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group_4__0__Impl
	rule__Generator__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getGeneratorAccess().getEXPECTEDTerminalRuleCall_4_0()); }
	RULE_EXPECTED
{ after(grammarAccess.getGeneratorAccess().getEXPECTEDTerminalRuleCall_4_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Generator__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group_4__1__Impl
	rule__Generator__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getGeneratorAccess().getEXCEPTIONSTerminalRuleCall_4_1()); }
	RULE_EXCEPTIONS
{ after(grammarAccess.getGeneratorAccess().getEXCEPTIONSTerminalRuleCall_4_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Generator__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getGeneratorAccess().getExceptionAssignment_4_2()); }
(rule__Generator__ExceptionAssignment_4_2)
{ after(grammarAccess.getGeneratorAccess().getExceptionAssignment_4_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__ReplacePatterns__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReplacePatterns__Group__0__Impl
	rule__ReplacePatterns__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReplacePatterns__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getReplacePatternsAccess().getRegexAssignment_0()); }
(rule__ReplacePatterns__RegexAssignment_0)
{ after(grammarAccess.getReplacePatternsAccess().getRegexAssignment_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ReplacePatterns__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReplacePatterns__Group__1__Impl
	rule__ReplacePatterns__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ReplacePatterns__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getReplacePatternsAccess().getASSIGNASSINGLETerminalRuleCall_1()); }
	RULE_ASSIGNASSINGLE
{ after(grammarAccess.getReplacePatternsAccess().getASSIGNASSINGLETerminalRuleCall_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__ReplacePatterns__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReplacePatterns__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReplacePatterns__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getReplacePatternsAccess().getReplaceAssignment_2()); }
(rule__ReplacePatterns__ReplaceAssignment_2)
{ after(grammarAccess.getReplacePatternsAccess().getReplaceAssignment_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}








rule__Before__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Before__Group__0__Impl
	rule__Before__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Before__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getBeforeAccess().getBEFORE_KWTerminalRuleCall_0()); }
	RULE_BEFORE_KW
{ after(grammarAccess.getBeforeAccess().getBEFORE_KWTerminalRuleCall_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Before__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Before__Group__1__Impl
	rule__Before__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Before__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getBeforeAccess().getCLASS_KWTerminalRuleCall_1()); }
	RULE_CLASS_KW
{ after(grammarAccess.getBeforeAccess().getCLASS_KWTerminalRuleCall_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Before__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Before__Group__2__Impl
	rule__Before__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Before__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getBeforeAccess().getASSIGNASSINGLETerminalRuleCall_2()); }
	RULE_ASSIGNASSINGLE
{ after(grammarAccess.getBeforeAccess().getASSIGNASSINGLETerminalRuleCall_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Before__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Before__Group__3__Impl
	rule__Before__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Before__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getBeforeAccess().getMyclassAssignment_3()); }
(rule__Before__MyclassAssignment_3)
{ after(grammarAccess.getBeforeAccess().getMyclassAssignment_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Before__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Before__Group__4__Impl
	rule__Before__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Before__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getBeforeAccess().getMETHOD_KWTerminalRuleCall_4()); }
	RULE_METHOD_KW
{ after(grammarAccess.getBeforeAccess().getMETHOD_KWTerminalRuleCall_4()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Before__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Before__Group__5__Impl
	rule__Before__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Before__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getBeforeAccess().getASSIGNASSINGLETerminalRuleCall_5()); }
	RULE_ASSIGNASSINGLE
{ after(grammarAccess.getBeforeAccess().getASSIGNASSINGLETerminalRuleCall_5()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Before__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Before__Group__6__Impl
	rule__Before__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Before__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getBeforeAccess().getMethodAssignment_6()); }
(rule__Before__MethodAssignment_6)
{ after(grammarAccess.getBeforeAccess().getMethodAssignment_6()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Before__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Before__Group__7__Impl
	rule__Before__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Before__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getBeforeAccess().getLEFTPARENTerminalRuleCall_7()); }
	RULE_LEFTPAREN
{ after(grammarAccess.getBeforeAccess().getLEFTPARENTerminalRuleCall_7()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Before__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Before__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Before__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getBeforeAccess().getRIGHTPARENTerminalRuleCall_8()); }
	RULE_RIGHTPAREN
{ after(grammarAccess.getBeforeAccess().getRIGHTPARENTerminalRuleCall_8()); }
)



;
finally {
	restoreStackSize(stackSize);
}




















rule__After__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__After__Group__0__Impl
	rule__After__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__After__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAfterAccess().getAFTER_KWTerminalRuleCall_0()); }
	RULE_AFTER_KW
{ after(grammarAccess.getAfterAccess().getAFTER_KWTerminalRuleCall_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__After__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__After__Group__1__Impl
	rule__After__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__After__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAfterAccess().getCLASS_KWTerminalRuleCall_1()); }
	RULE_CLASS_KW
{ after(grammarAccess.getAfterAccess().getCLASS_KWTerminalRuleCall_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__After__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__After__Group__2__Impl
	rule__After__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__After__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAfterAccess().getASSIGNASSINGLETerminalRuleCall_2()); }
	RULE_ASSIGNASSINGLE
{ after(grammarAccess.getAfterAccess().getASSIGNASSINGLETerminalRuleCall_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__After__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__After__Group__3__Impl
	rule__After__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__After__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAfterAccess().getMyclassAssignment_3()); }
(rule__After__MyclassAssignment_3)
{ after(grammarAccess.getAfterAccess().getMyclassAssignment_3()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__After__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__After__Group__4__Impl
	rule__After__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__After__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAfterAccess().getMETHOD_KWTerminalRuleCall_4()); }
	RULE_METHOD_KW
{ after(grammarAccess.getAfterAccess().getMETHOD_KWTerminalRuleCall_4()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__After__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__After__Group__5__Impl
	rule__After__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__After__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAfterAccess().getASSIGNASSINGLETerminalRuleCall_5()); }
	RULE_ASSIGNASSINGLE
{ after(grammarAccess.getAfterAccess().getASSIGNASSINGLETerminalRuleCall_5()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__After__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__After__Group__6__Impl
	rule__After__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__After__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAfterAccess().getMethodAssignment_6()); }
(rule__After__MethodAssignment_6)
{ after(grammarAccess.getAfterAccess().getMethodAssignment_6()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__After__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__After__Group__7__Impl
	rule__After__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__After__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAfterAccess().getLEFTPARENTerminalRuleCall_7()); }
	RULE_LEFTPAREN
{ after(grammarAccess.getAfterAccess().getLEFTPARENTerminalRuleCall_7()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__After__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__After__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__After__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getAfterAccess().getRIGHTPARENTerminalRuleCall_8()); }
	RULE_RIGHTPAREN
{ after(grammarAccess.getAfterAccess().getRIGHTPARENTerminalRuleCall_8()); }
)



;
finally {
	restoreStackSize(stackSize);
}





















rule__XtextTest__PackageAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXtextTestAccess().getPackagePackageIDParserRuleCall_2_0()); }
	rulePackageID{ after(grammarAccess.getXtextTestAccess().getPackagePackageIDParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XtextTest__LangAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXtextTestAccess().getLangLangIDParserRuleCall_4_0()); }
	ruleLangID{ after(grammarAccess.getXtextTestAccess().getLangLangIDParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XtextTest__ImportsAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXtextTestAccess().getImportsImportIDParserRuleCall_5_1_0()); }
	ruleImportID{ after(grammarAccess.getXtextTestAccess().getImportsImportIDParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XtextTest__BooleanAssignment_6_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXtextTestAccess().getBooleanBooleanParserRuleCall_6_2_0()); }
	ruleBoolean{ after(grammarAccess.getXtextTestAccess().getBooleanBooleanParserRuleCall_6_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XtextTest__InputAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXtextTestAccess().getInputInputParserRuleCall_7_0()); }
	ruleInput{ after(grammarAccess.getXtextTestAccess().getInputInputParserRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XtextTest__TokensAssignment_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXtextTestAccess().getTokensTokensParserRuleCall_8_0()); }
	ruleTokens{ after(grammarAccess.getXtextTestAccess().getTokensTokensParserRuleCall_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XtextTest__RootAssignment_9
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXtextTestAccess().getRootElementParserRuleCall_9_0()); }
	ruleElement{ after(grammarAccess.getXtextTestAccess().getRootElementParserRuleCall_9_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XtextTest__OutputAssignment_10
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXtextTestAccess().getOutputGeneratorParserRuleCall_10_0()); }
	ruleGenerator{ after(grammarAccess.getXtextTestAccess().getOutputGeneratorParserRuleCall_10_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XtextTest__BeforeAssignment_11
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXtextTestAccess().getBeforeBeforeParserRuleCall_11_0()); }
	ruleBefore{ after(grammarAccess.getXtextTestAccess().getBeforeBeforeParserRuleCall_11_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XtextTest__AfterAssignment_12
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXtextTestAccess().getAfterAfterParserRuleCall_12_0()); }
	ruleAfter{ after(grammarAccess.getXtextTestAccess().getAfterAfterParserRuleCall_12_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Input__TextAssignment_2_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getTextSTRINGTerminalRuleCall_2_0_2_0()); }
	RULE_STRING{ after(grammarAccess.getInputAccess().getTextSTRINGTerminalRuleCall_2_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Input__FileAssignment_2_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getFileSTRINGTerminalRuleCall_2_1_2_0()); }
	RULE_STRING{ after(grammarAccess.getInputAccess().getFileSTRINGTerminalRuleCall_2_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Tokens__TokensAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTokensAccess().getTokensMyTokensParserRuleCall_2_0()); }
	ruleMyTokens{ after(grammarAccess.getTokensAccess().getTokensMyTokensParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MyTokens__TokenAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyTokensAccess().getTokenIDENTIFIERTerminalRuleCall_0_0()); }
	RULE_IDENTIFIER{ after(grammarAccess.getMyTokensAccess().getTokenIDENTIFIERTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MyTokens__CountAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyTokensAccess().getCountINTTerminalRuleCall_1_1_0()); }
	RULE_INT{ after(grammarAccess.getMyTokensAccess().getCountINTTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Element__ImportingAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getImportingIDENTIFIERTerminalRuleCall_2_0_0()); }
	RULE_IDENTIFIER{ after(grammarAccess.getElementAccess().getImportingIDENTIFIERTerminalRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Element__NameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getNameIDENTIFIERTerminalRuleCall_3_0()); }
	RULE_IDENTIFIER{ after(grammarAccess.getElementAccess().getNameIDENTIFIERTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Element__InnerAssignment_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getInnerInnerParserRuleCall_4_0_0()); }
	ruleInner{ after(grammarAccess.getElementAccess().getInnerInnerParserRuleCall_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Element__InnerAssignment_4_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getInnerInnerParserRuleCall_4_1_1_0()); }
	ruleInner{ after(grammarAccess.getElementAccess().getInnerInnerParserRuleCall_4_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Inner__ParameterAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInnerAccess().getParameterIDENTIFIERTerminalRuleCall_1_0()); }
	RULE_IDENTIFIER{ after(grammarAccess.getInnerAccess().getParameterIDENTIFIERTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Inner__AssignAssignment_2_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInnerAccess().getAssignElementParserRuleCall_2_0_1_0()); }
	ruleElement{ after(grammarAccess.getInnerAccess().getAssignElementParserRuleCall_2_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Inner__AssignListAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInnerAccess().getAssignListElementParserRuleCall_2_1_1_0()); }
	ruleElement{ after(grammarAccess.getInnerAccess().getAssignListElementParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Inner__AssignListAssignment_2_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInnerAccess().getAssignListElementParserRuleCall_2_1_2_1_0()); }
	ruleElement{ after(grammarAccess.getInnerAccess().getAssignListElementParserRuleCall_2_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Inner__ValueAssignment_2_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInnerAccess().getValueSTRINGTerminalRuleCall_2_2_1_0()); }
	RULE_STRING{ after(grammarAccess.getInnerAccess().getValueSTRINGTerminalRuleCall_2_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Inner__AssignAsDataAssignment_2_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInnerAccess().getAssignAsDataSTRINGTerminalRuleCall_2_3_1_0()); }
	RULE_STRING{ after(grammarAccess.getInnerAccess().getAssignAsDataSTRINGTerminalRuleCall_2_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Inner__AssignAsBoolAssignment_2_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInnerAccess().getAssignAsBoolAlternatives_2_4_1_0()); }
(rule__Inner__AssignAsBoolAlternatives_2_4_1_0)
{ after(grammarAccess.getInnerAccess().getAssignAsBoolAlternatives_2_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Inner__IsNullAssignment_2_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInnerAccess().getIsNullISNULLTerminalRuleCall_2_5_0()); }
	RULE_ISNULL{ after(grammarAccess.getInnerAccess().getIsNullISNULLTerminalRuleCall_2_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__OutputAssignment_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneratorAccess().getOutputSTRINGTerminalRuleCall_1_3_0()); }
	RULE_STRING{ after(grammarAccess.getGeneratorAccess().getOutputSTRINGTerminalRuleCall_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__ExpectedAssignment_2_2_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneratorAccess().getExpectedSTRINGTerminalRuleCall_2_2_0_1_0()); }
	RULE_STRING{ after(grammarAccess.getGeneratorAccess().getExpectedSTRINGTerminalRuleCall_2_2_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__IsSameAsInputFileAssignment_2_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneratorAccess().getIsSameAsInputFileISSAMEASINPUTFILETerminalRuleCall_2_2_1_0()); }
	RULE_ISSAMEASINPUTFILE{ after(grammarAccess.getGeneratorAccess().getIsSameAsInputFileISSAMEASINPUTFILETerminalRuleCall_2_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__PatternFileAssignment_3_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneratorAccess().getPatternFileSTRINGTerminalRuleCall_3_1_2_0()); }
	RULE_STRING{ after(grammarAccess.getGeneratorAccess().getPatternFileSTRINGTerminalRuleCall_3_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__ReplacePatternsAssignment_3_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneratorAccess().getReplacePatternsReplacePatternsParserRuleCall_3_2_0()); }
	ruleReplacePatterns{ after(grammarAccess.getGeneratorAccess().getReplacePatternsReplacePatternsParserRuleCall_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__ExceptionAssignment_4_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneratorAccess().getExceptionPackageIDParserRuleCall_4_2_0()); }
	rulePackageID{ after(grammarAccess.getGeneratorAccess().getExceptionPackageIDParserRuleCall_4_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReplacePatterns__RegexAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReplacePatternsAccess().getRegexSTRINGTerminalRuleCall_0_0()); }
	RULE_STRING{ after(grammarAccess.getReplacePatternsAccess().getRegexSTRINGTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReplacePatterns__ReplaceAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReplacePatternsAccess().getReplaceSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getReplacePatternsAccess().getReplaceSTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Before__MyclassAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBeforeAccess().getMyclassPackageIDParserRuleCall_3_0()); }
	rulePackageID{ after(grammarAccess.getBeforeAccess().getMyclassPackageIDParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Before__MethodAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBeforeAccess().getMethodPackageIDParserRuleCall_6_0()); }
	rulePackageID{ after(grammarAccess.getBeforeAccess().getMethodPackageIDParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__After__MyclassAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAfterAccess().getMyclassPackageIDParserRuleCall_3_0()); }
	rulePackageID{ after(grammarAccess.getAfterAccess().getMyclassPackageIDParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__After__MethodAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAfterAccess().getMethodPackageIDParserRuleCall_6_0()); }
	rulePackageID{ after(grammarAccess.getAfterAccess().getMethodPackageIDParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_PACKAGE : 'package';

RULE_LANGUAGE : 'language';

RULE_IMPORTS : 'imports';

RULE_POINT : '.';

RULE_SPLITLEXER : 'split-lexer';

RULE_SOURCE : 'source';

RULE_SRCTEXT : 'text';

RULE_FILE : 'file';

RULE_LEXER : 'lexer-tokens';

RULE_OUTPUT : 'output';

RULE_EXPECTED : 'expected';

RULE_ISSAMEASINPUTFILE : 'isSameAsInputFile';

RULE_PATTERNS : 'replacePatterns';

RULE_EXCEPTIONS : 'exceptions';

RULE_BEFORE_KW : 'before';

RULE_AFTER_KW : 'after';

RULE_CLASS_KW : 'class';

RULE_METHOD_KW : 'method';

RULE_ISNULL : 'isNull';

RULE_LEFTPAREN : '(';

RULE_RIGHTPAREN : ')';

RULE_ASSIGNASBOOL : '?=';

RULE_TRUE : 'true';

RULE_FALSE : 'false';

RULE_ASSIGNASSINGLE : '=';

RULE_ASSIGNASLIST : '+=';

RULE_ASSIGNASSTRING : '++';

RULE_ASSIGNASDATALIST : '+*';

RULE_COMMA : ',';

RULE_IDENTIFIER : RULE_ID;

RULE_IMPORTER : '::';

fragment RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


