/*
 * generated by Xtext 2.9.0-SNAPSHOT
 */
package at.jku.weiner.xtexttest.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractParserRuleElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class XtextTestGrammarAccess extends AbstractGrammarElementFinder {
	
	public class XtextTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.xtexttest.XtextTest.XtextTest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXtextTestAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cPACKAGETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cPackageAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPackagePackageIDParserRuleCall_2_0 = (RuleCall)cPackageAssignment_2.eContents().get(0);
		private final RuleCall cLANGUAGETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cLangAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLangLangIDParserRuleCall_4_0 = (RuleCall)cLangAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final RuleCall cSPLITLEXERTerminalRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final RuleCall cASSIGNASSINGLETerminalRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Assignment cBooleanAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cBooleanBooleanParserRuleCall_5_2_0 = (RuleCall)cBooleanAssignment_5_2.eContents().get(0);
		private final Assignment cInputAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cInputInputParserRuleCall_6_0 = (RuleCall)cInputAssignment_6.eContents().get(0);
		private final Assignment cTokensAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTokensTokensParserRuleCall_7_0 = (RuleCall)cTokensAssignment_7.eContents().get(0);
		private final Assignment cRootAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cRootElementParserRuleCall_8_0 = (RuleCall)cRootAssignment_8.eContents().get(0);
		private final Assignment cOutputAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cOutputGeneratorParserRuleCall_9_0 = (RuleCall)cOutputAssignment_9.eContents().get(0);
		private final Assignment cBeforeAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cBeforeBeforeParserRuleCall_10_0 = (RuleCall)cBeforeAssignment_10.eContents().get(0);
		private final Assignment cAfterAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cAfterAfterParserRuleCall_11_0 = (RuleCall)cAfterAssignment_11.eContents().get(0);
		
		//XtextTest:
		//	{XtextTest} PACKAGE package=PackageID
		//	LANGUAGE lang=LangID (SPLITLEXER ASSIGNASSINGLE boolean=Boolean)?
		//	input=Input
		//	tokens=Tokens?
		//	root=Element
		//	output=Generator?
		//	before=Before?
		//	after=After?;
		@Override public ParserRule getRule() { return rule; }
		
		//{XtextTest} PACKAGE package=PackageID LANGUAGE lang=LangID (SPLITLEXER ASSIGNASSINGLE boolean=Boolean)? input=Input
		//tokens=Tokens? root=Element output=Generator? before=Before? after=After?
		public Group getGroup() { return cGroup; }
		
		//{XtextTest}
		public Action getXtextTestAction_0() { return cXtextTestAction_0; }
		
		//PACKAGE
		public RuleCall getPACKAGETerminalRuleCall_1() { return cPACKAGETerminalRuleCall_1; }
		
		//package=PackageID
		public Assignment getPackageAssignment_2() { return cPackageAssignment_2; }
		
		//PackageID
		public RuleCall getPackagePackageIDParserRuleCall_2_0() { return cPackagePackageIDParserRuleCall_2_0; }
		
		//LANGUAGE
		public RuleCall getLANGUAGETerminalRuleCall_3() { return cLANGUAGETerminalRuleCall_3; }
		
		//lang=LangID
		public Assignment getLangAssignment_4() { return cLangAssignment_4; }
		
		//LangID
		public RuleCall getLangLangIDParserRuleCall_4_0() { return cLangLangIDParserRuleCall_4_0; }
		
		//(SPLITLEXER ASSIGNASSINGLE boolean=Boolean)?
		public Group getGroup_5() { return cGroup_5; }
		
		//SPLITLEXER
		public RuleCall getSPLITLEXERTerminalRuleCall_5_0() { return cSPLITLEXERTerminalRuleCall_5_0; }
		
		//ASSIGNASSINGLE
		public RuleCall getASSIGNASSINGLETerminalRuleCall_5_1() { return cASSIGNASSINGLETerminalRuleCall_5_1; }
		
		//boolean=Boolean
		public Assignment getBooleanAssignment_5_2() { return cBooleanAssignment_5_2; }
		
		//Boolean
		public RuleCall getBooleanBooleanParserRuleCall_5_2_0() { return cBooleanBooleanParserRuleCall_5_2_0; }
		
		//input=Input
		public Assignment getInputAssignment_6() { return cInputAssignment_6; }
		
		//Input
		public RuleCall getInputInputParserRuleCall_6_0() { return cInputInputParserRuleCall_6_0; }
		
		//tokens=Tokens?
		public Assignment getTokensAssignment_7() { return cTokensAssignment_7; }
		
		//Tokens
		public RuleCall getTokensTokensParserRuleCall_7_0() { return cTokensTokensParserRuleCall_7_0; }
		
		//root=Element
		public Assignment getRootAssignment_8() { return cRootAssignment_8; }
		
		//Element
		public RuleCall getRootElementParserRuleCall_8_0() { return cRootElementParserRuleCall_8_0; }
		
		//output=Generator?
		public Assignment getOutputAssignment_9() { return cOutputAssignment_9; }
		
		//Generator
		public RuleCall getOutputGeneratorParserRuleCall_9_0() { return cOutputGeneratorParserRuleCall_9_0; }
		
		//before=Before?
		public Assignment getBeforeAssignment_10() { return cBeforeAssignment_10; }
		
		//Before
		public RuleCall getBeforeBeforeParserRuleCall_10_0() { return cBeforeBeforeParserRuleCall_10_0; }
		
		//after=After?
		public Assignment getAfterAssignment_11() { return cAfterAssignment_11; }
		
		//After
		public RuleCall getAfterAfterParserRuleCall_11_0() { return cAfterAfterParserRuleCall_11_0; }
	}
	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.xtexttest.XtextTest.Boolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Boolean:
		//	'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class PackageIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.xtexttest.XtextTest.PackageID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cPOINTTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//PackageID:
		//	IDENTIFIER (POINT IDENTIFIER)*;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER (POINT IDENTIFIER)*
		public Group getGroup() { return cGroup; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0() { return cIDENTIFIERTerminalRuleCall_0; }
		
		//(POINT IDENTIFIER)*
		public Group getGroup_1() { return cGroup_1; }
		
		//POINT
		public RuleCall getPOINTTerminalRuleCall_1_0() { return cPOINTTerminalRuleCall_1_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_1_1() { return cIDENTIFIERTerminalRuleCall_1_1; }
	}
	public class LangIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.xtexttest.XtextTest.LangID");
		private final RuleCall cIDENTIFIERTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//LangID:
		//	IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall() { return cIDENTIFIERTerminalRuleCall; }
	}
	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.xtexttest.XtextTest.Input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInputAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cSOURCETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final RuleCall cSRCTEXTTerminalRuleCall_2_0_0 = (RuleCall)cGroup_2_0.eContents().get(0);
		private final RuleCall cASSIGNASSINGLETerminalRuleCall_2_0_1 = (RuleCall)cGroup_2_0.eContents().get(1);
		private final Assignment cTextAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cTextSTRINGTerminalRuleCall_2_0_2_0 = (RuleCall)cTextAssignment_2_0_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final RuleCall cFILETerminalRuleCall_2_1_0 = (RuleCall)cGroup_2_1.eContents().get(0);
		private final RuleCall cASSIGNASSINGLETerminalRuleCall_2_1_1 = (RuleCall)cGroup_2_1.eContents().get(1);
		private final Assignment cFileAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cFileSTRINGTerminalRuleCall_2_1_2_0 = (RuleCall)cFileAssignment_2_1_2.eContents().get(0);
		
		//Input:
		//	{Input} SOURCE (SRCTEXT ASSIGNASSINGLE text=STRING
		//	| FILE ASSIGNASSINGLE file=STRING);
		@Override public ParserRule getRule() { return rule; }
		
		//{Input} SOURCE (SRCTEXT ASSIGNASSINGLE text=STRING | FILE ASSIGNASSINGLE file=STRING)
		public Group getGroup() { return cGroup; }
		
		//{Input}
		public Action getInputAction_0() { return cInputAction_0; }
		
		//SOURCE
		public RuleCall getSOURCETerminalRuleCall_1() { return cSOURCETerminalRuleCall_1; }
		
		//(SRCTEXT ASSIGNASSINGLE text=STRING | FILE ASSIGNASSINGLE file=STRING)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//SRCTEXT ASSIGNASSINGLE text=STRING
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//SRCTEXT
		public RuleCall getSRCTEXTTerminalRuleCall_2_0_0() { return cSRCTEXTTerminalRuleCall_2_0_0; }
		
		//ASSIGNASSINGLE
		public RuleCall getASSIGNASSINGLETerminalRuleCall_2_0_1() { return cASSIGNASSINGLETerminalRuleCall_2_0_1; }
		
		//text=STRING
		public Assignment getTextAssignment_2_0_2() { return cTextAssignment_2_0_2; }
		
		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_2_0_2_0() { return cTextSTRINGTerminalRuleCall_2_0_2_0; }
		
		//FILE ASSIGNASSINGLE file=STRING
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//FILE
		public RuleCall getFILETerminalRuleCall_2_1_0() { return cFILETerminalRuleCall_2_1_0; }
		
		//ASSIGNASSINGLE
		public RuleCall getASSIGNASSINGLETerminalRuleCall_2_1_1() { return cASSIGNASSINGLETerminalRuleCall_2_1_1; }
		
		//file=STRING
		public Assignment getFileAssignment_2_1_2() { return cFileAssignment_2_1_2; }
		
		//STRING
		public RuleCall getFileSTRINGTerminalRuleCall_2_1_2_0() { return cFileSTRINGTerminalRuleCall_2_1_2_0; }
	}
	public class TokensElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.xtexttest.XtextTest.Tokens");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTokensAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cLEXERTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cTokensAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTokensMyTokensParserRuleCall_2_0 = (RuleCall)cTokensAssignment_2.eContents().get(0);
		
		//Tokens:
		//	{Tokens} LEXER
		//	tokens+=MyTokens+;
		@Override public ParserRule getRule() { return rule; }
		
		//{Tokens} LEXER tokens+=MyTokens+
		public Group getGroup() { return cGroup; }
		
		//{Tokens}
		public Action getTokensAction_0() { return cTokensAction_0; }
		
		//LEXER
		public RuleCall getLEXERTerminalRuleCall_1() { return cLEXERTerminalRuleCall_1; }
		
		//tokens+=MyTokens+
		public Assignment getTokensAssignment_2() { return cTokensAssignment_2; }
		
		//MyTokens
		public RuleCall getTokensMyTokensParserRuleCall_2_0() { return cTokensMyTokensParserRuleCall_2_0; }
	}
	public class MyTokensElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.xtexttest.XtextTest.MyTokens");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTokenAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTokenIDENTIFIERTerminalRuleCall_0_0 = (RuleCall)cTokenAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cASSIGNASDATALISTTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cCountAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCountINTTerminalRuleCall_1_1_0 = (RuleCall)cCountAssignment_1_1.eContents().get(0);
		
		//MyTokens:
		//	token=IDENTIFIER (ASSIGNASDATALIST count=INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//token=IDENTIFIER (ASSIGNASDATALIST count=INT)?
		public Group getGroup() { return cGroup; }
		
		//token=IDENTIFIER
		public Assignment getTokenAssignment_0() { return cTokenAssignment_0; }
		
		//IDENTIFIER
		public RuleCall getTokenIDENTIFIERTerminalRuleCall_0_0() { return cTokenIDENTIFIERTerminalRuleCall_0_0; }
		
		//(ASSIGNASDATALIST count=INT)?
		public Group getGroup_1() { return cGroup_1; }
		
		//ASSIGNASDATALIST
		public RuleCall getASSIGNASDATALISTTerminalRuleCall_1_0() { return cASSIGNASDATALISTTerminalRuleCall_1_0; }
		
		//count=INT
		public Assignment getCountAssignment_1_1() { return cCountAssignment_1_1; }
		
		//INT
		public RuleCall getCountINTTerminalRuleCall_1_1_0() { return cCountINTTerminalRuleCall_1_1_0; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.xtexttest.XtextTest.Element");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cElementAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cLEFTPARENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cInnerAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cInnerInnerParserRuleCall_3_0_0 = (RuleCall)cInnerAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_3_1_0 = (RuleCall)cGroup_3_1.eContents().get(0);
		private final Assignment cInnerAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cInnerInnerParserRuleCall_3_1_1_0 = (RuleCall)cInnerAssignment_3_1_1.eContents().get(0);
		private final RuleCall cRIGHTPARENTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Element:
		//	{Element} LEFTPAREN
		//	name=IDENTIFIER (inner+=Inner (COMMA inner+=Inner)*)?
		//	RIGHTPAREN;
		@Override public ParserRule getRule() { return rule; }
		
		//{Element} LEFTPAREN name=IDENTIFIER (inner+=Inner (COMMA inner+=Inner)*)? RIGHTPAREN
		public Group getGroup() { return cGroup; }
		
		//{Element}
		public Action getElementAction_0() { return cElementAction_0; }
		
		//LEFTPAREN
		public RuleCall getLEFTPARENTerminalRuleCall_1() { return cLEFTPARENTerminalRuleCall_1; }
		
		//name=IDENTIFIER
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_2_0() { return cNameIDENTIFIERTerminalRuleCall_2_0; }
		
		//(inner+=Inner (COMMA inner+=Inner)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//inner+=Inner
		public Assignment getInnerAssignment_3_0() { return cInnerAssignment_3_0; }
		
		//Inner
		public RuleCall getInnerInnerParserRuleCall_3_0_0() { return cInnerInnerParserRuleCall_3_0_0; }
		
		//(COMMA inner+=Inner)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_3_1_0() { return cCOMMATerminalRuleCall_3_1_0; }
		
		//inner+=Inner
		public Assignment getInnerAssignment_3_1_1() { return cInnerAssignment_3_1_1; }
		
		//Inner
		public RuleCall getInnerInnerParserRuleCall_3_1_1_0() { return cInnerInnerParserRuleCall_3_1_1_0; }
		
		//RIGHTPAREN
		public RuleCall getRIGHTPARENTerminalRuleCall_4() { return cRIGHTPARENTerminalRuleCall_4; }
	}
	public class InnerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.xtexttest.XtextTest.Inner");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInnerAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cParameterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParameterIDENTIFIERTerminalRuleCall_1_0 = (RuleCall)cParameterAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final RuleCall cASSIGNASSINGLETerminalRuleCall_2_0_0 = (RuleCall)cGroup_2_0.eContents().get(0);
		private final Assignment cAssignAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cAssignElementParserRuleCall_2_0_1_0 = (RuleCall)cAssignAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final RuleCall cASSIGNASLISTTerminalRuleCall_2_1_0 = (RuleCall)cGroup_2_1.eContents().get(0);
		private final Assignment cAssignListAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cAssignListElementParserRuleCall_2_1_1_0 = (RuleCall)cAssignListAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cGroup_2_1.eContents().get(2);
		private final RuleCall cCOMMATerminalRuleCall_2_1_2_0 = (RuleCall)cGroup_2_1_2.eContents().get(0);
		private final Assignment cAssignListAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final RuleCall cAssignListElementParserRuleCall_2_1_2_1_0 = (RuleCall)cAssignListAssignment_2_1_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cAlternatives_2.eContents().get(2);
		private final RuleCall cASSIGNASSTRINGTerminalRuleCall_2_2_0 = (RuleCall)cGroup_2_2.eContents().get(0);
		private final Assignment cValueAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_2_1_0 = (RuleCall)cValueAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cAlternatives_2.eContents().get(3);
		private final RuleCall cASSIGNASDATALISTTerminalRuleCall_2_3_0 = (RuleCall)cGroup_2_3.eContents().get(0);
		private final Assignment cAssignAsDataAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cAssignAsDataSTRINGTerminalRuleCall_2_3_1_0 = (RuleCall)cAssignAsDataAssignment_2_3_1.eContents().get(0);
		
		//Inner:
		//	{Inner} parameter=IDENTIFIER (ASSIGNASSINGLE assign=Element
		//	| ASSIGNASLIST assignList+=Element (COMMA assignList+=Element)*
		//	| ASSIGNASSTRING value=STRING
		//	| ASSIGNASDATALIST assignAsData=STRING);
		@Override public ParserRule getRule() { return rule; }
		
		//{Inner} parameter=IDENTIFIER (ASSIGNASSINGLE assign=Element | ASSIGNASLIST assignList+=Element (COMMA
		//assignList+=Element)* | ASSIGNASSTRING value=STRING | ASSIGNASDATALIST assignAsData=STRING)
		public Group getGroup() { return cGroup; }
		
		//{Inner}
		public Action getInnerAction_0() { return cInnerAction_0; }
		
		//parameter=IDENTIFIER
		public Assignment getParameterAssignment_1() { return cParameterAssignment_1; }
		
		//IDENTIFIER
		public RuleCall getParameterIDENTIFIERTerminalRuleCall_1_0() { return cParameterIDENTIFIERTerminalRuleCall_1_0; }
		
		//(ASSIGNASSINGLE assign=Element | ASSIGNASLIST assignList+=Element (COMMA assignList+=Element)* | ASSIGNASSTRING
		//value=STRING | ASSIGNASDATALIST assignAsData=STRING)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//ASSIGNASSINGLE assign=Element
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//ASSIGNASSINGLE
		public RuleCall getASSIGNASSINGLETerminalRuleCall_2_0_0() { return cASSIGNASSINGLETerminalRuleCall_2_0_0; }
		
		//assign=Element
		public Assignment getAssignAssignment_2_0_1() { return cAssignAssignment_2_0_1; }
		
		//Element
		public RuleCall getAssignElementParserRuleCall_2_0_1_0() { return cAssignElementParserRuleCall_2_0_1_0; }
		
		//ASSIGNASLIST assignList+=Element (COMMA assignList+=Element)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//ASSIGNASLIST
		public RuleCall getASSIGNASLISTTerminalRuleCall_2_1_0() { return cASSIGNASLISTTerminalRuleCall_2_1_0; }
		
		//assignList+=Element
		public Assignment getAssignListAssignment_2_1_1() { return cAssignListAssignment_2_1_1; }
		
		//Element
		public RuleCall getAssignListElementParserRuleCall_2_1_1_0() { return cAssignListElementParserRuleCall_2_1_1_0; }
		
		//(COMMA assignList+=Element)*
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_2_1_2_0() { return cCOMMATerminalRuleCall_2_1_2_0; }
		
		//assignList+=Element
		public Assignment getAssignListAssignment_2_1_2_1() { return cAssignListAssignment_2_1_2_1; }
		
		//Element
		public RuleCall getAssignListElementParserRuleCall_2_1_2_1_0() { return cAssignListElementParserRuleCall_2_1_2_1_0; }
		
		//ASSIGNASSTRING value=STRING
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//ASSIGNASSTRING
		public RuleCall getASSIGNASSTRINGTerminalRuleCall_2_2_0() { return cASSIGNASSTRINGTerminalRuleCall_2_2_0; }
		
		//value=STRING
		public Assignment getValueAssignment_2_2_1() { return cValueAssignment_2_2_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_2_1_0() { return cValueSTRINGTerminalRuleCall_2_2_1_0; }
		
		//ASSIGNASDATALIST assignAsData=STRING
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//ASSIGNASDATALIST
		public RuleCall getASSIGNASDATALISTTerminalRuleCall_2_3_0() { return cASSIGNASDATALISTTerminalRuleCall_2_3_0; }
		
		//assignAsData=STRING
		public Assignment getAssignAsDataAssignment_2_3_1() { return cAssignAsDataAssignment_2_3_1; }
		
		//STRING
		public RuleCall getAssignAsDataSTRINGTerminalRuleCall_2_3_1_0() { return cAssignAsDataSTRINGTerminalRuleCall_2_3_1_0; }
	}
	public class GeneratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.xtexttest.XtextTest.Generator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGeneratorAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cOUTPUTTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cFILETerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cASSIGNASSINGLETerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Assignment cOutputAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cOutputSTRINGTerminalRuleCall_1_3_0 = (RuleCall)cOutputAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cEXPECTEDTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cFILETerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Alternatives cAlternatives_2_2 = (Alternatives)cGroup_2.eContents().get(2);
		private final Group cGroup_2_2_0 = (Group)cAlternatives_2_2.eContents().get(0);
		private final RuleCall cASSIGNASSINGLETerminalRuleCall_2_2_0_0 = (RuleCall)cGroup_2_2_0.eContents().get(0);
		private final Assignment cExpectedAssignment_2_2_0_1 = (Assignment)cGroup_2_2_0.eContents().get(1);
		private final RuleCall cExpectedSTRINGTerminalRuleCall_2_2_0_1_0 = (RuleCall)cExpectedAssignment_2_2_0_1.eContents().get(0);
		private final Assignment cIsSameAsInputFileAssignment_2_2_1 = (Assignment)cAlternatives_2_2.eContents().get(1);
		private final RuleCall cIsSameAsInputFileISSAMEASINPUTFILETerminalRuleCall_2_2_1_0 = (RuleCall)cIsSameAsInputFileAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cPATTERNSTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final RuleCall cFILETerminalRuleCall_3_1_0 = (RuleCall)cGroup_3_1.eContents().get(0);
		private final RuleCall cASSIGNASSINGLETerminalRuleCall_3_1_1 = (RuleCall)cGroup_3_1.eContents().get(1);
		private final Assignment cPatternFileAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cPatternFileSTRINGTerminalRuleCall_3_1_2_0 = (RuleCall)cPatternFileAssignment_3_1_2.eContents().get(0);
		private final Assignment cReplacePatternsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cReplacePatternsReplacePatternsParserRuleCall_3_2_0 = (RuleCall)cReplacePatternsAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cEXPECTEDTerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final RuleCall cEXCEPTIONSTerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Assignment cExceptionAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cExceptionPackageIDParserRuleCall_4_2_0 = (RuleCall)cExceptionAssignment_4_2.eContents().get(0);
		
		//Generator:
		//	{Generator} (OUTPUT FILE ASSIGNASSINGLE output=STRING) (EXPECTED FILE (ASSIGNASSINGLE expected=STRING |
		//	isSameAsInputFile?=ISSAMEASINPUTFILE)) (PATTERNS (FILE ASSIGNASSINGLE patternFile=STRING)?
		//	replacePatterns+=ReplacePatterns*)? (EXPECTED EXCEPTIONS
		//	exception=PackageID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Generator} (OUTPUT FILE ASSIGNASSINGLE output=STRING) (EXPECTED FILE (ASSIGNASSINGLE expected=STRING |
		//isSameAsInputFile?=ISSAMEASINPUTFILE)) (PATTERNS (FILE ASSIGNASSINGLE patternFile=STRING)?
		//replacePatterns+=ReplacePatterns*)? (EXPECTED EXCEPTIONS exception=PackageID)?
		public Group getGroup() { return cGroup; }
		
		//{Generator}
		public Action getGeneratorAction_0() { return cGeneratorAction_0; }
		
		//(OUTPUT FILE ASSIGNASSINGLE output=STRING)
		public Group getGroup_1() { return cGroup_1; }
		
		//OUTPUT
		public RuleCall getOUTPUTTerminalRuleCall_1_0() { return cOUTPUTTerminalRuleCall_1_0; }
		
		//FILE
		public RuleCall getFILETerminalRuleCall_1_1() { return cFILETerminalRuleCall_1_1; }
		
		//ASSIGNASSINGLE
		public RuleCall getASSIGNASSINGLETerminalRuleCall_1_2() { return cASSIGNASSINGLETerminalRuleCall_1_2; }
		
		//output=STRING
		public Assignment getOutputAssignment_1_3() { return cOutputAssignment_1_3; }
		
		//STRING
		public RuleCall getOutputSTRINGTerminalRuleCall_1_3_0() { return cOutputSTRINGTerminalRuleCall_1_3_0; }
		
		//(EXPECTED FILE (ASSIGNASSINGLE expected=STRING | isSameAsInputFile?=ISSAMEASINPUTFILE))
		public Group getGroup_2() { return cGroup_2; }
		
		//EXPECTED
		public RuleCall getEXPECTEDTerminalRuleCall_2_0() { return cEXPECTEDTerminalRuleCall_2_0; }
		
		//FILE
		public RuleCall getFILETerminalRuleCall_2_1() { return cFILETerminalRuleCall_2_1; }
		
		//(ASSIGNASSINGLE expected=STRING | isSameAsInputFile?=ISSAMEASINPUTFILE)
		public Alternatives getAlternatives_2_2() { return cAlternatives_2_2; }
		
		//ASSIGNASSINGLE expected=STRING
		public Group getGroup_2_2_0() { return cGroup_2_2_0; }
		
		//ASSIGNASSINGLE
		public RuleCall getASSIGNASSINGLETerminalRuleCall_2_2_0_0() { return cASSIGNASSINGLETerminalRuleCall_2_2_0_0; }
		
		//expected=STRING
		public Assignment getExpectedAssignment_2_2_0_1() { return cExpectedAssignment_2_2_0_1; }
		
		//STRING
		public RuleCall getExpectedSTRINGTerminalRuleCall_2_2_0_1_0() { return cExpectedSTRINGTerminalRuleCall_2_2_0_1_0; }
		
		//isSameAsInputFile?=ISSAMEASINPUTFILE
		public Assignment getIsSameAsInputFileAssignment_2_2_1() { return cIsSameAsInputFileAssignment_2_2_1; }
		
		//ISSAMEASINPUTFILE
		public RuleCall getIsSameAsInputFileISSAMEASINPUTFILETerminalRuleCall_2_2_1_0() { return cIsSameAsInputFileISSAMEASINPUTFILETerminalRuleCall_2_2_1_0; }
		
		//(PATTERNS (FILE ASSIGNASSINGLE patternFile=STRING)? replacePatterns+=ReplacePatterns*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//PATTERNS
		public RuleCall getPATTERNSTerminalRuleCall_3_0() { return cPATTERNSTerminalRuleCall_3_0; }
		
		//(FILE ASSIGNASSINGLE patternFile=STRING)?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//FILE
		public RuleCall getFILETerminalRuleCall_3_1_0() { return cFILETerminalRuleCall_3_1_0; }
		
		//ASSIGNASSINGLE
		public RuleCall getASSIGNASSINGLETerminalRuleCall_3_1_1() { return cASSIGNASSINGLETerminalRuleCall_3_1_1; }
		
		//patternFile=STRING
		public Assignment getPatternFileAssignment_3_1_2() { return cPatternFileAssignment_3_1_2; }
		
		//STRING
		public RuleCall getPatternFileSTRINGTerminalRuleCall_3_1_2_0() { return cPatternFileSTRINGTerminalRuleCall_3_1_2_0; }
		
		//replacePatterns+=ReplacePatterns*
		public Assignment getReplacePatternsAssignment_3_2() { return cReplacePatternsAssignment_3_2; }
		
		//ReplacePatterns
		public RuleCall getReplacePatternsReplacePatternsParserRuleCall_3_2_0() { return cReplacePatternsReplacePatternsParserRuleCall_3_2_0; }
		
		//(EXPECTED EXCEPTIONS exception=PackageID)?
		public Group getGroup_4() { return cGroup_4; }
		
		//EXPECTED
		public RuleCall getEXPECTEDTerminalRuleCall_4_0() { return cEXPECTEDTerminalRuleCall_4_0; }
		
		//EXCEPTIONS
		public RuleCall getEXCEPTIONSTerminalRuleCall_4_1() { return cEXCEPTIONSTerminalRuleCall_4_1; }
		
		//exception=PackageID
		public Assignment getExceptionAssignment_4_2() { return cExceptionAssignment_4_2; }
		
		//PackageID
		public RuleCall getExceptionPackageIDParserRuleCall_4_2_0() { return cExceptionPackageIDParserRuleCall_4_2_0; }
	}
	public class ReplacePatternsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.xtexttest.XtextTest.ReplacePatterns");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRegexAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRegexSTRINGTerminalRuleCall_0_0 = (RuleCall)cRegexAssignment_0.eContents().get(0);
		private final RuleCall cASSIGNASSINGLETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cReplaceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReplaceSTRINGTerminalRuleCall_2_0 = (RuleCall)cReplaceAssignment_2.eContents().get(0);
		
		//ReplacePatterns:
		//	regex=STRING ASSIGNASSINGLE replace=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//regex=STRING ASSIGNASSINGLE replace=STRING
		public Group getGroup() { return cGroup; }
		
		//regex=STRING
		public Assignment getRegexAssignment_0() { return cRegexAssignment_0; }
		
		//STRING
		public RuleCall getRegexSTRINGTerminalRuleCall_0_0() { return cRegexSTRINGTerminalRuleCall_0_0; }
		
		//ASSIGNASSINGLE
		public RuleCall getASSIGNASSINGLETerminalRuleCall_1() { return cASSIGNASSINGLETerminalRuleCall_1; }
		
		//replace=STRING
		public Assignment getReplaceAssignment_2() { return cReplaceAssignment_2; }
		
		//STRING
		public RuleCall getReplaceSTRINGTerminalRuleCall_2_0() { return cReplaceSTRINGTerminalRuleCall_2_0; }
	}
	public class BeforeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.xtexttest.XtextTest.Before");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBEFORE_KWTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cCLASS_KWTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cASSIGNASSINGLETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cMyclassAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMyclassPackageIDParserRuleCall_3_0 = (RuleCall)cMyclassAssignment_3.eContents().get(0);
		private final RuleCall cMETHOD_KWTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cASSIGNASSINGLETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cMethodAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMethodPackageIDParserRuleCall_6_0 = (RuleCall)cMethodAssignment_6.eContents().get(0);
		private final RuleCall cLEFTPARENTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final RuleCall cRIGHTPARENTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		//Before:
		//	BEFORE_KW CLASS_KW ASSIGNASSINGLE myclass=PackageID
		//	METHOD_KW ASSIGNASSINGLE method=PackageID
		//	LEFTPAREN RIGHTPAREN;
		@Override public ParserRule getRule() { return rule; }
		
		//BEFORE_KW CLASS_KW ASSIGNASSINGLE myclass=PackageID METHOD_KW ASSIGNASSINGLE method=PackageID LEFTPAREN RIGHTPAREN
		public Group getGroup() { return cGroup; }
		
		//BEFORE_KW
		public RuleCall getBEFORE_KWTerminalRuleCall_0() { return cBEFORE_KWTerminalRuleCall_0; }
		
		//CLASS_KW
		public RuleCall getCLASS_KWTerminalRuleCall_1() { return cCLASS_KWTerminalRuleCall_1; }
		
		//ASSIGNASSINGLE
		public RuleCall getASSIGNASSINGLETerminalRuleCall_2() { return cASSIGNASSINGLETerminalRuleCall_2; }
		
		//myclass=PackageID
		public Assignment getMyclassAssignment_3() { return cMyclassAssignment_3; }
		
		//PackageID
		public RuleCall getMyclassPackageIDParserRuleCall_3_0() { return cMyclassPackageIDParserRuleCall_3_0; }
		
		//METHOD_KW
		public RuleCall getMETHOD_KWTerminalRuleCall_4() { return cMETHOD_KWTerminalRuleCall_4; }
		
		//ASSIGNASSINGLE
		public RuleCall getASSIGNASSINGLETerminalRuleCall_5() { return cASSIGNASSINGLETerminalRuleCall_5; }
		
		//method=PackageID
		public Assignment getMethodAssignment_6() { return cMethodAssignment_6; }
		
		//PackageID
		public RuleCall getMethodPackageIDParserRuleCall_6_0() { return cMethodPackageIDParserRuleCall_6_0; }
		
		//LEFTPAREN
		public RuleCall getLEFTPARENTerminalRuleCall_7() { return cLEFTPARENTerminalRuleCall_7; }
		
		//RIGHTPAREN
		public RuleCall getRIGHTPARENTerminalRuleCall_8() { return cRIGHTPARENTerminalRuleCall_8; }
	}
	public class AfterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.xtexttest.XtextTest.After");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAFTER_KWTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cCLASS_KWTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cASSIGNASSINGLETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cMyclassAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMyclassPackageIDParserRuleCall_3_0 = (RuleCall)cMyclassAssignment_3.eContents().get(0);
		private final RuleCall cMETHOD_KWTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cASSIGNASSINGLETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cMethodAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMethodPackageIDParserRuleCall_6_0 = (RuleCall)cMethodAssignment_6.eContents().get(0);
		private final RuleCall cLEFTPARENTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final RuleCall cRIGHTPARENTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		//After:
		//	AFTER_KW CLASS_KW ASSIGNASSINGLE myclass=PackageID
		//	METHOD_KW ASSIGNASSINGLE method=PackageID
		//	LEFTPAREN RIGHTPAREN;
		@Override public ParserRule getRule() { return rule; }
		
		//AFTER_KW CLASS_KW ASSIGNASSINGLE myclass=PackageID METHOD_KW ASSIGNASSINGLE method=PackageID LEFTPAREN RIGHTPAREN
		public Group getGroup() { return cGroup; }
		
		//AFTER_KW
		public RuleCall getAFTER_KWTerminalRuleCall_0() { return cAFTER_KWTerminalRuleCall_0; }
		
		//CLASS_KW
		public RuleCall getCLASS_KWTerminalRuleCall_1() { return cCLASS_KWTerminalRuleCall_1; }
		
		//ASSIGNASSINGLE
		public RuleCall getASSIGNASSINGLETerminalRuleCall_2() { return cASSIGNASSINGLETerminalRuleCall_2; }
		
		//myclass=PackageID
		public Assignment getMyclassAssignment_3() { return cMyclassAssignment_3; }
		
		//PackageID
		public RuleCall getMyclassPackageIDParserRuleCall_3_0() { return cMyclassPackageIDParserRuleCall_3_0; }
		
		//METHOD_KW
		public RuleCall getMETHOD_KWTerminalRuleCall_4() { return cMETHOD_KWTerminalRuleCall_4; }
		
		//ASSIGNASSINGLE
		public RuleCall getASSIGNASSINGLETerminalRuleCall_5() { return cASSIGNASSINGLETerminalRuleCall_5; }
		
		//method=PackageID
		public Assignment getMethodAssignment_6() { return cMethodAssignment_6; }
		
		//PackageID
		public RuleCall getMethodPackageIDParserRuleCall_6_0() { return cMethodPackageIDParserRuleCall_6_0; }
		
		//LEFTPAREN
		public RuleCall getLEFTPARENTerminalRuleCall_7() { return cLEFTPARENTerminalRuleCall_7; }
		
		//RIGHTPAREN
		public RuleCall getRIGHTPARENTerminalRuleCall_8() { return cRIGHTPARENTerminalRuleCall_8; }
	}
	
	
	private final XtextTestElements pXtextTest;
	private final BooleanElements pBoolean;
	private final PackageIDElements pPackageID;
	private final LangIDElements pLangID;
	private final InputElements pInput;
	private final TokensElements pTokens;
	private final MyTokensElements pMyTokens;
	private final ElementElements pElement;
	private final InnerElements pInner;
	private final GeneratorElements pGenerator;
	private final ReplacePatternsElements pReplacePatterns;
	private final BeforeElements pBefore;
	private final AfterElements pAfter;
	private final TerminalRule tPACKAGE;
	private final TerminalRule tLANGUAGE;
	private final TerminalRule tPOINT;
	private final TerminalRule tSPLITLEXER;
	private final TerminalRule tSOURCE;
	private final TerminalRule tSRCTEXT;
	private final TerminalRule tFILE;
	private final TerminalRule tLEXER;
	private final TerminalRule tOUTPUT;
	private final TerminalRule tEXPECTED;
	private final TerminalRule tISSAMEASINPUTFILE;
	private final TerminalRule tPATTERNS;
	private final TerminalRule tEXCEPTIONS;
	private final TerminalRule tBEFORE_KW;
	private final TerminalRule tAFTER_KW;
	private final TerminalRule tCLASS_KW;
	private final TerminalRule tMETHOD_KW;
	private final TerminalRule tLEFTPAREN;
	private final TerminalRule tRIGHTPAREN;
	private final TerminalRule tASSIGNASSINGLE;
	private final TerminalRule tASSIGNASLIST;
	private final TerminalRule tASSIGNASSTRING;
	private final TerminalRule tASSIGNASDATALIST;
	private final TerminalRule tCOMMA;
	private final TerminalRule tIDENTIFIER;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public XtextTestGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pXtextTest = new XtextTestElements();
		this.pBoolean = new BooleanElements();
		this.pPackageID = new PackageIDElements();
		this.pLangID = new LangIDElements();
		this.pInput = new InputElements();
		this.pTokens = new TokensElements();
		this.pMyTokens = new MyTokensElements();
		this.pElement = new ElementElements();
		this.pInner = new InnerElements();
		this.pGenerator = new GeneratorElements();
		this.pReplacePatterns = new ReplacePatternsElements();
		this.pBefore = new BeforeElements();
		this.pAfter = new AfterElements();
		this.tPACKAGE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.xtexttest.XtextTest.PACKAGE");
		this.tLANGUAGE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.xtexttest.XtextTest.LANGUAGE");
		this.tPOINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.xtexttest.XtextTest.POINT");
		this.tSPLITLEXER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.xtexttest.XtextTest.SPLITLEXER");
		this.tSOURCE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.xtexttest.XtextTest.SOURCE");
		this.tSRCTEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.xtexttest.XtextTest.SRCTEXT");
		this.tFILE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.xtexttest.XtextTest.FILE");
		this.tLEXER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.xtexttest.XtextTest.LEXER");
		this.tOUTPUT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.xtexttest.XtextTest.OUTPUT");
		this.tEXPECTED = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.xtexttest.XtextTest.EXPECTED");
		this.tISSAMEASINPUTFILE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.xtexttest.XtextTest.ISSAMEASINPUTFILE");
		this.tPATTERNS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.xtexttest.XtextTest.PATTERNS");
		this.tEXCEPTIONS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.xtexttest.XtextTest.EXCEPTIONS");
		this.tBEFORE_KW = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.xtexttest.XtextTest.BEFORE_KW");
		this.tAFTER_KW = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.xtexttest.XtextTest.AFTER_KW");
		this.tCLASS_KW = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.xtexttest.XtextTest.CLASS_KW");
		this.tMETHOD_KW = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.xtexttest.XtextTest.METHOD_KW");
		this.tLEFTPAREN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.xtexttest.XtextTest.LEFTPAREN");
		this.tRIGHTPAREN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.xtexttest.XtextTest.RIGHTPAREN");
		this.tASSIGNASSINGLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.xtexttest.XtextTest.ASSIGNASSINGLE");
		this.tASSIGNASLIST = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.xtexttest.XtextTest.ASSIGNASLIST");
		this.tASSIGNASSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.xtexttest.XtextTest.ASSIGNASSTRING");
		this.tASSIGNASDATALIST = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.xtexttest.XtextTest.ASSIGNASDATALIST");
		this.tCOMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.xtexttest.XtextTest.COMMA");
		this.tIDENTIFIER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.jku.weiner.xtexttest.XtextTest.IDENTIFIER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("at.jku.weiner.xtexttest.XtextTest".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//XtextTest:
	//	{XtextTest} PACKAGE package=PackageID
	//	LANGUAGE lang=LangID (SPLITLEXER ASSIGNASSINGLE boolean=Boolean)?
	//	input=Input
	//	tokens=Tokens?
	//	root=Element
	//	output=Generator?
	//	before=Before?
	//	after=After?;
	public XtextTestElements getXtextTestAccess() {
		return pXtextTest;
	}
	
	public ParserRule getXtextTestRule() {
		return getXtextTestAccess().getRule();
	}
	
	//Boolean:
	//	'true' | 'false';
	public BooleanElements getBooleanAccess() {
		return pBoolean;
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}
	
	//PackageID:
	//	IDENTIFIER (POINT IDENTIFIER)*;
	public PackageIDElements getPackageIDAccess() {
		return pPackageID;
	}
	
	public ParserRule getPackageIDRule() {
		return getPackageIDAccess().getRule();
	}
	
	//LangID:
	//	IDENTIFIER;
	public LangIDElements getLangIDAccess() {
		return pLangID;
	}
	
	public ParserRule getLangIDRule() {
		return getLangIDAccess().getRule();
	}
	
	//Input:
	//	{Input} SOURCE (SRCTEXT ASSIGNASSINGLE text=STRING
	//	| FILE ASSIGNASSINGLE file=STRING);
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}
	
	//Tokens:
	//	{Tokens} LEXER
	//	tokens+=MyTokens+;
	public TokensElements getTokensAccess() {
		return pTokens;
	}
	
	public ParserRule getTokensRule() {
		return getTokensAccess().getRule();
	}
	
	//MyTokens:
	//	token=IDENTIFIER (ASSIGNASDATALIST count=INT)?;
	public MyTokensElements getMyTokensAccess() {
		return pMyTokens;
	}
	
	public ParserRule getMyTokensRule() {
		return getMyTokensAccess().getRule();
	}
	
	//Element:
	//	{Element} LEFTPAREN
	//	name=IDENTIFIER (inner+=Inner (COMMA inner+=Inner)*)?
	//	RIGHTPAREN;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//Inner:
	//	{Inner} parameter=IDENTIFIER (ASSIGNASSINGLE assign=Element
	//	| ASSIGNASLIST assignList+=Element (COMMA assignList+=Element)*
	//	| ASSIGNASSTRING value=STRING
	//	| ASSIGNASDATALIST assignAsData=STRING);
	public InnerElements getInnerAccess() {
		return pInner;
	}
	
	public ParserRule getInnerRule() {
		return getInnerAccess().getRule();
	}
	
	//Generator:
	//	{Generator} (OUTPUT FILE ASSIGNASSINGLE output=STRING) (EXPECTED FILE (ASSIGNASSINGLE expected=STRING |
	//	isSameAsInputFile?=ISSAMEASINPUTFILE)) (PATTERNS (FILE ASSIGNASSINGLE patternFile=STRING)?
	//	replacePatterns+=ReplacePatterns*)? (EXPECTED EXCEPTIONS
	//	exception=PackageID)?;
	public GeneratorElements getGeneratorAccess() {
		return pGenerator;
	}
	
	public ParserRule getGeneratorRule() {
		return getGeneratorAccess().getRule();
	}
	
	//ReplacePatterns:
	//	regex=STRING ASSIGNASSINGLE replace=STRING;
	public ReplacePatternsElements getReplacePatternsAccess() {
		return pReplacePatterns;
	}
	
	public ParserRule getReplacePatternsRule() {
		return getReplacePatternsAccess().getRule();
	}
	
	//Before:
	//	BEFORE_KW CLASS_KW ASSIGNASSINGLE myclass=PackageID
	//	METHOD_KW ASSIGNASSINGLE method=PackageID
	//	LEFTPAREN RIGHTPAREN;
	public BeforeElements getBeforeAccess() {
		return pBefore;
	}
	
	public ParserRule getBeforeRule() {
		return getBeforeAccess().getRule();
	}
	
	//After:
	//	AFTER_KW CLASS_KW ASSIGNASSINGLE myclass=PackageID
	//	METHOD_KW ASSIGNASSINGLE method=PackageID
	//	LEFTPAREN RIGHTPAREN;
	public AfterElements getAfterAccess() {
		return pAfter;
	}
	
	public ParserRule getAfterRule() {
		return getAfterAccess().getRule();
	}
	
	//terminal PACKAGE:
	//	'package';
	public TerminalRule getPACKAGERule() {
		return tPACKAGE;
	}
	
	//terminal LANGUAGE:
	//	'language';
	public TerminalRule getLANGUAGERule() {
		return tLANGUAGE;
	}
	
	//terminal POINT:
	//	'.';
	public TerminalRule getPOINTRule() {
		return tPOINT;
	}
	
	//terminal SPLITLEXER:
	//	'split-lexer';
	public TerminalRule getSPLITLEXERRule() {
		return tSPLITLEXER;
	}
	
	//terminal SOURCE:
	//	'source';
	public TerminalRule getSOURCERule() {
		return tSOURCE;
	}
	
	//terminal SRCTEXT:
	//	'text';
	public TerminalRule getSRCTEXTRule() {
		return tSRCTEXT;
	}
	
	//terminal FILE:
	//	'file';
	public TerminalRule getFILERule() {
		return tFILE;
	}
	
	//terminal LEXER:
	//	'lexer-tokens';
	public TerminalRule getLEXERRule() {
		return tLEXER;
	}
	
	//terminal OUTPUT:
	//	'output';
	public TerminalRule getOUTPUTRule() {
		return tOUTPUT;
	}
	
	//terminal EXPECTED:
	//	'expected';
	public TerminalRule getEXPECTEDRule() {
		return tEXPECTED;
	}
	
	//terminal ISSAMEASINPUTFILE:
	//	'isSameAsInputFile';
	public TerminalRule getISSAMEASINPUTFILERule() {
		return tISSAMEASINPUTFILE;
	}
	
	//terminal PATTERNS:
	//	'replacePatterns';
	public TerminalRule getPATTERNSRule() {
		return tPATTERNS;
	}
	
	//terminal EXCEPTIONS:
	//	'exceptions';
	public TerminalRule getEXCEPTIONSRule() {
		return tEXCEPTIONS;
	}
	
	//terminal BEFORE_KW:
	//	'before';
	public TerminalRule getBEFORE_KWRule() {
		return tBEFORE_KW;
	}
	
	//terminal AFTER_KW:
	//	'after';
	public TerminalRule getAFTER_KWRule() {
		return tAFTER_KW;
	}
	
	//terminal CLASS_KW:
	//	'class';
	public TerminalRule getCLASS_KWRule() {
		return tCLASS_KW;
	}
	
	//terminal METHOD_KW:
	//	'method';
	public TerminalRule getMETHOD_KWRule() {
		return tMETHOD_KW;
	}
	
	//terminal LEFTPAREN:
	//	'(';
	public TerminalRule getLEFTPARENRule() {
		return tLEFTPAREN;
	}
	
	//terminal RIGHTPAREN:
	//	')';
	public TerminalRule getRIGHTPARENRule() {
		return tRIGHTPAREN;
	}
	
	//terminal ASSIGNASSINGLE:
	//	'=';
	public TerminalRule getASSIGNASSINGLERule() {
		return tASSIGNASSINGLE;
	}
	
	//terminal ASSIGNASLIST:
	//	'+=';
	public TerminalRule getASSIGNASLISTRule() {
		return tASSIGNASLIST;
	}
	
	//terminal ASSIGNASSTRING:
	//	'++';
	public TerminalRule getASSIGNASSTRINGRule() {
		return tASSIGNASSTRING;
	}
	
	//terminal ASSIGNASDATALIST:
	//	'+*';
	public TerminalRule getASSIGNASDATALISTRule() {
		return tASSIGNASDATALIST;
	}
	
	//terminal COMMA:
	//	',';
	public TerminalRule getCOMMARule() {
		return tCOMMA;
	}
	
	//terminal IDENTIFIER:
	//	ID;
	public TerminalRule getIDENTIFIERRule() {
		return tIDENTIFIER;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
