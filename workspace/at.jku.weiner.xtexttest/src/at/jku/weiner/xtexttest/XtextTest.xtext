grammar at.jku.weiner.xtexttest.XtextTest with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate xtextTest "http://www.jku.at/weiner/xtexttest/XtextTest"

Model:
	{Model}
	(
			xtextTest=XtextTest
		|	emfTest=EmfTest
	)
;

XtextTest:
	{XtextTest}
	PACKAGE package=PackageID
	LANGUAGE lang=LangID
	(IMPORTS imports=ImportID)?
	(SPLITLEXER ASSIGNASSINGLE boolean=Boolean)?
	input=Input
	(TIMEOUT ASSIGNASSINGLE timeOut=INT)?
	(tokens=Tokens)?
	root=Element
	(output=Generator)?
	(before=Before)?
	(after=After)?
;

EmfTest:
	{EmfTest}
	KW_EMFTEST
	PACKAGE package=PackageID
	DEFAULT mydefault=PackageID
	(myimport+=Import)*
	codeCall=CodeCall
	(OPTIONS optionCall=CodeCall)?
	(SOURCE FILE ASSIGNASSINGLE file=STRING)
	
	root=Element
	(before=Before)?
	(after=After)?
;

Import:
	{Import}
	IMPORTS id=ImportID KW_AS alias=IDENTIFIER
;

Boolean:
	TRUE | FALSE
;

PackageID returns ecore::EString:
	IDENTIFIER (POINT IDENTIFIER)*
;

LangID returns ecore::EString:
	IDENTIFIER
;

ImportID returns ecore::EString:
	IDENTIFIER (POINT IDENTIFIER)*
;

Input:
	{Input}
	SOURCE
	(SRCTEXT ASSIGNASSINGLE text=STRING
	|FILE ASSIGNASSINGLE file=STRING
	)
;

Tokens:
	{Tokens}
	LEXER
	(tokens+=MyTokens)+
;

MyTokens:
	(token=IDENTIFIER|string=STRING) 
	(ASSIGNASDATALIST count=INT)? 
;

Element:
	{Element}
	LEFTPAREN
		(importing=IDENTIFIER IMPORTER)?
		name=IDENTIFIER
		(
			(inner+=Inner)
			(COMMA inner+=Inner)*
		)?
	RIGHTPAREN
;

Inner:
	{Inner}
	
	parameter=IDENTIFIER
	(ASSIGNASSINGLE assign=Element
	|
	ASSIGNASLIST assignList+=Element (COMMA assignList+=Element)*
	|
	ASSIGNASSTRING value=STRING
	|
	ASSIGNASDATALIST assignAsData=STRING
	|
	ASSIGNASBOOL assignAsBool=(TRUE|FALSE)
	|
	isNull?=ISNULL
	|
	isNotNull?=ISNOTNULL
	|
	isEmpty?=ISEMPTY
	)
;

Generator:
	{Generator}
	(OUTPUT FILE ASSIGNASSINGLE output=STRING)
	(EXPECTED FILE 
		((ASSIGNASSINGLE expected=STRING)
			| isSameAsInputFile?=ISSAMEASINPUTFILE
		)
	)
	(PATTERNS
		(FILE ASSIGNASSINGLE patternFile=STRING)?
		(replacePatterns+=ReplacePatterns)*
	)?
	(EXPECTED EXCEPTIONS
		exception=PackageID
	)?
;

ReplacePatterns:
	regex=STRING ASSIGNASSINGLE replace=STRING
;

Before:
	{Before}
	BEFORE_KW codeCall=CodeCall
;

After:
	{After}
	AFTER_KW codeCall=CodeCall
;

CodeCall:
	{CodeCall}
	CLASS_KW ASSIGNASSINGLE myclass=PackageID
	METHOD_KW ASSIGNASSINGLE method=PackageID
	(LEFTPAREN (params+=PackageID (COMMA params+=PackageID)*)? RIGHTPAREN)
;

terminal KW_EMFTEST: 'emftest';
terminal PACKAGE: 'package';
terminal DEFAULT: 'default';
terminal LANGUAGE: 'language';
terminal IMPORTS: 'imports';
terminal KW_AS: 'as';
terminal POINT: '.';
terminal SPLITLEXER: 'split-lexer';
terminal SOURCE: 'source';
terminal SRCTEXT: 'text';
terminal FILE: 'file';
terminal LEXER: 'lexer-tokens';
terminal OPTIONS: 'options';
terminal OUTPUT: 'output';
terminal EXPECTED: 'expected';
terminal ISSAMEASINPUTFILE: 'isSameAsInputFile';
terminal PATTERNS: 'replacePatterns';
terminal EXCEPTIONS: 'exceptions';
terminal BEFORE_KW: 'before';
terminal AFTER_KW: 'after';
terminal CLASS_KW: 'class';
terminal METHOD_KW: 'method';
terminal ISNULL: 'isNull';
terminal ISNOTNULL: 'isNotNull';
terminal ISEMPTY: 'isEmpty';
terminal TIMEOUT: 'timeOut';
terminal LEFTPAREN: '(';
terminal RIGHTPAREN: ')';
terminal ASSIGNASBOOL: '?=';
terminal TRUE: 'true';
terminal FALSE: 'false';
terminal ASSIGNASSINGLE: '=';
terminal ASSIGNASLIST: '+=';
terminal ASSIGNASSTRING: '++';
terminal ASSIGNASDATALIST: '+*';
terminal COMMA: ',';
terminal IDENTIFIER: ID;
terminal IMPORTER: '::';
