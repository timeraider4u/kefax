/**
 * generated by Xtext 2.9.0-SNAPSHOT
 */
package at.jku.weiner.xtexttest.formatting2;

import at.jku.weiner.xtexttest.services.XtextTestGrammarAccess;
import at.jku.weiner.xtexttest.xtextTest.Element;
import at.jku.weiner.xtexttest.xtextTest.Inner;
import at.jku.weiner.xtexttest.xtextTest.Input;
import at.jku.weiner.xtexttest.xtextTest.Tokens;
import at.jku.weiner.xtexttest.xtextTest.XtextTest;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class XtextTestFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private XtextTestGrammarAccess _xtextTestGrammarAccess;
  
  protected void _format(final XtextTest xtextTest, @Extension final IFormattableDocument document) {
    Input _input = xtextTest.getInput();
    this.format(_input, document);
    Tokens _tokens = xtextTest.getTokens();
    this.format(_tokens, document);
    Element _root = xtextTest.getRoot();
    this.format(_root, document);
  }
  
  protected void _format(final Element element, @Extension final IFormattableDocument document) {
    EList<Inner> _inner = element.getInner();
    for (final Inner inner : _inner) {
      this.format(inner, document);
    }
  }
  
  protected void _format(final Inner inner, @Extension final IFormattableDocument document) {
    Element _assign = inner.getAssign();
    this.format(_assign, document);
    EList<Element> _assignList = inner.getAssignList();
    for (final Element assignList : _assignList) {
      this.format(assignList, document);
    }
  }
  
  public void format(final Object element, final IFormattableDocument document) {
    if (element instanceof XtextResource) {
      _format((XtextResource)element, document);
      return;
    } else if (element instanceof Element) {
      _format((Element)element, document);
      return;
    } else if (element instanceof Inner) {
      _format((Inner)element, document);
      return;
    } else if (element instanceof XtextTest) {
      _format((XtextTest)element, document);
      return;
    } else if (element == null) {
      _format((Void)null, document);
      return;
    } else if (element != null) {
      _format(element, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(element, document).toString());
    }
  }
}
