/**
 * generated by Xtext 2.9.0-SNAPSHOT
 */
package at.jku.weiner.xtexttest.generator;

import at.jku.weiner.xtexttest.xtextTest.After;
import at.jku.weiner.xtexttest.xtextTest.Before;
import at.jku.weiner.xtexttest.xtextTest.Element;
import at.jku.weiner.xtexttest.xtextTest.Generator;
import at.jku.weiner.xtexttest.xtextTest.Inner;
import at.jku.weiner.xtexttest.xtextTest.Input;
import at.jku.weiner.xtexttest.xtextTest.MyTokens;
import at.jku.weiner.xtexttest.xtextTest.ReplacePatterns;
import at.jku.weiner.xtexttest.xtextTest.Tokens;
import at.jku.weiner.xtexttest.xtextTest.XtextTest;
import com.google.common.base.Objects;
import com.google.common.collect.Iterators;
import java.util.Iterator;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend.lib.annotations.Accessors;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.ExclusiveRange;
import org.eclipse.xtext.xbase.lib.IntegerRange;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.Pure;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class XtextTestGenerator implements IGenerator {
  private final static String PKG_PREFIX = "xtexttests";
  
  private int elementCount;
  
  private XtextTest test;
  
  private URI uri;
  
  private String myDsl;
  
  @Accessors
  private String fileName;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    URI _uRI = resource.getURI();
    this.uri = _uRI;
    System.out.println((("uri=\'" + this.uri) + "\'"));
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterator<XtextTest> _filter = Iterators.<XtextTest>filter(_allContents, XtextTest.class);
    XtextTest _head = IteratorExtensions.<XtextTest>head(_filter);
    this.test = _head;
    String _lang = this.test.getLang();
    String _firstCharToUpperCase = this.firstCharToUpperCase(_lang);
    this.myDsl = _firstCharToUpperCase;
    boolean _shouldGenerateTextSourceDataFile = this.shouldGenerateTextSourceDataFile();
    if (_shouldGenerateTextSourceDataFile) {
      final CharSequence outputForDataFile = this.outputDataFile();
      final String fileNameForDataFile = this.getSourceFile();
      fsa.generateFile(fileNameForDataFile, outputForDataFile);
    }
    this.elementCount = 0;
    final CharSequence outputForJava = this.outputJava();
    String _package = this.test.getPackage();
    String _replace = _package.replace(".", "/");
    String _plus = (_replace + "/");
    String _plus_1 = (_plus + XtextTestGenerator.PKG_PREFIX);
    String _plus_2 = (_plus_1 + "/");
    String _javaClassFileName = this.getJavaClassFileName();
    String _plus_3 = (_plus_2 + _javaClassFileName);
    String _plus_4 = (_plus_3 + ".java");
    this.setFileName(_plus_4);
    String _fileName = this.getFileName();
    String _plus_5 = ("generate file=\'" + _fileName);
    String _plus_6 = (_plus_5 + "\'");
    System.out.println(_plus_6);
    String _fileName_1 = this.getFileName();
    fsa.generateFile(_fileName_1, outputForJava);
  }
  
  public String firstCharToUpperCase(final String text) {
    String _substring = text.substring(0, 1);
    final String first = _substring.toUpperCase();
    final String tail = text.substring(1);
    return (first + tail);
  }
  
  public boolean shouldGenerateTextSourceDataFile() {
    Input _input = this.test.getInput();
    String _text = _input.getText();
    return (!Objects.equal(_text, null));
  }
  
  public String getSourceFile() {
    boolean _shouldGenerateTextSourceDataFile = this.shouldGenerateTextSourceDataFile();
    if (_shouldGenerateTextSourceDataFile) {
      String _package = this.test.getPackage();
      String _replace = _package.replace(".", "/");
      String _plus = (_replace + "/");
      String _plus_1 = (_plus + XtextTestGenerator.PKG_PREFIX);
      String _plus_2 = (_plus_1 + "/");
      String _lastSegment = this.uri.lastSegment();
      String _replace_1 = _lastSegment.replace(".xtexttest", "");
      String _plus_3 = (_plus_2 + _replace_1);
      return (_plus_3 + ".dat");
    }
    Input _input = this.test.getInput();
    return _input.getFile();
  }
  
  public String getFileExtension() {
    final String fileNameForDataFile = this.getSourceFile();
    final int index = fileNameForDataFile.indexOf(".");
    final String result = fileNameForDataFile.substring((index + 1));
    return result;
  }
  
  public CharSequence outputDataFile() {
    StringConcatenation _builder = new StringConcatenation();
    Input _input = this.test.getInput();
    String _text = _input.getText();
    _builder.append(_text, "");
    return _builder;
  }
  
  public String getJavaClassFileName() {
    String _lastSegment = this.uri.lastSegment();
    return _lastSegment.replace(".xtexttest", "");
  }
  
  public CharSequence outputJava() {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _outputHeader = this.outputHeader();
    _builder.append(_outputHeader, "");
    _builder.newLineIfNotEmpty();
    String _outputClass = this.outputClass();
    _builder.append(_outputClass, "");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence outputHeader() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _package = this.test.getPackage();
    _builder.append(_package, "");
    _builder.append(".");
    _builder.append(XtextTestGenerator.PKG_PREFIX, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import com.google.inject.Inject;");
    _builder.newLine();
    _builder.append("import com.google.inject.Provider;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.lang.reflect.InvocationTargetException;");
    _builder.newLine();
    _builder.append("import java.lang.reflect.Method;");
    _builder.newLine();
    _builder.append("import java.nio.file.Files;");
    _builder.newLine();
    _builder.append("import java.nio.file.Path;");
    _builder.newLine();
    _builder.append("import java.nio.file.Paths;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.antlr.runtime.Token;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.emf.common.util.EList;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.common.util.URI;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.resource.Resource;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.resource.ResourceSet;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.util.EDataTypeEList;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EObject;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.generator.IFileSystemAccess;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.generator.IGenerator;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.generator.JavaIoFileSystemAccess;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.junit4.InjectWith;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.junit4.util.ParseHelper;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.junit4.validation.ValidationTestHelper;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.junit4.XtextRunner;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.parser.antlr.ITokenDefProvider;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.resource.IResourceFactory;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.util.CancelIndicator;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.validation.CheckMode;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.validation.IResourceValidator;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.validation.Issue;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.junit.Assert;");
    _builder.newLine();
    _builder.append("import org.junit.After;");
    _builder.newLine();
    _builder.append("import org.junit.Before;");
    _builder.newLine();
    _builder.append("import org.junit.Test;");
    _builder.newLine();
    _builder.append("import org.junit.runner.RunWith;");
    _builder.newLine();
    _builder.append("import ");
    String _package_1 = this.test.getPackage();
    _builder.append(_package_1, "");
    _builder.append(".tests.");
    _builder.append(this.myDsl, "");
    _builder.append("InjectorProvider;");
    _builder.newLineIfNotEmpty();
    _builder.append("import ");
    String _package_2 = this.test.getPackage();
    _builder.append(_package_2, "");
    _builder.append(".parser.antlr.");
    _builder.append(this.myDsl, "");
    _builder.append("Parser;");
    _builder.newLineIfNotEmpty();
    {
      String _boolean = this.test.getBoolean();
      boolean _equals = "true".equals(_boolean);
      if (_equals) {
        _builder.append("import ");
        String _package_3 = this.test.getPackage();
        _builder.append(_package_3, "");
        _builder.append(".parser.antlr.lexer.Internal");
        _builder.append(this.myDsl, "");
        _builder.append("Lexer;");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("import ");
        String _package_4 = this.test.getPackage();
        _builder.append(_package_4, "");
        _builder.append(".parser.antlr.internal.Internal");
        _builder.append(this.myDsl, "");
        _builder.append("Lexer;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("import ");
    String _package_5 = this.test.getPackage();
    _builder.append(_package_5, "");
    _builder.append(".");
    _builder.append(XtextTestGenerator.PKG_PREFIX, "");
    _builder.append(".LexerAndParserTest;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    Element _root = this.test.getRoot();
    String _iterateImports = this.iterateImports(_root);
    _builder.append(_iterateImports, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public String iterateImports(final Element element) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _notEquals = (!Objects.equal(element, null));
      if (_notEquals) {
        _builder.append("import ");
        String _package = this.test.getPackage();
        _builder.append(_package, "");
        _builder.append(".");
        String _lang = this.test.getLang();
        _builder.append(_lang, "");
        _builder.append(".");
        String _name = element.getName();
        _builder.append(_name, "");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        {
          EList<Inner> _inner = element.getInner();
          for(final Inner inner : _inner) {
            Element _assign = inner.getAssign();
            String _iterateImports = this.iterateImports(_assign);
            _builder.append(_iterateImports, "");
            _builder.newLineIfNotEmpty();
            {
              EList<Element> _assignList = inner.getAssignList();
              for(final Element elem : _assignList) {
                String _iterateImports_1 = this.iterateImports(elem);
                _builder.append(_iterateImports_1, "");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    return _builder.toString();
  }
  
  public String outputClass() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("@SuppressWarnings(\"unused\")");
    _builder.newLine();
    _builder.append("@RunWith(XtextRunner.class)");
    _builder.newLine();
    _builder.append("@InjectWith(");
    _builder.append(this.myDsl, "");
    _builder.append("InjectorProvider.class)");
    _builder.newLineIfNotEmpty();
    _builder.append("public class ");
    String _javaClassFileName = this.getJavaClassFileName();
    _builder.append(_javaClassFileName, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("@Inject");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ParseHelper<");
    Element _root = this.test.getRoot();
    String _name = _root.getName();
    _builder.append(_name, "\t");
    _builder.append("> parseHelper;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("@Inject");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ValidationTestHelper valHelper;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Inject");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Internal");
    _builder.append(this.myDsl, "\t");
    _builder.append("Lexer lexer;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("@Inject");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ");
    _builder.append(this.myDsl, "\t");
    _builder.append("Parser parser;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("@Inject");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ITokenDefProvider tokenDefProvider;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//@Inject");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private LexerAndParserTest testHelper;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Inject");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private IGenerator generator;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Inject");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Provider<ResourceSet> resourceSetProvider;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Inject");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private IResourceValidator validator;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Inject");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private JavaIoFileSystemAccess fileAccessSystem;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Inject");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private IResourceFactory resourceFactory;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Before");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void initialize(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.testHelper = new LexerAndParserTest(lexer, ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("parser, tokenDefProvider);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put(\"");
    String _fileExtension = this.getFileExtension();
    _builder.append(_fileExtension, "\t\t");
    _builder.append("\",");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("this.resourceFactory);");
    _builder.newLine();
    {
      Before _before = this.test.getBefore();
      boolean _notEquals = (!Objects.equal(_before, null));
      if (_notEquals) {
        _builder.append("\t\t");
        Before _before_1 = this.test.getBefore();
        String _myclass = _before_1.getMyclass();
        _builder.append(_myclass, "\t\t");
        _builder.append(".");
        Before _before_2 = this.test.getBefore();
        String _method = _before_2.getMethod();
        _builder.append(_method, "\t\t");
        _builder.append("();");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@After");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void cleanUp() {");
    _builder.newLine();
    {
      After _after = this.test.getAfter();
      boolean _notEquals_1 = (!Objects.equal(_after, null));
      if (_notEquals_1) {
        _builder.append("\t\t");
        After _after_1 = this.test.getAfter();
        String _myclass_1 = _after_1.getMyclass();
        _builder.append(_myclass_1, "\t\t");
        _builder.append(".");
        After _after_2 = this.test.getAfter();
        String _method_1 = _after_2.getMethod();
        _builder.append(_method_1, "\t\t");
        _builder.append("();");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String getTextFromFile(final String fileName)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("throws Exception{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final Path path = Paths.get(fileName);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final String content = new String(Files.readAllBytes(path));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return content;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _kensJUnitTest = this.tokensJUnitTest();
    _builder.append(_kensJUnitTest, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _parserJUnitTest = this.parserJUnitTest();
    _builder.append(_parserJUnitTest, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _generatorJUnitTest = this.generatorJUnitTest();
    _builder.append(_generatorJUnitTest, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder.toString();
  }
  
  public CharSequence tokensJUnitTest() {
    StringConcatenation _builder = new StringConcatenation();
    {
      Tokens _tokens = this.test.getTokens();
      boolean _notEquals = (!Objects.equal(_tokens, null));
      if (_notEquals) {
        _builder.append("@Test");
        _builder.newLine();
        _builder.append("public void checkLexerTokens() throws Exception{");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("final String text = this.getTextFromFile(");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\"");
        {
          boolean _shouldGenerateTextSourceDataFile = this.shouldGenerateTextSourceDataFile();
          if (_shouldGenerateTextSourceDataFile) {
            _builder.append("src-gen/");
          }
        }
        String _sourceFile = this.getSourceFile();
        _builder.append(_sourceFile, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("//System.out.println(text);");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("final String[] expected = new String[] {");
        _builder.newLine();
        {
          Tokens _tokens_1 = this.test.getTokens();
          EList<MyTokens> _tokens_2 = _tokens_1.getTokens();
          for(final MyTokens token : _tokens_2) {
            _builder.append("\t\t\t");
            _builder.append("\"RULE_");
            String _token = token.getToken();
            _builder.append(_token, "\t\t\t");
            _builder.append("\", ");
            _builder.newLineIfNotEmpty();
            {
              int _count = token.getCount();
              boolean _greaterThan = (_count > 1);
              if (_greaterThan) {
                {
                  int _count_1 = token.getCount();
                  IntegerRange _upTo = new IntegerRange(2, _count_1);
                  for(final Integer i : _upTo) {
                    _builder.append("\t\t\t");
                    _builder.append("\"RULE_");
                    String _token_1 = token.getToken();
                    _builder.append(_token_1, "\t\t\t");
                    _builder.append("\", ");
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
          }
        }
        _builder.append("\t\t\t");
        _builder.append("};");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("//final List<Token> actual = testHelper.getTokens(text);");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("//testHelper.outputTokens(text);");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("testHelper.checkTokenisation(text, expected);");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence parserJUnitTest() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("@Test");
    _builder.newLine();
    _builder.append("public void checkParserResult() throws Exception {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("final String text = this.getTextFromFile(");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("\"");
    {
      boolean _shouldGenerateTextSourceDataFile = this.shouldGenerateTextSourceDataFile();
      if (_shouldGenerateTextSourceDataFile) {
        _builder.append("src-gen/");
      }
    }
    String _sourceFile = this.getSourceFile();
    _builder.append(_sourceFile, "\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("final ");
    Element _root = this.test.getRoot();
    String _name = _root.getName();
    _builder.append(_name, "\t");
    _builder.append(" ");
    Element _root_1 = this.test.getRoot();
    String _varName = this.varName(_root_1);
    _builder.append(_varName, "\t");
    _builder.append("  = ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("this.parseHelper.parse(text);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("this.valHelper.assertNoErrors(");
    Element _root_2 = this.test.getRoot();
    String _varName_1 = this.varName(_root_2);
    _builder.append(_varName_1, "\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    Element _root_3 = this.test.getRoot();
    String _generateForElement = this.generateForElement(_root_3);
    _builder.append(_generateForElement, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public String varName(final Element element) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = element.getName();
    _builder.append(_name, "");
    _builder.append("_");
    _builder.append(this.elementCount, "");
    _builder.append("_Var");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String paramName(final Inner inner) {
    String _parameter = inner.getParameter();
    return this.firstCharToUpperCase(_parameter);
  }
  
  public String generateForElement(final Element element) {
    StringConcatenation _builder = new StringConcatenation();
    final String varName = this.varName(element);
    _builder.newLineIfNotEmpty();
    _builder.append("Assert.assertNotNull(");
    _builder.append(varName, "");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    {
      EList<Inner> _inner = element.getInner();
      for(final Inner inner : _inner) {
        String _parameter = inner.getParameter();
        final String paramName = this.firstCharToUpperCase(_parameter);
        _builder.newLineIfNotEmpty();
        {
          Element _assign = inner.getAssign();
          boolean _notEquals = (!Objects.equal(_assign, null));
          if (_notEquals) {
            Element _assign_1 = inner.getAssign();
            CharSequence _generateForInnerAssign = this.generateForInnerAssign(varName, paramName, _assign_1);
            _builder.append(_generateForInnerAssign, "");
            _builder.newLineIfNotEmpty();
          } else {
            {
              boolean _and = false;
              EList<Element> _assignList = inner.getAssignList();
              boolean _notEquals_1 = (!Objects.equal(_assignList, null));
              if (!_notEquals_1) {
                _and = false;
              } else {
                EList<Element> _assignList_1 = inner.getAssignList();
                boolean _isEmpty = _assignList_1.isEmpty();
                boolean _not = (!_isEmpty);
                _and = _not;
              }
              if (_and) {
                EList<Element> _assignList_2 = inner.getAssignList();
                CharSequence _generateForListAssign = this.generateForListAssign(varName, paramName, _assignList_2);
                _builder.append(_generateForListAssign, "");
                _builder.newLineIfNotEmpty();
              } else {
                {
                  boolean _and_1 = false;
                  String _assignAsData = inner.getAssignAsData();
                  boolean _notEquals_2 = (!Objects.equal(_assignAsData, null));
                  if (!_notEquals_2) {
                    _and_1 = false;
                  } else {
                    String _assignAsData_1 = inner.getAssignAsData();
                    boolean _isEmpty_1 = _assignAsData_1.isEmpty();
                    boolean _not_1 = (!_isEmpty_1);
                    _and_1 = _not_1;
                  }
                  if (_and_1) {
                    String _assignAsData_2 = inner.getAssignAsData();
                    CharSequence _generateForDataListAssign = this.generateForDataListAssign(varName, paramName, _assignAsData_2);
                    _builder.append(_generateForDataListAssign, "");
                    _builder.newLineIfNotEmpty();
                  } else {
                    {
                      String _value = inner.getValue();
                      boolean _notEquals_3 = (!Objects.equal(_value, null));
                      if (_notEquals_3) {
                        String _value_1 = inner.getValue();
                        CharSequence _generateForValueAssign = this.generateForValueAssign(varName, paramName, _value_1);
                        _builder.append(_generateForValueAssign, "");
                        _builder.newLineIfNotEmpty();
                      } else {
                        {
                          String _assignAsBool = inner.getAssignAsBool();
                          boolean _notEquals_4 = (!Objects.equal(_assignAsBool, null));
                          if (_notEquals_4) {
                            String _assignAsBool_1 = inner.getAssignAsBool();
                            CharSequence _generateForBoolAssign = this.generateForBoolAssign(varName, paramName, _assignAsBool_1);
                            _builder.append(_generateForBoolAssign, "");
                            _builder.newLineIfNotEmpty();
                          } else {
                            _builder.append("Assert.assertNull(");
                            _builder.append(varName, "");
                            _builder.append(".get");
                            _builder.append(paramName, "");
                            _builder.append("());");
                            _builder.newLineIfNotEmpty();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder.toString();
  }
  
  public CharSequence generateForInnerAssign(final String varName, final String paramName, final Element innerElem) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("//");
    int _plusPlus = this.elementCount++;
    _builder.append(_plusPlus, "");
    _builder.newLineIfNotEmpty();
    String _name = innerElem.getName();
    final String type = this.firstCharToUpperCase(_name);
    _builder.newLineIfNotEmpty();
    _builder.append("final ");
    _builder.append(type, "");
    _builder.append(" ");
    String _varName = this.varName(innerElem);
    _builder.append(_varName, "");
    _builder.append(" = (");
    _builder.append(type, "");
    _builder.append(")");
    _builder.append(varName, "");
    _builder.append(".get");
    _builder.append(paramName, "");
    _builder.append("();");
    _builder.newLineIfNotEmpty();
    String _generateForElement = this.generateForElement(innerElem);
    _builder.append(_generateForElement, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence generateForListAssign(final String varName, final String paramName, final EList<Element> assignList) {
    StringConcatenation _builder = new StringConcatenation();
    final String listName = this.getListName(paramName);
    _builder.newLineIfNotEmpty();
    _builder.append("final EList<? extends EObject> ");
    _builder.append(listName, "");
    _builder.append(" = ");
    _builder.append(varName, "");
    _builder.append(".get");
    _builder.append(paramName, "");
    _builder.append("();");
    _builder.newLineIfNotEmpty();
    _builder.append("Assert.assertNotNull(");
    _builder.append(listName, "");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("Assert.assertEquals(");
    int _size = assignList.size();
    _builder.append(_size, "");
    _builder.append(", ");
    _builder.append(listName, "");
    _builder.append(".size());");
    _builder.newLineIfNotEmpty();
    {
      int _size_1 = assignList.size();
      ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, _size_1, true);
      for(final Integer i : _doubleDotLessThan) {
        final Element elem = assignList.get((i).intValue());
        _builder.newLineIfNotEmpty();
        _builder.append("//");
        int _plusPlus = this.elementCount++;
        _builder.append(_plusPlus, "");
        _builder.newLineIfNotEmpty();
        final String type = elem.getName();
        _builder.newLineIfNotEmpty();
        _builder.append("final ");
        _builder.append(type, "");
        _builder.append(" ");
        String _varName = this.varName(elem);
        _builder.append(_varName, "");
        _builder.append(" = (");
        _builder.append(type, "");
        _builder.append(")");
        _builder.append(listName, "");
        _builder.append(".get(");
        _builder.append(i, "");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        String _generateForElement = this.generateForElement(elem);
        _builder.append(_generateForElement, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public String getListName(final String paramName) {
    return (((paramName + "_") + Integer.valueOf(this.elementCount)) + "_list");
  }
  
  public CharSequence generateForDataListAssign(final String varName, final String paramName, final String assignAsData) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Assert.assertEquals(\"");
    _builder.append(assignAsData, "");
    _builder.append("\", ");
    _builder.append(varName, "");
    _builder.append(".get");
    _builder.append(paramName, "");
    _builder.append("().toString());");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence generateForValueAssign(final String varName, final String paramName, final String value) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Assert.assertEquals(\"");
    _builder.append(value, "");
    _builder.append("\", ");
    _builder.append(varName, "");
    _builder.append(".get");
    _builder.append(paramName, "");
    _builder.append("());");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence generateForBoolAssign(final String varName, final String paramName, final String string3) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _equals = "true".equals(string3);
      if (_equals) {
        _builder.append("Assert.assertTrue(");
        _builder.append(varName, "");
        _builder.append(".is");
        _builder.append(paramName, "");
        _builder.append("());");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("Assert.assertFalse(");
        _builder.append(varName, "");
        _builder.append(".is");
        _builder.append(paramName, "");
        _builder.append("());");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence generatorJUnitTest() {
    StringConcatenation _builder = new StringConcatenation();
    {
      Generator _output = this.test.getOutput();
      boolean _notEquals = (!Objects.equal(_output, null));
      if (_notEquals) {
        _builder.append("@Test");
        _builder.newLine();
        {
          Generator _output_1 = this.test.getOutput();
          String _exception = _output_1.getException();
          boolean _notEquals_1 = (!Objects.equal(_exception, null));
          if (_notEquals_1) {
            _builder.append("(expected = ");
            Generator _output_2 = this.test.getOutput();
            String _exception_1 = _output_2.getException();
            _builder.append(_exception_1, "");
            _builder.append(".class)");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("public void testGenerator() throws Exception {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("// load the resource");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("ResourceSet set = this.resourceSetProvider.get();");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("URI uri = URI.createURI(");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\"");
        {
          boolean _shouldGenerateTextSourceDataFile = this.shouldGenerateTextSourceDataFile();
          if (_shouldGenerateTextSourceDataFile) {
            _builder.append("src-gen/");
          }
        }
        String _sourceFile = this.getSourceFile();
        _builder.append(_sourceFile, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("Resource resource = set.getResource(uri, true);");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("// validate the resource");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("List<Issue> list = this.validator.validate(resource, ");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("CheckMode.ALL,CancelIndicator.NullImpl);");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("Assert.assertTrue(list.isEmpty());");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("// configure and start the generator");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("this.fileAccessSystem.setOutputPath(\"");
        String _outputPath = this.getOutputPath();
        _builder.append(_outputPath, "\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        CharSequence _setFileNameForGeneratorOutputFile = this.setFileNameForGeneratorOutputFile();
        _builder.append(_setFileNameForGeneratorOutputFile, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("this.generator.doGenerate(resource, this.fileAccessSystem);");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("final String actual = this.getTextFromFile(\"");
        Generator _output_3 = this.test.getOutput();
        String _output_4 = _output_3.getOutput();
        _builder.append(_output_4, "\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("final String expected = this.getTextFromFile(");
        _builder.newLine();
        {
          Generator _output_5 = this.test.getOutput();
          boolean _isIsSameAsInputFile = _output_5.isIsSameAsInputFile();
          if (_isIsSameAsInputFile) {
            _builder.append("\t\t");
            _builder.append("\"");
            String _sourceFile_1 = this.getSourceFile();
            _builder.append(_sourceFile_1, "\t\t");
            _builder.append("\"");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("\t\t");
            _builder.append("\"");
            Generator _output_6 = this.test.getOutput();
            String _expected = _output_6.getExpected();
            _builder.append(_expected, "\t\t");
            _builder.append("\"");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t\t");
        _builder.append(");");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("Assert.assertEquals(preprocess(expected), preprocess(actual));");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("// System.out.println(\"Code generation finished.\");");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        String _outputForPreprocess = this.outputForPreprocess();
        _builder.append(_outputForPreprocess, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence setFileNameForGeneratorOutputFile() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("final Class<?> clazz = this.generator.getClass();");
    _builder.newLine();
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("final Method method = clazz.getMethod(\"setFileName\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String.class);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (method != null) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("method.invoke(this.generator, \"");
    String _outputFileName = this.getOutputFileName();
    _builder.append(_outputFileName, "\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("} catch (NoSuchMethodException | SecurityException");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("| IllegalAccessException | IllegalArgumentException");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("| InvocationTargetException e) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// do nothing");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// System.out.println(\"do nothing!\");");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public String getOutputPath() {
    Generator _output = this.test.getOutput();
    final String output = _output.getOutput();
    final int lastIndex = output.lastIndexOf("/");
    if ((lastIndex >= 0)) {
      return output.substring(0, lastIndex);
    }
    return "";
  }
  
  public String getOutputFileName() {
    Generator _output = this.test.getOutput();
    final String output = _output.getOutput();
    final int lastIndex = output.lastIndexOf("/");
    if ((lastIndex >= 0)) {
      return output.substring((lastIndex + 1));
    }
    return "";
  }
  
  public String outputForPreprocess() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("private String preprocess(String string) throws Exception {");
    _builder.newLine();
    {
      Generator _output = this.test.getOutput();
      String _patternFile = _output.getPatternFile();
      boolean _notEquals = (!Objects.equal(_patternFile, null));
      if (_notEquals) {
        _builder.append("\t");
        _builder.append("string = preprocessForFile(string);");
        _builder.newLine();
      }
    }
    {
      Generator _output_1 = this.test.getOutput();
      EList<ReplacePatterns> _replacePatterns = _output_1.getReplacePatterns();
      boolean _notEquals_1 = (!Objects.equal(_replacePatterns, null));
      if (_notEquals_1) {
        _builder.append("\t");
        _builder.append("string = preprocessForPatterns(string);");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("return string;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    {
      Generator _output_2 = this.test.getOutput();
      String _patternFile_1 = _output_2.getPatternFile();
      boolean _notEquals_2 = (!Objects.equal(_patternFile_1, null));
      if (_notEquals_2) {
        _builder.append("private String preprocessForFile(String string) throws Exception {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("final String content = this.getTextFromFile(\"");
        Generator _output_3 = this.test.getOutput();
        String _patternFile_2 = _output_3.getPatternFile();
        _builder.append(_patternFile_2, "\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("final String[] lines = content.split(\"\\n\");");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("if (lines == null) {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("return string;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("for (String line : lines) {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("final String[] myLine = line.split(\"=\");");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("if (myLine == null || myLine.length != 2) {");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("continue;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("final String regex = myLine[0].replace(\"\\\"\", \"\").replace(\"\\\\\\\\\", \"\\\\\");");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("final String replace = myLine[1].replace(\"\\\"\", \"\").replace(\"\\\\\\\\\", \"\\\\\");");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("string = string.replaceAll(regex, replace);");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("return string;");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      Generator _output_4 = this.test.getOutput();
      EList<ReplacePatterns> _replacePatterns_1 = _output_4.getReplacePatterns();
      boolean _notEquals_3 = (!Objects.equal(_replacePatterns_1, null));
      if (_notEquals_3) {
        _builder.append("private String preprocessForPatterns(String string) {");
        _builder.newLine();
        {
          Generator _output_5 = this.test.getOutput();
          EList<ReplacePatterns> _replacePatterns_2 = _output_5.getReplacePatterns();
          for(final ReplacePatterns r : _replacePatterns_2) {
            _builder.append("\t");
            _builder.append("string = string.replaceAll(");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("\"");
            String _regex = r.getRegex();
            String _replacement = this.replacement(_regex);
            _builder.append(_replacement, "\t\t");
            _builder.append("\",");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("\"");
            String _replace = r.getReplace();
            String _replacement_1 = this.replacement(_replace);
            _builder.append(_replacement_1, "\t\t");
            _builder.append("\"");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append(");");
            _builder.newLine();
          }
        }
        _builder.append("\t");
        _builder.append("return string;");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
      }
    }
    return _builder.toString();
  }
  
  public String replacement(final String string) {
    final String string2 = string.replace("\n", "\\n");
    final String string3 = string2.replace("\t", "\\t");
    final String string4 = string3.replace("\r", "\\r");
    final String string5 = string4.replace("\'", "\\\'");
    final String string6 = string5.replace("\\", "\\\\");
    final String string7 = string6.replace("\"", "\\\"");
    return string7;
  }
  
  @Pure
  public String getFileName() {
    return this.fileName;
  }
  
  public void setFileName(final String fileName) {
    this.fileName = fileName;
  }
}
