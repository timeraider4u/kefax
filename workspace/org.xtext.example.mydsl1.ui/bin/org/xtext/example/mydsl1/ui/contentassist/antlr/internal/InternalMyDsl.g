/*
 * generated by Xtext 2.9.0-SNAPSHOT
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	
	
	 forceHoisting=true;
	
}

@lexer::header {
package org.xtext.example.mydsl1.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl1.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl1.services.MyDslGrammarAccess;

}

@parser::members {
 
 	private MyDslGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
		
    }
	@after {
    		
     }:

(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)
{ after(grammarAccess.getModelAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGreeting
entryRuleGreeting 
:
{ before(grammarAccess.getGreetingRule()); }
	 ruleGreeting
{ after(grammarAccess.getGreetingRule()); } 
	 EOF 
;

// Rule Greeting
ruleGreeting
    @init {
		int stackSize = keepStackSize();
		System.out.println("Greeting - initRuleAction");
    }
	@after {
    		System.out.println("Greeting - afterRuleaction");
     }:

(
{ before(grammarAccess.getGreetingAccess().getGroup()); }
(rule__Greeting__Group__0)
{ after(grammarAccess.getGreetingAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTest
entryRuleTest 
:
{ before(grammarAccess.getTestRule()); }
	 ruleTest
{ after(grammarAccess.getTestRule()); } 
	 EOF 
;

// Rule Test
ruleTest
    @init {
		int stackSize = keepStackSize();
		System.out.println("test-in");
    }
	@after {
    		
     }:

(
{ before(grammarAccess.getTestAccess().getGroup()); }
(rule__Test__Group__0)
{ after(grammarAccess.getTestAccess().getGroup()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePre
entryRulePre 
:
{ before(grammarAccess.getPreRule()); }
	 rulePre
{ after(grammarAccess.getPreRule()); } 
	 EOF 
;

// Rule Pre
rulePre
    @init {
		int stackSize = keepStackSize();
		
    }
	@after {
    		
     }:
{System.out.println("pre");}

(
{ before(grammarAccess.getPreAccess().getPreKeyword()); }

	'pre' 

{ after(grammarAccess.getPreAccess().getPreKeyword()); }
)

{System.out.println("post");}


;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReset
entryRuleReset 
:
{ before(grammarAccess.getResetRule()); }
	 ruleReset
{ after(grammarAccess.getResetRule()); } 
	 EOF 
;

// Rule Reset
ruleReset
    @init {
		int stackSize = keepStackSize();
		
    }
	@after {
    		
     }:

(
{ before(grammarAccess.getResetAccess().getResetAssignment()); }
(rule__Reset__ResetAssignment)
{ after(grammarAccess.getResetAccess().getResetAssignment()); }
)

{org.xtext.example.mydsl1.TestScope.reset();}


;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInc
entryRuleInc 
:
{ before(grammarAccess.getIncRule()); }
	 ruleInc
{ after(grammarAccess.getIncRule()); } 
	 EOF 
;

// Rule Inc
ruleInc
    @init {
		int stackSize = keepStackSize();
		
    }
	@after {
    		
     }:

(
{ before(grammarAccess.getIncAccess().getIncAssignment()); }
(rule__Inc__IncAssignment)
{ after(grammarAccess.getIncAccess().getIncAssignment()); }
)

{org.xtext.example.mydsl1.TestScope.inc();}


;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDynamic
entryRuleDynamic 
:
{ before(grammarAccess.getDynamicRule()); }
	 ruleDynamic
{ after(grammarAccess.getDynamicRule()); } 
	 EOF 
;

// Rule Dynamic
ruleDynamic
    @init {
		int stackSize = keepStackSize();
		
    }
	@after {
    		
     }:

(
{ before(grammarAccess.getDynamicAccess().getAlternatives()); }
(rule__Dynamic__Alternatives)
{ after(grammarAccess.getDynamicAccess().getAlternatives()); }
)



;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeA
entryRuleTypeA 
:
{ before(grammarAccess.getTypeARule()); }
	 ruleTypeA
{ after(grammarAccess.getTypeARule()); } 
	 EOF 
;

// Rule TypeA
ruleTypeA
    @init {
		int stackSize = keepStackSize();
		
    }
	@after {
    		
     }:

(
{ before(grammarAccess.getTypeAAccess().getTypeAssignment()); }
(rule__TypeA__TypeAssignment)
{ after(grammarAccess.getTypeAAccess().getTypeAssignment()); }
)

{System.out.println("TypeA");}


;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeB
entryRuleTypeB 
:
{ before(grammarAccess.getTypeBRule()); }
	 ruleTypeB
{ after(grammarAccess.getTypeBRule()); } 
	 EOF 
;

// Rule TypeB
ruleTypeB
    @init {
		int stackSize = keepStackSize();
		
    }
	@after {
    		
     }:
{org.xtext.example.mydsl1.TestScope.isValid()}?

(
{ before(grammarAccess.getTypeBAccess().getTypeAssignment()); }
(rule__TypeB__TypeAssignment)
{ after(grammarAccess.getTypeBAccess().getTypeAssignment()); }
)

{System.out.println("TypeB");}


;
finally {
	restoreStackSize(stackSize);
}




rule__Dynamic__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getDynamicAccess().getTypeAssignment_0()); }
(rule__Dynamic__TypeAssignment_0)
{ after(grammarAccess.getDynamicAccess().getTypeAssignment_0()); }
)



    |
(
{ before(grammarAccess.getDynamicAccess().getTypeAssignment_1()); }
(rule__Dynamic__TypeAssignment_1)
{ after(grammarAccess.getDynamicAccess().getTypeAssignment_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getModelAccess().getModelAction_0()); }
(

)
{ after(grammarAccess.getModelAccess().getModelAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
(
{ before(grammarAccess.getModelAccess().getGreetingsAssignment_1()); }
(rule__Model__GreetingsAssignment_1)
{ after(grammarAccess.getModelAccess().getGreetingsAssignment_1()); }
)
(
{ before(grammarAccess.getModelAccess().getGreetingsAssignment_1()); }
(rule__Model__GreetingsAssignment_1)*
{ after(grammarAccess.getModelAccess().getGreetingsAssignment_1()); }
)
)



;
finally {
	restoreStackSize(stackSize);
}






rule__Greeting__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Greeting__Group__0__Impl
	rule__Greeting__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getGreetingAccess().getGreetingAction_0()); }
(

)
{ after(grammarAccess.getGreetingAccess().getGreetingAction_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Greeting__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Greeting__Group__1__Impl
	rule__Greeting__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getGreetingAccess().getHelloKeyword_1()); }

	'Hello' 

{ after(grammarAccess.getGreetingAccess().getHelloKeyword_1()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Greeting__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Greeting__Group__2__Impl
	rule__Greeting__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getGreetingAccess().getNameAssignment_2()); }
(rule__Greeting__NameAssignment_2)
{ after(grammarAccess.getGreetingAccess().getNameAssignment_2()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Greeting__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Greeting__Group__3__Impl
	rule__Greeting__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
{System.out.println("preAction-Hello");}

(
{ before(grammarAccess.getGreetingAccess().getExclamationMarkKeyword_3()); }

	'!' 

{ after(grammarAccess.getGreetingAccess().getExclamationMarkKeyword_3()); }
)

{System.out.println("postAction-Hello");}


;
finally {
	restoreStackSize(stackSize);
}


rule__Greeting__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Greeting__Group__4__Impl
	rule__Greeting__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getGreetingAccess().getTestAssignment_4()); }
(rule__Greeting__TestAssignment_4)
{ after(grammarAccess.getGreetingAccess().getTestAssignment_4()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Greeting__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Greeting__Group__5__Impl
	rule__Greeting__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getGreetingAccess().getPreParserRuleCall_5()); }
(	rulePre)?
{ after(grammarAccess.getGreetingAccess().getPreParserRuleCall_5()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Greeting__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Greeting__Group__6__Impl
	rule__Greeting__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getGreetingAccess().getResetAssignment_6()); }
(rule__Greeting__ResetAssignment_6)?
{ after(grammarAccess.getGreetingAccess().getResetAssignment_6()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Greeting__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Greeting__Group__7__Impl
	rule__Greeting__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getGreetingAccess().getIncAssignment_7()); }
(rule__Greeting__IncAssignment_7)*
{ after(grammarAccess.getGreetingAccess().getIncAssignment_7()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Greeting__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Greeting__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getGreetingAccess().getDynamicAssignment_8()); }
(rule__Greeting__DynamicAssignment_8)?
{ after(grammarAccess.getGreetingAccess().getDynamicAssignment_8()); }
)



;
finally {
	restoreStackSize(stackSize);
}




















rule__Test__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Test__Group__0__Impl
	rule__Test__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:

(
{ before(grammarAccess.getTestAccess().getTestKeyword_0()); }

	'Test' 

{ after(grammarAccess.getTestAccess().getTestKeyword_0()); }
)



;
finally {
	restoreStackSize(stackSize);
}


rule__Test__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Test__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
{System.out.println("preAction-Test");}

(
{ before(grammarAccess.getTestAccess().getNameAssignment_1()); }
(rule__Test__NameAssignment_1)
{ after(grammarAccess.getTestAccess().getNameAssignment_1()); }
)

{System.out.println("postAction-Test");}


;
finally {
	restoreStackSize(stackSize);
}







rule__Model__GreetingsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getGreetingsGreetingParserRuleCall_1_0()); }
	ruleGreeting{ after(grammarAccess.getModelAccess().getGreetingsGreetingParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGreetingAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getGreetingAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__TestAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGreetingAccess().getTestTestParserRuleCall_4_0()); }
	ruleTest{ after(grammarAccess.getGreetingAccess().getTestTestParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__ResetAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGreetingAccess().getResetResetParserRuleCall_6_0()); }
	ruleReset{ after(grammarAccess.getGreetingAccess().getResetResetParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__IncAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGreetingAccess().getIncIncParserRuleCall_7_0()); }
	ruleInc{ after(grammarAccess.getGreetingAccess().getIncIncParserRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__DynamicAssignment_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGreetingAccess().getDynamicDynamicParserRuleCall_8_0()); }
	ruleDynamic{ after(grammarAccess.getGreetingAccess().getDynamicDynamicParserRuleCall_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Test__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getTestAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Reset__ResetAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResetAccess().getResetResetKeyword_0()); }

(
{ before(grammarAccess.getResetAccess().getResetResetKeyword_0()); }

	'reset' 

{ after(grammarAccess.getResetAccess().getResetResetKeyword_0()); }
)



{ after(grammarAccess.getResetAccess().getResetResetKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Inc__IncAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncAccess().getIncIncKeyword_0()); }

(
{ before(grammarAccess.getIncAccess().getIncIncKeyword_0()); }

	'inc' 

{ after(grammarAccess.getIncAccess().getIncIncKeyword_0()); }
)



{ after(grammarAccess.getIncAccess().getIncIncKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Dynamic__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDynamicAccess().getTypeTypeAParserRuleCall_0_0()); }
	ruleTypeA{ after(grammarAccess.getDynamicAccess().getTypeTypeAParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Dynamic__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDynamicAccess().getTypeTypeBParserRuleCall_1_0()); }
	ruleTypeB{ after(grammarAccess.getDynamicAccess().getTypeTypeBParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeA__TypeAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAAccess().getTypeTypeKeyword_0()); }

(
{ before(grammarAccess.getTypeAAccess().getTypeTypeKeyword_0()); }

	'type' 

{ after(grammarAccess.getTypeAAccess().getTypeTypeKeyword_0()); }
)



{ after(grammarAccess.getTypeAAccess().getTypeTypeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeB__TypeAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeBAccess().getTypeTypeKeyword_0()); }

(
{ before(grammarAccess.getTypeBAccess().getTypeTypeKeyword_0()); }

	'type' 

{ after(grammarAccess.getTypeBAccess().getTypeTypeKeyword_0()); }
)



{ after(grammarAccess.getTypeBAccess().getTypeTypeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


