/*
 * generated by Xtext 2.9.0-SNAPSHOT
 */
package org.xtext.example.mydsl1.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractParserRuleElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cGreetingsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGreetingsGreetingParserRuleCall_1_0 = (RuleCall)cGreetingsAssignment_1.eContents().get(0);
		
		//Model:
		//	{Model} greetings+=Greeting+;
		@Override public ParserRule getRule() { return rule; }
		
		//{Model} greetings+=Greeting+
		public Group getGroup() { return cGroup; }
		
		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }
		
		//greetings+=Greeting+
		public Assignment getGreetingsAssignment_1() { return cGreetingsAssignment_1; }
		
		//Greeting
		public RuleCall getGreetingsGreetingParserRuleCall_1_0() { return cGreetingsGreetingParserRuleCall_1_0; }
	}
	public class GreetingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Greeting");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGreetingAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHelloKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTestAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTestTestParserRuleCall_4_0 = (RuleCall)cTestAssignment_4.eContents().get(0);
		private final RuleCall cPreParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cResetAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cResetResetParserRuleCall_6_0 = (RuleCall)cResetAssignment_6.eContents().get(0);
		private final Assignment cIncAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cIncIncParserRuleCall_7_0 = (RuleCall)cIncAssignment_7.eContents().get(0);
		private final Assignment cDynamicAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cDynamicDynamicParserRuleCall_8_0 = (RuleCall)cDynamicAssignment_8.eContents().get(0);
		
		//Greeting initRuleAction { System.out.println("Greeting - initRuleAction"); } afterRuleAction {
		//System.out.println("Greeting - afterRuleaction"); }:
		//	{Greeting}
		//	'Hello' name=ID '!'
		//	preAction{ { System.out.println("preAction-Hello"); } } postAction{ { System.out.println("postAction-Hello"); } }
		//	test=Test
		//	Pre?
		//	reset=Reset?
		//	inc+=Inc*
		//	dynamic=Dynamic?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Greeting} 'Hello' name=ID '!' preAction{ { System.out.println("preAction-Hello"); } } postAction{ {
		//System.out.println("postAction-Hello"); } } test=Test Pre? reset=Reset? inc+=Inc* dynamic=Dynamic?
		public Group getGroup() { return cGroup; }
		
		//{Greeting}
		public Action getGreetingAction_0() { return cGreetingAction_0; }
		
		//'Hello'
		public Keyword getHelloKeyword_1() { return cHelloKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'!' preAction{ { System.out.println("preAction-Hello"); } } postAction{ { System.out.println("postAction-Hello"); } }
		public Keyword getExclamationMarkKeyword_3() { return cExclamationMarkKeyword_3; }
		
		//test=Test
		public Assignment getTestAssignment_4() { return cTestAssignment_4; }
		
		//Test
		public RuleCall getTestTestParserRuleCall_4_0() { return cTestTestParserRuleCall_4_0; }
		
		//Pre?
		public RuleCall getPreParserRuleCall_5() { return cPreParserRuleCall_5; }
		
		//reset=Reset?
		public Assignment getResetAssignment_6() { return cResetAssignment_6; }
		
		//Reset
		public RuleCall getResetResetParserRuleCall_6_0() { return cResetResetParserRuleCall_6_0; }
		
		//inc+=Inc*
		public Assignment getIncAssignment_7() { return cIncAssignment_7; }
		
		//Inc
		public RuleCall getIncIncParserRuleCall_7_0() { return cIncIncParserRuleCall_7_0; }
		
		//dynamic=Dynamic?
		public Assignment getDynamicAssignment_8() { return cDynamicAssignment_8; }
		
		//Dynamic
		public RuleCall getDynamicDynamicParserRuleCall_8_0() { return cDynamicDynamicParserRuleCall_8_0; }
	}
	public class TestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Test");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Test initRuleAction { System.out.println("test-in"); }:
		//	'Test' name=ID
		//	preAction{ { System.out.println("preAction-Test"); } } postAction{ { System.out.println("postAction-Test"); } };
		@Override public ParserRule getRule() { return rule; }
		
		//'Test' name=ID preAction{ { System.out.println("preAction-Test"); } } postAction{ {
		//System.out.println("postAction-Test"); } }
		public Group getGroup() { return cGroup; }
		
		//'Test'
		public Keyword getTestKeyword_0() { return cTestKeyword_0; }
		
		//name=ID preAction{ { System.out.println("preAction-Test"); } } postAction{ { System.out.println("postAction-Test"); } }
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class PreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Pre");
		private final Keyword cPreKeyword = (Keyword)rule.eContents().get(1);
		
		//Pre:
		//	'pre'
		//	preAction{ { System.out.println("pre"); } } postAction{ { System.out.println("post"); } };
		@Override public ParserRule getRule() { return rule; }
		
		//'pre' preAction{ { System.out.println("pre"); } } postAction{ { System.out.println("post"); } }
		public Keyword getPreKeyword() { return cPreKeyword; }
	}
	public class ResetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Reset");
		private final Assignment cResetAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cResetResetKeyword_0 = (Keyword)cResetAssignment.eContents().get(0);
		
		//Reset:
		//	reset='reset' postAction{ { org.xtext.example.mydsl1.TestScope.reset(); } };
		@Override public ParserRule getRule() { return rule; }
		
		//reset='reset' postAction{ { org.xtext.example.mydsl1.TestScope.reset(); } }
		public Assignment getResetAssignment() { return cResetAssignment; }
		
		//'reset'
		public Keyword getResetResetKeyword_0() { return cResetResetKeyword_0; }
	}
	public class IncElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Inc");
		private final Assignment cIncAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cIncIncKeyword_0 = (Keyword)cIncAssignment.eContents().get(0);
		
		//Inc:
		//	inc='inc'
		//	postAction{ { org.xtext.example.mydsl1.TestScope.inc(); } };
		@Override public ParserRule getRule() { return rule; }
		
		//inc='inc' postAction{ { org.xtext.example.mydsl1.TestScope.inc(); } }
		public Assignment getIncAssignment() { return cIncAssignment; }
		
		//'inc'
		public Keyword getIncIncKeyword_0() { return cIncIncKeyword_0; }
	}
	public class DynamicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Dynamic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTypeTypeAParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTypeTypeBParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//Dynamic:
		//	type=TypeA | type=TypeB // preAction{ { TestScope.isValid(); }? }
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type=TypeA | type=TypeB
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//type=TypeA
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//TypeA
		public RuleCall getTypeTypeAParserRuleCall_0_0() { return cTypeTypeAParserRuleCall_0_0; }
		
		//type=TypeB
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//TypeB
		public RuleCall getTypeTypeBParserRuleCall_1_0() { return cTypeTypeBParserRuleCall_1_0; }
	}
	public class TypeAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.TypeA");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cTypeTypeKeyword_0 = (Keyword)cTypeAssignment.eContents().get(0);
		
		//TypeA:
		//	type='type' postAction{ { System.out.println("TypeA"); } };
		@Override public ParserRule getRule() { return rule; }
		
		//type='type' postAction{ { System.out.println("TypeA"); } }
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//'type'
		public Keyword getTypeTypeKeyword_0() { return cTypeTypeKeyword_0; }
	}
	public class TypeBElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.TypeB");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cTypeTypeKeyword_0 = (Keyword)cTypeAssignment.eContents().get(0);
		
		//TypeB:
		//	type='type'
		//	preAction{ { org.xtext.example.mydsl1.TestScope.isValid() } ? } postAction{ { System.out.println("TypeB"); } };
		@Override public ParserRule getRule() { return rule; }
		
		//type='type' preAction{ { org.xtext.example.mydsl1.TestScope.isValid() } ? } postAction{ { System.out.println("TypeB"); }
		//}
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//'type'
		public Keyword getTypeTypeKeyword_0() { return cTypeTypeKeyword_0; }
	}
	
	
	private final ModelElements pModel;
	private final GreetingElements pGreeting;
	private final TestElements pTest;
	private final PreElements pPre;
	private final ResetElements pReset;
	private final IncElements pInc;
	private final DynamicElements pDynamic;
	private final TypeAElements pTypeA;
	private final TypeBElements pTypeB;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pGreeting = new GreetingElements();
		this.pTest = new TestElements();
		this.pPre = new PreElements();
		this.pReset = new ResetElements();
		this.pInc = new IncElements();
		this.pDynamic = new DynamicElements();
		this.pTypeA = new TypeAElements();
		this.pTypeB = new TypeBElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl1.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	{Model} greetings+=Greeting+;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Greeting initRuleAction { System.out.println("Greeting - initRuleAction"); } afterRuleAction {
	//System.out.println("Greeting - afterRuleaction"); }:
	//	{Greeting}
	//	'Hello' name=ID '!'
	//	preAction{ { System.out.println("preAction-Hello"); } } postAction{ { System.out.println("postAction-Hello"); } }
	//	test=Test
	//	Pre?
	//	reset=Reset?
	//	inc+=Inc*
	//	dynamic=Dynamic?;
	public GreetingElements getGreetingAccess() {
		return pGreeting;
	}
	
	public ParserRule getGreetingRule() {
		return getGreetingAccess().getRule();
	}
	
	//Test initRuleAction { System.out.println("test-in"); }:
	//	'Test' name=ID
	//	preAction{ { System.out.println("preAction-Test"); } } postAction{ { System.out.println("postAction-Test"); } };
	public TestElements getTestAccess() {
		return pTest;
	}
	
	public ParserRule getTestRule() {
		return getTestAccess().getRule();
	}
	
	//Pre:
	//	'pre'
	//	preAction{ { System.out.println("pre"); } } postAction{ { System.out.println("post"); } };
	public PreElements getPreAccess() {
		return pPre;
	}
	
	public ParserRule getPreRule() {
		return getPreAccess().getRule();
	}
	
	//Reset:
	//	reset='reset' postAction{ { org.xtext.example.mydsl1.TestScope.reset(); } };
	public ResetElements getResetAccess() {
		return pReset;
	}
	
	public ParserRule getResetRule() {
		return getResetAccess().getRule();
	}
	
	//Inc:
	//	inc='inc'
	//	postAction{ { org.xtext.example.mydsl1.TestScope.inc(); } };
	public IncElements getIncAccess() {
		return pInc;
	}
	
	public ParserRule getIncRule() {
		return getIncAccess().getRule();
	}
	
	//Dynamic:
	//	type=TypeA | type=TypeB // preAction{ { TestScope.isValid(); }? }
	//;
	public DynamicElements getDynamicAccess() {
		return pDynamic;
	}
	
	public ParserRule getDynamicRule() {
		return getDynamicAccess().getRule();
	}
	
	//TypeA:
	//	type='type' postAction{ { System.out.println("TypeA"); } };
	public TypeAElements getTypeAAccess() {
		return pTypeA;
	}
	
	public ParserRule getTypeARule() {
		return getTypeAAccess().getRule();
	}
	
	//TypeB:
	//	type='type'
	//	preAction{ { org.xtext.example.mydsl1.TestScope.isValid() } ? } postAction{ { System.out.println("TypeB"); } };
	public TypeBElements getTypeBAccess() {
		return pTypeB;
	}
	
	public ParserRule getTypeBRule() {
		return getTypeBAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
