/**
 * generated by Xtext 2.9.0-SNAPSHOT
 */
package at.jku.weiner.kefax.kbuild.formatting2;

import at.jku.weiner.kefax.kbuild.kbuild.Assign;
import at.jku.weiner.kefax.kbuild.kbuild.AssignExtra;
import at.jku.weiner.kefax.kbuild.kbuild.BuildEntry;
import at.jku.weiner.kefax.kbuild.kbuild.Entry;
import at.jku.weiner.kefax.kbuild.kbuild.HostProgram;
import at.jku.weiner.kefax.kbuild.kbuild.If;
import at.jku.weiner.kefax.kbuild.kbuild.IfEq;
import at.jku.weiner.kefax.kbuild.kbuild.IfNEq;
import at.jku.weiner.kefax.kbuild.kbuild.Ifndef;
import at.jku.weiner.kefax.kbuild.kbuild.Model;
import at.jku.weiner.kefax.kbuild.kbuild.MyVariable;
import at.jku.weiner.kefax.kbuild.kbuild.Obj_m;
import at.jku.weiner.kefax.kbuild.kbuild.Obj_y;
import at.jku.weiner.kefax.kbuild.kbuild.ObjectShellCmd;
import at.jku.weiner.kefax.kbuild.kbuild.ObjectVariable;
import at.jku.weiner.kefax.kbuild.kbuild.ShellCmd;
import at.jku.weiner.kefax.kbuild.kbuild.ShellPart;
import at.jku.weiner.kefax.kbuild.kbuild.Target;
import at.jku.weiner.kefax.kbuild.kbuild.Value;
import at.jku.weiner.kefax.kbuild.kbuild.Values;
import at.jku.weiner.kefax.kbuild.kbuild.VarSlashSym;
import at.jku.weiner.kefax.kbuild.kbuild.Variable;
import at.jku.weiner.kefax.kbuild.services.KbuildGrammarAccess;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class KbuildFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private KbuildGrammarAccess _kbuildGrammarAccess;
  
  protected void _format(final Model model, @Extension final IFormattableDocument document) {
    EList<BuildEntry> _buildEntry = model.getBuildEntry();
    for (final BuildEntry buildEntry : _buildEntry) {
      this.format(buildEntry, document);
    }
  }
  
  protected void _format(final BuildEntry buildEntry, @Extension final IFormattableDocument document) {
    EObject _value = buildEntry.getValue();
    this.format(_value, document);
  }
  
  protected void _format(final IfEq ifEq, @Extension final IFormattableDocument document) {
    EObject _value = ifEq.getValue();
    this.format(_value, document);
  }
  
  protected void _format(final IfNEq ifNEq, @Extension final IFormattableDocument document) {
    EObject _value = ifNEq.getValue();
    this.format(_value, document);
  }
  
  protected void _format(final Ifndef ifndef, @Extension final IFormattableDocument document) {
    EObject _value = ifndef.getValue();
    this.format(_value, document);
  }
  
  protected void _format(final HostProgram hostProgram, @Extension final IFormattableDocument document) {
    Variable _variable = hostProgram.getVariable();
    this.format(_variable, document);
    EObject _value = hostProgram.getValue();
    this.format(_value, document);
    Assign _inner = hostProgram.getInner();
    this.format(_inner, document);
  }
  
  protected void _format(final at.jku.weiner.kefax.kbuild.kbuild.Object object, @Extension final IFormattableDocument document) {
    EObject _value = object.getValue();
    this.format(_value, document);
  }
  
  protected void _format(final Target target, @Extension final IFormattableDocument document) {
    Values _target = target.getTarget();
    this.format(_target, document);
    EList<Values> _values = target.getValues();
    for (final Values values : _values) {
      this.format(values, document);
    }
  }
  
  protected void _format(final MyVariable myVariable, @Extension final IFormattableDocument document) {
    Variable _variable = myVariable.getVariable();
    this.format(_variable, document);
    EObject _value = myVariable.getValue();
    this.format(_value, document);
  }
  
  protected void _format(final Entry entry, @Extension final IFormattableDocument document) {
    Variable _variable = entry.getVariable();
    this.format(_variable, document);
    AssignExtra _value = entry.getValue();
    this.format(_value, document);
  }
  
  protected void _format(final If _if, @Extension final IFormattableDocument document) {
    ShellCmd _shell = _if.getShell();
    this.format(_shell, document);
    EObject _value = _if.getValue();
    this.format(_value, document);
    EObject _elsevalue = _if.getElsevalue();
    this.format(_elsevalue, document);
  }
  
  protected void _format(final Obj_y obj_y, @Extension final IFormattableDocument document) {
    AssignExtra _value = obj_y.getValue();
    this.format(_value, document);
  }
  
  protected void _format(final Obj_m obj_m, @Extension final IFormattableDocument document) {
    AssignExtra _value = obj_m.getValue();
    this.format(_value, document);
  }
  
  protected void _format(final Values values, @Extension final IFormattableDocument document) {
    EList<Value> _items = values.getItems();
    for (final Value items : _items) {
      this.format(items, document);
    }
  }
  
  protected void _format(final ObjectVariable objectVariable, @Extension final IFormattableDocument document) {
    Variable _value = objectVariable.getValue();
    this.format(_value, document);
  }
  
  protected void _format(final ObjectShellCmd objectShellCmd, @Extension final IFormattableDocument document) {
    ShellCmd _value = objectShellCmd.getValue();
    this.format(_value, document);
  }
  
  protected void _format(final ShellCmd shellCmd, @Extension final IFormattableDocument document) {
    EList<ShellPart> _shellPart = shellCmd.getShellPart();
    for (final ShellPart shellPart : _shellPart) {
      this.format(shellPart, document);
    }
  }
  
  protected void _format(final ShellPart shellPart, @Extension final IFormattableDocument document) {
    VarSlashSym _val = shellPart.getVal();
    this.format(_val, document);
    ShellCmd _cmd = shellPart.getCmd();
    this.format(_cmd, document);
  }
  
  public void format(final Object values, final IFormattableDocument document) {
    if (values instanceof Values) {
      _format((Values)values, document);
      return;
    } else if (values instanceof XtextResource) {
      _format((XtextResource)values, document);
      return;
    } else if (values instanceof HostProgram) {
      _format((HostProgram)values, document);
      return;
    } else if (values instanceof IfEq) {
      _format((IfEq)values, document);
      return;
    } else if (values instanceof IfNEq) {
      _format((IfNEq)values, document);
      return;
    } else if (values instanceof Ifndef) {
      _format((Ifndef)values, document);
      return;
    } else if (values instanceof MyVariable) {
      _format((MyVariable)values, document);
      return;
    } else if (values instanceof Obj_m) {
      _format((Obj_m)values, document);
      return;
    } else if (values instanceof Obj_y) {
      _format((Obj_y)values, document);
      return;
    } else if (values instanceof at.jku.weiner.kefax.kbuild.kbuild.Object) {
      _format((at.jku.weiner.kefax.kbuild.kbuild.Object)values, document);
      return;
    } else if (values instanceof ObjectShellCmd) {
      _format((ObjectShellCmd)values, document);
      return;
    } else if (values instanceof ObjectVariable) {
      _format((ObjectVariable)values, document);
      return;
    } else if (values instanceof Target) {
      _format((Target)values, document);
      return;
    } else if (values instanceof BuildEntry) {
      _format((BuildEntry)values, document);
      return;
    } else if (values instanceof Entry) {
      _format((Entry)values, document);
      return;
    } else if (values instanceof If) {
      _format((If)values, document);
      return;
    } else if (values instanceof Model) {
      _format((Model)values, document);
      return;
    } else if (values instanceof ShellCmd) {
      _format((ShellCmd)values, document);
      return;
    } else if (values instanceof ShellPart) {
      _format((ShellPart)values, document);
      return;
    } else if (values == null) {
      _format((Void)null, document);
      return;
    } else if (values != null) {
      _format(values, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(values, document).toString());
    }
  }
}
