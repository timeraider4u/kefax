--- InternalC.g.original	2015-09-11 18:24:43.608955391 +0200
+++ InternalC.g	2015-09-11 18:41:02.631914446 +0200
@@ -26,7 +26,6 @@
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
-
 /*
  * generated by Xtext
  */
@@ -34,7 +33,7 @@
 
 options {
 	superClass=AbstractInternalAntlrParser;
-	
+	forceHoisting=true;	
 }
 
 @lexer::header {
@@ -58,7 +57,6 @@
 import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
 import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
 import at.jku.isse.ecco.kefax.c.services.CGrammarAccess;
-
 }
 
 @parser::members {
@@ -80,6 +78,9 @@
    	protected CGrammarAccess getGrammarAccess() {
    		return grammarAccess;
    	}
+   	
+	private final Scope typeDefScope = new Scope();
+	
 }
 
 @rulecatch { 
@@ -89,9 +90,6 @@
     } 
 }
 
-
-
-
 // Entry rule entryRuleModel
 entryRuleModel returns [EObject current=null] 
 	:
@@ -152,9 +150,9 @@
 
 // Rule translationUnit
 ruletranslationUnit returns [EObject current=null] 
-    @init { enterRule(); 
+    @init { this.typeDefScope.createNewScope("translationUnit"); enterRule(); 
     }
-    @after { leaveRule(); }:
+    @after { this.typeDefScope.removeScope(); leaveRule(); }:
 (
 (
 		{ 
@@ -547,6 +545,7 @@
     }
 )(this_TYPEDEF_1=RULE_TYPEDEF
     { 
+    this.typeDefScope.setTypedef(true); 
     newLeafNode(this_TYPEDEF_1, grammarAccess.getStorageClassSpecifierAccess().getTYPEDEFTerminalRuleCall_1_0()); 
     }
 
@@ -805,6 +804,11 @@
 (
 		lv_id_1_0=RULE_ID
 		{
+			if (this.typeDefScope.isTypedef()) {
+						this.typeDefScope.addTypedef(input.get(0).getText());
+			}
+		}
+		{
 			newLeafNode(lv_id_1_0, grammarAccess.getDirectDeclaratorAccess().getIdIDTerminalRuleCall_1_0_0()); 
 		}
 		{
@@ -867,6 +871,8 @@
     @init { enterRule(); 
     }
     @after { leaveRule(); }:
+    
+    {this.typeDefScope.isTypeName(input.LT(1).getText())}?
 (
 (
 		lv_id_0_0=RULE_ID
